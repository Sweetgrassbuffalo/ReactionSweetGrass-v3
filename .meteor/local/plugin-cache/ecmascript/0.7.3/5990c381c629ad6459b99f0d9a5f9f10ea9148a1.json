{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"sweetalert2","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Alert"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/email/client/actions/settings.js","filenameRelative":"/imports/plugins/core/email/client/actions/settings.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/email/client/actions/settings.js"],"names":["Alert","i18next","saveSettings","settings","callback","service","host","port","user","password","t","Number","isNaN","save","Meteor","call","err","error","reason","title","text","type","timer","catch","showCancelButton","cancelButtonText","confirmButtonColor","confirmButtonText","then"],"mappings":"AAAA;AAAA,OAAkB,WAAlB;;;;;;;;;;GACA,AAAS,AAAe,AAExB,AAAe,AACb;OAJK;AAUL,AAAa,AAAU,AAAU,AAC/B,AAAM,AAAE;;;;;KAAF;AAAA,AAAW;eAAX,AAAiB,AAAM;;;;;SAAvB,SAA6B;6EAA7B;AAA0C,aAAhD;AAEA,AAAI,AAAC,AAAS,AACZ;;QAAM,YAAA,AAAQ,AAAE,aAAV,CAAN,AAA8B,SAAA,AAAQ,AAAE,WAAxC,AAA8B,AAAyC,AACvE;YAAO,UAAP;;UACD;;AAED,AAAI,AAAY,AAAa,AAAC,AAAQ,AAAC,AAAW,AAChD;;QAAM,YAAA,AAAQ,AAAE,aAAV,CAAN,AAA8B,SAAA,AAAQ,AAAE,6BAAV,AAA0C,AAAE;gFAAF;AAAxE,AAA8B,AAAwD,aAAtF,AACA;AAAA,AAAO,AACR,MAED;;;AAAI,oBAAY,OAAZ,AAAyB,AAAC,SAA9B,AAAI,AAAyB,AAAS,AAAC,AAAQ,AAAC,AAAQ,AAAC,AAAW,AAClE,AAAM,AAAQ,AAAE,AAAc,AAAQ,AAAE,AAAkC,AAC1E;;QAAO,eAAP,OAf6B,AAgB9B;AAED;;AACA,AAAS,AAAO,AAAO,AAAS;;2BAEhC;AAAI,aAAM,KAAV,AAAI,AAAe,AAAO,+CACxB;YAAM,KAAN,AAAM,AAAQ,AAAE,AAAc,AAAQ,AAAE,AAAwB,AAChE;AAAO,uBAAP,UACD;;cAED;AAAM,AAAO,AAAM,AACjB;;AAAO;AACL,AAAI,iBAAK,UACP;gBAAO,AAAM,UAAN,AAAM,AAAQ,AAAE,AACrB,AAAQ,AAAE,AAA0B,AAAE;gBAAF,AAAS,AAAI;AAD5C,AACL,AACA,iBAFF,AAAO,AAGR;AALH,AAAkC,AAAU,AAAC,AAAQ,AACnD,SADF,AAAY;;;AAMV;AAAO,AAAM,AACX,AAAO,AAAQ,AAAE,AACjB,OAFW,AAEL,AAAQ,AAAE,AAChB;;;gBAHW,AAGL;AAHK,AAIJ,iBAAP,CAJF,AAAO,AAKJ,AAAM,AAAM,AAChB;;AAZD,iBA3B6B,AA0B/B,AAcC,AAED;;;0BACA;AAAA,AAAO,gBAAP,AAAY,AAAwB,AAAU,AAAC,AAAU,AACvD;AADuD,AAEvD;sCACA;AAAA,AAAI,AAAO,8BACT;AAAM,uCACJ;;AAAO,iBAAA,AAAQ,AAAE;;iBADb,AACG,AACP;;aAFI,AAEE,AAAQ,AAAE,AAChB;AAHI,AAGE,AACN;AAJI,AAIc,AAClB;AALI,AAKc,AAAQ,AAAE,AAC5B,AAAoB,AACpB;WAPI,AAOe,AAAQ,AAAE;AA7DvC,AAAe,AAkDX,AAGE,AACE,AAQG,AAAK,AAAM,AAAQ,AAAM,AAAM,AACnC,AAAM,AACL,AACD,AACF,AAED,AAAO,AACR","file":"/imports/plugins/core/email/client/actions/settings.js.map","sourcesContent":["import Alert from \"sweetalert2\";\nimport { i18next } from \"/client/api\";\n\nexport default {\n  /**\n   * Save email settings\n   * @param {Object} settings - object of mail provider settings\n   * @param {Function} callback - optional callback\n   * @return {Boolean} returns true if all fields provided and update method called\n   */\n  saveSettings(settings, callback) {\n    const { service, host, port, user, password } = settings;\n\n    if (!service) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.missingService\"), \"error\");\n      return callback();\n    }\n\n    if (service !== \"custom\" && (!user || !password)) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.userPassRequired\", { service }), \"error\");\n      return callback();\n    }\n\n    if (service === \"custom\" && (!host || !port || !user || !password)) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.allFieldsRequired\"), \"error\");\n      return callback();\n    }\n\n    // make sure port is a Number\n    settings.port = Number(settings.port);\n\n    if (isNaN(settings.port)) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.portNaN\"), \"error\");\n      return callback();\n    }\n\n    const save = () => {\n      Meteor.call(\"email/saveSettings\", settings, (err) => {\n        if (err) {\n          return Alert(i18next.t(\"app.error\"),\n            i18next.t(\"mail.alerts.saveFailed\", { error: err.reason }),\n            \"error\");\n        }\n        return Alert({\n          title: i18next.t(\"app.success\"),\n          text: i18next.t(\"mail.alerts.saveSuccess\"),\n          type: \"success\",\n          timer: 1700\n        }).catch(() => null);\n      });\n    };\n\n    // check if the settings work first\n    Meteor.call(\"email/verifySettings\", settings, (error) => {\n      callback();\n      // if the connection fails\n      if (error) {\n        Alert({\n          title: i18next.t(\"mail.alerts.connectionFailed\"),\n          text: i18next.t(\"mail.alerts.saveAnyway\"),\n          type: \"warning\",\n          showCancelButton: true,\n          cancelButtonText: i18next.t(\"app.cancel\"),\n          confirmButtonColor: \"#DD6B55\",\n          confirmButtonText: i18next.t(\"app.save\")\n        }).then(() => save()).catch(() => true);\n      } else {\n        save();\n      }\n    });\n\n    return true;\n  }\n};\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/email/client/actions/settings.js.map","sourceFileName":"/imports/plugins/core/email/client/actions/settings.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"settings"},"ignored":false,"code":"var Alert = void 0;\nmodule.importSync(\"sweetalert2\", {\n  \"default\": function (v) {\n    Alert = v;\n  }\n}, 0);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 1);\nmodule.export(\"default\", exports.default = {\n  /**\n   * Save email settings\n   * @param {Object} settings - object of mail provider settings\n   * @param {Function} callback - optional callback\n   * @return {Boolean} returns true if all fields provided and update method called\n   */saveSettings: function (settings, callback) {\n    var service = settings.service,\n        host = settings.host,\n        port = settings.port,\n        user = settings.user,\n        password = settings.password;\n\n    if (!service) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.missingService\"), \"error\");\n      return callback();\n    }\n\n    if (service !== \"custom\" && (!user || !password)) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.userPassRequired\", {\n        service: service\n      }), \"error\");\n      return callback();\n    }\n\n    if (service === \"custom\" && (!host || !port || !user || !password)) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.allFieldsRequired\"), \"error\");\n      return callback();\n    } // make sure port is a Number\n\n\n    settings.port = Number(settings.port);\n\n    if (isNaN(settings.port)) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.portNaN\"), \"error\");\n      return callback();\n    }\n\n    var save = function () {\n      Meteor.call(\"email/saveSettings\", settings, function (err) {\n        if (err) {\n          return Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.saveFailed\", {\n            error: err.reason\n          }), \"error\");\n        }\n\n        return Alert({\n          title: i18next.t(\"app.success\"),\n          text: i18next.t(\"mail.alerts.saveSuccess\"),\n          type: \"success\",\n          timer: 1700\n        }).catch(function () {\n          return null;\n        });\n      });\n    }; // check if the settings work first\n\n\n    Meteor.call(\"email/verifySettings\", settings, function (error) {\n      callback(); // if the connection fails\n\n      if (error) {\n        Alert({\n          title: i18next.t(\"mail.alerts.connectionFailed\"),\n          text: i18next.t(\"mail.alerts.saveAnyway\"),\n          type: \"warning\",\n          showCancelButton: true,\n          cancelButtonText: i18next.t(\"app.cancel\"),\n          confirmButtonColor: \"#DD6B55\",\n          confirmButtonText: i18next.t(\"app.save\")\n        }).then(function () {\n          return save();\n        }).catch(function () {\n          return true;\n        });\n      } else {\n        save();\n      }\n    });\n    return true;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/email/client/actions/settings.js"],"names":["Alert","i18next","saveSettings","settings","callback","service","host","port","user","password","t","Number","isNaN","save","Meteor","call","err","error","reason","title","text","type","timer","catch","showCancelButton","cancelButtonText","confirmButtonColor","confirmButtonText","then"],"mappings":"AAAA;AAAA,OAAkB,WAAlB;;;;;;;;;;GACA,AAAS,AAAe,AAExB,AAAe,AACb;OAJK;AAUL,AAAa,AAAU,AAAU,AAC/B,AAAM,AAAE;;;;;KAAF;AAAA,AAAW;eAAX,AAAiB,AAAM;;;;;SAAvB,SAA6B;6EAA7B;AAA0C,aAAhD;AAEA,AAAI,AAAC,AAAS,AACZ;;QAAM,YAAA,AAAQ,AAAE,aAAV,CAAN,AAA8B,SAAA,AAAQ,AAAE,WAAxC,AAA8B,AAAyC,AACvE;YAAO,UAAP;;UACD;;AAED,AAAI,AAAY,AAAa,AAAC,AAAQ,AAAC,AAAW,AAChD;;QAAM,YAAA,AAAQ,AAAE,aAAV,CAAN,AAA8B,SAAA,AAAQ,AAAE,6BAAV,AAA0C,AAAE;gFAAF;AAAxE,AAA8B,AAAwD,aAAtF,AACA;AAAA,AAAO,AACR,MAED;;;AAAI,oBAAY,OAAZ,AAAyB,AAAC,SAA9B,AAAI,AAAyB,AAAS,AAAC,AAAQ,AAAC,AAAQ,AAAC,AAAW,AAClE,AAAM,AAAQ,AAAE,AAAc,AAAQ,AAAE,AAAkC,AAC1E;;QAAO,eAAP,OAf6B,AAgB9B;AAED;;AACA,AAAS,AAAO,AAAO,AAAS;;2BAEhC;AAAI,aAAM,KAAV,AAAI,AAAe,AAAO,+CACxB;YAAM,KAAN,AAAM,AAAQ,AAAE,AAAc,AAAQ,AAAE,AAAwB,AAChE;AAAO,uBAAP,UACD;;cAED;AAAM,AAAO,AAAM,AACjB;;AAAO;AACL,AAAI,iBAAK,UACP;gBAAO,AAAM,UAAN,AAAM,AAAQ,AAAE,AACrB,AAAQ,AAAE,AAA0B,AAAE;gBAAF,AAAS,AAAI;AAD5C,AACL,AACA,iBAFF,AAAO,AAGR;AALH,AAAkC,AAAU,AAAC,AAAQ,AACnD,SADF,AAAY;;;AAMV;AAAO,AAAM,AACX,AAAO,AAAQ,AAAE,AACjB,OAFW,AAEL,AAAQ,AAAE,AAChB;;;gBAHW,AAGL;AAHK,AAIJ,iBAAP,CAJF,AAAO,AAKJ,AAAM,AAAM,AAChB;;AAZD,iBA3B6B,AA0B/B,AAcC,AAED;;;0BACA;AAAA,AAAO,gBAAP,AAAY,AAAwB,AAAU,AAAC,AAAU,AACvD;AADuD,AAEvD;sCACA;AAAA,AAAI,AAAO,8BACT;AAAM,uCACJ;;AAAO,iBAAA,AAAQ,AAAE;;iBADb,AACG,AACP;;aAFI,AAEE,AAAQ,AAAE,AAChB;AAHI,AAGE,AACN;AAJI,AAIc,AAClB;AALI,AAKc,AAAQ,AAAE,AAC5B,AAAoB,AACpB;WAPI,AAOe,AAAQ,AAAE;AA7DvC,AAAe,AAkDX,AAGE,AACE,AAQG,AAAK,AAAM,AAAQ,AAAM,AAAM,AACnC,AAAM,AACL,AACD,AACF,AAED,AAAO,AACR","file":"/imports/plugins/core/email/client/actions/settings.js.map","sourcesContent":["import Alert from \"sweetalert2\";\nimport { i18next } from \"/client/api\";\n\nexport default {\n  /**\n   * Save email settings\n   * @param {Object} settings - object of mail provider settings\n   * @param {Function} callback - optional callback\n   * @return {Boolean} returns true if all fields provided and update method called\n   */\n  saveSettings(settings, callback) {\n    const { service, host, port, user, password } = settings;\n\n    if (!service) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.missingService\"), \"error\");\n      return callback();\n    }\n\n    if (service !== \"custom\" && (!user || !password)) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.userPassRequired\", { service }), \"error\");\n      return callback();\n    }\n\n    if (service === \"custom\" && (!host || !port || !user || !password)) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.allFieldsRequired\"), \"error\");\n      return callback();\n    }\n\n    // make sure port is a Number\n    settings.port = Number(settings.port);\n\n    if (isNaN(settings.port)) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"mail.alerts.portNaN\"), \"error\");\n      return callback();\n    }\n\n    const save = () => {\n      Meteor.call(\"email/saveSettings\", settings, (err) => {\n        if (err) {\n          return Alert(i18next.t(\"app.error\"),\n            i18next.t(\"mail.alerts.saveFailed\", { error: err.reason }),\n            \"error\");\n        }\n        return Alert({\n          title: i18next.t(\"app.success\"),\n          text: i18next.t(\"mail.alerts.saveSuccess\"),\n          type: \"success\",\n          timer: 1700\n        }).catch(() => null);\n      });\n    };\n\n    // check if the settings work first\n    Meteor.call(\"email/verifySettings\", settings, (error) => {\n      callback();\n      // if the connection fails\n      if (error) {\n        Alert({\n          title: i18next.t(\"mail.alerts.connectionFailed\"),\n          text: i18next.t(\"mail.alerts.saveAnyway\"),\n          type: \"warning\",\n          showCancelButton: true,\n          cancelButtonText: i18next.t(\"app.cancel\"),\n          confirmButtonColor: \"#DD6B55\",\n          confirmButtonText: i18next.t(\"app.save\")\n        }).then(() => save()).catch(() => true);\n      } else {\n        save();\n      }\n    });\n\n    return true;\n  }\n};\n"]},"hash":"5990c381c629ad6459b99f0d9a5f9f10ea9148a1"}
