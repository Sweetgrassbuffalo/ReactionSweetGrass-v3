{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/aldeed:autoform","imported":["AutoForm"],"specifiers":[{"kind":"named","imported":"AutoForm","local":"AutoForm"}]},{"source":"/client/modules/core/helpers/globals","imported":["getCardType"],"specifiers":[{"kind":"named","imported":"getCardType","local":"getCardType"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/lib/collections","imported":["Cart","Shops","Packages"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Shops","local":"Shops"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"../../lib/api","imported":["Stripe"],"specifiers":[{"kind":"named","imported":"Stripe","local":"Stripe"}]},{"source":"../../lib/collections/schemas","imported":["StripePayment"],"specifiers":[{"kind":"named","imported":"StripePayment","local":"StripePayment"}]},{"source":"./stripe.html","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/payments-stripe/client/checkout/stripe.js","filenameRelative":"/imports/plugins/included/payments-stripe/client/checkout/stripe.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-stripe/client/checkout/stripe.js"],"names":["Meteor","Template","AutoForm","getCardType","Reaction","Cart","Shops","Packages","Stripe","StripePayment","submitting","uiEnd","template","buttonText","$","removeAttr","text","addClass","paymentAlert","errorMessage","removeClass","hidePaymentAlert","handleStripeSubmitError","error","singleError","serverError","message","stripePaymentForm","helpers","addHooks","onSubmit","doc","cardData","name","payerName","number","cardNumber","expire_month","expireMonth","expire_year","expireYear","cvv2","cvv","type","storedCard","charAt","toUpperCase","slice","authorize","total","findOne","cartTotal","currency","transaction","saved","normalizedStatus","response","captured","failure_code","normalizedMode","subscribe","packageData","shopId","getShopId","paymentMethod","processor","method","paymentPackageId","_id","paymentSettingsKey","registry","settingsKey","transactionId","id","amount","status","mode","createdAt","Date","created","transactions","push","call","beginSubmit","attr","endSubmit"],"mappings":"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","file":"/imports/plugins/included/payments-stripe/client/checkout/stripe.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { getCardType } from \"/client/modules/core/helpers/globals\";\nimport { Reaction } from \"/client/api\";\nimport { Cart, Shops, Packages } from \"/lib/collections\";\nimport { Stripe } from \"../../lib/api\";\nimport { StripePayment } from \"../../lib/collections/schemas\";\n\nimport \"./stripe.html\";\n\nlet submitting = false;\n\n//\n// local helpers\n//\nfunction uiEnd(template, buttonText) {\n  template.$(\":input\").removeAttr(\"disabled\");\n  template.$(\"#btn-complete-order\").text(buttonText);\n  return template.$(\"#btn-processing\").addClass(\"hidden\");\n}\n\nfunction paymentAlert(errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n}\n\nfunction hidePaymentAlert() {\n  return $(\".alert\").addClass(\"hidden\").text(\"\");\n}\n\nfunction handleStripeSubmitError(error) {\n  const singleError = error;\n  const serverError = error ? error.message : null;\n  if (serverError) {\n    return paymentAlert(\"Oops! Credit card is invalid. Please check your information and try again.\");\n  } else if (singleError) {\n    return paymentAlert(\"Oops! \" + singleError);\n  }\n}\n\n//\n// Template helpers\n//\nTemplate.stripePaymentForm.helpers({\n  StripePayment() {\n    return StripePayment;\n  }\n});\n\n//\n// autoform handling\n//\nAutoForm.addHooks(\"stripe-payment-form\", {\n  onSubmit(doc) {\n    submitting = true;\n    const template = this.template;\n    hidePaymentAlert();\n    const cardData = {\n      name: doc.payerName,\n      number: doc.cardNumber,\n      expire_month: doc.expireMonth,\n      expire_year: doc.expireYear,\n      cvv2: doc.cvv,\n      type: getCardType(doc.cardNumber)\n    };\n    const storedCard = cardData.type.charAt(0).toUpperCase() + cardData.type.slice(1) + \" \" + doc.cardNumber.slice(-4);\n    Stripe.authorize(cardData, {\n      total: Cart.findOne().cartTotal(),\n      currency: Shops.findOne().currency\n    }, function (error, transaction) {\n      submitting = false;\n      if (error) {\n        handleStripeSubmitError(error);\n        uiEnd(template, \"Resubmit payment\");\n      } else {\n        if (transaction.saved === true) {\n          const normalizedStatus = (function () {\n            switch (false) {\n              case !(!transaction.response.captured && !transaction.response.failure_code):\n                return \"created\";\n              case !(transaction.response.captured === true && !transaction.response.failure_code):\n                return \"settled\";\n              case !transaction.response.failure_code:\n                return \"failed\";\n              default:\n                return \"failed\";\n            }\n          })();\n          const normalizedMode = (function () {\n            switch (false) {\n              case !(!transaction.response.captured && !transaction.response.failure_code):\n                return \"authorize\";\n              case !transaction.response.captured:\n                return \"capture\";\n              default:\n                return \"capture\";\n            }\n          })();\n          Meteor.subscribe(\"Packages\");\n          const packageData = Packages.findOne({\n            name: \"reaction-stripe\",\n            shopId: Reaction.getShopId()\n          });\n\n          submitting = false;\n          paymentMethod = {\n            processor: \"Stripe\",\n            storedCard: storedCard,\n            method: \"credit\",\n            paymentPackageId: packageData._id,\n            paymentSettingsKey: packageData.registry[0].settingsKey,\n            transactionId: transaction.response.id,\n            amount: transaction.response.amount * 0.01,\n            status: normalizedStatus,\n            mode: normalizedMode,\n            createdAt: new Date(transaction.response.created),\n            transactions: []\n          };\n          paymentMethod.transactions.push(transaction.response);\n          Meteor.call(\"cart/submitPayment\", paymentMethod);\n        } else {\n          handleStripeSubmitError(transaction.error);\n          uiEnd(template, \"Resubmit payment\");\n        }\n      }\n    });\n    return false;\n  },\n  beginSubmit() {\n    this.template.$(\":input\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(\"Submitting \");\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit() {\n    if (!submitting) {\n      return uiEnd(this.template, \"Complete your order\");\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-stripe/client/checkout/stripe.js.map","sourceFileName":"/imports/plugins/included/payments-stripe/client/checkout/stripe.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"stripe"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 1);\nvar AutoForm = void 0;\nmodule.importSync(\"meteor/aldeed:autoform\", {\n  AutoForm: function (v) {\n    AutoForm = v;\n  }\n}, 2);\nvar getCardType = void 0;\nmodule.importSync(\"/client/modules/core/helpers/globals\", {\n  getCardType: function (v) {\n    getCardType = v;\n  }\n}, 3);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 4);\nvar Cart = void 0,\n    Shops = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  },\n  Shops: function (v) {\n    Shops = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 5);\nvar Stripe = void 0;\nmodule.importSync(\"../../lib/api\", {\n  Stripe: function (v) {\n    Stripe = v;\n  }\n}, 6);\nvar StripePayment = void 0;\nmodule.importSync(\"../../lib/collections/schemas\", {\n  StripePayment: function (v) {\n    StripePayment = v;\n  }\n}, 7);\nmodule.importSync(\"./stripe.html\");\nvar submitting = false; //\n// local helpers\n//\n\nfunction uiEnd(template, buttonText) {\n  template.$(\":input\").removeAttr(\"disabled\");\n  template.$(\"#btn-complete-order\").text(buttonText);\n  return template.$(\"#btn-processing\").addClass(\"hidden\");\n}\n\nfunction paymentAlert(errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n}\n\nfunction hidePaymentAlert() {\n  return $(\".alert\").addClass(\"hidden\").text(\"\");\n}\n\nfunction handleStripeSubmitError(error) {\n  var singleError = error;\n  var serverError = error ? error.message : null;\n\n  if (serverError) {\n    return paymentAlert(\"Oops! Credit card is invalid. Please check your information and try again.\");\n  } else if (singleError) {\n    return paymentAlert(\"Oops! \" + singleError);\n  }\n} //\n// Template helpers\n//\n\n\nTemplate.stripePaymentForm.helpers({\n  StripePayment: function () {\n    return StripePayment;\n  }\n}); //\n// autoform handling\n//\n\nAutoForm.addHooks(\"stripe-payment-form\", {\n  onSubmit: function (doc) {\n    submitting = true;\n    var template = this.template;\n    hidePaymentAlert();\n    var cardData = {\n      name: doc.payerName,\n      number: doc.cardNumber,\n      expire_month: doc.expireMonth,\n      expire_year: doc.expireYear,\n      cvv2: doc.cvv,\n      type: getCardType(doc.cardNumber)\n    };\n    var storedCard = cardData.type.charAt(0).toUpperCase() + cardData.type.slice(1) + \" \" + doc.cardNumber.slice(-4);\n    Stripe.authorize(cardData, {\n      total: Cart.findOne().cartTotal(),\n      currency: Shops.findOne().currency\n    }, function (error, transaction) {\n      submitting = false;\n\n      if (error) {\n        handleStripeSubmitError(error);\n        uiEnd(template, \"Resubmit payment\");\n      } else {\n        if (transaction.saved === true) {\n          var normalizedStatus = function () {\n            switch (false) {\n              case !(!transaction.response.captured && !transaction.response.failure_code):\n                return \"created\";\n\n              case !(transaction.response.captured === true && !transaction.response.failure_code):\n                return \"settled\";\n\n              case !transaction.response.failure_code:\n                return \"failed\";\n\n              default:\n                return \"failed\";\n            }\n          }();\n\n          var normalizedMode = function () {\n            switch (false) {\n              case !(!transaction.response.captured && !transaction.response.failure_code):\n                return \"authorize\";\n\n              case !transaction.response.captured:\n                return \"capture\";\n\n              default:\n                return \"capture\";\n            }\n          }();\n\n          Meteor.subscribe(\"Packages\");\n          var packageData = Packages.findOne({\n            name: \"reaction-stripe\",\n            shopId: Reaction.getShopId()\n          });\n          submitting = false;\n          paymentMethod = {\n            processor: \"Stripe\",\n            storedCard: storedCard,\n            method: \"credit\",\n            paymentPackageId: packageData._id,\n            paymentSettingsKey: packageData.registry[0].settingsKey,\n            transactionId: transaction.response.id,\n            amount: transaction.response.amount * 0.01,\n            status: normalizedStatus,\n            mode: normalizedMode,\n            createdAt: new Date(transaction.response.created),\n            transactions: []\n          };\n          paymentMethod.transactions.push(transaction.response);\n          Meteor.call(\"cart/submitPayment\", paymentMethod);\n        } else {\n          handleStripeSubmitError(transaction.error);\n          uiEnd(template, \"Resubmit payment\");\n        }\n      }\n    });\n    return false;\n  },\n  beginSubmit: function () {\n    this.template.$(\":input\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(\"Submitting \");\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit: function () {\n    if (!submitting) {\n      return uiEnd(this.template, \"Complete your order\");\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/payments-stripe/client/checkout/stripe.js"],"names":["Meteor","Template","AutoForm","getCardType","Reaction","Cart","Shops","Packages","Stripe","StripePayment","submitting","uiEnd","template","buttonText","$","removeAttr","text","addClass","paymentAlert","errorMessage","removeClass","hidePaymentAlert","handleStripeSubmitError","error","singleError","serverError","message","stripePaymentForm","helpers","addHooks","onSubmit","doc","cardData","name","payerName","number","cardNumber","expire_month","expireMonth","expire_year","expireYear","cvv2","cvv","type","storedCard","charAt","toUpperCase","slice","authorize","total","findOne","cartTotal","currency","transaction","saved","normalizedStatus","response","captured","failure_code","normalizedMode","subscribe","packageData","shopId","getShopId","paymentMethod","processor","method","paymentPackageId","_id","paymentSettingsKey","registry","settingsKey","transactionId","id","amount","status","mode","createdAt","Date","created","transactions","push","call","beginSubmit","attr","endSubmit"],"mappings":"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","file":"/imports/plugins/included/payments-stripe/client/checkout/stripe.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { getCardType } from \"/client/modules/core/helpers/globals\";\nimport { Reaction } from \"/client/api\";\nimport { Cart, Shops, Packages } from \"/lib/collections\";\nimport { Stripe } from \"../../lib/api\";\nimport { StripePayment } from \"../../lib/collections/schemas\";\n\nimport \"./stripe.html\";\n\nlet submitting = false;\n\n//\n// local helpers\n//\nfunction uiEnd(template, buttonText) {\n  template.$(\":input\").removeAttr(\"disabled\");\n  template.$(\"#btn-complete-order\").text(buttonText);\n  return template.$(\"#btn-processing\").addClass(\"hidden\");\n}\n\nfunction paymentAlert(errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n}\n\nfunction hidePaymentAlert() {\n  return $(\".alert\").addClass(\"hidden\").text(\"\");\n}\n\nfunction handleStripeSubmitError(error) {\n  const singleError = error;\n  const serverError = error ? error.message : null;\n  if (serverError) {\n    return paymentAlert(\"Oops! Credit card is invalid. Please check your information and try again.\");\n  } else if (singleError) {\n    return paymentAlert(\"Oops! \" + singleError);\n  }\n}\n\n//\n// Template helpers\n//\nTemplate.stripePaymentForm.helpers({\n  StripePayment() {\n    return StripePayment;\n  }\n});\n\n//\n// autoform handling\n//\nAutoForm.addHooks(\"stripe-payment-form\", {\n  onSubmit(doc) {\n    submitting = true;\n    const template = this.template;\n    hidePaymentAlert();\n    const cardData = {\n      name: doc.payerName,\n      number: doc.cardNumber,\n      expire_month: doc.expireMonth,\n      expire_year: doc.expireYear,\n      cvv2: doc.cvv,\n      type: getCardType(doc.cardNumber)\n    };\n    const storedCard = cardData.type.charAt(0).toUpperCase() + cardData.type.slice(1) + \" \" + doc.cardNumber.slice(-4);\n    Stripe.authorize(cardData, {\n      total: Cart.findOne().cartTotal(),\n      currency: Shops.findOne().currency\n    }, function (error, transaction) {\n      submitting = false;\n      if (error) {\n        handleStripeSubmitError(error);\n        uiEnd(template, \"Resubmit payment\");\n      } else {\n        if (transaction.saved === true) {\n          const normalizedStatus = (function () {\n            switch (false) {\n              case !(!transaction.response.captured && !transaction.response.failure_code):\n                return \"created\";\n              case !(transaction.response.captured === true && !transaction.response.failure_code):\n                return \"settled\";\n              case !transaction.response.failure_code:\n                return \"failed\";\n              default:\n                return \"failed\";\n            }\n          })();\n          const normalizedMode = (function () {\n            switch (false) {\n              case !(!transaction.response.captured && !transaction.response.failure_code):\n                return \"authorize\";\n              case !transaction.response.captured:\n                return \"capture\";\n              default:\n                return \"capture\";\n            }\n          })();\n          Meteor.subscribe(\"Packages\");\n          const packageData = Packages.findOne({\n            name: \"reaction-stripe\",\n            shopId: Reaction.getShopId()\n          });\n\n          submitting = false;\n          paymentMethod = {\n            processor: \"Stripe\",\n            storedCard: storedCard,\n            method: \"credit\",\n            paymentPackageId: packageData._id,\n            paymentSettingsKey: packageData.registry[0].settingsKey,\n            transactionId: transaction.response.id,\n            amount: transaction.response.amount * 0.01,\n            status: normalizedStatus,\n            mode: normalizedMode,\n            createdAt: new Date(transaction.response.created),\n            transactions: []\n          };\n          paymentMethod.transactions.push(transaction.response);\n          Meteor.call(\"cart/submitPayment\", paymentMethod);\n        } else {\n          handleStripeSubmitError(transaction.error);\n          uiEnd(template, \"Resubmit payment\");\n        }\n      }\n    });\n    return false;\n  },\n  beginSubmit() {\n    this.template.$(\":input\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(\"Submitting \");\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit() {\n    if (!submitting) {\n      return uiEnd(this.template, \"Complete your order\");\n    }\n  }\n});\n"]},"hash":"3bab62d1d0b3c6bef03486b154b57ad6bf85820f"}
