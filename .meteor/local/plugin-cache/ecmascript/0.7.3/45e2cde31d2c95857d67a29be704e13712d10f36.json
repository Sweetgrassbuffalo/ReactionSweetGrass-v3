{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/collections","imported":["Shops"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"}]},{"source":"/server/api","imported":["Logger"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":["setShopName","shop"],"specifiers":[{"kind":"local","local":"setShopName","exported":"setShopName"},{"kind":"local","local":"shop","exported":"shop"}]}}},"options":{"filename":"/server/api/core/shopName.js","filenameRelative":"/server/api/core/shopName.js","inputSourceMap":{"version":3,"sources":["/server/api/core/shopName.js"],"names":["Shops","Logger","setShopName","shop","shopName","process","env","REACTION_SHOP_NAME","findOne","name","info","update","_id","$set","err","error"],"mappings":"AAAA,OAAS;AAAa;WAAtB;;AAAA;;;;;;;;;;;;GACA,AAAS,AAAc,AAEvB,AAOA,A,AAAO,AAAS,AAAY,AAAM,AAChC,AAAM,AAAW,AAAQ,AAAI;;2BAE7B;AAAI,MAAJ,AAAc,uBACZ,AACA;;MAAI,AAAC,AAAC,UAAA,AAAM,AAAQ,AAClB;AADkB,AACZ;AADR,AAAM,QAEF;YAFJ,AAGE,AAAO,AAAM,AAAoB,AAAS,AAC3C;AADC,QACK,AACL;yCACA;AAAI,WACF;AAAA,AAAM,AAAO,AACX;UADW,AACN,AAAK;AADZ,AAEG;eACK,KACJ;AADF;;kBAJJ,AAQC,AAAC,AAAO,AAAK,AACZ,AAAO,AAAM,AAA8B,AAC5C;AATC,AAEG;AACK,AACE;oBAMb;mDACF;AACF","file":"/server/api/core/shopName.js.map","sourcesContent":["import { Shops } from \"/lib/collections\";\nimport { Logger } from \"/server/api\";\n\n/**\n *  setShopName\n *  @private setShopName\n *  @param {Object} shop - shop\n *  @summary when new shop is created, set shop name if REACTION_SHOP_NAME env var exists\n *  @returns {undefined} undefined\n */\nexport function setShopName(shop) {\n  const shopName = process.env.REACTION_SHOP_NAME;\n\n  if (shopName) {\n    // if this shop name has already been used, don't use it again\n    if (!!Shops.findOne({\n      name: shopName\n    })) {\n      Logger.info(`Default shop name ${shopName} already used`);\n    } else {\n      // update the shop name with the REACTION_SHOP_NAME env var\n      try {\n        Shops.update({\n          _id: shop._id\n        }, {\n          $set: {\n            name: shopName\n          }\n        });\n      } catch (err) {\n        Logger.error(\"Failed to update shop name\", err);\n      }\n    }\n  }\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/api/core/shopName.js.map","sourceFileName":"/server/api/core/shopName.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"shopName"},"ignored":false,"code":"module.export({\n  setShopName: function () {\n    return setShopName;\n  }\n});\nvar Shops = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  }\n}, 0);\nvar Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 1);\n\nfunction setShopName(shop) {\n  var shopName = process.env.REACTION_SHOP_NAME;\n\n  if (shopName) {\n    // if this shop name has already been used, don't use it again\n    if (!!Shops.findOne({\n      name: shopName\n    })) {\n      Logger.info(\"Default shop name \" + shopName + \" already used\");\n    } else {\n      // update the shop name with the REACTION_SHOP_NAME env var\n      try {\n        Shops.update({\n          _id: shop._id\n        }, {\n          $set: {\n            name: shopName\n          }\n        });\n      } catch (err) {\n        Logger.error(\"Failed to update shop name\", err);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/server/api/core/shopName.js"],"names":["Shops","Logger","setShopName","shop","shopName","process","env","REACTION_SHOP_NAME","findOne","name","info","update","_id","$set","err","error"],"mappings":"AAAA,OAAS;AAAa;WAAtB;;AAAA;;;;;;;;;;;;GACA,AAAS,AAAc,AAEvB,AAOA,A,AAAO,AAAS,AAAY,AAAM,AAChC,AAAM,AAAW,AAAQ,AAAI;;2BAE7B;AAAI,MAAJ,AAAc,uBACZ,AACA;;MAAI,AAAC,AAAC,UAAA,AAAM,AAAQ,AAClB;AADkB,AACZ;AADR,AAAM,QAEF;YAFJ,AAGE,AAAO,AAAM,AAAoB,AAAS,AAC3C;AADC,QACK,AACL;yCACA;AAAI,WACF;AAAA,AAAM,AAAO,AACX;UADW,AACN,AAAK;AADZ,AAEG;eACK,KACJ;AADF;;kBAJJ,AAQC,AAAC,AAAO,AAAK,AACZ,AAAO,AAAM,AAA8B,AAC5C;AATC,AAEG;AACK,AACE;oBAMb;mDACF;AACF","file":"/server/api/core/shopName.js.map","sourcesContent":["import { Shops } from \"/lib/collections\";\nimport { Logger } from \"/server/api\";\n\n/**\n *  setShopName\n *  @private setShopName\n *  @param {Object} shop - shop\n *  @summary when new shop is created, set shop name if REACTION_SHOP_NAME env var exists\n *  @returns {undefined} undefined\n */\nexport function setShopName(shop) {\n  const shopName = process.env.REACTION_SHOP_NAME;\n\n  if (shopName) {\n    // if this shop name has already been used, don't use it again\n    if (!!Shops.findOne({\n      name: shopName\n    })) {\n      Logger.info(`Default shop name ${shopName} already used`);\n    } else {\n      // update the shop name with the REACTION_SHOP_NAME env var\n      try {\n        Shops.update({\n          _id: shop._id\n        }, {\n          $set: {\n            name: shopName\n          }\n        });\n      } catch (err) {\n        Logger.error(\"Failed to update shop name\", err);\n      }\n    }\n  }\n}\n"]},"hash":"45e2cde31d2c95857d67a29be704e13712d10f36"}
