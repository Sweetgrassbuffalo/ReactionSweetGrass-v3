{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/indexOf","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_indexOf"}]},{"source":"/lib/collections","imported":["Cart"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/taxes/server/hooks/taxes.js","filenameRelative":"/imports/plugins/core/taxes/server/hooks/taxes.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/taxes/server/hooks/taxes.js"],"names":["Cart","after","update","userId","cart","fieldNames","trigger","field","Meteor","call","_id"],"mappings":";;;;;;;;;;;;GACA,A,AAAS,AAAY,AAErB;AAIA;;GAOA,AAAK,AAAM,AAAO,AAAC,AAAQ,AAAM,AAAe,AAC9C,AAAM,AAAU,AAAC,AAAY,AAAW,AAExC,AAAK,AAAM,AAAS,AAAY;;;;;;WAC1B,MAAQ,iBAAR,AAAiB,QAAjB,MAAJ,AAAgC,AAAC,AAAG,YAClC;MAAA,AAAO,UAAK,aAAZ,AAA+B,WAA/B,AAAoC,AACrC,AACF;;;AAPH,AAQC;;;;;;;;;;;;;;;;;CAJG","file":"/imports/plugins/core/taxes/server/hooks/taxes.js.map","sourcesContent":["import { indexOf } from \"lodash\";\nimport { Cart } from \"/lib/collections\";\n\n/**\n * Cart Hooks for Taxes\n*/\n\n/**\n * After cart update apply taxes.\n * if items are changed, recalculating taxes\n * we could have done this in the core/cart transform\n * but this way this file controls the events from\n * the core/taxes plugin.\n */\nCart.after.update((userId, cart, fieldNames) => {\n  const trigger = [\"discount\", \"billing\", \"shipping\"];\n\n  for (const field of fieldNames) {\n    if (indexOf(trigger, field) !== -1) {\n      Meteor.call(\"taxes/calculate\", cart._id);\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/taxes/server/hooks/taxes.js.map","sourceFileName":"/imports/plugins/core/taxes/server/hooks/taxes.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"taxes"},"ignored":false,"code":"var _indexOf = void 0;\n\nmodule.importSync(\"lodash/indexOf\", {\n  \"default\": function (v) {\n    _indexOf = v;\n  }\n}, 0);\nvar Cart = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  }\n}, 1);\n/**\n * Cart Hooks for Taxes\n*/ /**\n    * After cart update apply taxes.\n    * if items are changed, recalculating taxes\n    * we could have done this in the core/cart transform\n    * but this way this file controls the events from\n    * the core/taxes plugin.\n    */Cart.after.update(function (userId, cart, fieldNames) {\n  var trigger = [\"discount\", \"billing\", \"shipping\"];\n\n  for (var _iterator = fieldNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var field = _ref;\n\n    if (_indexOf(trigger, field) !== -1) {\n      Meteor.call(\"taxes/calculate\", cart._id);\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/taxes/server/hooks/taxes.js"],"names":["Cart","after","update","userId","cart","fieldNames","trigger","field","Meteor","call","_id"],"mappings":";;;;;;;;;;;;GACA,A,AAAS,AAAY,AAErB;AAIA;;GAOA,AAAK,AAAM,AAAO,AAAC,AAAQ,AAAM,AAAe,AAC9C,AAAM,AAAU,AAAC,AAAY,AAAW,AAExC,AAAK,AAAM,AAAS,AAAY;;;;;;WAC1B,MAAQ,iBAAR,AAAiB,QAAjB,MAAJ,AAAgC,AAAC,AAAG,YAClC;MAAA,AAAO,UAAK,aAAZ,AAA+B,WAA/B,AAAoC,AACrC,AACF;;;AAPH,AAQC;;;;;;;;;;;;;;;;;CAJG","file":"/imports/plugins/core/taxes/server/hooks/taxes.js.map","sourcesContent":["import { indexOf } from \"lodash\";\nimport { Cart } from \"/lib/collections\";\n\n/**\n * Cart Hooks for Taxes\n*/\n\n/**\n * After cart update apply taxes.\n * if items are changed, recalculating taxes\n * we could have done this in the core/cart transform\n * but this way this file controls the events from\n * the core/taxes plugin.\n */\nCart.after.update((userId, cart, fieldNames) => {\n  const trigger = [\"discount\", \"billing\", \"shipping\"];\n\n  for (const field of fieldNames) {\n    if (indexOf(trigger, field) !== -1) {\n      Meteor.call(\"taxes/calculate\", cart._id);\n    }\n  }\n});\n"]},"hash":"86543bb690e639818305a5f1d491fdd4011edfe1"}
