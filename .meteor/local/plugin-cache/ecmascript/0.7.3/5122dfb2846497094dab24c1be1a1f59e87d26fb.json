{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"./emailConfig.css","imported":[],"specifiers":[]},{"source":"/imports/plugins/core/ui/client/components","imported":["Card","CardHeader","CardBody","CardGroup","Icon","Translation"],"specifiers":[{"kind":"named","imported":"Card","local":"Card"},{"kind":"named","imported":"CardHeader","local":"CardHeader"},{"kind":"named","imported":"CardBody","local":"CardBody"},{"kind":"named","imported":"CardGroup","local":"CardGroup"},{"kind":"named","imported":"Icon","local":"Icon"},{"kind":"named","imported":"Translation","local":"Translation"}]},{"source":"../containers/emailSettings","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"EmailSettings"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/email/client/components/emailConfig.js","filenameRelative":"/imports/plugins/core/email/client/components/emailConfig.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/email/client/components/emailConfig.js"],"names":["React","Component","PropTypes","Card","CardHeader","CardBody","CardGroup","Icon","Translation","EmailSettings","EmailConfig","constructor","props","state","showPassword","showSettings","togglePassword","bind","toggleSettings","setState","renderSettingsDisplay","settings","status","service","host","port","user","password","NotSet","marginLeft","renderSettingsUpdate","render","propTypes","shape","string","oneOfType","number"],"mappings":"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","file":"/imports/plugins/core/email/client/components/emailConfig.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport \"./emailConfig.css\";\nimport { Card, CardHeader, CardBody, CardGroup, Icon, Translation } from \"/imports/plugins/core/ui/client/components\";\nimport EmailSettings from \"../containers/emailSettings\";\n\n\nclass EmailConfig extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showPassword: false,\n      showSettings: false\n    };\n\n    this.togglePassword = this.togglePassword.bind(this);\n    this.toggleSettings = this.toggleSettings.bind(this);\n  }\n\n\n  togglePassword() {\n    this.setState({\n      showPassword: !this.state.showPassword\n    });\n  }\n\n  toggleSettings() {\n    this.setState({\n      showSettings: !this.state.showSettings\n    });\n  }\n\n  renderSettingsDisplay() {\n    const { settings, status } = this.props;\n    const { service, host, port, user, password } = settings;\n    const { showPassword } = this.state;\n\n    const NotSet = () => <span data-i18n=\"admin.settings.fieldNotSet\">Not set</span>;\n\n    return (\n      <div>\n        <div className=\"pull-right\">\n          <a onClick={this.toggleSettings}><Icon icon=\"gear\"/></a>\n        </div>\n        <div className=\"email-config-status\">\n          <strong data-i18n=\"admin.settings.status\">Status</strong>: {status ?\n              <i className={`fa fa-circle ${status}`} />\n            : <i className={\"fa fa-refresh fa-spin\"} />}\n        </div>\n        <div>\n          <strong data-i18n=\"admin.settings.service\">Service</strong>: {service || <NotSet/>}\n        </div>\n        <div className=\"truncate\">\n          <strong data-i18n=\"admin.settings.host\">Host</strong>: {host || <NotSet/>}\n        </div>\n        <div>\n          <strong data-i18n=\"admin.settings.port\">Port</strong>: {port || <NotSet/>}\n        </div>\n        <div className=\"truncate\">\n          <strong data-i18n=\"admin.settings.user\">User</strong>: {user || <NotSet/>}\n        </div>\n        <div>\n          <strong data-i18n=\"admin.settings.password\">Password</strong>:&nbsp;&nbsp;\n          {password ?\n            <span>\n              {showPassword ? password : \"********\"}\n              <a onClick={this.togglePassword}>\n                <span style={{ marginLeft: \"1rem\" }}>\n                  <em>{showPassword ?\n                      <span data-i18n=\"admin.settings.passwordHide\">Hide</span>\n                    : <span data-i18n=\"admin.settings.passwordShow\">Show</span>}\n                  </em>\n                </span>\n              </a>\n            </span>\n            : <NotSet/>}\n        </div>\n      </div>\n    );\n  }\n\n  renderSettingsUpdate() {\n    const { showSettings } = this.state;\n\n    if (showSettings === true) {\n      return (\n        <div>\n          <hr />\n          <h4>\n            <Translation\n              defaultValue={\"Edit Settings\"}\n              i18nKey={\"admin.settings.editSettings\"}\n            />\n          </h4>\n          <EmailSettings showSettings={showSettings} />\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    return (\n      <CardGroup>\n        <Card\n          expanded={true}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"admin.settings.mailProvider\"\n            title=\"Mail Provider\"\n          />\n          <CardBody expandable={true}>\n            {this.renderSettingsDisplay()}\n            {this.renderSettingsUpdate()}\n          </CardBody>\n        </Card>\n      </CardGroup>\n    );\n  }\n}\n\nEmailConfig.propTypes = {\n  settings: PropTypes.shape({\n    host: PropTypes.string,\n    password: PropTypes.string,\n    port: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string\n    ]),\n    service: PropTypes.string,\n    user: PropTypes.string\n  }),\n  status: PropTypes.string\n};\n\nexport default EmailConfig;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/email/client/components/emailConfig.js.map","sourceFileName":"/imports/plugins/core/email/client/components/emailConfig.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"emailConfig"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nmodule.importSync(\"./emailConfig.css\");\nvar Card = void 0,\n    CardHeader = void 0,\n    CardBody = void 0,\n    CardGroup = void 0,\n    Icon = void 0,\n    Translation = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  Card: function (v) {\n    Card = v;\n  },\n  CardHeader: function (v) {\n    CardHeader = v;\n  },\n  CardBody: function (v) {\n    CardBody = v;\n  },\n  CardGroup: function (v) {\n    CardGroup = v;\n  },\n  Icon: function (v) {\n    Icon = v;\n  },\n  Translation: function (v) {\n    Translation = v;\n  }\n}, 2);\nvar EmailSettings = void 0;\nmodule.importSync(\"../containers/emailSettings\", {\n  \"default\": function (v) {\n    EmailSettings = v;\n  }\n}, 3);\n\nvar EmailConfig = function (_Component) {\n  (0, _inherits3.default)(EmailConfig, _Component);\n\n  function EmailConfig(props) {\n    (0, _classCallCheck3.default)(this, EmailConfig);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _this.state = {\n      showPassword: false,\n      showSettings: false\n    };\n    _this.togglePassword = _this.togglePassword.bind(_this);\n    _this.toggleSettings = _this.toggleSettings.bind(_this);\n    return _this;\n  }\n\n  EmailConfig.prototype.togglePassword = function () {\n    function togglePassword() {\n      this.setState({\n        showPassword: !this.state.showPassword\n      });\n    }\n\n    return togglePassword;\n  }();\n\n  EmailConfig.prototype.toggleSettings = function () {\n    function toggleSettings() {\n      this.setState({\n        showSettings: !this.state.showSettings\n      });\n    }\n\n    return toggleSettings;\n  }();\n\n  EmailConfig.prototype.renderSettingsDisplay = function () {\n    function renderSettingsDisplay() {\n      var _props = this.props,\n          settings = _props.settings,\n          status = _props.status;\n      var service = settings.service,\n          host = settings.host,\n          port = settings.port,\n          user = settings.user,\n          password = settings.password;\n      var showPassword = this.state.showPassword;\n\n      var NotSet = function () {\n        return React.createElement(\n          \"span\",\n          {\n            \"data-i18n\": \"admin.settings.fieldNotSet\"\n          },\n          \"Not set\"\n        );\n      };\n\n      return React.createElement(\n        \"div\",\n        null,\n        React.createElement(\n          \"div\",\n          {\n            className: \"pull-right\"\n          },\n          React.createElement(\n            \"a\",\n            {\n              onClick: this.toggleSettings\n            },\n            React.createElement(Icon, {\n              icon: \"gear\"\n            })\n          )\n        ),\n        React.createElement(\n          \"div\",\n          {\n            className: \"email-config-status\"\n          },\n          React.createElement(\n            \"strong\",\n            {\n              \"data-i18n\": \"admin.settings.status\"\n            },\n            \"Status\"\n          ),\n          \": \",\n          status ? React.createElement(\"i\", {\n            className: \"fa fa-circle \" + status\n          }) : React.createElement(\"i\", {\n            className: \"fa fa-refresh fa-spin\"\n          })\n        ),\n        React.createElement(\n          \"div\",\n          null,\n          React.createElement(\n            \"strong\",\n            {\n              \"data-i18n\": \"admin.settings.service\"\n            },\n            \"Service\"\n          ),\n          \": \",\n          service || React.createElement(NotSet, null)\n        ),\n        React.createElement(\n          \"div\",\n          {\n            className: \"truncate\"\n          },\n          React.createElement(\n            \"strong\",\n            {\n              \"data-i18n\": \"admin.settings.host\"\n            },\n            \"Host\"\n          ),\n          \": \",\n          host || React.createElement(NotSet, null)\n        ),\n        React.createElement(\n          \"div\",\n          null,\n          React.createElement(\n            \"strong\",\n            {\n              \"data-i18n\": \"admin.settings.port\"\n            },\n            \"Port\"\n          ),\n          \": \",\n          port || React.createElement(NotSet, null)\n        ),\n        React.createElement(\n          \"div\",\n          {\n            className: \"truncate\"\n          },\n          React.createElement(\n            \"strong\",\n            {\n              \"data-i18n\": \"admin.settings.user\"\n            },\n            \"User\"\n          ),\n          \": \",\n          user || React.createElement(NotSet, null)\n        ),\n        React.createElement(\n          \"div\",\n          null,\n          React.createElement(\n            \"strong\",\n            {\n              \"data-i18n\": \"admin.settings.password\"\n            },\n            \"Password\"\n          ),\n          \":\\xA0\\xA0\",\n          password ? React.createElement(\n            \"span\",\n            null,\n            showPassword ? password : \"********\",\n            React.createElement(\n              \"a\",\n              {\n                onClick: this.togglePassword\n              },\n              React.createElement(\n                \"span\",\n                {\n                  style: {\n                    marginLeft: \"1rem\"\n                  }\n                },\n                React.createElement(\n                  \"em\",\n                  null,\n                  showPassword ? React.createElement(\n                    \"span\",\n                    {\n                      \"data-i18n\": \"admin.settings.passwordHide\"\n                    },\n                    \"Hide\"\n                  ) : React.createElement(\n                    \"span\",\n                    {\n                      \"data-i18n\": \"admin.settings.passwordShow\"\n                    },\n                    \"Show\"\n                  )\n                )\n              )\n            )\n          ) : React.createElement(NotSet, null)\n        )\n      );\n    }\n\n    return renderSettingsDisplay;\n  }();\n\n  EmailConfig.prototype.renderSettingsUpdate = function () {\n    function renderSettingsUpdate() {\n      var showSettings = this.state.showSettings;\n\n      if (showSettings === true) {\n        return React.createElement(\n          \"div\",\n          null,\n          React.createElement(\"hr\", null),\n          React.createElement(\n            \"h4\",\n            null,\n            React.createElement(Translation, {\n              defaultValue: \"Edit Settings\",\n              i18nKey: \"admin.settings.editSettings\"\n            })\n          ),\n          React.createElement(EmailSettings, {\n            showSettings: showSettings\n          })\n        );\n      }\n\n      return null;\n    }\n\n    return renderSettingsUpdate;\n  }();\n\n  EmailConfig.prototype.render = function () {\n    function render() {\n      return React.createElement(\n        CardGroup,\n        null,\n        React.createElement(\n          Card,\n          {\n            expanded: true\n          },\n          React.createElement(CardHeader, {\n            actAsExpander: true,\n            i18nKeyTitle: \"admin.settings.mailProvider\",\n            title: \"Mail Provider\"\n          }),\n          React.createElement(\n            CardBody,\n            {\n              expandable: true\n            },\n            this.renderSettingsDisplay(),\n            this.renderSettingsUpdate()\n          )\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return EmailConfig;\n}(Component);\n\nEmailConfig.propTypes = {\n  settings: PropTypes.shape({\n    host: PropTypes.string,\n    password: PropTypes.string,\n    port: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    service: PropTypes.string,\n    user: PropTypes.string\n  }),\n  status: PropTypes.string\n};\nmodule.export(\"default\", exports.default = EmailConfig);","map":{"version":3,"sources":["/imports/plugins/core/email/client/components/emailConfig.js"],"names":["React","Component","PropTypes","Card","CardHeader","CardBody","CardGroup","Icon","Translation","EmailSettings","EmailConfig","constructor","props","state","showPassword","showSettings","togglePassword","bind","toggleSettings","setState","renderSettingsDisplay","settings","status","service","host","port","user","password","NotSet","marginLeft","renderSettingsUpdate","render","propTypes","shape","string","oneOfType","number"],"mappings":"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","file":"/imports/plugins/core/email/client/components/emailConfig.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport \"./emailConfig.css\";\nimport { Card, CardHeader, CardBody, CardGroup, Icon, Translation } from \"/imports/plugins/core/ui/client/components\";\nimport EmailSettings from \"../containers/emailSettings\";\n\n\nclass EmailConfig extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showPassword: false,\n      showSettings: false\n    };\n\n    this.togglePassword = this.togglePassword.bind(this);\n    this.toggleSettings = this.toggleSettings.bind(this);\n  }\n\n\n  togglePassword() {\n    this.setState({\n      showPassword: !this.state.showPassword\n    });\n  }\n\n  toggleSettings() {\n    this.setState({\n      showSettings: !this.state.showSettings\n    });\n  }\n\n  renderSettingsDisplay() {\n    const { settings, status } = this.props;\n    const { service, host, port, user, password } = settings;\n    const { showPassword } = this.state;\n\n    const NotSet = () => <span data-i18n=\"admin.settings.fieldNotSet\">Not set</span>;\n\n    return (\n      <div>\n        <div className=\"pull-right\">\n          <a onClick={this.toggleSettings}><Icon icon=\"gear\"/></a>\n        </div>\n        <div className=\"email-config-status\">\n          <strong data-i18n=\"admin.settings.status\">Status</strong>: {status ?\n              <i className={`fa fa-circle ${status}`} />\n            : <i className={\"fa fa-refresh fa-spin\"} />}\n        </div>\n        <div>\n          <strong data-i18n=\"admin.settings.service\">Service</strong>: {service || <NotSet/>}\n        </div>\n        <div className=\"truncate\">\n          <strong data-i18n=\"admin.settings.host\">Host</strong>: {host || <NotSet/>}\n        </div>\n        <div>\n          <strong data-i18n=\"admin.settings.port\">Port</strong>: {port || <NotSet/>}\n        </div>\n        <div className=\"truncate\">\n          <strong data-i18n=\"admin.settings.user\">User</strong>: {user || <NotSet/>}\n        </div>\n        <div>\n          <strong data-i18n=\"admin.settings.password\">Password</strong>:&nbsp;&nbsp;\n          {password ?\n            <span>\n              {showPassword ? password : \"********\"}\n              <a onClick={this.togglePassword}>\n                <span style={{ marginLeft: \"1rem\" }}>\n                  <em>{showPassword ?\n                      <span data-i18n=\"admin.settings.passwordHide\">Hide</span>\n                    : <span data-i18n=\"admin.settings.passwordShow\">Show</span>}\n                  </em>\n                </span>\n              </a>\n            </span>\n            : <NotSet/>}\n        </div>\n      </div>\n    );\n  }\n\n  renderSettingsUpdate() {\n    const { showSettings } = this.state;\n\n    if (showSettings === true) {\n      return (\n        <div>\n          <hr />\n          <h4>\n            <Translation\n              defaultValue={\"Edit Settings\"}\n              i18nKey={\"admin.settings.editSettings\"}\n            />\n          </h4>\n          <EmailSettings showSettings={showSettings} />\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    return (\n      <CardGroup>\n        <Card\n          expanded={true}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"admin.settings.mailProvider\"\n            title=\"Mail Provider\"\n          />\n          <CardBody expandable={true}>\n            {this.renderSettingsDisplay()}\n            {this.renderSettingsUpdate()}\n          </CardBody>\n        </Card>\n      </CardGroup>\n    );\n  }\n}\n\nEmailConfig.propTypes = {\n  settings: PropTypes.shape({\n    host: PropTypes.string,\n    password: PropTypes.string,\n    port: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string\n    ]),\n    service: PropTypes.string,\n    user: PropTypes.string\n  }),\n  status: PropTypes.string\n};\n\nexport default EmailConfig;\n"]},"hash":"5122dfb2846497094dab24c1be1a1f59e87d26fb"}
