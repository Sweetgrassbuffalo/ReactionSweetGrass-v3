{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/client/api","imported":["Reaction","Logger","i18next"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/lib/collections","imported":["Shops"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"}]},{"source":"./main","imported":["localeDep","i18nextDep"],"specifiers":[{"kind":"named","imported":"localeDep","local":"localeDep"},{"kind":"named","imported":"i18nextDep","local":"i18nextDep"}]},{"source":"./currency","imported":["formatPriceString"],"specifiers":[{"kind":"named","imported":"formatPriceString","local":"formatPriceString"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/i18n/helpers.js","filenameRelative":"/client/modules/i18n/helpers.js","inputSourceMap":{"version":3,"sources":["/client/modules/i18n/helpers.js"],"names":["Template","Reaction","Logger","i18next","Shops","localeDep","i18nextDep","formatPriceString","registerHelper","i18nKey","i18nMessage","warn","check","String","depend","t","defaultValue","locale","Locale","get","localStorageCurrency","localStorage","getItem","shop","findOne","Match","test","Object","currencies","symbol","currency","formatPrice","useDefaultShopCurrency"],"mappings":"AAAA,IAAS;AAAT,OAAyB,WAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAU,AAAQ,AAAe,AAC1C,AAAS,AAAa,AACtB,AAAS,AAAW,AAAmB,A,AAAvC,AACA,AAAS,AAAyB,AAElC;AAUA,AAAS,AAAe,AAAQ,AAAU,AAAS,AAAa,AAC9D,AAAI,AAAC,AAAW,AAAO,AAAgB,AAAU;;;;;;;;;YAC/C,AAAO,AAAK,0CAAZ,AAAqD;OACrD,AAAO,4CACR;;WACD;AAAA,AAAM,AAAS,AACf;;QAAM,SAAN,AAAmB,AAEnB;QAAA,AAAW,aARmD,AAU9D,AACA;AAAO,aAAA,AAAQ,AAAE,AAAS,AAAE,AAAc,SATxC,AAA8D,AAC9D,CAHJ,AAWE,AAAO,AACR;;AAED,A;;;CAZI,GAiBJ,AAAS,AAAe,AAAkB,AAAY,AACpD,AAAM,AAAS,AAAS,AAAO,AAC/B,AAAM,AAAuB,AAAa,AAAQ;;;;;sDAClD;AAAI,wBAAJ,AAA0B,OACxB;MAAM,AAAO,AAAM,uBAAnB;;4BACA;AAAI,QAAM,OAAN,AAAW,MAAf,AAAI,AAAiB,AAAW,AAAK,AAAY,AAC/C;;QAAO,MAAK,WAAL,AAAgB,gBAAhB,AAAsC,YAA7C,AACD;mDACF;;AACD;;SAAO,OAAA,AAAO,SAAd,AAAuB,AACxB;AAVD,A,AAYA,IAQA,AAAS,AAAe,AAAe,AAAU,AAAa,AAAwB,AACpF,AAAU;;;;;;;;AACV,SAAO,eAAA,AAAkB,eAAa,uBAAtC,AAAO,wBAFT,AAGC","file":"/client/modules/i18n/helpers.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { Reaction, Logger, i18next } from \"/client/api\";\nimport { Shops } from \"/lib/collections\";\nimport { localeDep, i18nextDep } from  \"./main\";\nimport { formatPriceString } from \"./currency\";\n\n/**\n * i18n\n * see: http://i18next.com/\n * pass the translation key as the first argument\n * and the default message as the second argument\n * @param {String} i18nKey - i18nKey\n * @param {String} i18nMessage - message text\n * @example {{i18n \"accountsTemplate.error\" \"Invalid Email\"}}\n * @return {String} returns i18n translated message\n */\nTemplate.registerHelper(\"i18n\", function (i18nKey, i18nMessage) {\n  if (!i18nKey || typeof i18nMessage !== \"string\") {\n    Logger.warn(\"i18n key string required to translate\", i18nKey, i18nMessage);\n    return \"\";\n  }\n  check(i18nKey, String);\n  check(i18nMessage, String);\n\n  i18nextDep.depend();\n\n  // returning translated key\n  return i18next.t(i18nKey, { defaultValue: i18nMessage });\n});\n\n/**\n * currencySymbol\n * @summary return shop /locale specific currency format (ie: $)\n * @returns {String} return current locale currency symbol\n */\nTemplate.registerHelper(\"currencySymbol\", function () {\n  const locale = Reaction.Locale.get();\n  const localStorageCurrency = localStorage.getItem(\"currency\");\n  if (localStorageCurrency) {\n    const shop = Shops.findOne();\n    if (Match.test(shop, Object) && shop.currencies) {\n      return shop.currencies[localStorageCurrency].symbol;\n    }\n  }\n  return locale.currency.symbol;\n});\n\n/**\n * formatPrice\n * @summary return shop /locale specific formatted price\n * also accepts a range formatted with \" - \"\n * @param {String} currentPrice - currentPrice or \"xx.xx - xx.xx\" formatted String\n * @param {Boolean} useDefaultShopCurrency - flag for displaying shop's currency in Admin view of PDP\n * @return {String} returns locale formatted and exchange rate converted values\n */\nTemplate.registerHelper(\"formatPrice\", function (formatPrice, useDefaultShopCurrency) {\n  localeDep.depend();\n  return formatPriceString(formatPrice, useDefaultShopCurrency);\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/i18n/helpers.js.map","sourceFileName":"/client/modules/i18n/helpers.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"helpers"},"ignored":false,"code":"var Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 0);\nvar Reaction = void 0,\n    Logger = void 0,\n    i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  },\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 1);\nvar Shops = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  }\n}, 2);\nvar localeDep = void 0,\n    i18nextDep = void 0;\nmodule.importSync(\"./main\", {\n  localeDep: function (v) {\n    localeDep = v;\n  },\n  i18nextDep: function (v) {\n    i18nextDep = v;\n  }\n}, 3);\nvar formatPriceString = void 0;\nmodule.importSync(\"./currency\", {\n  formatPriceString: function (v) {\n    formatPriceString = v;\n  }\n}, 4);\n/**\n * i18n\n * see: http://i18next.com/\n * pass the translation key as the first argument\n * and the default message as the second argument\n * @param {String} i18nKey - i18nKey\n * @param {String} i18nMessage - message text\n * @example {{i18n \"accountsTemplate.error\" \"Invalid Email\"}}\n * @return {String} returns i18n translated message\n */Template.registerHelper(\"i18n\", function (i18nKey, i18nMessage) {\n  if (!i18nKey || typeof i18nMessage !== \"string\") {\n    Logger.warn(\"i18n key string required to translate\", i18nKey, i18nMessage);\n    return \"\";\n  }\n\n  check(i18nKey, String);\n  check(i18nMessage, String);\n  i18nextDep.depend(); // returning translated key\n\n  return i18next.t(i18nKey, {\n    defaultValue: i18nMessage\n  });\n}); /**\n     * currencySymbol\n     * @summary return shop /locale specific currency format (ie: $)\n     * @returns {String} return current locale currency symbol\n     */\nTemplate.registerHelper(\"currencySymbol\", function () {\n  var locale = Reaction.Locale.get();\n  var localStorageCurrency = localStorage.getItem(\"currency\");\n\n  if (localStorageCurrency) {\n    var shop = Shops.findOne();\n\n    if (Match.test(shop, Object) && shop.currencies) {\n      return shop.currencies[localStorageCurrency].symbol;\n    }\n  }\n\n  return locale.currency.symbol;\n}); /**\n     * formatPrice\n     * @summary return shop /locale specific formatted price\n     * also accepts a range formatted with \" - \"\n     * @param {String} currentPrice - currentPrice or \"xx.xx - xx.xx\" formatted String\n     * @param {Boolean} useDefaultShopCurrency - flag for displaying shop's currency in Admin view of PDP\n     * @return {String} returns locale formatted and exchange rate converted values\n     */\nTemplate.registerHelper(\"formatPrice\", function (formatPrice, useDefaultShopCurrency) {\n  localeDep.depend();\n  return formatPriceString(formatPrice, useDefaultShopCurrency);\n});","map":{"version":3,"sources":["/client/modules/i18n/helpers.js"],"names":["Template","Reaction","Logger","i18next","Shops","localeDep","i18nextDep","formatPriceString","registerHelper","i18nKey","i18nMessage","warn","check","String","depend","t","defaultValue","locale","Locale","get","localStorageCurrency","localStorage","getItem","shop","findOne","Match","test","Object","currencies","symbol","currency","formatPrice","useDefaultShopCurrency"],"mappings":"AAAA,IAAS;AAAT,OAAyB,WAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAU,AAAQ,AAAe,AAC1C,AAAS,AAAa,AACtB,AAAS,AAAW,AAAmB,A,AAAvC,AACA,AAAS,AAAyB,AAElC;AAUA,AAAS,AAAe,AAAQ,AAAU,AAAS,AAAa,AAC9D,AAAI,AAAC,AAAW,AAAO,AAAgB,AAAU;;;;;;;;;YAC/C,AAAO,AAAK,0CAAZ,AAAqD;OACrD,AAAO,4CACR;;WACD;AAAA,AAAM,AAAS,AACf;;QAAM,SAAN,AAAmB,AAEnB;QAAA,AAAW,aARmD,AAU9D,AACA;AAAO,aAAA,AAAQ,AAAE,AAAS,AAAE,AAAc,SATxC,AAA8D,AAC9D,CAHJ,AAWE,AAAO,AACR;;AAED,A;;;CAZI,GAiBJ,AAAS,AAAe,AAAkB,AAAY,AACpD,AAAM,AAAS,AAAS,AAAO,AAC/B,AAAM,AAAuB,AAAa,AAAQ;;;;;sDAClD;AAAI,wBAAJ,AAA0B,OACxB;MAAM,AAAO,AAAM,uBAAnB;;4BACA;AAAI,QAAM,OAAN,AAAW,MAAf,AAAI,AAAiB,AAAW,AAAK,AAAY,AAC/C;;QAAO,MAAK,WAAL,AAAgB,gBAAhB,AAAsC,YAA7C,AACD;mDACF;;AACD;;SAAO,OAAA,AAAO,SAAd,AAAuB,AACxB;AAVD,A,AAYA,IAQA,AAAS,AAAe,AAAe,AAAU,AAAa,AAAwB,AACpF,AAAU;;;;;;;;AACV,SAAO,eAAA,AAAkB,eAAa,uBAAtC,AAAO,wBAFT,AAGC","file":"/client/modules/i18n/helpers.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { Reaction, Logger, i18next } from \"/client/api\";\nimport { Shops } from \"/lib/collections\";\nimport { localeDep, i18nextDep } from  \"./main\";\nimport { formatPriceString } from \"./currency\";\n\n/**\n * i18n\n * see: http://i18next.com/\n * pass the translation key as the first argument\n * and the default message as the second argument\n * @param {String} i18nKey - i18nKey\n * @param {String} i18nMessage - message text\n * @example {{i18n \"accountsTemplate.error\" \"Invalid Email\"}}\n * @return {String} returns i18n translated message\n */\nTemplate.registerHelper(\"i18n\", function (i18nKey, i18nMessage) {\n  if (!i18nKey || typeof i18nMessage !== \"string\") {\n    Logger.warn(\"i18n key string required to translate\", i18nKey, i18nMessage);\n    return \"\";\n  }\n  check(i18nKey, String);\n  check(i18nMessage, String);\n\n  i18nextDep.depend();\n\n  // returning translated key\n  return i18next.t(i18nKey, { defaultValue: i18nMessage });\n});\n\n/**\n * currencySymbol\n * @summary return shop /locale specific currency format (ie: $)\n * @returns {String} return current locale currency symbol\n */\nTemplate.registerHelper(\"currencySymbol\", function () {\n  const locale = Reaction.Locale.get();\n  const localStorageCurrency = localStorage.getItem(\"currency\");\n  if (localStorageCurrency) {\n    const shop = Shops.findOne();\n    if (Match.test(shop, Object) && shop.currencies) {\n      return shop.currencies[localStorageCurrency].symbol;\n    }\n  }\n  return locale.currency.symbol;\n});\n\n/**\n * formatPrice\n * @summary return shop /locale specific formatted price\n * also accepts a range formatted with \" - \"\n * @param {String} currentPrice - currentPrice or \"xx.xx - xx.xx\" formatted String\n * @param {Boolean} useDefaultShopCurrency - flag for displaying shop's currency in Admin view of PDP\n * @return {String} returns locale formatted and exchange rate converted values\n */\nTemplate.registerHelper(\"formatPrice\", function (formatPrice, useDefaultShopCurrency) {\n  localeDep.depend();\n  return formatPriceString(formatPrice, useDefaultShopCurrency);\n});\n"]},"hash":"e94f6541951218bf39a62f870cdaee79d4b4e050"}
