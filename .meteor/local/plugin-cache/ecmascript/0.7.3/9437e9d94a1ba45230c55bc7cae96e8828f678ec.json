{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/aldeed:template-extension/lib/template-copy-as.js","filenameRelative":"/packages/aldeed:template-extension/lib/template-copy-as.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/aldeed:template-extension/lib/template-copy-as.js.map","sourceFileName":"/packages/aldeed:template-extension/lib/template-copy-as.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"template-copy-as"},"ignored":false,"code":"Template.prototype.copyAs = function () {\n  function copyAs(newTemplateName) {\n    var self = this;\n\n    function createNewTemplate(templateName) {\n      var newTemplate = Template[templateName] = new Template(\"Template.\" + templateName, self.renderFunction);\n      newTemplate.inheritsHelpersFrom(self);\n      newTemplate.inheritsEventsFrom(self);\n      newTemplate.inheritsHooksFrom(self);\n      return newTemplate;\n    } // Check if newTemplateName is an array\n\n\n    if (Array.isArray(newTemplateName)) {\n      var result = [];\n\n      for (var _iterator = newTemplateName, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var name = _ref;\n        result.push(createNewTemplate(name));\n      }\n\n      return result;\n    } // newTemplateName is a string\n\n\n    return createNewTemplate(newTemplateName);\n  }\n\n  return copyAs;\n}();","map":{"version":3,"sources":["/packages/aldeed:template-extension/lib/template-copy-as.js"],"names":["Template","prototype","copyAs","newTemplateName","self","createNewTemplate","templateName","newTemplate","renderFunction","inheritsHelpersFrom","inheritsEventsFrom","inheritsHooksFrom","Array","isArray","result","name","push"],"mappings":"AAAAA,SAASC,SAAT,CAAmBC,MAAnB;AAA4B,WAASA,MAAT,CAAgBC,eAAhB,EAAiC;AAC3D,QAAIC,OAAO,IAAX;;AAEA,aAASC,iBAAT,CAA2BC,YAA3B,EAAyC;AACvC,UAAIC,cACJP,SAASM,YAAT,IAAyB,IAAIN,QAAJ,eAAyBM,YAAzB,EAAyCF,KAAKI,cAA9C,CADzB;AAGAD,kBAAYE,mBAAZ,CAAgCL,IAAhC;AACAG,kBAAYG,kBAAZ,CAA+BN,IAA/B;AACAG,kBAAYI,iBAAZ,CAA8BP,IAA9B;AAEA,aAAOG,WAAP;AACD,KAZ0D,CAc3D;;;AACA,QAAIK,MAAMC,OAAN,CAAcV,eAAd,CAAJ,EAAoC;AAClC,UAAMW,SAAS,EAAf;;AACA,2BAAiBX,eAAjB,kHAAkC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAAzBY,IAAyB;AAChCD,eAAOE,IAAP,CAAYX,kBAAkBU,IAAlB,CAAZ;AACD;;AACD,aAAOD,MAAP;AACD,KArB0D,CAuB3D;;;AACA,WAAOT,kBAAkBF,eAAlB,CAAP;AACD;;AAzBD,SAAqCD,MAArC;AAAA","file":"/packages/aldeed:template-extension/lib/template-copy-as.js.map","sourcesContent":["Template.prototype.copyAs = function copyAs(newTemplateName) {\n  var self = this;\n\n  function createNewTemplate(templateName) {\n    var newTemplate =\n    Template[templateName] = new Template(`Template.${templateName}`, self.renderFunction);\n\n    newTemplate.inheritsHelpersFrom(self);\n    newTemplate.inheritsEventsFrom(self);\n    newTemplate.inheritsHooksFrom(self);\n\n    return newTemplate;\n  }\n\n  // Check if newTemplateName is an array\n  if (Array.isArray(newTemplateName)) {\n    const result = [];\n    for (let name of newTemplateName) {\n      result.push(createNewTemplate(name));\n    }\n    return result;\n  }\n\n  // newTemplateName is a string\n  return createNewTemplate(newTemplateName);\n};\n"]},"hash":"9437e9d94a1ba45230c55bc7cae96e8828f678ec"}
