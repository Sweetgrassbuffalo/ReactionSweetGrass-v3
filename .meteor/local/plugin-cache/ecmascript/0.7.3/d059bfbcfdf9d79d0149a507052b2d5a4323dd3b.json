{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/filter","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_filter"}]},{"source":"./util","imported":["ServiceConfigHelper"],"specifiers":[{"kind":"named","imported":"ServiceConfigHelper","local":"ServiceConfigHelper"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]}],"exports":{"exported":["LoginFormSharedHelpers"],"specifiers":[{"kind":"local","local":"LoginFormSharedHelpers","exported":"LoginFormSharedHelpers"}]}}},"options":{"filename":"/client/modules/accounts/helpers/helpers.js","filenameRelative":"/client/modules/accounts/helpers/helpers.js","inputSourceMap":{"version":3,"sources":["/client/modules/accounts/helpers/helpers.js"],"names":["ServiceConfigHelper","Template","LoginFormSharedHelpers","messages","instance","formMessages","get","hasError","error","formErrors","uniqueId","services","serviceHelper","shouldShowSeperator","enabledServices","enabled","Package","length","hasPasswordService"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAA2B,AACpC,AAAS,AAAgB,AAEzB,AAAO,AAAM,AAAyB,AAEpC;AAAU,IAAY;AAFc;4CAMpC;AAAA,AAAS,AAAO,AACd,AACA;6BACA;AAAA,AAAI,AAAU,AAAQ,AAAO,AAAU,AAAa,AAClD;AAAA,AAAO,AACR;;aAED;AAbkC,AAalC,AAAO,AACR;;WAED;AAAa,AACX,AAAO,AAAS,AAAW,AAAW,AACvC;AAlBmC;0CAoBpC;AAAU,AAAY,AACpB,AAAO,AAAS,AAAW,AAC5B;AAtBmC;+BAwBpC;AAAW,AACT,AAAM,AAAgB,AAAI,AAC1B;AAAO,wBA1B2B,AA0BlC,AAAO,AAAc,AACtB;;yBAED;AAAsB,AACpB,AAAM,AAAgB,AAAI,AAC1B;AAAM,AAAW,mCAAjB,AAAiB,AAAc;4BAC/B;QAAM,WAAkB,cAAA,AAAS,AAAU,AACzC;;QAAS;AADX,eAhCkC,AAoClC,AAAO,AAAC,AAAC,AAAQ,AAAwB,AAAgB,AAAS,AACnE;AALyB,AAAmB;;;AAO7C,AAAqB,AACnB;AAAO,AAAC,AAAC,AAAQ,kCAAjB,AAAS,AACV;;AAzCI,AAA+B;AAGlC,AAAO,AAAS,AAAW,AAAa,AACzC","file":"/client/modules/accounts/helpers/helpers.js.map","sourcesContent":["import _ from \"lodash\";\nimport { ServiceConfigHelper } from \"./util\";\nimport { Template } from \"meteor/templating\";\n\nexport const LoginFormSharedHelpers = {\n\n  messages: function () {\n    return Template.instance().formMessages.get();\n  },\n\n  hasError(error) {\n    // True here means the field is valid\n    // We're checking if theres some other message to display\n    if (error !== true && typeof error !== \"undefined\") {\n      return \"has-error has-feedback\";\n    }\n\n    return false;\n  },\n\n  formErrors() {\n    return Template.instance().formErrors.get();\n  },\n\n  uniqueId: function () {\n    return Template.instance().uniqueId;\n  },\n\n  services() {\n    const serviceHelper = new ServiceConfigHelper();\n    return serviceHelper.services();\n  },\n\n  shouldShowSeperator() {\n    const serviceHelper = new ServiceConfigHelper();\n    const services = serviceHelper.services();\n    const enabledServices = _.filter(services, {\n      enabled: true\n    });\n\n    return !!Package[\"accounts-password\"] && enabledServices.length > 0;\n  },\n\n  hasPasswordService() {\n    return !!Package[\"accounts-password\"];\n  }\n};\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/accounts/helpers/helpers.js.map","sourceFileName":"/client/modules/accounts/helpers/helpers.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"helpers"},"ignored":false,"code":"module.export({\n  LoginFormSharedHelpers: function () {\n    return LoginFormSharedHelpers;\n  }\n});\n\nvar _filter = void 0;\n\nmodule.importSync(\"lodash/filter\", {\n  \"default\": function (v) {\n    _filter = v;\n  }\n}, 0);\nvar ServiceConfigHelper = void 0;\nmodule.importSync(\"./util\", {\n  ServiceConfigHelper: function (v) {\n    ServiceConfigHelper = v;\n  }\n}, 1);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 2);\nvar LoginFormSharedHelpers = {\n  messages: function () {\n    return Template.instance().formMessages.get();\n  },\n  hasError: function (error) {\n    // True here means the field is valid\n    // We're checking if theres some other message to display\n    if (error !== true && typeof error !== \"undefined\") {\n      return \"has-error has-feedback\";\n    }\n\n    return false;\n  },\n  formErrors: function () {\n    return Template.instance().formErrors.get();\n  },\n  uniqueId: function () {\n    return Template.instance().uniqueId;\n  },\n  services: function () {\n    var serviceHelper = new ServiceConfigHelper();\n    return serviceHelper.services();\n  },\n  shouldShowSeperator: function () {\n    var serviceHelper = new ServiceConfigHelper();\n    var services = serviceHelper.services();\n\n    var enabledServices = _filter(services, {\n      enabled: true\n    });\n\n    return !!Package[\"accounts-password\"] && enabledServices.length > 0;\n  },\n  hasPasswordService: function () {\n    return !!Package[\"accounts-password\"];\n  }\n};","map":{"version":3,"sources":["/client/modules/accounts/helpers/helpers.js"],"names":["ServiceConfigHelper","Template","LoginFormSharedHelpers","messages","instance","formMessages","get","hasError","error","formErrors","uniqueId","services","serviceHelper","shouldShowSeperator","enabledServices","enabled","Package","length","hasPasswordService"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAA2B,AACpC,AAAS,AAAgB,AAEzB,AAAO,AAAM,AAAyB,AAEpC;AAAU,IAAY;AAFc;4CAMpC;AAAA,AAAS,AAAO,AACd,AACA;6BACA;AAAA,AAAI,AAAU,AAAQ,AAAO,AAAU,AAAa,AAClD;AAAA,AAAO,AACR;;aAED;AAbkC,AAalC,AAAO,AACR;;WAED;AAAa,AACX,AAAO,AAAS,AAAW,AAAW,AACvC;AAlBmC;0CAoBpC;AAAU,AAAY,AACpB,AAAO,AAAS,AAAW,AAC5B;AAtBmC;+BAwBpC;AAAW,AACT,AAAM,AAAgB,AAAI,AAC1B;AAAO,wBA1B2B,AA0BlC,AAAO,AAAc,AACtB;;yBAED;AAAsB,AACpB,AAAM,AAAgB,AAAI,AAC1B;AAAM,AAAW,mCAAjB,AAAiB,AAAc;4BAC/B;QAAM,WAAkB,cAAA,AAAS,AAAU,AACzC;;QAAS;AADX,eAhCkC,AAoClC,AAAO,AAAC,AAAC,AAAQ,AAAwB,AAAgB,AAAS,AACnE;AALyB,AAAmB;;;AAO7C,AAAqB,AACnB;AAAO,AAAC,AAAC,AAAQ,kCAAjB,AAAS,AACV;;AAzCI,AAA+B;AAGlC,AAAO,AAAS,AAAW,AAAa,AACzC","file":"/client/modules/accounts/helpers/helpers.js.map","sourcesContent":["import _ from \"lodash\";\nimport { ServiceConfigHelper } from \"./util\";\nimport { Template } from \"meteor/templating\";\n\nexport const LoginFormSharedHelpers = {\n\n  messages: function () {\n    return Template.instance().formMessages.get();\n  },\n\n  hasError(error) {\n    // True here means the field is valid\n    // We're checking if theres some other message to display\n    if (error !== true && typeof error !== \"undefined\") {\n      return \"has-error has-feedback\";\n    }\n\n    return false;\n  },\n\n  formErrors() {\n    return Template.instance().formErrors.get();\n  },\n\n  uniqueId: function () {\n    return Template.instance().uniqueId;\n  },\n\n  services() {\n    const serviceHelper = new ServiceConfigHelper();\n    return serviceHelper.services();\n  },\n\n  shouldShowSeperator() {\n    const serviceHelper = new ServiceConfigHelper();\n    const services = serviceHelper.services();\n    const enabledServices = _.filter(services, {\n      enabled: true\n    });\n\n    return !!Package[\"accounts-password\"] && enabledServices.length > 0;\n  },\n\n  hasPasswordService() {\n    return !!Package[\"accounts-password\"];\n  }\n};\n"]},"hash":"d059bfbcfdf9d79d0149a507052b2d5a4323dd3b"}
