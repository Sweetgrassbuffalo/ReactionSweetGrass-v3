{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/collections","imported":["Packages"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Logger"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"meteor/ejson","imported":["EJSON"],"specifiers":[{"kind":"named","imported":"EJSON","local":"EJSON"}]}],"exports":{"exported":["loadSettings","json"],"specifiers":[{"kind":"local","local":"loadSettings","exported":"loadSettings"},{"kind":"local","local":"json","exported":"json"}]}}},"options":{"filename":"/server/api/core/loadSettings.js","filenameRelative":"/server/api/core/loadSettings.js","inputSourceMap":{"version":3,"sources":["/server/api/core/loadSettings.js"],"names":["Packages","Logger","EJSON","loadSettings","json","check","String","exists","service","services","settings","validatedJson","parse","_","isArray","warn","pkg","item","findOne","name","result","upsert","$set","enabled","multi","validate","hasOwnProperty","call","ServiceConfiguration","configurations","debug"],"mappings":"AAAA,OAAS;AAAT,AAAyB;WAAzB;;;;;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAc,AACvB,AAAS,AAAa,AAEtB,AAgBA,AAAO,AAAS,AAAa,AAAM,AACjC,AAAM,AAAM,AACZ,AAAI;;AAAJ;AACI,QAAJ,MACA;MAAA,AAAI,AACJ;MAAA,AAAI,AACJ;MANiC,AAMjC,AAAM,AAAgB,AAAM,AAAM,AAElC;MACA;AAAI,AAAC,MAAA,AAAE,AAAQ,sBAAf,AAAK,AAAU,AAAc,MAAK,AAChC,AAAO,AACL,AACF,OACD;;AAbgC,AAejC;gBACA;AAAA,AAAK,AAAM,AAAO,AAAe,AAC/B;AAAA,AAAK,AAAM,AAAQ,AAAK,AACtB,AAAS,AAAS,AAAQ,AACxB,GAhBN,CAe8B,AAClB,AAAK;;;AAFS,AACtB,AAAS,AAGT;AACA;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;mBAEA;AADA,UAEA;AAAA,AAAI,AAAQ,AACV;AAAS,AAAS,AAAO,AACvB;AADuB,AACjB,AAAK;AADJ,AAEN,AACD;;UAAM,QACJ;0BAAe;qBADX,AAEK,AAAK;AAFV,AAEJ,SADU;AAGX;AAAA,AACM,2BACP;AAAQ,qBAFP,KAPH,AAAS,AAON,AAGD,AAAU;AAFV;AARO,AAEN;iBAYL;;oBACA;AAzBsB,AAsBrB,AACD;AAEA,AAAI,AAAK,AAAS,AAAU,AAC1B,QAAA,AAAK,AAAY,AAAK,AAAS,AAAU,AACvC;AAAA,AAAK,AAAW,AAAU,AACxB;;;kCACA;mCAAI,AAAkB,SAAlB,AAAuB;AAA3B,AAAI,AAAiC,AAAU,AAC7C;;AADE,AAAG;;;;;;;eACM,kDAAS,WAApB,AAAW,AACX;AAAA,AAAqB,AAAe,AAAO,AACzC;mBAAS,wCADgC;AAA3C,AAEG,kCACD;AAAM;yBAER;AALA,AAEG;sBAMN,AACF;AAJK,AAAO,AAAM,AACX,AAAK,AAAO,AAAQ,AACvB;2BAGN;AACD;AAAA,AAAO,AAAO,AAA6B,AAAK,AAAK,AACtD;AACF;AACF","file":"/server/api/core/loadSettings.js.map","sourcesContent":["import { Packages } from \"/lib/collections\";\nimport { Logger } from \"/server/api\";\nimport { EJSON } from \"meteor/ejson\";\n\n/**\n * ReactionRegistry.loadSettings\n * @description\n * This basically allows you to \"hardcode\" all the settings. You can change them\n * via admin etc for the session, but when the server restarts they'll\n * be restored back to the supplied json\n *\n * All settings are private unless added to `settings.public`\n *\n * Meteor account services can be added in `settings.services`\n * @summary updates package settings, accepts json string\n * @param {Object} json - json object to insert\n * @return {Boolean} boolean -  returns true on insert\n * @example\n *  ReactionRegistry.loadSettings Assets.getText(\"settings/reaction.json\")\n */\nexport function loadSettings(json) {\n  check(json, String);\n  let exists;\n  let service;\n  let services;\n  let settings;\n  const validatedJson = EJSON.parse(json);\n\n  // validate json and error out if not an array\n  if (!_.isArray(validatedJson[0])) {\n    Logger.warn(\n      \"Load Settings is not an array. Failed to load settings.\");\n    return;\n  }\n\n  // loop settings and upsert packages.\n  for (const pkg of validatedJson) {\n    for (const item of pkg) {\n      exists = Packages.findOne({\n        name: item.name\n      });\n      //\n      // TODO migrate functionality to Reaction.Import\n      // Reaction.Import.package(item, shopId);\n      //\n      // insert into the Packages collection\n      if (exists) {\n        result = Packages.upsert({\n          name: item.name\n        }, {\n          $set: {\n            settings: item.settings,\n            enabled: item.enabled\n          }\n        }, {\n          multi: true,\n          upsert: true,\n          validate: false\n        });\n      }\n      // sets the private settings of various\n      // accounts authentication services\n      if (item.settings.services) {\n        for (services of item.settings.services) {\n          for (service in services) {\n            // actual settings for the service\n            if ({}.hasOwnProperty.call(services, service)) {\n              settings = services[service];\n              ServiceConfiguration.configurations.upsert({\n                service: service\n              }, {\n                $set: settings\n              });\n              Logger.debug(\"service configuration loaded: \" +\n                item.name + \" | \" + service);\n            }\n          }\n        }\n      }\n      Logger.debug(`loaded local package data: ${item.name}`);\n    }\n  }\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/api/core/loadSettings.js.map","sourceFileName":"/server/api/core/loadSettings.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"loadSettings"},"ignored":false,"code":"module.export({\n  loadSettings: function () {\n    return loadSettings;\n  }\n});\nvar Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 0);\nvar Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 1);\nvar EJSON = void 0;\nmodule.importSync(\"meteor/ejson\", {\n  EJSON: function (v) {\n    EJSON = v;\n  }\n}, 2);\n\nfunction loadSettings(json) {\n  check(json, String);\n  var exists = void 0;\n  var service = void 0;\n  var services = void 0;\n  var settings = void 0;\n  var validatedJson = EJSON.parse(json); // validate json and error out if not an array\n\n  if (!_.isArray(validatedJson[0])) {\n    Logger.warn(\"Load Settings is not an array. Failed to load settings.\");\n    return;\n  } // loop settings and upsert packages.\n\n\n  for (var _iterator = validatedJson, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var pkg = _ref;\n\n    for (var _iterator2 = pkg, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var item = _ref2;\n      exists = Packages.findOne({\n        name: item.name\n      }); //\n      // TODO migrate functionality to Reaction.Import\n      // Reaction.Import.package(item, shopId);\n      //\n      // insert into the Packages collection\n\n      if (exists) {\n        result = Packages.upsert({\n          name: item.name\n        }, {\n          $set: {\n            settings: item.settings,\n            enabled: item.enabled\n          }\n        }, {\n          multi: true,\n          upsert: true,\n          validate: false\n        });\n      } // sets the private settings of various\n      // accounts authentication services\n\n\n      if (item.settings.services) {\n        for (var _iterator3 = item.settings.services, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n          if (_isArray3) {\n            if (_i3 >= _iterator3.length) break;\n            services = _iterator3[_i3++];\n          } else {\n            _i3 = _iterator3.next();\n            if (_i3.done) break;\n            services = _i3.value;\n          }\n\n          for (service in meteorBabelHelpers.sanitizeForInObject(services)) {\n            // actual settings for the service\n            if ({}.hasOwnProperty.call(services, service)) {\n              settings = services[service];\n              ServiceConfiguration.configurations.upsert({\n                service: service\n              }, {\n                $set: settings\n              });\n              Logger.debug(\"service configuration loaded: \" + item.name + \" | \" + service);\n            }\n          }\n        }\n      }\n\n      Logger.debug(\"loaded local package data: \" + item.name);\n    }\n  }\n}","map":{"version":3,"sources":["/server/api/core/loadSettings.js"],"names":["Packages","Logger","EJSON","loadSettings","json","check","String","exists","service","services","settings","validatedJson","parse","_","isArray","warn","pkg","item","findOne","name","result","upsert","$set","enabled","multi","validate","hasOwnProperty","call","ServiceConfiguration","configurations","debug"],"mappings":"AAAA,OAAS;AAAT,AAAyB;WAAzB;;;;;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAc,AACvB,AAAS,AAAa,AAEtB,AAgBA,AAAO,AAAS,AAAa,AAAM,AACjC,AAAM,AAAM,AACZ,AAAI;;AAAJ;AACI,QAAJ,MACA;MAAA,AAAI,AACJ;MAAA,AAAI,AACJ;MANiC,AAMjC,AAAM,AAAgB,AAAM,AAAM,AAElC;MACA;AAAI,AAAC,MAAA,AAAE,AAAQ,sBAAf,AAAK,AAAU,AAAc,MAAK,AAChC,AAAO,AACL,AACF,OACD;;AAbgC,AAejC;gBACA;AAAA,AAAK,AAAM,AAAO,AAAe,AAC/B;AAAA,AAAK,AAAM,AAAQ,AAAK,AACtB,AAAS,AAAS,AAAQ,AACxB,GAhBN,CAe8B,AAClB,AAAK;;;AAFS,AACtB,AAAS,AAGT;AACA;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;mBAEA;AADA,UAEA;AAAA,AAAI,AAAQ,AACV;AAAS,AAAS,AAAO,AACvB;AADuB,AACjB,AAAK;AADJ,AAEN,AACD;;UAAM,QACJ;0BAAe;qBADX,AAEK,AAAK;AAFV,AAEJ,SADU;AAGX;AAAA,AACM,2BACP;AAAQ,qBAFP,KAPH,AAAS,AAON,AAGD,AAAU;AAFV;AARO,AAEN;iBAYL;;oBACA;AAzBsB,AAsBrB,AACD;AAEA,AAAI,AAAK,AAAS,AAAU,AAC1B,QAAA,AAAK,AAAY,AAAK,AAAS,AAAU,AACvC;AAAA,AAAK,AAAW,AAAU,AACxB;;;kCACA;mCAAI,AAAkB,SAAlB,AAAuB;AAA3B,AAAI,AAAiC,AAAU,AAC7C;;AADE,AAAG;;;;;;;eACM,kDAAS,WAApB,AAAW,AACX;AAAA,AAAqB,AAAe,AAAO,AACzC;mBAAS,wCADgC;AAA3C,AAEG,kCACD;AAAM;yBAER;AALA,AAEG;sBAMN,AACF;AAJK,AAAO,AAAM,AACX,AAAK,AAAO,AAAQ,AACvB;2BAGN;AACD;AAAA,AAAO,AAAO,AAA6B,AAAK,AAAK,AACtD;AACF;AACF","file":"/server/api/core/loadSettings.js.map","sourcesContent":["import { Packages } from \"/lib/collections\";\nimport { Logger } from \"/server/api\";\nimport { EJSON } from \"meteor/ejson\";\n\n/**\n * ReactionRegistry.loadSettings\n * @description\n * This basically allows you to \"hardcode\" all the settings. You can change them\n * via admin etc for the session, but when the server restarts they'll\n * be restored back to the supplied json\n *\n * All settings are private unless added to `settings.public`\n *\n * Meteor account services can be added in `settings.services`\n * @summary updates package settings, accepts json string\n * @param {Object} json - json object to insert\n * @return {Boolean} boolean -  returns true on insert\n * @example\n *  ReactionRegistry.loadSettings Assets.getText(\"settings/reaction.json\")\n */\nexport function loadSettings(json) {\n  check(json, String);\n  let exists;\n  let service;\n  let services;\n  let settings;\n  const validatedJson = EJSON.parse(json);\n\n  // validate json and error out if not an array\n  if (!_.isArray(validatedJson[0])) {\n    Logger.warn(\n      \"Load Settings is not an array. Failed to load settings.\");\n    return;\n  }\n\n  // loop settings and upsert packages.\n  for (const pkg of validatedJson) {\n    for (const item of pkg) {\n      exists = Packages.findOne({\n        name: item.name\n      });\n      //\n      // TODO migrate functionality to Reaction.Import\n      // Reaction.Import.package(item, shopId);\n      //\n      // insert into the Packages collection\n      if (exists) {\n        result = Packages.upsert({\n          name: item.name\n        }, {\n          $set: {\n            settings: item.settings,\n            enabled: item.enabled\n          }\n        }, {\n          multi: true,\n          upsert: true,\n          validate: false\n        });\n      }\n      // sets the private settings of various\n      // accounts authentication services\n      if (item.settings.services) {\n        for (services of item.settings.services) {\n          for (service in services) {\n            // actual settings for the service\n            if ({}.hasOwnProperty.call(services, service)) {\n              settings = services[service];\n              ServiceConfiguration.configurations.upsert({\n                service: service\n              }, {\n                $set: settings\n              });\n              Logger.debug(\"service configuration loaded: \" +\n                item.name + \" | \" + service);\n            }\n          }\n        }\n      }\n      Logger.debug(`loaded local package data: ${item.name}`);\n    }\n  }\n}\n"]},"hash":"a44736755ea2e9c55b3774af21d63314e378da4b"}
