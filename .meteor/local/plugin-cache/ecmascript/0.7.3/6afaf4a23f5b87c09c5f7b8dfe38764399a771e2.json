{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/intersection","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_intersection"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/lib/collections","imported":["Products","ProductSearch","Orders","OrderSearch","Accounts","AccountSearch"],"specifiers":[{"kind":"named","imported":"Products","local":"Products"},{"kind":"named","imported":"ProductSearch","local":"ProductSearch"},{"kind":"named","imported":"Orders","local":"Orders"},{"kind":"named","imported":"OrderSearch","local":"OrderSearch"},{"kind":"named","imported":"Accounts","local":"Accounts"},{"kind":"named","imported":"AccountSearch","local":"AccountSearch"}]},{"source":"../methods/searchcollections","imported":["getSearchParameters","buildProductSearchRecord","buildOrderSearchRecord","buildAccountSearchRecord"],"specifiers":[{"kind":"named","imported":"getSearchParameters","local":"getSearchParameters"},{"kind":"named","imported":"buildProductSearchRecord","local":"buildProductSearchRecord"},{"kind":"named","imported":"buildOrderSearchRecord","local":"buildOrderSearchRecord"},{"kind":"named","imported":"buildAccountSearchRecord","local":"buildAccountSearchRecord"}]},{"source":"/server/api","imported":["Logger"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/search-mongo/server/hooks/search.js","filenameRelative":"/imports/plugins/included/search-mongo/server/hooks/search.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/search-mongo/server/hooks/search.js"],"names":["Meteor","Products","ProductSearch","Orders","OrderSearch","Accounts","AccountSearch","getSearchParameters","buildProductSearchRecord","buildOrderSearchRecord","buildAccountSearchRecord","Logger","after","insert","userId","doc","isAppTest","_id","remove","update","accountId","orderId","type","productId","debug","fieldNames","fieldSet","modifiedFields","length","title","isDeleted"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAc,AACvB,AAAS,AAAU,AAAe,AAAQ,AAAa,AAAU,AAAqB,AACtF,AAAS,AACP,AAA0B,AAAwB,AAAgC,AACpF,AAAS,AAAc,AAEvB,AAAS,AAAM,AAAO,AAAC,AAAQ,AAAQ,AACrC,AAAI,AAAiB,AAAC,AAAO,AAAW;AACtC,gCAAyB,QAAzB,AAA6B,KAC9B;0CAHH,AAIC;iCAED;AAAA,AAAS,AAAM,AAAO,AAAC,AAAQ,AAAQ,AACrC;AAAA,AAAI,AAAiB,AAAC,AAAO,AAAW,AACtC,AAAc,AAAO,AAAI;AAC1B,6CAHH,AAIC;0CAED;AAAA,AAAS,AAAM,kBAAf,AAAsB,AAAC,WAAD,AAAS,AAAQ,AACrC;AAAA,AAAI,AAAiB,AAAC,AAAO,AAAW,AACtC;AAAA,AAAM,AAAY,AAAI,AACtB,AAAc,AAAO;AACrB,gCAAyB,QAAzB,KACD;0CALH,AAMC;wBAGD;AAAA,AAAO,AAAM,kBAAb,AAAoB,AAAC,OAAD,AAAS,AAAQ,AACnC;AAAI,AAAe,AAAC,6BAApB,AAA2B,AAAW,AACpC;AAAA,AAAY,AAAO,AAAI,AACxB;AAHH,AAIC,AAED,AAAO,AAAM,AAAO,AAAC,AAAQ,AAAQ;AACnC,AAAI,8BAAe,AAAC,QAAO,KAA3B,AAAsC,AACpC;MAAM,AAAU,gBAAhB,AAAoB,kBACpB;2BAAA,AAAuB,AACxB;AACF;AALD,AAOA,AAAO,AAAM,AAAO,AAAC,AAAQ,AAAQ;AACnC,AAAI,8BAAe,AAAC,QAAO,KAA3B,AAAsC,AACpC;MAAM,AAAU,gBAAhB,AAAoB,kBACpB;QAAY,UAAZ,AAAmB,IAAnB,AACA;2BAAA,AAAuB,AACxB;AACF;A,AAND,AAQA;2CAGA;MAAA,AAAS,AAAM,eAAf,CAAsB,AAAC,OAAD,AAAS,AAAQ,WACrC;AAAI,kBAAiB,IAArB,AAAI,AAAkB,AAAO,AAAa,AAAI,AAAS,AAAU,AAC/D;AAAM,gBAAY,OAAlB,AAAsB,AACtB;AAAA,AAAc,AAAO,2BAArB,AACA;AAAA,AAAO,AAAO,AAAkB,AAAU,AAC3C;AALH,AAMC,A,AAED,IACA,AACA;;;AACA,SAAA,AAAS,MAAT,AAAe,OAAO,UAAA,AAAC,QAAD,AAAS,AAAK,KAAd,AAA6B,AACjD;MAAI,iBAAiB,CAAC,OAAlB,AAAyB,aAAa,IAAA,AAAI,SAA9C,AAAuD,UAAU,AAC/D;QAAM,YAAY,IAAlB,AAAsB,AACtB;AAAM,yBAAE;sCAAF;AAAN,AAAqB;AACrB,AAAM,AAAiB,AAAe,AAAU;AAChD,AAAI,AAAe,AAAQ;AACzB,AAAO,AAAO,AAA8B,AAAI,AAAM;;AACtD,eAAc,iBAAd,AAAqB,aAArB;;QACI,AAAC,AAAI,YAAT,IAAoB,AAAE;;AAAtB,+BACE;;;yBAAyB,cAAzB,UACD;;+BALH,AAMC;AAAM,wDACL;AAAA,AAAO,AAAM,2BAAb,AACD;;;AACF;iC,AAdH,AAeC,AAED;;;;AAIA;AAAA,AAAS,AAAM,AAAO,AAAC,AAAQ,AAAQ,AACrC;AAAA,AAAI,AAAiB,AAAC,AAAO,AAAa,AAAI,AAAS,AAAU,AAC/D,AAAM,AAAY,AAAI,IAF1B,AAGI,AAAyB,AACzB,AAAO,AAAO,AAAgB,AAAU,AACzC,AACF","file":"/imports/plugins/included/search-mongo/server/hooks/search.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Products, ProductSearch, Orders, OrderSearch, Accounts, AccountSearch } from \"/lib/collections\";\nimport { getSearchParameters,\n  buildProductSearchRecord, buildOrderSearchRecord, buildAccountSearchRecord } from \"../methods/searchcollections\";\nimport { Logger } from \"/server/api\";\n\nAccounts.after.insert((userId, doc) => {\n  if (AccountSearch && !Meteor.isAppTest) {\n    buildAccountSearchRecord(doc._id);\n  }\n});\n\nAccounts.after.remove((userId, doc) => {\n  if (AccountSearch && !Meteor.isAppTest) {\n    AccountSearch.remove(doc._id);\n  }\n});\n\nAccounts.after.update((userId, doc) => {\n  if (AccountSearch && !Meteor.isAppTest) {\n    const accountId = doc._id;\n    AccountSearch.remove(accountId);\n    buildAccountSearchRecord(accountId);\n  }\n});\n\n\nOrders.after.remove((userId, doc) => {\n  if (OrderSearch && !Meteor.isAppTest) {\n    OrderSearch.remove(doc._id);\n  }\n});\n\nOrders.after.insert((userId, doc) => {\n  if (OrderSearch && !Meteor.isAppTest) {\n    const orderId = doc._id;\n    buildOrderSearchRecord(orderId);\n  }\n});\n\nOrders.after.update((userId, doc) => {\n  if (OrderSearch && !Meteor.isAppTest) {\n    const orderId = doc._id;\n    OrderSearch.remove(orderId);\n    buildOrderSearchRecord(orderId);\n  }\n});\n\n/**\n * if product is removed, remove product search record\n */\nProducts.after.remove((userId, doc) => {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    const productId = doc._id;\n    ProductSearch.remove(productId);\n    Logger.debug(`Removed product ${productId} from ProductSearch collection`);\n  }\n});\n\n//\n// after product update rebuild product search record\n//\nProducts.after.update((userId, doc, fieldNames) => {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    const productId = doc._id;\n    const { fieldSet } = getSearchParameters();\n    const modifiedFields = _.intersection(fieldSet, fieldNames);\n    if (modifiedFields.length) {\n      Logger.debug(`Rewriting search record for ${doc.title}`);\n      ProductSearch.remove(productId);\n      if (!doc.isDeleted) { // do not create record if product was archived\n        buildProductSearchRecord(productId);\n      }\n    } else {\n      Logger.debug(\"No watched fields modified, skipping\");\n    }\n  }\n});\n\n/**\n * after insert\n * @summary should fires on create new variants, on clones products/variants\n */\nProducts.after.insert((userId, doc) => {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    const productId = doc._id;\n    buildProductSearchRecord(productId);\n    Logger.debug(`Added product ${productId} to ProductSearch`);\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/search-mongo/server/hooks/search.js.map","sourceFileName":"/imports/plugins/included/search-mongo/server/hooks/search.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"search"},"ignored":false,"code":"var _intersection = void 0;\n\nmodule.importSync(\"lodash/intersection\", {\n  \"default\": function (v) {\n    _intersection = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Products = void 0,\n    ProductSearch = void 0,\n    Orders = void 0,\n    OrderSearch = void 0,\n    Accounts = void 0,\n    AccountSearch = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Products: function (v) {\n    Products = v;\n  },\n  ProductSearch: function (v) {\n    ProductSearch = v;\n  },\n  Orders: function (v) {\n    Orders = v;\n  },\n  OrderSearch: function (v) {\n    OrderSearch = v;\n  },\n  Accounts: function (v) {\n    Accounts = v;\n  },\n  AccountSearch: function (v) {\n    AccountSearch = v;\n  }\n}, 2);\nvar getSearchParameters = void 0,\n    buildProductSearchRecord = void 0,\n    buildOrderSearchRecord = void 0,\n    buildAccountSearchRecord = void 0;\nmodule.importSync(\"../methods/searchcollections\", {\n  getSearchParameters: function (v) {\n    getSearchParameters = v;\n  },\n  buildProductSearchRecord: function (v) {\n    buildProductSearchRecord = v;\n  },\n  buildOrderSearchRecord: function (v) {\n    buildOrderSearchRecord = v;\n  },\n  buildAccountSearchRecord: function (v) {\n    buildAccountSearchRecord = v;\n  }\n}, 3);\nvar Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 4);\nAccounts.after.insert(function (userId, doc) {\n  if (AccountSearch && !Meteor.isAppTest) {\n    buildAccountSearchRecord(doc._id);\n  }\n});\nAccounts.after.remove(function (userId, doc) {\n  if (AccountSearch && !Meteor.isAppTest) {\n    AccountSearch.remove(doc._id);\n  }\n});\nAccounts.after.update(function (userId, doc) {\n  if (AccountSearch && !Meteor.isAppTest) {\n    var accountId = doc._id;\n    AccountSearch.remove(accountId);\n    buildAccountSearchRecord(accountId);\n  }\n});\nOrders.after.remove(function (userId, doc) {\n  if (OrderSearch && !Meteor.isAppTest) {\n    OrderSearch.remove(doc._id);\n  }\n});\nOrders.after.insert(function (userId, doc) {\n  if (OrderSearch && !Meteor.isAppTest) {\n    var orderId = doc._id;\n    buildOrderSearchRecord(orderId);\n  }\n});\nOrders.after.update(function (userId, doc) {\n  if (OrderSearch && !Meteor.isAppTest) {\n    var orderId = doc._id;\n    OrderSearch.remove(orderId);\n    buildOrderSearchRecord(orderId);\n  }\n}); /**\n     * if product is removed, remove product search record\n     */\nProducts.after.remove(function (userId, doc) {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    var productId = doc._id;\n    ProductSearch.remove(productId);\n    Logger.debug(\"Removed product \" + productId + \" from ProductSearch collection\");\n  }\n}); //\n// after product update rebuild product search record\n//\n\nProducts.after.update(function (userId, doc, fieldNames) {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    var productId = doc._id;\n\n    var _getSearchParameters = getSearchParameters(),\n        fieldSet = _getSearchParameters.fieldSet;\n\n    var modifiedFields = _intersection(fieldSet, fieldNames);\n\n    if (modifiedFields.length) {\n      Logger.debug(\"Rewriting search record for \" + doc.title);\n      ProductSearch.remove(productId);\n\n      if (!doc.isDeleted) {\n        // do not create record if product was archived\n        buildProductSearchRecord(productId);\n      }\n    } else {\n      Logger.debug(\"No watched fields modified, skipping\");\n    }\n  }\n}); /**\n     * after insert\n     * @summary should fires on create new variants, on clones products/variants\n     */\nProducts.after.insert(function (userId, doc) {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    var productId = doc._id;\n    buildProductSearchRecord(productId);\n    Logger.debug(\"Added product \" + productId + \" to ProductSearch\");\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/search-mongo/server/hooks/search.js"],"names":["Meteor","Products","ProductSearch","Orders","OrderSearch","Accounts","AccountSearch","getSearchParameters","buildProductSearchRecord","buildOrderSearchRecord","buildAccountSearchRecord","Logger","after","insert","userId","doc","isAppTest","_id","remove","update","accountId","orderId","type","productId","debug","fieldNames","fieldSet","modifiedFields","length","title","isDeleted"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAc,AACvB,AAAS,AAAU,AAAe,AAAQ,AAAa,AAAU,AAAqB,AACtF,AAAS,AACP,AAA0B,AAAwB,AAAgC,AACpF,AAAS,AAAc,AAEvB,AAAS,AAAM,AAAO,AAAC,AAAQ,AAAQ,AACrC,AAAI,AAAiB,AAAC,AAAO,AAAW;AACtC,gCAAyB,QAAzB,AAA6B,KAC9B;0CAHH,AAIC;iCAED;AAAA,AAAS,AAAM,AAAO,AAAC,AAAQ,AAAQ,AACrC;AAAA,AAAI,AAAiB,AAAC,AAAO,AAAW,AACtC,AAAc,AAAO,AAAI;AAC1B,6CAHH,AAIC;0CAED;AAAA,AAAS,AAAM,kBAAf,AAAsB,AAAC,WAAD,AAAS,AAAQ,AACrC;AAAA,AAAI,AAAiB,AAAC,AAAO,AAAW,AACtC;AAAA,AAAM,AAAY,AAAI,AACtB,AAAc,AAAO;AACrB,gCAAyB,QAAzB,KACD;0CALH,AAMC;wBAGD;AAAA,AAAO,AAAM,kBAAb,AAAoB,AAAC,OAAD,AAAS,AAAQ,AACnC;AAAI,AAAe,AAAC,6BAApB,AAA2B,AAAW,AACpC;AAAA,AAAY,AAAO,AAAI,AACxB;AAHH,AAIC,AAED,AAAO,AAAM,AAAO,AAAC,AAAQ,AAAQ;AACnC,AAAI,8BAAe,AAAC,QAAO,KAA3B,AAAsC,AACpC;MAAM,AAAU,gBAAhB,AAAoB,kBACpB;2BAAA,AAAuB,AACxB;AACF;AALD,AAOA,AAAO,AAAM,AAAO,AAAC,AAAQ,AAAQ;AACnC,AAAI,8BAAe,AAAC,QAAO,KAA3B,AAAsC,AACpC;MAAM,AAAU,gBAAhB,AAAoB,kBACpB;QAAY,UAAZ,AAAmB,IAAnB,AACA;2BAAA,AAAuB,AACxB;AACF;A,AAND,AAQA;2CAGA;MAAA,AAAS,AAAM,eAAf,CAAsB,AAAC,OAAD,AAAS,AAAQ,WACrC;AAAI,kBAAiB,IAArB,AAAI,AAAkB,AAAO,AAAa,AAAI,AAAS,AAAU,AAC/D;AAAM,gBAAY,OAAlB,AAAsB,AACtB;AAAA,AAAc,AAAO,2BAArB,AACA;AAAA,AAAO,AAAO,AAAkB,AAAU,AAC3C;AALH,AAMC,A,AAED,IACA,AACA;;;AACA,SAAA,AAAS,MAAT,AAAe,OAAO,UAAA,AAAC,QAAD,AAAS,AAAK,KAAd,AAA6B,AACjD;MAAI,iBAAiB,CAAC,OAAlB,AAAyB,aAAa,IAAA,AAAI,SAA9C,AAAuD,UAAU,AAC/D;QAAM,YAAY,IAAlB,AAAsB,AACtB;AAAM,yBAAE;sCAAF;AAAN,AAAqB;AACrB,AAAM,AAAiB,AAAe,AAAU;AAChD,AAAI,AAAe,AAAQ;AACzB,AAAO,AAAO,AAA8B,AAAI,AAAM;;AACtD,eAAc,iBAAd,AAAqB,aAArB;;QACI,AAAC,AAAI,YAAT,IAAoB,AAAE;;AAAtB,+BACE;;;yBAAyB,cAAzB,UACD;;+BALH,AAMC;AAAM,wDACL;AAAA,AAAO,AAAM,2BAAb,AACD;;;AACF;iC,AAdH,AAeC,AAED;;;;AAIA;AAAA,AAAS,AAAM,AAAO,AAAC,AAAQ,AAAQ,AACrC;AAAA,AAAI,AAAiB,AAAC,AAAO,AAAa,AAAI,AAAS,AAAU,AAC/D,AAAM,AAAY,AAAI,IAF1B,AAGI,AAAyB,AACzB,AAAO,AAAO,AAAgB,AAAU,AACzC,AACF","file":"/imports/plugins/included/search-mongo/server/hooks/search.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Products, ProductSearch, Orders, OrderSearch, Accounts, AccountSearch } from \"/lib/collections\";\nimport { getSearchParameters,\n  buildProductSearchRecord, buildOrderSearchRecord, buildAccountSearchRecord } from \"../methods/searchcollections\";\nimport { Logger } from \"/server/api\";\n\nAccounts.after.insert((userId, doc) => {\n  if (AccountSearch && !Meteor.isAppTest) {\n    buildAccountSearchRecord(doc._id);\n  }\n});\n\nAccounts.after.remove((userId, doc) => {\n  if (AccountSearch && !Meteor.isAppTest) {\n    AccountSearch.remove(doc._id);\n  }\n});\n\nAccounts.after.update((userId, doc) => {\n  if (AccountSearch && !Meteor.isAppTest) {\n    const accountId = doc._id;\n    AccountSearch.remove(accountId);\n    buildAccountSearchRecord(accountId);\n  }\n});\n\n\nOrders.after.remove((userId, doc) => {\n  if (OrderSearch && !Meteor.isAppTest) {\n    OrderSearch.remove(doc._id);\n  }\n});\n\nOrders.after.insert((userId, doc) => {\n  if (OrderSearch && !Meteor.isAppTest) {\n    const orderId = doc._id;\n    buildOrderSearchRecord(orderId);\n  }\n});\n\nOrders.after.update((userId, doc) => {\n  if (OrderSearch && !Meteor.isAppTest) {\n    const orderId = doc._id;\n    OrderSearch.remove(orderId);\n    buildOrderSearchRecord(orderId);\n  }\n});\n\n/**\n * if product is removed, remove product search record\n */\nProducts.after.remove((userId, doc) => {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    const productId = doc._id;\n    ProductSearch.remove(productId);\n    Logger.debug(`Removed product ${productId} from ProductSearch collection`);\n  }\n});\n\n//\n// after product update rebuild product search record\n//\nProducts.after.update((userId, doc, fieldNames) => {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    const productId = doc._id;\n    const { fieldSet } = getSearchParameters();\n    const modifiedFields = _.intersection(fieldSet, fieldNames);\n    if (modifiedFields.length) {\n      Logger.debug(`Rewriting search record for ${doc.title}`);\n      ProductSearch.remove(productId);\n      if (!doc.isDeleted) { // do not create record if product was archived\n        buildProductSearchRecord(productId);\n      }\n    } else {\n      Logger.debug(\"No watched fields modified, skipping\");\n    }\n  }\n});\n\n/**\n * after insert\n * @summary should fires on create new variants, on clones products/variants\n */\nProducts.after.insert((userId, doc) => {\n  if (ProductSearch && !Meteor.isAppTest && doc.type === \"simple\") {\n    const productId = doc._id;\n    buildProductSearchRecord(productId);\n    Logger.debug(`Added product ${productId} to ProductSearch`);\n  }\n});\n"]},"hash":"6afaf4a23f5b87c09c5f7b8dfe38764399a771e2"}
