{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/lib/collections","imported":["*"],"specifiers":[{"kind":"namespace","local":"Collections"}]},{"source":"meteor/session","imported":["Session"],"specifiers":[{"kind":"named","imported":"Session","local":"Session"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]}],"exports":{"exported":["setValidatedAddress","res"],"specifiers":[{"kind":"local","local":"setValidatedAddress","exported":"setValidatedAddress"},{"kind":"local","local":"res","exported":"res"}]}}},"options":{"filename":"/client/modules/accounts/templates/addressBook/add/add.js","filenameRelative":"/client/modules/accounts/templates/addressBook/add/add.js","inputSourceMap":{"version":3,"sources":["/client/modules/accounts/templates/addressBook/add/add.js"],"names":["i18next","Collections","Session","Meteor","Template","addressBookAdd","helpers","thisAddress","account","Accounts","findOne","userId","profile","name","fullName","addressBook","length","isShippingDefault","isBillingDefault","get","postal","zipcode","country","countryCode","city","region","state","hasAddressBookEntries","setValidatedAddress","res","validatedAddress","$","val","address1","address2","AutoForm","hooks","addressBookAddForm","onSubmit","insertDoc","that","event","preventDefault","template","firstNode","closest","call","err","validated","error","result","Alerts","toast","t","message","done","Error","trigger","Event","inline","placement","i18nKey","formErrors","details"],"mappings":"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","file":"/client/modules/accounts/templates/addressBook/add/add.js.map","sourcesContent":["import { i18next } from \"/client/api\";\nimport * as Collections from \"/lib/collections\";\nimport { Session } from \"meteor/session\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\n\nTemplate.addressBookAdd.helpers({\n  thisAddress: function () {\n    const thisAddress = {};\n    // admin should receive his account\n    const account = Collections.Accounts.findOne({\n      userId: Meteor.userId()\n    });\n    if (account) {\n      if (account.profile) {\n        if (account.profile.name) {\n          thisAddress.fullName = account.profile.name;\n        }\n        // if this will be the first address we set defaults here and not display\n        // them inside form\n        if (account.profile.addressBook) {\n          if (account.profile.addressBook.length === 0) {\n            thisAddress.isShippingDefault = true;\n            thisAddress.isBillingDefault = true;\n          }\n        }\n      }\n    }\n\n    if (Session.get(\"address\")) {\n      thisAddress.postal = Session.get(\"address\").zipcode;\n      thisAddress.country = Session.get(\"address\").countryCode;\n      thisAddress.city = Session.get(\"address\").city;\n      thisAddress.region = Session.get(\"address\").state;\n    }\n\n    return thisAddress;\n  },\n\n  hasAddressBookEntries: function () {\n    const account = Collections.Accounts.findOne({\n      userId: Meteor.userId()\n    });\n    if (account) {\n      if (account.profile) {\n        if (account.profile.addressBook) {\n          return account.profile.addressBook.length > 0;\n        }\n      }\n    }\n\n    return false;\n  }\n});\n\n\nexport function setValidatedAddress(res) {\n  if (res.validatedAddress.city) {\n    const city = $(\"input[name='city']\");\n    city.val(res.validatedAddress.city);\n  }\n  if (res.validatedAddress.postal) {\n    const postal = $(\"input[name='postal']\");\n    postal.val(res.validatedAddress.postal);\n  }\n  if (res.validatedAddress.address1) {\n    const address1 = $(\"input[name='address1']\");\n    address1.val(res.validatedAddress.address1);\n  }\n\n  if (res.validatedAddress.address2) {\n    const address2 = $(\"input[name='address2']\");\n    address2.val(res.validatedAddress.address2);\n  }\n  if (res.validatedAddress.country) {\n    const country = $(\"select[name='country']\");\n    country.val(res.validatedAddress.country);\n  }\n\n  if (res.validatedAddress.region) {\n    const region = $(\"select[name='region']\");\n    region.val(res.validatedAddress.region);\n  }\n}\n\n/**\n * addressBookAddForm form handling\n * @description gets accountId and calls addressBookAdd method\n * @fires \"accounts/addressBookAdd\" method\n */\nAutoForm.hooks({\n  addressBookAddForm: {\n    onSubmit: function (insertDoc) {\n      const that = this;\n      this.event.preventDefault();\n      const addressBook = $(this.template.firstNode).closest(\".address-book\");\n\n      Meteor.call(\"accounts/validateAddress\", insertDoc, function (err, res) {\n        if (res.validated) {\n          Meteor.call(\"accounts/addressBookAdd\", insertDoc, function (error, result) {\n            if (error) {\n              Alerts.toast(i18next.t(\"addressBookAdd.failedToAddAddress\", { err: error.message }), \"error\");\n              that.done(new Error(\"Failed to add address: \", error));\n              return false;\n            }\n            if (result) {\n              that.done();\n              addressBook.trigger($.Event(\"showMainView\"));\n              return true;\n            }\n          });\n        } else {\n          if (res.validatedAddress) {\n            setValidatedAddress(res);\n            Alerts.inline(\"Made changes to your address based upon validation. Please ensure this is correct\", \"warning\", {\n              placement: \"addressBookAdd\",\n              i18nKey: \"addressBookAdd.validatedAddress\"\n            });\n          }\n          if (res.formErrors) {\n            for (const error of res.formErrors) {\n              Alerts.inline(error.details, \"error\", {\n                placement: \"addressBookAdd\"\n              });\n            }\n          }\n          that.done(\"Validation failed\"); // renable Save and Continue button\n        }\n      });\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/accounts/templates/addressBook/add/add.js.map","sourceFileName":"/client/modules/accounts/templates/addressBook/add/add.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"add"},"ignored":false,"code":"module.export({\n  setValidatedAddress: function () {\n    return setValidatedAddress;\n  }\n});\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 0);\nvar Collections = Object.create(null);\nmodule.importSync(\"/lib/collections\", {\n  \"*\": function (v, n) {\n    Collections[n] = v;\n  }\n}, 1);\nvar Session = void 0;\nmodule.importSync(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 2);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 3);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 4);\nTemplate.addressBookAdd.helpers({\n  thisAddress: function () {\n    var thisAddress = {}; // admin should receive his account\n\n    var account = Collections.Accounts.findOne({\n      userId: Meteor.userId()\n    });\n\n    if (account) {\n      if (account.profile) {\n        if (account.profile.name) {\n          thisAddress.fullName = account.profile.name;\n        } // if this will be the first address we set defaults here and not display\n        // them inside form\n\n\n        if (account.profile.addressBook) {\n          if (account.profile.addressBook.length === 0) {\n            thisAddress.isShippingDefault = true;\n            thisAddress.isBillingDefault = true;\n          }\n        }\n      }\n    }\n\n    if (Session.get(\"address\")) {\n      thisAddress.postal = Session.get(\"address\").zipcode;\n      thisAddress.country = Session.get(\"address\").countryCode;\n      thisAddress.city = Session.get(\"address\").city;\n      thisAddress.region = Session.get(\"address\").state;\n    }\n\n    return thisAddress;\n  },\n  hasAddressBookEntries: function () {\n    var account = Collections.Accounts.findOne({\n      userId: Meteor.userId()\n    });\n\n    if (account) {\n      if (account.profile) {\n        if (account.profile.addressBook) {\n          return account.profile.addressBook.length > 0;\n        }\n      }\n    }\n\n    return false;\n  }\n});\n\nfunction setValidatedAddress(res) {\n  if (res.validatedAddress.city) {\n    var city = $(\"input[name='city']\");\n    city.val(res.validatedAddress.city);\n  }\n\n  if (res.validatedAddress.postal) {\n    var postal = $(\"input[name='postal']\");\n    postal.val(res.validatedAddress.postal);\n  }\n\n  if (res.validatedAddress.address1) {\n    var address1 = $(\"input[name='address1']\");\n    address1.val(res.validatedAddress.address1);\n  }\n\n  if (res.validatedAddress.address2) {\n    var address2 = $(\"input[name='address2']\");\n    address2.val(res.validatedAddress.address2);\n  }\n\n  if (res.validatedAddress.country) {\n    var country = $(\"select[name='country']\");\n    country.val(res.validatedAddress.country);\n  }\n\n  if (res.validatedAddress.region) {\n    var region = $(\"select[name='region']\");\n    region.val(res.validatedAddress.region);\n  }\n}\n\n/**\n * addressBookAddForm form handling\n * @description gets accountId and calls addressBookAdd method\n * @fires \"accounts/addressBookAdd\" method\n */AutoForm.hooks({\n  addressBookAddForm: {\n    onSubmit: function (insertDoc) {\n      var that = this;\n      this.event.preventDefault();\n      var addressBook = $(this.template.firstNode).closest(\".address-book\");\n      Meteor.call(\"accounts/validateAddress\", insertDoc, function (err, res) {\n        if (res.validated) {\n          Meteor.call(\"accounts/addressBookAdd\", insertDoc, function (error, result) {\n            if (error) {\n              Alerts.toast(i18next.t(\"addressBookAdd.failedToAddAddress\", {\n                err: error.message\n              }), \"error\");\n              that.done(new Error(\"Failed to add address: \", error));\n              return false;\n            }\n\n            if (result) {\n              that.done();\n              addressBook.trigger($.Event(\"showMainView\"));\n              return true;\n            }\n          });\n        } else {\n          if (res.validatedAddress) {\n            setValidatedAddress(res);\n            Alerts.inline(\"Made changes to your address based upon validation. Please ensure this is correct\", \"warning\", {\n              placement: \"addressBookAdd\",\n              i18nKey: \"addressBookAdd.validatedAddress\"\n            });\n          }\n\n          if (res.formErrors) {\n            for (var _iterator = res.formErrors, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n              var _ref;\n\n              if (_isArray) {\n                if (_i >= _iterator.length) break;\n                _ref = _iterator[_i++];\n              } else {\n                _i = _iterator.next();\n                if (_i.done) break;\n                _ref = _i.value;\n              }\n\n              var error = _ref;\n              Alerts.inline(error.details, \"error\", {\n                placement: \"addressBookAdd\"\n              });\n            }\n          }\n\n          that.done(\"Validation failed\"); // renable Save and Continue button\n        }\n      });\n    }\n  }\n});","map":{"version":3,"sources":["/client/modules/accounts/templates/addressBook/add/add.js"],"names":["i18next","Collections","Session","Meteor","Template","addressBookAdd","helpers","thisAddress","account","Accounts","findOne","userId","profile","name","fullName","addressBook","length","isShippingDefault","isBillingDefault","get","postal","zipcode","country","countryCode","city","region","state","hasAddressBookEntries","setValidatedAddress","res","validatedAddress","$","val","address1","address2","AutoForm","hooks","addressBookAddForm","onSubmit","insertDoc","that","event","preventDefault","template","firstNode","closest","call","err","validated","error","result","Alerts","toast","t","message","done","Error","trigger","Event","inline","placement","i18nKey","formErrors","details"],"mappings":"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","file":"/client/modules/accounts/templates/addressBook/add/add.js.map","sourcesContent":["import { i18next } from \"/client/api\";\nimport * as Collections from \"/lib/collections\";\nimport { Session } from \"meteor/session\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\n\nTemplate.addressBookAdd.helpers({\n  thisAddress: function () {\n    const thisAddress = {};\n    // admin should receive his account\n    const account = Collections.Accounts.findOne({\n      userId: Meteor.userId()\n    });\n    if (account) {\n      if (account.profile) {\n        if (account.profile.name) {\n          thisAddress.fullName = account.profile.name;\n        }\n        // if this will be the first address we set defaults here and not display\n        // them inside form\n        if (account.profile.addressBook) {\n          if (account.profile.addressBook.length === 0) {\n            thisAddress.isShippingDefault = true;\n            thisAddress.isBillingDefault = true;\n          }\n        }\n      }\n    }\n\n    if (Session.get(\"address\")) {\n      thisAddress.postal = Session.get(\"address\").zipcode;\n      thisAddress.country = Session.get(\"address\").countryCode;\n      thisAddress.city = Session.get(\"address\").city;\n      thisAddress.region = Session.get(\"address\").state;\n    }\n\n    return thisAddress;\n  },\n\n  hasAddressBookEntries: function () {\n    const account = Collections.Accounts.findOne({\n      userId: Meteor.userId()\n    });\n    if (account) {\n      if (account.profile) {\n        if (account.profile.addressBook) {\n          return account.profile.addressBook.length > 0;\n        }\n      }\n    }\n\n    return false;\n  }\n});\n\n\nexport function setValidatedAddress(res) {\n  if (res.validatedAddress.city) {\n    const city = $(\"input[name='city']\");\n    city.val(res.validatedAddress.city);\n  }\n  if (res.validatedAddress.postal) {\n    const postal = $(\"input[name='postal']\");\n    postal.val(res.validatedAddress.postal);\n  }\n  if (res.validatedAddress.address1) {\n    const address1 = $(\"input[name='address1']\");\n    address1.val(res.validatedAddress.address1);\n  }\n\n  if (res.validatedAddress.address2) {\n    const address2 = $(\"input[name='address2']\");\n    address2.val(res.validatedAddress.address2);\n  }\n  if (res.validatedAddress.country) {\n    const country = $(\"select[name='country']\");\n    country.val(res.validatedAddress.country);\n  }\n\n  if (res.validatedAddress.region) {\n    const region = $(\"select[name='region']\");\n    region.val(res.validatedAddress.region);\n  }\n}\n\n/**\n * addressBookAddForm form handling\n * @description gets accountId and calls addressBookAdd method\n * @fires \"accounts/addressBookAdd\" method\n */\nAutoForm.hooks({\n  addressBookAddForm: {\n    onSubmit: function (insertDoc) {\n      const that = this;\n      this.event.preventDefault();\n      const addressBook = $(this.template.firstNode).closest(\".address-book\");\n\n      Meteor.call(\"accounts/validateAddress\", insertDoc, function (err, res) {\n        if (res.validated) {\n          Meteor.call(\"accounts/addressBookAdd\", insertDoc, function (error, result) {\n            if (error) {\n              Alerts.toast(i18next.t(\"addressBookAdd.failedToAddAddress\", { err: error.message }), \"error\");\n              that.done(new Error(\"Failed to add address: \", error));\n              return false;\n            }\n            if (result) {\n              that.done();\n              addressBook.trigger($.Event(\"showMainView\"));\n              return true;\n            }\n          });\n        } else {\n          if (res.validatedAddress) {\n            setValidatedAddress(res);\n            Alerts.inline(\"Made changes to your address based upon validation. Please ensure this is correct\", \"warning\", {\n              placement: \"addressBookAdd\",\n              i18nKey: \"addressBookAdd.validatedAddress\"\n            });\n          }\n          if (res.formErrors) {\n            for (const error of res.formErrors) {\n              Alerts.inline(error.details, \"error\", {\n                placement: \"addressBookAdd\"\n              });\n            }\n          }\n          that.done(\"Validation failed\"); // renable Save and Continue button\n        }\n      });\n    }\n  }\n});\n"]},"hash":"f3808dfb07312107a9d31bb72495fb472a4d1d4d"}
