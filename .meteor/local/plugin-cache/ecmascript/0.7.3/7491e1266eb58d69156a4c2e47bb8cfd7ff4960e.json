{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/reactive-dict","imported":["ReactiveDict"],"specifiers":[{"kind":"named","imported":"ReactiveDict","local":"ReactiveDict"}]},{"source":"meteor/aldeed:autoform","imported":["AutoForm"],"specifiers":[{"kind":"named","imported":"AutoForm","local":"AutoForm"}]},{"source":"../collections/rates","imported":["DiscountRates"],"specifiers":[{"kind":"named","imported":"DiscountRates","local":"DiscountRates"}]},{"source":"../../lib/collections/schemas/rates","imported":["DiscountRates"],"specifiers":[{"kind":"named","imported":"DiscountRates","local":"DiscountRateSchema"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/imports/plugins/core/ui-grid/client/griddle","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"MeteorGriddle"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["IconButton","Loading"],"specifiers":[{"kind":"named","imported":"IconButton","local":"IconButton"},{"kind":"named","imported":"Loading","local":"Loading"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/discount-rates/client/settings/rates.js","filenameRelative":"/imports/plugins/included/discount-rates/client/settings/rates.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/discount-rates/client/settings/rates.js"],"names":["Template","ReactiveDict","AutoForm","DiscountRates","DiscountRateSchema","i18next","MeteorGriddle","IconButton","Loading","customDiscountRates","onCreated","autorun","subscribe","state","setDefault","isEditing","editingId","helpers","editButton","instance","equals","get","component","icon","onIcon","toggle","toggleOn","style","position","top","right","onClick","$","removeClass","set","discountGrid","filteredFields","noDataMessage","t","editRow","options","currentId","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","publication","collection","matchingResultsCount","showFilter","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","discountRateSchema","discountRate","id","discount","findOne","events","confirmTitle","confirmButtonText","Alerts","alert","title","type","showCancelButton","isConfirm","Meteor","call","event","currentTarget","addClass","hooks","onSuccess","toast","onError","operation","error"],"mappings":"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","file":"/imports/plugins/included/discount-rates/client/settings/rates.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { DiscountRates } from \"../collections/rates\";\nimport { DiscountRates as DiscountRateSchema } from \"../../lib/collections/schemas/rates\";\nimport { i18next } from \"/client/api\";\nimport MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport { IconButton, Loading } from \"/imports/plugins/core/ui/client/components\";\n\n/* eslint no-shadow: [\"error\", { \"allow\": [\"options\"] }] */\n/* eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"[oO]ptions\" }] */\n\nTemplate.customDiscountRates.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"DiscountRates\");\n  });\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\nTemplate.customDiscountRates.helpers({\n  editButton() {\n    const instance = Template.instance();\n    const state = instance.state;\n    const isEditing = state.equals(\"isEditing\", true);\n    let editingId = state.get(\"editingId\");\n    // toggle edit state\n    if (!isEditing) {\n      editingId = null;\n    }\n    // return icon\n    return {\n      component: IconButton,\n      icon: \"fa fa-plus\",\n      onIcon: \"fa fa-pencil\",\n      toggle: true,\n      toggleOn: isEditing,\n      style: {\n        position: \"relative\",\n        top: \"-25px\",\n        right: \"8px\"\n      },\n      onClick() {\n        // remove active rows from grid\n        $(\".discount-rates-grid-row\").removeClass(\"active\");\n        return state.set({\n          isEditing: !isEditing,\n          editingId: editingId\n        });\n      }\n    };\n  },\n  discountGrid() {\n    const filteredFields = [\"label\", \"discountMethod\", \"discount\"];\n    const noDataMessage = i18next.t(\"admin.settings.noCustomDiscountRatesFound\");\n    const instance = Template.instance();\n\n    //\n    // helper to get and select row from griddle\n    // into blaze for to select discount row for editing\n    //\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n      // isEditing is discount rate object\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    //\n    // helper adds a class to every grid row\n    //\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"discount-rates-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`admin.discountGrid.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // return discount Grid\n    return {\n      component: MeteorGriddle,\n      publication: \"DiscountRates\",\n      collection: DiscountRates,\n      matchingResultsCount: \"discounts-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n  // schema for forms\n  discountRateSchema() {\n    return DiscountRateSchema;\n  },\n  discountRate() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const discount = DiscountRates.findOne(id) || {};\n    return discount;\n  }\n});\n\n//\n// on submit lets clear the form state\n//\nTemplate.customDiscountRates.events({\n  \"submit #discount-rates-update-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"submit #discount-rates-insert-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .discount-rates-grid-row.active\": function () {\n    instance = Template.instance();\n    // remove active rows from grid\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n    // ugly hack\n    $(\".discount-rates-grid-row\").removeClass(\"active\");\n  },\n  \"click .delete\": function () {\n    const confirmTitle = i18next.t(\"admin.settings.confirmRateDelete\");\n    const confirmButtonText = i18next.t(\"app.delete\");\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    // confirm delete\n    Alerts.alert({\n      title: confirmTitle,\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: confirmButtonText\n    }, (isConfirm) => {\n      if (isConfirm) {\n        if (id) {\n          Meteor.call(\"discounts/deleteRate\", id);\n          instance.state.set({\n            isEditing: false,\n            editingId: null\n          });\n        }\n      }\n    });\n  },\n  \"click .discount-rates-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".discount-rates-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n});\n\n\nAutoForm.hooks({\n  \"discount-rates-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.settings.settingsSaveSuccess\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.settings.settingsSaveFailure\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n\nAutoForm.hooks({\n  \"discount-rates-insert-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.settings.settingsSaveSuccess\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.settings.settingsSaveFailure\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/discount-rates/client/settings/rates.js.map","sourceFileName":"/imports/plugins/included/discount-rates/client/settings/rates.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"rates"},"ignored":false,"code":"var Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 0);\nvar ReactiveDict = void 0;\nmodule.importSync(\"meteor/reactive-dict\", {\n  ReactiveDict: function (v) {\n    ReactiveDict = v;\n  }\n}, 1);\nvar AutoForm = void 0;\nmodule.importSync(\"meteor/aldeed:autoform\", {\n  AutoForm: function (v) {\n    AutoForm = v;\n  }\n}, 2);\nvar DiscountRates = void 0;\nmodule.importSync(\"../collections/rates\", {\n  DiscountRates: function (v) {\n    DiscountRates = v;\n  }\n}, 3);\nvar DiscountRateSchema = void 0;\nmodule.importSync(\"../../lib/collections/schemas/rates\", {\n  DiscountRates: function (v) {\n    DiscountRateSchema = v;\n  }\n}, 4);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 5);\nvar MeteorGriddle = void 0;\nmodule.importSync(\"/imports/plugins/core/ui-grid/client/griddle\", {\n  \"default\": function (v) {\n    MeteorGriddle = v;\n  }\n}, 6);\nvar IconButton = void 0,\n    Loading = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  IconButton: function (v) {\n    IconButton = v;\n  },\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 7);\n/* eslint no-shadow: [\"error\", { \"allow\": [\"options\"] }] */ /* eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"[oO]ptions\" }] */Template.customDiscountRates.onCreated(function () {\n  var _this = this;\n\n  this.autorun(function () {\n    _this.subscribe(\"DiscountRates\");\n  });\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\nTemplate.customDiscountRates.helpers({\n  editButton: function () {\n    var instance = Template.instance();\n    var state = instance.state;\n    var isEditing = state.equals(\"isEditing\", true);\n    var editingId = state.get(\"editingId\"); // toggle edit state\n\n    if (!isEditing) {\n      editingId = null;\n    } // return icon\n\n\n    return {\n      component: IconButton,\n      icon: \"fa fa-plus\",\n      onIcon: \"fa fa-pencil\",\n      toggle: true,\n      toggleOn: isEditing,\n      style: {\n        position: \"relative\",\n        top: \"-25px\",\n        right: \"8px\"\n      },\n      onClick: function () {\n        // remove active rows from grid\n        $(\".discount-rates-grid-row\").removeClass(\"active\");\n        return state.set({\n          isEditing: !isEditing,\n          editingId: editingId\n        });\n      }\n    };\n  },\n  discountGrid: function () {\n    var filteredFields = [\"label\", \"discountMethod\", \"discount\"];\n    var noDataMessage = i18next.t(\"admin.settings.noCustomDiscountRatesFound\");\n    var instance = Template.instance(); //\n    // helper to get and select row from griddle\n    // into blaze for to select discount row for editing\n    //\n\n    function editRow(options) {\n      var currentId = instance.state.get(\"editingId\"); // isEditing is discount rate object\n\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id); // toggle edit mode clicking on same row\n\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    } //\n    // helper adds a class to every grid row\n    //\n\n\n    var customRowMetaData = {\n      bodyCssClassName: function () {\n        return \"discount-rates-grid-row\";\n      }\n    }; // add i18n handling to headers\n\n    var customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      var columnMeta = {\n        columnName: field,\n        displayName: i18next.t(\"admin.discountGrid.\" + field)\n      };\n      customColumnMetadata.push(columnMeta);\n    }); // return discount Grid\n\n    return {\n      component: MeteorGriddle,\n      publication: \"DiscountRates\",\n      collection: DiscountRates,\n      matchingResultsCount: \"discounts-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n  instance: function () {\n    var instance = Template.instance();\n    return instance;\n  },\n  // schema for forms\n  discountRateSchema: function () {\n    return DiscountRateSchema;\n  },\n  discountRate: function () {\n    var instance = Template.instance();\n    var id = instance.state.get(\"editingId\");\n    var discount = DiscountRates.findOne(id) || {};\n    return discount;\n  }\n}); //\n// on submit lets clear the form state\n//\n\nTemplate.customDiscountRates.events({\n  \"submit #discount-rates-update-form\": function () {\n    var instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"submit #discount-rates-insert-form\": function () {\n    var instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .discount-rates-grid-row.active\": function () {\n    instance = Template.instance(); // remove active rows from grid\n\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    }); // ugly hack\n\n    $(\".discount-rates-grid-row\").removeClass(\"active\");\n  },\n  \"click .delete\": function () {\n    var confirmTitle = i18next.t(\"admin.settings.confirmRateDelete\");\n    var confirmButtonText = i18next.t(\"app.delete\");\n    var instance = Template.instance();\n    var id = instance.state.get(\"editingId\"); // confirm delete\n\n    Alerts.alert({\n      title: confirmTitle,\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: confirmButtonText\n    }, function (isConfirm) {\n      if (isConfirm) {\n        if (id) {\n          Meteor.call(\"discounts/deleteRate\", id);\n          instance.state.set({\n            isEditing: false,\n            editingId: null\n          });\n        }\n      }\n    });\n  },\n  \"click .discount-rates-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".discount-rates-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n});\nAutoForm.hooks({\n  \"discount-rates-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.settings.settingsSaveSuccess\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(i18next.t(\"admin.settings.settingsSaveFailure\") + \" \" + error, \"error\");\n    }\n  }\n});\nAutoForm.hooks({\n  \"discount-rates-insert-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.settings.settingsSaveSuccess\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(i18next.t(\"admin.settings.settingsSaveFailure\") + \" \" + error, \"error\");\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/discount-rates/client/settings/rates.js"],"names":["Template","ReactiveDict","AutoForm","DiscountRates","DiscountRateSchema","i18next","MeteorGriddle","IconButton","Loading","customDiscountRates","onCreated","autorun","subscribe","state","setDefault","isEditing","editingId","helpers","editButton","instance","equals","get","component","icon","onIcon","toggle","toggleOn","style","position","top","right","onClick","$","removeClass","set","discountGrid","filteredFields","noDataMessage","t","editRow","options","currentId","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","publication","collection","matchingResultsCount","showFilter","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","discountRateSchema","discountRate","id","discount","findOne","events","confirmTitle","confirmButtonText","Alerts","alert","title","type","showCancelButton","isConfirm","Meteor","call","event","currentTarget","addClass","hooks","onSuccess","toast","onError","operation","error"],"mappings":"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","file":"/imports/plugins/included/discount-rates/client/settings/rates.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { DiscountRates } from \"../collections/rates\";\nimport { DiscountRates as DiscountRateSchema } from \"../../lib/collections/schemas/rates\";\nimport { i18next } from \"/client/api\";\nimport MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport { IconButton, Loading } from \"/imports/plugins/core/ui/client/components\";\n\n/* eslint no-shadow: [\"error\", { \"allow\": [\"options\"] }] */\n/* eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"[oO]ptions\" }] */\n\nTemplate.customDiscountRates.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"DiscountRates\");\n  });\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\nTemplate.customDiscountRates.helpers({\n  editButton() {\n    const instance = Template.instance();\n    const state = instance.state;\n    const isEditing = state.equals(\"isEditing\", true);\n    let editingId = state.get(\"editingId\");\n    // toggle edit state\n    if (!isEditing) {\n      editingId = null;\n    }\n    // return icon\n    return {\n      component: IconButton,\n      icon: \"fa fa-plus\",\n      onIcon: \"fa fa-pencil\",\n      toggle: true,\n      toggleOn: isEditing,\n      style: {\n        position: \"relative\",\n        top: \"-25px\",\n        right: \"8px\"\n      },\n      onClick() {\n        // remove active rows from grid\n        $(\".discount-rates-grid-row\").removeClass(\"active\");\n        return state.set({\n          isEditing: !isEditing,\n          editingId: editingId\n        });\n      }\n    };\n  },\n  discountGrid() {\n    const filteredFields = [\"label\", \"discountMethod\", \"discount\"];\n    const noDataMessage = i18next.t(\"admin.settings.noCustomDiscountRatesFound\");\n    const instance = Template.instance();\n\n    //\n    // helper to get and select row from griddle\n    // into blaze for to select discount row for editing\n    //\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n      // isEditing is discount rate object\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    //\n    // helper adds a class to every grid row\n    //\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"discount-rates-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`admin.discountGrid.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // return discount Grid\n    return {\n      component: MeteorGriddle,\n      publication: \"DiscountRates\",\n      collection: DiscountRates,\n      matchingResultsCount: \"discounts-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n  // schema for forms\n  discountRateSchema() {\n    return DiscountRateSchema;\n  },\n  discountRate() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const discount = DiscountRates.findOne(id) || {};\n    return discount;\n  }\n});\n\n//\n// on submit lets clear the form state\n//\nTemplate.customDiscountRates.events({\n  \"submit #discount-rates-update-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"submit #discount-rates-insert-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .discount-rates-grid-row.active\": function () {\n    instance = Template.instance();\n    // remove active rows from grid\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n    // ugly hack\n    $(\".discount-rates-grid-row\").removeClass(\"active\");\n  },\n  \"click .delete\": function () {\n    const confirmTitle = i18next.t(\"admin.settings.confirmRateDelete\");\n    const confirmButtonText = i18next.t(\"app.delete\");\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    // confirm delete\n    Alerts.alert({\n      title: confirmTitle,\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: confirmButtonText\n    }, (isConfirm) => {\n      if (isConfirm) {\n        if (id) {\n          Meteor.call(\"discounts/deleteRate\", id);\n          instance.state.set({\n            isEditing: false,\n            editingId: null\n          });\n        }\n      }\n    });\n  },\n  \"click .discount-rates-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".discount-rates-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n});\n\n\nAutoForm.hooks({\n  \"discount-rates-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.settings.settingsSaveSuccess\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.settings.settingsSaveFailure\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n\nAutoForm.hooks({\n  \"discount-rates-insert-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.settings.settingsSaveSuccess\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.settings.settingsSaveFailure\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n"]},"hash":"7491e1266eb58d69156a4c2e47bb8cfd7ff4960e"}
