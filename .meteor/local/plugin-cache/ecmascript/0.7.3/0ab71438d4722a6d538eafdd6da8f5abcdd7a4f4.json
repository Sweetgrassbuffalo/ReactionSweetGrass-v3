{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"lodash/get","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_get"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"moment","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"moment"}]},{"source":"griddle-react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Griddle"}]},{"source":"meteor/tmeasday:publish-counts","imported":["Counts"],"specifiers":[{"kind":"named","imported":"Counts","local":"Counts"}]},{"source":"meteor/react-meteor-data","imported":["ReactMeteorData"],"specifiers":[{"kind":"named","imported":"ReactMeteorData","local":"ReactMeteorData"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/taxes-avalara/client/settings/avagriddle.js","filenameRelative":"/imports/plugins/included/taxes-avalara/client/settings/avagriddle.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/client/settings/avagriddle.js"],"names":["React","moment","Griddle","Counts","ReactMeteorData","LogGriddle","createClass","propTypes","collection","PropTypes","object","matchingResultsCount","string","publication","subscriptionParams","mixins","getInitialState","currentPage","maxPages","externalResultsPerPage","props","externalSortColumn","externalSortAscending","getMeteorData","matchingResults","get","pubHandle","Meteor","subscribe","rawResults","find","fetch","results","map","o","date","data","format","docType","request","JSON","stringify","result","_id","loading","ready","setPage","index","setState","render","Math","ceil","state","allProps","columnMetaData","setPageSize"],"mappings":";;;;;;;;kBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEA,AAAO,AAAW,AAClB,AAAO,AAAY,AACnB,AAAO,AAAa,AACpB,AAAS,AAAc,AACvB,AAAS,AAAuB,AAEhC,AAAM,AAAa,AAAM,AAAY,AACnC,AAAW;AACT,IAAY,mBAAA,AAAgB;AADnB,AAET;;gBACa,MAAM,UAHV,AAGI,AAAgB,AAC7B;AAAoB,0BAAM,MAAN,AAAgB,UALH,AACxB;iCAMX;AAAQ,AAAC,wBAP0B,AAO3B,gBAER;AARW,AAEa,AAAM,AAAU,AACtC;WAKgB,AAChB,AAAO,AACL;AAAa,+BADR,AAEL;;mBAFK,AAGmB,AAAK,AAAM,AACnC;gBAJK,AAIe,AAAK,AAAM,AAC/B;AAAuB,8BAAK,KAAL,AAAW,MALpC,AAAO;qCAV0B,AAiBlC;wCAED;AATS,AAEK,AACV;AAMY,AACd,AAAM,AAAkB,AAAO,AAAI,AAAK,AAAM,AAC9C;AAAM,6BAAN,AAAkB,AAAO,AAAU,AAAK,AAAM,AAAa,AAAK,AAAM,AACtE;QAAM,AAAa,kBAAA,AAAK,AAAM,gBAAX,AAAsB,MAAzC,AAAmB,AAA2B,AAAI,AAClD;AAAI,QAAJ;oDACA;QAAA,AAAI,AAAY,AACd;;QAAU,YAAA,AAAW,AAAI,AAAC,AAAM,AAC9B;AAAO,4CACL;;gBACS,OAAM,EAAN,AAAS,aAFb,AAEI,AAAmC,AAC5C;mBAAS,AAAK,QAHT,AAGI,AAAe,AAAE,AAAK,0BAC/B;AAAQ,mBAAK,KAAL,AAAe,UAAE,EAAF,AAAO,KAJzB,AAIG,AACR;AAAK,AAAE,wCALT,AAAO;iBADT,AAAU,AAQT,AACF;AARU,AACC,AAAO,AAAE,AAAM,AAAO,AAC5B;;AAQN,AAAO,AACL;;;AADK,0BAGL;AAHF,AAAO;AApC0B,AAyClC;AALQ,AACI,AAAC,AAAU,AACpB;AAKJ,AAAQ,AAAO,AACb;AAAK,4BAAL,AAAc,AAAE;;mBAAF;AAAe;AA5CI,AA4CjC,AACD;sBAED;QAAS,4DACP;QAAM,WAAW,KAAjB,AAAiB,AAAK,AAAK,AAAK,AAAK,AAAkB,AAAK,AAAM,AAClE,AAAM,AAAW,AAAK,AAEtB;AAAA,AACE,AAAC,AACC,AAAI,AACJ,AAAe,AACf,AAAQ,AAAC,AAAK,AAAK,AACnB,AAAe,AAAC,AAAK,AAAM,AAC3B,AAAgB,AAAC,AAAK,AACtB,AAAoB,AAAC,AAAK,AAC1B,AAAgB,AAAC,AACjB,AAAmB,AAAC,AAAK,AAAM,AAC/B,AAAsB,AAAC,AAAK,AAAM,AAClC,AAAkB,AAAC,AAAK,AAAK,AAGlC,mEAjEH,AAAmB,AAAkB;sBAqErC;AAAe,oBAAf;;;;;;;;;;CAnEsB","file":"/imports/plugins/included/taxes-avalara/client/settings/avagriddle.js.map","sourcesContent":["/* eslint react/prop-types:0, react/jsx-sort-props:0, react/forbid-prop-types: 0, \"react/prefer-es6-class\": [1, \"never\"] */\nimport _ from \"lodash\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport Griddle from \"griddle-react\";\nimport { Counts } from \"meteor/tmeasday:publish-counts\";\nimport { ReactMeteorData } from \"meteor/react-meteor-data\";\n\nconst LogGriddle = React.createClass({\n  propTypes: {\n    collection: React.PropTypes.object,\n    matchingResultsCount: React.PropTypes.string,\n    publication: React.PropTypes.string,\n    subscriptionParams: React.PropTypes.object\n  },\n  mixins: [ReactMeteorData],\n\n  getInitialState() {\n    return {\n      currentPage: 0,\n      maxPages: 0,\n      externalResultsPerPage: this.props.externalResultsPerPage,\n      externalSortColumn: this.props.externalSortColumn,\n      externalSortAscending: this.props.externalSortAscending\n    };\n  },\n\n  getMeteorData() {\n    const matchingResults = Counts.get(this.props.matchingResultsCount);\n    const pubHandle = Meteor.subscribe(this.props.publication, this.props.subscriptionParams);\n    const rawResults = this.props.collection.find({}).fetch();\n    let results;\n    if (rawResults) {\n      results = rawResults.map((o) => {\n        return {\n          date: moment(o.data).format(\"MM/DD/YYYY HH:mm:ss\"),\n          docType: _.get(o, \"data.request.data.type\", \"\"),\n          request: JSON.stringify(o.data.request),\n          result: JSON.stringify(o.data.result),\n          _id: o._id\n        };\n      });\n    }\n\n    return {\n      loading: !pubHandle.ready(),\n      results,\n      matchingResults\n    };\n  },\n\n  setPage(index) {\n    this.setState({ currentPage: index });\n  },\n\n  render() {\n    const maxPages = Math.ceil(this.data.matchingResults / this.state.externalResultsPerPage);\n    const allProps = this.props;\n\n    return (\n      <Griddle\n        {...allProps}\n        tableClassName=\"table\"\n        results={this.data.results}\n        columnMetaData={this.props.columnMetaData}\n        externalSetPage={this.setPage}\n        externalSetPageSize={this.setPageSize}\n        externalMaxPage={maxPages}\n        externalSortColumn={this.state.externalSortColumn}\n        externalSortAscending={this.state.externalSortAscending}\n        externalIsLoading={this.data.loading}\n      />\n    );\n  }\n\n});\n\nexport default LogGriddle;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/taxes-avalara/client/settings/avagriddle.js.map","sourceFileName":"/imports/plugins/included/taxes-avalara/client/settings/avagriddle.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"avagriddle"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _get = void 0;\n\nmodule.importSync(\"lodash/get\", {\n  \"default\": function (v) {\n    _get = v;\n  }\n}, 0);\nvar React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 1);\nvar moment = void 0;\nmodule.importSync(\"moment\", {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 2);\nvar Griddle = void 0;\nmodule.importSync(\"griddle-react\", {\n  \"default\": function (v) {\n    Griddle = v;\n  }\n}, 3);\nvar Counts = void 0;\nmodule.importSync(\"meteor/tmeasday:publish-counts\", {\n  Counts: function (v) {\n    Counts = v;\n  }\n}, 4);\nvar ReactMeteorData = void 0;\nmodule.importSync(\"meteor/react-meteor-data\", {\n  ReactMeteorData: function (v) {\n    ReactMeteorData = v;\n  }\n}, 5);\nvar LogGriddle = React.createClass({\n  displayName: \"LogGriddle\",\n  propTypes: {\n    collection: React.PropTypes.object,\n    matchingResultsCount: React.PropTypes.string,\n    publication: React.PropTypes.string,\n    subscriptionParams: React.PropTypes.object\n  },\n  mixins: [ReactMeteorData],\n  getInitialState: function () {\n    return {\n      currentPage: 0,\n      maxPages: 0,\n      externalResultsPerPage: this.props.externalResultsPerPage,\n      externalSortColumn: this.props.externalSortColumn,\n      externalSortAscending: this.props.externalSortAscending\n    };\n  },\n  getMeteorData: function () {\n    var matchingResults = Counts.get(this.props.matchingResultsCount);\n    var pubHandle = Meteor.subscribe(this.props.publication, this.props.subscriptionParams);\n    var rawResults = this.props.collection.find({}).fetch();\n    var results = void 0;\n\n    if (rawResults) {\n      results = rawResults.map(function (o) {\n        return {\n          date: moment(o.data).format(\"MM/DD/YYYY HH:mm:ss\"),\n          docType: _get(o, \"data.request.data.type\", \"\"),\n          request: JSON.stringify(o.data.request),\n          result: JSON.stringify(o.data.result),\n          _id: o._id\n        };\n      });\n    }\n\n    return {\n      loading: !pubHandle.ready(),\n      results: results,\n      matchingResults: matchingResults\n    };\n  },\n  setPage: function (index) {\n    this.setState({\n      currentPage: index\n    });\n  },\n  render: function () {\n    var maxPages = Math.ceil(this.data.matchingResults / this.state.externalResultsPerPage);\n    var allProps = this.props;\n    return React.createElement(Griddle, (0, _extends3.default)({}, allProps, {\n      tableClassName: \"table\",\n      results: this.data.results,\n      columnMetaData: this.props.columnMetaData,\n      externalSetPage: this.setPage,\n      externalSetPageSize: this.setPageSize,\n      externalMaxPage: maxPages,\n      externalSortColumn: this.state.externalSortColumn,\n      externalSortAscending: this.state.externalSortAscending,\n      externalIsLoading: this.data.loading\n    }));\n  }\n});\nmodule.export(\"default\", exports.default = LogGriddle);","map":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/client/settings/avagriddle.js"],"names":["React","moment","Griddle","Counts","ReactMeteorData","LogGriddle","createClass","propTypes","collection","PropTypes","object","matchingResultsCount","string","publication","subscriptionParams","mixins","getInitialState","currentPage","maxPages","externalResultsPerPage","props","externalSortColumn","externalSortAscending","getMeteorData","matchingResults","get","pubHandle","Meteor","subscribe","rawResults","find","fetch","results","map","o","date","data","format","docType","request","JSON","stringify","result","_id","loading","ready","setPage","index","setState","render","Math","ceil","state","allProps","columnMetaData","setPageSize"],"mappings":";;;;;;;;kBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEA,AAAO,AAAW,AAClB,AAAO,AAAY,AACnB,AAAO,AAAa,AACpB,AAAS,AAAc,AACvB,AAAS,AAAuB,AAEhC,AAAM,AAAa,AAAM,AAAY,AACnC,AAAW;AACT,IAAY,mBAAA,AAAgB;AADnB,AAET;;gBACa,MAAM,UAHV,AAGI,AAAgB,AAC7B;AAAoB,0BAAM,MAAN,AAAgB,UALH,AACxB;iCAMX;AAAQ,AAAC,wBAP0B,AAO3B,gBAER;AARW,AAEa,AAAM,AAAU,AACtC;WAKgB,AAChB,AAAO,AACL;AAAa,+BADR,AAEL;;mBAFK,AAGmB,AAAK,AAAM,AACnC;gBAJK,AAIe,AAAK,AAAM,AAC/B;AAAuB,8BAAK,KAAL,AAAW,MALpC,AAAO;qCAV0B,AAiBlC;wCAED;AATS,AAEK,AACV;AAMY,AACd,AAAM,AAAkB,AAAO,AAAI,AAAK,AAAM,AAC9C;AAAM,6BAAN,AAAkB,AAAO,AAAU,AAAK,AAAM,AAAa,AAAK,AAAM,AACtE;QAAM,AAAa,kBAAA,AAAK,AAAM,gBAAX,AAAsB,MAAzC,AAAmB,AAA2B,AAAI,AAClD;AAAI,QAAJ;oDACA;QAAA,AAAI,AAAY,AACd;;QAAU,YAAA,AAAW,AAAI,AAAC,AAAM,AAC9B;AAAO,4CACL;;gBACS,OAAM,EAAN,AAAS,aAFb,AAEI,AAAmC,AAC5C;mBAAS,AAAK,QAHT,AAGI,AAAe,AAAE,AAAK,0BAC/B;AAAQ,mBAAK,KAAL,AAAe,UAAE,EAAF,AAAO,KAJzB,AAIG,AACR;AAAK,AAAE,wCALT,AAAO;iBADT,AAAU,AAQT,AACF;AARU,AACC,AAAO,AAAE,AAAM,AAAO,AAC5B;;AAQN,AAAO,AACL;;;AADK,0BAGL;AAHF,AAAO;AApC0B,AAyClC;AALQ,AACI,AAAC,AAAU,AACpB;AAKJ,AAAQ,AAAO,AACb;AAAK,4BAAL,AAAc,AAAE;;mBAAF;AAAe;AA5CI,AA4CjC,AACD;sBAED;QAAS,4DACP;QAAM,WAAW,KAAjB,AAAiB,AAAK,AAAK,AAAK,AAAK,AAAkB,AAAK,AAAM,AAClE,AAAM,AAAW,AAAK,AAEtB;AAAA,AACE,AAAC,AACC,AAAI,AACJ,AAAe,AACf,AAAQ,AAAC,AAAK,AAAK,AACnB,AAAe,AAAC,AAAK,AAAM,AAC3B,AAAgB,AAAC,AAAK,AACtB,AAAoB,AAAC,AAAK,AAC1B,AAAgB,AAAC,AACjB,AAAmB,AAAC,AAAK,AAAM,AAC/B,AAAsB,AAAC,AAAK,AAAM,AAClC,AAAkB,AAAC,AAAK,AAAK,AAGlC,mEAjEH,AAAmB,AAAkB;sBAqErC;AAAe,oBAAf;;;;;;;;;;CAnEsB","file":"/imports/plugins/included/taxes-avalara/client/settings/avagriddle.js.map","sourcesContent":["/* eslint react/prop-types:0, react/jsx-sort-props:0, react/forbid-prop-types: 0, \"react/prefer-es6-class\": [1, \"never\"] */\nimport _ from \"lodash\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport Griddle from \"griddle-react\";\nimport { Counts } from \"meteor/tmeasday:publish-counts\";\nimport { ReactMeteorData } from \"meteor/react-meteor-data\";\n\nconst LogGriddle = React.createClass({\n  propTypes: {\n    collection: React.PropTypes.object,\n    matchingResultsCount: React.PropTypes.string,\n    publication: React.PropTypes.string,\n    subscriptionParams: React.PropTypes.object\n  },\n  mixins: [ReactMeteorData],\n\n  getInitialState() {\n    return {\n      currentPage: 0,\n      maxPages: 0,\n      externalResultsPerPage: this.props.externalResultsPerPage,\n      externalSortColumn: this.props.externalSortColumn,\n      externalSortAscending: this.props.externalSortAscending\n    };\n  },\n\n  getMeteorData() {\n    const matchingResults = Counts.get(this.props.matchingResultsCount);\n    const pubHandle = Meteor.subscribe(this.props.publication, this.props.subscriptionParams);\n    const rawResults = this.props.collection.find({}).fetch();\n    let results;\n    if (rawResults) {\n      results = rawResults.map((o) => {\n        return {\n          date: moment(o.data).format(\"MM/DD/YYYY HH:mm:ss\"),\n          docType: _.get(o, \"data.request.data.type\", \"\"),\n          request: JSON.stringify(o.data.request),\n          result: JSON.stringify(o.data.result),\n          _id: o._id\n        };\n      });\n    }\n\n    return {\n      loading: !pubHandle.ready(),\n      results,\n      matchingResults\n    };\n  },\n\n  setPage(index) {\n    this.setState({ currentPage: index });\n  },\n\n  render() {\n    const maxPages = Math.ceil(this.data.matchingResults / this.state.externalResultsPerPage);\n    const allProps = this.props;\n\n    return (\n      <Griddle\n        {...allProps}\n        tableClassName=\"table\"\n        results={this.data.results}\n        columnMetaData={this.props.columnMetaData}\n        externalSetPage={this.setPage}\n        externalSetPageSize={this.setPageSize}\n        externalMaxPage={maxPages}\n        externalSortColumn={this.state.externalSortColumn}\n        externalSortAscending={this.state.externalSortAscending}\n        externalIsLoading={this.data.loading}\n      />\n    );\n  }\n\n});\n\nexport default LogGriddle;\n"]},"hash":"0ab71438d4722a6d538eafdd6da8f5abcdd7a4f4"}
