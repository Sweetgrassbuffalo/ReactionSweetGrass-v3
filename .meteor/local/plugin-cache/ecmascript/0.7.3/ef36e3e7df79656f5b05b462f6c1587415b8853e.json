{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/includes","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_includes"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"/lib/collections","imported":["Packages"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":["StripeApi","cardSchema","chargeObjectSchema","captureDetailsSchema","refundDetailsSchema"],"specifiers":[{"kind":"local","local":"StripeApi","exported":"StripeApi"},{"kind":"local","local":"cardSchema","exported":"cardSchema"},{"kind":"local","local":"chargeObjectSchema","exported":"chargeObjectSchema"},{"kind":"local","local":"captureDetailsSchema","exported":"captureDetailsSchema"},{"kind":"local","local":"refundDetailsSchema","exported":"refundDetailsSchema"}]}}},"options":{"filename":"/imports/plugins/included/payments-stripe/server/methods/stripeapi.js","filenameRelative":"/imports/plugins/included/payments-stripe/server/methods/stripeapi.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-stripe/server/methods/stripeapi.js"],"names":["Meteor","SimpleSchema","Packages","Reaction","Logger","StripeApi","methods","cardSchema","number","type","String","name","cvc","exp_month","exp_year","chargeObjectSchema","amount","Number","currency","card","capture","Boolean","captureDetailsSchema","refundDetailsSchema","charge","metadata","optional","reason","expectedErrors","getApiKey","ValidatedMethod","validate","run","settings","findOne","shopId","getShopId","api_key","Error","createCharge","chargeObj","apiKey","validator","stripe","dynamicApiKey","call","require","chargePromise","charges","create","promiseResult","Promise","await","e","rawType","code","debug","error","result","captureCharge","transactionId","captureDetails","capturePromise","captureResults","createRefund","refundDetails","refundPromise","refunds","refundResults","listRefunds","refundListPromise","list","refundListResults"],"mappings":"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","file":"/imports/plugins/included/payments-stripe/server/methods/stripeapi.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { Packages } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\nexport const StripeApi = {};\nStripeApi.methods = {};\n\n\nexport const cardSchema = new SimpleSchema({\n  number: { type: String },\n  name: { type: String },\n  cvc: { type: String },\n  exp_month: { type: String },\n  exp_year: { type: String }\n});\n\nexport const chargeObjectSchema = new SimpleSchema({\n  amount: { type: Number },\n  currency: { type: String },\n  card: { type: cardSchema },\n  capture: { type: Boolean }\n});\n\nexport const captureDetailsSchema = new SimpleSchema({\n  amount: { type: Number }\n});\n\nexport const refundDetailsSchema = new SimpleSchema({\n  charge: { type: String },\n  amount: { type: Number },\n  metadata: { type: String, optional: true },\n  reason: { type: String }\n});\n\n// These are errors on the user side that we just want to pass back up to the user\nconst expectedErrors = [\n  \"card_declined\",\n  \"incorrect_cvc\",\n  \"expired_card\",\n  \"incorrect_number\"\n];\n\nStripeApi.methods.getApiKey = new ValidatedMethod({\n  name: \"StripeApi.methods.getApiKey\",\n  validate: null,\n  run() {\n    const settings = Packages.findOne({\n      name: \"reaction-stripe\",\n      shopId: Reaction.getShopId()\n    }).settings;\n    if (!settings.api_key) {\n      throw new Meteor.Error(\"403\", \"Invalid Stripe Credentials\");\n    }\n    return settings.api_key;\n  }\n});\n\n\nStripeApi.methods.createCharge = new ValidatedMethod({\n  name: \"StripeApi.methods.createCharge\",\n  validate: new SimpleSchema({\n    chargeObj: { type: chargeObjectSchema },\n    apiKey: { type: String, optional: true }\n  }).validator(),\n  run({ chargeObj, apiKey }) {\n    let stripe;\n    if (!apiKey) {\n      const dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n    try {\n      const chargePromise = stripe.charges.create(chargeObj);\n      const promiseResult = Promise.await(chargePromise);\n      return promiseResult;\n    } catch (e) {\n      // Handle \"expected\" errors differently\n      if (e.rawType === \"card_error\" && _.includes(expectedErrors, e.code)) {\n        Logger.debug(\"Error from Stripe is expected, not throwing\");\n        return { error: e, result: null };\n      }\n      Logger.error(\"Received unexpected error code: \" + e.code);\n      Logger.error(e);\n      return { error: e, result: null };\n    }\n  }\n});\n\nStripeApi.methods.captureCharge = new ValidatedMethod({\n  name: \"StripeApi.methods.captureCharge\",\n  validate: new SimpleSchema({\n    transactionId: { type: String },\n    captureDetails: { type: captureDetailsSchema },\n    apiKey: { type: String, optional: true }\n  }).validator(),\n  run({ transactionId, captureDetails, apiKey })  {\n    let stripe;\n    if (!apiKey) {\n      const dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n    const capturePromise = stripe.charges.capture(transactionId, captureDetails);\n    const captureResults = Promise.await(capturePromise);\n    return captureResults;\n  }\n});\n\nStripeApi.methods.createRefund = new ValidatedMethod({\n  name: \"StripeApi.methods.createRefund\",\n  validate: new SimpleSchema({\n    refundDetails: { type: refundDetailsSchema },\n    apiKey: { type: String, optional: true }\n  }).validator(),\n  run({ refundDetails, apiKey }) {\n    let stripe;\n    if (!apiKey) {\n      const dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n    const refundPromise = stripe.refunds.create({ charge: refundDetails.charge, amount: refundDetails.amount });\n    const refundResults = Promise.await(refundPromise);\n    return refundResults;\n  }\n});\n\nStripeApi.methods.listRefunds = new ValidatedMethod({\n  name: \"StripeApi.methods.listRefunds\",\n  validate: new SimpleSchema({\n    transactionId: { type: String },\n    apiKey: { type: String, optional: true }\n  }).validator(),\n  run({ transactionId, apiKey }) {\n    let stripe;\n    if (!apiKey) {\n      const dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n    const refundListPromise = stripe.refunds.list({ charge: transactionId });\n    const refundListResults = Promise.await(refundListPromise);\n    return refundListResults;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-stripe/server/methods/stripeapi.js.map","sourceFileName":"/imports/plugins/included/payments-stripe/server/methods/stripeapi.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"stripeapi"},"ignored":false,"code":"module.export({\n  StripeApi: function () {\n    return StripeApi;\n  },\n  cardSchema: function () {\n    return cardSchema;\n  },\n  chargeObjectSchema: function () {\n    return chargeObjectSchema;\n  },\n  captureDetailsSchema: function () {\n    return captureDetailsSchema;\n  },\n  refundDetailsSchema: function () {\n    return refundDetailsSchema;\n  }\n});\n\nvar _includes = void 0;\n\nmodule.importSync(\"lodash/includes\", {\n  \"default\": function (v) {\n    _includes = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 2);\nvar Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 3);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 4);\nvar StripeApi = {};\nStripeApi.methods = {};\nvar cardSchema = new SimpleSchema({\n  number: {\n    type: String\n  },\n  name: {\n    type: String\n  },\n  cvc: {\n    type: String\n  },\n  exp_month: {\n    type: String\n  },\n  exp_year: {\n    type: String\n  }\n});\nvar chargeObjectSchema = new SimpleSchema({\n  amount: {\n    type: Number\n  },\n  currency: {\n    type: String\n  },\n  card: {\n    type: cardSchema\n  },\n  capture: {\n    type: Boolean\n  }\n});\nvar captureDetailsSchema = new SimpleSchema({\n  amount: {\n    type: Number\n  }\n});\nvar refundDetailsSchema = new SimpleSchema({\n  charge: {\n    type: String\n  },\n  amount: {\n    type: Number\n  },\n  metadata: {\n    type: String,\n    optional: true\n  },\n  reason: {\n    type: String\n  }\n});\n// These are errors on the user side that we just want to pass back up to the user\nvar expectedErrors = [\"card_declined\", \"incorrect_cvc\", \"expired_card\", \"incorrect_number\"];\nStripeApi.methods.getApiKey = new ValidatedMethod({\n  name: \"StripeApi.methods.getApiKey\",\n  validate: null,\n  run: function () {\n    var settings = Packages.findOne({\n      name: \"reaction-stripe\",\n      shopId: Reaction.getShopId()\n    }).settings;\n\n    if (!settings.api_key) {\n      throw new Meteor.Error(\"403\", \"Invalid Stripe Credentials\");\n    }\n\n    return settings.api_key;\n  }\n});\nStripeApi.methods.createCharge = new ValidatedMethod({\n  name: \"StripeApi.methods.createCharge\",\n  validate: new SimpleSchema({\n    chargeObj: {\n      type: chargeObjectSchema\n    },\n    apiKey: {\n      type: String,\n      optional: true\n    }\n  }).validator(),\n  run: function (_ref) {\n    var chargeObj = _ref.chargeObj,\n        apiKey = _ref.apiKey;\n    var stripe = void 0;\n\n    if (!apiKey) {\n      var dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n\n    try {\n      var chargePromise = stripe.charges.create(chargeObj);\n      var promiseResult = Promise.await(chargePromise);\n      return promiseResult;\n    } catch (e) {\n      // Handle \"expected\" errors differently\n      if (e.rawType === \"card_error\" && _includes(expectedErrors, e.code)) {\n        Logger.debug(\"Error from Stripe is expected, not throwing\");\n        return {\n          error: e,\n          result: null\n        };\n      }\n\n      Logger.error(\"Received unexpected error code: \" + e.code);\n      Logger.error(e);\n      return {\n        error: e,\n        result: null\n      };\n    }\n  }\n});\nStripeApi.methods.captureCharge = new ValidatedMethod({\n  name: \"StripeApi.methods.captureCharge\",\n  validate: new SimpleSchema({\n    transactionId: {\n      type: String\n    },\n    captureDetails: {\n      type: captureDetailsSchema\n    },\n    apiKey: {\n      type: String,\n      optional: true\n    }\n  }).validator(),\n  run: function (_ref2) {\n    var transactionId = _ref2.transactionId,\n        captureDetails = _ref2.captureDetails,\n        apiKey = _ref2.apiKey;\n    var stripe = void 0;\n\n    if (!apiKey) {\n      var dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n\n    var capturePromise = stripe.charges.capture(transactionId, captureDetails);\n    var captureResults = Promise.await(capturePromise);\n    return captureResults;\n  }\n});\nStripeApi.methods.createRefund = new ValidatedMethod({\n  name: \"StripeApi.methods.createRefund\",\n  validate: new SimpleSchema({\n    refundDetails: {\n      type: refundDetailsSchema\n    },\n    apiKey: {\n      type: String,\n      optional: true\n    }\n  }).validator(),\n  run: function (_ref3) {\n    var refundDetails = _ref3.refundDetails,\n        apiKey = _ref3.apiKey;\n    var stripe = void 0;\n\n    if (!apiKey) {\n      var dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n\n    var refundPromise = stripe.refunds.create({\n      charge: refundDetails.charge,\n      amount: refundDetails.amount\n    });\n    var refundResults = Promise.await(refundPromise);\n    return refundResults;\n  }\n});\nStripeApi.methods.listRefunds = new ValidatedMethod({\n  name: \"StripeApi.methods.listRefunds\",\n  validate: new SimpleSchema({\n    transactionId: {\n      type: String\n    },\n    apiKey: {\n      type: String,\n      optional: true\n    }\n  }).validator(),\n  run: function (_ref4) {\n    var transactionId = _ref4.transactionId,\n        apiKey = _ref4.apiKey;\n    var stripe = void 0;\n\n    if (!apiKey) {\n      var dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n\n    var refundListPromise = stripe.refunds.list({\n      charge: transactionId\n    });\n    var refundListResults = Promise.await(refundListPromise);\n    return refundListResults;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/payments-stripe/server/methods/stripeapi.js"],"names":["Meteor","SimpleSchema","Packages","Reaction","Logger","StripeApi","methods","cardSchema","number","type","String","name","cvc","exp_month","exp_year","chargeObjectSchema","amount","Number","currency","card","capture","Boolean","captureDetailsSchema","refundDetailsSchema","charge","metadata","optional","reason","expectedErrors","getApiKey","ValidatedMethod","validate","run","settings","findOne","shopId","getShopId","api_key","Error","createCharge","chargeObj","apiKey","validator","stripe","dynamicApiKey","call","require","chargePromise","charges","create","promiseResult","Promise","await","e","rawType","code","debug","error","result","captureCharge","transactionId","captureDetails","capturePromise","captureResults","createRefund","refundDetails","refundPromise","refunds","refundResults","listRefunds","refundListPromise","list","refundListResults"],"mappings":"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","file":"/imports/plugins/included/payments-stripe/server/methods/stripeapi.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { Packages } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\nexport const StripeApi = {};\nStripeApi.methods = {};\n\n\nexport const cardSchema = new SimpleSchema({\n  number: { type: String },\n  name: { type: String },\n  cvc: { type: String },\n  exp_month: { type: String },\n  exp_year: { type: String }\n});\n\nexport const chargeObjectSchema = new SimpleSchema({\n  amount: { type: Number },\n  currency: { type: String },\n  card: { type: cardSchema },\n  capture: { type: Boolean }\n});\n\nexport const captureDetailsSchema = new SimpleSchema({\n  amount: { type: Number }\n});\n\nexport const refundDetailsSchema = new SimpleSchema({\n  charge: { type: String },\n  amount: { type: Number },\n  metadata: { type: String, optional: true },\n  reason: { type: String }\n});\n\n// These are errors on the user side that we just want to pass back up to the user\nconst expectedErrors = [\n  \"card_declined\",\n  \"incorrect_cvc\",\n  \"expired_card\",\n  \"incorrect_number\"\n];\n\nStripeApi.methods.getApiKey = new ValidatedMethod({\n  name: \"StripeApi.methods.getApiKey\",\n  validate: null,\n  run() {\n    const settings = Packages.findOne({\n      name: \"reaction-stripe\",\n      shopId: Reaction.getShopId()\n    }).settings;\n    if (!settings.api_key) {\n      throw new Meteor.Error(\"403\", \"Invalid Stripe Credentials\");\n    }\n    return settings.api_key;\n  }\n});\n\n\nStripeApi.methods.createCharge = new ValidatedMethod({\n  name: \"StripeApi.methods.createCharge\",\n  validate: new SimpleSchema({\n    chargeObj: { type: chargeObjectSchema },\n    apiKey: { type: String, optional: true }\n  }).validator(),\n  run({ chargeObj, apiKey }) {\n    let stripe;\n    if (!apiKey) {\n      const dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n    try {\n      const chargePromise = stripe.charges.create(chargeObj);\n      const promiseResult = Promise.await(chargePromise);\n      return promiseResult;\n    } catch (e) {\n      // Handle \"expected\" errors differently\n      if (e.rawType === \"card_error\" && _.includes(expectedErrors, e.code)) {\n        Logger.debug(\"Error from Stripe is expected, not throwing\");\n        return { error: e, result: null };\n      }\n      Logger.error(\"Received unexpected error code: \" + e.code);\n      Logger.error(e);\n      return { error: e, result: null };\n    }\n  }\n});\n\nStripeApi.methods.captureCharge = new ValidatedMethod({\n  name: \"StripeApi.methods.captureCharge\",\n  validate: new SimpleSchema({\n    transactionId: { type: String },\n    captureDetails: { type: captureDetailsSchema },\n    apiKey: { type: String, optional: true }\n  }).validator(),\n  run({ transactionId, captureDetails, apiKey })  {\n    let stripe;\n    if (!apiKey) {\n      const dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n    const capturePromise = stripe.charges.capture(transactionId, captureDetails);\n    const captureResults = Promise.await(capturePromise);\n    return captureResults;\n  }\n});\n\nStripeApi.methods.createRefund = new ValidatedMethod({\n  name: \"StripeApi.methods.createRefund\",\n  validate: new SimpleSchema({\n    refundDetails: { type: refundDetailsSchema },\n    apiKey: { type: String, optional: true }\n  }).validator(),\n  run({ refundDetails, apiKey }) {\n    let stripe;\n    if (!apiKey) {\n      const dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n    const refundPromise = stripe.refunds.create({ charge: refundDetails.charge, amount: refundDetails.amount });\n    const refundResults = Promise.await(refundPromise);\n    return refundResults;\n  }\n});\n\nStripeApi.methods.listRefunds = new ValidatedMethod({\n  name: \"StripeApi.methods.listRefunds\",\n  validate: new SimpleSchema({\n    transactionId: { type: String },\n    apiKey: { type: String, optional: true }\n  }).validator(),\n  run({ transactionId, apiKey }) {\n    let stripe;\n    if (!apiKey) {\n      const dynamicApiKey = StripeApi.methods.getApiKey.call();\n      stripe = require(\"stripe\")(dynamicApiKey);\n    } else {\n      stripe = require(\"stripe\")(apiKey);\n    }\n    const refundListPromise = stripe.refunds.list({ charge: transactionId });\n    const refundListResults = Promise.await(refundListPromise);\n    return refundListResults;\n  }\n});\n"]},"hash":"ef36e3e7df79656f5b05b462f6c1587415b8853e"}
