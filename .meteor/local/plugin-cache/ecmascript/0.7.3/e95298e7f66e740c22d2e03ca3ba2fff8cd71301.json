{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/imports/plugins/core/ui-grid/client/griddle","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"MeteorGriddle"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["Loading"],"specifiers":[{"kind":"named","imported":"Loading","local":"Loading"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/aldeed:autoform","imported":["AutoForm"],"specifiers":[{"kind":"named","imported":"AutoForm","local":"AutoForm"}]},{"source":"meteor/blaze","imported":["Blaze"],"specifiers":[{"kind":"named","imported":"Blaze","local":"Blaze"}]},{"source":"meteor/reactive-dict","imported":["ReactiveDict"],"specifiers":[{"kind":"named","imported":"ReactiveDict","local":"ReactiveDict"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"../../lib/collections/schemas","imported":["EmailTemplates"],"specifiers":[{"kind":"named","imported":"EmailTemplates","local":"EmailTemplates"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/lib/collections","imported":["Templates"],"specifiers":[{"kind":"named","imported":"Templates","local":"Templates"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/templates/client/templates/settings.js","filenameRelative":"/imports/plugins/core/templates/client/templates/settings.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/templates/client/templates/settings.js"],"names":["MeteorGriddle","Loading","Meteor","AutoForm","Blaze","ReactiveDict","Template","EmailTemplates","i18next","Templates","templateSettings","onCreated","autorun","subscribe","state","setDefault","isEditing","editingId","helpers","templateGrid","filteredFields","noDataMessage","t","instance","editRow","options","currentId","get","set","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","component","publication","collection","matchingResultsCount","showFilter","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","template","id","findOne","typeEmail","type","emailTemplateSchema","events","event","$","removeClass","currentTarget","addClass","hooks","onSubmit","insertDoc","preventDefault","templateId","docId","call","error","result","Alerts","toast","err","message","done","Error","TemplateInstance","prototype","parentTemplate","levels","view","currentView","numLevel","name","substring","templateInstance","parentView"],"mappings":"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","file":"/imports/plugins/core/templates/client/templates/settings.js.map","sourcesContent":["import MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport { Loading } from \"/imports/plugins/core/ui/client/components\";\nimport { Meteor } from \"meteor/meteor\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { Blaze } from \"meteor/blaze\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { Template } from \"meteor/templating\";\nimport { EmailTemplates } from \"../../lib/collections/schemas\";\nimport { i18next } from \"/client/api\";\nimport { Templates } from \"/lib/collections\";\n\n\n/*\n * template templateSettings onCreated\n */\nTemplate.templateSettings.onCreated(function () {\n  // Subscribe to Templates collections\n  this.autorun(() => {\n    this.subscribe(\"Templates\");\n  });\n\n  // Initiate State\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\n\n/*\n * template templateSettings helpers\n */\nTemplate.templateSettings.helpers({\n  templateGrid() {\n    const filteredFields = [\"title\", \"type\", \"language\"];\n    const noDataMessage = i18next.t(\"templateGrid.noTemplatesFound\");\n    const instance = Template.instance();\n\n    //\n    // helper to get and select row from griddle\n    // into blaze to get correct template to edit\n    //\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n\n      // isEditing is current template\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    // helper adds a class to every grid row\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"template-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`templateGrid.columns.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // return template Grid\n    return {\n      component: MeteorGriddle,\n      publication: \"Templates\",\n      collection: Templates,\n      matchingResultsCount: \"templates-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n\n  template() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const template = Templates.findOne(id) || {};\n    return template;\n  },\n\n  typeEmail() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const template = Templates.findOne(id) || {};\n    if (template.type === \"email\") {\n      return true;\n    }\n    return false;\n  },\n\n  emailTemplateSchema() {\n    return EmailTemplates;\n  }\n});\n\n\n/*\n * template templateSettings events\n */\nTemplate.templateSettings.events({\n  \"click .template-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".template-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  },\n  \"submit #email-template-edit-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"click .cancel, .template-grid-row .active\": function () {\n    instance = Template.instance();\n    // remove active rows from grid\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n    // ugly hack\n    $(\".template-grid-row\").removeClass(\"active\");\n  }\n});\n\n\nAutoForm.hooks({\n  \"email-template-edit-form\": {\n    onSubmit: function (insertDoc) {\n      this.event.preventDefault();\n\n      const templateId = this.docId;\n\n      Meteor.call(\"templates/email/update\", templateId, insertDoc, (error, result) => {\n        if (error) {\n          Alerts.toast(i18next.t(\"templateUpdateForm.alerts.failedToUpdate\", { err: error.message }), \"error\");\n          this.done(new Error(\"Failed to update template: \", error));\n          return false;\n        }\n        if (result) {\n          Alerts.toast(i18next.t(\"templateUpdateForm.alerts.templateUpdated\", \"Template successfully updated\"), \"success\");\n          this.done();\n        }\n      });\n    }\n  }\n});\n\n\nBlaze.TemplateInstance.prototype.parentTemplate = function (levels = 1) {\n  let view = Blaze.currentView;\n  let numLevel = levels;\n  while (view) {\n    if (view.name.substring(0, 9) === \"Template.\" && !numLevel--) {\n      return view.templateInstance();\n    }\n    view = view.parentView;\n  }\n};\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/templates/client/templates/settings.js.map","sourceFileName":"/imports/plugins/core/templates/client/templates/settings.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"settings"},"ignored":false,"code":"var MeteorGriddle = void 0;\nmodule.importSync(\"/imports/plugins/core/ui-grid/client/griddle\", {\n  \"default\": function (v) {\n    MeteorGriddle = v;\n  }\n}, 0);\nvar Loading = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar AutoForm = void 0;\nmodule.importSync(\"meteor/aldeed:autoform\", {\n  AutoForm: function (v) {\n    AutoForm = v;\n  }\n}, 3);\nvar Blaze = void 0;\nmodule.importSync(\"meteor/blaze\", {\n  Blaze: function (v) {\n    Blaze = v;\n  }\n}, 4);\nvar ReactiveDict = void 0;\nmodule.importSync(\"meteor/reactive-dict\", {\n  ReactiveDict: function (v) {\n    ReactiveDict = v;\n  }\n}, 5);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 6);\nvar EmailTemplates = void 0;\nmodule.importSync(\"../../lib/collections/schemas\", {\n  EmailTemplates: function (v) {\n    EmailTemplates = v;\n  }\n}, 7);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 8);\nvar Templates = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Templates: function (v) {\n    Templates = v;\n  }\n}, 9);\n/*\n * template templateSettings onCreated\n */Template.templateSettings.onCreated(function () {\n  var _this = this;\n\n  // Subscribe to Templates collections\n  this.autorun(function () {\n    _this.subscribe(\"Templates\");\n  }); // Initiate State\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n}); /*\n     * template templateSettings helpers\n     */\nTemplate.templateSettings.helpers({\n  templateGrid: function () {\n    var filteredFields = [\"title\", \"type\", \"language\"];\n    var noDataMessage = i18next.t(\"templateGrid.noTemplatesFound\");\n    var instance = Template.instance(); //\n    // helper to get and select row from griddle\n    // into blaze to get correct template to edit\n    //\n\n    function editRow(options) {\n      var currentId = instance.state.get(\"editingId\"); // isEditing is current template\n\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id); // toggle edit mode clicking on same row\n\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    } // helper adds a class to every grid row\n\n\n    var customRowMetaData = {\n      bodyCssClassName: function () {\n        return \"template-grid-row\";\n      }\n    }; // add i18n handling to headers\n\n    var customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      var columnMeta = {\n        columnName: field,\n        displayName: i18next.t(\"templateGrid.columns.\" + field)\n      };\n      customColumnMetadata.push(columnMeta);\n    }); // return template Grid\n\n    return {\n      component: MeteorGriddle,\n      publication: \"Templates\",\n      collection: Templates,\n      matchingResultsCount: \"templates-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n  instance: function () {\n    var instance = Template.instance();\n    return instance;\n  },\n  template: function () {\n    var instance = Template.instance();\n    var id = instance.state.get(\"editingId\");\n    var template = Templates.findOne(id) || {};\n    return template;\n  },\n  typeEmail: function () {\n    var instance = Template.instance();\n    var id = instance.state.get(\"editingId\");\n    var template = Templates.findOne(id) || {};\n\n    if (template.type === \"email\") {\n      return true;\n    }\n\n    return false;\n  },\n  emailTemplateSchema: function () {\n    return EmailTemplates;\n  }\n}); /*\n     * template templateSettings events\n     */\nTemplate.templateSettings.events({\n  \"click .template-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".template-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  },\n  \"submit #email-template-edit-form\": function () {\n    var instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"click .cancel, .template-grid-row .active\": function () {\n    instance = Template.instance(); // remove active rows from grid\n\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    }); // ugly hack\n\n    $(\".template-grid-row\").removeClass(\"active\");\n  }\n});\nAutoForm.hooks({\n  \"email-template-edit-form\": {\n    onSubmit: function (insertDoc) {\n      var _this2 = this;\n\n      this.event.preventDefault();\n      var templateId = this.docId;\n      Meteor.call(\"templates/email/update\", templateId, insertDoc, function (error, result) {\n        if (error) {\n          Alerts.toast(i18next.t(\"templateUpdateForm.alerts.failedToUpdate\", {\n            err: error.message\n          }), \"error\");\n\n          _this2.done(new Error(\"Failed to update template: \", error));\n\n          return false;\n        }\n\n        if (result) {\n          Alerts.toast(i18next.t(\"templateUpdateForm.alerts.templateUpdated\", \"Template successfully updated\"), \"success\");\n\n          _this2.done();\n        }\n      });\n    }\n  }\n});\n\nBlaze.TemplateInstance.prototype.parentTemplate = function () {\n  var levels = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var view = Blaze.currentView;\n  var numLevel = levels;\n\n  while (view) {\n    if (view.name.substring(0, 9) === \"Template.\" && !numLevel--) {\n      return view.templateInstance();\n    }\n\n    view = view.parentView;\n  }\n};","map":{"version":3,"sources":["/imports/plugins/core/templates/client/templates/settings.js"],"names":["MeteorGriddle","Loading","Meteor","AutoForm","Blaze","ReactiveDict","Template","EmailTemplates","i18next","Templates","templateSettings","onCreated","autorun","subscribe","state","setDefault","isEditing","editingId","helpers","templateGrid","filteredFields","noDataMessage","t","instance","editRow","options","currentId","get","set","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","component","publication","collection","matchingResultsCount","showFilter","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","template","id","findOne","typeEmail","type","emailTemplateSchema","events","event","$","removeClass","currentTarget","addClass","hooks","onSubmit","insertDoc","preventDefault","templateId","docId","call","error","result","Alerts","toast","err","message","done","Error","TemplateInstance","prototype","parentTemplate","levels","view","currentView","numLevel","name","substring","templateInstance","parentView"],"mappings":"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","file":"/imports/plugins/core/templates/client/templates/settings.js.map","sourcesContent":["import MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport { Loading } from \"/imports/plugins/core/ui/client/components\";\nimport { Meteor } from \"meteor/meteor\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { Blaze } from \"meteor/blaze\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { Template } from \"meteor/templating\";\nimport { EmailTemplates } from \"../../lib/collections/schemas\";\nimport { i18next } from \"/client/api\";\nimport { Templates } from \"/lib/collections\";\n\n\n/*\n * template templateSettings onCreated\n */\nTemplate.templateSettings.onCreated(function () {\n  // Subscribe to Templates collections\n  this.autorun(() => {\n    this.subscribe(\"Templates\");\n  });\n\n  // Initiate State\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\n\n/*\n * template templateSettings helpers\n */\nTemplate.templateSettings.helpers({\n  templateGrid() {\n    const filteredFields = [\"title\", \"type\", \"language\"];\n    const noDataMessage = i18next.t(\"templateGrid.noTemplatesFound\");\n    const instance = Template.instance();\n\n    //\n    // helper to get and select row from griddle\n    // into blaze to get correct template to edit\n    //\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n\n      // isEditing is current template\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    // helper adds a class to every grid row\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"template-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`templateGrid.columns.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // return template Grid\n    return {\n      component: MeteorGriddle,\n      publication: \"Templates\",\n      collection: Templates,\n      matchingResultsCount: \"templates-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n\n  template() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const template = Templates.findOne(id) || {};\n    return template;\n  },\n\n  typeEmail() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const template = Templates.findOne(id) || {};\n    if (template.type === \"email\") {\n      return true;\n    }\n    return false;\n  },\n\n  emailTemplateSchema() {\n    return EmailTemplates;\n  }\n});\n\n\n/*\n * template templateSettings events\n */\nTemplate.templateSettings.events({\n  \"click .template-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".template-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  },\n  \"submit #email-template-edit-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"click .cancel, .template-grid-row .active\": function () {\n    instance = Template.instance();\n    // remove active rows from grid\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n    // ugly hack\n    $(\".template-grid-row\").removeClass(\"active\");\n  }\n});\n\n\nAutoForm.hooks({\n  \"email-template-edit-form\": {\n    onSubmit: function (insertDoc) {\n      this.event.preventDefault();\n\n      const templateId = this.docId;\n\n      Meteor.call(\"templates/email/update\", templateId, insertDoc, (error, result) => {\n        if (error) {\n          Alerts.toast(i18next.t(\"templateUpdateForm.alerts.failedToUpdate\", { err: error.message }), \"error\");\n          this.done(new Error(\"Failed to update template: \", error));\n          return false;\n        }\n        if (result) {\n          Alerts.toast(i18next.t(\"templateUpdateForm.alerts.templateUpdated\", \"Template successfully updated\"), \"success\");\n          this.done();\n        }\n      });\n    }\n  }\n});\n\n\nBlaze.TemplateInstance.prototype.parentTemplate = function (levels = 1) {\n  let view = Blaze.currentView;\n  let numLevel = levels;\n  while (view) {\n    if (view.name.substring(0, 9) === \"Template.\" && !numLevel--) {\n      return view.templateInstance();\n    }\n    view = view.parentView;\n  }\n};\n"]},"hash":"e95298e7f66e740c22d2e03ca3ba2fff8cd71301"}
