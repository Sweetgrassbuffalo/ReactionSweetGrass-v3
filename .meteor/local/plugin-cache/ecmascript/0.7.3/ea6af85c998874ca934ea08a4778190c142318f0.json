{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"/lib/collections","imported":["Cart"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"}]},{"source":"/server/api","imported":["Logger","Hooks"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Hooks","local":"Hooks"}]},{"source":"/lib/collections/schemas","imported":["Cart"],"specifiers":[{"kind":"named","imported":"Cart","local":"CartSchema"}]}],"exports":{"exported":["methods"],"specifiers":[{"kind":"local","local":"methods","exported":"methods"}]}}},"options":{"filename":"/server/methods/core/shipping.js","filenameRelative":"/server/methods/core/shipping.js","inputSourceMap":{"version":3,"sources":["/server/methods/core/shipping.js"],"names":["Meteor","check","Cart","Logger","Hooks","CartSchema","methods","cartId","String","unblock","cart","findOne","rates","call","selector","update","shipping","_id","$set","$push","shipmentQuotes","error","warn","debug","items","Events","run"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAY,AACrB,AAAS,A,AAAT,AAAiB,AAAa,AAC9B,AAAS,AAAQ,AAAkB,AAEnC,AAIA,AAAO,AAAM,AAAU,AACrB;;AAOA,AAAiC,AAAU,AAAQ,AACjD,AAAM,AAAQ,AACd;;;;;;KAAA,AAAI,AAAC,AAAQ,mDACX;UAAA,AAAO,QACR;;;aACD;AAAA,AAAK,AACL;;SAAA,AAAM,AAAO,AAAK,AAAQ,AAC1B;QAAA,AAAM,AAAM,YAAZ;gBAEA,AAAI,AAAM,AACR;;QAAM;AACF,UAAJ,iDACA;UAHQ,AAGR,AAAI,AACJ;UACA,iBAAA,AAAI,AAAK,AAAU,AACjB;;eAAW,UACT;AAAO;iBADT,AAAW,AAEO,AAAK,AAAS,AAAG;2CAEnC,AAAS,AACP;AALS,AAET;AAGM;;yCANV,AAKE,AAAS,AAKV,AAAM,AACL;AALQ,AACyB;AAA7B;aAIO,AACT;AAAK;eAEP,AAAS,AACP;AAJF,AAAW;;;;8BAhBL,AAmBN,AAAS,AACA,AAMV,AACD;AANgB,AACQ;AADR,AACR;AAFG,AACL;OApBN,AAAc,AAAO,AAAK,AAA6B,AACvD,CA0BA;;;WAAA,AAAK,OAAL,AAAY,UAAZ,AAAsB,QAAQ,UAAA,AAAU,OAAO,AAC7C;YAAA,AAAI,OAAO,AACT;iBAAA,AAAO,AAAM,qCAAb,AAA0C,AAAO,QAAjD,AAAoD,AACpD;AACD;;;+DACD;AAAA,AAAO,AAAO,AAA+B,AAAO,AAAG,AACxD;AAND,AAOD;AApDkB,AAqDpB,AAED;AAMA,AAA6B,AAAU,AAAM,AAC3C;;;;;KAAA,AAAM,AAAM;UACN,MAFqC,AAE3C,AAAc,AACd;gBACA,IAAA,AAAI,AAAC,AAAK,AAAO,AACf;;SAAO,KAAP,OALyC,AAM1C;AACD,aACA;KANA;AAOA;;;UAAA,AAAM,OAAN,AAAa,IAAb,AAAiB,sBAAjB,AAAuC,OAAvC,AAA8C,AAC9C;WAAA,AAAO,MAAP,AAAa,oCAAb,AAAiD,AACjD;WAAA,AAAO,AACR;AAzEI,AAAgB,AA4EvB,AAAO,AAAQ","file":"/server/methods/core/shipping.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Cart } from \"/lib/collections\";\nimport { Logger, Hooks } from \"/server/api\";\nimport { Cart as CartSchema } from \"/lib/collections/schemas\";\n\n/*\n * Reaction Shipping Methods\n * methods typically used for checkout (shipping, taxes, etc)\n */\nexport const methods = {\n  /**\n   * shipping/updateShipmentQuotes\n   * @summary gets shipping rates and updates the users cart methods\n   * @todo add orderId argument/fallback\n   * @param {String} cartId - cartId\n   * @return {undefined}\n   */\n  \"shipping/updateShipmentQuotes\": function (cartId) {\n    check(cartId, String);\n    if (!cartId) {\n      return [];\n    }\n    this.unblock();\n    const cart = Cart.findOne(cartId);\n    check(cart, CartSchema);\n\n    if (cart) {\n      const rates = Meteor.call(\"shipping/getShippingRates\", cart);\n      let selector;\n      let update;\n      // temp hack until we build out multiple shipment handlers if we have an existing item update it, otherwise add to set.\n      if (cart.shipping) {\n        selector = {\n          \"_id\": cartId,\n          \"shipping._id\": cart.shipping[0]._id\n        };\n        update = {\n          $set: {\n            \"shipping.$.shipmentQuotes\": rates\n          }\n        };\n      } else {\n        selector = {\n          _id: cartId\n        };\n        update = {\n          $push: {\n            shipping: {\n              shipmentQuotes: rates\n            }\n          }\n        };\n      }\n      // add quotes to the cart\n      Cart.update(selector, update, function (error) {\n        if (error) {\n          Logger.warn(`Error adding rates to cart ${cartId}`, error);\n          return;\n        }\n        Logger.debug(`Success adding rates to cart ${cartId}`, rates);\n      });\n    }\n  },\n\n  /**\n   * shipping/getShippingRates\n   * @summary just gets rates, without updating anything\n   * @param {Object} cart - cart object\n   * @return {Array} return updated rates in cart\n   */\n  \"shipping/getShippingRates\": function (cart) {\n    check(cart, CartSchema);\n    const rates = [];\n    // must have items to calculate shipping\n    if (!cart.items) {\n      return rates;\n    }\n    // hooks for other shipping rate events\n    // all callbacks should return rates\n    Hooks.Events.run(\"onGetShippingRates\", rates, cart);\n    Logger.debug(\"getShippingRates returning rates\", rates);\n    return rates;\n  }\n};\n\nMeteor.methods(methods);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/methods/core/shipping.js.map","sourceFileName":"/server/methods/core/shipping.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"shipping"},"ignored":false,"code":"module.export({\n  methods: function () {\n    return methods;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar Cart = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  }\n}, 2);\nvar Logger = void 0,\n    Hooks = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  },\n  Hooks: function (v) {\n    Hooks = v;\n  }\n}, 3);\nvar CartSchema = void 0;\nmodule.importSync(\"/lib/collections/schemas\", {\n  Cart: function (v) {\n    CartSchema = v;\n  }\n}, 4);\nvar methods = {\n  /**\n   * shipping/updateShipmentQuotes\n   * @summary gets shipping rates and updates the users cart methods\n   * @todo add orderId argument/fallback\n   * @param {String} cartId - cartId\n   * @return {undefined}\n   */\"shipping/updateShipmentQuotes\": function (cartId) {\n    check(cartId, String);\n\n    if (!cartId) {\n      return [];\n    }\n\n    this.unblock();\n    var cart = Cart.findOne(cartId);\n    check(cart, CartSchema);\n\n    if (cart) {\n      var rates = Meteor.call(\"shipping/getShippingRates\", cart);\n      var selector = void 0;\n      var update = void 0; // temp hack until we build out multiple shipment handlers if we have an existing item update it, otherwise add to set.\n\n      if (cart.shipping) {\n        selector = {\n          \"_id\": cartId,\n          \"shipping._id\": cart.shipping[0]._id\n        };\n        update = {\n          $set: {\n            \"shipping.$.shipmentQuotes\": rates\n          }\n        };\n      } else {\n        selector = {\n          _id: cartId\n        };\n        update = {\n          $push: {\n            shipping: {\n              shipmentQuotes: rates\n            }\n          }\n        };\n      } // add quotes to the cart\n\n\n      Cart.update(selector, update, function (error) {\n        if (error) {\n          Logger.warn(\"Error adding rates to cart \" + cartId, error);\n          return;\n        }\n\n        Logger.debug(\"Success adding rates to cart \" + cartId, rates);\n      });\n    }\n  },\n  /**\n   * shipping/getShippingRates\n   * @summary just gets rates, without updating anything\n   * @param {Object} cart - cart object\n   * @return {Array} return updated rates in cart\n   */\"shipping/getShippingRates\": function (cart) {\n    check(cart, CartSchema);\n    var rates = []; // must have items to calculate shipping\n\n    if (!cart.items) {\n      return rates;\n    } // hooks for other shipping rate events\n    // all callbacks should return rates\n\n\n    Hooks.Events.run(\"onGetShippingRates\", rates, cart);\n    Logger.debug(\"getShippingRates returning rates\", rates);\n    return rates;\n  }\n};\nMeteor.methods(methods);","map":{"version":3,"sources":["/server/methods/core/shipping.js"],"names":["Meteor","check","Cart","Logger","Hooks","CartSchema","methods","cartId","String","unblock","cart","findOne","rates","call","selector","update","shipping","_id","$set","$push","shipmentQuotes","error","warn","debug","items","Events","run"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAY,AACrB,AAAS,A,AAAT,AAAiB,AAAa,AAC9B,AAAS,AAAQ,AAAkB,AAEnC,AAIA,AAAO,AAAM,AAAU,AACrB;;AAOA,AAAiC,AAAU,AAAQ,AACjD,AAAM,AAAQ,AACd;;;;;;KAAA,AAAI,AAAC,AAAQ,mDACX;UAAA,AAAO,QACR;;;aACD;AAAA,AAAK,AACL;;SAAA,AAAM,AAAO,AAAK,AAAQ,AAC1B;QAAA,AAAM,AAAM,YAAZ;gBAEA,AAAI,AAAM,AACR;;QAAM;AACF,UAAJ,iDACA;UAHQ,AAGR,AAAI,AACJ;UACA,iBAAA,AAAI,AAAK,AAAU,AACjB;;eAAW,UACT;AAAO;iBADT,AAAW,AAEO,AAAK,AAAS,AAAG;2CAEnC,AAAS,AACP;AALS,AAET;AAGM;;yCANV,AAKE,AAAS,AAKV,AAAM,AACL;AALQ,AACyB;AAA7B;aAIO,AACT;AAAK;eAEP,AAAS,AACP;AAJF,AAAW;;;;8BAhBL,AAmBN,AAAS,AACA,AAMV,AACD;AANgB,AACQ;AADR,AACR;AAFG,AACL;OApBN,AAAc,AAAO,AAAK,AAA6B,AACvD,CA0BA;;;WAAA,AAAK,OAAL,AAAY,UAAZ,AAAsB,QAAQ,UAAA,AAAU,OAAO,AAC7C;YAAA,AAAI,OAAO,AACT;iBAAA,AAAO,AAAM,qCAAb,AAA0C,AAAO,QAAjD,AAAoD,AACpD;AACD;;;+DACD;AAAA,AAAO,AAAO,AAA+B,AAAO,AAAG,AACxD;AAND,AAOD;AApDkB,AAqDpB,AAED;AAMA,AAA6B,AAAU,AAAM,AAC3C;;;;;KAAA,AAAM,AAAM;UACN,MAFqC,AAE3C,AAAc,AACd;gBACA,IAAA,AAAI,AAAC,AAAK,AAAO,AACf;;SAAO,KAAP,OALyC,AAM1C;AACD,aACA;KANA;AAOA;;;UAAA,AAAM,OAAN,AAAa,IAAb,AAAiB,sBAAjB,AAAuC,OAAvC,AAA8C,AAC9C;WAAA,AAAO,MAAP,AAAa,oCAAb,AAAiD,AACjD;WAAA,AAAO,AACR;AAzEI,AAAgB,AA4EvB,AAAO,AAAQ","file":"/server/methods/core/shipping.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Cart } from \"/lib/collections\";\nimport { Logger, Hooks } from \"/server/api\";\nimport { Cart as CartSchema } from \"/lib/collections/schemas\";\n\n/*\n * Reaction Shipping Methods\n * methods typically used for checkout (shipping, taxes, etc)\n */\nexport const methods = {\n  /**\n   * shipping/updateShipmentQuotes\n   * @summary gets shipping rates and updates the users cart methods\n   * @todo add orderId argument/fallback\n   * @param {String} cartId - cartId\n   * @return {undefined}\n   */\n  \"shipping/updateShipmentQuotes\": function (cartId) {\n    check(cartId, String);\n    if (!cartId) {\n      return [];\n    }\n    this.unblock();\n    const cart = Cart.findOne(cartId);\n    check(cart, CartSchema);\n\n    if (cart) {\n      const rates = Meteor.call(\"shipping/getShippingRates\", cart);\n      let selector;\n      let update;\n      // temp hack until we build out multiple shipment handlers if we have an existing item update it, otherwise add to set.\n      if (cart.shipping) {\n        selector = {\n          \"_id\": cartId,\n          \"shipping._id\": cart.shipping[0]._id\n        };\n        update = {\n          $set: {\n            \"shipping.$.shipmentQuotes\": rates\n          }\n        };\n      } else {\n        selector = {\n          _id: cartId\n        };\n        update = {\n          $push: {\n            shipping: {\n              shipmentQuotes: rates\n            }\n          }\n        };\n      }\n      // add quotes to the cart\n      Cart.update(selector, update, function (error) {\n        if (error) {\n          Logger.warn(`Error adding rates to cart ${cartId}`, error);\n          return;\n        }\n        Logger.debug(`Success adding rates to cart ${cartId}`, rates);\n      });\n    }\n  },\n\n  /**\n   * shipping/getShippingRates\n   * @summary just gets rates, without updating anything\n   * @param {Object} cart - cart object\n   * @return {Array} return updated rates in cart\n   */\n  \"shipping/getShippingRates\": function (cart) {\n    check(cart, CartSchema);\n    const rates = [];\n    // must have items to calculate shipping\n    if (!cart.items) {\n      return rates;\n    }\n    // hooks for other shipping rate events\n    // all callbacks should return rates\n    Hooks.Events.run(\"onGetShippingRates\", rates, cart);\n    Logger.debug(\"getShippingRates returning rates\", rates);\n    return rates;\n  }\n};\n\nMeteor.methods(methods);\n"]},"hash":"ea6af85c998874ca934ea08a4778190c142318f0"}
