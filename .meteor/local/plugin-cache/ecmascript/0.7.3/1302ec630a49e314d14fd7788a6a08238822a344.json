{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/vsivsi:job-collection","imported":["Job"],"specifiers":[{"kind":"named","imported":"Job","local":"Job"}]},{"source":"/lib/collections","imported":["Jobs","Templates"],"specifiers":[{"kind":"named","imported":"Jobs","local":"Jobs"},{"kind":"named","imported":"Templates","local":"Templates"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":["send","options","getSubject","template","getTemplate","template","getTemplateFile","file"],"specifiers":[{"kind":"local","local":"send","exported":"send"},{"kind":"local","local":"options","exported":"options"},{"kind":"local","local":"getSubject","exported":"getSubject"},{"kind":"local","local":"template","exported":"template"},{"kind":"local","local":"getTemplate","exported":"getTemplate"},{"kind":"local","local":"template","exported":"template"},{"kind":"local","local":"getTemplateFile","exported":"getTemplateFile"},{"kind":"local","local":"file","exported":"file"}]}}},"options":{"filename":"/server/api/core/email/email.js","filenameRelative":"/server/api/core/email/email.js","inputSourceMap":{"version":3,"sources":["/server/api/core/email/email.js"],"names":["Meteor","Job","Jobs","Templates","Reaction","Logger","send","options","retry","retries","wait","save","getSubject","template","msg","error","Error","language","getShopLanguage","tmpl","findOne","name","subject","getTemplate","getTemplateFile","file","Assets","getText","e","warn"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G,AACA,AAAS,AAAW,AACpB,AAAS,AAAM,AAAiB,AAChC,AAAS,AAAU,AAAc,AAGjC,AAMA,AAAO,AAAS,AAAK,AAAS,AAC5B,AAAO,AAAI,AAAI,AAAM,AAAa,AAC/B,AAAM,AACL,AAAS,AACT;;AAAM,AAAI,uBAFL;AADF,AAIF,oC,AACN,AAGD;;;GARE,AAAO;AAcT,AAAO,AAAS,AAAW,AAAU,AACnC,AAAI,AAAO,AAAa,AAAU,AAChC,AAAM,AAAM,AACZ,AAAO,AAAM,AACb,AAAM,AAAI,AAAO,AAAM,AAAoB,AAC5C,AAED;;;MACM,OAAW,aAAS,UARS,AAQnC,AAAiB,AAEjB;cACA;AAAM,WAAO,MAAA,AAAU,AAAQ,AAC7B;UAAM,IADuB,iCAE7B;AAbiC,AAWnC,AAAa,AAAkB,AAK/B,GARA,CASA;;;AAAI,MAAQ,WAAZ,AAAiB,SAAU,AACzB,AAAO,AAAK,AACb;;;AACM,UACR,A,AADC,AAGF;;AAHE;;;gBASF;AAAO,AAAS,AAAY,AAAU,AACpC;;AAAI,SAAJ,AAAI,AAAO,AAAa,AAAU,AAChC;AAFkC,AAElC,AAAM,AAAM,AACZ,AAAO,AAAM,AACb,AAAM,AAAI,AAAO,AAAM,AAAoB,AAC5C,AAED,AACA,AAAM,AAAW,AAAS,AAE1B,AACA;;AAAM,AAAO,SAAU,YAAV,AAAkB;MACvB,OADuB,uBAE7B;cAFW,AAAkB;AAXK,AAWpC,AAKA;+CACA;AAAA,AAAI,AAAQ,AAAK,AAAU,AACzB,AAAO,AAAK,AACb,GAPC,CAZkC,AAqBpC;;;0BACA,mB,AAAA,AAAO,AAAgB,AACxB;;AAED;;AAKA;MAAO,AAAS,AAAgB,AAAM,AACpC;;MAAI,AAAO,QAAP,KAAgB,UAApB,AAA8B,AAC5B;AAAM,gBAAN,AAAY,AACZ;AAAA,AAAO,AAAM,AACb,AAAM,AAAI,AAAO,AAAM,AAAoB,AAC5C;;;yBAED;AAAA,AAAI,AACF,AAAO,AAAO,AAAS,AAAkB,AAAK,AAC/C,AAAC,AAAO,AAAG,AACV,AAAO,AAAM,AAAsB,AAAK,AACxC,AAAO,AAAO,AAAQ,AACvB,AACF","file":"/server/api/core/email/email.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Job } from \"meteor/vsivsi:job-collection\";\nimport { Jobs, Templates } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\n\n/**\n * Reaction.Email.send()\n * (Job API doc) https://github.com/vsivsi/meteor-job-collection/#user-content-job-api\n * @param  {Object} options - object containing to/from/subject/html String keys\n * @return {Boolean} returns job object\n */\nexport function send(options) {\n  return new Job(Jobs, \"sendEmail\", options)\n    .retry({\n      retries: 5,\n      wait: 3 * 60000\n    }).save();\n}\n\n\n/**\n * Reaction.Email.getSubject() - Returns a subject source for SSR consumption\n * layout must be defined + template\n * @param {String} template name of the template in either Layouts or fs\n * @returns {Object} returns source\n */\nexport function getSubject(template) {\n  if (typeof template !== \"string\") {\n    const msg = \"Reaction.Email.getSubject() requires a template name\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"no-template-name\", msg);\n  }\n\n  // set default\n  const language = Reaction.getShopLanguage();\n\n  // check database for a matching template\n  const tmpl = Templates.findOne({\n    name: template,\n    language\n  });\n\n  // use that template if found\n  if (tmpl && tmpl.template) {\n    return tmpl.subject;\n  }\n  return \"A message from {{shop.name}}\";\n}\n\n/**\n * Reaction.Email.getTemplate() - Returns a template source for SSR consumption\n * layout must be defined + template\n * @param {String} template name of the template in either Layouts or fs\n * @returns {Object} returns source\n */\nexport function getTemplate(template) {\n  if (typeof template !== \"string\") {\n    const msg = \"Reaction.Email.getTemplate() requires a template name\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"no-template-name\", msg);\n  }\n\n  // set default\n  const language = Reaction.getShopLanguage();\n\n  // check database for a matching template\n  const tmpl = Templates.findOne({\n    name: template,\n    language\n  });\n\n  // use that template if found\n  if (tmpl && tmpl.template) {\n    return tmpl.template;\n  }\n\n  // otherwise, use the default template from the filesystem\n  return getTemplateFile(template);\n}\n\n/**\n * Reaction.Email.getTemplateFile\n * @param  {String} file name of the template on file system\n * @return {String} returns source\n */\nexport function getTemplateFile(file) {\n  if (typeof file !== \"string\") {\n    const msg = \"Reaction.Email.getTemplateFile() requires a template name\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"no-template-name\", msg);\n  }\n\n  try {\n    return Assets.getText(`email/templates/${file}.html`);\n  } catch (e) {\n    Logger.warn(`Template not found: ${file}. Falling back to coreDefault.html`);\n    return Assets.getText(\"email/templates/coreDefault.html\");\n  }\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/api/core/email/email.js.map","sourceFileName":"/server/api/core/email/email.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"email"},"ignored":false,"code":"module.export({\n  send: function () {\n    return send;\n  },\n  getSubject: function () {\n    return getSubject;\n  },\n  getTemplate: function () {\n    return getTemplate;\n  },\n  getTemplateFile: function () {\n    return getTemplateFile;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Job = void 0;\nmodule.importSync(\"meteor/vsivsi:job-collection\", {\n  Job: function (v) {\n    Job = v;\n  }\n}, 1);\nvar Jobs = void 0,\n    Templates = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Jobs: function (v) {\n    Jobs = v;\n  },\n  Templates: function (v) {\n    Templates = v;\n  }\n}, 2);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 3);\n\nfunction send(options) {\n  return new Job(Jobs, \"sendEmail\", options).retry({\n    retries: 5,\n    wait: 3 * 60000\n  }).save();\n}\n\nfunction getSubject(template) {\n  if (typeof template !== \"string\") {\n    var msg = \"Reaction.Email.getSubject() requires a template name\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"no-template-name\", msg);\n  } // set default\n\n\n  var language = Reaction.getShopLanguage(); // check database for a matching template\n\n  var tmpl = Templates.findOne({\n    name: template,\n    language: language\n  }); // use that template if found\n\n  if (tmpl && tmpl.template) {\n    return tmpl.subject;\n  }\n\n  return \"A message from {{shop.name}}\";\n}\n\nfunction getTemplate(template) {\n  if (typeof template !== \"string\") {\n    var msg = \"Reaction.Email.getTemplate() requires a template name\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"no-template-name\", msg);\n  } // set default\n\n\n  var language = Reaction.getShopLanguage(); // check database for a matching template\n\n  var tmpl = Templates.findOne({\n    name: template,\n    language: language\n  }); // use that template if found\n\n  if (tmpl && tmpl.template) {\n    return tmpl.template;\n  } // otherwise, use the default template from the filesystem\n\n\n  return getTemplateFile(template);\n}\n\nfunction getTemplateFile(file) {\n  if (typeof file !== \"string\") {\n    var msg = \"Reaction.Email.getTemplateFile() requires a template name\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"no-template-name\", msg);\n  }\n\n  try {\n    return Assets.getText(\"email/templates/\" + file + \".html\");\n  } catch (e) {\n    Logger.warn(\"Template not found: \" + file + \". Falling back to coreDefault.html\");\n    return Assets.getText(\"email/templates/coreDefault.html\");\n  }\n}","map":{"version":3,"sources":["/server/api/core/email/email.js"],"names":["Meteor","Job","Jobs","Templates","Reaction","Logger","send","options","retry","retries","wait","save","getSubject","template","msg","error","Error","language","getShopLanguage","tmpl","findOne","name","subject","getTemplate","getTemplateFile","file","Assets","getText","e","warn"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G,AACA,AAAS,AAAW,AACpB,AAAS,AAAM,AAAiB,AAChC,AAAS,AAAU,AAAc,AAGjC,AAMA,AAAO,AAAS,AAAK,AAAS,AAC5B,AAAO,AAAI,AAAI,AAAM,AAAa,AAC/B,AAAM,AACL,AAAS,AACT;;AAAM,AAAI,uBAFL;AADF,AAIF,oC,AACN,AAGD;;;GARE,AAAO;AAcT,AAAO,AAAS,AAAW,AAAU,AACnC,AAAI,AAAO,AAAa,AAAU,AAChC,AAAM,AAAM,AACZ,AAAO,AAAM,AACb,AAAM,AAAI,AAAO,AAAM,AAAoB,AAC5C,AAED;;;MACM,OAAW,aAAS,UARS,AAQnC,AAAiB,AAEjB;cACA;AAAM,WAAO,MAAA,AAAU,AAAQ,AAC7B;UAAM,IADuB,iCAE7B;AAbiC,AAWnC,AAAa,AAAkB,AAK/B,GARA,CASA;;;AAAI,MAAQ,WAAZ,AAAiB,SAAU,AACzB,AAAO,AAAK,AACb;;;AACM,UACR,A,AADC,AAGF;;AAHE;;;gBASF;AAAO,AAAS,AAAY,AAAU,AACpC;;AAAI,SAAJ,AAAI,AAAO,AAAa,AAAU,AAChC;AAFkC,AAElC,AAAM,AAAM,AACZ,AAAO,AAAM,AACb,AAAM,AAAI,AAAO,AAAM,AAAoB,AAC5C,AAED,AACA,AAAM,AAAW,AAAS,AAE1B,AACA;;AAAM,AAAO,SAAU,YAAV,AAAkB;MACvB,OADuB,uBAE7B;cAFW,AAAkB;AAXK,AAWpC,AAKA;+CACA;AAAA,AAAI,AAAQ,AAAK,AAAU,AACzB,AAAO,AAAK,AACb,GAPC,CAZkC,AAqBpC;;;0BACA,mB,AAAA,AAAO,AAAgB,AACxB;;AAED;;AAKA;MAAO,AAAS,AAAgB,AAAM,AACpC;;MAAI,AAAO,QAAP,KAAgB,UAApB,AAA8B,AAC5B;AAAM,gBAAN,AAAY,AACZ;AAAA,AAAO,AAAM,AACb,AAAM,AAAI,AAAO,AAAM,AAAoB,AAC5C;;;yBAED;AAAA,AAAI,AACF,AAAO,AAAO,AAAS,AAAkB,AAAK,AAC/C,AAAC,AAAO,AAAG,AACV,AAAO,AAAM,AAAsB,AAAK,AACxC,AAAO,AAAO,AAAQ,AACvB,AACF","file":"/server/api/core/email/email.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Job } from \"meteor/vsivsi:job-collection\";\nimport { Jobs, Templates } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\n\n/**\n * Reaction.Email.send()\n * (Job API doc) https://github.com/vsivsi/meteor-job-collection/#user-content-job-api\n * @param  {Object} options - object containing to/from/subject/html String keys\n * @return {Boolean} returns job object\n */\nexport function send(options) {\n  return new Job(Jobs, \"sendEmail\", options)\n    .retry({\n      retries: 5,\n      wait: 3 * 60000\n    }).save();\n}\n\n\n/**\n * Reaction.Email.getSubject() - Returns a subject source for SSR consumption\n * layout must be defined + template\n * @param {String} template name of the template in either Layouts or fs\n * @returns {Object} returns source\n */\nexport function getSubject(template) {\n  if (typeof template !== \"string\") {\n    const msg = \"Reaction.Email.getSubject() requires a template name\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"no-template-name\", msg);\n  }\n\n  // set default\n  const language = Reaction.getShopLanguage();\n\n  // check database for a matching template\n  const tmpl = Templates.findOne({\n    name: template,\n    language\n  });\n\n  // use that template if found\n  if (tmpl && tmpl.template) {\n    return tmpl.subject;\n  }\n  return \"A message from {{shop.name}}\";\n}\n\n/**\n * Reaction.Email.getTemplate() - Returns a template source for SSR consumption\n * layout must be defined + template\n * @param {String} template name of the template in either Layouts or fs\n * @returns {Object} returns source\n */\nexport function getTemplate(template) {\n  if (typeof template !== \"string\") {\n    const msg = \"Reaction.Email.getTemplate() requires a template name\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"no-template-name\", msg);\n  }\n\n  // set default\n  const language = Reaction.getShopLanguage();\n\n  // check database for a matching template\n  const tmpl = Templates.findOne({\n    name: template,\n    language\n  });\n\n  // use that template if found\n  if (tmpl && tmpl.template) {\n    return tmpl.template;\n  }\n\n  // otherwise, use the default template from the filesystem\n  return getTemplateFile(template);\n}\n\n/**\n * Reaction.Email.getTemplateFile\n * @param  {String} file name of the template on file system\n * @return {String} returns source\n */\nexport function getTemplateFile(file) {\n  if (typeof file !== \"string\") {\n    const msg = \"Reaction.Email.getTemplateFile() requires a template name\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"no-template-name\", msg);\n  }\n\n  try {\n    return Assets.getText(`email/templates/${file}.html`);\n  } catch (e) {\n    Logger.warn(`Template not found: ${file}. Falling back to coreDefault.html`);\n    return Assets.getText(\"email/templates/coreDefault.html\");\n  }\n}\n"]},"hash":"1302ec630a49e314d14fd7788a6a08238822a344"}
