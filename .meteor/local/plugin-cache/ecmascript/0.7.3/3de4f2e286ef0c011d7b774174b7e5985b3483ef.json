{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/aldeed:template-extension/lib/template-inherits-hooks-from.js","filenameRelative":"/packages/aldeed:template-extension/lib/template-inherits-hooks-from.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/aldeed:template-extension/lib/template-inherits-hooks-from.js.map","sourceFileName":"/packages/aldeed:template-extension/lib/template-inherits-hooks-from.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"template-inherits-hooks-from"},"ignored":false,"code":"Template.prototype.inheritsHooksFrom = function () {\n  function inheritsHooksFrom(otherTemplate) {\n    var self = this;\n\n    function inheritHooks(template) {\n      // String template names can be provided and template object is looked up\n      if (typeof template === 'string') template = Template[template];\n      if (!template) return; // For this to work properly, need to ensure that we've defined\n      // the global hook hook for the other template already.\n\n      Hooks.addGlobal(template);\n\n      for (var _iterator = template._callbacks.created, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var hook = _ref;\n        // Don't copy the master hook because every template already has it\n        if (hook === Hooks.master.created) continue;\n        self.onCreated(hook);\n      }\n\n      for (var _iterator2 = template._callbacks.rendered, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var _hook = _ref2;\n        // Don't copy the master hook because every template already has it\n        if (_hook === Hooks.master.rendered) continue;\n        self.onRendered(_hook);\n      }\n\n      for (var _iterator3 = template._callbacks.destroyed, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var _hook2 = _ref3;\n        // Don't copy the master hook because every template already has it\n        if (_hook2 === Hooks.master.destroyed) continue;\n        self.onDestroyed(_hook2);\n      }\n    } // Accept an array as otherTemplate argument\n\n\n    if (Array.isArray(otherTemplate)) {\n      otherTemplate.forEach(inheritHooks);\n      return;\n    } // otherTemplate is a string\n\n\n    inheritHooks(otherTemplate);\n  }\n\n  return inheritsHooksFrom;\n}();","map":{"version":3,"sources":["/packages/aldeed:template-extension/lib/template-inherits-hooks-from.js"],"names":["Template","prototype","inheritsHooksFrom","otherTemplate","self","inheritHooks","template","Hooks","addGlobal","_callbacks","created","hook","master","onCreated","rendered","onRendered","destroyed","onDestroyed","Array","isArray","forEach"],"mappings":"AAAAA,SAASC,SAAT,CAAmBC,iBAAnB;AAAuC,WAASA,iBAAT,CAA2BC,aAA3B,EAA0C;AAC/E,QAAIC,OAAO,IAAX;;AAEA,aAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B;AACA,UAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkCA,WAAWN,SAASM,QAAT,CAAX;AAClC,UAAI,CAACA,QAAL,EAAe,OAHe,CAK9B;AACA;;AACAC,YAAMC,SAAN,CAAgBF,QAAhB;;AAEA,2BAAiBA,SAASG,UAAT,CAAoBC,OAArC,kHAA8C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAArCC,IAAqC;AAC5C;AACA,YAAIA,SAASJ,MAAMK,MAAN,CAAaF,OAA1B,EAAmC;AACnCN,aAAKS,SAAL,CAAeF,IAAf;AACD;;AAED,4BAAiBL,SAASG,UAAT,CAAoBK,QAArC,yHAA+C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAAtCH,KAAsC;AAC7C;AACA,YAAIA,UAASJ,MAAMK,MAAN,CAAaE,QAA1B,EAAoC;AACpCV,aAAKW,UAAL,CAAgBJ,KAAhB;AACD;;AAED,4BAAiBL,SAASG,UAAT,CAAoBO,SAArC,yHAAgD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAAvCL,MAAuC;AAC9C;AACA,YAAIA,WAASJ,MAAMK,MAAN,CAAaI,SAA1B,EAAqC;AACrCZ,aAAKa,WAAL,CAAiBN,MAAjB;AACD;AACF,KA7B8E,CA+B/E;;;AACA,QAAIO,MAAMC,OAAN,CAAchB,aAAd,CAAJ,EAAkC;AAChCA,oBAAciB,OAAd,CAAsBf,YAAtB;AACA;AACD,KAnC8E,CAqC/E;;;AACAA,iBAAaF,aAAb;AACD;;AAvCD,SAAgDD,iBAAhD;AAAA","file":"/packages/aldeed:template-extension/lib/template-inherits-hooks-from.js.map","sourcesContent":["Template.prototype.inheritsHooksFrom = function inheritsHooksFrom(otherTemplate) {\n  var self = this;\n\n  function inheritHooks(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n\n    // For this to work properly, need to ensure that we've defined\n    // the global hook hook for the other template already.\n    Hooks.addGlobal(template);\n\n    for (let hook of template._callbacks.created) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.created) continue;\n      self.onCreated(hook);\n    }\n\n    for (let hook of template._callbacks.rendered) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.rendered) continue;\n      self.onRendered(hook);\n    }\n\n    for (let hook of template._callbacks.destroyed) {\n      // Don't copy the master hook because every template already has it\n      if (hook === Hooks.master.destroyed) continue;\n      self.onDestroyed(hook);\n    }\n  }\n\n  // Accept an array as otherTemplate argument\n  if (Array.isArray(otherTemplate)) {\n    otherTemplate.forEach(inheritHooks);\n    return;\n  }\n\n  // otherTemplate is a string\n  inheritHooks(otherTemplate);\n};\n"]},"hash":"3de4f2e286ef0c011d7b774174b7e5985b3483ef"}
