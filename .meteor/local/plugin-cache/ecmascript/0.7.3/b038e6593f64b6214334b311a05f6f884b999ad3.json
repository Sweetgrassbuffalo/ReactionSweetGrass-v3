{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/reactive-dict","imported":["ReactiveDict"],"specifiers":[{"kind":"named","imported":"ReactiveDict","local":"ReactiveDict"}]},{"source":"meteor/aldeed:autoform","imported":["AutoForm"],"specifiers":[{"kind":"named","imported":"AutoForm","local":"AutoForm"}]},{"source":"/lib/collections","imported":["Shipping"],"specifiers":[{"kind":"named","imported":"Shipping","local":"Shipping"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/imports/plugins/core/ui-grid/client/griddle","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"MeteorGriddle"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["Loading"],"specifiers":[{"kind":"named","imported":"Loading","local":"Loading"}]},{"source":"./carriers.html","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/shippo/client/settings/carriers.js","filenameRelative":"/imports/plugins/included/shippo/client/settings/carriers.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/shippo/client/settings/carriers.js"],"names":["Template","ReactiveDict","AutoForm","Shipping","i18next","MeteorGriddle","Loading","shippoCarriers","onCreated","autorun","subscribe","state","setDefault","isEditing","editingId","helpers","carrierGrid","filteredFields","noDataMessage","t","instance","editRow","options","currentId","get","set","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","transform","results","result","method","provider","shippoProvider","carrier","name","component","publication","collection","showFilter","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","shippoCarrier","id","findOne","events","$","removeClass","event","currentTarget","addClass","hooks","onSuccess","Alerts","toast","onError","operation","error"],"mappings":"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","file":"/imports/plugins/included/shippo/client/settings/carriers.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { Shipping } from \"/lib/collections\";\nimport { i18next } from \"/client/api\";\nimport MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport { Loading } from \"/imports/plugins/core/ui/client/components\";\n\nimport \"./carriers.html\";\n\nTemplate.shippoCarriers.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"Shipping\");\n  });\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\nTemplate.shippoCarriers.helpers({\n  carrierGrid() {\n    const filteredFields = [\"name\", \"carrier\", \"label\", \"enabled\"];\n    const noDataMessage = i18next.t(\"admin.shippingSettings.noCarriersFound\");\n    const instance = Template.instance();\n\n    // griddle helper to select row\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n      // isEditing is shipping rate object\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    // add shipping-carriers-grid-row class\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"shipping-carriers-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`admin.shippingGrid.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // filter and extract shipping methods\n    // from flat rate shipping provider\n    function transform(results) {\n      const result = [];\n      for (const method of results) {\n        if (method.provider && typeof method.provider.shippoProvider === \"object\") {\n          method.provider.carrier = method.name;\n          result.push(method.provider);\n        }\n      }\n      return result;\n    }\n\n    // return shipping Grid\n    return {\n      component: MeteorGriddle,\n      publication: \"Shipping\",\n      transform: transform,\n      collection: Shipping,\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n\n  shippoCarrier() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const shippoCarriers = Shipping.findOne({ \"provider._id\": id });\n    return shippoCarriers.provider;\n  }\n});\n\n//\n// on submit lets clear the form state\n//\nTemplate.shippoCarriers.events({\n  \"submit #shipping-carrier-insert-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .shipping-carriers-grid-row .active\": function () {\n    instance = Template.instance();\n    // remove active rows from grid\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n    // ugly hack\n    $(\".shipping-carriers-grid-row\").removeClass(\"active\");\n  },\n  \"click .shipping-carriers-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".shipping-carriers-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n});\n\n//\n// Hooks for update and insert forms\n//\nAutoForm.hooks({\n  \"shipping-carrier-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.carrierSaved\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.shippingSettings.carrierFailed\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/shippo/client/settings/carriers.js.map","sourceFileName":"/imports/plugins/included/shippo/client/settings/carriers.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"carriers"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 0);\nvar ReactiveDict = void 0;\nmodule.importSync(\"meteor/reactive-dict\", {\n  ReactiveDict: function (v) {\n    ReactiveDict = v;\n  }\n}, 1);\nvar AutoForm = void 0;\nmodule.importSync(\"meteor/aldeed:autoform\", {\n  AutoForm: function (v) {\n    AutoForm = v;\n  }\n}, 2);\nvar Shipping = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shipping: function (v) {\n    Shipping = v;\n  }\n}, 3);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 4);\nvar MeteorGriddle = void 0;\nmodule.importSync(\"/imports/plugins/core/ui-grid/client/griddle\", {\n  \"default\": function (v) {\n    MeteorGriddle = v;\n  }\n}, 5);\nvar Loading = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 6);\nmodule.importSync(\"./carriers.html\");\nTemplate.shippoCarriers.onCreated(function () {\n  var _this = this;\n\n  this.autorun(function () {\n    _this.subscribe(\"Shipping\");\n  });\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\nTemplate.shippoCarriers.helpers({\n  carrierGrid: function () {\n    var filteredFields = [\"name\", \"carrier\", \"label\", \"enabled\"];\n    var noDataMessage = i18next.t(\"admin.shippingSettings.noCarriersFound\");\n    var instance = Template.instance(); // griddle helper to select row\n\n    function editRow(options) {\n      var currentId = instance.state.get(\"editingId\"); // isEditing is shipping rate object\n\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id); // toggle edit mode clicking on same row\n\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    } // add shipping-carriers-grid-row class\n\n\n    var customRowMetaData = {\n      bodyCssClassName: function () {\n        return \"shipping-carriers-grid-row\";\n      }\n    }; // add i18n handling to headers\n\n    var customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      var columnMeta = {\n        columnName: field,\n        displayName: i18next.t(\"admin.shippingGrid.\" + field)\n      };\n      customColumnMetadata.push(columnMeta);\n    }); // filter and extract shipping methods\n    // from flat rate shipping provider\n\n    function transform(results) {\n      var result = [];\n\n      for (var _iterator = results, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var method = _ref;\n\n        if (method.provider && (0, _typeof3.default)(method.provider.shippoProvider) === \"object\") {\n          method.provider.carrier = method.name;\n          result.push(method.provider);\n        }\n      }\n\n      return result;\n    } // return shipping Grid\n\n\n    return {\n      component: MeteorGriddle,\n      publication: \"Shipping\",\n      transform: transform,\n      collection: Shipping,\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n  instance: function () {\n    var instance = Template.instance();\n    return instance;\n  },\n  shippoCarrier: function () {\n    var instance = Template.instance();\n    var id = instance.state.get(\"editingId\");\n    var shippoCarriers = Shipping.findOne({\n      \"provider._id\": id\n    });\n    return shippoCarriers.provider;\n  }\n}); //\n// on submit lets clear the form state\n//\n\nTemplate.shippoCarriers.events({\n  \"submit #shipping-carrier-insert-form\": function () {\n    var instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .shipping-carriers-grid-row .active\": function () {\n    instance = Template.instance(); // remove active rows from grid\n\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    }); // ugly hack\n\n    $(\".shipping-carriers-grid-row\").removeClass(\"active\");\n  },\n  \"click .shipping-carriers-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".shipping-carriers-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n}); //\n// Hooks for update and insert forms\n//\n\nAutoForm.hooks({\n  \"shipping-carrier-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.carrierSaved\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.carrierFailed\") + \" \" + error, \"error\");\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/shippo/client/settings/carriers.js"],"names":["Template","ReactiveDict","AutoForm","Shipping","i18next","MeteorGriddle","Loading","shippoCarriers","onCreated","autorun","subscribe","state","setDefault","isEditing","editingId","helpers","carrierGrid","filteredFields","noDataMessage","t","instance","editRow","options","currentId","get","set","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","transform","results","result","method","provider","shippoProvider","carrier","name","component","publication","collection","showFilter","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","shippoCarrier","id","findOne","events","$","removeClass","event","currentTarget","addClass","hooks","onSuccess","Alerts","toast","onError","operation","error"],"mappings":";;;;;;AAAA,IAAS;AAAT,OAAyB,WAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBACA,AAAS,AAAoB,AAC7B,AAAS,AAAgB,AACzB,AAAS,AAAgB,AACzB,AAAS,AAAe,AACxB,AAAO,AAAmB,AAC1B,AAAS,AAAe,AAExB,AAAO,AAEP,AAAS,AAAe,AAAU,AAAY,AAC5C,AAAK,AAAQ,AAAM;AACjB,SAAA,AAAK,AAAU,eAAf;AACD;;AAFD,2BAIA;AAAK,UAAL,AAAa,UAAb,AAAa,AAAI,AACjB;AAAA,AAAK,AAAM,AAAW,AACpB,AAAW,AACX;eAAW,IAFS;AAAtB;eAMF;AAAS,eAAT,AAAwB,AAAQ,AAC9B,AAAc,AACZ;AAdJ,AAUC;AAIG,AAAM,AAAiB,AAAC,AAAQ,AAAW,AAAS,AACpD,AAAM,AAAgB,AAAQ,AAAE;AAChC,SAAM,AAAW,eAAS;;QAG1B,AAAS,AAAQ,kBAAjB,AAA0B,4BACxB;QAAM,AAAY,gBAAS,UADH,AACxB,AAAkB,AAAe,AAAI,AACrC;4BACA,AAAS,AAAM,AAAI,AAAa,AAAQ,AAAM,AAC9C,YAJwB,AAIxB,AAAS,AAAM,AAAI,AAAa,AAAQ,AAAM,AAAK,AACnD;;8BACA;AAAI,sBAAc,AAAQ,SAAR,AAAc,MAAd,IAAlB,AAAqC,AAAK,AACxC,cAAA,AAAS,AAAM,AAAI,AAAa,AAChC;;eAAS,MAAT,AAAe,IAAf,AAAmB,aAAnB,AAAgC,cACjC;yDAfS,AAgBX,MAED;;;wCACA;AAAM,2BAAoB,aACxB;AAAkB,AAAO,AACvB;AAFsB,AAEtB,AAAO,AACR,KAhBH,CANY,AAmBZ,AAMA;;;;AACM,oCAAN,AAA6B,AAC7B;eAAA,AAAe,AAAQ,AAAU,AAAO,AACtC;AAAM,AAAa,AACjB,AAAY,AACZ,AAAa,AAAQ,AAAG,AAAqB,AAAM;AAJvD,OAEE,AAIA;;QAAA,AAAqB,AAAK,uBAA1B,AACD;AAjCW,AA2BZ,AAQA,4CACA;;oBACA;AAAS,qBAAT,AAAmB,QAAnB,AAA4B,0BAC1B,AAAM,AAAS;;gCACf;AAAA,AAAK,AAAM,AAAU,AAAS,AAC5B,AAAI,AAAO,AAAY,AAAO,AAAO,AAAS,AAAmB,AAAU,AACzE,QAAA,AAAO,AAAS,AAAU,AAAO,AACjC;AAAA,AAAO,AAAK,AAAO,AACpB;;gCACF;;;;AACD;;;;;;;;;;;;;YAAO,OAAP,gFA7CU,AA8CX,AAED;;;AACA;AAAO,AACL;;aADK,AACM,AACX;AAFK,AAEQ,AACb,AAAW,AACX,MAJK,AAIO,AACZ;;;;iBALK,AAMa,AAClB;mBAPK,AAOQ,AACb;iBARK,AAQW,AAChB;AAAS,kBATJ,AAUL;kBAVK,AAUU,AACf;AAAY,wBAXP,AAYL;mBAZK,AAYW,AAChB;sBAbF,AAAO,AAaqB;eA/DA,AAiE7B;;kBAED;AAAW,sBACT;AAAM,AAAW,AAAS,gCAA1B,AAAiB,AACjB,AAAO,AACR;AApBQ,AAKO,AACZ;AAxD0B,AAwE9B;wBAAgB,AACd;QAAM,WAAW,SAAjB,AAAiB,AAAS,AAC1B;AAAM,WAAN,AAAW,AAAS,AAAM,AAAI,AAC9B;AAAM,AAAiB,AAAS,AAAQ,AAAE,AAAgB;AAA1D,AAAuB,6BACvB;QAAO,WAAe,SAAtB,AACD;;;sBA7E6B,A,AAAhC;;AAgFA,0BACA;AACA;AAjFgB,AAGZ,AAAiB,AAEjB,IA6EJ,AAAS,AAAe,AAAO;AAC7B,AAAwC,AAAY;AAClD,AAAM,AAAW,AAAS;;AAC1B,SAAA,AAAS,AAAM,AAAI;AAAA,AACN,sDACX;QAAW,oBAFM;AAAnB;iBAKF;iBAAsD,AAAY,AAChE,AAAW,AAAS,AACpB;AAV2B,AAO5B;AAIC;AAAA,AAAS,AAAM,AAAI;eAAA,AACN,SACX,YAFiB,AAEN;;AALmD,AAGhE,AAIA;iBACA;AAAE,iBAhByB,AAgB3B,AAAiC,AAAY,AAC9C,AACD;OANI,CAMiC,AAAU,AAAO,AACpD;;iDACA;AAAA,AAAE,AAA+B,AAAY,AAC7C;AAAA,AAAS,AAAW,AAAE,AAAM,uCAA5B,AAA2C,UAA3C,OAAA,AAAoD,AACrD;AAtBH,A,AAA+B;AAyB/B,iDACA;wDACA;AACA,AAAS,AAAM;AAxBT,IAyBJ,AAAgC;AAC9B,AAAW,AAAY;AACrB,AAAO,AAAO,AAAM,AAAQ,AAAE,AAC5B;;AAH0B,AAI7B;AACQ,AAAU;AACV,eAAA,AAAO,AACX,YADH,AAAO,AACF,AAAQ,AAAE,AAAwC,AAAG,AAAM,AAAG,AAEpE;oCAT6B,wCADlC,AAAe;;;;;AAMF,AAAqB,AAAO,AACnC;AADF","file":"/imports/plugins/included/shippo/client/settings/carriers.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { Shipping } from \"/lib/collections\";\nimport { i18next } from \"/client/api\";\nimport MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport { Loading } from \"/imports/plugins/core/ui/client/components\";\n\nimport \"./carriers.html\";\n\nTemplate.shippoCarriers.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"Shipping\");\n  });\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\nTemplate.shippoCarriers.helpers({\n  carrierGrid() {\n    const filteredFields = [\"name\", \"carrier\", \"label\", \"enabled\"];\n    const noDataMessage = i18next.t(\"admin.shippingSettings.noCarriersFound\");\n    const instance = Template.instance();\n\n    // griddle helper to select row\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n      // isEditing is shipping rate object\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    // add shipping-carriers-grid-row class\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"shipping-carriers-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`admin.shippingGrid.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // filter and extract shipping methods\n    // from flat rate shipping provider\n    function transform(results) {\n      const result = [];\n      for (const method of results) {\n        if (method.provider && typeof method.provider.shippoProvider === \"object\") {\n          method.provider.carrier = method.name;\n          result.push(method.provider);\n        }\n      }\n      return result;\n    }\n\n    // return shipping Grid\n    return {\n      component: MeteorGriddle,\n      publication: \"Shipping\",\n      transform: transform,\n      collection: Shipping,\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n\n  shippoCarrier() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const shippoCarriers = Shipping.findOne({ \"provider._id\": id });\n    return shippoCarriers.provider;\n  }\n});\n\n//\n// on submit lets clear the form state\n//\nTemplate.shippoCarriers.events({\n  \"submit #shipping-carrier-insert-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .shipping-carriers-grid-row .active\": function () {\n    instance = Template.instance();\n    // remove active rows from grid\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n    // ugly hack\n    $(\".shipping-carriers-grid-row\").removeClass(\"active\");\n  },\n  \"click .shipping-carriers-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".shipping-carriers-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n});\n\n//\n// Hooks for update and insert forms\n//\nAutoForm.hooks({\n  \"shipping-carrier-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.carrierSaved\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.shippingSettings.carrierFailed\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n"]},"hash":"b038e6593f64b6214334b311a05f6f884b999ad3"}
