{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js","filenameRelative":"/imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js"],"names":["i18next","Mongo","Alerts","defaultOptions","dismissable","classes","autoHide","fadeIn","fadeOut","alertsLimit","html","placement","i18nKey","id","add","alertMessage","mode","alertOptions","a","message","options","t","_","defaults","type","collection_","findOne","update","_id","$set","count","find","sort","created","skip","forEach","row","remove","insert","seen","Date","removeSeen","$ne","removeType","Collection"],"mappings":"AAAA;;;;;;;;;;;G,AACA,AAAS,AAAa,AAEtB;AAGA,AAAS,AAEP;;;AAGgB,AAKd,AAAa,AAEb;;;AAPc,AAUd,AAAS,AAET;;OAGA,aAfc,AAeJ,AAEV;AAjBc,AAoBd,AAAQ,AAER;;gBAtBc,AAyBd,AAAS,AAET;AA3Bc,AA8Bd,AAAa,AAEb;;;AAhCc,AAmCd,AAAM,AAEN;;;AArCc,AA0Cd,AAAW,AAEX;;OAGA,SA/Cc,AA+CL,AAET;AAtDK,AAKS,AAoDd,AAAI,AAGN;;;;;aAQA,AAAK,AAAU,AAAc,AAAM,AAAc,AAC/C;AAD+C,AAC/C,AAAI,AACJ,AAAI,AAAU,AACd,AAAI,AAAU,AACd,AACA,AAAI,AAAW,AAAQ,AAAW,AAAQ,AAAY,AAAQ,AAAE,AAAQ,AAAU,AAChF;;;;kBAN6C,AAM7C,AAAU,AAAQ,AAAE,AAAQ,AAC7B,AACD;AACA,AAAU,AAAE,AAAS,AAAgB,AAAI,AAAO;;gBAEhD,AAAI,AAAQ,AAAM,AAChB;AAAA,AAAI,AAAO,AAAY,AAAQ,AAC7B,AAAgB,AAAQ;;WAE1B,AAAI,AAAG,AACL,AAAO,AAAY,AAAO,AAAE,AAAK,AAC/B;;AADF,AAAiC,AACzB,AACJ,AAAS,AACT,AAAM,AACN,AAAS,AAGb,AACD,AACF;;;;;;;QAED;QAAM,UAAN,AAAc,AAAO,AAAY,AAAK,AAAI;kBAC1C,cAAA,AAAI,AAAS,AAAQ,AAAa,AAChC;;QAAO,WAAP,AAAmB,QAAnB,AAAwB,AAAI,2DAC1B;AAAM,kCACJ;AADI,AACK,AAAC,MAFc,AAI1B;;;cAAM,EAAQ,SAAR,AAAsB,2BAJ9B,AAA4B,AAKzB,AAAQ,AAAU,AAAK,AACxB;;QAAO,cAAP,AAAmB,AAAO,AAAI,AAC/B;AAPD;gCASF;AADC;;UACM,GAAP,AAAmB,AAAO,AACxB;eADwB,AACf;AACH;AACG,qBAHe,AAIxB;AAJwB,AAIlB,kBACN;AAAS,AAAC,AAAI,qBA/GX,AA0GL,AAA0B,AAKd,AAEb,AAED;AAT4B,AAGxB;AADA;;;AAWJ,AAAY,AAAY,AACtB;;QAAO,QAAP,AAAmB,OAAnB,AAA0B,qBACxB;;QAAQ,SADgB,qBAExB;aAAkB;AACX;oBA3HJ,AAwHL,AAA0B,AAM3B;AAJqB;oCAMtB;AALM;;;AASN,AAAY,AAAU,AAAM,AAC1B;;WAAA,AAAO,YAAP,AAAmB;eAAnB,AAA0B,AACR;YAtIb,AAwIN;eACD;YAzIF,AAAS,AAyIM,AAAI,AAAM,AAAW;oBAGpC,AAAe;AAPe,AACxB;;;;;;;;;;;;;;;;;;;;;;AAjIJ,AAAgB,AAEd;OAbK,OAAT,WAAwB,QAAxB","file":"/imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js.map","sourcesContent":["import { i18next } from \"/client/api\";\nimport { Mongo } from \"meteor/mongo\";\n\n/*\n * Forked and modifed from https://github.com/asktomsk/bootstrap-alerts/\n */\nAlerts = {\n\n  /*\n  Default options. Can be overridden for application\n   */\n  defaultOptions: {\n\n    /*\n    Button with cross icon to hide (close) alert\n     */\n    dismissable: true,\n\n    /*\n    CSS classes to be appended on each alert DIV (use space for separator)\n     */\n    classes: \"\",\n\n    /*\n    Hide alert after delay in ms or false to infinity\n     */\n    autoHide: false,\n\n    /*\n    Time in ms before alert fully appears\n     */\n    fadeIn: 200,\n\n    /*\n    If autoHide enabled then fadeOut is time in ms before alert disappears\n     */\n    fadeOut: 3000,\n\n    /*\n    Amount of alerts to be displayed\n     */\n    alertsLimit: 3,\n\n    /*\n    Allows use HTML in messages\n     */\n    html: false,\n\n    /*\n     * define placement to only show where matches\n     * use: {{inlineAlerts placement=\"cart\"}}\n     * Alerts.add \"message\",\"danger\", placement:\"cart\"\n     */\n    placement: \"\",\n\n    /*\n    Translation key for i18n (translations collection)\n     */\n    i18nKey: \"\",\n\n    /*\n    unique id (for multiple message placements)\n     */\n    id: \"\"\n  },\n\n  /*\n  Add an alert\n\n  @param message (String) Text to display.\n  @param mode (String) One of bootstrap alerts types: success, info, warning, danger\n  @param options (Object) Options if required to override some of default ones.\n  See Alerts.defaultOptions for all values.\n   */\n  add: function (alertMessage, mode, alertOptions) {\n    let a;\n    let message = alertMessage;\n    let options = alertOptions;\n    // check options to see if we have translation\n    if (options && options.i18nKey && options.i18nKey !== i18next.t(options.i18nKey)) {\n      message = i18next.t(options.i18nKey);\n    }\n    // get default options\n    options = _.defaults(alertOptions || {}, Alerts.defaultOptions);\n\n    if (options.type) {\n      a = Alerts.collection_.findOne({\n        \"options.type\": options.type\n      });\n      if (a) {\n        Alerts.collection_.update(a._id, {\n          $set: {\n            message: message,\n            mode: mode,\n            options: options\n          }\n        });\n        return;\n      }\n    }\n\n    const count = Alerts.collection_.find({}).count();\n    if (count >= options.alertsLimit) {\n      Alerts.collection_.find({}, {\n        sort: {\n          created: -1\n        },\n        skip: options.alertsLimit - 1\n      }).forEach(function (row) {\n        Alerts.collection_.remove(row._id);\n      });\n    }\n    Alerts.collection_.insert({\n      message: message,\n      mode: mode,\n      options: options,\n      seen: false,\n      created: +new Date()\n    });\n  },\n\n  /*\n  Call this function before loading a new page to clear errors from previous page\n  Best way is using Router filtering feature to call this function\n   */\n  removeSeen: function () {\n    Alerts.collection_.remove({\n      \"seen\": true,\n      \"options.sticky\": {\n        $ne: true\n      }\n    });\n  },\n\n  /*\n  If you provide a `type` option when adding an alert, you can call this function\n  to later remove that alert.\n   */\n  removeType: function (type) {\n    Alerts.collection_.remove({\n      \"options.type\": type\n    });\n  },\n  collection_: new Mongo.Collection(null)\n};\n\nexport default Alerts;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js.map","sourceFileName":"/imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"inlineAlerts"},"ignored":false,"code":"var i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 0);\nvar Mongo = void 0;\nmodule.importSync(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 1);\n/*\n * Forked and modifed from https://github.com/asktomsk/bootstrap-alerts/\n */Alerts = {\n  /*\n  Default options. Can be overridden for application\n   */defaultOptions: {\n    /*\n    Button with cross icon to hide (close) alert\n     */dismissable: true,\n    /*\n    CSS classes to be appended on each alert DIV (use space for separator)\n     */classes: \"\",\n    /*\n    Hide alert after delay in ms or false to infinity\n     */autoHide: false,\n    /*\n    Time in ms before alert fully appears\n     */fadeIn: 200,\n    /*\n    If autoHide enabled then fadeOut is time in ms before alert disappears\n     */fadeOut: 3000,\n    /*\n    Amount of alerts to be displayed\n     */alertsLimit: 3,\n    /*\n    Allows use HTML in messages\n     */html: false,\n    /*\n     * define placement to only show where matches\n     * use: {{inlineAlerts placement=\"cart\"}}\n     * Alerts.add \"message\",\"danger\", placement:\"cart\"\n     */placement: \"\",\n    /*\n    Translation key for i18n (translations collection)\n     */i18nKey: \"\",\n    /*\n    unique id (for multiple message placements)\n     */id: \"\"\n  },\n  /*\n  Add an alert\n   @param message (String) Text to display.\n  @param mode (String) One of bootstrap alerts types: success, info, warning, danger\n  @param options (Object) Options if required to override some of default ones.\n  See Alerts.defaultOptions for all values.\n   */add: function (alertMessage, mode, alertOptions) {\n    var a = void 0;\n    var message = alertMessage;\n    var options = alertOptions; // check options to see if we have translation\n\n    if (options && options.i18nKey && options.i18nKey !== i18next.t(options.i18nKey)) {\n      message = i18next.t(options.i18nKey);\n    } // get default options\n\n\n    options = _.defaults(alertOptions || {}, Alerts.defaultOptions);\n\n    if (options.type) {\n      a = Alerts.collection_.findOne({\n        \"options.type\": options.type\n      });\n\n      if (a) {\n        Alerts.collection_.update(a._id, {\n          $set: {\n            message: message,\n            mode: mode,\n            options: options\n          }\n        });\n        return;\n      }\n    }\n\n    var count = Alerts.collection_.find({}).count();\n\n    if (count >= options.alertsLimit) {\n      Alerts.collection_.find({}, {\n        sort: {\n          created: -1\n        },\n        skip: options.alertsLimit - 1\n      }).forEach(function (row) {\n        Alerts.collection_.remove(row._id);\n      });\n    }\n\n    Alerts.collection_.insert({\n      message: message,\n      mode: mode,\n      options: options,\n      seen: false,\n      created: +new Date()\n    });\n  },\n  /*\n  Call this function before loading a new page to clear errors from previous page\n  Best way is using Router filtering feature to call this function\n   */removeSeen: function () {\n    Alerts.collection_.remove({\n      \"seen\": true,\n      \"options.sticky\": {\n        $ne: true\n      }\n    });\n  },\n  /*\n  If you provide a `type` option when adding an alert, you can call this function\n  to later remove that alert.\n   */removeType: function (type) {\n    Alerts.collection_.remove({\n      \"options.type\": type\n    });\n  },\n  collection_: new Mongo.Collection(null)\n};\nmodule.export(\"default\", exports.default = Alerts);","map":{"version":3,"sources":["/imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js"],"names":["i18next","Mongo","Alerts","defaultOptions","dismissable","classes","autoHide","fadeIn","fadeOut","alertsLimit","html","placement","i18nKey","id","add","alertMessage","mode","alertOptions","a","message","options","t","_","defaults","type","collection_","findOne","update","_id","$set","count","find","sort","created","skip","forEach","row","remove","insert","seen","Date","removeSeen","$ne","removeType","Collection"],"mappings":"AAAA;;;;;;;;;;;G,AACA,AAAS,AAAa,AAEtB;AAGA,AAAS,AAEP;;;AAGgB,AAKd,AAAa,AAEb;;;AAPc,AAUd,AAAS,AAET;;OAGA,aAfc,AAeJ,AAEV;AAjBc,AAoBd,AAAQ,AAER;;gBAtBc,AAyBd,AAAS,AAET;AA3Bc,AA8Bd,AAAa,AAEb;;;AAhCc,AAmCd,AAAM,AAEN;;;AArCc,AA0Cd,AAAW,AAEX;;OAGA,SA/Cc,AA+CL,AAET;AAtDK,AAKS,AAoDd,AAAI,AAGN;;;;;aAQA,AAAK,AAAU,AAAc,AAAM,AAAc,AAC/C;AAD+C,AAC/C,AAAI,AACJ,AAAI,AAAU,AACd,AAAI,AAAU,AACd,AACA,AAAI,AAAW,AAAQ,AAAW,AAAQ,AAAY,AAAQ,AAAE,AAAQ,AAAU,AAChF;;;;kBAN6C,AAM7C,AAAU,AAAQ,AAAE,AAAQ,AAC7B,AACD;AACA,AAAU,AAAE,AAAS,AAAgB,AAAI,AAAO;;gBAEhD,AAAI,AAAQ,AAAM,AAChB;AAAA,AAAI,AAAO,AAAY,AAAQ,AAC7B,AAAgB,AAAQ;;WAE1B,AAAI,AAAG,AACL,AAAO,AAAY,AAAO,AAAE,AAAK,AAC/B;;AADF,AAAiC,AACzB,AACJ,AAAS,AACT,AAAM,AACN,AAAS,AAGb,AACD,AACF;;;;;;;QAED;QAAM,UAAN,AAAc,AAAO,AAAY,AAAK,AAAI;kBAC1C,cAAA,AAAI,AAAS,AAAQ,AAAa,AAChC;;QAAO,WAAP,AAAmB,QAAnB,AAAwB,AAAI,2DAC1B;AAAM,kCACJ;AADI,AACK,AAAC,MAFc,AAI1B;;;cAAM,EAAQ,SAAR,AAAsB,2BAJ9B,AAA4B,AAKzB,AAAQ,AAAU,AAAK,AACxB;;QAAO,cAAP,AAAmB,AAAO,AAAI,AAC/B;AAPD;gCASF;AADC;;UACM,GAAP,AAAmB,AAAO,AACxB;eADwB,AACf;AACH;AACG,qBAHe,AAIxB;AAJwB,AAIlB,kBACN;AAAS,AAAC,AAAI,qBA/GX,AA0GL,AAA0B,AAKd,AAEb,AAED;AAT4B,AAGxB;AADA;;;AAWJ,AAAY,AAAY,AACtB;;QAAO,QAAP,AAAmB,OAAnB,AAA0B,qBACxB;;QAAQ,SADgB,qBAExB;aAAkB;AACX;oBA3HJ,AAwHL,AAA0B,AAM3B;AAJqB;oCAMtB;AALM;;;AASN,AAAY,AAAU,AAAM,AAC1B;;WAAA,AAAO,YAAP,AAAmB;eAAnB,AAA0B,AACR;YAtIb,AAwIN;eACD;YAzIF,AAAS,AAyIM,AAAI,AAAM,AAAW;oBAGpC,AAAe;AAPe,AACxB;;;;;;;;;;;;;;;;;;;;;;AAjIJ,AAAgB,AAEd;OAbK,OAAT,WAAwB,QAAxB","file":"/imports/plugins/core/layout/client/templates/layout/alerts/inlineAlerts.js.map","sourcesContent":["import { i18next } from \"/client/api\";\nimport { Mongo } from \"meteor/mongo\";\n\n/*\n * Forked and modifed from https://github.com/asktomsk/bootstrap-alerts/\n */\nAlerts = {\n\n  /*\n  Default options. Can be overridden for application\n   */\n  defaultOptions: {\n\n    /*\n    Button with cross icon to hide (close) alert\n     */\n    dismissable: true,\n\n    /*\n    CSS classes to be appended on each alert DIV (use space for separator)\n     */\n    classes: \"\",\n\n    /*\n    Hide alert after delay in ms or false to infinity\n     */\n    autoHide: false,\n\n    /*\n    Time in ms before alert fully appears\n     */\n    fadeIn: 200,\n\n    /*\n    If autoHide enabled then fadeOut is time in ms before alert disappears\n     */\n    fadeOut: 3000,\n\n    /*\n    Amount of alerts to be displayed\n     */\n    alertsLimit: 3,\n\n    /*\n    Allows use HTML in messages\n     */\n    html: false,\n\n    /*\n     * define placement to only show where matches\n     * use: {{inlineAlerts placement=\"cart\"}}\n     * Alerts.add \"message\",\"danger\", placement:\"cart\"\n     */\n    placement: \"\",\n\n    /*\n    Translation key for i18n (translations collection)\n     */\n    i18nKey: \"\",\n\n    /*\n    unique id (for multiple message placements)\n     */\n    id: \"\"\n  },\n\n  /*\n  Add an alert\n\n  @param message (String) Text to display.\n  @param mode (String) One of bootstrap alerts types: success, info, warning, danger\n  @param options (Object) Options if required to override some of default ones.\n  See Alerts.defaultOptions for all values.\n   */\n  add: function (alertMessage, mode, alertOptions) {\n    let a;\n    let message = alertMessage;\n    let options = alertOptions;\n    // check options to see if we have translation\n    if (options && options.i18nKey && options.i18nKey !== i18next.t(options.i18nKey)) {\n      message = i18next.t(options.i18nKey);\n    }\n    // get default options\n    options = _.defaults(alertOptions || {}, Alerts.defaultOptions);\n\n    if (options.type) {\n      a = Alerts.collection_.findOne({\n        \"options.type\": options.type\n      });\n      if (a) {\n        Alerts.collection_.update(a._id, {\n          $set: {\n            message: message,\n            mode: mode,\n            options: options\n          }\n        });\n        return;\n      }\n    }\n\n    const count = Alerts.collection_.find({}).count();\n    if (count >= options.alertsLimit) {\n      Alerts.collection_.find({}, {\n        sort: {\n          created: -1\n        },\n        skip: options.alertsLimit - 1\n      }).forEach(function (row) {\n        Alerts.collection_.remove(row._id);\n      });\n    }\n    Alerts.collection_.insert({\n      message: message,\n      mode: mode,\n      options: options,\n      seen: false,\n      created: +new Date()\n    });\n  },\n\n  /*\n  Call this function before loading a new page to clear errors from previous page\n  Best way is using Router filtering feature to call this function\n   */\n  removeSeen: function () {\n    Alerts.collection_.remove({\n      \"seen\": true,\n      \"options.sticky\": {\n        $ne: true\n      }\n    });\n  },\n\n  /*\n  If you provide a `type` option when adding an alert, you can call this function\n  to later remove that alert.\n   */\n  removeType: function (type) {\n    Alerts.collection_.remove({\n      \"options.type\": type\n    });\n  },\n  collection_: new Mongo.Collection(null)\n};\n\nexport default Alerts;\n"]},"hash":"9d5c26e3caa10274bfaf7e71efe1d5748fb946d1"}
