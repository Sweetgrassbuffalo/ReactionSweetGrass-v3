{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/aldeed:template-extension/lib/template-instance-parent.js","filenameRelative":"/packages/aldeed:template-extension/lib/template-instance-parent.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/aldeed:template-extension/lib/template-instance-parent.js.map","sourceFileName":"/packages/aldeed:template-extension/lib/template-instance-parent.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"template-instance-parent"},"ignored":false,"code":"/**\n * @param selector Can be a height or a function.\n *        Height. The number of levels beyond the current template instance to look.\n *        Defaults to 0.\n *\n *        Function that is given a template as we traverse up the template true. It is passed the template\n *        currently being traversed. If it returns true, then that template is returned, otherwise next is used. This\n *        is done till we hit a template with no parent, in which case null is returned.\n * @param includeBlockHelpers True to include block helpers.\n * @returns {*}\n */Blaze.TemplateInstance.prototype.parent = function () {\n  function parent(selector, includeBlockHelpers) {\n    var template = null;\n\n    if (isFinite(selector) || !selector) {\n      // If height is null, undefined, or 0, we default to 1, the first parent.\n      var height = !selector ? 1 : selector;\n      template = parentByHeight.call(this, height, includeBlockHelpers);\n    } else if (typeof selector === 'function') {\n      template = parentByHeight.call(this, Number.MAX_VALUE, includeBlockHelpers, selector);\n    } else {\n      throw 'template:children Template.parent() is given an invalid selector type.';\n    }\n\n    return template;\n  }\n\n  return parent;\n}(); // Access parent template instance. \"height\" is the number of levels beyond the\n// current template instance to look. By default block helper template instances\n// are skipped, but if \"includeBlockHelpers\" is set to true, they are not.\n// See https://github.com/meteor/meteor/issues/3071\n\n\nfunction parentByHeight(height, includeBlockHelpers, selector) {\n  var i = 0;\n  var template = this;\n\n  while (i < height && template) {\n    var view = parentView(template.view, includeBlockHelpers); // We skip contentBlock views which are injected by Meteor when using\n    // block helpers (in addition to block helper view). This matches more\n    // the visual structure of templates and not the internal implementation.\n\n    while (view && (!view.template || view.name === '(contentBlock)' || view.name === '(elseBlock)')) {\n      view = parentView(view, includeBlockHelpers);\n    }\n\n    if (!view) return null; // Body view has template field, but not templateInstance,\n    // which more or less signals that we reached the top.\n\n    template = typeof view.templateInstance === 'function' ? view.templateInstance() : null;\n\n    if (!!selector && !!selector(template)) {\n      return template;\n    }\n\n    i++;\n  }\n\n  return template;\n}\n\nfunction parentView(view, includeBlockHelpers) {\n  if (includeBlockHelpers) return view.originalParentView || view.parentView;\n  return view.parentView;\n}","map":{"version":3,"sources":["/packages/aldeed:template-extension/lib/template-instance-parent.js"],"names":["Blaze","TemplateInstance","prototype","parent","selector","includeBlockHelpers","template","isFinite","height","parentByHeight","call","Number","MAX_VALUE","i","view","parentView","name","templateInstance","originalParentView"],"mappings":"AAAA;;;;;;;;;;GAWAA,MAAMC,gBAAN,CAAuBC,SAAvB,CAAiCC,MAAjC;AAA0C,WAASA,MAAT,CAAgBC,QAAhB,EAA0BC,mBAA1B,EAA+C;AACvF,QAAIC,WAAW,IAAf;;AACA,QAAIC,SAASH,QAAT,KAAsB,CAACA,QAA3B,EAAqC;AACnC;AACA,UAAMI,SAAS,CAACJ,QAAD,GAAY,CAAZ,GAAgBA,QAA/B;AACAE,iBAAWG,eAAeC,IAAf,CAAoB,IAApB,EAA0BF,MAA1B,EAAkCH,mBAAlC,CAAX;AACD,KAJD,MAIO,IAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AACzCE,iBAAWG,eAAeC,IAAf,CAAoB,IAApB,EAA0BC,OAAOC,SAAjC,EAA4CP,mBAA5C,EAAiED,QAAjE,CAAX;AACD,KAFM,MAEA;AACL,YAAM,wEAAN;AACD;;AAED,WAAOE,QAAP;AACD;;AAbD,SAAmDH,MAAnD;AAAA,I,CAeA;AACA;AACA;AACA;;;AACA,SAASM,cAAT,CAAwBD,MAAxB,EAAgCH,mBAAhC,EAAqDD,QAArD,EAA+D;AAC7D,MAAIS,IAAI,CAAR;AACA,MAAIP,WAAW,IAAf;;AACA,SAAOO,IAAIL,MAAJ,IAAcF,QAArB,EAA+B;AAC7B,QAAIQ,OAAOC,WAAWT,SAASQ,IAApB,EAA0BT,mBAA1B,CAAX,CAD6B,CAE7B;AACA;AACA;;AACA,WAAOS,SAAS,CAACA,KAAKR,QAAN,IAAkBQ,KAAKE,IAAL,KAAc,gBAAhC,IAAoDF,KAAKE,IAAL,KAAc,aAA3E,CAAP,EAAkG;AAChGF,aAAOC,WAAWD,IAAX,EAAiBT,mBAAjB,CAAP;AACD;;AACD,QAAI,CAACS,IAAL,EAAW,OAAO,IAAP,CARkB,CAU7B;AACA;;AACAR,eAAW,OAAOQ,KAAKG,gBAAZ,KAAiC,UAAjC,GAA8CH,KAAKG,gBAAL,EAA9C,GAAwE,IAAnF;;AAEA,QAAI,CAAC,CAACb,QAAF,IAAc,CAAC,CAACA,SAASE,QAAT,CAApB,EAAwC;AAAE,aAAOA,QAAP;AAAkB;;AAE5DO;AACD;;AACD,SAAOP,QAAP;AACD;;AAED,SAASS,UAAT,CAAoBD,IAApB,EAA0BT,mBAA1B,EAA+C;AAC7C,MAAIA,mBAAJ,EAAyB,OAAOS,KAAKI,kBAAL,IAA2BJ,KAAKC,UAAvC;AACzB,SAAOD,KAAKC,UAAZ;AACD","file":"/packages/aldeed:template-extension/lib/template-instance-parent.js.map","sourcesContent":["/**\n * @param selector Can be a height or a function.\n *        Height. The number of levels beyond the current template instance to look.\n *        Defaults to 0.\n *\n *        Function that is given a template as we traverse up the template true. It is passed the template\n *        currently being traversed. If it returns true, then that template is returned, otherwise next is used. This\n *        is done till we hit a template with no parent, in which case null is returned.\n * @param includeBlockHelpers True to include block helpers.\n * @returns {*}\n */\nBlaze.TemplateInstance.prototype.parent = function parent(selector, includeBlockHelpers) {\n  let template = null;\n  if (isFinite(selector) || !selector) {\n    // If height is null, undefined, or 0, we default to 1, the first parent.\n    const height = !selector ? 1 : selector;\n    template = parentByHeight.call(this, height, includeBlockHelpers);\n  } else if (typeof selector === 'function') {\n    template = parentByHeight.call(this, Number.MAX_VALUE, includeBlockHelpers, selector);\n  } else {\n    throw 'template:children Template.parent() is given an invalid selector type.';\n  }\n\n  return template;\n};\n\n// Access parent template instance. \"height\" is the number of levels beyond the\n// current template instance to look. By default block helper template instances\n// are skipped, but if \"includeBlockHelpers\" is set to true, they are not.\n// See https://github.com/meteor/meteor/issues/3071\nfunction parentByHeight(height, includeBlockHelpers, selector) {\n  var i = 0;\n  var template = this;\n  while (i < height && template) {\n    var view = parentView(template.view, includeBlockHelpers);\n    // We skip contentBlock views which are injected by Meteor when using\n    // block helpers (in addition to block helper view). This matches more\n    // the visual structure of templates and not the internal implementation.\n    while (view && (!view.template || view.name === '(contentBlock)' || view.name === '(elseBlock)')) {\n      view = parentView(view, includeBlockHelpers);\n    }\n    if (!view) return null;\n\n    // Body view has template field, but not templateInstance,\n    // which more or less signals that we reached the top.\n    template = typeof view.templateInstance === 'function' ? view.templateInstance() : null;\n\n    if (!!selector && !!selector(template)) { return template; }\n\n    i++;\n  }\n  return template;\n}\n\nfunction parentView(view, includeBlockHelpers) {\n  if (includeBlockHelpers) return view.originalParentView || view.parentView;\n  return view.parentView;\n}\n\n"]},"hash":"a2f9a1cffd1bdf71a82dedb70d8a30a7c14ccdf0"}
