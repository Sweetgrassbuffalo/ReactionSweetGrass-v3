{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["Match","check"],"specifiers":[{"kind":"named","imported":"Match","local":"Match"},{"kind":"named","imported":"check","local":"check"}]},{"source":"/lib/collections","imported":["Cart"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"}]},{"source":"../../lib/collections","imported":["Discounts"],"specifiers":[{"kind":"named","imported":"Discounts","local":"Discounts"}]},{"source":"../api","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Reaction"}]}],"exports":{"exported":["methods"],"specifiers":[{"kind":"local","local":"methods","exported":"methods"}]}}},"options":{"filename":"/imports/plugins/core/discounts/server/methods/methods.js","filenameRelative":"/imports/plugins/core/discounts/server/methods/methods.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/discounts/server/methods/methods.js"],"names":["Meteor","Match","check","Cart","Discounts","Reaction","methods","discountId","String","hasPermission","Error","direct","remove","_id","cartId","discountRate","discounts","Number","Optional","Array","update","$set","discount","transaction","userId","appliedAt","Date","findOne","$addToSet","transactions","selector","discountMethod","cart","Object","currentDiscount","billing","paymentMethod","id","calculation","processor","method","invoice","call"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAO,AAAa,AAC7B,AAAS,AAAY,AACrB,AAAS,AAAiB,AAC1B,AAAO,AAAc,AAErB,AACA,AACA,AACA,AAAO,AAAM,AAAU,AACrB;;AAKA,AAAwB,AAAU,AAAY,AAC5C,AAAM,AAAY,AAElB;;;;;AACI,AAAC,UAAS,YAAd,AAAK,AAAuB,AAAc,AACxC,AAAM,AAAI,AAAO,AAAM,AAAK,AAC7B,QAFD;;8CAIA;AAAO,gBAAU,OAAV,AAAiB,WAAjB,AAAwB,AAAE;AAdd,AAcnB,AAAO,AAAwB,AAAO,AACvC;;;WAED;;;AAQA,AAAqB,AAAU,AAAQ,AAAc,AAAW,AAC9D,AAAM,AAAQ,AACd,AAAM,AAAc,AACpB;;;;;;;KAAA,AAAM,AAAW,qBAAM,UAAN,AAAe,QAAhC,AAAiB,yBAEjB;UAAO,AAAK,QAAL,AAAY,AAAO,AAAQ,AAChC;UAAM,cACJ;UAAW,iBADP,SAAA,AAEJ,AAAU;;AAHd;mBAOF;;AArCqB,AAoCpB;AANQ,AAA2B;;AAcpC,AAAyB,AAAU,AAAQ,AAAY,AACrD,AAAM,AAAQ,AACd,AAAM,AAAY,AAElB,AAAM,AAAc,AAClB,AAAQ,AACR;;;;;;KAAQ,AAAO,yBAFG,AAEV;UACG,QAHO,AAGP,AAAI;AAPoC,AAIrD,AAKA,sBACA;QAAM,AAAW;AACV,cAAA,AAAU,AACf,AAAE;AAAK,qBADF,AACL;AACA,qBAAE,AAAW,AAAE;AAHjB,AAAiB,AAAU,AAAQ,AACnC,MAJE,CAMa,AAAgB;;qCAA7B;AAFK,AAGL,qBAAE;WAAU,AAAE;;;AAAgB,AAAS,sBAA3B;;;;iCAHd,AAAO,AAGL,AAEH;;;AA5DoB,AA6DrB;AAKA,AAAuB,AAAU,AAAM,AACrC;;;;KADqC,AACrC,AAAM,AAAM,uBAAS;yBADgB,AAGrC,AAAI,AAAkB,AACtB,AACA;;0BACA,GACA;;AACA;AAAA,AAAI,AAAQ,AAAK,AAAS,AACxB;;QAAK,QAAM,KAAX,AAAsB,SAAtB,AAA2B,AAAS,AAClC;AAAI,gCAAJ,AAA2B;AACzB;;;;;;;;;;;YADU;;YACJ,QAAW,eAAjB,AAAiB,AAAU,AAAQ,AAAQ,AAAc;iEACzD;;cAAI,YAAY,SAAhB,AAAyB,aAAa,AACpC;gBAAM,YAAY,QAAA,AAAQ,cAA1B,AAAwC,AACxC;gBAAM,cAAc,SAAA,AAAS,YAFO,AAEpC,AAAyC,AACzC,AACA,QACA;AACA;AACA;;AACA;;gBAAI,CAAC,QAAD,AAAS,WAAW,cAApB,AAAkC,UAAU,cAAhD,AAA8D,QAAQ,AACpE;AACA;iCAAmB,OAAA,AAAO,AAAM,oBAAY,AAAU,mBAAnC,AAAuC,AAAY,aAAG,KAAtD,AAA2D,KAAK,SAAnF,AAAmB,AAAyE,MAFxB,AAE6B,AAClG;AACF;AACF;AACF;AACF;;;WACD;AA9FG,AAAgB,AA8FnB,A,AAAO,AACR,AAGH;;;AACA,OAAA,AAAO,QAAP,AAAe","file":"/imports/plugins/core/discounts/server/methods/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Match, check } from \"meteor/check\";\nimport { Cart } from \"/lib/collections\";\nimport { Discounts } from \"../../lib/collections\";\nimport Reaction from \"../api\";\n\n//\n// make all discount methods available\n//\nexport const methods = {\n  /**\n   * discounts/deleteRate\n   * @param  {String} discountId discount id to delete\n   * @return {String} returns update/insert result\n   */\n  \"discounts/deleteRate\": function (discountId) {\n    check(discountId, String);\n\n    // check permissions to delete\n    if (!Reaction.hasPermission(\"discounts\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    return Discounts.direct.remove({ _id: discountId });\n  },\n\n  /**\n   * discounts/setRate\n   * update the cart discounts without hooks\n   * @param  {String} cartId cartId\n   * @param  {Number} discountRate discountRate\n   * @param  {Object} discounts discounts\n   * @return {Number} returns update result\n   */\n  \"discounts/setRate\": function (cartId, discountRate, discounts) {\n    check(cartId, String);\n    check(discountRate, Number);\n    check(discounts, Match.Optional(Array));\n\n    return Cart.direct.update(cartId, {\n      $set: {\n        discounts: discounts,\n        discount: discountRate\n      }\n    });\n  },\n  /**\n   * discounts/transaction\n   * applies a transaction to discounts for history\n   * @param  {String} cartId cartId\n   * @param  {String} discountId discountId\n   * @return {String} returns update result\n   */\n  \"discounts/transaction\": function (cartId, discountId) {\n    check(cartId, String);\n    check(discountId, String);\n\n    const transaction = {\n      cartId: cartId,\n      userId: Meteor.userId(),\n      appliedAt: new Date\n    };\n    // double duty validation, plus we need the method\n    const discount = Discounts.findOne(discountId);\n    return Discounts.update(\n      { _id: discountId },\n      { $addToSet: { transactions: transaction } },\n      { selector: { discountMethod: discount.discountMethod } }\n    );\n  },\n  /**\n   * discounts/calculate\n   * @param  {String} cart cartId\n   * @return {Object}  returns discount object\n   */\n  \"discounts/calculate\": function (cart) {\n    check(cart, Object); // Reaction.Schemas.Cart\n\n    let currentDiscount = 0;\n    // what's going on here?\n    // well, we're getting the real details of the discounts from\n    // the collection, because the publicly stored cart\n    // paymentMethod doesn't quite have all of the pieces (intentionally)\n    if (cart && cart.billing) {\n      for (const billing of cart.billing) {\n        if (billing.paymentMethod) {\n          const discount = Discounts.findOne(billing.paymentMethod.id);\n          if (discount && discount.calculation) {\n            const processor = billing.paymentMethod.processor;\n            const calculation = discount.calculation.method;\n            // we're using processor/calculation\n            // as a convention that can be easily\n            // added in external discount methods\n            // example: discounts/codes/discount\n            // will also not reprocess invoiced orders\n            if (!billing.invoice && processor === \"code\" || processor === \"rate\") {\n              // discounts are additive, if we allow more than one.\n              currentDiscount += Meteor.call(`discounts/${processor}s/${calculation}`, cart._id, discount._id);// note the added s.\n            }\n          }\n        }\n      }\n    }\n    return currentDiscount;\n  }\n};\n\n// export methods to Meteor\nMeteor.methods(methods);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/discounts/server/methods/methods.js.map","sourceFileName":"/imports/plugins/core/discounts/server/methods/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  methods: function () {\n    return methods;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Match = void 0,\n    check = void 0;\nmodule.importSync(\"meteor/check\", {\n  Match: function (v) {\n    Match = v;\n  },\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar Cart = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  }\n}, 2);\nvar Discounts = void 0;\nmodule.importSync(\"../../lib/collections\", {\n  Discounts: function (v) {\n    Discounts = v;\n  }\n}, 3);\nvar Reaction = void 0;\nmodule.importSync(\"../api\", {\n  \"default\": function (v) {\n    Reaction = v;\n  }\n}, 4);\nvar methods = {\n  /**\n   * discounts/deleteRate\n   * @param  {String} discountId discount id to delete\n   * @return {String} returns update/insert result\n   */\"discounts/deleteRate\": function (discountId) {\n    check(discountId, String); // check permissions to delete\n\n    if (!Reaction.hasPermission(\"discounts\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    return Discounts.direct.remove({\n      _id: discountId\n    });\n  },\n  /**\n   * discounts/setRate\n   * update the cart discounts without hooks\n   * @param  {String} cartId cartId\n   * @param  {Number} discountRate discountRate\n   * @param  {Object} discounts discounts\n   * @return {Number} returns update result\n   */\"discounts/setRate\": function (cartId, discountRate, discounts) {\n    check(cartId, String);\n    check(discountRate, Number);\n    check(discounts, Match.Optional(Array));\n    return Cart.direct.update(cartId, {\n      $set: {\n        discounts: discounts,\n        discount: discountRate\n      }\n    });\n  },\n  /**\n   * discounts/transaction\n   * applies a transaction to discounts for history\n   * @param  {String} cartId cartId\n   * @param  {String} discountId discountId\n   * @return {String} returns update result\n   */\"discounts/transaction\": function (cartId, discountId) {\n    check(cartId, String);\n    check(discountId, String);\n    var transaction = {\n      cartId: cartId,\n      userId: Meteor.userId(),\n      appliedAt: new Date()\n    }; // double duty validation, plus we need the method\n\n    var discount = Discounts.findOne(discountId);\n    return Discounts.update({\n      _id: discountId\n    }, {\n      $addToSet: {\n        transactions: transaction\n      }\n    }, {\n      selector: {\n        discountMethod: discount.discountMethod\n      }\n    });\n  },\n  /**\n   * discounts/calculate\n   * @param  {String} cart cartId\n   * @return {Object}  returns discount object\n   */\"discounts/calculate\": function (cart) {\n    check(cart, Object); // Reaction.Schemas.Cart\n\n    var currentDiscount = 0; // what's going on here?\n    // well, we're getting the real details of the discounts from\n    // the collection, because the publicly stored cart\n    // paymentMethod doesn't quite have all of the pieces (intentionally)\n\n    if (cart && cart.billing) {\n      for (var _iterator = cart.billing, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var billing = _ref;\n\n        if (billing.paymentMethod) {\n          var discount = Discounts.findOne(billing.paymentMethod.id);\n\n          if (discount && discount.calculation) {\n            var processor = billing.paymentMethod.processor;\n            var calculation = discount.calculation.method; // we're using processor/calculation\n            // as a convention that can be easily\n            // added in external discount methods\n            // example: discounts/codes/discount\n            // will also not reprocess invoiced orders\n\n            if (!billing.invoice && processor === \"code\" || processor === \"rate\") {\n              // discounts are additive, if we allow more than one.\n              currentDiscount += Meteor.call(\"discounts/\" + processor + \"s/\" + calculation, cart._id, discount._id); // note the added s.\n            }\n          }\n        }\n      }\n    }\n\n    return currentDiscount;\n  }\n};\n// export methods to Meteor\nMeteor.methods(methods);","map":{"version":3,"sources":["/imports/plugins/core/discounts/server/methods/methods.js"],"names":["Meteor","Match","check","Cart","Discounts","Reaction","methods","discountId","String","hasPermission","Error","direct","remove","_id","cartId","discountRate","discounts","Number","Optional","Array","update","$set","discount","transaction","userId","appliedAt","Date","findOne","$addToSet","transactions","selector","discountMethod","cart","Object","currentDiscount","billing","paymentMethod","id","calculation","processor","method","invoice","call"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAO,AAAa,AAC7B,AAAS,AAAY,AACrB,AAAS,AAAiB,AAC1B,AAAO,AAAc,AAErB,AACA,AACA,AACA,AAAO,AAAM,AAAU,AACrB;;AAKA,AAAwB,AAAU,AAAY,AAC5C,AAAM,AAAY,AAElB;;;;;AACI,AAAC,UAAS,YAAd,AAAK,AAAuB,AAAc,AACxC,AAAM,AAAI,AAAO,AAAM,AAAK,AAC7B,QAFD;;8CAIA;AAAO,gBAAU,OAAV,AAAiB,WAAjB,AAAwB,AAAE;AAdd,AAcnB,AAAO,AAAwB,AAAO,AACvC;;;WAED;;;AAQA,AAAqB,AAAU,AAAQ,AAAc,AAAW,AAC9D,AAAM,AAAQ,AACd,AAAM,AAAc,AACpB;;;;;;;KAAA,AAAM,AAAW,qBAAM,UAAN,AAAe,QAAhC,AAAiB,yBAEjB;UAAO,AAAK,QAAL,AAAY,AAAO,AAAQ,AAChC;UAAM,cACJ;UAAW,iBADP,SAAA,AAEJ,AAAU;;AAHd;mBAOF;;AArCqB,AAoCpB;AANQ,AAA2B;;AAcpC,AAAyB,AAAU,AAAQ,AAAY,AACrD,AAAM,AAAQ,AACd,AAAM,AAAY,AAElB,AAAM,AAAc,AAClB,AAAQ,AACR;;;;;;KAAQ,AAAO,yBAFG,AAEV;UACG,QAHO,AAGP,AAAI;AAPoC,AAIrD,AAKA,sBACA;QAAM,AAAW;AACV,cAAA,AAAU,AACf,AAAE;AAAK,qBADF,AACL;AACA,qBAAE,AAAW,AAAE;AAHjB,AAAiB,AAAU,AAAQ,AACnC,MAJE,CAMa,AAAgB;;qCAA7B;AAFK,AAGL,qBAAE;WAAU,AAAE;;;AAAgB,AAAS,sBAA3B;;;;iCAHd,AAAO,AAGL,AAEH;;;AA5DoB,AA6DrB;AAKA,AAAuB,AAAU,AAAM,AACrC;;;;KADqC,AACrC,AAAM,AAAM,uBAAS;yBADgB,AAGrC,AAAI,AAAkB,AACtB,AACA;;0BACA,GACA;;AACA;AAAA,AAAI,AAAQ,AAAK,AAAS,AACxB;;QAAK,QAAM,KAAX,AAAsB,SAAtB,AAA2B,AAAS,AAClC;AAAI,gCAAJ,AAA2B;AACzB;;;;;;;;;;;YADU;;YACJ,QAAW,eAAjB,AAAiB,AAAU,AAAQ,AAAQ,AAAc;iEACzD;;cAAI,YAAY,SAAhB,AAAyB,aAAa,AACpC;gBAAM,YAAY,QAAA,AAAQ,cAA1B,AAAwC,AACxC;gBAAM,cAAc,SAAA,AAAS,YAFO,AAEpC,AAAyC,AACzC,AACA,QACA;AACA;AACA;;AACA;;gBAAI,CAAC,QAAD,AAAS,WAAW,cAApB,AAAkC,UAAU,cAAhD,AAA8D,QAAQ,AACpE;AACA;iCAAmB,OAAA,AAAO,AAAM,oBAAY,AAAU,mBAAnC,AAAuC,AAAY,aAAG,KAAtD,AAA2D,KAAK,SAAnF,AAAmB,AAAyE,MAFxB,AAE6B,AAClG;AACF;AACF;AACF;AACF;;;WACD;AA9FG,AAAgB,AA8FnB,A,AAAO,AACR,AAGH;;;AACA,OAAA,AAAO,QAAP,AAAe","file":"/imports/plugins/core/discounts/server/methods/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Match, check } from \"meteor/check\";\nimport { Cart } from \"/lib/collections\";\nimport { Discounts } from \"../../lib/collections\";\nimport Reaction from \"../api\";\n\n//\n// make all discount methods available\n//\nexport const methods = {\n  /**\n   * discounts/deleteRate\n   * @param  {String} discountId discount id to delete\n   * @return {String} returns update/insert result\n   */\n  \"discounts/deleteRate\": function (discountId) {\n    check(discountId, String);\n\n    // check permissions to delete\n    if (!Reaction.hasPermission(\"discounts\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    return Discounts.direct.remove({ _id: discountId });\n  },\n\n  /**\n   * discounts/setRate\n   * update the cart discounts without hooks\n   * @param  {String} cartId cartId\n   * @param  {Number} discountRate discountRate\n   * @param  {Object} discounts discounts\n   * @return {Number} returns update result\n   */\n  \"discounts/setRate\": function (cartId, discountRate, discounts) {\n    check(cartId, String);\n    check(discountRate, Number);\n    check(discounts, Match.Optional(Array));\n\n    return Cart.direct.update(cartId, {\n      $set: {\n        discounts: discounts,\n        discount: discountRate\n      }\n    });\n  },\n  /**\n   * discounts/transaction\n   * applies a transaction to discounts for history\n   * @param  {String} cartId cartId\n   * @param  {String} discountId discountId\n   * @return {String} returns update result\n   */\n  \"discounts/transaction\": function (cartId, discountId) {\n    check(cartId, String);\n    check(discountId, String);\n\n    const transaction = {\n      cartId: cartId,\n      userId: Meteor.userId(),\n      appliedAt: new Date\n    };\n    // double duty validation, plus we need the method\n    const discount = Discounts.findOne(discountId);\n    return Discounts.update(\n      { _id: discountId },\n      { $addToSet: { transactions: transaction } },\n      { selector: { discountMethod: discount.discountMethod } }\n    );\n  },\n  /**\n   * discounts/calculate\n   * @param  {String} cart cartId\n   * @return {Object}  returns discount object\n   */\n  \"discounts/calculate\": function (cart) {\n    check(cart, Object); // Reaction.Schemas.Cart\n\n    let currentDiscount = 0;\n    // what's going on here?\n    // well, we're getting the real details of the discounts from\n    // the collection, because the publicly stored cart\n    // paymentMethod doesn't quite have all of the pieces (intentionally)\n    if (cart && cart.billing) {\n      for (const billing of cart.billing) {\n        if (billing.paymentMethod) {\n          const discount = Discounts.findOne(billing.paymentMethod.id);\n          if (discount && discount.calculation) {\n            const processor = billing.paymentMethod.processor;\n            const calculation = discount.calculation.method;\n            // we're using processor/calculation\n            // as a convention that can be easily\n            // added in external discount methods\n            // example: discounts/codes/discount\n            // will also not reprocess invoiced orders\n            if (!billing.invoice && processor === \"code\" || processor === \"rate\") {\n              // discounts are additive, if we allow more than one.\n              currentDiscount += Meteor.call(`discounts/${processor}s/${calculation}`, cart._id, discount._id);// note the added s.\n            }\n          }\n        }\n      }\n    }\n    return currentDiscount;\n  }\n};\n\n// export methods to Meteor\nMeteor.methods(methods);\n"]},"hash":"9252d7c6048a215dc4faa1bea13a574672758f08"}
