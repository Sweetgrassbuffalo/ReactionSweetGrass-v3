{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/server/api","imported":["Hooks","Logger"],"specifiers":[{"kind":"named","imported":"Hooks","local":"Hooks"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"/lib/collections","imported":["Products","Inventory"],"specifiers":[{"kind":"named","imported":"Products","local":"Products"},{"kind":"named","imported":"Inventory","local":"Inventory"}]},{"source":"../methods/inventory","imported":["registerInventory"],"specifiers":[{"kind":"named","imported":"registerInventory","local":"registerInventory"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/inventory/server/startup/init.js","filenameRelative":"/imports/plugins/included/inventory/server/startup/init.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/inventory/server/startup/init.js"],"names":["Hooks","Logger","Products","Inventory","registerInventory","Events","add","inventory","find","count","products","fetch","product","debug","title"],"mappings":"AAAA,IAAS;IAAT,AAAgB;AAAhB,OAA8B,WAA9B;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAT,AAAmB,AAAnB,AAAoC,AAApC,AACA,AAAS,AAAT,AAAkC,AAAlC,A,AAEA;AACA,AAAM,AAAN,AAAa,AAAb,AAAiB,AAAjB,AAAkC,AAAM;AACtC,8CACA;AAAM,AAAY,AAAU,AAAV,AAAiB,AAAjB,AAAlB;mCACA;;MAAI,CAAC,AAAL,WAAgB,AACd;QAAM,WAAW,SAAS,AAAT,OAAgB,AAAhB,AAAjB;;;AACA;;;;;;;;;;;;AAAK,aAAM,AAAX,AAAsB,AAAtB,AAAgC,uCAC9B;AAAO,AAAP,AAAc,wBAAsB,AAAQ,AAAM,AAAlD,AACA;AAAkB,AAAlB,AACD;AACF;AACF,AAVD","file":"/imports/plugins/included/inventory/server/startup/init.js.map","sourcesContent":["import { Hooks, Logger } from \"/server/api\";\nimport { Products, Inventory } from \"/lib/collections\";\nimport { registerInventory } from \"../methods/inventory\";\n\n// On first-time startup init the Inventory collection with entries for each product\nHooks.Events.add(\"afterCoreInit\", () => {\n  // If we already have any inventory record, skip\n  const inventory = Inventory.find().count();\n  if (!inventory) {\n    const products = Products.find().fetch();\n    for (const product of products) {\n      Logger.debug(`Registering product ${product.title}`);\n      registerInventory(product);\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/inventory/server/startup/init.js.map","sourceFileName":"/imports/plugins/included/inventory/server/startup/init.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"init"},"ignored":false,"code":"var Hooks = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Hooks: function (v) {\n    Hooks = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 0);\nvar Products = void 0,\n    Inventory = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Products: function (v) {\n    Products = v;\n  },\n  Inventory: function (v) {\n    Inventory = v;\n  }\n}, 1);\nvar registerInventory = void 0;\nmodule.importSync(\"../methods/inventory\", {\n  registerInventory: function (v) {\n    registerInventory = v;\n  }\n}, 2);\n// On first-time startup init the Inventory collection with entries for each product\nHooks.Events.add(\"afterCoreInit\", function () {\n  // If we already have any inventory record, skip\n  var inventory = Inventory.find().count();\n\n  if (!inventory) {\n    var products = Products.find().fetch();\n\n    for (var _iterator = products, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var product = _ref;\n      Logger.debug(\"Registering product \" + product.title);\n      registerInventory(product);\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/inventory/server/startup/init.js"],"names":["Hooks","Logger","Products","Inventory","registerInventory","Events","add","inventory","find","count","products","fetch","product","debug","title"],"mappings":"AAAA,IAAS;IAAT,AAAgB;AAAhB,OAA8B,WAA9B;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAT,AAAmB,AAAnB,AAAoC,AAApC,AACA,AAAS,AAAT,AAAkC,AAAlC,A,AAEA;AACA,AAAM,AAAN,AAAa,AAAb,AAAiB,AAAjB,AAAkC,AAAM;AACtC,8CACA;AAAM,AAAY,AAAU,AAAV,AAAiB,AAAjB,AAAlB;mCACA;;MAAI,CAAC,AAAL,WAAgB,AACd;QAAM,WAAW,SAAS,AAAT,OAAgB,AAAhB,AAAjB;;;AACA;;;;;;;;;;;;AAAK,aAAM,AAAX,AAAsB,AAAtB,AAAgC,uCAC9B;AAAO,AAAP,AAAc,wBAAsB,AAAQ,AAAM,AAAlD,AACA;AAAkB,AAAlB,AACD;AACF;AACF,AAVD","file":"/imports/plugins/included/inventory/server/startup/init.js.map","sourcesContent":["import { Hooks, Logger } from \"/server/api\";\nimport { Products, Inventory } from \"/lib/collections\";\nimport { registerInventory } from \"../methods/inventory\";\n\n// On first-time startup init the Inventory collection with entries for each product\nHooks.Events.add(\"afterCoreInit\", () => {\n  // If we already have any inventory record, skip\n  const inventory = Inventory.find().count();\n  if (!inventory) {\n    const products = Products.find().fetch();\n    for (const product of products) {\n      Logger.debug(`Registering product ${product.title}`);\n      registerInventory(product);\n    }\n  }\n});\n"]},"hash":"b4ac24858e1a8d69d3574a6a05b2316313dbadb0"}
