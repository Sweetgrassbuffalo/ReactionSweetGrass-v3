{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"classnames","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classnames"}]},{"source":"./button.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Button"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["Translation"],"specifiers":[{"kind":"named","imported":"Translation","local":"Translation"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui/client/components/button/buttonSelect.js","filenameRelative":"/imports/plugins/core/ui/client/components/button/buttonSelect.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/components/button/buttonSelect.js"],"names":["React","Component","PropTypes","classnames","Button","Translation","ButtonSelect","buttons","array","currentButton","node","defaultButton","object","defaultNonActiveButtons","nonActiveButtons","state","toggle","activeButton","defaultBgClassNames","toggleIcon","toggleClassNames","componentWillMount","handleDefaultState","props","filter","button","active","bgColor","undefined","eventAction","status","name","i18nKeyLabel","buttonType","setState","filterButtons","handleToggle","className","handleButtonChange","render","map","key"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/button/buttonSelect.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport classnames from \"classnames\";\nimport Button from \"./button.jsx\";\nimport { Translation } from \"/imports/plugins/core/ui/client/components\";\n\nclass ButtonSelect extends Component {\n  static PropTypes = {\n    buttons: PropTypes.array,\n    currentButton: PropTypes.node,\n    defaultButton: PropTypes.object,\n    defaultNonActiveButtons: PropTypes.array,\n    nonActiveButtons: PropTypes.array\n  }\n\n  state = {\n    toggle: \"hidden\",\n    currentButton: {},\n    buttons: [],\n    activeButton: \"\",\n    nonActiveButtons: [],\n    defaultBgClassNames: \"\",\n    toggleIcon: classnames({ \"fa\": true, \"fa-chevron-down\": true, \"text-center\": true, \"fa-icon\": true }),\n    toggleClassNames: classnames({ \"button-dropdown\": true, \"hidden\": true })\n  }\n\n  componentWillMount() {\n    this.handleDefaultState();\n  }\n\n  handleDefaultState = () => {\n    const props = this.props;\n    let defaultButton = props.buttons.filter(button => {\n      if (button.active === true) {\n        return button;\n      }\n    });\n    defaultButton = defaultButton[0];\n\n    const defaultBgClassNames = classnames({ \"button-select\": true, [defaultButton.bgColor]: true });\n\n    const defaultNonActiveButtons = props.buttons.filter(button => {\n      if (button.active === false || button.active === undefined) {\n        return button;\n      }\n    });\n    const currentButton = (\n      <Button\n        eventAction={defaultButton.eventAction}\n        status={defaultButton.status}\n        bezelStyle=\"solid\"\n        label={defaultButton.name}\n        i18nKeyLabel={defaultButton.i18nKeyLabel}\n        buttonType={defaultButton.buttonType}\n      />\n    );\n\n    return this.setState({\n      currentButton,\n      defaultBgClassNames,\n      buttons: props.buttons,\n      nonActiveButtons: defaultNonActiveButtons\n    });\n  }\n\n  filterButtons = () => {\n    const { activeButton, buttons } = this.state;\n\n    const nonActiveButtons = buttons.filter(button => {\n      if (button.name !== activeButton) {\n        return button;\n      }\n    });\n    return this.setState({ nonActiveButtons });\n  }\n\n  handleToggle = () => {\n    const { toggle } = this.state;\n    let className;\n\n    if (toggle === \"hidden\") {\n      className = classnames({ \"button-dropdown\": true, \"hidden\": false });\n      return this.setState({ toggle: \"show\",\n        toggleClassNames: className,\n        toggleIcon: classnames({ \"fa\": true, \"fa-chevron-up\": true, \"text-center\": true, \"fa-icon\": true })\n      });\n    }\n\n    className = classnames({ \"button-dropdown\": true, \"hidden\": true });\n    return this.setState({ toggle: \"hidden\",\n      toggleClassNames: className,\n      toggleIcon: classnames({ \"fa\": true, \"fa-chevron-down\": true, \"text-center\": true, \"fa-icon\": true })\n    });\n  }\n\n  handleButtonChange = (button) => {\n    const currentButton = (\n      <Button\n        eventAction={button.eventAction}\n        status={button.status}\n        bezelStyle=\"solid\"\n        label={button.name}\n        i18nKeyLabel={button.i18nKeyLabel}\n        buttonType={button.buttonType}\n      />\n    );\n\n    this.handleToggle();\n\n    return this.setState({\n      currentButton: currentButton,\n      defaultBgClassNames: classnames({ \"button-select\": true, [button.bgColor]: true }),\n      activeButton: button.name\n    }, () => {\n      this.filterButtons();\n    });\n  }\n\n  render() {\n    const { toggleClassNames, nonActiveButtons, defaultBgClassNames, toggleIcon, currentButton } = this.state;\n    return (\n      <div className={defaultBgClassNames}>\n        <div className=\"button-group\">\n          {currentButton}\n          <div className=\"button-toggle\" onClick={this.handleToggle}>\n            <i className={toggleIcon} aria-hidden=\"true\" />\n          </div>\n        </div>\n        <div className={toggleClassNames}>\n          {nonActiveButtons.map((button, key) => {\n            return (\n              <button\n                className=\"btn button-item\" key={key}\n                type=\"button\"\n                onClick={() => this.handleButtonChange(button)}\n              >\n                <Translation defaultValue={button.name} i18nKey={button.i18nKeyLabel} />\n              </button>);\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ButtonSelect;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/components/button/buttonSelect.js.map","sourceFileName":"/imports/plugins/core/ui/client/components/button/buttonSelect.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"buttonSelect"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar classnames = void 0;\nmodule.importSync(\"classnames\", {\n  \"default\": function (v) {\n    classnames = v;\n  }\n}, 1);\nvar Button = void 0;\nmodule.importSync(\"./button.jsx\", {\n  \"default\": function (v) {\n    Button = v;\n  }\n}, 2);\nvar Translation = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  Translation: function (v) {\n    Translation = v;\n  }\n}, 3);\n\nvar ButtonSelect = function (_Component) {\n  (0, _inherits3.default)(ButtonSelect, _Component);\n\n  function ButtonSelect() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, ButtonSelect);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      toggle: \"hidden\",\n      currentButton: {},\n      buttons: [],\n      activeButton: \"\",\n      nonActiveButtons: [],\n      defaultBgClassNames: \"\",\n      toggleIcon: classnames({\n        \"fa\": true,\n        \"fa-chevron-down\": true,\n        \"text-center\": true,\n        \"fa-icon\": true\n      }),\n      toggleClassNames: classnames({\n        \"button-dropdown\": true,\n        \"hidden\": true\n      })\n    }, _this.handleDefaultState = function () {\n      var _classnames;\n\n      var props = _this.props;\n      var defaultButton = props.buttons.filter(function (button) {\n        if (button.active === true) {\n          return button;\n        }\n      });\n      defaultButton = defaultButton[0];\n      var defaultBgClassNames = classnames((_classnames = {\n        \"button-select\": true\n      }, _classnames[defaultButton.bgColor] = true, _classnames));\n      var defaultNonActiveButtons = props.buttons.filter(function (button) {\n        if (button.active === false || button.active === undefined) {\n          return button;\n        }\n      });\n      var currentButton = React.createElement(Button, {\n        eventAction: defaultButton.eventAction,\n        status: defaultButton.status,\n        bezelStyle: \"solid\",\n        label: defaultButton.name,\n        i18nKeyLabel: defaultButton.i18nKeyLabel,\n        buttonType: defaultButton.buttonType\n      });\n      return _this.setState({\n        currentButton: currentButton,\n        defaultBgClassNames: defaultBgClassNames,\n        buttons: props.buttons,\n        nonActiveButtons: defaultNonActiveButtons\n      });\n    }, _this.filterButtons = function () {\n      var _this$state = _this.state,\n          activeButton = _this$state.activeButton,\n          buttons = _this$state.buttons;\n      var nonActiveButtons = buttons.filter(function (button) {\n        if (button.name !== activeButton) {\n          return button;\n        }\n      });\n      return _this.setState({\n        nonActiveButtons: nonActiveButtons\n      });\n    }, _this.handleToggle = function () {\n      var toggle = _this.state.toggle;\n      var className = void 0;\n\n      if (toggle === \"hidden\") {\n        className = classnames({\n          \"button-dropdown\": true,\n          \"hidden\": false\n        });\n        return _this.setState({\n          toggle: \"show\",\n          toggleClassNames: className,\n          toggleIcon: classnames({\n            \"fa\": true,\n            \"fa-chevron-up\": true,\n            \"text-center\": true,\n            \"fa-icon\": true\n          })\n        });\n      }\n\n      className = classnames({\n        \"button-dropdown\": true,\n        \"hidden\": true\n      });\n      return _this.setState({\n        toggle: \"hidden\",\n        toggleClassNames: className,\n        toggleIcon: classnames({\n          \"fa\": true,\n          \"fa-chevron-down\": true,\n          \"text-center\": true,\n          \"fa-icon\": true\n        })\n      });\n    }, _this.handleButtonChange = function (button) {\n      var _classnames2;\n\n      var currentButton = React.createElement(Button, {\n        eventAction: button.eventAction,\n        status: button.status,\n        bezelStyle: \"solid\",\n        label: button.name,\n        i18nKeyLabel: button.i18nKeyLabel,\n        buttonType: button.buttonType\n      });\n\n      _this.handleToggle();\n\n      return _this.setState({\n        currentButton: currentButton,\n        defaultBgClassNames: classnames((_classnames2 = {\n          \"button-select\": true\n        }, _classnames2[button.bgColor] = true, _classnames2)),\n        activeButton: button.name\n      }, function () {\n        _this.filterButtons();\n      });\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  ButtonSelect.prototype.componentWillMount = function () {\n    function componentWillMount() {\n      this.handleDefaultState();\n    }\n\n    return componentWillMount;\n  }();\n\n  ButtonSelect.prototype.render = function () {\n    function render() {\n      var _this2 = this;\n\n      var _state = this.state,\n          toggleClassNames = _state.toggleClassNames,\n          nonActiveButtons = _state.nonActiveButtons,\n          defaultBgClassNames = _state.defaultBgClassNames,\n          toggleIcon = _state.toggleIcon,\n          currentButton = _state.currentButton;\n      return React.createElement(\n        \"div\",\n        {\n          className: defaultBgClassNames\n        },\n        React.createElement(\n          \"div\",\n          {\n            className: \"button-group\"\n          },\n          currentButton,\n          React.createElement(\n            \"div\",\n            {\n              className: \"button-toggle\",\n              onClick: this.handleToggle\n            },\n            React.createElement(\"i\", {\n              className: toggleIcon,\n              \"aria-hidden\": \"true\"\n            })\n          )\n        ),\n        React.createElement(\n          \"div\",\n          {\n            className: toggleClassNames\n          },\n          nonActiveButtons.map(function (button, key) {\n            return React.createElement(\n              \"button\",\n              {\n                className: \"btn button-item\",\n                key: key,\n                type: \"button\",\n                onClick: function () {\n                  return _this2.handleButtonChange(button);\n                }\n              },\n              React.createElement(Translation, {\n                defaultValue: button.name,\n                i18nKey: button.i18nKeyLabel\n              })\n            );\n          })\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return ButtonSelect;\n}(Component);\n\nButtonSelect.PropTypes = {\n  buttons: PropTypes.array,\n  currentButton: PropTypes.node,\n  defaultButton: PropTypes.object,\n  defaultNonActiveButtons: PropTypes.array,\n  nonActiveButtons: PropTypes.array\n};\nmodule.export(\"default\", exports.default = ButtonSelect);","map":{"version":3,"sources":["/imports/plugins/core/ui/client/components/button/buttonSelect.js"],"names":["React","Component","PropTypes","classnames","Button","Translation","ButtonSelect","buttons","array","currentButton","node","defaultButton","object","defaultNonActiveButtons","nonActiveButtons","state","toggle","activeButton","defaultBgClassNames","toggleIcon","toggleClassNames","componentWillMount","handleDefaultState","props","filter","button","active","bgColor","undefined","eventAction","status","name","i18nKeyLabel","buttonType","setState","filterButtons","handleToggle","className","handleButtonChange","render","map","key"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/button/buttonSelect.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport classnames from \"classnames\";\nimport Button from \"./button.jsx\";\nimport { Translation } from \"/imports/plugins/core/ui/client/components\";\n\nclass ButtonSelect extends Component {\n  static PropTypes = {\n    buttons: PropTypes.array,\n    currentButton: PropTypes.node,\n    defaultButton: PropTypes.object,\n    defaultNonActiveButtons: PropTypes.array,\n    nonActiveButtons: PropTypes.array\n  }\n\n  state = {\n    toggle: \"hidden\",\n    currentButton: {},\n    buttons: [],\n    activeButton: \"\",\n    nonActiveButtons: [],\n    defaultBgClassNames: \"\",\n    toggleIcon: classnames({ \"fa\": true, \"fa-chevron-down\": true, \"text-center\": true, \"fa-icon\": true }),\n    toggleClassNames: classnames({ \"button-dropdown\": true, \"hidden\": true })\n  }\n\n  componentWillMount() {\n    this.handleDefaultState();\n  }\n\n  handleDefaultState = () => {\n    const props = this.props;\n    let defaultButton = props.buttons.filter(button => {\n      if (button.active === true) {\n        return button;\n      }\n    });\n    defaultButton = defaultButton[0];\n\n    const defaultBgClassNames = classnames({ \"button-select\": true, [defaultButton.bgColor]: true });\n\n    const defaultNonActiveButtons = props.buttons.filter(button => {\n      if (button.active === false || button.active === undefined) {\n        return button;\n      }\n    });\n    const currentButton = (\n      <Button\n        eventAction={defaultButton.eventAction}\n        status={defaultButton.status}\n        bezelStyle=\"solid\"\n        label={defaultButton.name}\n        i18nKeyLabel={defaultButton.i18nKeyLabel}\n        buttonType={defaultButton.buttonType}\n      />\n    );\n\n    return this.setState({\n      currentButton,\n      defaultBgClassNames,\n      buttons: props.buttons,\n      nonActiveButtons: defaultNonActiveButtons\n    });\n  }\n\n  filterButtons = () => {\n    const { activeButton, buttons } = this.state;\n\n    const nonActiveButtons = buttons.filter(button => {\n      if (button.name !== activeButton) {\n        return button;\n      }\n    });\n    return this.setState({ nonActiveButtons });\n  }\n\n  handleToggle = () => {\n    const { toggle } = this.state;\n    let className;\n\n    if (toggle === \"hidden\") {\n      className = classnames({ \"button-dropdown\": true, \"hidden\": false });\n      return this.setState({ toggle: \"show\",\n        toggleClassNames: className,\n        toggleIcon: classnames({ \"fa\": true, \"fa-chevron-up\": true, \"text-center\": true, \"fa-icon\": true })\n      });\n    }\n\n    className = classnames({ \"button-dropdown\": true, \"hidden\": true });\n    return this.setState({ toggle: \"hidden\",\n      toggleClassNames: className,\n      toggleIcon: classnames({ \"fa\": true, \"fa-chevron-down\": true, \"text-center\": true, \"fa-icon\": true })\n    });\n  }\n\n  handleButtonChange = (button) => {\n    const currentButton = (\n      <Button\n        eventAction={button.eventAction}\n        status={button.status}\n        bezelStyle=\"solid\"\n        label={button.name}\n        i18nKeyLabel={button.i18nKeyLabel}\n        buttonType={button.buttonType}\n      />\n    );\n\n    this.handleToggle();\n\n    return this.setState({\n      currentButton: currentButton,\n      defaultBgClassNames: classnames({ \"button-select\": true, [button.bgColor]: true }),\n      activeButton: button.name\n    }, () => {\n      this.filterButtons();\n    });\n  }\n\n  render() {\n    const { toggleClassNames, nonActiveButtons, defaultBgClassNames, toggleIcon, currentButton } = this.state;\n    return (\n      <div className={defaultBgClassNames}>\n        <div className=\"button-group\">\n          {currentButton}\n          <div className=\"button-toggle\" onClick={this.handleToggle}>\n            <i className={toggleIcon} aria-hidden=\"true\" />\n          </div>\n        </div>\n        <div className={toggleClassNames}>\n          {nonActiveButtons.map((button, key) => {\n            return (\n              <button\n                className=\"btn button-item\" key={key}\n                type=\"button\"\n                onClick={() => this.handleButtonChange(button)}\n              >\n                <Translation defaultValue={button.name} i18nKey={button.i18nKeyLabel} />\n              </button>);\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ButtonSelect;\n"]},"hash":"06c5d1d6ada2eae3b10f77b1be18f7ca0ec9767c"}
