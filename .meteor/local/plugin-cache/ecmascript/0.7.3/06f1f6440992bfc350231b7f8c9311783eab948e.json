{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"sortablejs","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Sortable"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui/client/components/tags/tagList.js","filenameRelative":"/imports/plugins/core/ui/client/components/tags/tagList.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/components/tags/tagList.js"],"names":["Sortable","Template","tagList","onCreated","moveItem","array","fromIndex","toIndex","splice","onRendered","instance","list","$","_sortable","create","group","draggable","onSort","event","tagIds","data","tags","map","item","_id","newTagsOrder","oldIndex","newIndex","onTagSort","parentTag","onAdd","toListId","to","dataset","id","movedTagId","onTagDragAdd","onRemove","onTagRemove","foundTag","_","find","tag","helpers","isEditing","tagProps","isSelected","selectedTag","selectable","controls","onTagSelect","tagToRemove","onTagCreate","onTagUpdate","tagId","tagName","tagBlankProps","blank"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/tags/tagList.js.map","sourcesContent":["import Sortable from \"sortablejs\";\n\nTemplate.tagList.onCreated(function () {\n  this.moveItem = (array, fromIndex, toIndex) => {\n    array.splice(toIndex, 0, array.splice(fromIndex, 1)[0]);\n\n    return array;\n  };\n});\n\nTemplate.tagList.onRendered(() => {\n  const instance = Template.instance();\n  const list = instance.$(\".rui.tags\")[0];\n\n  instance._sortable = Sortable.create(list, {\n    group: \"tags\",\n    draggable: \".rui.item.draggable\",\n    // filter: \".rui.tag.edit.create\",\n    onSort(event) {\n      const tagIds = instance.data.tags.map(item => {\n        if (item) {\n          return item._id;\n        }\n      });\n\n      const newTagsOrder = instance.moveItem(tagIds, event.oldIndex, event.newIndex);\n\n      if (newTagsOrder) {\n        if (instance.data.onTagSort) {\n          instance.data.onTagSort(newTagsOrder, instance.data.parentTag);\n        }\n      }\n    },\n\n    // On add from another list\n    onAdd(event) {\n      const toListId = event.to.dataset.id;\n      const movedTagId = event.item.dataset.id;\n      const tagIds = instance.data.tags.map(item => {\n        if (item) {\n          return item._id;\n        }\n      });\n\n      if (instance.data.onTagDragAdd) {\n        instance.data.onTagDragAdd(movedTagId, toListId, event.newIndex, tagIds);\n      }\n    },\n\n    // Tag removed from list becuase it was dragged to a different list\n    onRemove(event) {\n      const movedTagId = event.item.dataset.id;\n\n      if (instance.data.onTagRemove) {\n        const foundTag = _.find(instance.data.tags, (tag) => {\n          return tag._id === movedTagId;\n        });\n\n        instance.data.onTagRemove(foundTag, instance.data.parentTag);\n      }\n    }\n  });\n});\n\nTemplate.tagList.helpers({\n  isEditing() {\n    return Template.instance().data.isEditing;\n  },\n\n  tagProps(tag) {\n    const instance = Template.instance();\n    let isSelected = false;\n    if (instance.data.selectedTag && tag) {\n      isSelected = instance.data.selectedTag._id === tag._id;\n    }\n\n    return {\n      tag,\n      isEditing: instance.data.isEditing,\n      selectable: instance.data.selectable,\n      controls: instance.data.controls,\n      isSelected,\n      onTagSelect: instance.data.onTagSelect,\n      onTagRemove(tagToRemove) {\n        // Pass the tag back up to the parent component for removal\n        // -- include the parent tag\n        if (instance.data.onTagCreate) {\n          instance.data.onTagRemove(tagToRemove, instance.data.parentTag);\n        }\n      },\n      onTagUpdate(tagId, tagName) {\n        // Pass the tagId and tagName back up to the parent component for updating\n        if (instance.data.onTagUpdate) {\n          instance.data.onTagUpdate(tagId, tagName);\n        }\n      }\n    };\n  },\n\n  /**\n   * Arguments (Props) to pass into the blank tag for creating new tags\n   * @return {Object} An object containing props\n   */\n  tagBlankProps() {\n    const instance = Template.instance();\n    return {\n      blank: true,\n      onTagCreate(tagName) {\n        if (instance.data.onTagCreate) {\n          instance.data.onTagCreate(tagName, instance.data.parentTag);\n        }\n      }\n    };\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/components/tags/tagList.js.map","sourceFileName":"/imports/plugins/core/ui/client/components/tags/tagList.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"tagList"},"ignored":false,"code":"var Sortable = void 0;\nmodule.importSync(\"sortablejs\", {\n  \"default\": function (v) {\n    Sortable = v;\n  }\n}, 0);\nTemplate.tagList.onCreated(function () {\n  this.moveItem = function (array, fromIndex, toIndex) {\n    array.splice(toIndex, 0, array.splice(fromIndex, 1)[0]);\n    return array;\n  };\n});\nTemplate.tagList.onRendered(function () {\n  var instance = Template.instance();\n  var list = instance.$(\".rui.tags\")[0];\n  instance._sortable = Sortable.create(list, {\n    group: \"tags\",\n    draggable: \".rui.item.draggable\",\n    // filter: \".rui.tag.edit.create\",\n    onSort: function (event) {\n      var tagIds = instance.data.tags.map(function (item) {\n        if (item) {\n          return item._id;\n        }\n      });\n      var newTagsOrder = instance.moveItem(tagIds, event.oldIndex, event.newIndex);\n\n      if (newTagsOrder) {\n        if (instance.data.onTagSort) {\n          instance.data.onTagSort(newTagsOrder, instance.data.parentTag);\n        }\n      }\n    },\n    // On add from another list\n    onAdd: function (event) {\n      var toListId = event.to.dataset.id;\n      var movedTagId = event.item.dataset.id;\n      var tagIds = instance.data.tags.map(function (item) {\n        if (item) {\n          return item._id;\n        }\n      });\n\n      if (instance.data.onTagDragAdd) {\n        instance.data.onTagDragAdd(movedTagId, toListId, event.newIndex, tagIds);\n      }\n    },\n    // Tag removed from list becuase it was dragged to a different list\n    onRemove: function (event) {\n      var movedTagId = event.item.dataset.id;\n\n      if (instance.data.onTagRemove) {\n        var foundTag = _.find(instance.data.tags, function (tag) {\n          return tag._id === movedTagId;\n        });\n\n        instance.data.onTagRemove(foundTag, instance.data.parentTag);\n      }\n    }\n  });\n});\nTemplate.tagList.helpers({\n  isEditing: function () {\n    return Template.instance().data.isEditing;\n  },\n  tagProps: function (tag) {\n    var instance = Template.instance();\n    var isSelected = false;\n\n    if (instance.data.selectedTag && tag) {\n      isSelected = instance.data.selectedTag._id === tag._id;\n    }\n\n    return {\n      tag: tag,\n      isEditing: instance.data.isEditing,\n      selectable: instance.data.selectable,\n      controls: instance.data.controls,\n      isSelected: isSelected,\n      onTagSelect: instance.data.onTagSelect,\n      onTagRemove: function (tagToRemove) {\n        // Pass the tag back up to the parent component for removal\n        // -- include the parent tag\n        if (instance.data.onTagCreate) {\n          instance.data.onTagRemove(tagToRemove, instance.data.parentTag);\n        }\n      },\n      onTagUpdate: function (tagId, tagName) {\n        // Pass the tagId and tagName back up to the parent component for updating\n        if (instance.data.onTagUpdate) {\n          instance.data.onTagUpdate(tagId, tagName);\n        }\n      }\n    };\n  },\n  /**\n   * Arguments (Props) to pass into the blank tag for creating new tags\n   * @return {Object} An object containing props\n   */tagBlankProps: function () {\n    var instance = Template.instance();\n    return {\n      blank: true,\n      onTagCreate: function (tagName) {\n        if (instance.data.onTagCreate) {\n          instance.data.onTagCreate(tagName, instance.data.parentTag);\n        }\n      }\n    };\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/ui/client/components/tags/tagList.js"],"names":["Sortable","Template","tagList","onCreated","moveItem","array","fromIndex","toIndex","splice","onRendered","instance","list","$","_sortable","create","group","draggable","onSort","event","tagIds","data","tags","map","item","_id","newTagsOrder","oldIndex","newIndex","onTagSort","parentTag","onAdd","toListId","to","dataset","id","movedTagId","onTagDragAdd","onRemove","onTagRemove","foundTag","_","find","tag","helpers","isEditing","tagProps","isSelected","selectedTag","selectable","controls","onTagSelect","tagToRemove","onTagCreate","onTagUpdate","tagId","tagName","tagBlankProps","blank"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/tags/tagList.js.map","sourcesContent":["import Sortable from \"sortablejs\";\n\nTemplate.tagList.onCreated(function () {\n  this.moveItem = (array, fromIndex, toIndex) => {\n    array.splice(toIndex, 0, array.splice(fromIndex, 1)[0]);\n\n    return array;\n  };\n});\n\nTemplate.tagList.onRendered(() => {\n  const instance = Template.instance();\n  const list = instance.$(\".rui.tags\")[0];\n\n  instance._sortable = Sortable.create(list, {\n    group: \"tags\",\n    draggable: \".rui.item.draggable\",\n    // filter: \".rui.tag.edit.create\",\n    onSort(event) {\n      const tagIds = instance.data.tags.map(item => {\n        if (item) {\n          return item._id;\n        }\n      });\n\n      const newTagsOrder = instance.moveItem(tagIds, event.oldIndex, event.newIndex);\n\n      if (newTagsOrder) {\n        if (instance.data.onTagSort) {\n          instance.data.onTagSort(newTagsOrder, instance.data.parentTag);\n        }\n      }\n    },\n\n    // On add from another list\n    onAdd(event) {\n      const toListId = event.to.dataset.id;\n      const movedTagId = event.item.dataset.id;\n      const tagIds = instance.data.tags.map(item => {\n        if (item) {\n          return item._id;\n        }\n      });\n\n      if (instance.data.onTagDragAdd) {\n        instance.data.onTagDragAdd(movedTagId, toListId, event.newIndex, tagIds);\n      }\n    },\n\n    // Tag removed from list becuase it was dragged to a different list\n    onRemove(event) {\n      const movedTagId = event.item.dataset.id;\n\n      if (instance.data.onTagRemove) {\n        const foundTag = _.find(instance.data.tags, (tag) => {\n          return tag._id === movedTagId;\n        });\n\n        instance.data.onTagRemove(foundTag, instance.data.parentTag);\n      }\n    }\n  });\n});\n\nTemplate.tagList.helpers({\n  isEditing() {\n    return Template.instance().data.isEditing;\n  },\n\n  tagProps(tag) {\n    const instance = Template.instance();\n    let isSelected = false;\n    if (instance.data.selectedTag && tag) {\n      isSelected = instance.data.selectedTag._id === tag._id;\n    }\n\n    return {\n      tag,\n      isEditing: instance.data.isEditing,\n      selectable: instance.data.selectable,\n      controls: instance.data.controls,\n      isSelected,\n      onTagSelect: instance.data.onTagSelect,\n      onTagRemove(tagToRemove) {\n        // Pass the tag back up to the parent component for removal\n        // -- include the parent tag\n        if (instance.data.onTagCreate) {\n          instance.data.onTagRemove(tagToRemove, instance.data.parentTag);\n        }\n      },\n      onTagUpdate(tagId, tagName) {\n        // Pass the tagId and tagName back up to the parent component for updating\n        if (instance.data.onTagUpdate) {\n          instance.data.onTagUpdate(tagId, tagName);\n        }\n      }\n    };\n  },\n\n  /**\n   * Arguments (Props) to pass into the blank tag for creating new tags\n   * @return {Object} An object containing props\n   */\n  tagBlankProps() {\n    const instance = Template.instance();\n    return {\n      blank: true,\n      onTagCreate(tagName) {\n        if (instance.data.onTagCreate) {\n          instance.data.onTagCreate(tagName, instance.data.parentTag);\n        }\n      }\n    };\n  }\n});\n"]},"hash":"06f1f6440992bfc350231b7f8c9311783eab948e"}
