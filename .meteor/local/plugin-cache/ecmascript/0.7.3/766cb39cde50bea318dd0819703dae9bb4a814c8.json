{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"later","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"later"}]},{"source":"moment","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"moment"}]},{"source":"/lib/collections","imported":["Accounts","Cart","Jobs"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"},{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Jobs","local":"Jobs"}]},{"source":"/server/api","imported":["Hooks","Logger","Reaction"],"specifiers":[{"kind":"named","imported":"Hooks","local":"Hooks"},{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/server/publications/collections/sessions","imported":["ServerSessions"],"specifiers":[{"kind":"named","imported":"ServerSessions","local":"ServerSessions"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/jobcontrol/server/jobs/cart.js","filenameRelative":"/imports/plugins/included/jobcontrol/server/jobs/cart.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/jobcontrol/server/jobs/cart.js"],"names":["later","moment","Accounts","Cart","Jobs","Hooks","Logger","Reaction","ServerSessions","Events","add","debug","settings","getShopSettings","cart","Job","priority","retry","retries","wait","backoff","repeat","schedule","parse","text","save","cancelRepeats","warn","getstaleCarts","olderThan","find","updatedAt","$lte","fetch","removeStaleCart","processJobs","pollInterval","workTimeout","job","callback","cleanupDurationDays","match","subtract","Number","_d","carts","forEach","user","findOne","_id","userId","emails","length","removeCart","remove","removeAccount","destroySession","sessionId","Meteor","users","success","done","repeatId","type","status","observe","added","trigger"],"mappings":"AAAA;AAAA,OAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAClB,AAAO,AAAY,AACnB,AAAS,AAAU,AAAM,AAAY,AACrC,AAAS,AAAO,AAAQ,AAAgB,AACxC,AAAS,AAAsB,AAG/B,AAAM,AAAO,AAAI,AAAiB,AAAM,AACtC,AAAO,AAAM;AACb,MAAM,WAAW,AAAS,6BAA1B,AAAiB;eACjB;AAAI,MAAS,WAAb,AAAmB,SACjB;;MAAA,AAAI,AAAI,SAAR,AAAc,MAAd,AAAqC,AAClC,AAAS,AACT,AAAM,AACL;YADK,AACI,6BACT,IAAM,SAFD,AAGL;eALJ,AAES,AAKN;AAPH,YAOU,AACN;AAAU,eAAA,AAAM,AAAM,cAR1B,AAOU,AACI,AAAiB,AAE5B,AAAK,AACJ;;AATK,AAGI,AAAc;iCAN7B,AAcC,AAAM,AACL;AAdA,AAUQ,AACW,OAGZ;qBAIX,A,AAtBA,AAoBC;AAFG,AAAY,AACb;;;;IAQH,AAAM,AAAgB,AAAC,AAAc,AACnC,AAAO,AAAK,AAAK,AAAE,AAAW,AAAE,AAAM;;;;;;AAA/B,AAAU,AAAoC,IAArD,AAAO,qCADT,AAEC;;;;;;AAED,AAAe,AAAM,AACnB,AAAM;;OAvCD,kBAAP,8BAuC0B,AAAK,AAAY,AAAuB,AAC9D;MAAc,AAAK,uBAD2C;;AAE9D;iBAAa,MAFS,AAAwC,AAE3C;AADW,GAAN,EAEvB,UAAA,AAAC,KAAD,AAAM,UAAa,AACpB;WAAA,AAAO,MAAP,AAAa,AACb;QAAM,WAAW,SAAjB,AAAiB,AAAS;;uBAC1B;AAAI,UAAJ,AAAa,4CAAM,cACjB;;UAAM,AAAY,YAAS,SAAT,AAAc,gBAAf,AAAoC,SAApC,KADA,AACjB,AAAiB,AAA0C,AAAM;;gCACjE;YAAM,QAAY,gBAAlB,AAAkB,AAAS,AAAS,AAAO,AAAS,AAAK,AAAQ;;oBACjE;;;YAAM,MAAQ;AACR,cAAN,AAAc,AAAQ;yBACpB;;AAAM,cAAO,AAAS,yBAAU;;oBAChC,AAAI,AAAC,AAAK,AAAO,AAAQ,AACvB,AAAM,AAAa,AAAK,AAAO,AAAE;AAFnC,AAAa,AAAiB,AAAO,AAAK,WAA7B,AAAiB;cAEa,AAAK;sBAAf;;AAA/B,AAAmB;;;aAJvB,AAAc,AAAc,AAC5B,CAII;;cAAM,cAAgB,AAAS,iBAAT,AACpB,gBACE;AAAK,gBAAK,UADZ,AAEE;mBAAQ,MAHU,AACpB;AADF;wBAMA;;AAAM,AAAiB,AAAe,AAAO,AAAE;eAAF,AAAO,AAAK;AAAzD,AAAuB;yBACvB;;cAAA,AAAO,AAAM,WAAb,AAAoB,AAAE;iBAAK,AAAK,MAAZ,AAAiB;mBAAQ;sBAAzB;;AATG,AASvB,AAAoD;AACpD;WAAA,AAAI,AAAc,AAAiB,AAAgB,AACjD;kBAAA,AAAM,AAAU,AAChB;AAAA,AAAO,AAAM,AACb;;AAAA,AAAI,AAAK,AAAS,AAAE;AAAF,AAAY;;UAEjC;AAfD,YAeO,AACL;AAHE,AACD;uBAEW,AAAU,AAAK;AAA3B,6BACA;AAAA,AAAM,AAAU,AAChB,AAAO,AAAM,AACb;AAHA,AAAK,AAAO,AAAE;AA7BxB,AACE,AAAwB,AAMtB,AAIE,AAqBI,AAAI,AAAK,AAAS,AAAE,AAAU,AAC/B,AACF,AACF,AAAM,AACL,AAAO,AAAK,AACb,AACD,AACD,AACD,AAAK,AAAK,AACR,AAAM,AACN,AAAQ,AACP,AAAQ,AACT,AAAQ,AACN,AAAO,AAAgB,AACxB,AAEJ","file":"/imports/plugins/included/jobcontrol/server/jobs/cart.js.map","sourcesContent":["import later from \"later\";\nimport moment from \"moment\";\nimport { Accounts, Cart, Jobs } from \"/lib/collections\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\nimport { ServerSessions } from \"/server/publications/collections/sessions\";\n\n\nHooks.Events.add(\"afterCoreInit\", () => {\n  Logger.debug(\"Adding Job removeStaleCart and Accounts to jobControl\");\n  const settings = Reaction.getShopSettings();\n  if (settings.cart) {\n    new Job(Jobs, \"cart/removeFromCart\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\" // delay by twice as long for each subsequent retry\n      })\n      .repeat({\n        schedule: later.parse.text(\"every day\")\n      })\n      .save({\n        cancelRepeats: true\n      });\n  } else {\n    Logger.warn(\"No cart cleanup schedule\");\n  }\n});\n\n/**\n * {Function} that fetches stale carts\n * @param {Object} olderThan older than date\n * @return {Object} stale carts\n */\nconst getstaleCarts = (olderThan) => {\n  return Cart.find({ updatedAt: { $lte: olderThan } }).fetch();\n};\n\nexport default () => {\n  const removeStaleCart = Jobs.processJobs(\"cart/removeFromCart\", {\n    pollInterval: 60 * 60 * 1000, // backup polling, see observer below\n    workTimeout: 180 * 1000\n  }, (job, callback) => {\n    Logger.debug(\"Processing cart/removeFromCart\");\n    const settings = Reaction.getShopSettings();\n    if (settings.cart) {\n      const schedule = (settings.cart.cleanupDurationDays).match(/\\d/);// configurable in shop settings\n      const olderThan = moment().subtract(Number(schedule[0]), \"days\")._d;\n      const carts = getstaleCarts(olderThan);\n      carts.forEach(cart => {\n        const user = Accounts.findOne({ _id: cart.userId });\n        if (!user.emails.length) {\n          const removeCart = Cart.remove({ userId: user._id });\n          const removeAccount = Accounts.remove(\n            {\n              _id: cart.userId,\n              emails: []\n            }\n          );\n          const destroySession = ServerSessions.remove({ _id: cart.sessionId });\n          Meteor.users.remove({ _id: user._id, emails: [] }); // clears out anonymous user\n          if (removeCart && removeAccount && destroySession) {\n            const success = \"Stale anonymous user cart and account successfully cleaned\";\n            Logger.debug(success);\n            job.done(success, { repeatId: true });\n          }\n        } else {\n          Cart.remove({ userId: user._id });\n          const success = \"Stale user cart successfully cleaned\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n        }\n      });\n    } else {\n      Logger.warn(\"No cart cleanup schedule\");\n    }\n    callback();\n  });\n  Jobs.find({\n    type: \"cart/removeFromCart\",\n    status: \"ready\"\n  }).observe({\n    added() {\n      return removeStaleCart.trigger();\n    }\n  });\n};\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/jobcontrol/server/jobs/cart.js.map","sourceFileName":"/imports/plugins/included/jobcontrol/server/jobs/cart.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"cart"},"ignored":false,"code":"var later = void 0;\nmodule.importSync(\"later\", {\n  \"default\": function (v) {\n    later = v;\n  }\n}, 0);\nvar moment = void 0;\nmodule.importSync(\"moment\", {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 1);\nvar Accounts = void 0,\n    Cart = void 0,\n    Jobs = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Accounts: function (v) {\n    Accounts = v;\n  },\n  Cart: function (v) {\n    Cart = v;\n  },\n  Jobs: function (v) {\n    Jobs = v;\n  }\n}, 2);\nvar Hooks = void 0,\n    Logger = void 0,\n    Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Hooks: function (v) {\n    Hooks = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 3);\nvar ServerSessions = void 0;\nmodule.importSync(\"/server/publications/collections/sessions\", {\n  ServerSessions: function (v) {\n    ServerSessions = v;\n  }\n}, 4);\nHooks.Events.add(\"afterCoreInit\", function () {\n  Logger.debug(\"Adding Job removeStaleCart and Accounts to jobControl\");\n  var settings = Reaction.getShopSettings();\n\n  if (settings.cart) {\n    new Job(Jobs, \"cart/removeFromCart\", {}).priority(\"normal\").retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\" // delay by twice as long for each subsequent retry\n\n    }).repeat({\n      schedule: later.parse.text(\"every day\")\n    }).save({\n      cancelRepeats: true\n    });\n  } else {\n    Logger.warn(\"No cart cleanup schedule\");\n  }\n}); /**\n     * {Function} that fetches stale carts\n     * @param {Object} olderThan older than date\n     * @return {Object} stale carts\n     */\n\nvar getstaleCarts = function (olderThan) {\n  return Cart.find({\n    updatedAt: {\n      $lte: olderThan\n    }\n  }).fetch();\n};\n\nmodule.export(\"default\", exports.default = function () {\n  var removeStaleCart = Jobs.processJobs(\"cart/removeFromCart\", {\n    pollInterval: 60 * 60 * 1000,\n    // backup polling, see observer below\n    workTimeout: 180 * 1000\n  }, function (job, callback) {\n    Logger.debug(\"Processing cart/removeFromCart\");\n    var settings = Reaction.getShopSettings();\n\n    if (settings.cart) {\n      var schedule = settings.cart.cleanupDurationDays.match(/\\d/); // configurable in shop settings\n\n      var olderThan = moment().subtract(Number(schedule[0]), \"days\")._d;\n\n      var carts = getstaleCarts(olderThan);\n      carts.forEach(function (cart) {\n        var user = Accounts.findOne({\n          _id: cart.userId\n        });\n\n        if (!user.emails.length) {\n          var removeCart = Cart.remove({\n            userId: user._id\n          });\n          var removeAccount = Accounts.remove({\n            _id: cart.userId,\n            emails: []\n          });\n          var destroySession = ServerSessions.remove({\n            _id: cart.sessionId\n          });\n          Meteor.users.remove({\n            _id: user._id,\n            emails: []\n          }); // clears out anonymous user\n\n          if (removeCart && removeAccount && destroySession) {\n            var success = \"Stale anonymous user cart and account successfully cleaned\";\n            Logger.debug(success);\n            job.done(success, {\n              repeatId: true\n            });\n          }\n        } else {\n          Cart.remove({\n            userId: user._id\n          });\n          var _success = \"Stale user cart successfully cleaned\";\n          Logger.debug(_success);\n          job.done(_success, {\n            repeatId: true\n          });\n        }\n      });\n    } else {\n      Logger.warn(\"No cart cleanup schedule\");\n    }\n\n    callback();\n  });\n  Jobs.find({\n    type: \"cart/removeFromCart\",\n    status: \"ready\"\n  }).observe({\n    added: function () {\n      return removeStaleCart.trigger();\n    }\n  });\n});","map":{"version":3,"sources":["/imports/plugins/included/jobcontrol/server/jobs/cart.js"],"names":["later","moment","Accounts","Cart","Jobs","Hooks","Logger","Reaction","ServerSessions","Events","add","debug","settings","getShopSettings","cart","Job","priority","retry","retries","wait","backoff","repeat","schedule","parse","text","save","cancelRepeats","warn","getstaleCarts","olderThan","find","updatedAt","$lte","fetch","removeStaleCart","processJobs","pollInterval","workTimeout","job","callback","cleanupDurationDays","match","subtract","Number","_d","carts","forEach","user","findOne","_id","userId","emails","length","removeCart","remove","removeAccount","destroySession","sessionId","Meteor","users","success","done","repeatId","type","status","observe","added","trigger"],"mappings":"AAAA;AAAA,OAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAClB,AAAO,AAAY,AACnB,AAAS,AAAU,AAAM,AAAY,AACrC,AAAS,AAAO,AAAQ,AAAgB,AACxC,AAAS,AAAsB,AAG/B,AAAM,AAAO,AAAI,AAAiB,AAAM,AACtC,AAAO,AAAM;AACb,MAAM,WAAW,AAAS,6BAA1B,AAAiB;eACjB;AAAI,MAAS,WAAb,AAAmB,SACjB;;MAAA,AAAI,AAAI,SAAR,AAAc,MAAd,AAAqC,AAClC,AAAS,AACT,AAAM,AACL;YADK,AACI,6BACT,IAAM,SAFD,AAGL;eALJ,AAES,AAKN;AAPH,YAOU,AACN;AAAU,eAAA,AAAM,AAAM,cAR1B,AAOU,AACI,AAAiB,AAE5B,AAAK,AACJ;;AATK,AAGI,AAAc;iCAN7B,AAcC,AAAM,AACL;AAdA,AAUQ,AACW,OAGZ;qBAIX,A,AAtBA,AAoBC;AAFG,AAAY,AACb;;;;IAQH,AAAM,AAAgB,AAAC,AAAc,AACnC,AAAO,AAAK,AAAK,AAAE,AAAW,AAAE,AAAM;;;;;;AAA/B,AAAU,AAAoC,IAArD,AAAO,qCADT,AAEC;;;;;;AAED,AAAe,AAAM,AACnB,AAAM;;OAvCD,kBAAP,8BAuC0B,AAAK,AAAY,AAAuB,AAC9D;MAAc,AAAK,uBAD2C;;AAE9D;iBAAa,MAFS,AAAwC,AAE3C;AADW,GAAN,EAEvB,UAAA,AAAC,KAAD,AAAM,UAAa,AACpB;WAAA,AAAO,MAAP,AAAa,AACb;QAAM,WAAW,SAAjB,AAAiB,AAAS;;uBAC1B;AAAI,UAAJ,AAAa,4CAAM,cACjB;;UAAM,AAAY,YAAS,SAAT,AAAc,gBAAf,AAAoC,SAApC,KADA,AACjB,AAAiB,AAA0C,AAAM;;gCACjE;YAAM,QAAY,gBAAlB,AAAkB,AAAS,AAAS,AAAO,AAAS,AAAK,AAAQ;;oBACjE;;;YAAM,MAAQ;AACR,cAAN,AAAc,AAAQ;yBACpB;;AAAM,cAAO,AAAS,yBAAU;;oBAChC,AAAI,AAAC,AAAK,AAAO,AAAQ,AACvB,AAAM,AAAa,AAAK,AAAO,AAAE;AAFnC,AAAa,AAAiB,AAAO,AAAK,WAA7B,AAAiB;cAEa,AAAK;sBAAf;;AAA/B,AAAmB;;;aAJvB,AAAc,AAAc,AAC5B,CAII;;cAAM,cAAgB,AAAS,iBAAT,AACpB,gBACE;AAAK,gBAAK,UADZ,AAEE;mBAAQ,MAHU,AACpB;AADF;wBAMA;;AAAM,AAAiB,AAAe,AAAO,AAAE;eAAF,AAAO,AAAK;AAAzD,AAAuB;yBACvB;;cAAA,AAAO,AAAM,WAAb,AAAoB,AAAE;iBAAK,AAAK,MAAZ,AAAiB;mBAAQ;sBAAzB;;AATG,AASvB,AAAoD;AACpD;WAAA,AAAI,AAAc,AAAiB,AAAgB,AACjD;kBAAA,AAAM,AAAU,AAChB;AAAA,AAAO,AAAM,AACb;;AAAA,AAAI,AAAK,AAAS,AAAE;AAAF,AAAY;;UAEjC;AAfD,YAeO,AACL;AAHE,AACD;uBAEW,AAAU,AAAK;AAA3B,6BACA;AAAA,AAAM,AAAU,AAChB,AAAO,AAAM,AACb;AAHA,AAAK,AAAO,AAAE;AA7BxB,AACE,AAAwB,AAMtB,AAIE,AAqBI,AAAI,AAAK,AAAS,AAAE,AAAU,AAC/B,AACF,AACF,AAAM,AACL,AAAO,AAAK,AACb,AACD,AACD,AACD,AAAK,AAAK,AACR,AAAM,AACN,AAAQ,AACP,AAAQ,AACT,AAAQ,AACN,AAAO,AAAgB,AACxB,AAEJ","file":"/imports/plugins/included/jobcontrol/server/jobs/cart.js.map","sourcesContent":["import later from \"later\";\nimport moment from \"moment\";\nimport { Accounts, Cart, Jobs } from \"/lib/collections\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\nimport { ServerSessions } from \"/server/publications/collections/sessions\";\n\n\nHooks.Events.add(\"afterCoreInit\", () => {\n  Logger.debug(\"Adding Job removeStaleCart and Accounts to jobControl\");\n  const settings = Reaction.getShopSettings();\n  if (settings.cart) {\n    new Job(Jobs, \"cart/removeFromCart\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\" // delay by twice as long for each subsequent retry\n      })\n      .repeat({\n        schedule: later.parse.text(\"every day\")\n      })\n      .save({\n        cancelRepeats: true\n      });\n  } else {\n    Logger.warn(\"No cart cleanup schedule\");\n  }\n});\n\n/**\n * {Function} that fetches stale carts\n * @param {Object} olderThan older than date\n * @return {Object} stale carts\n */\nconst getstaleCarts = (olderThan) => {\n  return Cart.find({ updatedAt: { $lte: olderThan } }).fetch();\n};\n\nexport default () => {\n  const removeStaleCart = Jobs.processJobs(\"cart/removeFromCart\", {\n    pollInterval: 60 * 60 * 1000, // backup polling, see observer below\n    workTimeout: 180 * 1000\n  }, (job, callback) => {\n    Logger.debug(\"Processing cart/removeFromCart\");\n    const settings = Reaction.getShopSettings();\n    if (settings.cart) {\n      const schedule = (settings.cart.cleanupDurationDays).match(/\\d/);// configurable in shop settings\n      const olderThan = moment().subtract(Number(schedule[0]), \"days\")._d;\n      const carts = getstaleCarts(olderThan);\n      carts.forEach(cart => {\n        const user = Accounts.findOne({ _id: cart.userId });\n        if (!user.emails.length) {\n          const removeCart = Cart.remove({ userId: user._id });\n          const removeAccount = Accounts.remove(\n            {\n              _id: cart.userId,\n              emails: []\n            }\n          );\n          const destroySession = ServerSessions.remove({ _id: cart.sessionId });\n          Meteor.users.remove({ _id: user._id, emails: [] }); // clears out anonymous user\n          if (removeCart && removeAccount && destroySession) {\n            const success = \"Stale anonymous user cart and account successfully cleaned\";\n            Logger.debug(success);\n            job.done(success, { repeatId: true });\n          }\n        } else {\n          Cart.remove({ userId: user._id });\n          const success = \"Stale user cart successfully cleaned\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n        }\n      });\n    } else {\n      Logger.warn(\"No cart cleanup schedule\");\n    }\n    callback();\n  });\n  Jobs.find({\n    type: \"cart/removeFromCart\",\n    status: \"ready\"\n  }).observe({\n    added() {\n      return removeStaleCart.trigger();\n    }\n  });\n};\n"]},"hash":"766cb39cde50bea318dd0819703dae9bb4a814c8"}
