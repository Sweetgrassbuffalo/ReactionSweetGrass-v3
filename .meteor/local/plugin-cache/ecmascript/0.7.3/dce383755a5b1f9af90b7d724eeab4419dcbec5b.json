{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/aldeed:template-extension/lib/hooks.js","filenameRelative":"/packages/aldeed:template-extension/lib/hooks.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/aldeed:template-extension/lib/hooks.js.map","sourceFileName":"/packages/aldeed:template-extension/lib/hooks.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"hooks"},"ignored":false,"code":"Hooks = {\n  global: {\n    created: [],\n    rendered: [],\n    destroyed: []\n  },\n  master: {\n    created: function () {\n      Hooks.runGlobal('created', this, arguments);\n    },\n    rendered: function () {\n      Hooks.runGlobal('rendered', this, arguments);\n    },\n    destroyed: function () {\n      Hooks.runGlobal('destroyed', this, arguments);\n    }\n  }\n};\n\nHooks.addGlobal = function (template) {\n  // For each hookType, define the hooks for this template.\n  // Since we might call this multiple times from startup code\n  // and other functions, make sure we do it only once.\n  // Doing it twice would create an infinite loop of self-calling\n  // hooks.\n  if (!template._hasTemplateExtensionMasterHooks) {\n    template.onCreated(Hooks.master.created);\n    template.onRendered(Hooks.master.rendered);\n    template.onDestroyed(Hooks.master.destroyed);\n    template._hasTemplateExtensionMasterHooks = true;\n  }\n};\n\nHooks.runGlobal = function (type, template, args) {\n  for (var _iterator = Hooks.global[type], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var hook = _ref;\n    hook.apply(template, args);\n  }\n};","map":{"version":3,"sources":["/packages/aldeed:template-extension/lib/hooks.js"],"names":["Hooks","global","created","rendered","destroyed","master","runGlobal","arguments","addGlobal","template","_hasTemplateExtensionMasterHooks","onCreated","onRendered","onDestroyed","type","args","hook","apply"],"mappings":"AAAAA,QAAQ;AACNC,UAAQ;AACNC,aAAS,EADH;AAENC,cAAU,EAFJ;AAGNC,eAAW;AAHL,GADF;AAMNC,UAAQ;AACNH,aAAS,YAAY;AACnBF,YAAMM,SAAN,CAAgB,SAAhB,EAA2B,IAA3B,EAAiCC,SAAjC;AACD,KAHK;AAINJ,cAAU,YAAY;AACpBH,YAAMM,SAAN,CAAgB,UAAhB,EAA4B,IAA5B,EAAkCC,SAAlC;AACD,KANK;AAONH,eAAW,YAAY;AACrBJ,YAAMM,SAAN,CAAgB,WAAhB,EAA6B,IAA7B,EAAmCC,SAAnC;AACD;AATK;AANF,CAAR;;AAmBAP,MAAMQ,SAAN,GAAkB,UAACC,QAAD,EAAc;AAC9B;AACA;AACA;AACA;AACA;AACA,MAAI,CAACA,SAASC,gCAAd,EAAgD;AAC9CD,aAASE,SAAT,CAAmBX,MAAMK,MAAN,CAAaH,OAAhC;AACAO,aAASG,UAAT,CAAoBZ,MAAMK,MAAN,CAAaF,QAAjC;AACAM,aAASI,WAAT,CAAqBb,MAAMK,MAAN,CAAaD,SAAlC;AAEAK,aAASC,gCAAT,GAA4C,IAA5C;AACD;AACF,CAbD;;AAeAV,MAAMM,SAAN,GAAkB,UAACQ,IAAD,EAAOL,QAAP,EAAiBM,IAAjB,EAA0B;AAC1C,uBAAiBf,MAAMC,MAAN,CAAaa,IAAb,CAAjB,kHAAqC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,QAA5BE,IAA4B;AACnCA,SAAKC,KAAL,CAAWR,QAAX,EAAqBM,IAArB;AACD;AACF,CAJD","file":"/packages/aldeed:template-extension/lib/hooks.js.map","sourcesContent":["Hooks = {\n  global: {\n    created: [],\n    rendered: [],\n    destroyed: []\n  },\n  master: {\n    created: function () {\n      Hooks.runGlobal('created', this, arguments);\n    },\n    rendered: function () {\n      Hooks.runGlobal('rendered', this, arguments);\n    },\n    destroyed: function () {\n      Hooks.runGlobal('destroyed', this, arguments);\n    }\n  }\n};\n\nHooks.addGlobal = (template) => {\n  // For each hookType, define the hooks for this template.\n  // Since we might call this multiple times from startup code\n  // and other functions, make sure we do it only once.\n  // Doing it twice would create an infinite loop of self-calling\n  // hooks.\n  if (!template._hasTemplateExtensionMasterHooks) {\n    template.onCreated(Hooks.master.created);\n    template.onRendered(Hooks.master.rendered);\n    template.onDestroyed(Hooks.master.destroyed);\n\n    template._hasTemplateExtensionMasterHooks = true;\n  }\n};\n\nHooks.runGlobal = (type, template, args) => {\n  for (let hook of Hooks.global[type]) {\n    hook.apply(template, args);\n  }\n};\n"]},"hash":"dce383755a5b1f9af90b7d724eeab4419dcbec5b"}
