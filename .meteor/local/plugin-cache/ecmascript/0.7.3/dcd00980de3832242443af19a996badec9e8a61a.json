{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/aldeed:template-extension/lib/template-replaces.js","filenameRelative":"/packages/aldeed:template-extension/lib/template-replaces.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/aldeed:template-extension/lib/template-replaces.js.map","sourceFileName":"/packages/aldeed:template-extension/lib/template-replaces.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"template-replaces"},"ignored":false,"code":"Template.prototype.replaces = function () {\n  function replaces(otherTemplate) {\n    var self = this;\n\n    function replaceRender(template) {\n      // String template names can be provided and template object is looked up\n      if (typeof template === 'string') template = Template[template];\n      if (!template) return;\n      template.renderFunction = self.renderFunction;\n    } // Accept an array as otherTemplate argument\n\n\n    if (Array.isArray(otherTemplate)) {\n      otherTemplate.forEach(replaceRender);\n      return;\n    }\n\n    replaceRender(otherTemplate);\n  }\n\n  return replaces;\n}();","map":{"version":3,"sources":["/packages/aldeed:template-extension/lib/template-replaces.js"],"names":["Template","prototype","replaces","otherTemplate","self","replaceRender","template","renderFunction","Array","isArray","forEach"],"mappings":"AAAAA,SAASC,SAAT,CAAmBC,QAAnB;AAA8B,WAASA,QAAT,CAAkBC,aAAlB,EAAiC;AAC7D,QAAIC,OAAO,IAAX;;AAEA,aAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC/B;AACA,UAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkCA,WAAWN,SAASM,QAAT,CAAX;AAClC,UAAI,CAACA,QAAL,EAAe;AAEfA,eAASC,cAAT,GAA0BH,KAAKG,cAA/B;AACD,KAT4D,CAW7D;;;AACA,QAAIC,MAAMC,OAAN,CAAcN,aAAd,CAAJ,EAAkC;AAChCA,oBAAcO,OAAd,CAAsBL,aAAtB;AACA;AACD;;AAEDA,kBAAcF,aAAd;AACD;;AAlBD,SAAuCD,QAAvC;AAAA","file":"/packages/aldeed:template-extension/lib/template-replaces.js.map","sourcesContent":["Template.prototype.replaces = function replaces(otherTemplate) {\n  var self = this;\n\n  function replaceRender(template) {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n\n    template.renderFunction = self.renderFunction;\n  }\n\n  // Accept an array as otherTemplate argument\n  if (Array.isArray(otherTemplate)) {\n    otherTemplate.forEach(replaceRender);\n    return;\n  }\n\n  replaceRender(otherTemplate);\n};\n"]},"hash":"dcd00980de3832242443af19a996badec9e8a61a"}
