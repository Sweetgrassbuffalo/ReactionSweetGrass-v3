{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/publications/accounts/serviceConfiguration.js","filenameRelative":"/server/publications/accounts/serviceConfiguration.js","inputSourceMap":{"version":3,"sources":["/server/publications/accounts/serviceConfiguration.js"],"names":["Reaction","Meteor","publish","checkUserId","check","Match","OneOf","String","userId","ready","Roles","userIsInRole","getShopId","ServiceConfiguration","configurations","find","fields","secret"],"mappings":"AAAA,IAAS;AAAT,OAAyB,WAEzB,A,AAFA;;;;;AAOA,AAAO,AAAQ,AAAwB,AAAU,AAAa,AAC5D,AAAM,AAAa,AAAM,AAAM,AAAQ;;;;;AACnC,QAAA,AAAK,aAAT,AAAoB,MAAM,cACxB;;WAAO,AAAK,WAAZ,MAH0D,AAI3D;AACD;GAHA,CAIA;;;MAAI,MAAA,AAAM,aAAa,KAAnB,AAAwB,QAAQ,CAAA,AAAC,SAAD,AAAU,SAA9C,AAAI,AAAgC,AAAmB,AACnD,AAAS,AAAc,AACzB,uBAAO,uBAAA,AAAqB,AAAe,AAAK,AAAI,AAClD;;;gBADF,AAAO,AAA6C,AAKrD;AAJW,AACE;AAAR,KADM;AATd,AAeE,AAAO,AAAqB,AAAe,AAAK,AACjD","file":"/server/publications/accounts/serviceConfiguration.js.map","sourcesContent":["import { Reaction } from \"/server/api\";\n\n/**\n * Publish ServiceConfiguration\n * @param {String} checkUserId - we not using it directly because if shows not\n * correct userId. Instead of it we are believe only to `this.userId`\n */\nMeteor.publish(\"ServiceConfiguration\", function (checkUserId) {\n  check(checkUserId, Match.OneOf(String, null));\n  if (this.userId === null) {\n    return this.ready();\n  }\n  // Admins and account managers can manage the login methods for the shop\n  if (Roles.userIsInRole(this.userId, [\"owner\", \"admin\", \"dashboard/accounts\"],\n      Reaction.getShopId())) {\n    return ServiceConfiguration.configurations.find({}, {\n      fields: {\n        secret: 1\n      }\n    });\n  }\n\n  return ServiceConfiguration.configurations.find({});\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/publications/accounts/serviceConfiguration.js.map","sourceFileName":"/server/publications/accounts/serviceConfiguration.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"serviceConfiguration"},"ignored":false,"code":"var Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 0);\n/**\n * Publish ServiceConfiguration\n * @param {String} checkUserId - we not using it directly because if shows not\n * correct userId. Instead of it we are believe only to `this.userId`\n */Meteor.publish(\"ServiceConfiguration\", function (checkUserId) {\n  check(checkUserId, Match.OneOf(String, null));\n\n  if (this.userId === null) {\n    return this.ready();\n  } // Admins and account managers can manage the login methods for the shop\n\n\n  if (Roles.userIsInRole(this.userId, [\"owner\", \"admin\", \"dashboard/accounts\"], Reaction.getShopId())) {\n    return ServiceConfiguration.configurations.find({}, {\n      fields: {\n        secret: 1\n      }\n    });\n  }\n\n  return ServiceConfiguration.configurations.find({});\n});","map":{"version":3,"sources":["/server/publications/accounts/serviceConfiguration.js"],"names":["Reaction","Meteor","publish","checkUserId","check","Match","OneOf","String","userId","ready","Roles","userIsInRole","getShopId","ServiceConfiguration","configurations","find","fields","secret"],"mappings":"AAAA,IAAS;AAAT,OAAyB,WAEzB,A,AAFA;;;;;AAOA,AAAO,AAAQ,AAAwB,AAAU,AAAa,AAC5D,AAAM,AAAa,AAAM,AAAM,AAAQ;;;;;AACnC,QAAA,AAAK,aAAT,AAAoB,MAAM,cACxB;;WAAO,AAAK,WAAZ,MAH0D,AAI3D;AACD;GAHA,CAIA;;;MAAI,MAAA,AAAM,aAAa,KAAnB,AAAwB,QAAQ,CAAA,AAAC,SAAD,AAAU,SAA9C,AAAI,AAAgC,AAAmB,AACnD,AAAS,AAAc,AACzB,uBAAO,uBAAA,AAAqB,AAAe,AAAK,AAAI,AAClD;;;gBADF,AAAO,AAA6C,AAKrD;AAJW,AACE;AAAR,KADM;AATd,AAeE,AAAO,AAAqB,AAAe,AAAK,AACjD","file":"/server/publications/accounts/serviceConfiguration.js.map","sourcesContent":["import { Reaction } from \"/server/api\";\n\n/**\n * Publish ServiceConfiguration\n * @param {String} checkUserId - we not using it directly because if shows not\n * correct userId. Instead of it we are believe only to `this.userId`\n */\nMeteor.publish(\"ServiceConfiguration\", function (checkUserId) {\n  check(checkUserId, Match.OneOf(String, null));\n  if (this.userId === null) {\n    return this.ready();\n  }\n  // Admins and account managers can manage the login methods for the shop\n  if (Roles.userIsInRole(this.userId, [\"owner\", \"admin\", \"dashboard/accounts\"],\n      Reaction.getShopId())) {\n    return ServiceConfiguration.configurations.find({}, {\n      fields: {\n        secret: 1\n      }\n    });\n  }\n\n  return ServiceConfiguration.configurations.find({});\n});\n"]},"hash":"ef7b453a79534ee8709acf211a9a5541acc2635e"}
