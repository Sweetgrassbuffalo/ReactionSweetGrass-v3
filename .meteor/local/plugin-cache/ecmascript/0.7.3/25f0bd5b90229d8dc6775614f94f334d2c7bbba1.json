{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"meteor/session","imported":["Session"],"specifiers":[{"kind":"named","imported":"Session","local":"Session"}]},{"source":"meteor/tracker","imported":["Tracker"],"specifiers":[{"kind":"named","imported":"Tracker","local":"Tracker"}]},{"source":"meteor/meteorhacks:subs-manager","imported":["SubsManager"],"specifiers":[{"kind":"named","imported":"SubsManager","local":"SubsManager"}]}],"exports":{"exported":["Subscriptions"],"specifiers":[{"kind":"local","local":"Subscriptions","exported":"Subscriptions"}]}}},"options":{"filename":"/client/modules/core/subscriptions.js","filenameRelative":"/client/modules/core/subscriptions.js","inputSourceMap":{"version":3,"sources":["/client/modules/core/subscriptions.js"],"names":["Meteor","Random","Session","Tracker","SubsManager","Subscriptions","Manager","Account","subscribe","userId","Shops","Packages","Tags","Media","autorun","sessionId","amplify","store","newSession","nonreactive","id","set","get","Sessions","Cart","UserProfile"],"mappings":"AAAA,OAAS;AAAT,AAAuB;WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAT,AAAuB,AAAvB,AACA,AAAS,AAAT,AAAwB,AAAxB,AACA,AAAS,AAAT,AAAwB,AAAxB,AACA,AAAS,AAAT,AAA4B,AAA5B,AAEA,AAAO,AAAM,AAAgB,AAAtB,A,AAEP,AACA;;AACA,AAAc,AAAd,AAAwB,AAAI,AAAJ,AAAxB;AAEA,AAAc,AAAd,AAAwB,AAAc,AAAd,AAAsB,AAAtB,AAAgC,AAAhC,AAA4C,AAAO,AAAP,AAA5C,AAAxB,A,AAEA;;sFAaA,AAGA,AAAc,AAAd,AAAsB,AAAc,AAAd,AAAsB,AAAtB,AAAgC,AAAhC,AAAtB,AAEA,AAAc,AAAd,AAAyB,AAAc,AAAd,AAAsB,AAAtB,AAAgC,AAAhC,AAAzB,AAEA,AAAc,AAAd,AAAqB,AAAc,AAAd,AAAsB,AAAtB,AAAgC,AAAhC,AAArB,AAEA,AAAc,AAAd,AAAsB,AAAc,AAAd,AAAsB,AAAtB,AAAgC,AAAhC,AAAtB,A,AAEA;;;;;;;;;;;0FAGA,AAAQ,AAAR,AAAgB,AAAY;;;AAC1B,sDACA;AACA,yDACA,AAAM,AAAY,AAAQ,AAAR,AAAc,AAAd,AAAlB;AACA,AAAI,cAAJ,uCACA,AAAQ,AAAR,AAAoB,AAAM;AACxB,cAAa,QAAO,AAAP,AAAb,gCACD,AAFD,UAGA,AAAI,AAAO,AAAP,AAAqB,AAAzB,AAAmC,AACjC,AAAQ,AAAR,AAAc,AAAd,AAAkC,AAAlC;;;AACA,QAAQ,AAAR,QAAY,AAAZ,YAAyB,AAAzB,AACD;;AACD;AAAI,AAAO,AAAQ,AAAR,AAAY,AAAZ,AAAP,AAAoC,AAAxC,AAAkD,AAChD;MAAQ,AAAR,AAAY,YAAZ,QAAyB,MAAQ,AAAR,AAAc,AAAd,AAAzB,AACD;;kCACD;AAAc,wBAAd,AAAyB,AAAO,AAAP,AAAiB,AAAjB,AAA6B,AAAQ,AAAR,AAAY,AAAZ,AAA7B,AAAzB,AACD,AAjBD;A,AAmBA;;qCACA;AAAQ,YAAR,AAAgB,MAAM,oBACpB;AAAI,YAAJ,IADoB,AAEpB;AACA;;MAAQ,eAAR,AAAoB,IAAM,2BACxB;gBAAY,AAAQ,AAAR,AAAY,qBAAZ,AAAZ,MACD;AAFD,AAGA;;gBAAc,AAAd,AAAqB,WAAO,OAAP,AAAiB,UAAjB,AAAyB,YAAzB,AAAoC,QAAO,IAAP,AAApC,AAArB,AACA;AAAc,AAAd,AAA4B,AAAO,AAAP,AAAiB,AAAjB,AAAgC,AAAO,AAAP,AAAhC,AAA5B,AACD,AARD","file":"/client/modules/core/subscriptions.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Random } from \"meteor/random\";\nimport { Session } from \"meteor/session\";\nimport { Tracker } from \"meteor/tracker\";\nimport { SubsManager } from \"meteor/meteorhacks:subs-manager\";\n\nexport const Subscriptions = {};\n\n// Subscription Manager\n// See: https://github.com/kadirahq/subs-manager\nSubscriptions.Manager = new SubsManager();\n\nSubscriptions.Account = Subscriptions.Manager.subscribe(\"Accounts\", Meteor.userId());\n\n/*\n * Reaction.session\n * Create persistent sessions for users\n * The server returns only one record, so findOne will return that record\n * Stores into client session all data contained in server session\n * supports reactivity when server changes `newSession`\n * Stores the server session id into local storage / cookies\n *\n * Also localStorage session could be set from the client-side. This could\n * happen when user flush browser's cache, for example.\n * @see https://github.com/reactioncommerce/reaction/issues/609#issuecomment-166389252\n */\n\n/**\n * General Subscriptions\n */\nSubscriptions.Shops = Subscriptions.Manager.subscribe(\"Shops\");\n\nSubscriptions.Packages = Subscriptions.Manager.subscribe(\"Packages\");\n\nSubscriptions.Tags = Subscriptions.Manager.subscribe(\"Tags\");\n\nSubscriptions.Media = Subscriptions.Manager.subscribe(\"Media\");\n\n/**\n * Subscriptions that need to reload on new sessions\n */\nTracker.autorun(function () {\n  // we are trying to track both amplify and Session.get here, but the problem\n  // is - we can't track amplify. It just not tracked. So, to track amplify we\n  // are using dirty hack inside Accounts.loginWithAnonymous method.\n  const sessionId = amplify.store(\"Reaction.session\");\n  let newSession;\n  Tracker.nonreactive(() => {\n    newSession = Random.id();\n  });\n  if (typeof sessionId !== \"string\") {\n    amplify.store(\"Reaction.session\", newSession);\n    Session.set(\"sessionId\", newSession);\n  }\n  if (typeof Session.get(\"sessionId\") !== \"string\") {\n    Session.set(\"sessionId\", amplify.store(\"Reaction.session\"));\n  }\n  Subscriptions.Sessions = Meteor.subscribe(\"Sessions\", Session.get(\"sessionId\"));\n});\n\n// @see http://guide.meteor.com/data-loading.html#changing-arguments\nTracker.autorun(() => {\n  let sessionId;\n  // we really don't need to track the sessionId here\n  Tracker.nonreactive(() => {\n    sessionId = Session.get(\"sessionId\");\n  });\n  Subscriptions.Cart = Meteor.subscribe(\"Cart\", sessionId, Meteor.userId());\n  Subscriptions.UserProfile = Meteor.subscribe(\"UserProfile\", Meteor.userId());\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/core/subscriptions.js.map","sourceFileName":"/client/modules/core/subscriptions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"subscriptions"},"ignored":false,"code":"module.export({\n  Subscriptions: function () {\n    return Subscriptions;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 1);\nvar Session = void 0;\nmodule.importSync(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 2);\nvar Tracker = void 0;\nmodule.importSync(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 3);\nvar SubsManager = void 0;\nmodule.importSync(\"meteor/meteorhacks:subs-manager\", {\n  SubsManager: function (v) {\n    SubsManager = v;\n  }\n}, 4);\nvar Subscriptions = {};\n// Subscription Manager\n// See: https://github.com/kadirahq/subs-manager\nSubscriptions.Manager = new SubsManager();\nSubscriptions.Account = Subscriptions.Manager.subscribe(\"Accounts\", Meteor.userId()); /*\n                                                                                       * Reaction.session\n                                                                                       * Create persistent sessions for users\n                                                                                       * The server returns only one record, so findOne will return that record\n                                                                                       * Stores into client session all data contained in server session\n                                                                                       * supports reactivity when server changes `newSession`\n                                                                                       * Stores the server session id into local storage / cookies\n                                                                                       *\n                                                                                       * Also localStorage session could be set from the client-side. This could\n                                                                                       * happen when user flush browser's cache, for example.\n                                                                                       * @see https://github.com/reactioncommerce/reaction/issues/609#issuecomment-166389252\n                                                                                       */ /**\n                                                                                           * General Subscriptions\n                                                                                           */\nSubscriptions.Shops = Subscriptions.Manager.subscribe(\"Shops\");\nSubscriptions.Packages = Subscriptions.Manager.subscribe(\"Packages\");\nSubscriptions.Tags = Subscriptions.Manager.subscribe(\"Tags\");\nSubscriptions.Media = Subscriptions.Manager.subscribe(\"Media\"); /**\n                                                                 * Subscriptions that need to reload on new sessions\n                                                                 */\nTracker.autorun(function () {\n  // we are trying to track both amplify and Session.get here, but the problem\n  // is - we can't track amplify. It just not tracked. So, to track amplify we\n  // are using dirty hack inside Accounts.loginWithAnonymous method.\n  var sessionId = amplify.store(\"Reaction.session\");\n  var newSession = void 0;\n  Tracker.nonreactive(function () {\n    newSession = Random.id();\n  });\n\n  if (typeof sessionId !== \"string\") {\n    amplify.store(\"Reaction.session\", newSession);\n    Session.set(\"sessionId\", newSession);\n  }\n\n  if (typeof Session.get(\"sessionId\") !== \"string\") {\n    Session.set(\"sessionId\", amplify.store(\"Reaction.session\"));\n  }\n\n  Subscriptions.Sessions = Meteor.subscribe(\"Sessions\", Session.get(\"sessionId\"));\n}); // @see http://guide.meteor.com/data-loading.html#changing-arguments\n\nTracker.autorun(function () {\n  var sessionId = void 0; // we really don't need to track the sessionId here\n\n  Tracker.nonreactive(function () {\n    sessionId = Session.get(\"sessionId\");\n  });\n  Subscriptions.Cart = Meteor.subscribe(\"Cart\", sessionId, Meteor.userId());\n  Subscriptions.UserProfile = Meteor.subscribe(\"UserProfile\", Meteor.userId());\n});","map":{"version":3,"sources":["/client/modules/core/subscriptions.js"],"names":["Meteor","Random","Session","Tracker","SubsManager","Subscriptions","Manager","Account","subscribe","userId","Shops","Packages","Tags","Media","autorun","sessionId","amplify","store","newSession","nonreactive","id","set","get","Sessions","Cart","UserProfile"],"mappings":"AAAA,OAAS;AAAT,AAAuB;WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAT,AAAuB,AAAvB,AACA,AAAS,AAAT,AAAwB,AAAxB,AACA,AAAS,AAAT,AAAwB,AAAxB,AACA,AAAS,AAAT,AAA4B,AAA5B,AAEA,AAAO,AAAM,AAAgB,AAAtB,A,AAEP,AACA;;AACA,AAAc,AAAd,AAAwB,AAAI,AAAJ,AAAxB;AAEA,AAAc,AAAd,AAAwB,AAAc,AAAd,AAAsB,AAAtB,AAAgC,AAAhC,AAA4C,AAAO,AAAP,AAA5C,AAAxB,A,AAEA;;sFAaA,AAGA,AAAc,AAAd,AAAsB,AAAc,AAAd,AAAsB,AAAtB,AAAgC,AAAhC,AAAtB,AAEA,AAAc,AAAd,AAAyB,AAAc,AAAd,AAAsB,AAAtB,AAAgC,AAAhC,AAAzB,AAEA,AAAc,AAAd,AAAqB,AAAc,AAAd,AAAsB,AAAtB,AAAgC,AAAhC,AAArB,AAEA,AAAc,AAAd,AAAsB,AAAc,AAAd,AAAsB,AAAtB,AAAgC,AAAhC,AAAtB,A,AAEA;;;;;;;;;;;0FAGA,AAAQ,AAAR,AAAgB,AAAY;;;AAC1B,sDACA;AACA,yDACA,AAAM,AAAY,AAAQ,AAAR,AAAc,AAAd,AAAlB;AACA,AAAI,cAAJ,uCACA,AAAQ,AAAR,AAAoB,AAAM;AACxB,cAAa,QAAO,AAAP,AAAb,gCACD,AAFD,UAGA,AAAI,AAAO,AAAP,AAAqB,AAAzB,AAAmC,AACjC,AAAQ,AAAR,AAAc,AAAd,AAAkC,AAAlC;;;AACA,QAAQ,AAAR,QAAY,AAAZ,YAAyB,AAAzB,AACD;;AACD;AAAI,AAAO,AAAQ,AAAR,AAAY,AAAZ,AAAP,AAAoC,AAAxC,AAAkD,AAChD;MAAQ,AAAR,AAAY,YAAZ,QAAyB,MAAQ,AAAR,AAAc,AAAd,AAAzB,AACD;;kCACD;AAAc,wBAAd,AAAyB,AAAO,AAAP,AAAiB,AAAjB,AAA6B,AAAQ,AAAR,AAAY,AAAZ,AAA7B,AAAzB,AACD,AAjBD;A,AAmBA;;qCACA;AAAQ,YAAR,AAAgB,MAAM,oBACpB;AAAI,YAAJ,IADoB,AAEpB;AACA;;MAAQ,eAAR,AAAoB,IAAM,2BACxB;gBAAY,AAAQ,AAAR,AAAY,qBAAZ,AAAZ,MACD;AAFD,AAGA;;gBAAc,AAAd,AAAqB,WAAO,OAAP,AAAiB,UAAjB,AAAyB,YAAzB,AAAoC,QAAO,IAAP,AAApC,AAArB,AACA;AAAc,AAAd,AAA4B,AAAO,AAAP,AAAiB,AAAjB,AAAgC,AAAO,AAAP,AAAhC,AAA5B,AACD,AARD","file":"/client/modules/core/subscriptions.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Random } from \"meteor/random\";\nimport { Session } from \"meteor/session\";\nimport { Tracker } from \"meteor/tracker\";\nimport { SubsManager } from \"meteor/meteorhacks:subs-manager\";\n\nexport const Subscriptions = {};\n\n// Subscription Manager\n// See: https://github.com/kadirahq/subs-manager\nSubscriptions.Manager = new SubsManager();\n\nSubscriptions.Account = Subscriptions.Manager.subscribe(\"Accounts\", Meteor.userId());\n\n/*\n * Reaction.session\n * Create persistent sessions for users\n * The server returns only one record, so findOne will return that record\n * Stores into client session all data contained in server session\n * supports reactivity when server changes `newSession`\n * Stores the server session id into local storage / cookies\n *\n * Also localStorage session could be set from the client-side. This could\n * happen when user flush browser's cache, for example.\n * @see https://github.com/reactioncommerce/reaction/issues/609#issuecomment-166389252\n */\n\n/**\n * General Subscriptions\n */\nSubscriptions.Shops = Subscriptions.Manager.subscribe(\"Shops\");\n\nSubscriptions.Packages = Subscriptions.Manager.subscribe(\"Packages\");\n\nSubscriptions.Tags = Subscriptions.Manager.subscribe(\"Tags\");\n\nSubscriptions.Media = Subscriptions.Manager.subscribe(\"Media\");\n\n/**\n * Subscriptions that need to reload on new sessions\n */\nTracker.autorun(function () {\n  // we are trying to track both amplify and Session.get here, but the problem\n  // is - we can't track amplify. It just not tracked. So, to track amplify we\n  // are using dirty hack inside Accounts.loginWithAnonymous method.\n  const sessionId = amplify.store(\"Reaction.session\");\n  let newSession;\n  Tracker.nonreactive(() => {\n    newSession = Random.id();\n  });\n  if (typeof sessionId !== \"string\") {\n    amplify.store(\"Reaction.session\", newSession);\n    Session.set(\"sessionId\", newSession);\n  }\n  if (typeof Session.get(\"sessionId\") !== \"string\") {\n    Session.set(\"sessionId\", amplify.store(\"Reaction.session\"));\n  }\n  Subscriptions.Sessions = Meteor.subscribe(\"Sessions\", Session.get(\"sessionId\"));\n});\n\n// @see http://guide.meteor.com/data-loading.html#changing-arguments\nTracker.autorun(() => {\n  let sessionId;\n  // we really don't need to track the sessionId here\n  Tracker.nonreactive(() => {\n    sessionId = Session.get(\"sessionId\");\n  });\n  Subscriptions.Cart = Meteor.subscribe(\"Cart\", sessionId, Meteor.userId());\n  Subscriptions.UserProfile = Meteor.subscribe(\"UserProfile\", Meteor.userId());\n});\n"]},"hash":"25f0bd5b90229d8dc6775614f94f334d2c7bbba1"}
