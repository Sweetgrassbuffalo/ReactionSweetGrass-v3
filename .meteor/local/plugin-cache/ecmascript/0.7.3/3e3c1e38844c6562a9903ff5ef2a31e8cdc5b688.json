{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/replace","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_replace"}]},{"source":"lodash/includes","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_includes"}]},{"source":"lodash/keys","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_keys"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"/lib/collections","imported":["ProductSearch","OrderSearch","AccountSearch","Orders","Products","Accounts","Shops"],"specifiers":[{"kind":"named","imported":"ProductSearch","local":"ProductSearch"},{"kind":"named","imported":"OrderSearch","local":"OrderSearch"},{"kind":"named","imported":"AccountSearch","local":"AccountSearch"},{"kind":"named","imported":"Orders","local":"Orders"},{"kind":"named","imported":"Products","local":"Products"},{"kind":"named","imported":"Accounts","local":"Accounts"},{"kind":"named","imported":"Shops","local":"Shops"}]},{"source":"./common","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"utils"}]},{"source":"./transformations","imported":["transformations"],"specifiers":[{"kind":"named","imported":"transformations","local":"transformations"}]}],"exports":{"exported":["getSearchParameters","collection","buildProductSearchRecord","productId","buildProductSearch","cb","buildEmptyProductSearch","rebuildProductSearchIndex","cb","ensureProductSearchIndex","buildOrderSearchRecord","orderId","buildOrderSearch","cb","buildAccountSearch","cb","buildAccountSearchRecord","accountId"],"specifiers":[{"kind":"local","local":"getSearchParameters","exported":"getSearchParameters"},{"kind":"local","local":"collection","exported":"collection"},{"kind":"local","local":"buildProductSearchRecord","exported":"buildProductSearchRecord"},{"kind":"local","local":"productId","exported":"productId"},{"kind":"local","local":"buildProductSearch","exported":"buildProductSearch"},{"kind":"local","local":"cb","exported":"cb"},{"kind":"local","local":"buildEmptyProductSearch","exported":"buildEmptyProductSearch"},{"kind":"local","local":"rebuildProductSearchIndex","exported":"rebuildProductSearchIndex"},{"kind":"local","local":"cb","exported":"cb"},{"kind":"local","local":"ensureProductSearchIndex","exported":"ensureProductSearchIndex"},{"kind":"local","local":"buildOrderSearchRecord","exported":"buildOrderSearchRecord"},{"kind":"local","local":"orderId","exported":"orderId"},{"kind":"local","local":"buildOrderSearch","exported":"buildOrderSearch"},{"kind":"local","local":"cb","exported":"cb"},{"kind":"local","local":"buildAccountSearch","exported":"buildAccountSearch"},{"kind":"local","local":"cb","exported":"cb"},{"kind":"local","local":"buildAccountSearchRecord","exported":"buildAccountSearchRecord"},{"kind":"local","local":"accountId","exported":"accountId"}]}}},"options":{"filename":"/imports/plugins/included/search-mongo/server/methods/searchcollections.js","filenameRelative":"/imports/plugins/included/search-mongo/server/methods/searchcollections.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/search-mongo/server/methods/searchcollections.js"],"names":["Meteor","check","Match","Reaction","Logger","ProductSearch","OrderSearch","AccountSearch","Orders","Products","Accounts","Shops","utils","transformations","requiredFields","products","orders","accounts","supportedLanguages","filterFields","customFields","fieldNames","fieldKeys","fieldKey","push","getScores","settings","collection","weightObject","weight","weights","getSearchLanguage","shopId","getShopId","shopLanguage","findOne","language","default_language","getSearchParameters","getPackageSettings","includes","fieldSet","concat","buildProductSearchRecord","productId","product","type","productRecord","field","productSearchRecord","insert","ensureProductSearchIndex","undefined","buildProductSearch","cb","Optional","Function","debug","remove","find","fetch","indexObject","rawProductSearchCollection","rawCollection","dropIndexes","createIndex","buildEmptyProductSearch","rebuildProductSearchIndex","buildOrderSearchRecord","orderId","order","user","users","userId","userEmails","email","emails","address","orderSearch","billingName","billing","fullName","billingPhone","phone","shippingName","shipping","shippingPhone","billingAddress","address1","postal","city","region","country","shippingAddress","orderTotal","invoice","total","orderDate","moment","createdAt","format","billingStatus","paymentMethod","status","shipped","shippingStatus","packed","buildOrderSearch","_id","rawOrderSearchCollection","buildAccountSearch","account","buildAccountSearchRecord","rawAccountSearchCollection","accountId","String","length","accountSearch"],"mappings":"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","file":"/imports/plugins/included/search-mongo/server/methods/searchcollections.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { ProductSearch, OrderSearch, AccountSearch, Orders, Products, Accounts, Shops } from \"/lib/collections\";\nimport utils from \"./common\";\nimport { transformations } from \"./transformations\";\n\n\nconst requiredFields = {};\nrequiredFields.products = [\"_id\", \"hashtags\", \"shopId\", \"handle\", \"price\", \"isVisible\", \"isSoldOut\", \"isLowQuantity\", \"isBackorder\"];\nrequiredFields.orders = [\"_id\", \"shopId\", \"shippingName\", \"shippingPhone\", \"billingName\", \"userEmails\",\n  \"shippingAddress\", \"billingAddress\", \"shippingStatus\", \"billingStatus\", \"orderTotal\", \"orderDate\"];\nrequiredFields.accounts = [\"_id\", \"shopId\", \"emails\", \"profile\"];\n\n// https://docs.mongodb.com/manual/reference/text-search-languages/#text-search-languages\n// MongoDb supports a subset of languages for analysis of the text data which includes\n// things like stop words and stems. With this language support the quality of the search matches\n// and weighting increases, however without this search will still work and delivery good results.\n// We currently support the languages which are supported by Mongo by default but more languages\n// are available through custom configuration.\nconst supportedLanguages = [\"da\", \"nl\", \"en\", \"fi\", \"fr\", \"de\", \"hu\", \"it\", \"nb\", \"pt\", \"ro\", \"ru\", \"es\", \"sv\", \"tr\"];\n\n\nfunction filterFields(customFields) {\n  const fieldNames = [];\n  const fieldKeys = _.keys(customFields);\n  for (const fieldKey of fieldKeys) {\n    if (customFields[fieldKey]) {\n      fieldNames.push(fieldKey);\n    }\n  }\n  return fieldNames;\n}\n\n// get the weights for all enabled fields\nfunction getScores(customFields, settings, collection = \"products\") {\n  const weightObject = {};\n  for (const weight of _.keys(settings[collection].weights)) {\n    if (_.includes(customFields, weight)) {\n      weightObject[weight] = settings[collection].weights[weight];\n    }\n  }\n  return weightObject;\n}\n\nfunction getSearchLanguage() {\n  const shopId = Reaction.getShopId();\n  const shopLanguage = Shops.findOne(shopId).language;\n  if (_.includes(supportedLanguages, shopLanguage)) {\n    return { default_language: shopLanguage };\n  }\n  return { default_language: \"en\" };\n}\n\nexport function getSearchParameters(collection = \"products\") {\n  const settings = utils.getPackageSettings();\n  const customFields = filterFields(settings[collection].includes);\n  const fieldSet = requiredFields[collection].concat(customFields);\n  const weightObject = getScores(customFields, settings);\n  return { fieldSet: fieldSet, weightObject: weightObject, customFields: customFields };\n}\n\nexport function buildProductSearchRecord(productId) {\n  const product = Products.findOne(productId);\n  if (product.type === \"simple\") {\n    const { fieldSet } = getSearchParameters();\n    const productRecord = {};\n    for (const field of fieldSet) {\n      if (transformations.products[field]) {\n        productRecord[field] = transformations.products[field](product[field]);\n      } else {\n        productRecord[field] = product[field];\n      }\n    }\n    const productSearchRecord = ProductSearch.insert(productRecord);\n    ensureProductSearchIndex();\n    return productSearchRecord;\n  }\n  return undefined;\n}\n\nexport function buildProductSearch(cb) {\n  check(cb, Match.Optional(Function));\n  Logger.debug(\"Start (re)Building ProductSearch Collection\");\n  ProductSearch.remove({});\n  const { fieldSet, weightObject, customFields } = getSearchParameters();\n  const products = Products.find({ type: \"simple\" }).fetch();\n  for (const product of products) {\n    const productRecord = {};\n    for (const field of fieldSet) {\n      if (transformations.products[field]) {\n        productRecord[field] = transformations.products[field](product[field]);\n      } else {\n        productRecord[field] = product[field];\n      }\n    }\n    ProductSearch.insert(productRecord);\n  }\n  const indexObject = {};\n  for (const field of customFields) {\n    indexObject[field] = \"text\";\n  }\n\n  const rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.dropIndexes(\"*\");\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n  if (cb) {\n    cb();\n  }\n}\n\n// we build this immediately on startup so that search will not throw an error\nexport function buildEmptyProductSearch() {\n  const { weightObject, customFields } = getSearchParameters();\n  const indexObject = {};\n  for (const field of customFields) {\n    indexObject[field] = \"text\";\n  }\n  const rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.dropIndexes(\"*\");\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n}\n\nexport function rebuildProductSearchIndex(cb) {\n  check(cb, Match.Optional(Function));\n  const { customFields, weightObject } = getSearchParameters();\n  const indexObject = {};\n  for (const field of customFields) {\n    indexObject[field] = \"text\";\n  }\n  const rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.dropIndexes(\"*\");\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n  if (cb) {\n    cb();\n  }\n}\n\n// this only creates the index if it doesn't already exist, `ensureIndex` is deprecated\nexport function ensureProductSearchIndex() {\n  const { customFields, weightObject } = getSearchParameters();\n  const indexObject = {};\n  for (const field of customFields) {\n    indexObject[field] = \"text\";\n  }\n  const rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n}\n\nexport function buildOrderSearchRecord(orderId) {\n  const order = Orders.findOne(orderId);\n  const user = Meteor.users.findOne(order.userId);\n  const userEmails = [];\n  if (user) {\n    for (const email of user.emails) {\n      userEmails.push(email.address);\n    }\n  }\n  const orderSearch = {};\n  for (const field of requiredFields.orders) {\n    if (transformations.orders[field]) {\n      orderSearch[field] = transformations.orders[field](order[field]);\n    } else {\n      orderSearch[field] = order[field];\n    }\n  }\n  orderSearch.billingName = order.billing[0].address.fullName;\n  orderSearch.billingPhone = _.replace(order.billing[0].address.phone, /\\D/g, \"\");\n  orderSearch.shippingName = order.shipping[0].address.fullName;\n  orderSearch.shippingPhone = _.replace(order.shipping[0].address.phone, /\\D/g, \"\");\n  orderSearch.billingAddress = {\n    address: order.billing[0].address.address1,\n    postal: order.billing[0].address.postal,\n    city: order.billing[0].address.city,\n    region: order.billing[0].address.region,\n    country: order.billing[0].address.country\n  };\n  orderSearch.shippingAddress = {\n    address: order.shipping[0].address.address1,\n    postal: order.shipping[0].address.postal,\n    city: order.shipping[0].address.city,\n    region: order.shipping[0].address.region,\n    country: order.shipping[0].address.country\n  };\n  orderSearch.userEmails = userEmails;\n  orderSearch.orderTotal = order.billing[0].invoice.total;\n  orderSearch.orderDate = moment(order.createdAt).format(\"YYYY/MM/DD\");\n  orderSearch.billingStatus = order.billing[0].paymentMethod.status;\n  if (order.shipping[0].shipped) {\n    orderSearch.shippingStatus = \"Shipped\";\n  } else if (order.shipping[0].packed) {\n    orderSearch.shippingStatus = \"Packed\";\n  } else {\n    orderSearch.shippingStatus = \"New\";\n  }\n  OrderSearch.insert(orderSearch);\n}\n\nexport function buildOrderSearch(cb) {\n  check(cb, Match.Optional(Function));\n  const orders = Orders.find({}).fetch();\n  for (const order of orders) {\n    buildOrderSearchRecord(order._id);\n  }\n  const rawOrderSearchCollection = OrderSearch.rawCollection();\n  rawOrderSearchCollection.dropIndexes(\"*\");\n  rawOrderSearchCollection.createIndex({ shopId: 1, shippingName: 1, billingName: 1, userEmails: 1 });\n  if (cb) {\n    cb();\n  }\n}\n\n\nexport function buildAccountSearch(cb) {\n  check(cb, Match.Optional(Function));\n  AccountSearch.remove({});\n  const accounts = Accounts.find({}).fetch();\n  for (const account of accounts) {\n    buildAccountSearchRecord(account._id);\n  }\n  const rawAccountSearchCollection = AccountSearch.rawCollection();\n  rawAccountSearchCollection.dropIndexes(\"*\");\n  rawAccountSearchCollection.createIndex({ shopId: 1, emails: 1 });\n  if (cb) {\n    cb();\n  }\n}\n\nexport function buildAccountSearchRecord(accountId) {\n  Logger.debug(\"building account search record\");\n  check(accountId, String);\n  const account = Accounts.findOne(accountId);\n  // let's ignore anonymous accounts\n  if (account.emails.length) {\n    const accountSearch = {};\n    for (const field of requiredFields.accounts) {\n      if (transformations.accounts[field]) {\n        accountSearch[field] = transformations.accounts[field](account[field]);\n      } else {\n        accountSearch[field] = account[field];\n      }\n    }\n    AccountSearch.insert(accountSearch);\n    const rawAccountSearchCollection = AccountSearch.rawCollection();\n    rawAccountSearchCollection.createIndex({ shopId: 1, emails: 1 });\n  }\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/search-mongo/server/methods/searchcollections.js.map","sourceFileName":"/imports/plugins/included/search-mongo/server/methods/searchcollections.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"searchcollections"},"ignored":false,"code":"module.export({\n  getSearchParameters: function () {\n    return getSearchParameters;\n  },\n  buildProductSearchRecord: function () {\n    return buildProductSearchRecord;\n  },\n  buildProductSearch: function () {\n    return buildProductSearch;\n  },\n  buildEmptyProductSearch: function () {\n    return buildEmptyProductSearch;\n  },\n  rebuildProductSearchIndex: function () {\n    return rebuildProductSearchIndex;\n  },\n  ensureProductSearchIndex: function () {\n    return ensureProductSearchIndex;\n  },\n  buildOrderSearchRecord: function () {\n    return buildOrderSearchRecord;\n  },\n  buildOrderSearch: function () {\n    return buildOrderSearch;\n  },\n  buildAccountSearch: function () {\n    return buildAccountSearch;\n  },\n  buildAccountSearchRecord: function () {\n    return buildAccountSearchRecord;\n  }\n});\n\nvar _replace = void 0;\n\nmodule.importSync(\"lodash/replace\", {\n  \"default\": function (v) {\n    _replace = v;\n  }\n}, 0);\n\nvar _includes = void 0;\n\nmodule.importSync(\"lodash/includes\", {\n  \"default\": function (v) {\n    _includes = v;\n  }\n}, 1);\n\nvar _keys = void 0;\n\nmodule.importSync(\"lodash/keys\", {\n  \"default\": function (v) {\n    _keys = v;\n  }\n}, 2);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 3);\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 4);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 5);\nvar ProductSearch = void 0,\n    OrderSearch = void 0,\n    AccountSearch = void 0,\n    Orders = void 0,\n    Products = void 0,\n    Accounts = void 0,\n    Shops = void 0;\nmodule.importSync(\"/lib/collections\", {\n  ProductSearch: function (v) {\n    ProductSearch = v;\n  },\n  OrderSearch: function (v) {\n    OrderSearch = v;\n  },\n  AccountSearch: function (v) {\n    AccountSearch = v;\n  },\n  Orders: function (v) {\n    Orders = v;\n  },\n  Products: function (v) {\n    Products = v;\n  },\n  Accounts: function (v) {\n    Accounts = v;\n  },\n  Shops: function (v) {\n    Shops = v;\n  }\n}, 6);\nvar utils = void 0;\nmodule.importSync(\"./common\", {\n  \"default\": function (v) {\n    utils = v;\n  }\n}, 7);\nvar transformations = void 0;\nmodule.importSync(\"./transformations\", {\n  transformations: function (v) {\n    transformations = v;\n  }\n}, 8);\nvar requiredFields = {};\nrequiredFields.products = [\"_id\", \"hashtags\", \"shopId\", \"handle\", \"price\", \"isVisible\", \"isSoldOut\", \"isLowQuantity\", \"isBackorder\"];\nrequiredFields.orders = [\"_id\", \"shopId\", \"shippingName\", \"shippingPhone\", \"billingName\", \"userEmails\", \"shippingAddress\", \"billingAddress\", \"shippingStatus\", \"billingStatus\", \"orderTotal\", \"orderDate\"];\nrequiredFields.accounts = [\"_id\", \"shopId\", \"emails\", \"profile\"]; // https://docs.mongodb.com/manual/reference/text-search-languages/#text-search-languages\n// MongoDb supports a subset of languages for analysis of the text data which includes\n// things like stop words and stems. With this language support the quality of the search matches\n// and weighting increases, however without this search will still work and delivery good results.\n// We currently support the languages which are supported by Mongo by default but more languages\n// are available through custom configuration.\n\nvar supportedLanguages = [\"da\", \"nl\", \"en\", \"fi\", \"fr\", \"de\", \"hu\", \"it\", \"nb\", \"pt\", \"ro\", \"ru\", \"es\", \"sv\", \"tr\"];\n\nfunction filterFields(customFields) {\n  var fieldNames = [];\n\n  var fieldKeys = _keys(customFields);\n\n  for (var _iterator = fieldKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var fieldKey = _ref;\n\n    if (customFields[fieldKey]) {\n      fieldNames.push(fieldKey);\n    }\n  }\n\n  return fieldNames;\n} // get the weights for all enabled fields\n\n\nfunction getScores(customFields, settings) {\n  var collection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"products\";\n  var weightObject = {};\n\n  for (var _iterator2 = _keys(settings[collection].weights), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _ref2;\n\n    if (_isArray2) {\n      if (_i2 >= _iterator2.length) break;\n      _ref2 = _iterator2[_i2++];\n    } else {\n      _i2 = _iterator2.next();\n      if (_i2.done) break;\n      _ref2 = _i2.value;\n    }\n\n    var weight = _ref2;\n\n    if (_includes(customFields, weight)) {\n      weightObject[weight] = settings[collection].weights[weight];\n    }\n  }\n\n  return weightObject;\n}\n\nfunction getSearchLanguage() {\n  var shopId = Reaction.getShopId();\n  var shopLanguage = Shops.findOne(shopId).language;\n\n  if (_includes(supportedLanguages, shopLanguage)) {\n    return {\n      default_language: shopLanguage\n    };\n  }\n\n  return {\n    default_language: \"en\"\n  };\n}\n\nfunction getSearchParameters() {\n  var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"products\";\n  var settings = utils.getPackageSettings();\n  var customFields = filterFields(settings[collection].includes);\n  var fieldSet = requiredFields[collection].concat(customFields);\n  var weightObject = getScores(customFields, settings);\n  return {\n    fieldSet: fieldSet,\n    weightObject: weightObject,\n    customFields: customFields\n  };\n}\n\nfunction buildProductSearchRecord(productId) {\n  var product = Products.findOne(productId);\n\n  if (product.type === \"simple\") {\n    var _getSearchParameters = getSearchParameters(),\n        fieldSet = _getSearchParameters.fieldSet;\n\n    var productRecord = {};\n\n    for (var _iterator3 = fieldSet, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var field = _ref3;\n\n      if (transformations.products[field]) {\n        productRecord[field] = transformations.products[field](product[field]);\n      } else {\n        productRecord[field] = product[field];\n      }\n    }\n\n    var productSearchRecord = ProductSearch.insert(productRecord);\n    ensureProductSearchIndex();\n    return productSearchRecord;\n  }\n\n  return undefined;\n}\n\nfunction buildProductSearch(cb) {\n  check(cb, Match.Optional(Function));\n  Logger.debug(\"Start (re)Building ProductSearch Collection\");\n  ProductSearch.remove({});\n\n  var _getSearchParameters2 = getSearchParameters(),\n      fieldSet = _getSearchParameters2.fieldSet,\n      weightObject = _getSearchParameters2.weightObject,\n      customFields = _getSearchParameters2.customFields;\n\n  var products = Products.find({\n    type: \"simple\"\n  }).fetch();\n\n  for (var _iterator4 = products, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray4) {\n      if (_i4 >= _iterator4.length) break;\n      _ref4 = _iterator4[_i4++];\n    } else {\n      _i4 = _iterator4.next();\n      if (_i4.done) break;\n      _ref4 = _i4.value;\n    }\n\n    var product = _ref4;\n    var productRecord = {};\n\n    for (var _iterator6 = fieldSet, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {\n      var _ref6;\n\n      if (_isArray6) {\n        if (_i6 >= _iterator6.length) break;\n        _ref6 = _iterator6[_i6++];\n      } else {\n        _i6 = _iterator6.next();\n        if (_i6.done) break;\n        _ref6 = _i6.value;\n      }\n\n      var _field = _ref6;\n\n      if (transformations.products[_field]) {\n        productRecord[_field] = transformations.products[_field](product[_field]);\n      } else {\n        productRecord[_field] = product[_field];\n      }\n    }\n\n    ProductSearch.insert(productRecord);\n  }\n\n  var indexObject = {};\n\n  for (var _iterator5 = customFields, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n    var _ref5;\n\n    if (_isArray5) {\n      if (_i5 >= _iterator5.length) break;\n      _ref5 = _iterator5[_i5++];\n    } else {\n      _i5 = _iterator5.next();\n      if (_i5.done) break;\n      _ref5 = _i5.value;\n    }\n\n    var field = _ref5;\n    indexObject[field] = \"text\";\n  }\n\n  var rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.dropIndexes(\"*\");\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n\n  if (cb) {\n    cb();\n  }\n}\n\nfunction buildEmptyProductSearch() {\n  var _getSearchParameters3 = getSearchParameters(),\n      weightObject = _getSearchParameters3.weightObject,\n      customFields = _getSearchParameters3.customFields;\n\n  var indexObject = {};\n\n  for (var _iterator7 = customFields, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {\n    var _ref7;\n\n    if (_isArray7) {\n      if (_i7 >= _iterator7.length) break;\n      _ref7 = _iterator7[_i7++];\n    } else {\n      _i7 = _iterator7.next();\n      if (_i7.done) break;\n      _ref7 = _i7.value;\n    }\n\n    var field = _ref7;\n    indexObject[field] = \"text\";\n  }\n\n  var rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.dropIndexes(\"*\");\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n}\n\nfunction rebuildProductSearchIndex(cb) {\n  check(cb, Match.Optional(Function));\n\n  var _getSearchParameters4 = getSearchParameters(),\n      customFields = _getSearchParameters4.customFields,\n      weightObject = _getSearchParameters4.weightObject;\n\n  var indexObject = {};\n\n  for (var _iterator8 = customFields, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {\n    var _ref8;\n\n    if (_isArray8) {\n      if (_i8 >= _iterator8.length) break;\n      _ref8 = _iterator8[_i8++];\n    } else {\n      _i8 = _iterator8.next();\n      if (_i8.done) break;\n      _ref8 = _i8.value;\n    }\n\n    var field = _ref8;\n    indexObject[field] = \"text\";\n  }\n\n  var rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.dropIndexes(\"*\");\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n\n  if (cb) {\n    cb();\n  }\n}\n\nfunction ensureProductSearchIndex() {\n  var _getSearchParameters5 = getSearchParameters(),\n      customFields = _getSearchParameters5.customFields,\n      weightObject = _getSearchParameters5.weightObject;\n\n  var indexObject = {};\n\n  for (var _iterator9 = customFields, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {\n    var _ref9;\n\n    if (_isArray9) {\n      if (_i9 >= _iterator9.length) break;\n      _ref9 = _iterator9[_i9++];\n    } else {\n      _i9 = _iterator9.next();\n      if (_i9.done) break;\n      _ref9 = _i9.value;\n    }\n\n    var field = _ref9;\n    indexObject[field] = \"text\";\n  }\n\n  var rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n}\n\nfunction buildOrderSearchRecord(orderId) {\n  var order = Orders.findOne(orderId);\n  var user = Meteor.users.findOne(order.userId);\n  var userEmails = [];\n\n  if (user) {\n    for (var _iterator10 = user.emails, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;) {\n      var _ref10;\n\n      if (_isArray10) {\n        if (_i10 >= _iterator10.length) break;\n        _ref10 = _iterator10[_i10++];\n      } else {\n        _i10 = _iterator10.next();\n        if (_i10.done) break;\n        _ref10 = _i10.value;\n      }\n\n      var email = _ref10;\n      userEmails.push(email.address);\n    }\n  }\n\n  var orderSearch = {};\n\n  for (var _iterator11 = requiredFields.orders, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();;) {\n    var _ref11;\n\n    if (_isArray11) {\n      if (_i11 >= _iterator11.length) break;\n      _ref11 = _iterator11[_i11++];\n    } else {\n      _i11 = _iterator11.next();\n      if (_i11.done) break;\n      _ref11 = _i11.value;\n    }\n\n    var field = _ref11;\n\n    if (transformations.orders[field]) {\n      orderSearch[field] = transformations.orders[field](order[field]);\n    } else {\n      orderSearch[field] = order[field];\n    }\n  }\n\n  orderSearch.billingName = order.billing[0].address.fullName;\n  orderSearch.billingPhone = _replace(order.billing[0].address.phone, /\\D/g, \"\");\n  orderSearch.shippingName = order.shipping[0].address.fullName;\n  orderSearch.shippingPhone = _replace(order.shipping[0].address.phone, /\\D/g, \"\");\n  orderSearch.billingAddress = {\n    address: order.billing[0].address.address1,\n    postal: order.billing[0].address.postal,\n    city: order.billing[0].address.city,\n    region: order.billing[0].address.region,\n    country: order.billing[0].address.country\n  };\n  orderSearch.shippingAddress = {\n    address: order.shipping[0].address.address1,\n    postal: order.shipping[0].address.postal,\n    city: order.shipping[0].address.city,\n    region: order.shipping[0].address.region,\n    country: order.shipping[0].address.country\n  };\n  orderSearch.userEmails = userEmails;\n  orderSearch.orderTotal = order.billing[0].invoice.total;\n  orderSearch.orderDate = moment(order.createdAt).format(\"YYYY/MM/DD\");\n  orderSearch.billingStatus = order.billing[0].paymentMethod.status;\n\n  if (order.shipping[0].shipped) {\n    orderSearch.shippingStatus = \"Shipped\";\n  } else if (order.shipping[0].packed) {\n    orderSearch.shippingStatus = \"Packed\";\n  } else {\n    orderSearch.shippingStatus = \"New\";\n  }\n\n  OrderSearch.insert(orderSearch);\n}\n\nfunction buildOrderSearch(cb) {\n  check(cb, Match.Optional(Function));\n  var orders = Orders.find({}).fetch();\n\n  for (var _iterator12 = orders, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();;) {\n    var _ref12;\n\n    if (_isArray12) {\n      if (_i12 >= _iterator12.length) break;\n      _ref12 = _iterator12[_i12++];\n    } else {\n      _i12 = _iterator12.next();\n      if (_i12.done) break;\n      _ref12 = _i12.value;\n    }\n\n    var order = _ref12;\n    buildOrderSearchRecord(order._id);\n  }\n\n  var rawOrderSearchCollection = OrderSearch.rawCollection();\n  rawOrderSearchCollection.dropIndexes(\"*\");\n  rawOrderSearchCollection.createIndex({\n    shopId: 1,\n    shippingName: 1,\n    billingName: 1,\n    userEmails: 1\n  });\n\n  if (cb) {\n    cb();\n  }\n}\n\nfunction buildAccountSearch(cb) {\n  check(cb, Match.Optional(Function));\n  AccountSearch.remove({});\n  var accounts = Accounts.find({}).fetch();\n\n  for (var _iterator13 = accounts, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();;) {\n    var _ref13;\n\n    if (_isArray13) {\n      if (_i13 >= _iterator13.length) break;\n      _ref13 = _iterator13[_i13++];\n    } else {\n      _i13 = _iterator13.next();\n      if (_i13.done) break;\n      _ref13 = _i13.value;\n    }\n\n    var account = _ref13;\n    buildAccountSearchRecord(account._id);\n  }\n\n  var rawAccountSearchCollection = AccountSearch.rawCollection();\n  rawAccountSearchCollection.dropIndexes(\"*\");\n  rawAccountSearchCollection.createIndex({\n    shopId: 1,\n    emails: 1\n  });\n\n  if (cb) {\n    cb();\n  }\n}\n\nfunction buildAccountSearchRecord(accountId) {\n  Logger.debug(\"building account search record\");\n  check(accountId, String);\n  var account = Accounts.findOne(accountId); // let's ignore anonymous accounts\n\n  if (account.emails.length) {\n    var accountSearch = {};\n\n    for (var _iterator14 = requiredFields.accounts, _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();;) {\n      var _ref14;\n\n      if (_isArray14) {\n        if (_i14 >= _iterator14.length) break;\n        _ref14 = _iterator14[_i14++];\n      } else {\n        _i14 = _iterator14.next();\n        if (_i14.done) break;\n        _ref14 = _i14.value;\n      }\n\n      var field = _ref14;\n\n      if (transformations.accounts[field]) {\n        accountSearch[field] = transformations.accounts[field](account[field]);\n      } else {\n        accountSearch[field] = account[field];\n      }\n    }\n\n    AccountSearch.insert(accountSearch);\n    var rawAccountSearchCollection = AccountSearch.rawCollection();\n    rawAccountSearchCollection.createIndex({\n      shopId: 1,\n      emails: 1\n    });\n  }\n}","map":{"version":3,"sources":["/imports/plugins/included/search-mongo/server/methods/searchcollections.js"],"names":["Meteor","check","Match","Reaction","Logger","ProductSearch","OrderSearch","AccountSearch","Orders","Products","Accounts","Shops","utils","transformations","requiredFields","products","orders","accounts","supportedLanguages","filterFields","customFields","fieldNames","fieldKeys","fieldKey","push","getScores","settings","collection","weightObject","weight","weights","getSearchLanguage","shopId","getShopId","shopLanguage","findOne","language","default_language","getSearchParameters","getPackageSettings","includes","fieldSet","concat","buildProductSearchRecord","productId","product","type","productRecord","field","productSearchRecord","insert","ensureProductSearchIndex","undefined","buildProductSearch","cb","Optional","Function","debug","remove","find","fetch","indexObject","rawProductSearchCollection","rawCollection","dropIndexes","createIndex","buildEmptyProductSearch","rebuildProductSearchIndex","buildOrderSearchRecord","orderId","order","user","users","userId","userEmails","email","emails","address","orderSearch","billingName","billing","fullName","billingPhone","phone","shippingName","shipping","shippingPhone","billingAddress","address1","postal","city","region","country","shippingAddress","orderTotal","invoice","total","orderDate","moment","createdAt","format","billingStatus","paymentMethod","status","shipped","shippingStatus","packed","buildOrderSearch","_id","rawOrderSearchCollection","buildAccountSearch","account","buildAccountSearchRecord","rawAccountSearchCollection","accountId","String","length","accountSearch"],"mappings":"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","file":"/imports/plugins/included/search-mongo/server/methods/searchcollections.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { ProductSearch, OrderSearch, AccountSearch, Orders, Products, Accounts, Shops } from \"/lib/collections\";\nimport utils from \"./common\";\nimport { transformations } from \"./transformations\";\n\n\nconst requiredFields = {};\nrequiredFields.products = [\"_id\", \"hashtags\", \"shopId\", \"handle\", \"price\", \"isVisible\", \"isSoldOut\", \"isLowQuantity\", \"isBackorder\"];\nrequiredFields.orders = [\"_id\", \"shopId\", \"shippingName\", \"shippingPhone\", \"billingName\", \"userEmails\",\n  \"shippingAddress\", \"billingAddress\", \"shippingStatus\", \"billingStatus\", \"orderTotal\", \"orderDate\"];\nrequiredFields.accounts = [\"_id\", \"shopId\", \"emails\", \"profile\"];\n\n// https://docs.mongodb.com/manual/reference/text-search-languages/#text-search-languages\n// MongoDb supports a subset of languages for analysis of the text data which includes\n// things like stop words and stems. With this language support the quality of the search matches\n// and weighting increases, however without this search will still work and delivery good results.\n// We currently support the languages which are supported by Mongo by default but more languages\n// are available through custom configuration.\nconst supportedLanguages = [\"da\", \"nl\", \"en\", \"fi\", \"fr\", \"de\", \"hu\", \"it\", \"nb\", \"pt\", \"ro\", \"ru\", \"es\", \"sv\", \"tr\"];\n\n\nfunction filterFields(customFields) {\n  const fieldNames = [];\n  const fieldKeys = _.keys(customFields);\n  for (const fieldKey of fieldKeys) {\n    if (customFields[fieldKey]) {\n      fieldNames.push(fieldKey);\n    }\n  }\n  return fieldNames;\n}\n\n// get the weights for all enabled fields\nfunction getScores(customFields, settings, collection = \"products\") {\n  const weightObject = {};\n  for (const weight of _.keys(settings[collection].weights)) {\n    if (_.includes(customFields, weight)) {\n      weightObject[weight] = settings[collection].weights[weight];\n    }\n  }\n  return weightObject;\n}\n\nfunction getSearchLanguage() {\n  const shopId = Reaction.getShopId();\n  const shopLanguage = Shops.findOne(shopId).language;\n  if (_.includes(supportedLanguages, shopLanguage)) {\n    return { default_language: shopLanguage };\n  }\n  return { default_language: \"en\" };\n}\n\nexport function getSearchParameters(collection = \"products\") {\n  const settings = utils.getPackageSettings();\n  const customFields = filterFields(settings[collection].includes);\n  const fieldSet = requiredFields[collection].concat(customFields);\n  const weightObject = getScores(customFields, settings);\n  return { fieldSet: fieldSet, weightObject: weightObject, customFields: customFields };\n}\n\nexport function buildProductSearchRecord(productId) {\n  const product = Products.findOne(productId);\n  if (product.type === \"simple\") {\n    const { fieldSet } = getSearchParameters();\n    const productRecord = {};\n    for (const field of fieldSet) {\n      if (transformations.products[field]) {\n        productRecord[field] = transformations.products[field](product[field]);\n      } else {\n        productRecord[field] = product[field];\n      }\n    }\n    const productSearchRecord = ProductSearch.insert(productRecord);\n    ensureProductSearchIndex();\n    return productSearchRecord;\n  }\n  return undefined;\n}\n\nexport function buildProductSearch(cb) {\n  check(cb, Match.Optional(Function));\n  Logger.debug(\"Start (re)Building ProductSearch Collection\");\n  ProductSearch.remove({});\n  const { fieldSet, weightObject, customFields } = getSearchParameters();\n  const products = Products.find({ type: \"simple\" }).fetch();\n  for (const product of products) {\n    const productRecord = {};\n    for (const field of fieldSet) {\n      if (transformations.products[field]) {\n        productRecord[field] = transformations.products[field](product[field]);\n      } else {\n        productRecord[field] = product[field];\n      }\n    }\n    ProductSearch.insert(productRecord);\n  }\n  const indexObject = {};\n  for (const field of customFields) {\n    indexObject[field] = \"text\";\n  }\n\n  const rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.dropIndexes(\"*\");\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n  if (cb) {\n    cb();\n  }\n}\n\n// we build this immediately on startup so that search will not throw an error\nexport function buildEmptyProductSearch() {\n  const { weightObject, customFields } = getSearchParameters();\n  const indexObject = {};\n  for (const field of customFields) {\n    indexObject[field] = \"text\";\n  }\n  const rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.dropIndexes(\"*\");\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n}\n\nexport function rebuildProductSearchIndex(cb) {\n  check(cb, Match.Optional(Function));\n  const { customFields, weightObject } = getSearchParameters();\n  const indexObject = {};\n  for (const field of customFields) {\n    indexObject[field] = \"text\";\n  }\n  const rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.dropIndexes(\"*\");\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n  if (cb) {\n    cb();\n  }\n}\n\n// this only creates the index if it doesn't already exist, `ensureIndex` is deprecated\nexport function ensureProductSearchIndex() {\n  const { customFields, weightObject } = getSearchParameters();\n  const indexObject = {};\n  for (const field of customFields) {\n    indexObject[field] = \"text\";\n  }\n  const rawProductSearchCollection = ProductSearch.rawCollection();\n  rawProductSearchCollection.createIndex(indexObject, weightObject, getSearchLanguage());\n}\n\nexport function buildOrderSearchRecord(orderId) {\n  const order = Orders.findOne(orderId);\n  const user = Meteor.users.findOne(order.userId);\n  const userEmails = [];\n  if (user) {\n    for (const email of user.emails) {\n      userEmails.push(email.address);\n    }\n  }\n  const orderSearch = {};\n  for (const field of requiredFields.orders) {\n    if (transformations.orders[field]) {\n      orderSearch[field] = transformations.orders[field](order[field]);\n    } else {\n      orderSearch[field] = order[field];\n    }\n  }\n  orderSearch.billingName = order.billing[0].address.fullName;\n  orderSearch.billingPhone = _.replace(order.billing[0].address.phone, /\\D/g, \"\");\n  orderSearch.shippingName = order.shipping[0].address.fullName;\n  orderSearch.shippingPhone = _.replace(order.shipping[0].address.phone, /\\D/g, \"\");\n  orderSearch.billingAddress = {\n    address: order.billing[0].address.address1,\n    postal: order.billing[0].address.postal,\n    city: order.billing[0].address.city,\n    region: order.billing[0].address.region,\n    country: order.billing[0].address.country\n  };\n  orderSearch.shippingAddress = {\n    address: order.shipping[0].address.address1,\n    postal: order.shipping[0].address.postal,\n    city: order.shipping[0].address.city,\n    region: order.shipping[0].address.region,\n    country: order.shipping[0].address.country\n  };\n  orderSearch.userEmails = userEmails;\n  orderSearch.orderTotal = order.billing[0].invoice.total;\n  orderSearch.orderDate = moment(order.createdAt).format(\"YYYY/MM/DD\");\n  orderSearch.billingStatus = order.billing[0].paymentMethod.status;\n  if (order.shipping[0].shipped) {\n    orderSearch.shippingStatus = \"Shipped\";\n  } else if (order.shipping[0].packed) {\n    orderSearch.shippingStatus = \"Packed\";\n  } else {\n    orderSearch.shippingStatus = \"New\";\n  }\n  OrderSearch.insert(orderSearch);\n}\n\nexport function buildOrderSearch(cb) {\n  check(cb, Match.Optional(Function));\n  const orders = Orders.find({}).fetch();\n  for (const order of orders) {\n    buildOrderSearchRecord(order._id);\n  }\n  const rawOrderSearchCollection = OrderSearch.rawCollection();\n  rawOrderSearchCollection.dropIndexes(\"*\");\n  rawOrderSearchCollection.createIndex({ shopId: 1, shippingName: 1, billingName: 1, userEmails: 1 });\n  if (cb) {\n    cb();\n  }\n}\n\n\nexport function buildAccountSearch(cb) {\n  check(cb, Match.Optional(Function));\n  AccountSearch.remove({});\n  const accounts = Accounts.find({}).fetch();\n  for (const account of accounts) {\n    buildAccountSearchRecord(account._id);\n  }\n  const rawAccountSearchCollection = AccountSearch.rawCollection();\n  rawAccountSearchCollection.dropIndexes(\"*\");\n  rawAccountSearchCollection.createIndex({ shopId: 1, emails: 1 });\n  if (cb) {\n    cb();\n  }\n}\n\nexport function buildAccountSearchRecord(accountId) {\n  Logger.debug(\"building account search record\");\n  check(accountId, String);\n  const account = Accounts.findOne(accountId);\n  // let's ignore anonymous accounts\n  if (account.emails.length) {\n    const accountSearch = {};\n    for (const field of requiredFields.accounts) {\n      if (transformations.accounts[field]) {\n        accountSearch[field] = transformations.accounts[field](account[field]);\n      } else {\n        accountSearch[field] = account[field];\n      }\n    }\n    AccountSearch.insert(accountSearch);\n    const rawAccountSearchCollection = AccountSearch.rawCollection();\n    rawAccountSearchCollection.createIndex({ shopId: 1, emails: 1 });\n  }\n}\n"]},"hash":"3e3c1e38844c6562a9903ff5ef2a31e8cdc5b688"}
