{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/indexOf","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_indexOf"}]},{"source":"/lib/collections","imported":["Products"],"specifiers":[{"kind":"named","imported":"Products","local":"Products"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/startup/packages.js","filenameRelative":"/server/startup/packages.js","inputSourceMap":{"version":3,"sources":["/server/startup/packages.js"],"names":["Products","before","update","userId","product","fieldNames","modifier","$addToSet","positions","createdAt","Date","updatedAt","$each","position","hasOwnProperty","call"],"mappings":";;;;;;;;;;;;GACA,AAAS,AAAT,AAAyB,AAAzB,AAEA,AAAe,AAAY,AACzB;;AADyB,AAQzB,AARyB,AAWzB,AACA;;;;;MAAS,AAAT,AAAgB,AAAhB,AAAuB,AAAC,AAAD,AAAS,AAAT,AAAkB,AAAlB,AAA8B,AAA9B,AAA2C,AAChE,AACA,AAAI,AAAU,AAAV,AAAsB,AAAtB,AAAuC,AAAC,AAA5C,AAA+C,AAC7C;;UAAI,AAAS,AAAb,AAAwB,AACtB;WAAI,OAAS,iBAAT,AAAmB,QAAvB,AAAkC,+BAChC;AAAY,AAAI,AAAJ,AAAZ,AACA;iBAAY,AAAI,YAAJ,AAAZ;8BACA;YAAI,SAAS,UAAT,AAAmB,WAAnB,AAA6B,AAAjC,AAAwC,AACtC;AAAK,sBAAL,IAAiB,AAAS,AAAT,AAAmB,AAAnB,AAA6B,AAA9C,AAAqD,AACnD;AAAI,AAAG,0BAAH,AAAkB,AAAlB,AAAuB,AAAS,AAAT,AAAmB,AAAnB,AAA6B,AAApD,AACA,AADA,AAAJ,AACe,AACb;;uBAAY,AAAI,UAAJ,AAAZ,iBACA;iBAAY,mDAAI,AAAJ,SAAZ,4BACD;sEACF,kBACF,AARD;AAQO,gCACL;AAAS,4BAAT,AAAmB,IAAnB,AAA6B,AAA7B,AAAyC,AAAzC,AACD;AACF;AACF;iBACF;qDACF,AArBD;AAsBD","file":"/server/startup/packages.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Products } from \"/lib/collections\";\n\nexport default function () {\n  /**\n   * Reaction Collection Hooks\n   * transform collections based on events\n   *\n   * See: https://github.com/matb33/meteor-collection-hooks\n   */\n\n  /**\n   * before product update\n   */\n  // TODO: review this.  not sure this does what it was intended to\n  Products.before.update((userId, product, fieldNames, modifier) => {\n    // handling product positions updates\n    if (_.indexOf(fieldNames, \"positions\") !== -1) {\n      if (modifier.$addToSet) {\n        if (modifier.$addToSet.positions) {\n          createdAt = new Date();\n          updatedAt = new Date();\n          if (modifier.$addToSet.positions.$each) {\n            for (position in modifier.$addToSet.positions.$each) {\n              if ({}.hasOwnProperty.call(modifier.$addToSet.positions.$each,\n                  position)) {\n                createdAt = new Date();\n                updatedAt = new Date();\n              }\n            }\n          } else {\n            modifier.$addToSet.positions.updatedAt = updatedAt;\n          }\n        }\n      }\n    }\n  });\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/startup/packages.js.map","sourceFileName":"/server/startup/packages.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"packages"},"ignored":false,"code":"var _indexOf = void 0;\n\nmodule.importSync(\"lodash/indexOf\", {\n  \"default\": function (v) {\n    _indexOf = v;\n  }\n}, 0);\nvar Products = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Products: function (v) {\n    Products = v;\n  }\n}, 1);\nmodule.export(\"default\", exports.default = function () {\n  /**\n   * Reaction Collection Hooks\n   * transform collections based on events\n   *\n   * See: https://github.com/matb33/meteor-collection-hooks\n   */ /**\n       * before product update\n       */ // TODO: review this.  not sure this does what it was intended to\n  Products.before.update(function (userId, product, fieldNames, modifier) {\n    // handling product positions updates\n    if (_indexOf(fieldNames, \"positions\") !== -1) {\n      if (modifier.$addToSet) {\n        if (modifier.$addToSet.positions) {\n          createdAt = new Date();\n          updatedAt = new Date();\n\n          if (modifier.$addToSet.positions.$each) {\n            for (position in meteorBabelHelpers.sanitizeForInObject(modifier.$addToSet.positions.$each)) {\n              if ({}.hasOwnProperty.call(modifier.$addToSet.positions.$each, position)) {\n                createdAt = new Date();\n                updatedAt = new Date();\n              }\n            }\n          } else {\n            modifier.$addToSet.positions.updatedAt = updatedAt;\n          }\n        }\n      }\n    }\n  });\n});","map":{"version":3,"sources":["/server/startup/packages.js"],"names":["Products","before","update","userId","product","fieldNames","modifier","$addToSet","positions","createdAt","Date","updatedAt","$each","position","hasOwnProperty","call"],"mappings":";;;;;;;;;;;;GACA,AAAS,AAAT,AAAyB,AAAzB,AAEA,AAAe,AAAY,AACzB;;AADyB,AAQzB,AARyB,AAWzB,AACA;;;;;MAAS,AAAT,AAAgB,AAAhB,AAAuB,AAAC,AAAD,AAAS,AAAT,AAAkB,AAAlB,AAA8B,AAA9B,AAA2C,AAChE,AACA,AAAI,AAAU,AAAV,AAAsB,AAAtB,AAAuC,AAAC,AAA5C,AAA+C,AAC7C;;UAAI,AAAS,AAAb,AAAwB,AACtB;WAAI,OAAS,iBAAT,AAAmB,QAAvB,AAAkC,+BAChC;AAAY,AAAI,AAAJ,AAAZ,AACA;iBAAY,AAAI,YAAJ,AAAZ;8BACA;YAAI,SAAS,UAAT,AAAmB,WAAnB,AAA6B,AAAjC,AAAwC,AACtC;AAAK,sBAAL,IAAiB,AAAS,AAAT,AAAmB,AAAnB,AAA6B,AAA9C,AAAqD,AACnD;AAAI,AAAG,0BAAH,AAAkB,AAAlB,AAAuB,AAAS,AAAT,AAAmB,AAAnB,AAA6B,AAApD,AACA,AADA,AAAJ,AACe,AACb;;uBAAY,AAAI,UAAJ,AAAZ,iBACA;iBAAY,mDAAI,AAAJ,SAAZ,4BACD;sEACF,kBACF,AARD;AAQO,gCACL;AAAS,4BAAT,AAAmB,IAAnB,AAA6B,AAA7B,AAAyC,AAAzC,AACD;AACF;AACF;iBACF;qDACF,AArBD;AAsBD","file":"/server/startup/packages.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Products } from \"/lib/collections\";\n\nexport default function () {\n  /**\n   * Reaction Collection Hooks\n   * transform collections based on events\n   *\n   * See: https://github.com/matb33/meteor-collection-hooks\n   */\n\n  /**\n   * before product update\n   */\n  // TODO: review this.  not sure this does what it was intended to\n  Products.before.update((userId, product, fieldNames, modifier) => {\n    // handling product positions updates\n    if (_.indexOf(fieldNames, \"positions\") !== -1) {\n      if (modifier.$addToSet) {\n        if (modifier.$addToSet.positions) {\n          createdAt = new Date();\n          updatedAt = new Date();\n          if (modifier.$addToSet.positions.$each) {\n            for (position in modifier.$addToSet.positions.$each) {\n              if ({}.hasOwnProperty.call(modifier.$addToSet.positions.$each,\n                  position)) {\n                createdAt = new Date();\n                updatedAt = new Date();\n              }\n            }\n          } else {\n            modifier.$addToSet.positions.updatedAt = updatedAt;\n          }\n        }\n      }\n    }\n  });\n}\n"]},"hash":"72f213d372b06d23acc09d7814e4b7c1bc105590"}
