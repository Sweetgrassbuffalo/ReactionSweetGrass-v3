{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/client/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"/client/modules/core/helpers/globals","imported":["getCardType"],"specifiers":[{"kind":"named","imported":"getCardType","local":"getCardType"}]},{"source":"/lib/collections","imported":["Cart","Shops","Packages"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Shops","local":"Shops"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"meteor/aldeed:autoform","imported":["AutoForm"],"specifiers":[{"kind":"named","imported":"AutoForm","local":"AutoForm"}]},{"source":"../../lib/collections/schemas","imported":["AuthNetPayment"],"specifiers":[{"kind":"named","imported":"AuthNetPayment","local":"AuthNetPayment"}]},{"source":"../api","imported":["AuthNet"],"specifiers":[{"kind":"named","imported":"AuthNet","local":"AuthNet"}]},{"source":"./authnet.html","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/payments-authnet/client/checkout/authnet.js","filenameRelative":"/imports/plugins/included/payments-authnet/client/checkout/authnet.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-authnet/client/checkout/authnet.js"],"names":["Meteor","Reaction","Logger","getCardType","Cart","Shops","Packages","AutoForm","AuthNetPayment","AuthNet","uiEnd","tpl","buttonText","$","removeAttr","text","addClass","paymentAlert","errorMessage","removeClass","hidePaymentAlert","handleAuthNetSubmitError","error","fatal","submitting","Template","authnetPaymentForm","helpers","addHooks","onSubmit","doc","template","payerNamePieces","payerName","split","form","first_name","last_name","number","cardNumber","expire_date","expireMonth","toString","expireYear","slice","cvv2","cvv","type","storedCard","charAt","toUpperCase","cardInfo","expirationYear","expirationMonth","paymentInfo","total","findOne","cartTotal","currency","authorize","transaction","normalizedMode","normalizedStatus","transId","transactionId","subscribe","packageData","name","shopId","getShopId","_original","responseCode","paymentMethod","processor","paymentPackageId","_id","paymentSettingsKey","registry","settingsKey","method","amount","status","mode","createdAt","Date","updatedAt","transactions","call","beginSubmit","attr","endSubmit"],"mappings":"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","file":"/imports/plugins/included/payments-authnet/client/checkout/authnet.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, Logger } from \"/client/api\";\nimport { getCardType } from \"/client/modules/core/helpers/globals\";\nimport { Cart, Shops, Packages } from \"/lib/collections\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { AuthNetPayment } from \"../../lib/collections/schemas\";\nimport { AuthNet } from \"../api\";\n\n\nimport \"./authnet.html\";\n\nfunction uiEnd(tpl, buttonText) {\n  tpl.$(\":input\").removeAttr(\"disabled\");\n  tpl.$(\"#btn-complete-order\").text(buttonText);\n  tpl.$(\"#btn-processing\").addClass(\"hidden\");\n}\n\nfunction paymentAlert(errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n}\n\nfunction hidePaymentAlert() {\n  $(\".alert\").addClass(\"hidden\").text(\"\");\n}\n\nfunction handleAuthNetSubmitError(error) {\n  // TODO - this error handling needs to be reworked for the Authorize.net API\n  paymentAlert(error);\n  Logger.fatal(error);\n}\n\n// used to track asynchronous submitting for UI changes\nlet submitting = false;\n\nTemplate.authnetPaymentForm.helpers({\n  AuthNetPayment() {\n    return AuthNetPayment;\n  }\n});\n\nAutoForm.addHooks(\"authnet-payment-form\", {\n  onSubmit(doc) {\n    // Process form (pre-validated by autoform)\n    submitting = true;\n    const tpl = this.template;\n    // regEx in the schema ensures that there will be exactly two names with one space between\n    const payerNamePieces = doc.payerName.split(\" \");\n    const form = {\n      first_name: payerNamePieces[0],\n      last_name: payerNamePieces[1],\n      number: doc.cardNumber,\n      expire_date: doc.expireMonth.toString() + doc.expireYear.slice(-2),\n      cvv2: doc.cvv,\n      type: getCardType(doc.cardNumber)\n    };\n\n    // Reaction only stores type and 4 digits\n    const storedCard = form.type.charAt(0).toUpperCase() + form.type.slice(1) + \" \" + doc.cardNumber.slice(-4);\n\n    hidePaymentAlert();\n\n    const cardInfo = {\n      cardNumber: doc.cardNumber,\n      expirationYear: doc.expireYear,\n      expirationMonth: doc.expireMonth,\n      cvv2: doc.cvv\n    };\n    const paymentInfo = {\n      total: Cart.findOne().cartTotal(),\n      currency: Shops.findOne().currency\n    };\n\n    // Submit for processing\n    AuthNet.authorize(cardInfo, paymentInfo, function (error, transaction) {\n      if (error || !transaction) {\n        handleAuthNetSubmitError(error);\n        uiEnd(tpl, \"Resubmit payment\");\n      } else {\n        const normalizedMode = \"authorize\";\n        let normalizedStatus = \"failed\";\n\n        const transId = transaction.transactionId[0].toString();\n        Meteor.subscribe(\"Packages\");\n        const packageData = Packages.findOne({\n          name: \"reaction-auth-net\",\n          shopId: Reaction.getShopId()\n        });\n\n        if (transaction._original.responseCode[0] === \"1\") {\n          normalizedStatus = \"created\";\n        }\n\n        const paymentMethod = {\n          processor: \"AuthNet\",\n          paymentPackageId: packageData._id,\n          paymentSettingsKey: packageData.registry[0].settingsKey,\n          storedCard: storedCard,\n          method: \"credit\",\n          transactionId: transId,\n          amount: +paymentInfo.total,\n          status: normalizedStatus,\n          mode: normalizedMode,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          transactions: [\n            transaction._original\n          ]\n        };\n        Meteor.call(\"cart/submitPayment\", paymentMethod);\n        uiEnd(tpl, \"Resubmit payment\");\n      }\n    });\n\n    return false;\n  },\n\n  beginSubmit() {\n    this.template.$(\":input\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(\"Submitting \");\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n\n  endSubmit() {\n    // Hide processing UI here if form was not valid\n    if (!submitting) {\n      uiEnd(this.template, \"Complete your order\");\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-authnet/client/checkout/authnet.js.map","sourceFileName":"/imports/plugins/included/payments-authnet/client/checkout/authnet.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"authnet"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 1);\nvar getCardType = void 0;\nmodule.importSync(\"/client/modules/core/helpers/globals\", {\n  getCardType: function (v) {\n    getCardType = v;\n  }\n}, 2);\nvar Cart = void 0,\n    Shops = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  },\n  Shops: function (v) {\n    Shops = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 3);\nvar AutoForm = void 0;\nmodule.importSync(\"meteor/aldeed:autoform\", {\n  AutoForm: function (v) {\n    AutoForm = v;\n  }\n}, 4);\nvar AuthNetPayment = void 0;\nmodule.importSync(\"../../lib/collections/schemas\", {\n  AuthNetPayment: function (v) {\n    AuthNetPayment = v;\n  }\n}, 5);\nvar AuthNet = void 0;\nmodule.importSync(\"../api\", {\n  AuthNet: function (v) {\n    AuthNet = v;\n  }\n}, 6);\nmodule.importSync(\"./authnet.html\");\n\nfunction uiEnd(tpl, buttonText) {\n  tpl.$(\":input\").removeAttr(\"disabled\");\n  tpl.$(\"#btn-complete-order\").text(buttonText);\n  tpl.$(\"#btn-processing\").addClass(\"hidden\");\n}\n\nfunction paymentAlert(errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n}\n\nfunction hidePaymentAlert() {\n  $(\".alert\").addClass(\"hidden\").text(\"\");\n}\n\nfunction handleAuthNetSubmitError(error) {\n  // TODO - this error handling needs to be reworked for the Authorize.net API\n  paymentAlert(error);\n  Logger.fatal(error);\n} // used to track asynchronous submitting for UI changes\n\n\nvar submitting = false;\nTemplate.authnetPaymentForm.helpers({\n  AuthNetPayment: function () {\n    return AuthNetPayment;\n  }\n});\nAutoForm.addHooks(\"authnet-payment-form\", {\n  onSubmit: function (doc) {\n    // Process form (pre-validated by autoform)\n    submitting = true;\n    var tpl = this.template; // regEx in the schema ensures that there will be exactly two names with one space between\n\n    var payerNamePieces = doc.payerName.split(\" \");\n    var form = {\n      first_name: payerNamePieces[0],\n      last_name: payerNamePieces[1],\n      number: doc.cardNumber,\n      expire_date: doc.expireMonth.toString() + doc.expireYear.slice(-2),\n      cvv2: doc.cvv,\n      type: getCardType(doc.cardNumber)\n    }; // Reaction only stores type and 4 digits\n\n    var storedCard = form.type.charAt(0).toUpperCase() + form.type.slice(1) + \" \" + doc.cardNumber.slice(-4);\n    hidePaymentAlert();\n    var cardInfo = {\n      cardNumber: doc.cardNumber,\n      expirationYear: doc.expireYear,\n      expirationMonth: doc.expireMonth,\n      cvv2: doc.cvv\n    };\n    var paymentInfo = {\n      total: Cart.findOne().cartTotal(),\n      currency: Shops.findOne().currency\n    }; // Submit for processing\n\n    AuthNet.authorize(cardInfo, paymentInfo, function (error, transaction) {\n      if (error || !transaction) {\n        handleAuthNetSubmitError(error);\n        uiEnd(tpl, \"Resubmit payment\");\n      } else {\n        var normalizedMode = \"authorize\";\n        var normalizedStatus = \"failed\";\n        var transId = transaction.transactionId[0].toString();\n        Meteor.subscribe(\"Packages\");\n        var packageData = Packages.findOne({\n          name: \"reaction-auth-net\",\n          shopId: Reaction.getShopId()\n        });\n\n        if (transaction._original.responseCode[0] === \"1\") {\n          normalizedStatus = \"created\";\n        }\n\n        var paymentMethod = {\n          processor: \"AuthNet\",\n          paymentPackageId: packageData._id,\n          paymentSettingsKey: packageData.registry[0].settingsKey,\n          storedCard: storedCard,\n          method: \"credit\",\n          transactionId: transId,\n          amount: +paymentInfo.total,\n          status: normalizedStatus,\n          mode: normalizedMode,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          transactions: [transaction._original]\n        };\n        Meteor.call(\"cart/submitPayment\", paymentMethod);\n        uiEnd(tpl, \"Resubmit payment\");\n      }\n    });\n    return false;\n  },\n  beginSubmit: function () {\n    this.template.$(\":input\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(\"Submitting \");\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit: function () {\n    // Hide processing UI here if form was not valid\n    if (!submitting) {\n      uiEnd(this.template, \"Complete your order\");\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/payments-authnet/client/checkout/authnet.js"],"names":["Meteor","Reaction","Logger","getCardType","Cart","Shops","Packages","AutoForm","AuthNetPayment","AuthNet","uiEnd","tpl","buttonText","$","removeAttr","text","addClass","paymentAlert","errorMessage","removeClass","hidePaymentAlert","handleAuthNetSubmitError","error","fatal","submitting","Template","authnetPaymentForm","helpers","addHooks","onSubmit","doc","template","payerNamePieces","payerName","split","form","first_name","last_name","number","cardNumber","expire_date","expireMonth","toString","expireYear","slice","cvv2","cvv","type","storedCard","charAt","toUpperCase","cardInfo","expirationYear","expirationMonth","paymentInfo","total","findOne","cartTotal","currency","authorize","transaction","normalizedMode","normalizedStatus","transId","transactionId","subscribe","packageData","name","shopId","getShopId","_original","responseCode","paymentMethod","processor","paymentPackageId","_id","paymentSettingsKey","registry","settingsKey","method","amount","status","mode","createdAt","Date","updatedAt","transactions","call","beginSubmit","attr","endSubmit"],"mappings":"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","file":"/imports/plugins/included/payments-authnet/client/checkout/authnet.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, Logger } from \"/client/api\";\nimport { getCardType } from \"/client/modules/core/helpers/globals\";\nimport { Cart, Shops, Packages } from \"/lib/collections\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { AuthNetPayment } from \"../../lib/collections/schemas\";\nimport { AuthNet } from \"../api\";\n\n\nimport \"./authnet.html\";\n\nfunction uiEnd(tpl, buttonText) {\n  tpl.$(\":input\").removeAttr(\"disabled\");\n  tpl.$(\"#btn-complete-order\").text(buttonText);\n  tpl.$(\"#btn-processing\").addClass(\"hidden\");\n}\n\nfunction paymentAlert(errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n}\n\nfunction hidePaymentAlert() {\n  $(\".alert\").addClass(\"hidden\").text(\"\");\n}\n\nfunction handleAuthNetSubmitError(error) {\n  // TODO - this error handling needs to be reworked for the Authorize.net API\n  paymentAlert(error);\n  Logger.fatal(error);\n}\n\n// used to track asynchronous submitting for UI changes\nlet submitting = false;\n\nTemplate.authnetPaymentForm.helpers({\n  AuthNetPayment() {\n    return AuthNetPayment;\n  }\n});\n\nAutoForm.addHooks(\"authnet-payment-form\", {\n  onSubmit(doc) {\n    // Process form (pre-validated by autoform)\n    submitting = true;\n    const tpl = this.template;\n    // regEx in the schema ensures that there will be exactly two names with one space between\n    const payerNamePieces = doc.payerName.split(\" \");\n    const form = {\n      first_name: payerNamePieces[0],\n      last_name: payerNamePieces[1],\n      number: doc.cardNumber,\n      expire_date: doc.expireMonth.toString() + doc.expireYear.slice(-2),\n      cvv2: doc.cvv,\n      type: getCardType(doc.cardNumber)\n    };\n\n    // Reaction only stores type and 4 digits\n    const storedCard = form.type.charAt(0).toUpperCase() + form.type.slice(1) + \" \" + doc.cardNumber.slice(-4);\n\n    hidePaymentAlert();\n\n    const cardInfo = {\n      cardNumber: doc.cardNumber,\n      expirationYear: doc.expireYear,\n      expirationMonth: doc.expireMonth,\n      cvv2: doc.cvv\n    };\n    const paymentInfo = {\n      total: Cart.findOne().cartTotal(),\n      currency: Shops.findOne().currency\n    };\n\n    // Submit for processing\n    AuthNet.authorize(cardInfo, paymentInfo, function (error, transaction) {\n      if (error || !transaction) {\n        handleAuthNetSubmitError(error);\n        uiEnd(tpl, \"Resubmit payment\");\n      } else {\n        const normalizedMode = \"authorize\";\n        let normalizedStatus = \"failed\";\n\n        const transId = transaction.transactionId[0].toString();\n        Meteor.subscribe(\"Packages\");\n        const packageData = Packages.findOne({\n          name: \"reaction-auth-net\",\n          shopId: Reaction.getShopId()\n        });\n\n        if (transaction._original.responseCode[0] === \"1\") {\n          normalizedStatus = \"created\";\n        }\n\n        const paymentMethod = {\n          processor: \"AuthNet\",\n          paymentPackageId: packageData._id,\n          paymentSettingsKey: packageData.registry[0].settingsKey,\n          storedCard: storedCard,\n          method: \"credit\",\n          transactionId: transId,\n          amount: +paymentInfo.total,\n          status: normalizedStatus,\n          mode: normalizedMode,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          transactions: [\n            transaction._original\n          ]\n        };\n        Meteor.call(\"cart/submitPayment\", paymentMethod);\n        uiEnd(tpl, \"Resubmit payment\");\n      }\n    });\n\n    return false;\n  },\n\n  beginSubmit() {\n    this.template.$(\":input\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(\"Submitting \");\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n\n  endSubmit() {\n    // Hide processing UI here if form was not valid\n    if (!submitting) {\n      uiEnd(this.template, \"Complete your order\");\n    }\n  }\n});\n"]},"hash":"9656faaf3550a8a5f47059c8d1d3256252320dc7"}
