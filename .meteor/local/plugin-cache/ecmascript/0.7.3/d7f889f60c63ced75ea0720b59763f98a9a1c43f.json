{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/collections","imported":["Shops","Translations"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"},{"kind":"named","imported":"Translations","local":"Translations"}]},{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/publications/collections/translations.js","filenameRelative":"/server/publications/collections/translations.js","inputSourceMap":{"version":3,"sources":["/server/publications/collections/translations.js"],"names":["Shops","Translations","Reaction","Meteor","publish","languages","check","Match","OneOf","String","Array","shopId","getShopId","shopLanguage","findOne","language","sessionLanguages","langTranQuery","push","concat","sessionLanguage","i18n","find","$or"],"mappings":"AAAA,IAAS;IAAT,AAAgB;AAAhB,OAAoC,WAApC;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAgB,AAEzB;AAMA,AAAO,AAAQ,AAAgB,AAAU,AAAW,AAClD,AAAM,AAAW,AAAM,AAAM,AAAQ;;;;;UAC/B,QAAS,AAAS,gBAAxB,AAAe;QACT,WAAe,MAAM,MAAN,AAAc,QAAnC,AAAqB,AAAsB,AAC3C;MAAM,kBAAN,AAAyB,AACzB;MAAM,eAL4C,AAKlD,AAAsB,AAEtB;yBACA;MAAA,AAAiB,gBARiC,AAQlD,AAAsB,AACtB,AACA,IAAA,AAAI,AAAO,AAAc,AAAS,AAChC;;mBAAiB,KAAjB,AAAwB,AACzB,eAFD,AAEO,AACL;;aAAA,AAAiB,AAAK,cAAtB,SAbgD,AAcjD;AACD;;0BACA;AAAA,AAAK,AAAM,AAAmB,AAAkB,AAC9C,GAdF,CAcE,AAAc,AAAK,AACjB;;;AAAM;AACN;;;;;;;;;;;QAFiB;AAET;YAEX;cAED;AANE,AAAmB;AAMd,AAAa,AAAK,AACvB,AAAK;;AADP,AAAO;;AAvBT,AA0BC;CAxBC","file":"/server/publications/collections/translations.js.map","sourcesContent":["import { Shops, Translations } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\n\n/**\n * Translations publication\n * @param {String, Array} sessionLanguages - current sessionLanguage default to 'en'\n * @returns { Object } returns Translations\n * @todo like to see the langages validated more with a schema\n */\nMeteor.publish(\"Translations\", function (languages) {\n  check(languages, Match.OneOf(String, Array));\n  const shopId = Reaction.getShopId();\n  const shopLanguage = Shops.findOne(shopId).language;\n  const sessionLanguages = [];\n  const langTranQuery = [];\n\n  // set shop default\n  sessionLanguages.push(shopLanguage);\n  // lets get all these langauges\n  if (typeof languages === \"array\") {\n    sessionLanguages.concat(languages);\n  } else {\n    sessionLanguages.push(languages);\n  }\n  // add in the shop filter\n  for (const sessionLanguage of sessionLanguages) {\n    langTranQuery.push({\n      i18n: sessionLanguage,\n      shopId: shopId\n    });\n  }\n\n  return Translations.find({\n    $or: langTranQuery\n  });\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/publications/collections/translations.js.map","sourceFileName":"/server/publications/collections/translations.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"translations"},"ignored":false,"code":"var Shops = void 0,\n    Translations = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  },\n  Translations: function (v) {\n    Translations = v;\n  }\n}, 0);\nvar Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 1);\n/**\n * Translations publication\n * @param {String, Array} sessionLanguages - current sessionLanguage default to 'en'\n * @returns { Object } returns Translations\n * @todo like to see the langages validated more with a schema\n */Meteor.publish(\"Translations\", function (languages) {\n  check(languages, Match.OneOf(String, Array));\n  var shopId = Reaction.getShopId();\n  var shopLanguage = Shops.findOne(shopId).language;\n  var sessionLanguages = [];\n  var langTranQuery = []; // set shop default\n\n  sessionLanguages.push(shopLanguage); // lets get all these langauges\n\n  if (typeof languages === \"array\") {\n    sessionLanguages.concat(languages);\n  } else {\n    sessionLanguages.push(languages);\n  } // add in the shop filter\n\n\n  for (var _iterator = sessionLanguages, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var sessionLanguage = _ref;\n    langTranQuery.push({\n      i18n: sessionLanguage,\n      shopId: shopId\n    });\n  }\n\n  return Translations.find({\n    $or: langTranQuery\n  });\n});","map":{"version":3,"sources":["/server/publications/collections/translations.js"],"names":["Shops","Translations","Reaction","Meteor","publish","languages","check","Match","OneOf","String","Array","shopId","getShopId","shopLanguage","findOne","language","sessionLanguages","langTranQuery","push","concat","sessionLanguage","i18n","find","$or"],"mappings":"AAAA,IAAS;IAAT,AAAgB;AAAhB,OAAoC,WAApC;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAgB,AAEzB;AAMA,AAAO,AAAQ,AAAgB,AAAU,AAAW,AAClD,AAAM,AAAW,AAAM,AAAM,AAAQ;;;;;UAC/B,QAAS,AAAS,gBAAxB,AAAe;QACT,WAAe,MAAM,MAAN,AAAc,QAAnC,AAAqB,AAAsB,AAC3C;MAAM,kBAAN,AAAyB,AACzB;MAAM,eAL4C,AAKlD,AAAsB,AAEtB;yBACA;MAAA,AAAiB,gBARiC,AAQlD,AAAsB,AACtB,AACA,IAAA,AAAI,AAAO,AAAc,AAAS,AAChC;;mBAAiB,KAAjB,AAAwB,AACzB,eAFD,AAEO,AACL;;aAAA,AAAiB,AAAK,cAAtB,SAbgD,AAcjD;AACD;;0BACA;AAAA,AAAK,AAAM,AAAmB,AAAkB,AAC9C,GAdF,CAcE,AAAc,AAAK,AACjB;;;AAAM;AACN;;;;;;;;;;;QAFiB;AAET;YAEX;cAED;AANE,AAAmB;AAMd,AAAa,AAAK,AACvB,AAAK;;AADP,AAAO;;AAvBT,AA0BC;CAxBC","file":"/server/publications/collections/translations.js.map","sourcesContent":["import { Shops, Translations } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\n\n/**\n * Translations publication\n * @param {String, Array} sessionLanguages - current sessionLanguage default to 'en'\n * @returns { Object } returns Translations\n * @todo like to see the langages validated more with a schema\n */\nMeteor.publish(\"Translations\", function (languages) {\n  check(languages, Match.OneOf(String, Array));\n  const shopId = Reaction.getShopId();\n  const shopLanguage = Shops.findOne(shopId).language;\n  const sessionLanguages = [];\n  const langTranQuery = [];\n\n  // set shop default\n  sessionLanguages.push(shopLanguage);\n  // lets get all these langauges\n  if (typeof languages === \"array\") {\n    sessionLanguages.concat(languages);\n  } else {\n    sessionLanguages.push(languages);\n  }\n  // add in the shop filter\n  for (const sessionLanguage of sessionLanguages) {\n    langTranQuery.push({\n      i18n: sessionLanguage,\n      shopId: shopId\n    });\n  }\n\n  return Translations.find({\n    $or: langTranQuery\n  });\n});\n"]},"hash":"d7f889f60c63ced75ea0720b59763f98a9a1c43f"}
