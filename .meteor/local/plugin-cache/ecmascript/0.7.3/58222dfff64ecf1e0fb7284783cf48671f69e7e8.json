{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/ejson","imported":["EJSON"],"specifiers":[{"kind":"named","imported":"EJSON","local":"EJSON"}]},{"source":"meteor/alanning:roles","imported":["Roles"],"specifiers":[{"kind":"named","imported":"Roles","local":"Roles"}]},{"source":"/server/api","imported":["Logger","Reaction"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/publications/collections/members.js","filenameRelative":"/server/publications/collections/members.js","inputSourceMap":{"version":3,"sources":["/server/publications/collections/members.js"],"names":["Meteor","EJSON","Roles","Logger","Reaction","publish","userId","ready","readPermissions","shopId","getShopId","userIsInRole","selector","fields","_id","emails","username","roles","users","find","parse","debug"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AAEtB,AAAS,AAAa,A,AAAtB,AAEA,AAAS,AAAQ,AAAgB,AAEjC,AACA;4BAOA,AAAO,AAAQ,AAAe,AAAY,AACxC,AACA,AAAI,AAAO,AAAK,AAAW,AAAU,AACnC,AAAO,AAAK,AACb;;;;;;yEACD;AAAA,AAAM,AAAkB,AAAC,AAAmB,AAAS,AAAS,AAC9D;MAAM,OAAS,KAAS,WAAxB,AAAe;gBACf;AAAA,AAAI,AAAC,AAAQ,AACX;;MAAA,AAAO,AAAK,wDACb;;;eAED;AAAI,WAAM,KAAV,AAAI,AAAmB,AAAK,AAAQ,AAAiB,AAAS,AAC5D;AACA,AACA;;MAAM,MAAY,kBAAU,QAAO,0BAAnC,AACA;AAAM,AAAU,AACd;AAAQ,AACN;QADM,AACD,yBACL;QAFM,AAEE;;aAFF,AAIC,AACP;gBALM,AAKU,AAChB;kBANM,AAMkB,AACxB;eAPM,AAOmB,AACzB;wBARM,AAQqB,AAC3B;gCATM,AASmB,AACzB;iCAVM,AAUoB,AAC1B;mCAXM,AAWsC,AAC5C;iCAZM,AAYoB,AAC1B;kCAbM,AAaqB,AAC3B;AAdM,AAckB,oDACxB;AAfM,AAeiB,kCACvB;AAhBM,AAgBkB,mCACxB;gCAjBM,AAiBoB,AAC1B;+BAlBM,AAkBkB,AACxB;gCAnBM,AAmBmB,AACzB;kCApBM,AAoBsB;gCArBhC,AAAgB;iCAyBhB;AAAO,AAAO,AAAM,AAAK,AAAM,oCAA/B,AAAO,AAAkB,AAAY,AAAW,AACjD,AAED,AAAO,AAAM,AACb;AA5BY,AAGI,AACV;AADA;AAyBC,WAAK,OAAZ,AAAO,kCA5CT,AA6CC","file":"/server/publications/collections/members.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { EJSON } from \"meteor/ejson\";\n\nimport { Roles } from \"meteor/alanning:roles\";\n\nimport { Logger, Reaction } from \"/server/api\";\n\n/* eslint quote-props: 0 */\n/**\n * ShopMembers\n * This publication is only exposed to owner/admin in\n * Accounts page, and should not be used anywhere else.\n *\n * @return {Array} users\n */\nMeteor.publish(\"ShopMembers\", function () {\n  // here we are comparing with the string to make it compatible with tests\n  if (typeof this.userId !== \"string\") {\n    return this.ready();\n  }\n  const readPermissions = [\"reaction-orders\", \"owner\", \"admin\", \"reaction-accounts\"];\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n\n  if (Roles.userIsInRole(this.userId, readPermissions, shopId)) {\n    // seems like we can't use \"`\" inside db.call directly\n    // do not add comments or otherwise format this query\n    const selector = `{\"roles.${shopId}\": {\"$nin\": [\"anonymous\"]}}`;\n    const publish = {\n      fields: {\n        _id: 1,\n        emails: 1,\n        username: 1,\n        roles: 1,\n        \"profile.lang\": 1,\n        \"services.google.name\": 1,\n        \"services.google.email\": 1,\n        \"services.google.picture\": 1,\n        \"services.twitter.name\": 1,\n        \"services.twitter.email\": 1,\n        \"services.twitter.profile_image_url_https\": 1,\n        \"services.facebook.name\": 1,\n        \"services.facebook.email\": 1,\n        \"services.facebook.id\": 1,\n        \"services.weibo.name\": 1,\n        \"services.weibo.email\": 1,\n        \"services.weibo.picture\": 1,\n        \"services.github.name\": 1,\n        \"services.github.email\": 1,\n        \"services.github.username\": 1\n      }\n    };\n\n    return Meteor.users.find(EJSON.parse(selector), publish);\n  }\n\n  Logger.debug(\"ShopMembers access denied\");\n  return this.ready();\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/publications/collections/members.js.map","sourceFileName":"/server/publications/collections/members.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"members"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar EJSON = void 0;\nmodule.importSync(\"meteor/ejson\", {\n  EJSON: function (v) {\n    EJSON = v;\n  }\n}, 1);\nvar Roles = void 0;\nmodule.importSync(\"meteor/alanning:roles\", {\n  Roles: function (v) {\n    Roles = v;\n  }\n}, 2);\nvar Logger = void 0,\n    Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 3);\n/* eslint quote-props: 0 */ /**\n                             * ShopMembers\n                             * This publication is only exposed to owner/admin in\n                             * Accounts page, and should not be used anywhere else.\n                             *\n                             * @return {Array} users\n                             */Meteor.publish(\"ShopMembers\", function () {\n  // here we are comparing with the string to make it compatible with tests\n  if (typeof this.userId !== \"string\") {\n    return this.ready();\n  }\n\n  var readPermissions = [\"reaction-orders\", \"owner\", \"admin\", \"reaction-accounts\"];\n  var shopId = Reaction.getShopId();\n\n  if (!shopId) {\n    return this.ready();\n  }\n\n  if (Roles.userIsInRole(this.userId, readPermissions, shopId)) {\n    // seems like we can't use \"`\" inside db.call directly\n    // do not add comments or otherwise format this query\n    var selector = \"{\\\"roles.\" + shopId + \"\\\": {\\\"$nin\\\": [\\\"anonymous\\\"]}}\";\n    var publish = {\n      fields: {\n        _id: 1,\n        emails: 1,\n        username: 1,\n        roles: 1,\n        \"profile.lang\": 1,\n        \"services.google.name\": 1,\n        \"services.google.email\": 1,\n        \"services.google.picture\": 1,\n        \"services.twitter.name\": 1,\n        \"services.twitter.email\": 1,\n        \"services.twitter.profile_image_url_https\": 1,\n        \"services.facebook.name\": 1,\n        \"services.facebook.email\": 1,\n        \"services.facebook.id\": 1,\n        \"services.weibo.name\": 1,\n        \"services.weibo.email\": 1,\n        \"services.weibo.picture\": 1,\n        \"services.github.name\": 1,\n        \"services.github.email\": 1,\n        \"services.github.username\": 1\n      }\n    };\n    return Meteor.users.find(EJSON.parse(selector), publish);\n  }\n\n  Logger.debug(\"ShopMembers access denied\");\n  return this.ready();\n});","map":{"version":3,"sources":["/server/publications/collections/members.js"],"names":["Meteor","EJSON","Roles","Logger","Reaction","publish","userId","ready","readPermissions","shopId","getShopId","userIsInRole","selector","fields","_id","emails","username","roles","users","find","parse","debug"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AAEtB,AAAS,AAAa,A,AAAtB,AAEA,AAAS,AAAQ,AAAgB,AAEjC,AACA;4BAOA,AAAO,AAAQ,AAAe,AAAY,AACxC,AACA,AAAI,AAAO,AAAK,AAAW,AAAU,AACnC,AAAO,AAAK,AACb;;;;;;yEACD;AAAA,AAAM,AAAkB,AAAC,AAAmB,AAAS,AAAS,AAC9D;MAAM,OAAS,KAAS,WAAxB,AAAe;gBACf;AAAA,AAAI,AAAC,AAAQ,AACX;;MAAA,AAAO,AAAK,wDACb;;;eAED;AAAI,WAAM,KAAV,AAAI,AAAmB,AAAK,AAAQ,AAAiB,AAAS,AAC5D;AACA,AACA;;MAAM,MAAY,kBAAU,QAAO,0BAAnC,AACA;AAAM,AAAU,AACd;AAAQ,AACN;QADM,AACD,yBACL;QAFM,AAEE;;aAFF,AAIC,AACP;gBALM,AAKU,AAChB;kBANM,AAMkB,AACxB;eAPM,AAOmB,AACzB;wBARM,AAQqB,AAC3B;gCATM,AASmB,AACzB;iCAVM,AAUoB,AAC1B;mCAXM,AAWsC,AAC5C;iCAZM,AAYoB,AAC1B;kCAbM,AAaqB,AAC3B;AAdM,AAckB,oDACxB;AAfM,AAeiB,kCACvB;AAhBM,AAgBkB,mCACxB;gCAjBM,AAiBoB,AAC1B;+BAlBM,AAkBkB,AACxB;gCAnBM,AAmBmB,AACzB;kCApBM,AAoBsB;gCArBhC,AAAgB;iCAyBhB;AAAO,AAAO,AAAM,AAAK,AAAM,oCAA/B,AAAO,AAAkB,AAAY,AAAW,AACjD,AAED,AAAO,AAAM,AACb;AA5BY,AAGI,AACV;AADA;AAyBC,WAAK,OAAZ,AAAO,kCA5CT,AA6CC","file":"/server/publications/collections/members.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { EJSON } from \"meteor/ejson\";\n\nimport { Roles } from \"meteor/alanning:roles\";\n\nimport { Logger, Reaction } from \"/server/api\";\n\n/* eslint quote-props: 0 */\n/**\n * ShopMembers\n * This publication is only exposed to owner/admin in\n * Accounts page, and should not be used anywhere else.\n *\n * @return {Array} users\n */\nMeteor.publish(\"ShopMembers\", function () {\n  // here we are comparing with the string to make it compatible with tests\n  if (typeof this.userId !== \"string\") {\n    return this.ready();\n  }\n  const readPermissions = [\"reaction-orders\", \"owner\", \"admin\", \"reaction-accounts\"];\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n\n  if (Roles.userIsInRole(this.userId, readPermissions, shopId)) {\n    // seems like we can't use \"`\" inside db.call directly\n    // do not add comments or otherwise format this query\n    const selector = `{\"roles.${shopId}\": {\"$nin\": [\"anonymous\"]}}`;\n    const publish = {\n      fields: {\n        _id: 1,\n        emails: 1,\n        username: 1,\n        roles: 1,\n        \"profile.lang\": 1,\n        \"services.google.name\": 1,\n        \"services.google.email\": 1,\n        \"services.google.picture\": 1,\n        \"services.twitter.name\": 1,\n        \"services.twitter.email\": 1,\n        \"services.twitter.profile_image_url_https\": 1,\n        \"services.facebook.name\": 1,\n        \"services.facebook.email\": 1,\n        \"services.facebook.id\": 1,\n        \"services.weibo.name\": 1,\n        \"services.weibo.email\": 1,\n        \"services.weibo.picture\": 1,\n        \"services.github.name\": 1,\n        \"services.github.email\": 1,\n        \"services.github.username\": 1\n      }\n    };\n\n    return Meteor.users.find(EJSON.parse(selector), publish);\n  }\n\n  Logger.debug(\"ShopMembers access denied\");\n  return this.ready();\n});\n"]},"hash":"58222dfff64ecf1e0fb7284783cf48671f69e7e8"}
