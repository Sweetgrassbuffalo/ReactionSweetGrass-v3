{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/aldeed:template-extension/lib/template-inherits-helpers-from.js","filenameRelative":"/packages/aldeed:template-extension/lib/template-inherits-helpers-from.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/aldeed:template-extension/lib/template-inherits-helpers-from.js.map","sourceFileName":"/packages/aldeed:template-extension/lib/template-inherits-helpers-from.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"template-inherits-helpers-from"},"ignored":false,"code":"Template.prototype.inheritsHelpersFrom = function () {\n  function inheritsHelpersFrom(otherTemplate) {\n    var _this = this;\n\n    var inheritHelpers = function (template) {\n      // String template names can be provided and template object is looked up\n      if (typeof template === 'string') template = Template[template];\n      if (!template) return;\n      var inheritedHelpers = {};\n\n      for (var name in meteorBabelHelpers.sanitizeForInObject(template.__helpers)) {\n        if (template.__helpers.hasOwnProperty(name)) {\n          if (name.charAt(0) === ' ') {\n            inheritedHelpers[name.slice(1)] = template.__helpers[name];\n          }\n        }\n      }\n\n      _this.helpers(inheritedHelpers);\n    }; // Accept an array as otherTemplate argument\n\n\n    if (Array.isArray(otherTemplate)) {\n      otherTemplate.forEach(inheritHelpers);\n      return;\n    } // otherTemplate is a string\n\n\n    inheritHelpers(otherTemplate);\n  }\n\n  return inheritsHelpersFrom;\n}();","map":{"version":3,"sources":["/packages/aldeed:template-extension/lib/template-inherits-helpers-from.js"],"names":["Template","prototype","inheritsHelpersFrom","otherTemplate","inheritHelpers","template","inheritedHelpers","name","__helpers","hasOwnProperty","charAt","slice","helpers","Array","isArray","forEach"],"mappings":"AAAAA,SAASC,SAAT,CAAmBC,mBAAnB;AAAyC,WAASA,mBAAT,CAA6BC,aAA7B,EAA4C;AAAA;;AACnF,QAAMC,iBAAiB,oBAAY;AACjC;AACA,UAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkCA,WAAWL,SAASK,QAAT,CAAX;AAClC,UAAI,CAACA,QAAL,EAAe;AAEf,UAAMC,mBAAmB,EAAzB;;AACA,WAAK,IAAMC,IAAX,2CAAmBF,SAASG,SAA5B,GAAuC;AACrC,YAAIH,SAASG,SAAT,CAAmBC,cAAnB,CAAkCF,IAAlC,CAAJ,EAA6C;AAC3C,cAAIA,KAAKG,MAAL,CAAY,CAAZ,MAAmB,GAAvB,EAA4B;AAC1BJ,6BAAiBC,KAAKI,KAAL,CAAW,CAAX,CAAjB,IAAkCN,SAASG,SAAT,CAAmBD,IAAnB,CAAlC;AACD;AACF;AACF;;AAED,YAAKK,OAAL,CAAaN,gBAAb;AACD,KAfD,CADmF,CAkBnF;;;AACA,QAAIO,MAAMC,OAAN,CAAcX,aAAd,CAAJ,EAAkC;AAChCA,oBAAcY,OAAd,CAAsBX,cAAtB;AACA;AACD,KAtBkF,CAwBnF;;;AACAA,mBAAeD,aAAf;AACD;;AA1BD,SAAkDD,mBAAlD;AAAA","file":"/packages/aldeed:template-extension/lib/template-inherits-helpers-from.js.map","sourcesContent":["Template.prototype.inheritsHelpersFrom = function inheritsHelpersFrom(otherTemplate) {\n  const inheritHelpers = template => {\n    // String template names can be provided and template object is looked up\n    if (typeof template === 'string') template = Template[template];\n    if (!template) return;\n\n    const inheritedHelpers = {};\n    for (const name in template.__helpers) {\n      if (template.__helpers.hasOwnProperty(name)) {\n        if (name.charAt(0) === ' ') {\n          inheritedHelpers[name.slice(1)] = template.__helpers[name];\n        }\n      }\n    }\n\n    this.helpers(inheritedHelpers);\n  };\n\n  // Accept an array as otherTemplate argument\n  if (Array.isArray(otherTemplate)) {\n    otherTemplate.forEach(inheritHelpers);\n    return;\n  }\n\n  // otherTemplate is a string\n  inheritHelpers(otherTemplate);\n};\n"]},"hash":"aab1e64d126599f8c1524bc5d22bce95fa875321"}
