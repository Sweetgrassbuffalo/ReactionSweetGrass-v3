{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]}],"exports":{"exported":["addressSchema","purchaseAddressSchema","parcelSchema"],"specifiers":[{"kind":"local","local":"addressSchema","exported":"addressSchema"},{"kind":"local","local":"purchaseAddressSchema","exported":"purchaseAddressSchema"},{"kind":"local","local":"parcelSchema","exported":"parcelSchema"}]}}},"options":{"filename":"/imports/plugins/included/shippo/server/lib/shippoApiSchema.js","filenameRelative":"/imports/plugins/included/shippo/server/lib/shippoApiSchema.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/shippo/server/lib/shippoApiSchema.js"],"names":["SimpleSchema","addressSchema","object_purpose","type","String","allowedValues","name","optional","company","street1","street_no","street2","city","state","zip","country","phone","email","regEx","RegEx","Email","is_residential","Boolean","validate","metadata","purchaseAddressSchema","parcelSchema","length","Number","decimal","min","width","height","distance_unit","weight","mass_unit","template","extra","Object"],"mappings":"AAAA;AACA;WAAA,AAAS;;AAAoB;WAA7B;;;;;;;;;;;GAEA,AAAO,AAAM,AAAgB,AAAI,AAAa,AAC5C,AAAgB,AAAE;AAAM,IAAR;;AAAgC,UAAD,AAAU;AAAV,6BAA/B;AAA+B;AADH;;cAE5C;;AAAM;;cAAE;;AAAM;AAAR;cAAgB;;;;;AAAU;AAA1B;AAFsC;;cAG5C;;;AAAS;cAAE;;;AAAF;cAAgB;AAAR;;AAAkB;cAA1B;;AAHmC;;;AAI5C;;AAAS;cAAE;;;AAAF;;cAAgB;AAAR;AAAkB;;cAA1B;;AAJmC;;cAK5C;;;;cAL4C,AAKjC,AAAE,AAAM,AAAQ,AAAU,AAAU,AAC/C,AAAS,AAAE;AADA;AAJqB;AAKf,IAAR;;AAA0B;cAA1B;;AANmC;;cAO5C;;;;cAAQ;AAAF;;AAAA;cAAgB;AAAR;;AAAkB;cAA1B;;AAPsC;;cAQ5C;;;;;cAR4C,AAQrC,AAAE,AAAM,AAAQ,AAAU;AAA1B;AAFkB;;AAGpB;;;SAAE;;;AAAF;;SAAgB;AAAR;;AAAkB;;SAA1B;;AATuC;;iDAU5C;;;;;SAAW;AAAF;AAAQ;;qCAAR;;AAVmC;;cAUjB;;;;cAC3B;;AAAO;;cAXF,A,AAAsB,AAAiB,AAWrC,AAAE,AAAM,AAAQ,AAAU,AACjC,AAAO,AAAE,AAAM,AAAQ,AAAO,AAAa,AAAM,AAAO,AAAU,AAClE,AAAgB,AAAE,AAAM,AAAS,AAAU,AAC3C,AAAU,AAAE,AAAM,AAAS,AAAU,AACrC,AAAU,AAAE,AAAM,AAAQ,AAAU,AAGtC,AACA,AACA,AACA,AAAO,AAAM,AAAwB,AAAI,AAAa,AAAC,AAAe,AACpE,AAAM,AAAE,AAAM,AAAQ,AAAU,AAChC,AAAS,AAAE,AAAM,AAAQ,AAAU,AACnC,AAAM,AAAE,AAAM,AAAQ,AAAU,AAChC,AAAO,AAAE,AAAM,AAAQ,AAAU,AACjC,AAAK,AAAE,AAAM,AAAQ,AAAU,AAC/B,AAAO,AAAE,AAAM,AAAQ,AAAU,AACjC,AAAO,AAAE,AAAM,AAAQ,AAAO,AAAa,AAAM,AAAO,AAAU,AAGpE,AAAO,AAAM,AAAe,AAAI,AAAa,AAC3C,AAAQ,AAAE,AAAM,AAAQ,AAAS,AAAM,AAAK,AAC5C,AAAO,AAAE,AAAM,AAAQ,AAAS,AAAM,AAAK,AAC3C,AAAQ,AAAE,AAAM,AAAQ,AAAS,AAAM,AAAK,AAC5C,AAAe,AAAE,AAAM,AAAQ,AAAe,AAAC,AAAM,AAAM,AAAM,AAAM,AAAK,AAC5E,AAAQ,AAAE,AAAM,AAAQ,AAAS,AAAM,AAAK,AAC5C,AAAW,AAAE,AAAM,AAAQ,AAAe,AAAC,AAAK,AAAM,AAAM,AAC5D,AAAU,AAAE,AAAM,AAAQ,AAAU,AACpC,AAAO,AAAE,AAAM,AAAQ,AAAU,AACjC,AAAU,AAAE,AAAM,AAAQ,AAAU;;AA/BpC","file":"/imports/plugins/included/shippo/server/lib/shippoApiSchema.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { SimpleSchema } from \"meteor/aldeed:simple-schema\";\n\nexport const addressSchema = new SimpleSchema({\n  object_purpose: { type: String, allowedValues: [\"QUOTE\", \"PURCHASE\"] },\n  name: { type: String, optional: true },\n  company: { type: String, optional: true },\n  street1: { type: String, optional: true },\n  street_no: { type: String, optional: true },   // only needed for DHL , the others get it from street1\n  street2: { type: String, optional: true },\n  city: { type: String, optional: true },\n  state: { type: String, optional: true },\n  zip: { type: String, optional: true },\n  country: { type: String }, // maybe iso 2\n  phone: { type: String, optional: true },\n  email: { type: String, regEx: SimpleSchema.RegEx.Email, optional: true },\n  is_residential: { type: Boolean, optional: true },\n  validate: { type: Boolean, optional: true },\n  metadata: { type: String, optional: true }\n});\n\n// Overrides the properties required for purchasing labels/shipping.\n// we don't override the purpose because for some cases like getRatesForCart we don't want to\n// purchase Labels(purpose=\"QUOTE\" but we want all the fields required for purchasing to be present.\nexport const purchaseAddressSchema = new SimpleSchema([addressSchema, {\n  name: { type: String, optional: false },\n  street1: { type: String, optional: false },\n  city: { type: String, optional: false },\n  state: { type: String, optional: false },\n  zip: { type: String, optional: false },\n  phone: { type: String, optional: false },\n  email: { type: String, regEx: SimpleSchema.RegEx.Email, optional: true }\n}]);\n\nexport const parcelSchema = new SimpleSchema({\n  length: { type: Number, decimal: true, min: 0.0001 },\n  width: { type: Number, decimal: true, min: 0.0001 },\n  height: { type: Number, decimal: true, min: 0.0001 },\n  distance_unit: { type: String, allowedValues: [\"cm\", \"in\", \"ft\", \"mm\", \"m\", \"yd\"] },\n  weight: { type: Number, decimal: true, min: 0.0001 },\n  mass_unit: { type: String, allowedValues: [\"g\", \"oz\", \"lb\", \"kg\"] },\n  template: { type: String, optional: true },\n  extra: { type: Object, optional: true },\n  metadata: { type: String, optional: true }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/shippo/server/lib/shippoApiSchema.js.map","sourceFileName":"/imports/plugins/included/shippo/server/lib/shippoApiSchema.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"shippoApiSchema"},"ignored":false,"code":"module.export({\n  addressSchema: function () {\n    return addressSchema;\n  },\n  purchaseAddressSchema: function () {\n    return purchaseAddressSchema;\n  },\n  parcelSchema: function () {\n    return parcelSchema;\n  }\n});\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar addressSchema = new SimpleSchema({\n  object_purpose: {\n    type: String,\n    allowedValues: [\"QUOTE\", \"PURCHASE\"]\n  },\n  name: {\n    type: String,\n    optional: true\n  },\n  company: {\n    type: String,\n    optional: true\n  },\n  street1: {\n    type: String,\n    optional: true\n  },\n  street_no: {\n    type: String,\n    optional: true\n  },\n  // only needed for DHL , the others get it from street1\n  street2: {\n    type: String,\n    optional: true\n  },\n  city: {\n    type: String,\n    optional: true\n  },\n  state: {\n    type: String,\n    optional: true\n  },\n  zip: {\n    type: String,\n    optional: true\n  },\n  country: {\n    type: String\n  },\n  // maybe iso 2\n  phone: {\n    type: String,\n    optional: true\n  },\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true\n  },\n  is_residential: {\n    type: Boolean,\n    optional: true\n  },\n  validate: {\n    type: Boolean,\n    optional: true\n  },\n  metadata: {\n    type: String,\n    optional: true\n  }\n});\nvar purchaseAddressSchema = new SimpleSchema([addressSchema, {\n  name: {\n    type: String,\n    optional: false\n  },\n  street1: {\n    type: String,\n    optional: false\n  },\n  city: {\n    type: String,\n    optional: false\n  },\n  state: {\n    type: String,\n    optional: false\n  },\n  zip: {\n    type: String,\n    optional: false\n  },\n  phone: {\n    type: String,\n    optional: false\n  },\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true\n  }\n}]);\nvar parcelSchema = new SimpleSchema({\n  length: {\n    type: Number,\n    decimal: true,\n    min: 0.0001\n  },\n  width: {\n    type: Number,\n    decimal: true,\n    min: 0.0001\n  },\n  height: {\n    type: Number,\n    decimal: true,\n    min: 0.0001\n  },\n  distance_unit: {\n    type: String,\n    allowedValues: [\"cm\", \"in\", \"ft\", \"mm\", \"m\", \"yd\"]\n  },\n  weight: {\n    type: Number,\n    decimal: true,\n    min: 0.0001\n  },\n  mass_unit: {\n    type: String,\n    allowedValues: [\"g\", \"oz\", \"lb\", \"kg\"]\n  },\n  template: {\n    type: String,\n    optional: true\n  },\n  extra: {\n    type: Object,\n    optional: true\n  },\n  metadata: {\n    type: String,\n    optional: true\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/shippo/server/lib/shippoApiSchema.js"],"names":["SimpleSchema","addressSchema","object_purpose","type","String","allowedValues","name","optional","company","street1","street_no","street2","city","state","zip","country","phone","email","regEx","RegEx","Email","is_residential","Boolean","validate","metadata","purchaseAddressSchema","parcelSchema","length","Number","decimal","min","width","height","distance_unit","weight","mass_unit","template","extra","Object"],"mappings":"AAAA;AACA;WAAA,AAAS;;AAAoB;WAA7B;;;;;;;;;;;GAEA,AAAO,AAAM,AAAgB,AAAI,AAAa,AAC5C,AAAgB,AAAE;AAAM,IAAR;;AAAgC,UAAD,AAAU;AAAV,6BAA/B;AAA+B;AADH;;cAE5C;;AAAM;;cAAE;;AAAM;AAAR;cAAgB;;;;;AAAU;AAA1B;AAFsC;;cAG5C;;;AAAS;cAAE;;;AAAF;cAAgB;AAAR;;AAAkB;cAA1B;;AAHmC;;;AAI5C;;AAAS;cAAE;;;AAAF;;cAAgB;AAAR;AAAkB;;cAA1B;;AAJmC;;cAK5C;;;;cAL4C,AAKjC,AAAE,AAAM,AAAQ,AAAU,AAAU,AAC/C,AAAS,AAAE;AADA;AAJqB;AAKf,IAAR;;AAA0B;cAA1B;;AANmC;;cAO5C;;;;cAAQ;AAAF;;AAAA;cAAgB;AAAR;;AAAkB;cAA1B;;AAPsC;;cAQ5C;;;;;cAR4C,AAQrC,AAAE,AAAM,AAAQ,AAAU;AAA1B;AAFkB;;AAGpB;;;SAAE;;;AAAF;;SAAgB;AAAR;;AAAkB;;SAA1B;;AATuC;;iDAU5C;;;;;SAAW;AAAF;AAAQ;;qCAAR;;AAVmC;;cAUjB;;;;cAC3B;;AAAO;;cAXF,A,AAAsB,AAAiB,AAWrC,AAAE,AAAM,AAAQ,AAAU,AACjC,AAAO,AAAE,AAAM,AAAQ,AAAO,AAAa,AAAM,AAAO,AAAU,AAClE,AAAgB,AAAE,AAAM,AAAS,AAAU,AAC3C,AAAU,AAAE,AAAM,AAAS,AAAU,AACrC,AAAU,AAAE,AAAM,AAAQ,AAAU,AAGtC,AACA,AACA,AACA,AAAO,AAAM,AAAwB,AAAI,AAAa,AAAC,AAAe,AACpE,AAAM,AAAE,AAAM,AAAQ,AAAU,AAChC,AAAS,AAAE,AAAM,AAAQ,AAAU,AACnC,AAAM,AAAE,AAAM,AAAQ,AAAU,AAChC,AAAO,AAAE,AAAM,AAAQ,AAAU,AACjC,AAAK,AAAE,AAAM,AAAQ,AAAU,AAC/B,AAAO,AAAE,AAAM,AAAQ,AAAU,AACjC,AAAO,AAAE,AAAM,AAAQ,AAAO,AAAa,AAAM,AAAO,AAAU,AAGpE,AAAO,AAAM,AAAe,AAAI,AAAa,AAC3C,AAAQ,AAAE,AAAM,AAAQ,AAAS,AAAM,AAAK,AAC5C,AAAO,AAAE,AAAM,AAAQ,AAAS,AAAM,AAAK,AAC3C,AAAQ,AAAE,AAAM,AAAQ,AAAS,AAAM,AAAK,AAC5C,AAAe,AAAE,AAAM,AAAQ,AAAe,AAAC,AAAM,AAAM,AAAM,AAAM,AAAK,AAC5E,AAAQ,AAAE,AAAM,AAAQ,AAAS,AAAM,AAAK,AAC5C,AAAW,AAAE,AAAM,AAAQ,AAAe,AAAC,AAAK,AAAM,AAAM,AAC5D,AAAU,AAAE,AAAM,AAAQ,AAAU,AACpC,AAAO,AAAE,AAAM,AAAQ,AAAU,AACjC,AAAU,AAAE,AAAM,AAAQ,AAAU;;AA/BpC","file":"/imports/plugins/included/shippo/server/lib/shippoApiSchema.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { SimpleSchema } from \"meteor/aldeed:simple-schema\";\n\nexport const addressSchema = new SimpleSchema({\n  object_purpose: { type: String, allowedValues: [\"QUOTE\", \"PURCHASE\"] },\n  name: { type: String, optional: true },\n  company: { type: String, optional: true },\n  street1: { type: String, optional: true },\n  street_no: { type: String, optional: true },   // only needed for DHL , the others get it from street1\n  street2: { type: String, optional: true },\n  city: { type: String, optional: true },\n  state: { type: String, optional: true },\n  zip: { type: String, optional: true },\n  country: { type: String }, // maybe iso 2\n  phone: { type: String, optional: true },\n  email: { type: String, regEx: SimpleSchema.RegEx.Email, optional: true },\n  is_residential: { type: Boolean, optional: true },\n  validate: { type: Boolean, optional: true },\n  metadata: { type: String, optional: true }\n});\n\n// Overrides the properties required for purchasing labels/shipping.\n// we don't override the purpose because for some cases like getRatesForCart we don't want to\n// purchase Labels(purpose=\"QUOTE\" but we want all the fields required for purchasing to be present.\nexport const purchaseAddressSchema = new SimpleSchema([addressSchema, {\n  name: { type: String, optional: false },\n  street1: { type: String, optional: false },\n  city: { type: String, optional: false },\n  state: { type: String, optional: false },\n  zip: { type: String, optional: false },\n  phone: { type: String, optional: false },\n  email: { type: String, regEx: SimpleSchema.RegEx.Email, optional: true }\n}]);\n\nexport const parcelSchema = new SimpleSchema({\n  length: { type: Number, decimal: true, min: 0.0001 },\n  width: { type: Number, decimal: true, min: 0.0001 },\n  height: { type: Number, decimal: true, min: 0.0001 },\n  distance_unit: { type: String, allowedValues: [\"cm\", \"in\", \"ft\", \"mm\", \"m\", \"yd\"] },\n  weight: { type: Number, decimal: true, min: 0.0001 },\n  mass_unit: { type: String, allowedValues: [\"g\", \"oz\", \"lb\", \"kg\"] },\n  template: { type: String, optional: true },\n  extra: { type: Object, optional: true },\n  metadata: { type: String, optional: true }\n});\n"]},"hash":"f3534d0cdaaea9f0fd75df1782ebfc7059474f18"}
