{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/imports/plugins/core/ui/client/helpers/helpers","imported":["templateClassName"],"specifiers":[{"kind":"named","imported":"templateClassName","local":"templateClassName"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui/client/components/select/select.js","filenameRelative":"/imports/plugins/core/ui/client/components/select/select.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/components/select/select.js"],"names":["templateClassName","Template","select","onCreated","state","ReactiveDict","events","event","template","data","onSelect","target","value","helpers","type","currentData","selectAsRadioButtons","itemListClassName","instance","rui","items","flex","quarter","itemClassName","item","labelClassName","undefined","inputClassName","templateData","option","selected","key","checked","selectAsCheckboxes"],"mappings":"AAAA,IAAS;AAAT,OAAkC,WAAlC,AAEA,A;;;;;AAGA,AAAS,AAAO,AAAU,AAAY,AACpC,AAAK,AAAQ,AAAI;;;;AAMnB,AAAS,AAAO,AAAO,C,AAPvB,AAEC,AAED,GAIE,AAA8B,AAAO,AAAU,AAC7C,AAAI,AAAS,AAAK,AAAU,AAC1B,AAAS,AAAK,AAAS,AAAM,AAAO,AAAO;;;AAC5C;;gC,AAJL,AAAuB,AAQvB;;;AAGA,AAAS,AAAO,AAAQ,AACtB,AAAW;AAPV,IAQC,AAAM,AAAO,AAAS,AAAc,AACpC,AAAI,AAAS,AAAY,AAAS,AAAS;;;AACzC,SAAO;AADT,AAEO,wBAAA,AAAI,AAAS,AAAgB,AAAS,AAAY,AACvD;QAAO,gBAAP,cACD;;;aAED;WAAO,aAAP,qCACD;;AAVH,AAAwB,A,AAaxB;;;AAGA,AAAS,AAAqB,AAAQ,AACpC,AAAoB;AAbhB,AACD,IAaD,AAAO,AAAkB,AAAS,AAAY,AAC5C,AAAK,AACL,AAAO;;;AACP,SAH4C,AAGtC;AACG,iCAJmC;AAAvC,AAKJ;;aAGL;YAAgB,AACd;AAAO,eAAA,AAAkB,AAAS,AAAY,AAC5C;AAZgC,AAQnC,KANC,AAAO,EASuC,AACvC,AACL;AAFF,AAAO,AAAuC,AAEtC,AACL,AACJ;AAfmC;;WAiBnB,AACf;AAAO,YAlB2B,AAkBlC,AAAO,AAAkB,AAAS,AAAY,AAAW,AAC1D;AAFD;AAIA,AAAiB,AACf;AAAO,8BAtB2B,AAsBlC,AAAO,AAAkB,AAAS,AAAY,AAAW,AAC1D;;AAED,AAAa,AAAQ,AACnB;AAAM,8BAAN,AAAiB,AAAS,AAC1B;AAAM,WAAO,AAAS,kBAAtB,gCAEA;AAAO,AACL,AAAU,AAAK,AAAa,AAAO,AAAK,AAAO,AAC/C;kCAFK;AAAP,4BA7BkC,AAiCnC;wBACD;;;;;AAKA,AAAQ,AAAQ,AACd;AAAA,AAAM,AAAO,AAAS,AAEtB,AAAI,AAAK,AAAa,AAAO,AAAK,AAAO,AAAQ,AAC/C,AAAO,AACR,AACF;;;;;wB,AA7CH,AAAsC,AAgDtC;;;aAGA;AAAA,AAAS,AAAmB,AAAQ,AAClC;;AA9CI,IAmDJ,AAAQ,AAAQ,AACd,AAAM,AAAO,AAAS;;;;AAP1B,AAAoC,AAShC,AAAI,AAAK,AAAa,AAAO,AAAK,AAAO,AAAQ,AAC/C,AAAO,AACR,AACF;;;;;;;;;;;AAHC","file":"/imports/plugins/core/ui/client/components/select/select.js.map","sourcesContent":["import { templateClassName } from \"/imports/plugins/core/ui/client/helpers/helpers\";\n\n/**\n * Select - onCreated\n */\nTemplate.select.onCreated(function () {\n  this.state = new ReactiveDict();\n});\n\n/**\n * Select - events\n */\nTemplate.select.events({\n  \"change select, change input\"(event, template) {\n    if (template.data.onSelect) {\n      template.data.onSelect(event.target.value, event);\n    }\n  }\n});\n\n/**\n * Select - helpers\n */\nTemplate.select.helpers({\n  template() {\n    const type = Template.currentData().type;\n    if (type === \"radios\" || type === \"radio\") {\n      return \"selectAsRadioButtons\";\n    } else if (type === \"checkboxes\" || type === \"checkbox\") {\n      return \"selectAsCheckboxes\";\n    }\n\n    return \"selectAsDropdown\";\n  }\n});\n\n/**\n * Select (As a set of radio buttons) - helpers\n */\nTemplate.selectAsRadioButtons.helpers({\n  itemListClassName() {\n    return templateClassName(Template.instance(), {\n      rui: true,\n      items: true,\n      flex: true,\n      quarter: true\n    }, \"itemList\");\n  },\n\n  itemClassName() {\n    return templateClassName(Template.instance(), {\n      rui: true,\n      item: true\n    }, \"item\");\n  },\n\n  labelClassName() {\n    return templateClassName(Template.instance(), undefined, \"label\");\n  },\n\n  inputClassName() {\n    return templateClassName(Template.instance(), undefined, \"input\");\n  },\n\n  templateData(option) {\n    const instance = Template.instance();\n    const data = instance.data;\n\n    return {\n      selected: data.selected === option[data.key || \"_id\"],\n      option\n    };\n  },\n  /**\n   * checked attribute helper\n   * @param  {Object} option Option object\n   * @return {String|undefined} returns \"chekced\" if selected, undefined otherwise\n   */\n  checked(option) {\n    const data = Template.currentData();\n\n    if (data.selected === option[data.key || \"_id\"]) {\n      return \"checked\";\n    }\n  }\n});\n\n/**\n * Select (As a set of checkboxes) - helpers\n */\nTemplate.selectAsCheckboxes.helpers({\n  /**\n   * checked attribute helper\n   * @param  {Object} option Option object\n   * @return {String|undefined} returns \"chekced\" if selected, undefined otherwise\n   */\n  checked(option) {\n    const data = Template.currentData();\n\n    if (data.selected === option[data.key || \"_id\"]) {\n      return \"checked\";\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/components/select/select.js.map","sourceFileName":"/imports/plugins/core/ui/client/components/select/select.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"select"},"ignored":false,"code":"var templateClassName = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/helpers/helpers\", {\n  templateClassName: function (v) {\n    templateClassName = v;\n  }\n}, 0);\n/**\n * Select - onCreated\n */Template.select.onCreated(function () {\n  this.state = new ReactiveDict();\n}); /**\n     * Select - events\n     */\nTemplate.select.events({\n  \"change select, change input\": function (event, template) {\n    if (template.data.onSelect) {\n      template.data.onSelect(event.target.value, event);\n    }\n  }\n}); /**\n     * Select - helpers\n     */\nTemplate.select.helpers({\n  template: function () {\n    var type = Template.currentData().type;\n\n    if (type === \"radios\" || type === \"radio\") {\n      return \"selectAsRadioButtons\";\n    } else if (type === \"checkboxes\" || type === \"checkbox\") {\n      return \"selectAsCheckboxes\";\n    }\n\n    return \"selectAsDropdown\";\n  }\n}); /**\n     * Select (As a set of radio buttons) - helpers\n     */\nTemplate.selectAsRadioButtons.helpers({\n  itemListClassName: function () {\n    return templateClassName(Template.instance(), {\n      rui: true,\n      items: true,\n      flex: true,\n      quarter: true\n    }, \"itemList\");\n  },\n  itemClassName: function () {\n    return templateClassName(Template.instance(), {\n      rui: true,\n      item: true\n    }, \"item\");\n  },\n  labelClassName: function () {\n    return templateClassName(Template.instance(), undefined, \"label\");\n  },\n  inputClassName: function () {\n    return templateClassName(Template.instance(), undefined, \"input\");\n  },\n  templateData: function (option) {\n    var instance = Template.instance();\n    var data = instance.data;\n    return {\n      selected: data.selected === option[data.key || \"_id\"],\n      option: option\n    };\n  },\n  /**\n   * checked attribute helper\n   * @param  {Object} option Option object\n   * @return {String|undefined} returns \"chekced\" if selected, undefined otherwise\n   */checked: function (option) {\n    var data = Template.currentData();\n\n    if (data.selected === option[data.key || \"_id\"]) {\n      return \"checked\";\n    }\n  }\n}); /**\n     * Select (As a set of checkboxes) - helpers\n     */\nTemplate.selectAsCheckboxes.helpers({\n  /**\n   * checked attribute helper\n   * @param  {Object} option Option object\n   * @return {String|undefined} returns \"chekced\" if selected, undefined otherwise\n   */checked: function (option) {\n    var data = Template.currentData();\n\n    if (data.selected === option[data.key || \"_id\"]) {\n      return \"checked\";\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/ui/client/components/select/select.js"],"names":["templateClassName","Template","select","onCreated","state","ReactiveDict","events","event","template","data","onSelect","target","value","helpers","type","currentData","selectAsRadioButtons","itemListClassName","instance","rui","items","flex","quarter","itemClassName","item","labelClassName","undefined","inputClassName","templateData","option","selected","key","checked","selectAsCheckboxes"],"mappings":"AAAA,IAAS;AAAT,OAAkC,WAAlC,AAEA,A;;;;;AAGA,AAAS,AAAO,AAAU,AAAY,AACpC,AAAK,AAAQ,AAAI;;;;AAMnB,AAAS,AAAO,AAAO,C,AAPvB,AAEC,AAED,GAIE,AAA8B,AAAO,AAAU,AAC7C,AAAI,AAAS,AAAK,AAAU,AAC1B,AAAS,AAAK,AAAS,AAAM,AAAO,AAAO;;;AAC5C;;gC,AAJL,AAAuB,AAQvB;;;AAGA,AAAS,AAAO,AAAQ,AACtB,AAAW;AAPV,IAQC,AAAM,AAAO,AAAS,AAAc,AACpC,AAAI,AAAS,AAAY,AAAS,AAAS;;;AACzC,SAAO;AADT,AAEO,wBAAA,AAAI,AAAS,AAAgB,AAAS,AAAY,AACvD;QAAO,gBAAP,cACD;;;aAED;WAAO,aAAP,qCACD;;AAVH,AAAwB,A,AAaxB;;;AAGA,AAAS,AAAqB,AAAQ,AACpC,AAAoB;AAbhB,AACD,IAaD,AAAO,AAAkB,AAAS,AAAY,AAC5C,AAAK,AACL,AAAO;;;AACP,SAH4C,AAGtC;AACG,iCAJmC;AAAvC,AAKJ;;aAGL;YAAgB,AACd;AAAO,eAAA,AAAkB,AAAS,AAAY,AAC5C;AAZgC,AAQnC,KANC,AAAO,EASuC,AACvC,AACL;AAFF,AAAO,AAAuC,AAEtC,AACL,AACJ;AAfmC;;WAiBnB,AACf;AAAO,YAlB2B,AAkBlC,AAAO,AAAkB,AAAS,AAAY,AAAW,AAC1D;AAFD;AAIA,AAAiB,AACf;AAAO,8BAtB2B,AAsBlC,AAAO,AAAkB,AAAS,AAAY,AAAW,AAC1D;;AAED,AAAa,AAAQ,AACnB;AAAM,8BAAN,AAAiB,AAAS,AAC1B;AAAM,WAAO,AAAS,kBAAtB,gCAEA;AAAO,AACL,AAAU,AAAK,AAAa,AAAO,AAAK,AAAO,AAC/C;kCAFK;AAAP,4BA7BkC,AAiCnC;wBACD;;;;;AAKA,AAAQ,AAAQ,AACd;AAAA,AAAM,AAAO,AAAS,AAEtB,AAAI,AAAK,AAAa,AAAO,AAAK,AAAO,AAAQ,AAC/C,AAAO,AACR,AACF;;;;;wB,AA7CH,AAAsC,AAgDtC;;;aAGA;AAAA,AAAS,AAAmB,AAAQ,AAClC;;AA9CI,IAmDJ,AAAQ,AAAQ,AACd,AAAM,AAAO,AAAS;;;;AAP1B,AAAoC,AAShC,AAAI,AAAK,AAAa,AAAO,AAAK,AAAO,AAAQ,AAC/C,AAAO,AACR,AACF;;;;;;;;;;;AAHC","file":"/imports/plugins/core/ui/client/components/select/select.js.map","sourcesContent":["import { templateClassName } from \"/imports/plugins/core/ui/client/helpers/helpers\";\n\n/**\n * Select - onCreated\n */\nTemplate.select.onCreated(function () {\n  this.state = new ReactiveDict();\n});\n\n/**\n * Select - events\n */\nTemplate.select.events({\n  \"change select, change input\"(event, template) {\n    if (template.data.onSelect) {\n      template.data.onSelect(event.target.value, event);\n    }\n  }\n});\n\n/**\n * Select - helpers\n */\nTemplate.select.helpers({\n  template() {\n    const type = Template.currentData().type;\n    if (type === \"radios\" || type === \"radio\") {\n      return \"selectAsRadioButtons\";\n    } else if (type === \"checkboxes\" || type === \"checkbox\") {\n      return \"selectAsCheckboxes\";\n    }\n\n    return \"selectAsDropdown\";\n  }\n});\n\n/**\n * Select (As a set of radio buttons) - helpers\n */\nTemplate.selectAsRadioButtons.helpers({\n  itemListClassName() {\n    return templateClassName(Template.instance(), {\n      rui: true,\n      items: true,\n      flex: true,\n      quarter: true\n    }, \"itemList\");\n  },\n\n  itemClassName() {\n    return templateClassName(Template.instance(), {\n      rui: true,\n      item: true\n    }, \"item\");\n  },\n\n  labelClassName() {\n    return templateClassName(Template.instance(), undefined, \"label\");\n  },\n\n  inputClassName() {\n    return templateClassName(Template.instance(), undefined, \"input\");\n  },\n\n  templateData(option) {\n    const instance = Template.instance();\n    const data = instance.data;\n\n    return {\n      selected: data.selected === option[data.key || \"_id\"],\n      option\n    };\n  },\n  /**\n   * checked attribute helper\n   * @param  {Object} option Option object\n   * @return {String|undefined} returns \"chekced\" if selected, undefined otherwise\n   */\n  checked(option) {\n    const data = Template.currentData();\n\n    if (data.selected === option[data.key || \"_id\"]) {\n      return \"checked\";\n    }\n  }\n});\n\n/**\n * Select (As a set of checkboxes) - helpers\n */\nTemplate.selectAsCheckboxes.helpers({\n  /**\n   * checked attribute helper\n   * @param  {Object} option Option object\n   * @return {String|undefined} returns \"chekced\" if selected, undefined otherwise\n   */\n  checked(option) {\n    const data = Template.currentData();\n\n    if (data.selected === option[data.key || \"_id\"]) {\n      return \"checked\";\n    }\n  }\n});\n"]},"hash":"5e2b347578b770afde6ed0553479a5312c9bf461"}
