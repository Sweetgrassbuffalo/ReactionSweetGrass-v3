{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/without","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_without"}]},{"source":"lodash/includes","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_includes"}]},{"source":"lodash/filter","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_filter"}]},{"source":"lodash/uniq","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_uniq"}]},{"source":"lodash/isEmpty","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_isEmpty"}]},{"source":"meteor/session","imported":["Session"],"specifiers":[{"kind":"named","imported":"Session","local":"Session"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/client/modules/logger","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Logger"}]},{"source":"/lib/api","imported":["ReactionProduct"],"specifiers":[{"kind":"named","imported":"ReactionProduct","local":"ReactionProduct"}]},{"source":"sortablejs","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Sortable"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/product-variant/client/templates/products/productGrid/productGrid.js","filenameRelative":"/imports/plugins/included/product-variant/client/templates/products/productGrid/productGrid.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/product-variant/client/templates/products/productGrid/productGrid.js"],"names":["Session","Template","Reaction","Logger","ReactionProduct","Sortable","productGrid","onCreated","selectedProducts","getUserPreferences","hideActionView","set","products","currentData","filteredProducts","product","_id","isPreview","showActionView","label","i18nKeyLabel","template","type","data","onRendered","instance","hasPermission","productSort","$","sortable","create","group","handle","onUpdate","tag","getTag","toArray","map","element","index","productId","getAttribute","position","updatedAt","Date","Meteor","call","error","warn","Error","Tracker","flush","events","event","preventDefault","loadMoreProducts","get","target","checked","push","value","setUserPreferences","helpers","state","equals"],"mappings":"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","file":"/imports/plugins/included/product-variant/client/templates/products/productGrid/productGrid.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Session } from \"meteor/session\";\nimport { Template } from \"meteor/templating\";\nimport { Reaction } from \"/client/api\";\nimport Logger from \"/client/modules/logger\";\nimport { ReactionProduct } from \"/lib/api\";\nimport Sortable from \"sortablejs\";\n\n/**\n * productGrid helpers\n */\n\nTemplate.productGrid.onCreated(function () {\n  const selectedProducts = Reaction.getUserPreferences(\"reaction-product-variant\", \"selectedGridItems\");\n\n  if (_.isEmpty(selectedProducts)) {\n    Reaction.hideActionView();\n  } else {\n    // Save the selected items to the Session\n    Session.set(\"productGrid/selectedProducts\", _.uniq(selectedProducts));\n\n    const products = Template.currentData().products;\n\n    if (products) {\n      const filteredProducts = _.filter(products, (product) => {\n        return _.includes(selectedProducts, product._id);\n      });\n\n      if (Reaction.isPreview() === false) {\n        Reaction.showActionView({\n          label: \"Grid Settings\",\n          i18nKeyLabel: \"gridSettingsPanel.title\",\n          template: \"productSettings\",\n          type: \"product\",\n          data: {\n            products: filteredProducts\n          }\n        });\n      }\n    }\n  }\n});\n\nTemplate.productGrid.onRendered(function () {\n  const instance = this;\n\n  if (Reaction.hasPermission(\"createProduct\")) {\n    const productSort = $(\".product-grid-list\")[0];\n\n    this.sortable = Sortable.create(productSort, {\n      group: \"products\",\n      handle: \".product-grid-item\",\n      onUpdate() {\n        const tag = ReactionProduct.getTag();\n\n        instance.$(\".product-grid-item\")\n          .toArray()\n          .map((element, index) => {\n            const productId = element.getAttribute(\"id\");\n            const position = {\n              position: index,\n              updatedAt: new Date()\n            };\n\n            Meteor.call(\"products/updateProductPosition\", productId, position, tag,\n              error => {\n                if (error) {\n                  Logger.warn(error);\n                  throw new Meteor.Error(403, error);\n                }\n              });\n          });\n\n        Tracker.flush();\n      }\n    });\n  }\n});\n\nTemplate.productGrid.events({\n  \"click [data-event-action=loadMoreProducts]\": (event) => {\n    event.preventDefault();\n    loadMoreProducts();\n  },\n  \"change input[name=selectProduct]\": (event) => {\n    let selectedProducts = Session.get(\"productGrid/selectedProducts\");\n\n    if (event.target.checked) {\n      selectedProducts.push(event.target.value);\n    } else {\n      selectedProducts = _.without(selectedProducts, event.target.value);\n    }\n\n    Reaction.setUserPreferences(\"reaction-product-variant\", \"selectedGridItems\", selectedProducts);\n\n    // Save the selected items to the Session\n    Session.set(\"productGrid/selectedProducts\", _.uniq(selectedProducts));\n\n    const products = Template.currentData().products;\n\n    if (products) {\n      const filteredProducts = _.filter(products, (product) => {\n        return _.includes(selectedProducts, product._id);\n      });\n\n      Reaction.showActionView({\n        label: \"Grid Settings\",\n        i18nKeyLabel: \"gridSettingsPanel.title\",\n        template: \"productSettings\",\n        type: \"product\",\n        data: {\n          products: filteredProducts\n        }\n      });\n    }\n  }\n});\n\nTemplate.productGrid.helpers({\n  loadMoreProducts() {\n    return Template.instance().state.equals(\"canLoadMoreProducts\", true);\n  },\n  products() {\n    return Template.currentData().products;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/product-variant/client/templates/products/productGrid/productGrid.js.map","sourceFileName":"/imports/plugins/included/product-variant/client/templates/products/productGrid/productGrid.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"productGrid"},"ignored":false,"code":"var _without = void 0;\n\nmodule.importSync(\"lodash/without\", {\n  \"default\": function (v) {\n    _without = v;\n  }\n}, 0);\n\nvar _includes = void 0;\n\nmodule.importSync(\"lodash/includes\", {\n  \"default\": function (v) {\n    _includes = v;\n  }\n}, 1);\n\nvar _filter = void 0;\n\nmodule.importSync(\"lodash/filter\", {\n  \"default\": function (v) {\n    _filter = v;\n  }\n}, 2);\n\nvar _uniq = void 0;\n\nmodule.importSync(\"lodash/uniq\", {\n  \"default\": function (v) {\n    _uniq = v;\n  }\n}, 3);\n\nvar _isEmpty = void 0;\n\nmodule.importSync(\"lodash/isEmpty\", {\n  \"default\": function (v) {\n    _isEmpty = v;\n  }\n}, 4);\nvar Session = void 0;\nmodule.importSync(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 5);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 6);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 7);\nvar Logger = void 0;\nmodule.importSync(\"/client/modules/logger\", {\n  \"default\": function (v) {\n    Logger = v;\n  }\n}, 8);\nvar ReactionProduct = void 0;\nmodule.importSync(\"/lib/api\", {\n  ReactionProduct: function (v) {\n    ReactionProduct = v;\n  }\n}, 9);\nvar Sortable = void 0;\nmodule.importSync(\"sortablejs\", {\n  \"default\": function (v) {\n    Sortable = v;\n  }\n}, 10);\n/**\n * productGrid helpers\n */Template.productGrid.onCreated(function () {\n  var selectedProducts = Reaction.getUserPreferences(\"reaction-product-variant\", \"selectedGridItems\");\n\n  if (_isEmpty(selectedProducts)) {\n    Reaction.hideActionView();\n  } else {\n    // Save the selected items to the Session\n    Session.set(\"productGrid/selectedProducts\", _uniq(selectedProducts));\n    var products = Template.currentData().products;\n\n    if (products) {\n      var filteredProducts = _filter(products, function (product) {\n        return _includes(selectedProducts, product._id);\n      });\n\n      if (Reaction.isPreview() === false) {\n        Reaction.showActionView({\n          label: \"Grid Settings\",\n          i18nKeyLabel: \"gridSettingsPanel.title\",\n          template: \"productSettings\",\n          type: \"product\",\n          data: {\n            products: filteredProducts\n          }\n        });\n      }\n    }\n  }\n});\nTemplate.productGrid.onRendered(function () {\n  var instance = this;\n\n  if (Reaction.hasPermission(\"createProduct\")) {\n    var productSort = $(\".product-grid-list\")[0];\n    this.sortable = Sortable.create(productSort, {\n      group: \"products\",\n      handle: \".product-grid-item\",\n      onUpdate: function () {\n        var tag = ReactionProduct.getTag();\n        instance.$(\".product-grid-item\").toArray().map(function (element, index) {\n          var productId = element.getAttribute(\"id\");\n          var position = {\n            position: index,\n            updatedAt: new Date()\n          };\n          Meteor.call(\"products/updateProductPosition\", productId, position, tag, function (error) {\n            if (error) {\n              Logger.warn(error);\n              throw new Meteor.Error(403, error);\n            }\n          });\n        });\n        Tracker.flush();\n      }\n    });\n  }\n});\nTemplate.productGrid.events({\n  \"click [data-event-action=loadMoreProducts]\": function (event) {\n    event.preventDefault();\n    loadMoreProducts();\n  },\n  \"change input[name=selectProduct]\": function (event) {\n    var selectedProducts = Session.get(\"productGrid/selectedProducts\");\n\n    if (event.target.checked) {\n      selectedProducts.push(event.target.value);\n    } else {\n      selectedProducts = _without(selectedProducts, event.target.value);\n    }\n\n    Reaction.setUserPreferences(\"reaction-product-variant\", \"selectedGridItems\", selectedProducts); // Save the selected items to the Session\n\n    Session.set(\"productGrid/selectedProducts\", _uniq(selectedProducts));\n    var products = Template.currentData().products;\n\n    if (products) {\n      var filteredProducts = _filter(products, function (product) {\n        return _includes(selectedProducts, product._id);\n      });\n\n      Reaction.showActionView({\n        label: \"Grid Settings\",\n        i18nKeyLabel: \"gridSettingsPanel.title\",\n        template: \"productSettings\",\n        type: \"product\",\n        data: {\n          products: filteredProducts\n        }\n      });\n    }\n  }\n});\nTemplate.productGrid.helpers({\n  loadMoreProducts: function () {\n    return Template.instance().state.equals(\"canLoadMoreProducts\", true);\n  },\n  products: function () {\n    return Template.currentData().products;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/product-variant/client/templates/products/productGrid/productGrid.js"],"names":["Session","Template","Reaction","Logger","ReactionProduct","Sortable","productGrid","onCreated","selectedProducts","getUserPreferences","hideActionView","set","products","currentData","filteredProducts","product","_id","isPreview","showActionView","label","i18nKeyLabel","template","type","data","onRendered","instance","hasPermission","productSort","$","sortable","create","group","handle","onUpdate","tag","getTag","toArray","map","element","index","productId","getAttribute","position","updatedAt","Date","Meteor","call","error","warn","Error","Tracker","flush","events","event","preventDefault","loadMoreProducts","get","target","checked","push","value","setUserPreferences","helpers","state","equals"],"mappings":"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","file":"/imports/plugins/included/product-variant/client/templates/products/productGrid/productGrid.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Session } from \"meteor/session\";\nimport { Template } from \"meteor/templating\";\nimport { Reaction } from \"/client/api\";\nimport Logger from \"/client/modules/logger\";\nimport { ReactionProduct } from \"/lib/api\";\nimport Sortable from \"sortablejs\";\n\n/**\n * productGrid helpers\n */\n\nTemplate.productGrid.onCreated(function () {\n  const selectedProducts = Reaction.getUserPreferences(\"reaction-product-variant\", \"selectedGridItems\");\n\n  if (_.isEmpty(selectedProducts)) {\n    Reaction.hideActionView();\n  } else {\n    // Save the selected items to the Session\n    Session.set(\"productGrid/selectedProducts\", _.uniq(selectedProducts));\n\n    const products = Template.currentData().products;\n\n    if (products) {\n      const filteredProducts = _.filter(products, (product) => {\n        return _.includes(selectedProducts, product._id);\n      });\n\n      if (Reaction.isPreview() === false) {\n        Reaction.showActionView({\n          label: \"Grid Settings\",\n          i18nKeyLabel: \"gridSettingsPanel.title\",\n          template: \"productSettings\",\n          type: \"product\",\n          data: {\n            products: filteredProducts\n          }\n        });\n      }\n    }\n  }\n});\n\nTemplate.productGrid.onRendered(function () {\n  const instance = this;\n\n  if (Reaction.hasPermission(\"createProduct\")) {\n    const productSort = $(\".product-grid-list\")[0];\n\n    this.sortable = Sortable.create(productSort, {\n      group: \"products\",\n      handle: \".product-grid-item\",\n      onUpdate() {\n        const tag = ReactionProduct.getTag();\n\n        instance.$(\".product-grid-item\")\n          .toArray()\n          .map((element, index) => {\n            const productId = element.getAttribute(\"id\");\n            const position = {\n              position: index,\n              updatedAt: new Date()\n            };\n\n            Meteor.call(\"products/updateProductPosition\", productId, position, tag,\n              error => {\n                if (error) {\n                  Logger.warn(error);\n                  throw new Meteor.Error(403, error);\n                }\n              });\n          });\n\n        Tracker.flush();\n      }\n    });\n  }\n});\n\nTemplate.productGrid.events({\n  \"click [data-event-action=loadMoreProducts]\": (event) => {\n    event.preventDefault();\n    loadMoreProducts();\n  },\n  \"change input[name=selectProduct]\": (event) => {\n    let selectedProducts = Session.get(\"productGrid/selectedProducts\");\n\n    if (event.target.checked) {\n      selectedProducts.push(event.target.value);\n    } else {\n      selectedProducts = _.without(selectedProducts, event.target.value);\n    }\n\n    Reaction.setUserPreferences(\"reaction-product-variant\", \"selectedGridItems\", selectedProducts);\n\n    // Save the selected items to the Session\n    Session.set(\"productGrid/selectedProducts\", _.uniq(selectedProducts));\n\n    const products = Template.currentData().products;\n\n    if (products) {\n      const filteredProducts = _.filter(products, (product) => {\n        return _.includes(selectedProducts, product._id);\n      });\n\n      Reaction.showActionView({\n        label: \"Grid Settings\",\n        i18nKeyLabel: \"gridSettingsPanel.title\",\n        template: \"productSettings\",\n        type: \"product\",\n        data: {\n          products: filteredProducts\n        }\n      });\n    }\n  }\n});\n\nTemplate.productGrid.helpers({\n  loadMoreProducts() {\n    return Template.instance().state.equals(\"canLoadMoreProducts\", true);\n  },\n  products() {\n    return Template.currentData().products;\n  }\n});\n"]},"hash":"396d78d9c03fc7dbfdc6f96beac30ddeb8db97c6"}
