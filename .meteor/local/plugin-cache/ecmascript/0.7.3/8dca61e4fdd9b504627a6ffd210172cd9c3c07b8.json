{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"./helpers","imported":["shopIdAutoValue"],"specifiers":[{"kind":"named","imported":"shopIdAutoValue","local":"shopIdAutoValue"}]}],"exports":{"exported":["Tag"],"specifiers":[{"kind":"local","local":"Tag","exported":"Tag"}]}}},"options":{"filename":"/lib/collections/schemas/tags.js","filenameRelative":"/lib/collections/schemas/tags.js","inputSourceMap":{"version":3,"sources":["/lib/collections/schemas/tags.js"],"names":["SimpleSchema","shopIdAutoValue","Tag","_id","type","String","optional","name","index","slug","position","Number","relatedTagIds","isDeleted","Boolean","defaultValue","isTopLevel","shopId","autoValue","label","createdAt","Date","isInsert","isUpsert","$setOnInsert","updatedAt"],"mappings":"AAAA,OAAS;;AAAT;;;AAA6B;OAA7B;;;;;;;;;;GACA,A,AAAA,AAAS,AAAuB,AAEhC,AAIA,AAAO,AAAM,AAAM,AAAI,AAAa,AAClC,AAAK,AACH,AAAM,AACN;IAAU;AAHsB;AAK5B,UACJ;AAAM,cADF,AAEJ,AAAO;AAFT;AALkC;AAS5B,UACJ;AAAM,WAV0B,AAS5B,AAGN;AAHA;;UAGU,AACF,AACN,AAAU;AAFF,AACR;AAbgC;UAgBnB,AACb;AAAM,AAAC,cADM,AACP,AACN,AAAU,AACV;AAHF;AAGS;WAET;AAAW,cACT;AAAM,WADG,AAET,AAAc;AAvBkB,AAgBnB;AAhBmB;UAyBtB,AACV;AAAM,kBA1B0B,AAyBtB,AAGZ;AAHA;AAGQ;UAAA,AACA,AACN,AAAO,AACP;AAFA;;UA7BgC,AA4B1B,AAIC;WAET;AAAW,eACT;AAAM,WADG,AAET,AAAW,AAAY,AACrB;AATI,AAGK,AACX;AAKM;UACF,AAAO,AAAI,AACZ;AAFD,AAEO,eAAI,AAAK,YAAT,AAAmB,AACxB;eAAO,UACL;mBADK,AACS,AAAI;AADpB,gCAGD;;4BA3C6B,AAkCvB,AAYX;AAFG;AAEQ,AACT;AA/Ce,AAAiB,AA8CvB,AACH;AAVJ,AAAS,AAAU,AACjB;AAtCD;;;AACA","file":"/lib/collections/schemas/tags.js.map","sourcesContent":["import { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { shopIdAutoValue } from \"./helpers\";\n\n/**\n * Tag Schema\n */\n\nexport const Tag = new SimpleSchema({\n  _id: {\n    type: String,\n    optional: true\n  },\n  name: {\n    type: String,\n    index: 1\n  },\n  slug: {\n    type: String\n  },\n  position: {\n    type: Number,\n    optional: true\n  },\n  relatedTagIds: {\n    type: [String],\n    optional: true,\n    index: 1\n  },\n  isDeleted: {\n    type: Boolean,\n    defaultValue: false\n  },\n  isTopLevel: {\n    type: Boolean\n  },\n  shopId: {\n    type: String,\n    index: 1,\n    autoValue: shopIdAutoValue,\n    label: \"Tag shopId\"\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    }\n  },\n  updatedAt: {\n    type: Date\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/collections/schemas/tags.js.map","sourceFileName":"/lib/collections/schemas/tags.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"tags"},"ignored":false,"code":"module.export({\n  Tag: function () {\n    return Tag;\n  }\n});\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar shopIdAutoValue = void 0;\nmodule.importSync(\"./helpers\", {\n  shopIdAutoValue: function (v) {\n    shopIdAutoValue = v;\n  }\n}, 1);\nvar Tag = new SimpleSchema({\n  _id: {\n    type: String,\n    optional: true\n  },\n  name: {\n    type: String,\n    index: 1\n  },\n  slug: {\n    type: String\n  },\n  position: {\n    type: Number,\n    optional: true\n  },\n  relatedTagIds: {\n    type: [String],\n    optional: true,\n    index: 1\n  },\n  isDeleted: {\n    type: Boolean,\n    defaultValue: false\n  },\n  isTopLevel: {\n    type: Boolean\n  },\n  shopId: {\n    type: String,\n    index: 1,\n    autoValue: shopIdAutoValue,\n    label: \"Tag shopId\"\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      }\n    }\n  },\n  updatedAt: {\n    type: Date\n  }\n});","map":{"version":3,"sources":["/lib/collections/schemas/tags.js"],"names":["SimpleSchema","shopIdAutoValue","Tag","_id","type","String","optional","name","index","slug","position","Number","relatedTagIds","isDeleted","Boolean","defaultValue","isTopLevel","shopId","autoValue","label","createdAt","Date","isInsert","isUpsert","$setOnInsert","updatedAt"],"mappings":"AAAA,OAAS;;AAAT;;;AAA6B;OAA7B;;;;;;;;;;GACA,A,AAAA,AAAS,AAAuB,AAEhC,AAIA,AAAO,AAAM,AAAM,AAAI,AAAa,AAClC,AAAK,AACH,AAAM,AACN;IAAU;AAHsB;AAK5B,UACJ;AAAM,cADF,AAEJ,AAAO;AAFT;AALkC;AAS5B,UACJ;AAAM,WAV0B,AAS5B,AAGN;AAHA;;UAGU,AACF,AACN,AAAU;AAFF,AACR;AAbgC;UAgBnB,AACb;AAAM,AAAC,cADM,AACP,AACN,AAAU,AACV;AAHF;AAGS;WAET;AAAW,cACT;AAAM,WADG,AAET,AAAc;AAvBkB,AAgBnB;AAhBmB;UAyBtB,AACV;AAAM,kBA1B0B,AAyBtB,AAGZ;AAHA;AAGQ;UAAA,AACA,AACN,AAAO,AACP;AAFA;;UA7BgC,AA4B1B,AAIC;WAET;AAAW,eACT;AAAM,WADG,AAET,AAAW,AAAY,AACrB;AATI,AAGK,AACX;AAKM;UACF,AAAO,AAAI,AACZ;AAFD,AAEO,eAAI,AAAK,YAAT,AAAmB,AACxB;eAAO,UACL;mBADK,AACS,AAAI;AADpB,gCAGD;;4BA3C6B,AAkCvB,AAYX;AAFG;AAEQ,AACT;AA/Ce,AAAiB,AA8CvB,AACH;AAVJ,AAAS,AAAU,AACjB;AAtCD;;;AACA","file":"/lib/collections/schemas/tags.js.map","sourcesContent":["import { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { shopIdAutoValue } from \"./helpers\";\n\n/**\n * Tag Schema\n */\n\nexport const Tag = new SimpleSchema({\n  _id: {\n    type: String,\n    optional: true\n  },\n  name: {\n    type: String,\n    index: 1\n  },\n  slug: {\n    type: String\n  },\n  position: {\n    type: Number,\n    optional: true\n  },\n  relatedTagIds: {\n    type: [String],\n    optional: true,\n    index: 1\n  },\n  isDeleted: {\n    type: Boolean,\n    defaultValue: false\n  },\n  isTopLevel: {\n    type: Boolean\n  },\n  shopId: {\n    type: String,\n    index: 1,\n    autoValue: shopIdAutoValue,\n    label: \"Tag shopId\"\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    }\n  },\n  updatedAt: {\n    type: Date\n  }\n});\n"]},"hash":"8dca61e4fdd9b504627a6ffd210172cd9c3c07b8"}
