{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","createClass","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"classnames","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classnames"}]},{"source":"react-tether","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"TetherComponent"}]},{"source":"./popoverContent","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PopoverContent"}]},{"source":"/imports/plugins/core/ui/client/components/","imported":["Button","ButtonGroup"],"specifiers":[{"kind":"named","imported":"Button","local":"Button"},{"kind":"named","imported":"ButtonGroup","local":"ButtonGroup"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui/client/components/popover/popover.js","filenameRelative":"/imports/plugins/core/ui/client/components/popover/popover.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/components/popover/popover.js"],"names":["React","Component","PropTypes","classnames","TetherComponent","PopoverContent","Button","ButtonGroup","Popover","state","isOpen","attachment","props","Tooltip","defaultProps","handleDisplayButtonClick","event","value","onDisplayButtonClick","handleOpen","setState","handleClickOutside","renderPopoverChildren","children","renderButtons","showDropdownButton","buttonElement","status","cloneElement","onClick","render","showArrow","to","targetAttachment","propTypes","string","node","func","bool","tooltipContent"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;IAAA;;OAA4C,WAA5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAO,AAAgB,AACvB,AAAO,AAAqB,AAC5B,AAAO,AAAoB,AAC3B,AAAS,AAAQ,AAAmB,AAEpC;;IAAA,AAAM;;;;;;;;;;;;;cAA0B,AAC9B,AAAQ,AACE,AAGV;AAJQ,AACN,aAaI,AAAK,AAAM,4CAAf,AAAqC,OACnC;UAAK,MAAL,AAAW,MAAX,AAAgC,sBAAhC,AAAuC,AACxC;gDAHH,AAIC;AAED;AAAa,AAAM,AACjB,AAAK,AAAS,AACZ,aAAQ,yBADI;AAAd;gBAKF,AAAqB,AAAM,AACzB;AAPF,AAIC;AAGC,AAAK,AAAS,AACZ,AAAQ,aADV,iCADF,AAIC;;gBAED,AAAwB,AACtB;;AAAA,AAAI,AAAK,AAAM,AAAQ,AACrB,AACE,AAAC,AACC,AAAS,AAAC,AAAK,AAAM,AACrB,AAAe,AAAC,AAAK,AAG1B;;;;;6BACD;AAAA,AAAO,AACR;+BAED;AAAgB,+BACd,AAAI,AAAK,AAAM,AAAoB,AACjC,AACE,AAAC;;AACC,AAAC,AAAK,AAAM;;AACZ,aAAA,AAAC,AACC,AAAI,AACJ,AAAK,AACL,AAAQ,AAAC,AAAK,AACd,AAAO,AAAC,AAAK,AAAM,AAAc,AAAM;AAP7C,AASE,AAAE,AAEL;;;;;;6BAED;UAAO,KAAM,MAAN,AAAmB,AAAK,oBAAxB,AAAmB,AAAW,AAAe,AAClD;AADF,AAAO,AAA6C,AACzC,AAAK;AAEjB;;;8BAED,AAAS;iBACP,AACE;AAAC,kBAAD,AACE,AAAW,AAAC,AAAK,AACjB,AAAY,AACZ,AAAU,AAAC,AAAW,AACpB;AADoB,AACb,0BACP;yBAFoB,AAED,0BALvB,AAGY,AAAC,AAAW,AAGpB,AAAgB,AAChB,AAAwB,AAAK,AAAM,AAAa,AAElD,AAAY,AAAC,AAAC,AACZ;;;AADY,AACR,AACJ,AAAY;;AAXhB,AASc,AAAC,AAIb,mBAAiB,AAAC,aAAK,KAAL,AAAW,MAb/B,AAamB;AAEjB,AAAC,AAAK,sBAAN,AAAC,AACD,AAAC,AAAK;;AAjBV,AAkBE,AAAE,AAEL;;;;;;sBArF6B;;AAwFhC;;AAAA,AAAQ,sBAAY,KAClB;AAAY,uBADM,AACI,AACtB;AAAe;AACL,mBAHQ,AAGE,AACpB;AAAsB,+BAJJ,AAIc,AAChC;AAAW,AAAU,4BALH,AAMlB;AAAoB,AAAU,oCANZ,wBAAA,AAOlB,AAAkB,AAAU,AAC5B;AARkB,AAGlB,WADyB;AAMT;gBAGlB,AAAQ;AAAR,wBAAuB,AACrB,AAAY,AACZ;AAbF,AAAoB,AAQQ;AAGL,AAEV,uCAFb,AAAuB,AAGrB,AAAkB;;aAIpB;aAAA,AAAe;;;;;;;;;AAhGb,AAAI,AAAa,AACf,AAAO,AAAK;;;;wBAAZ,AAAO,AAAW,AAAc,AAAQ,AAAa,AACtD;;AAED,AAA2B,AAAC,AAAO,AAAU,AAC3C;;;EAfJ,AAAsB,AAAU,AAC9B;;;;;;;;;;;;;;;;;OAPK,OAAS,WAAhB,AAA2B,QAA3B","file":"/imports/plugins/core/ui/client/components/popover/popover.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport classnames from \"classnames\";\nimport TetherComponent from \"react-tether\";\nimport PopoverContent from \"./popoverContent\";\nimport { Button, ButtonGroup } from \"/imports/plugins/core/ui/client/components/\";\n\nclass Popover extends Component {\n  state = {\n    isOpen: false\n  }\n\n  /**\n   * attachment\n   * @description Return the attachment for the tooltip or the default\n   * @return {String} attachment\n   */\n  get attachment() {\n    return this.props.attachment || Tooltip.defaultProps.attachment;\n  }\n\n  handleDisplayButtonClick = (event, value) => {\n    if (this.props.onDisplayButtonClick) {\n      this.props.onDisplayButtonClick(event, value);\n    }\n  }\n\n  handleOpen = () => {\n    this.setState({\n      isOpen: true\n    });\n  }\n\n  handleClickOutside = () => {\n    this.setState({\n      isOpen: false\n    });\n  }\n\n  renderPopoverChildren() {\n    if (this.state.isOpen) {\n      return  (\n        <PopoverContent\n          children={this.props.children}\n          onClickOutside={this.handleClickOutside}\n        />\n      );\n    }\n    return null;\n  }\n\n  renderButtons() {\n    if (this.props.showDropdownButton) {\n      return (\n        <ButtonGroup>\n          {this.props.buttonElement}\n          <Button\n            key=\"dropdown-button\"\n            icon=\"fa fa-chevron-down\"\n            onClick={this.handleOpen}\n            status={this.props.buttonElement.props.status}\n          />\n        </ButtonGroup>\n      );\n    }\n\n    return React.cloneElement(this.props.buttonElement, {\n      onClick: this.handleOpen\n    });\n  }\n\n  render() {\n    return (\n      <TetherComponent\n        attachment={this.attachment}\n        classPrefix=\"popover\"\n        className={classnames({\n          \"rui\": true,\n          \"popover-element\": true,\n          \"popover-open\": true,\n          \"popover-theme-arrows\": this.props.showArrow || false\n        })}\n        constraints={[{\n          to: \"scrollParent\",\n          attachment: \"together\"\n        }]}\n        targetAttachment={this.props.targetAttachment}\n      >\n        {this.renderButtons()}\n        {this.renderPopoverChildren()}\n      </TetherComponent>\n    );\n  }\n}\n\nPopover.propTypes = {\n  attachment: PropTypes.string,\n  buttonElement: PropTypes.node,\n  children: PropTypes.node,\n  onDisplayButtonClick: PropTypes.func,\n  showArrow: PropTypes.bool,\n  showDropdownButton: PropTypes.bool,\n  targetAttachment: PropTypes.string,\n  tooltipContent: PropTypes.node\n};\n\nPopover.defaultProps = {\n  attachment: \"bottom left\",\n  showArrow: false,\n  targetAttachment: \"top left\"\n};\n\n\nexport default Popover;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/components/popover/popover.js.map","sourceFileName":"/imports/plugins/core/ui/client/components/popover/popover.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"popover"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar classnames = void 0;\nmodule.importSync(\"classnames\", {\n  \"default\": function (v) {\n    classnames = v;\n  }\n}, 1);\nvar TetherComponent = void 0;\nmodule.importSync(\"react-tether\", {\n  \"default\": function (v) {\n    TetherComponent = v;\n  }\n}, 2);\nvar PopoverContent = void 0;\nmodule.importSync(\"./popoverContent\", {\n  \"default\": function (v) {\n    PopoverContent = v;\n  }\n}, 3);\nvar Button = void 0,\n    ButtonGroup = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components/\", {\n  Button: function (v) {\n    Button = v;\n  },\n  ButtonGroup: function (v) {\n    ButtonGroup = v;\n  }\n}, 4);\n\nvar Popover = function (_Component) {\n  (0, _inherits3.default)(Popover, _Component);\n\n  function Popover() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, Popover);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      isOpen: false\n    }, _this.handleDisplayButtonClick = function (event, value) {\n      if (_this.props.onDisplayButtonClick) {\n        _this.props.onDisplayButtonClick(event, value);\n      }\n    }, _this.handleOpen = function () {\n      _this.setState({\n        isOpen: true\n      });\n    }, _this.handleClickOutside = function () {\n      _this.setState({\n        isOpen: false\n      });\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  Popover.prototype.renderPopoverChildren = function () {\n    function renderPopoverChildren() {\n      if (this.state.isOpen) {\n        return React.createElement(PopoverContent, {\n          children: this.props.children,\n          onClickOutside: this.handleClickOutside\n        });\n      }\n\n      return null;\n    }\n\n    return renderPopoverChildren;\n  }();\n\n  Popover.prototype.renderButtons = function () {\n    function renderButtons() {\n      if (this.props.showDropdownButton) {\n        return React.createElement(\n          ButtonGroup,\n          null,\n          this.props.buttonElement,\n          React.createElement(Button, {\n            key: \"dropdown-button\",\n            icon: \"fa fa-chevron-down\",\n            onClick: this.handleOpen,\n            status: this.props.buttonElement.props.status\n          })\n        );\n      }\n\n      return React.cloneElement(this.props.buttonElement, {\n        onClick: this.handleOpen\n      });\n    }\n\n    return renderButtons;\n  }();\n\n  Popover.prototype.render = function () {\n    function render() {\n      return React.createElement(\n        TetherComponent,\n        {\n          attachment: this.attachment,\n          classPrefix: \"popover\",\n          className: classnames({\n            \"rui\": true,\n            \"popover-element\": true,\n            \"popover-open\": true,\n            \"popover-theme-arrows\": this.props.showArrow || false\n          }),\n          constraints: [{\n            to: \"scrollParent\",\n            attachment: \"together\"\n          }],\n          targetAttachment: this.props.targetAttachment\n        },\n        this.renderButtons(),\n        this.renderPopoverChildren()\n      );\n    }\n\n    return render;\n  }();\n\n  (0, _createClass3.default)(Popover, [{\n    key: \"attachment\",\n    /**\n     * attachment\n     * @description Return the attachment for the tooltip or the default\n     * @return {String} attachment\n     */get: function () {\n      return this.props.attachment || Tooltip.defaultProps.attachment;\n    }\n  }]);\n  return Popover;\n}(Component);\n\nPopover.propTypes = {\n  attachment: PropTypes.string,\n  buttonElement: PropTypes.node,\n  children: PropTypes.node,\n  onDisplayButtonClick: PropTypes.func,\n  showArrow: PropTypes.bool,\n  showDropdownButton: PropTypes.bool,\n  targetAttachment: PropTypes.string,\n  tooltipContent: PropTypes.node\n};\nPopover.defaultProps = {\n  attachment: \"bottom left\",\n  showArrow: false,\n  targetAttachment: \"top left\"\n};\nmodule.export(\"default\", exports.default = Popover);","map":{"version":3,"sources":["/imports/plugins/core/ui/client/components/popover/popover.js"],"names":["React","Component","PropTypes","classnames","TetherComponent","PopoverContent","Button","ButtonGroup","Popover","state","isOpen","attachment","props","Tooltip","defaultProps","handleDisplayButtonClick","event","value","onDisplayButtonClick","handleOpen","setState","handleClickOutside","renderPopoverChildren","children","renderButtons","showDropdownButton","buttonElement","status","cloneElement","onClick","render","showArrow","to","targetAttachment","propTypes","string","node","func","bool","tooltipContent"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;IAAA;;OAA4C,WAA5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAO,AAAgB,AACvB,AAAO,AAAqB,AAC5B,AAAO,AAAoB,AAC3B,AAAS,AAAQ,AAAmB,AAEpC;;IAAA,AAAM;;;;;;;;;;;;;cAA0B,AAC9B,AAAQ,AACE,AAGV;AAJQ,AACN,aAaI,AAAK,AAAM,4CAAf,AAAqC,OACnC;UAAK,MAAL,AAAW,MAAX,AAAgC,sBAAhC,AAAuC,AACxC;gDAHH,AAIC;AAED;AAAa,AAAM,AACjB,AAAK,AAAS,AACZ,aAAQ,yBADI;AAAd;gBAKF,AAAqB,AAAM,AACzB;AAPF,AAIC;AAGC,AAAK,AAAS,AACZ,AAAQ,aADV,iCADF,AAIC;;gBAED,AAAwB,AACtB;;AAAA,AAAI,AAAK,AAAM,AAAQ,AACrB,AACE,AAAC,AACC,AAAS,AAAC,AAAK,AAAM,AACrB,AAAe,AAAC,AAAK,AAG1B;;;;;6BACD;AAAA,AAAO,AACR;+BAED;AAAgB,+BACd,AAAI,AAAK,AAAM,AAAoB,AACjC,AACE,AAAC;;AACC,AAAC,AAAK,AAAM;;AACZ,aAAA,AAAC,AACC,AAAI,AACJ,AAAK,AACL,AAAQ,AAAC,AAAK,AACd,AAAO,AAAC,AAAK,AAAM,AAAc,AAAM;AAP7C,AASE,AAAE,AAEL;;;;;;6BAED;UAAO,KAAM,MAAN,AAAmB,AAAK,oBAAxB,AAAmB,AAAW,AAAe,AAClD;AADF,AAAO,AAA6C,AACzC,AAAK;AAEjB;;;8BAED,AAAS;iBACP,AACE;AAAC,kBAAD,AACE,AAAW,AAAC,AAAK,AACjB,AAAY,AACZ,AAAU,AAAC,AAAW,AACpB;AADoB,AACb,0BACP;yBAFoB,AAED,0BALvB,AAGY,AAAC,AAAW,AAGpB,AAAgB,AAChB,AAAwB,AAAK,AAAM,AAAa,AAElD,AAAY,AAAC,AAAC,AACZ;;;AADY,AACR,AACJ,AAAY;;AAXhB,AASc,AAAC,AAIb,mBAAiB,AAAC,aAAK,KAAL,AAAW,MAb/B,AAamB;AAEjB,AAAC,AAAK,sBAAN,AAAC,AACD,AAAC,AAAK;;AAjBV,AAkBE,AAAE,AAEL;;;;;;sBArF6B;;AAwFhC;;AAAA,AAAQ,sBAAY,KAClB;AAAY,uBADM,AACI,AACtB;AAAe;AACL,mBAHQ,AAGE,AACpB;AAAsB,+BAJJ,AAIc,AAChC;AAAW,AAAU,4BALH,AAMlB;AAAoB,AAAU,oCANZ,wBAAA,AAOlB,AAAkB,AAAU,AAC5B;AARkB,AAGlB,WADyB;AAMT;gBAGlB,AAAQ;AAAR,wBAAuB,AACrB,AAAY,AACZ;AAbF,AAAoB,AAQQ;AAGL,AAEV,uCAFb,AAAuB,AAGrB,AAAkB;;aAIpB;aAAA,AAAe;;;;;;;;;AAhGb,AAAI,AAAa,AACf,AAAO,AAAK;;;;wBAAZ,AAAO,AAAW,AAAc,AAAQ,AAAa,AACtD;;AAED,AAA2B,AAAC,AAAO,AAAU,AAC3C;;;EAfJ,AAAsB,AAAU,AAC9B;;;;;;;;;;;;;;;;;OAPK,OAAS,WAAhB,AAA2B,QAA3B","file":"/imports/plugins/core/ui/client/components/popover/popover.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport classnames from \"classnames\";\nimport TetherComponent from \"react-tether\";\nimport PopoverContent from \"./popoverContent\";\nimport { Button, ButtonGroup } from \"/imports/plugins/core/ui/client/components/\";\n\nclass Popover extends Component {\n  state = {\n    isOpen: false\n  }\n\n  /**\n   * attachment\n   * @description Return the attachment for the tooltip or the default\n   * @return {String} attachment\n   */\n  get attachment() {\n    return this.props.attachment || Tooltip.defaultProps.attachment;\n  }\n\n  handleDisplayButtonClick = (event, value) => {\n    if (this.props.onDisplayButtonClick) {\n      this.props.onDisplayButtonClick(event, value);\n    }\n  }\n\n  handleOpen = () => {\n    this.setState({\n      isOpen: true\n    });\n  }\n\n  handleClickOutside = () => {\n    this.setState({\n      isOpen: false\n    });\n  }\n\n  renderPopoverChildren() {\n    if (this.state.isOpen) {\n      return  (\n        <PopoverContent\n          children={this.props.children}\n          onClickOutside={this.handleClickOutside}\n        />\n      );\n    }\n    return null;\n  }\n\n  renderButtons() {\n    if (this.props.showDropdownButton) {\n      return (\n        <ButtonGroup>\n          {this.props.buttonElement}\n          <Button\n            key=\"dropdown-button\"\n            icon=\"fa fa-chevron-down\"\n            onClick={this.handleOpen}\n            status={this.props.buttonElement.props.status}\n          />\n        </ButtonGroup>\n      );\n    }\n\n    return React.cloneElement(this.props.buttonElement, {\n      onClick: this.handleOpen\n    });\n  }\n\n  render() {\n    return (\n      <TetherComponent\n        attachment={this.attachment}\n        classPrefix=\"popover\"\n        className={classnames({\n          \"rui\": true,\n          \"popover-element\": true,\n          \"popover-open\": true,\n          \"popover-theme-arrows\": this.props.showArrow || false\n        })}\n        constraints={[{\n          to: \"scrollParent\",\n          attachment: \"together\"\n        }]}\n        targetAttachment={this.props.targetAttachment}\n      >\n        {this.renderButtons()}\n        {this.renderPopoverChildren()}\n      </TetherComponent>\n    );\n  }\n}\n\nPopover.propTypes = {\n  attachment: PropTypes.string,\n  buttonElement: PropTypes.node,\n  children: PropTypes.node,\n  onDisplayButtonClick: PropTypes.func,\n  showArrow: PropTypes.bool,\n  showDropdownButton: PropTypes.bool,\n  targetAttachment: PropTypes.string,\n  tooltipContent: PropTypes.node\n};\n\nPopover.defaultProps = {\n  attachment: \"bottom left\",\n  showArrow: false,\n  targetAttachment: \"top left\"\n};\n\n\nexport default Popover;\n"]},"hash":"fad947fea74dbadcebc2ef76782efe5954638dc7"}
