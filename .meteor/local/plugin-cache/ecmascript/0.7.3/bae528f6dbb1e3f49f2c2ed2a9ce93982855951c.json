{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"/server/api","imported":["Hooks","Logger","Reaction"],"specifiers":[{"kind":"named","imported":"Hooks","local":"Hooks"},{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/lib/collections","imported":["Jobs","Packages"],"specifiers":[{"kind":"named","imported":"Jobs","local":"Jobs"},{"kind":"named","imported":"Packages","local":"Packages"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/shippo/server/jobs/shippo.js","filenameRelative":"/imports/plugins/included/shippo/server/jobs/shippo.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/shippo/server/jobs/shippo.js"],"names":["Hooks","Logger","Reaction","Jobs","Packages","getJobConfig","findOne","name","shopId","getShopId","settings","getOwnerUserId","owner","Meteor","users","_id","Events","add","config","refreshPeriod","shippo","enabled","debug","Job","priority","retry","retries","wait","backoff","repeat","schedule","later","parse","text","save","cancelRepeats","ownerId","processJobs","pollInterval","workTimeout","job","callback","runAsUser","call","error","done","toString","repeatId","success"],"mappings":";;;;;;AAAA;;IAAA;OAAwC,WAAxC;;;;;;;;;;;;;;;;;;;;G,AACA,AAAS,AAAM,AAAgB,AAE/B;;AACA,AAAS,AAAe;AACtB,SAAO,AAAS,eAAT,AAAiB,AACtB;;UADK,AAAiB,AAEd,AAAS;AAChB,YAHH,SAID,AAED,A;AAN0B,AAEtB,GADM;EAMV,AAAS,AAAiB;;;AACxB,AAAM,SAAQ,AAAO,iBAAP,AAAa,AAAQ,AACjC;2BAA0B;AAD5B,8BAGA;AAHc,AAAqB;;MAG/B,SAAS,QAAA,AAAO,wEAApB,AAA8B,UAAU,AACtC;WAAO,MAAP,AAAa,AACd;;;SACD;AAAA,AAAO,AACR;;;AAEK,MAAN,AAAa,SAAb,AAAiB,AAAiB,AAAM,AACtC;MAAM,AAAS,uBAAf,AACA,AAAM,AAAgB,AAAO;;gDAE7B;AAAA,AAAI,AAAC,AAAO,AAAO,AAAW,AAAC,AAAe,AAC5C;AACD,GANH,CAAwC,AAOtC;;;;0DACA,IAAO,SAAP,AAAc,AAAoE,AAAc,AAChG,UAAA,AAAI,AAAI;AAEC,AACI,aACT;AAAM,UAFD,AAGL;AAAS,aAHJ,AAGkB,cAL3B,AAES;;AAFT,AAAc,AAA0C,AACrD,AAAS,AACT,AAAM,AACL,KAHJ,AAOG;AACW,cAAK,KAAL,AAAW,MAAX,AAAiB,MAAjB,AAAsB,KARpC,AAOU,AACI,AAEX,AAAK,AACJ;AAJM,AACN;AAKA;AAbJ,AAUQ,AAGW;mBAtBrB,AAwBC,AAED;AALM;AAKS,AAAY,AACzB,AAAM,AAAU;OAjDT,OAAT,AAAgB,WAAQ,QAAxB,sBAkDE;AAAI,MAAJ,AAAa,UACX;;MAAK,SAAL,AACE,AACA,AACE;SADF,AACgB,AAAK,AACnB,YAJJ,AAEE,AAEe,AAAM;yBAInB;yBACA,AACA;AAJF,AAAC,AAAK,AAAa,AACjB,gCAIA;AAAA,AAAO,AAAU,AAAS,AAAK,AAC7B;AAAA,AAAO,AAAK,AAAuC,AAAS,AAC1D;AAAA,AAAI,AAAO,AACT;AAAA,AAAI,AAAK,AAAM,AAAY,AAAE;aAAU,+BAAZ;AAA3B,4EADF,AAEC;cAAM,OACL;gBAAM,KAAU;wBAAhB,AACA;;iBAAA,AAAO,AAAM,AACb;AAAI,gBAAJ,AAAS,UAAS,AAAE;mBAAU,MAA9B,AAAkB;;wBACnB;;AAPH,AAQC;AATH,AAUC;AACD;AAtBJ,AAuBG;AAEJ;AACD;;SAAA,AAAO,AACR","file":"/imports/plugins/included/shippo/server/jobs/shippo.js.map","sourcesContent":["import { Hooks, Logger, Reaction } from \"/server/api\";\nimport { Jobs, Packages } from \"/lib/collections\";\n\n// helper to fetch shippo config\nfunction getJobConfig() {\n  return Packages.findOne({\n    name: \"reaction-shippo\",\n    shopId: Reaction.getShopId()\n  }).settings;\n}\n\n// helper to get owner's UserId\nfunction getOwnerUserId() {\n  const owner = Meteor.users.findOne({\n    \"roles.__global_roles__\": \"owner\"\n  });\n  if (owner && typeof owner === \"object\") {\n    return owner._id;\n  }\n  return false;\n}\n\nHooks.Events.add(\"afterCoreInit\", () => {\n  const config = getJobConfig();\n  const refreshPeriod = config.refreshPeriod;\n\n  if (!config.shippo.enabled || !refreshPeriod) {\n    return;\n  }\n  // there might be some validity to this being Logger.info.\n  Logger.debug(`Adding shippo/fetchTrackingStatusForOrders to JobControl. Refresh ${refreshPeriod}`);\n  new Job(Jobs, \"shippo/fetchTrackingStatusForOrdersJob\", {})\n    .priority(\"normal\")\n    .retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\" // delay by twice as long for each subsequent retry\n    })\n    .repeat({\n      schedule: Jobs.later.parse.text(refreshPeriod)\n    })\n    .save({\n      // Cancel any jobs of the same type,\n      // but only if this job repeats forever.\n      cancelRepeats: true\n    });\n});\n\nexport default function () {\n  const ownerId = getOwnerUserId();\n  if (ownerId) {\n    Jobs.processJobs(\n      \"shippo/fetchTrackingStatusForOrdersJob\",\n      {\n        pollInterval: 30 * 1000,\n        workTimeout: 180 * 1000\n      },\n      (job, callback) => {\n        // TODO review meteor runAsUser and add to project documentation\n        // As this is run by the Server and we don't have userId()/this.userId\n        // which \"shippo/fetchTrackingStatusForOrders\" need, we use dispatch:run-as-user\n        // An alternative way is https://forums.meteor.com/t/cant-set-logged-in-user-for-rest-calls/18656/3\n        Meteor.runAsUser(ownerId, ()=> {\n          Meteor.call(\"shippo/fetchTrackingStatusForOrders\", error => {\n            if (error) {\n              job.done(error.toString(), { repeatId: true });\n            } else {\n              const success = \"Shippo tracking status updated.\";\n              Logger.debug(success);\n              job.done(success, { repeatId: true });\n            }\n          });\n        });\n        callback();\n      }\n    );\n  }\n  return false;\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/shippo/server/jobs/shippo.js.map","sourceFileName":"/imports/plugins/included/shippo/server/jobs/shippo.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"shippo"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Hooks = void 0,\n    Logger = void 0,\n    Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Hooks: function (v) {\n    Hooks = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 0);\nvar Jobs = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Jobs: function (v) {\n    Jobs = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 1);\n\n// helper to fetch shippo config\nfunction getJobConfig() {\n  return Packages.findOne({\n    name: \"reaction-shippo\",\n    shopId: Reaction.getShopId()\n  }).settings;\n} // helper to get owner's UserId\n\n\nfunction getOwnerUserId() {\n  var owner = Meteor.users.findOne({\n    \"roles.__global_roles__\": \"owner\"\n  });\n\n  if (owner && (typeof owner === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(owner)) === \"object\") {\n    return owner._id;\n  }\n\n  return false;\n}\n\nHooks.Events.add(\"afterCoreInit\", function () {\n  var config = getJobConfig();\n  var refreshPeriod = config.refreshPeriod;\n\n  if (!config.shippo.enabled || !refreshPeriod) {\n    return;\n  } // there might be some validity to this being Logger.info.\n\n\n  Logger.debug(\"Adding shippo/fetchTrackingStatusForOrders to JobControl. Refresh \" + refreshPeriod);\n  new Job(Jobs, \"shippo/fetchTrackingStatusForOrdersJob\", {}).priority(\"normal\").retry({\n    retries: 5,\n    wait: 60000,\n    backoff: \"exponential\" // delay by twice as long for each subsequent retry\n\n  }).repeat({\n    schedule: Jobs.later.parse.text(refreshPeriod)\n  }).save({\n    // Cancel any jobs of the same type,\n    // but only if this job repeats forever.\n    cancelRepeats: true\n  });\n});\nmodule.export(\"default\", exports.default = function () {\n  var ownerId = getOwnerUserId();\n\n  if (ownerId) {\n    Jobs.processJobs(\"shippo/fetchTrackingStatusForOrdersJob\", {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    }, function (job, callback) {\n      // TODO review meteor runAsUser and add to project documentation\n      // As this is run by the Server and we don't have userId()/this.userId\n      // which \"shippo/fetchTrackingStatusForOrders\" need, we use dispatch:run-as-user\n      // An alternative way is https://forums.meteor.com/t/cant-set-logged-in-user-for-rest-calls/18656/3\n      Meteor.runAsUser(ownerId, function () {\n        Meteor.call(\"shippo/fetchTrackingStatusForOrders\", function (error) {\n          if (error) {\n            job.done(error.toString(), {\n              repeatId: true\n            });\n          } else {\n            var success = \"Shippo tracking status updated.\";\n            Logger.debug(success);\n            job.done(success, {\n              repeatId: true\n            });\n          }\n        });\n      });\n      callback();\n    });\n  }\n\n  return false;\n});","map":{"version":3,"sources":["/imports/plugins/included/shippo/server/jobs/shippo.js"],"names":["Hooks","Logger","Reaction","Jobs","Packages","getJobConfig","findOne","name","shopId","getShopId","settings","getOwnerUserId","owner","Meteor","users","_id","Events","add","config","refreshPeriod","shippo","enabled","debug","Job","priority","retry","retries","wait","backoff","repeat","schedule","later","parse","text","save","cancelRepeats","ownerId","processJobs","pollInterval","workTimeout","job","callback","runAsUser","call","error","done","toString","repeatId","success"],"mappings":";;;;;;AAAA;;IAAA;OAAwC,WAAxC;;;;;;;;;;;;;;;;;;;;G,AACA,AAAS,AAAM,AAAgB,AAE/B;;AACA,AAAS,AAAe;AACtB,SAAO,AAAS,eAAT,AAAiB,AACtB;;UADK,AAAiB,AAEd,AAAS;AAChB,YAHH,SAID,AAED,A;AAN0B,AAEtB,GADM;EAMV,AAAS,AAAiB;;;AACxB,AAAM,SAAQ,AAAO,iBAAP,AAAa,AAAQ,AACjC;2BAA0B;AAD5B,8BAGA;AAHc,AAAqB;;MAG/B,SAAS,QAAA,AAAO,wEAApB,AAA8B,UAAU,AACtC;WAAO,MAAP,AAAa,AACd;;;SACD;AAAA,AAAO,AACR;;;AAEK,MAAN,AAAa,SAAb,AAAiB,AAAiB,AAAM,AACtC;MAAM,AAAS,uBAAf,AACA,AAAM,AAAgB,AAAO;;gDAE7B;AAAA,AAAI,AAAC,AAAO,AAAO,AAAW,AAAC,AAAe,AAC5C;AACD,GANH,CAAwC,AAOtC;;;;0DACA,IAAO,SAAP,AAAc,AAAoE,AAAc,AAChG,UAAA,AAAI,AAAI;AAEC,AACI,aACT;AAAM,UAFD,AAGL;AAAS,aAHJ,AAGkB,cAL3B,AAES;;AAFT,AAAc,AAA0C,AACrD,AAAS,AACT,AAAM,AACL,KAHJ,AAOG;AACW,cAAK,KAAL,AAAW,MAAX,AAAiB,MAAjB,AAAsB,KARpC,AAOU,AACI,AAEX,AAAK,AACJ;AAJM,AACN;AAKA;AAbJ,AAUQ,AAGW;mBAtBrB,AAwBC,AAED;AALM;AAKS,AAAY,AACzB,AAAM,AAAU;OAjDT,OAAT,AAAgB,WAAQ,QAAxB,sBAkDE;AAAI,MAAJ,AAAa,UACX;;MAAK,SAAL,AACE,AACA,AACE;SADF,AACgB,AAAK,AACnB,YAJJ,AAEE,AAEe,AAAM;yBAInB;yBACA,AACA;AAJF,AAAC,AAAK,AAAa,AACjB,gCAIA;AAAA,AAAO,AAAU,AAAS,AAAK,AAC7B;AAAA,AAAO,AAAK,AAAuC,AAAS,AAC1D;AAAA,AAAI,AAAO,AACT;AAAA,AAAI,AAAK,AAAM,AAAY,AAAE;aAAU,+BAAZ;AAA3B,4EADF,AAEC;cAAM,OACL;gBAAM,KAAU;wBAAhB,AACA;;iBAAA,AAAO,AAAM,AACb;AAAI,gBAAJ,AAAS,UAAS,AAAE;mBAAU,MAA9B,AAAkB;;wBACnB;;AAPH,AAQC;AATH,AAUC;AACD;AAtBJ,AAuBG;AAEJ;AACD;;SAAA,AAAO,AACR","file":"/imports/plugins/included/shippo/server/jobs/shippo.js.map","sourcesContent":["import { Hooks, Logger, Reaction } from \"/server/api\";\nimport { Jobs, Packages } from \"/lib/collections\";\n\n// helper to fetch shippo config\nfunction getJobConfig() {\n  return Packages.findOne({\n    name: \"reaction-shippo\",\n    shopId: Reaction.getShopId()\n  }).settings;\n}\n\n// helper to get owner's UserId\nfunction getOwnerUserId() {\n  const owner = Meteor.users.findOne({\n    \"roles.__global_roles__\": \"owner\"\n  });\n  if (owner && typeof owner === \"object\") {\n    return owner._id;\n  }\n  return false;\n}\n\nHooks.Events.add(\"afterCoreInit\", () => {\n  const config = getJobConfig();\n  const refreshPeriod = config.refreshPeriod;\n\n  if (!config.shippo.enabled || !refreshPeriod) {\n    return;\n  }\n  // there might be some validity to this being Logger.info.\n  Logger.debug(`Adding shippo/fetchTrackingStatusForOrders to JobControl. Refresh ${refreshPeriod}`);\n  new Job(Jobs, \"shippo/fetchTrackingStatusForOrdersJob\", {})\n    .priority(\"normal\")\n    .retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\" // delay by twice as long for each subsequent retry\n    })\n    .repeat({\n      schedule: Jobs.later.parse.text(refreshPeriod)\n    })\n    .save({\n      // Cancel any jobs of the same type,\n      // but only if this job repeats forever.\n      cancelRepeats: true\n    });\n});\n\nexport default function () {\n  const ownerId = getOwnerUserId();\n  if (ownerId) {\n    Jobs.processJobs(\n      \"shippo/fetchTrackingStatusForOrdersJob\",\n      {\n        pollInterval: 30 * 1000,\n        workTimeout: 180 * 1000\n      },\n      (job, callback) => {\n        // TODO review meteor runAsUser and add to project documentation\n        // As this is run by the Server and we don't have userId()/this.userId\n        // which \"shippo/fetchTrackingStatusForOrders\" need, we use dispatch:run-as-user\n        // An alternative way is https://forums.meteor.com/t/cant-set-logged-in-user-for-rest-calls/18656/3\n        Meteor.runAsUser(ownerId, ()=> {\n          Meteor.call(\"shippo/fetchTrackingStatusForOrders\", error => {\n            if (error) {\n              job.done(error.toString(), { repeatId: true });\n            } else {\n              const success = \"Shippo tracking status updated.\";\n              Logger.debug(success);\n              job.done(success, { repeatId: true });\n            }\n          });\n        });\n        callback();\n      }\n    );\n  }\n  return false;\n}\n"]},"hash":"bae528f6dbb1e3f49f2c2ed2a9ce93982855951c"}
