{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/collections","imported":["Revisions"],"specifiers":[{"kind":"named","imported":"Revisions","local":"Revisions"}]},{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/publications/collections/revisions.js","filenameRelative":"/server/publications/collections/revisions.js","inputSourceMap":{"version":3,"sources":["/server/publications/collections/revisions.js"],"names":["Revisions","Reaction","check","Match","Meteor","publish","documentIds","OneOf","String","Array","userId","ready","shopId","getShopId","Roles","userIsInRole","isArray","find","documentId","$in"],"mappings":"AAAA,IAAS;AAAT,OAA0B,WAA1B;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAgB,A,AACzB,AAAS,AAAO,AAAa,AAE7B;AAIA,AAAO,AAAQ,AAAa,AAAU,AAAa,AACjD,AAAM,AAAa,AAAM,AAAM,AAAQ,AAEvC,AACA;;;AACI,QAAA,AAAK,aAAT,AAAoB,MAAM,cACxB,AAAO,AAAK,AACb;AACD;;MAAM,KAAS,WAAS,MAAxB,AAAe;gBACf;AAAA,AAAI,AAAC,AAAQ,AACX;;MAAO,AAAK,SAAZ,AAAO,SACR;;;gBAED;AAAA,AAAI,AAAM,AAAa,AAAK,AAAQ,AAAC,AAAS,AAAW,AACvD,AAAI,AAAM,AAAQ,AAAc,AAC9B;;YAAO,AAAU,aAAV,AAAe;oCAEpB;;AAAY,AACL;;eAL4C,AAQtD,AAED;AARE,AAAO,AAAe;AAGlB,OADU;AAOhB,AAAO,AAAU,AAAK,AACpB,KATE,CAUF;;;;AA1B6C,AAwB/C,AAID,AACD;;AALS,AAAe,KAER;AAIhB,GAzBA,CALF,AA8BE,AAAO,AAAK,AACb","file":"/server/publications/collections/revisions.js.map","sourcesContent":["import { Revisions } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\nimport { check, Match } from \"meteor/check\";\n\n/**\n * accounts\n */\n\nMeteor.publish(\"Revisions\", function (documentIds) {\n  check(documentIds, Match.OneOf(String, Array));\n\n  // we could additionally make checks of useId defined, but this could lead to\n  // situation when user will may not have time to get an account\n  if (this.userId === null) {\n    return this.ready();\n  }\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"])) {\n    if (Array.isArray(documentIds)) {\n      return Revisions.find({\n        // shopId,\n        documentId: {\n          $in: documentIds\n        }\n      });\n    }\n\n    // global admin can get all accounts\n    return Revisions.find({\n      // shopId,\n      documentId: documentIds\n    });\n  }\n  // regular users should get just their account\n  return this.ready();\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/publications/collections/revisions.js.map","sourceFileName":"/server/publications/collections/revisions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"revisions"},"ignored":false,"code":"var Revisions = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Revisions: function (v) {\n    Revisions = v;\n  }\n}, 0);\nvar Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 1);\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 2);\n/**\n * accounts\n */Meteor.publish(\"Revisions\", function (documentIds) {\n  check(documentIds, Match.OneOf(String, Array)); // we could additionally make checks of useId defined, but this could lead to\n  // situation when user will may not have time to get an account\n\n  if (this.userId === null) {\n    return this.ready();\n  }\n\n  var shopId = Reaction.getShopId();\n\n  if (!shopId) {\n    return this.ready();\n  }\n\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"])) {\n    if (Array.isArray(documentIds)) {\n      return Revisions.find({\n        // shopId,\n        documentId: {\n          $in: documentIds\n        }\n      });\n    } // global admin can get all accounts\n\n\n    return Revisions.find({\n      // shopId,\n      documentId: documentIds\n    });\n  } // regular users should get just their account\n\n\n  return this.ready();\n});","map":{"version":3,"sources":["/server/publications/collections/revisions.js"],"names":["Revisions","Reaction","check","Match","Meteor","publish","documentIds","OneOf","String","Array","userId","ready","shopId","getShopId","Roles","userIsInRole","isArray","find","documentId","$in"],"mappings":"AAAA,IAAS;AAAT,OAA0B,WAA1B;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAgB,A,AACzB,AAAS,AAAO,AAAa,AAE7B;AAIA,AAAO,AAAQ,AAAa,AAAU,AAAa,AACjD,AAAM,AAAa,AAAM,AAAM,AAAQ,AAEvC,AACA;;;AACI,QAAA,AAAK,aAAT,AAAoB,MAAM,cACxB,AAAO,AAAK,AACb;AACD;;MAAM,KAAS,WAAS,MAAxB,AAAe;gBACf;AAAA,AAAI,AAAC,AAAQ,AACX;;MAAO,AAAK,SAAZ,AAAO,SACR;;;gBAED;AAAA,AAAI,AAAM,AAAa,AAAK,AAAQ,AAAC,AAAS,AAAW,AACvD,AAAI,AAAM,AAAQ,AAAc,AAC9B;;YAAO,AAAU,aAAV,AAAe;oCAEpB;;AAAY,AACL;;eAL4C,AAQtD,AAED;AARE,AAAO,AAAe;AAGlB,OADU;AAOhB,AAAO,AAAU,AAAK,AACpB,KATE,CAUF;;;;AA1B6C,AAwB/C,AAID,AACD;;AALS,AAAe,KAER;AAIhB,GAzBA,CALF,AA8BE,AAAO,AAAK,AACb","file":"/server/publications/collections/revisions.js.map","sourcesContent":["import { Revisions } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\nimport { check, Match } from \"meteor/check\";\n\n/**\n * accounts\n */\n\nMeteor.publish(\"Revisions\", function (documentIds) {\n  check(documentIds, Match.OneOf(String, Array));\n\n  // we could additionally make checks of useId defined, but this could lead to\n  // situation when user will may not have time to get an account\n  if (this.userId === null) {\n    return this.ready();\n  }\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"])) {\n    if (Array.isArray(documentIds)) {\n      return Revisions.find({\n        // shopId,\n        documentId: {\n          $in: documentIds\n        }\n      });\n    }\n\n    // global admin can get all accounts\n    return Revisions.find({\n      // shopId,\n      documentId: documentIds\n    });\n  }\n  // regular users should get just their account\n  return this.ready();\n});\n"]},"hash":"8cd3d5c833e32f38bf9e11bb07565be3ace4e640"}
