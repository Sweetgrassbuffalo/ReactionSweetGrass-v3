{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/last","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_last"}]},{"source":"moment","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"moment"}]},{"source":"accounting-js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"accounting"}]},{"source":"meteor/http","imported":["HTTP"],"specifiers":[{"kind":"named","imported":"HTTP","local":"HTTP"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"../../lib/api","imported":["PayPal"],"specifiers":[{"kind":"named","imported":"PayPal","local":"PayPal"}]},{"source":"/lib/collections","imported":["Shops","Cart","Packages"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"},{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":["methods"],"specifiers":[{"kind":"local","local":"methods","exported":"methods"}]}}},"options":{"filename":"/imports/plugins/included/payments-paypal/server/methods/express.js","filenameRelative":"/imports/plugins/included/payments-paypal/server/methods/express.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-paypal/server/methods/express.js"],"names":["moment","accounting","HTTP","Meteor","check","PayPal","Shops","Cart","Packages","Reaction","Logger","nvpVersion","methods","cartId","String","unblock","cart","findOne","Error","shop","shopId","amount","Number","cartTotal","description","name","currency","options","expressCheckoutAccountOptions","response","post","url","params","USER","username","PWD","password","SIGNATURE","signature","SOLUTIONTYPE","VERSION","PAYMENTACTION","AMT","RETURNURL","return_url","CANCELURL","cancel_url","DESC","NOSHIPPING","ALLOWNOTE","CURRENCYCODE","METHOD","INVNUM","CUSTOM","error","message","statusCode","parsedResponse","parseResponse","ACK","L_LONGMESSAGE0","TOKEN","token","payerId","captureAtAuth","getSetting","paymentAction","PAYERID","L_ERRORCODE0","settings","expressCheckoutSettings","merchantId","mode","enabled","paymentMethod","Schemas","PaymentMethod","toFixed","authorizationId","transactions","TRANSACTIONID","currencycode","AUTHORIZATIONID","NOTE","COMPLETETYPE","result","saved","transactionId","metadata","rawTransaction","previousTransaction","REFUNDTYPE","debug","amountFormatted","total","type","created","Date","refundTransactionId","REFUNDTRANSACTIONID","grossRefundAmount","GROSSREFUNDAMT","netRefundAmount","NETREFUNDAMT","correlationId","CORRELATIONID","STARTDATE","TRANSACTIONCLASS","parseRefundReponse","pieces","content","split","forEach","piece","subpieces","decodedResult","decodeURIComponent","paypalArray","i","timeStampKey","timestamp","typeKey","transactionType","amountKey","currencyCodeKey","currencyCode","undefined","responseObject","valueOf","Math","abs","push","parameter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA,AAAO,AAAY,AAEnB,AAAO,AAAgB,AACvB,AAAS,AAAY,AACrB,AAAS,AAAc,AACvB,AAAS,AAAa,AACtB,AAAS,AAAc,AACvB,AAAS,AAAO,AAAM,AAAgB,AACtC,AAAS,AAAU,AAAc,AAEjC,AAAM,AAAa;AAEnB,IAAO,AAAM,aAAU,AACrB;;AAMA,AAA2B,AAAU,AAAQ,AAC3C,AAAM,AAAQ,AACd,AAAK,AACL;;;;;KAAM,AAAO,AAAK,2BAAlB,AAAa,AAAa;kBAC1B;AAAI,SAAJ,AAAK,AAAM,AACT;QAAM,AAAI,YAAJ,AAAW,AAAM,QAAvB,AAAM,AACP;;;6BACD;AAAA,AAAM,AAAO,AAAM,AAAQ,AAAK;;kCAChC;;QAAI,CAAJ,AAAK,MAAM,AACT;YAAM,IAAI,OAAJ,AAAW,MAAjB,AAAM,AAAiB,AACxB;;;6BACD;QAAM,AAAS,cAAO,KAAK,OAA3B,AAAe,AAAO,WACtB;QAAM,WAAc,KAApB,AAAoB,AAAK,AAAO,AAAW,AAC3C;QAAM,UAAW,AAAK,OAAtB,AACA;QAAA,AAAM,AAAU,AAAO,AACvB,AAAI;;QAEJ;AAAI;;gBAEQ,QACN;eAAM,QADA,AACQ,AACd;AAAK,qBAAQ,QAFP,AAGN;AAAW,wBAHL,AAGa,AACnB;mBAJM,AAIQ,AACd;AAAS,yBALH,AAMN;eANM,AAMS,AACf;AAAK,qBAPC,QAQN;qBAAW,QARL,AAQa,AACnB;gBATM,AASK,AAAQ,AACnB;AAAM,sBAVA,AAWN;qBAXM,AAWM,AACZ;AAZM,AAYK,wBACX;kBAbM,AAaQ,AACd;kBAdM,AAcE,AACR;kBAfM,AAeE,8BAhBsB,AACxB,AAgBN,AAAQ,AAAS,AAAM,AAAS,AAAM;AAjB/B,AAAK,AAAK,AAAQ,AAAK,AAChC;AADF;MAAA,AAAW,cADb,AAqBC;AAAC,YAAO,IAAP,AAAc,mBACd;AAAA,AAAM,AAAI,AAAO,AAAM,AAAM,AAC9B;;;6BACD;AAAA,AAAI,AAAC,AAAY,AAAS,AAAe,AAAK,AAC5C;;QAAM,AAAI,AAAO,iBAAX,AAAiB,cAAvB,AAAM,AACP;;;iFACD;AAAA,AAAM,AAAiB,AAAc;;0BACrC;AAAA,AAAI,AAAe,AAAQ,AAAW,AACpC;AArDiB,AAqDjB,AAAM,AAAI,AAAO,AAAM,AAAS,AAAe,AAAM,AAAO,AAAe,AAC5E,AACD,AAAO,AAAe,AACvB,AACD;;;;;;;;;;;AAQA,SAA+B,AAAU,AAAQ,AAAO,AAAS,AAC/D;QAAA,AAAM,OAAQ,KAAd,QACA;;SAAM,MAAN,AAAa,AACb;AAAM,gBAAN,AAAe,OAAf,MACA;AAAA,AAAK,AACL;;QAAM,AAAO,SAAK,OAAL,AAAa,KAA1B,AAAa;kCACb;AAAI,AAAC,QAAL,AAAW,gBACT;QAAM,AAAI,UAAO,OAAjB,AAAM,AAAiB,AACxB;;QACD;;QAAM,AAAS,eAAf,AAAe,AAAO,AAAK,AAC3B;AAAM,AAAO,sBAAb,AAAa,AAAM,AAAQ,AAAK,AAChC;AAAM,WAAN,AAAiB,AAAK,AACtB;AAAM,AAAU,sBAAhB,AAAgB,AAAO,AACvB;AAAA,AAAM,AAAgB,AAAW,AAAK,AAAQ,AAC9C;;QAAA,AAAI;;QACJ;AAAI,sBAAe;;AAEZ,wBACL;eAAgB,QAAhB,AACD;;mBACD,AAAI;AAAJ;eACA,AAAI;kBACF;AAAW,AAAK,wBAAL,AAAU,AAAQ,AAAK,AAChC;AAAQ,iBACN;AAAM,mBADA,AACQ,AACd,AAAK,AAAQ,AACb,AAAW,AAAQ,AACnB;AAZN,AACE,AAAgB,AACjB;AADC,OADF;aAYe,OAJH,AAKN;uBAAe,YALT,AAMN;AANM,AAMD,AACL;;SAAQ,qBAPF,oBAQN;uBAAc,MARR,AASN;AATM,AASC,AACP;;QAAS,+BAXqB,AACxB;;AADC,QAAX,kCADF,AAeC;AAAC,YAAO,IAAP,AAAc,aACd,SAAM,AAAI,eAAJ,AAAW,MAAjB,AAAM,AAAiB,AAAM,AAC9B,4DACD;AAAA,AAAI,AAAC,AAAY,AAAS,AAAe,AAAK,AAC5C;;WAAA,AAAM,AAAI,AAAO,AAAM,AACxB;AACD;AAAA,AAAM,AAAiB,AAAc,AAErC,AAAI,AAAe,AAAQ,AAAW,AACpC,AAAM,AAAI,AAAO,AAAM,AACrB,AAAe,AAAM,AACrB,AAAe,AAAiB,AAChC,AAAe,AAClB;;;;0BACD;QAAA,AAAO;2BAGT;;;AAtHqB,AAoHpB;AAMD,WAA8B,AAAY,AACxC;AAAA,AAAM,AAAW,AAAO,AACxB,AAAM,AAA0B,AAC9B;AA7HiB,AA4HnB,AAAgC,AAClB,AAAS,AACrB,AAAM,AAAS,AACf,AAAS,AAAS,AAEpB,AAAO,AACR,AAED;;;;;;;;;;AAMA,0BAAiC,cAAU,gBAAV,AAAyB,AACxD;QAAA,AAAM,eAAe,AAAS,cAAT,AAAiB,gBAAtC,AACA;QAAA,AAAK,AACL,AAAM,AAAU,AAAO,AACvB,mBAAA,AAAM,AAAS,AAAW,AAAQ,AAAc,AAAQ,AACxD;AAAA,AAAM,AAAkB,AAAc,AAAa,AAAG,AACtD;;QAAM,WAAe,mBAAc,OAAnC,AAAqB,AAA2B,AAAG,AACnD;AAAI,UAPoD,AAOxD,AAEA,AACA;;;kBACe,QAAf,AAAe,AAAW,AAAQ,AAAG,AAAI,AACvC,AAAI;yBACF;AAAW,uBAAA,AAAK,AAAK,QAAV,AAAkB,AAAK,AAChC;AAAQ,qBACN;AAAM,oBADA,AACQ,AACd;AAAK,AAAQ,6BAFP,AAGN;kBAHM,AAGK,AAAQ,AACnB,AAAS,AACT,AAAQ,AACR;AATR,AAAI;;sBAGU,AAMW,AACjB;kBAAM,mBAPA;AADwB;AAAlC,AAAW,WAWZ;AAZD,AAYE,UAAA,AAAO,AAAO,AACd;AAAM,AAAI,wBAAO,KAAX,AAAiB,QAAM;;0BAG/B,AAAI;yBACF;AAAW,uBAAA,AAAK,AAAK,QAAV,AAAkB,AAAK,AAChC;AAAQ,qBACN;AAAM,oBADA,AACQ,AACd;AAAK,AAAQ,6BAFP,AAGN;AAAW,0BAHL,AAGa,AACnB;iBAJM,AAIG,AACT;AAAQ,0BALF,WAAA,AAMN,AAAiB,AACjB,AAAc,AACd;;AA3BR,AAgBC,AAAM;AAFH,AAAM,AACP;eAYU,OARC,AASN;yBAAc,MATR,MASmB;AATnB;AADV,AAAW,AAAuB,AAanC;;AAdD,QAcE,CAAA,AAAO,YAAO,6BACd;YAAM,IAAI,OAAO,MAAjB,AAAM,AAAiB,AAAM,AAC9B;AACF;;uCAED,AAAI,AAAC,AAAY,AAAS,AAAe,AAAK,AAC5C;;QAAM,AAAI,eAAJ,AAAW,AAAM,mBAAvB,AAAM,AACP;;AAED,AAAM,AAAiB,AAAc;;;AAEjC,aAAJ,AAAI,AAAe,AAAQ,AAAW,AACpC;AAAM,AAAI,uBAAJ,AAAW,AAAM,eAAvB,AAAM,AAAiB,AAAS,AAAe,AAAM,AAAO,AAAe,AAC5E;;oBAED;AAAM,gBAAS,AACb;AADa,AACN,sBADM,AAEb,AAAiB,AAAe,AAChC,AAAe,AAAe,AAC9B;AARF;WAIe,AAIC,AACd;AALa,AAKH,AACV,AAAgB;AAzMC,AAmMnB,AASA,AAAO,AACR,AAED;;;;;;;;AAOA,kBAA+B,AAAU,AAAe,AAAQ,AAC9D;SAAA,AAAM,AAAe,AAAS,AAAQ,AACtC,AAAM,AAAQ,AACd;AAAK,QAAL,iBAEA;;QAAM,AAAU,AAAO,0CAAvB,AAAgB;;4CAChB;QAAM,eAAsB,AAAO,oBAAnC,AAA4B,AAAqB,AACjD;QAAA,AAAM,AAAgB,AAAoB,AAC1C;;QAAA,AAAM,AAAe,AAAoB,AAEzC;AAAA,AAAI;;wBAEF;eAAW,AAAK,QAAL,AAAU,AAAQ,AAAK,AAChC;AAAQ,6BACN;AAAM,mBADA,AACQ,AACd;AAAK,kBAFC,AAEO,AACb;AAAW,yBAHL,AAGa,AACnB;AAAS,sBAJH,AAKN;eALM,AAKE,AACR;wBANM,AAMS,AACf,AAAY,AACZ,AAAK,AACL;AAXN,AAAI;;oBAEQ,AASQ;0BAVgB;AAAlC,AAAW,mCAaZ;AAdD,AAcG,AAAO,AAAO,AACf,AAAO,AAAM,AAAO,AACpB;;SAAM,AAAI,YAAJ,AAAW,AAAM,SAAvB,AAAM,AAAuB,oBAC9B;;6BAED;AAAA,AAAI,AAAC,AAAY,AAAS,AAAe,AAAK,AAC5C,AAAO,AAAM,AAAO,AACpB;;QAAM,AAAI,AAAO,iBAAX,AAAiB,cAAvB,AAAM,AACP;;;iFAED;AAAA,AAAM,AAAiB,AAAc,AACrC;;AAAI,QAAA,AAAe;AACX,aAAN,AAAM,AAAI,AAAO,AAAM,AAAS,AAAe,AAAM,AAAO,AAAe,AAC5E;gBAED,AAAM,AAAkB,AACtB;AALF,AAA2B,AAAW,AACpC;QAIO;aADT,AAAwB,AAEZ;YAGZ;AAAM,mBAAS,AACb;AADa,AACN,qBACP;AAFa,AAEP,0CACN;AAAS,AAAI,yBAHA,eAIb;AAAe,uBAJF,eAKb;qBAAqB,eALR,AAKuB,AACpC;oBAAmB,eANN,AAMqB,AAClC;cAPa,AAOI,AAAe,AAChC;AAAe,sBARF,AAQiB,AAC9B,AAAc,AAAe,AAC7B;AAfsB,AAEtB;WAGa,AAUL,AACR;AAXa,AAWG;AA9QC,AAmQnB,AAaA,AAAO,AACR,AACD;;;;;;;;AAOA,SAA6B,AAAU,AAAe,AACpD,AAAM,AAAe,AAAS,AAAQ,AACtC;AAAK,QAAL,iBAEA;QAAM,AAAU,gBAAO,cAAvB,AAAgB,AAChB;QAAA,AAAM,AAAgB,AAAc,AACpC,AAAI;;QAEJ;AAAI;;gBAEQ,QACN;eAAM,QADA,AACQ,AACd;AAAK,qBAAQ,QAFP,AAGN;mBAHM,AAGK,AAAQ,AACnB;kBAJM,AAIG,AACT;AAAQ,qBALF,AAMN;AAAW,yBANL,AAON;AAAe,4BARe,AACxB,AAQN,AAAkB;AATX,AAAK,AAAK,AAAQ,AAAK,AAChC;AADF;MAAA,AAAW,cADb,AAaC;AAAE,YAAO,IAAP,AAAc,mBACf;AAAA,AAAM,AAAI,AAAO,AAAM,AAAM,AAC9B;;kDAED;AAAI,AAAC,gBAAD,AAAa,aAAjB,AAAiB,AAAS,AAAe,AAAK,AAC5C;AAAA,AAAM,AAAI,AAAO,AAAM,AACxB;;uCAED,AAAM,AAAiB,AAAc;;0CAErC;AAAI,uBAAA,AAAe,MAAQ,SAA3B,AAAsC,2CACpC;AAAA,AAAM,AAAI,AAAO,AAAM,AAAS,AAAe,AAAM,AAAO,AAAe,AAC5E;;;WACD;A,AA3TG,AAAgB,AA2TnB,AAAM,AAAS,AAAmB,AAClC,AAAO,AACR,AAIH;;;;AACA,SAAA,AAAS,cAAT,AAAuB,UAAU,AAC/B;MAAM,SAAN,AAAe,AACf;MAAM,SAAS,SAAA,AAAS,QAAT,AAAiB,MAAhC,AAAe,AAAuB,AACtC;SAAA,AAAO,QAAQ,UAAA,AAAU,OAAO,AAC9B;QAAM,YAAY,MAAA,AAAM,MAAxB,AAAkB,AAAY,AAC9B;QAAM,gBAAgB,OAAO,UAAP,AAAO,AAAU,MAAM,mBAAmB,UAAhE,AAA6C,AAAmB,AAAU,AAC1E;WAAA,AAAO,AACR;AAJD,AAKA;SAAA,AAAO,AACR;A,AAED,EAKA,AAAS,AAAmB,AAAU;;;;;;AACpC,AAAM,SAAN,AAAoB;oBAEpB,AAAK,AAAI,AAAI,AAAG,AAAI,AAAK,AAAK,AAC5B;;OAAM,eAAe,UAArB,AAAqC,AACrC;QAAM,AAAY,eAAS,gBAA3B,AAAkB,AAClB;QAAM,AAAU,qBAAhB,AAA2B,AAC3B;QAAM,UAAkB,WAAxB,AAAwB,AAAS,AACjC;QAAM,AAAY,kBAAlB,AAA4B,SAC5B;QAAM,AAAS,YAAS,UAAxB,AAAe,AACf;QAAM,kBAAN,AAAwB,AAAmB,AAC3C;QAAM,AAAe,kBAAS,mBAA9B,AAAqB;gCAErB,AAAI,AAAc,AAAa,AAAoB,AAAU,AAC3D;;QAAM,cAAiB,2CACrB;UAAS,AAAO;AACV,iBAFe,kBAGrB;cAHqB,AAGb,AAAK,AAAI,AAAO,AAAQ,AAChC;gBAAU,wBAJZ,AAAuB;kBAMvB,AAAY,AAAK,AAClB;AAPwB,AACZ,AAAkB,AAC3B;uBAML;;AAED,AAAO,AACR;;;AAED,AAAa,AAAU,AAAQ,AAAW;;AACxC,AAAM,aAAW,UAAS,QAAT,AAAiB,WAChC;MAAM;UAD0B,AAExB,AACR;YAHe,AAAiB,AAGvB;AACR,aAJH,AAKA;AAHE,GAFgC,EADpC,AAME,AAAO,AAAS,AACjB;A,AAED;GACA,AAAO,AAAQ","file":"/imports/plugins/included/payments-paypal/server/methods/express.js.map","sourcesContent":["import moment from \"moment\";\nimport _ from \"lodash\";\nimport accounting from \"accounting-js\";\nimport { HTTP } from \"meteor/http\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { PayPal } from \"../../lib/api\";\nimport { Shops, Cart, Packages } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\nconst nvpVersion = \"52.0\";\n\nexport const methods = {\n  /**\n   * Acquire the Token required for PayPal Express transactions\n   * https://developer.paypal.com/docs/classic/api/merchant/SetExpressCheckout_API_Operation_NVP/\n   * @param  {String} cartId Reference to the Cart object to be processed\n   * @return {String} PayPal Token\n   */\n  \"getExpressCheckoutToken\": function (cartId) {\n    check(cartId, String);\n    this.unblock();\n    const cart = Cart.findOne(cartId);\n    if (!cart) {\n      throw new Meteor.Error(\"Bad cart ID\");\n    }\n    const shop = Shops.findOne(cart.shopId);\n    if (!shop) {\n      throw new Meteor.Error(\"Bad shop ID\");\n    }\n    const amount = Number(cart.cartTotal());\n    const description = shop.name + \" Ref: \" + cartId;\n    const currency = shop.currency;\n    const options = PayPal.expressCheckoutAccountOptions();\n    let response;\n\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          SOLUTIONTYPE: \"Mark\",\n          VERSION: nvpVersion,\n          PAYMENTACTION: \"Authorization\",\n          AMT: amount,\n          RETURNURL: options.return_url,\n          CANCELURL: options.cancel_url,\n          DESC: description,\n          NOSHIPPING: 1,\n          ALLOWNOTE: 1,\n          CURRENCYCODE: currency,\n          METHOD: \"SetExpressCheckout\",\n          INVNUM: cartId,\n          CUSTOM: cartId + \"|\" + amount + \"|\" + currency\n        }\n      });\n    } catch (error) {\n      throw new Meteor.Error(error.message);\n    }\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad response from PayPal\");\n    }\n    const parsedResponse = parseResponse(response);\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n    return parsedResponse.TOKEN;\n  },\n  /**\n   * Perform the PayPal Express payment application\n   * https://developer.paypal.com/docs/classic/api/merchant/DoExpressCheckoutPayment_API_Operation_NVP/\n   * @param  {String} cartId Reference to the cart we are checking out\n   * @param  {String} token The Token provided by PayPal for this transaction\n   * @param  {String} payerId Reference to the payer\n   * @return {Object} results from PayPal normalized\n   */\n  \"confirmPaymentAuthorization\": function (cartId, token, payerId) {\n    check(cartId, String);\n    check(token, String);\n    check(payerId, String);\n    this.unblock();\n    const cart = Cart.findOne(cartId);\n    if (!cart) {\n      throw new Meteor.Error(\"Bad cart ID\");\n    }\n    const amount = Number(cart.cartTotal());\n    const shop = Shops.findOne(cart.shopId);\n    const currency = shop.currency;\n    const options = PayPal.expressCheckoutAccountOptions();\n    const captureAtAuth = getSetting(cart.shopId, \"express_auth_and_capture\");\n    let paymentAction;\n    if (captureAtAuth) {\n      paymentAction = \"Sale\";\n    } else {\n      paymentAction = \"Authorization\";\n    }\n    let response;\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          VERSION: nvpVersion,\n          PAYMENTACTION: paymentAction,\n          AMT: amount,\n          METHOD: \"DoExpressCheckoutPayment\",\n          CURRENCYCODE: currency,\n          TOKEN: token,\n          PAYERID: payerId\n        }\n      });\n    } catch (error) {\n      throw new Meteor.Error(error.message);\n    }\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad response from PayPal\");\n    }\n    const parsedResponse = parseResponse(response);\n\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" +\n        parsedResponse.ACK + \": \" +\n        parsedResponse.L_LONGMESSAGE0 + \":\" +\n        parsedResponse.L_ERRORCODE0);\n    }\n    return parsedResponse;\n  },\n\n  /**\n   * Return the settings for the PayPal Express payment Method\n   * @return {Object} Express Checkout settings\n   */\n  \"getExpressCheckoutSettings\": function () {\n    const settings = PayPal.expressCheckoutAccountOptions();\n    const expressCheckoutSettings = {\n      merchantId: settings.merchantId,\n      mode: settings.mode,\n      enabled: settings.enabled\n    };\n    return expressCheckoutSettings;\n  },\n\n  /**\n   * Capture an authorized PayPalExpress transaction\n   * https://developer.paypal.com/docs/classic/api/merchant/DoCapture_API_Operation_NVP/\n   * @param  {Object} paymentMethod A PaymentMethod object\n   * @return {Object} results from PayPal normalized\n   */\n  \"paypalexpress/payment/capture\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    this.unblock();\n    const options = PayPal.expressCheckoutAccountOptions();\n    const amount = accounting.toFixed(paymentMethod.amount, 2);\n    const authorizationId = paymentMethod.transactions[0].TRANSACTIONID;\n    const currencycode = paymentMethod.transactions[0].CURRENCYCODE;\n    let response;\n\n    // 100% discounts are not valid when using PayPal Express\n    // If discount is 100%, void authorization instead of applying discount\n    if (amount === accounting.toFixed(0, 2)) {\n      try {\n        response = HTTP.post(options.url, {\n          params: {\n            USER: options.username,\n            PWD: options.password,\n            SIGNATURE: options.signature,\n            VERSION: nvpVersion,\n            METHOD: \"DoVoid\",\n            AUTHORIZATIONID: authorizationId,\n            NOTE: \"Your order has been discounted 100%, and will appear as voided or canceled inside your payment account.\"\n          }\n        });\n      } catch (error) {\n        throw new Meteor.Error(error.message);\n      }\n    } else {\n      try {\n        response = HTTP.post(options.url, {\n          params: {\n            USER: options.username,\n            PWD: options.password,\n            SIGNATURE: options.signature,\n            VERSION: nvpVersion,\n            METHOD: \"DoCapture\",\n            AUTHORIZATIONID: authorizationId,\n            CURRENCYCODE: currencycode,\n            AMT: amount,\n            COMPLETETYPE: \"Complete\" // TODO: Allow for partial captures\n          }\n        });\n      } catch (error) {\n        throw new Meteor.Error(error.message);\n      }\n    }\n\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad Response from PayPal during Capture\");\n    }\n\n    const parsedResponse = parseResponse(response);\n\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n\n    const result = {\n      saved: true,\n      authorizationId: parsedResponse.AUTHORIZATIONID,\n      transactionId: parsedResponse.TRANSACTIONID,\n      currencycode: currencycode,\n      metadata: {},\n      rawTransaction: parsedResponse\n    };\n\n    return result;\n  },\n\n  /**\n   * Refund an order using the PayPay Express method\n   * https://developer.paypal.com/docs/classic/api/merchant/RefundTransaction_API_Operation_NVP/\n   * @param  {Object} paymentMethod A PaymentMethod object\n   * @param {Number} amount to be refunded\n   * @return {Object} Transaction results from PayPal normalized\n   */\n  \"paypalexpress/refund/create\": function (paymentMethod, amount) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    check(amount, Number);\n    this.unblock();\n\n    const options = PayPal.expressCheckoutAccountOptions();\n    const previousTransaction = _.last(paymentMethod.transactions);\n    const transactionId = previousTransaction.transactionId;\n    const currencycode = previousTransaction.currencycode;\n\n    let response;\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          VERSION: nvpVersion,\n          METHOD: \"RefundTransaction\",\n          TRANSACTIONID: transactionId,\n          REFUNDTYPE: \"Partial\",\n          AMT: amount,\n          CURRENCYCODE: currencycode\n        }\n      });\n    }  catch (error) {\n      Logger.debug(error, \"Failed paypalexpress/refund/create\");\n      throw new Meteor.Error(error.message);\n    }\n\n    if (!response || response.statusCode !== 200) {\n      Logger.debug(error, \"Bad Response from PayPal during Refund Creation\");\n      throw new Meteor.Error(\"Bad Response from PayPal during Refund Creation\");\n    }\n\n    const parsedResponse = parseResponse(response);\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n\n    const amountFormatted = {\n      total: amount,\n      currency: currencycode\n    };\n\n    const result = {\n      saved: true,\n      type: \"refund\",\n      created: new Date(),\n      transactionId: transactionId,\n      refundTransactionId: parsedResponse.REFUNDTRANSACTIONID,\n      grossRefundAmount: parsedResponse.GROSSREFUNDAMT,\n      netRefundAmount: parsedResponse.NETREFUNDAMT,\n      correlationId: parsedResponse.CORRELATIONID,\n      currencycode: parsedResponse.CURRENCYCODE,\n      amount: amountFormatted,\n      rawTransaction: parsedResponse\n    };\n    return result;\n  },\n  /**\n   * Query PayPal Express NVP API for Refund transactions\n   * Refunds returned here are listed in the dashboard\n   * https://developer.paypal.com/docs/classic/api/merchant/GetTransactionDetails_API_Operation_NVP/\n   * @param  {Object} paymentMethod A PaymentMethod object\n   * @return {array}  Refunds from PayPal query, normalized\n   */\n  \"paypalexpress/refund/list\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    this.unblock();\n\n    const options = PayPal.expressCheckoutAccountOptions();\n    const transactionId = paymentMethod.transactionId;\n    let response;\n\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          VERSION: nvpVersion,\n          METHOD: \"TransactionSearch\",\n          STARTDATE: \"2013-08-24T05:38:48Z\",\n          TRANSACTIONID: transactionId,\n          TRANSACTIONCLASS: \"Refund\"\n        }\n      });\n    }  catch (error) {\n      throw new Meteor.Error(error.message);\n    }\n\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad Response from PayPal during refund list\");\n    }\n\n    const parsedResponse = parseResponse(response);\n\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n    const result = parseRefundReponse(parsedResponse);\n    return result;\n  }\n\n};\n\n// internal helpers\nfunction parseResponse(response) {\n  const result = {};\n  const pieces = response.content.split(\"&\");\n  pieces.forEach(function (piece) {\n    const subpieces = piece.split(\"=\");\n    const decodedResult = result[subpieces[0]] = decodeURIComponent(subpieces[1]);\n    return decodedResult;\n  });\n  return result;\n}\n\n/**\n * Parse PayPal's 'unique' Transaction Query response to look for refunds\n * @param  {Object} response The response from PayPal\n * @return {Object} Refunds, normalized to an Array\n */\nfunction parseRefundReponse(response) {\n  const paypalArray = [];\n\n  for (let i = 0; i < 101; i++) {\n    const timeStampKey = \"L_TIMESTAMP\" + i;\n    const timestamp = response[timeStampKey];\n    const typeKey = \"L_TYPE\" + i;\n    const transactionType = response[typeKey];\n    const amountKey = \"L_AMT\" + i;\n    const amount = response[amountKey];\n    const currencyCodeKey = \"L_CURRENCYCODE\" + i;\n    const currencyCode = response[currencyCodeKey];\n\n    if (timestamp !== undefined && transactionType === \"Refund\") {\n      const responseObject = {\n        created: moment(timestamp).valueOf(),\n        type: \"refund\",\n        amount: Math.abs(Number(amount, 10)),\n        currency: currencyCode\n      };\n      paypalArray.push(responseObject);\n    }\n  }\n\n  return paypalArray;\n}\n\ngetSetting = function (shopId, parameter) {\n  const settings = Packages.findOne({\n    name: \"reaction-paypal\",\n    shopId: shopId,\n    enabled: true\n  }).settings;\n  return settings[parameter];\n};\n\n// export methods to Meteor\nMeteor.methods(methods);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-paypal/server/methods/express.js.map","sourceFileName":"/imports/plugins/included/payments-paypal/server/methods/express.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"express"},"ignored":false,"code":"module.export({\n  methods: function () {\n    return methods;\n  }\n});\n\nvar _last = void 0;\n\nmodule.importSync(\"lodash/last\", {\n  \"default\": function (v) {\n    _last = v;\n  }\n}, 0);\nvar moment = void 0;\nmodule.importSync(\"moment\", {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 1);\nvar accounting = void 0;\nmodule.importSync(\"accounting-js\", {\n  \"default\": function (v) {\n    accounting = v;\n  }\n}, 2);\nvar HTTP = void 0;\nmodule.importSync(\"meteor/http\", {\n  HTTP: function (v) {\n    HTTP = v;\n  }\n}, 3);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 4);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 5);\nvar PayPal = void 0;\nmodule.importSync(\"../../lib/api\", {\n  PayPal: function (v) {\n    PayPal = v;\n  }\n}, 6);\nvar Shops = void 0,\n    Cart = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  },\n  Cart: function (v) {\n    Cart = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 7);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 8);\nvar nvpVersion = \"52.0\";\nvar methods = {\n  /**\n   * Acquire the Token required for PayPal Express transactions\n   * https://developer.paypal.com/docs/classic/api/merchant/SetExpressCheckout_API_Operation_NVP/\n   * @param  {String} cartId Reference to the Cart object to be processed\n   * @return {String} PayPal Token\n   */\"getExpressCheckoutToken\": function (cartId) {\n    check(cartId, String);\n    this.unblock();\n    var cart = Cart.findOne(cartId);\n\n    if (!cart) {\n      throw new Meteor.Error(\"Bad cart ID\");\n    }\n\n    var shop = Shops.findOne(cart.shopId);\n\n    if (!shop) {\n      throw new Meteor.Error(\"Bad shop ID\");\n    }\n\n    var amount = Number(cart.cartTotal());\n    var description = shop.name + \" Ref: \" + cartId;\n    var currency = shop.currency;\n    var options = PayPal.expressCheckoutAccountOptions();\n    var response = void 0;\n\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          SOLUTIONTYPE: \"Mark\",\n          VERSION: nvpVersion,\n          PAYMENTACTION: \"Authorization\",\n          AMT: amount,\n          RETURNURL: options.return_url,\n          CANCELURL: options.cancel_url,\n          DESC: description,\n          NOSHIPPING: 1,\n          ALLOWNOTE: 1,\n          CURRENCYCODE: currency,\n          METHOD: \"SetExpressCheckout\",\n          INVNUM: cartId,\n          CUSTOM: cartId + \"|\" + amount + \"|\" + currency\n        }\n      });\n    } catch (error) {\n      throw new Meteor.Error(error.message);\n    }\n\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad response from PayPal\");\n    }\n\n    var parsedResponse = parseResponse(response);\n\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n\n    return parsedResponse.TOKEN;\n  },\n  /**\n   * Perform the PayPal Express payment application\n   * https://developer.paypal.com/docs/classic/api/merchant/DoExpressCheckoutPayment_API_Operation_NVP/\n   * @param  {String} cartId Reference to the cart we are checking out\n   * @param  {String} token The Token provided by PayPal for this transaction\n   * @param  {String} payerId Reference to the payer\n   * @return {Object} results from PayPal normalized\n   */\"confirmPaymentAuthorization\": function (cartId, token, payerId) {\n    check(cartId, String);\n    check(token, String);\n    check(payerId, String);\n    this.unblock();\n    var cart = Cart.findOne(cartId);\n\n    if (!cart) {\n      throw new Meteor.Error(\"Bad cart ID\");\n    }\n\n    var amount = Number(cart.cartTotal());\n    var shop = Shops.findOne(cart.shopId);\n    var currency = shop.currency;\n    var options = PayPal.expressCheckoutAccountOptions();\n    var captureAtAuth = getSetting(cart.shopId, \"express_auth_and_capture\");\n    var paymentAction = void 0;\n\n    if (captureAtAuth) {\n      paymentAction = \"Sale\";\n    } else {\n      paymentAction = \"Authorization\";\n    }\n\n    var response = void 0;\n\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          VERSION: nvpVersion,\n          PAYMENTACTION: paymentAction,\n          AMT: amount,\n          METHOD: \"DoExpressCheckoutPayment\",\n          CURRENCYCODE: currency,\n          TOKEN: token,\n          PAYERID: payerId\n        }\n      });\n    } catch (error) {\n      throw new Meteor.Error(error.message);\n    }\n\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad response from PayPal\");\n    }\n\n    var parsedResponse = parseResponse(response);\n\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0 + \":\" + parsedResponse.L_ERRORCODE0);\n    }\n\n    return parsedResponse;\n  },\n  /**\n   * Return the settings for the PayPal Express payment Method\n   * @return {Object} Express Checkout settings\n   */\"getExpressCheckoutSettings\": function () {\n    var settings = PayPal.expressCheckoutAccountOptions();\n    var expressCheckoutSettings = {\n      merchantId: settings.merchantId,\n      mode: settings.mode,\n      enabled: settings.enabled\n    };\n    return expressCheckoutSettings;\n  },\n  /**\n   * Capture an authorized PayPalExpress transaction\n   * https://developer.paypal.com/docs/classic/api/merchant/DoCapture_API_Operation_NVP/\n   * @param  {Object} paymentMethod A PaymentMethod object\n   * @return {Object} results from PayPal normalized\n   */\"paypalexpress/payment/capture\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    this.unblock();\n    var options = PayPal.expressCheckoutAccountOptions();\n    var amount = accounting.toFixed(paymentMethod.amount, 2);\n    var authorizationId = paymentMethod.transactions[0].TRANSACTIONID;\n    var currencycode = paymentMethod.transactions[0].CURRENCYCODE;\n    var response = void 0; // 100% discounts are not valid when using PayPal Express\n    // If discount is 100%, void authorization instead of applying discount\n\n    if (amount === accounting.toFixed(0, 2)) {\n      try {\n        response = HTTP.post(options.url, {\n          params: {\n            USER: options.username,\n            PWD: options.password,\n            SIGNATURE: options.signature,\n            VERSION: nvpVersion,\n            METHOD: \"DoVoid\",\n            AUTHORIZATIONID: authorizationId,\n            NOTE: \"Your order has been discounted 100%, and will appear as voided or canceled inside your payment account.\"\n          }\n        });\n      } catch (error) {\n        throw new Meteor.Error(error.message);\n      }\n    } else {\n      try {\n        response = HTTP.post(options.url, {\n          params: {\n            USER: options.username,\n            PWD: options.password,\n            SIGNATURE: options.signature,\n            VERSION: nvpVersion,\n            METHOD: \"DoCapture\",\n            AUTHORIZATIONID: authorizationId,\n            CURRENCYCODE: currencycode,\n            AMT: amount,\n            COMPLETETYPE: \"Complete\" // TODO: Allow for partial captures\n\n          }\n        });\n      } catch (error) {\n        throw new Meteor.Error(error.message);\n      }\n    }\n\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad Response from PayPal during Capture\");\n    }\n\n    var parsedResponse = parseResponse(response);\n\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n\n    var result = {\n      saved: true,\n      authorizationId: parsedResponse.AUTHORIZATIONID,\n      transactionId: parsedResponse.TRANSACTIONID,\n      currencycode: currencycode,\n      metadata: {},\n      rawTransaction: parsedResponse\n    };\n    return result;\n  },\n  /**\n   * Refund an order using the PayPay Express method\n   * https://developer.paypal.com/docs/classic/api/merchant/RefundTransaction_API_Operation_NVP/\n   * @param  {Object} paymentMethod A PaymentMethod object\n   * @param {Number} amount to be refunded\n   * @return {Object} Transaction results from PayPal normalized\n   */\"paypalexpress/refund/create\": function (paymentMethod, amount) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    check(amount, Number);\n    this.unblock();\n    var options = PayPal.expressCheckoutAccountOptions();\n\n    var previousTransaction = _last(paymentMethod.transactions);\n\n    var transactionId = previousTransaction.transactionId;\n    var currencycode = previousTransaction.currencycode;\n    var response = void 0;\n\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          VERSION: nvpVersion,\n          METHOD: \"RefundTransaction\",\n          TRANSACTIONID: transactionId,\n          REFUNDTYPE: \"Partial\",\n          AMT: amount,\n          CURRENCYCODE: currencycode\n        }\n      });\n    } catch (error) {\n      Logger.debug(error, \"Failed paypalexpress/refund/create\");\n      throw new Meteor.Error(error.message);\n    }\n\n    if (!response || response.statusCode !== 200) {\n      Logger.debug(error, \"Bad Response from PayPal during Refund Creation\");\n      throw new Meteor.Error(\"Bad Response from PayPal during Refund Creation\");\n    }\n\n    var parsedResponse = parseResponse(response);\n\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n\n    var amountFormatted = {\n      total: amount,\n      currency: currencycode\n    };\n    var result = {\n      saved: true,\n      type: \"refund\",\n      created: new Date(),\n      transactionId: transactionId,\n      refundTransactionId: parsedResponse.REFUNDTRANSACTIONID,\n      grossRefundAmount: parsedResponse.GROSSREFUNDAMT,\n      netRefundAmount: parsedResponse.NETREFUNDAMT,\n      correlationId: parsedResponse.CORRELATIONID,\n      currencycode: parsedResponse.CURRENCYCODE,\n      amount: amountFormatted,\n      rawTransaction: parsedResponse\n    };\n    return result;\n  },\n  /**\n   * Query PayPal Express NVP API for Refund transactions\n   * Refunds returned here are listed in the dashboard\n   * https://developer.paypal.com/docs/classic/api/merchant/GetTransactionDetails_API_Operation_NVP/\n   * @param  {Object} paymentMethod A PaymentMethod object\n   * @return {array}  Refunds from PayPal query, normalized\n   */\"paypalexpress/refund/list\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    this.unblock();\n    var options = PayPal.expressCheckoutAccountOptions();\n    var transactionId = paymentMethod.transactionId;\n    var response = void 0;\n\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          VERSION: nvpVersion,\n          METHOD: \"TransactionSearch\",\n          STARTDATE: \"2013-08-24T05:38:48Z\",\n          TRANSACTIONID: transactionId,\n          TRANSACTIONCLASS: \"Refund\"\n        }\n      });\n    } catch (error) {\n      throw new Meteor.Error(error.message);\n    }\n\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad Response from PayPal during refund list\");\n    }\n\n    var parsedResponse = parseResponse(response);\n\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n\n    var result = parseRefundReponse(parsedResponse);\n    return result;\n  }\n};\n\n// internal helpers\nfunction parseResponse(response) {\n  var result = {};\n  var pieces = response.content.split(\"&\");\n  pieces.forEach(function (piece) {\n    var subpieces = piece.split(\"=\");\n    var decodedResult = result[subpieces[0]] = decodeURIComponent(subpieces[1]);\n    return decodedResult;\n  });\n  return result;\n} /**\n   * Parse PayPal's 'unique' Transaction Query response to look for refunds\n   * @param  {Object} response The response from PayPal\n   * @return {Object} Refunds, normalized to an Array\n   */\n\nfunction parseRefundReponse(response) {\n  var paypalArray = [];\n\n  for (var i = 0; i < 101; i++) {\n    var timeStampKey = \"L_TIMESTAMP\" + i;\n    var timestamp = response[timeStampKey];\n    var typeKey = \"L_TYPE\" + i;\n    var transactionType = response[typeKey];\n    var amountKey = \"L_AMT\" + i;\n    var amount = response[amountKey];\n    var currencyCodeKey = \"L_CURRENCYCODE\" + i;\n    var currencyCode = response[currencyCodeKey];\n\n    if (timestamp !== undefined && transactionType === \"Refund\") {\n      var responseObject = {\n        created: moment(timestamp).valueOf(),\n        type: \"refund\",\n        amount: Math.abs(Number(amount, 10)),\n        currency: currencyCode\n      };\n      paypalArray.push(responseObject);\n    }\n  }\n\n  return paypalArray;\n}\n\ngetSetting = function (shopId, parameter) {\n  var settings = Packages.findOne({\n    name: \"reaction-paypal\",\n    shopId: shopId,\n    enabled: true\n  }).settings;\n  return settings[parameter];\n}; // export methods to Meteor\n\n\nMeteor.methods(methods);","map":{"version":3,"sources":["/imports/plugins/included/payments-paypal/server/methods/express.js"],"names":["moment","accounting","HTTP","Meteor","check","PayPal","Shops","Cart","Packages","Reaction","Logger","nvpVersion","methods","cartId","String","unblock","cart","findOne","Error","shop","shopId","amount","Number","cartTotal","description","name","currency","options","expressCheckoutAccountOptions","response","post","url","params","USER","username","PWD","password","SIGNATURE","signature","SOLUTIONTYPE","VERSION","PAYMENTACTION","AMT","RETURNURL","return_url","CANCELURL","cancel_url","DESC","NOSHIPPING","ALLOWNOTE","CURRENCYCODE","METHOD","INVNUM","CUSTOM","error","message","statusCode","parsedResponse","parseResponse","ACK","L_LONGMESSAGE0","TOKEN","token","payerId","captureAtAuth","getSetting","paymentAction","PAYERID","L_ERRORCODE0","settings","expressCheckoutSettings","merchantId","mode","enabled","paymentMethod","Schemas","PaymentMethod","toFixed","authorizationId","transactions","TRANSACTIONID","currencycode","AUTHORIZATIONID","NOTE","COMPLETETYPE","result","saved","transactionId","metadata","rawTransaction","previousTransaction","REFUNDTYPE","debug","amountFormatted","total","type","created","Date","refundTransactionId","REFUNDTRANSACTIONID","grossRefundAmount","GROSSREFUNDAMT","netRefundAmount","NETREFUNDAMT","correlationId","CORRELATIONID","STARTDATE","TRANSACTIONCLASS","parseRefundReponse","pieces","content","split","forEach","piece","subpieces","decodedResult","decodeURIComponent","paypalArray","i","timeStampKey","timestamp","typeKey","transactionType","amountKey","currencyCodeKey","currencyCode","undefined","responseObject","valueOf","Math","abs","push","parameter"],"mappings":"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","file":"/imports/plugins/included/payments-paypal/server/methods/express.js.map","sourcesContent":["import moment from \"moment\";\nimport _ from \"lodash\";\nimport accounting from \"accounting-js\";\nimport { HTTP } from \"meteor/http\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { PayPal } from \"../../lib/api\";\nimport { Shops, Cart, Packages } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\nconst nvpVersion = \"52.0\";\n\nexport const methods = {\n  /**\n   * Acquire the Token required for PayPal Express transactions\n   * https://developer.paypal.com/docs/classic/api/merchant/SetExpressCheckout_API_Operation_NVP/\n   * @param  {String} cartId Reference to the Cart object to be processed\n   * @return {String} PayPal Token\n   */\n  \"getExpressCheckoutToken\": function (cartId) {\n    check(cartId, String);\n    this.unblock();\n    const cart = Cart.findOne(cartId);\n    if (!cart) {\n      throw new Meteor.Error(\"Bad cart ID\");\n    }\n    const shop = Shops.findOne(cart.shopId);\n    if (!shop) {\n      throw new Meteor.Error(\"Bad shop ID\");\n    }\n    const amount = Number(cart.cartTotal());\n    const description = shop.name + \" Ref: \" + cartId;\n    const currency = shop.currency;\n    const options = PayPal.expressCheckoutAccountOptions();\n    let response;\n\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          SOLUTIONTYPE: \"Mark\",\n          VERSION: nvpVersion,\n          PAYMENTACTION: \"Authorization\",\n          AMT: amount,\n          RETURNURL: options.return_url,\n          CANCELURL: options.cancel_url,\n          DESC: description,\n          NOSHIPPING: 1,\n          ALLOWNOTE: 1,\n          CURRENCYCODE: currency,\n          METHOD: \"SetExpressCheckout\",\n          INVNUM: cartId,\n          CUSTOM: cartId + \"|\" + amount + \"|\" + currency\n        }\n      });\n    } catch (error) {\n      throw new Meteor.Error(error.message);\n    }\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad response from PayPal\");\n    }\n    const parsedResponse = parseResponse(response);\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n    return parsedResponse.TOKEN;\n  },\n  /**\n   * Perform the PayPal Express payment application\n   * https://developer.paypal.com/docs/classic/api/merchant/DoExpressCheckoutPayment_API_Operation_NVP/\n   * @param  {String} cartId Reference to the cart we are checking out\n   * @param  {String} token The Token provided by PayPal for this transaction\n   * @param  {String} payerId Reference to the payer\n   * @return {Object} results from PayPal normalized\n   */\n  \"confirmPaymentAuthorization\": function (cartId, token, payerId) {\n    check(cartId, String);\n    check(token, String);\n    check(payerId, String);\n    this.unblock();\n    const cart = Cart.findOne(cartId);\n    if (!cart) {\n      throw new Meteor.Error(\"Bad cart ID\");\n    }\n    const amount = Number(cart.cartTotal());\n    const shop = Shops.findOne(cart.shopId);\n    const currency = shop.currency;\n    const options = PayPal.expressCheckoutAccountOptions();\n    const captureAtAuth = getSetting(cart.shopId, \"express_auth_and_capture\");\n    let paymentAction;\n    if (captureAtAuth) {\n      paymentAction = \"Sale\";\n    } else {\n      paymentAction = \"Authorization\";\n    }\n    let response;\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          VERSION: nvpVersion,\n          PAYMENTACTION: paymentAction,\n          AMT: amount,\n          METHOD: \"DoExpressCheckoutPayment\",\n          CURRENCYCODE: currency,\n          TOKEN: token,\n          PAYERID: payerId\n        }\n      });\n    } catch (error) {\n      throw new Meteor.Error(error.message);\n    }\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad response from PayPal\");\n    }\n    const parsedResponse = parseResponse(response);\n\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" +\n        parsedResponse.ACK + \": \" +\n        parsedResponse.L_LONGMESSAGE0 + \":\" +\n        parsedResponse.L_ERRORCODE0);\n    }\n    return parsedResponse;\n  },\n\n  /**\n   * Return the settings for the PayPal Express payment Method\n   * @return {Object} Express Checkout settings\n   */\n  \"getExpressCheckoutSettings\": function () {\n    const settings = PayPal.expressCheckoutAccountOptions();\n    const expressCheckoutSettings = {\n      merchantId: settings.merchantId,\n      mode: settings.mode,\n      enabled: settings.enabled\n    };\n    return expressCheckoutSettings;\n  },\n\n  /**\n   * Capture an authorized PayPalExpress transaction\n   * https://developer.paypal.com/docs/classic/api/merchant/DoCapture_API_Operation_NVP/\n   * @param  {Object} paymentMethod A PaymentMethod object\n   * @return {Object} results from PayPal normalized\n   */\n  \"paypalexpress/payment/capture\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    this.unblock();\n    const options = PayPal.expressCheckoutAccountOptions();\n    const amount = accounting.toFixed(paymentMethod.amount, 2);\n    const authorizationId = paymentMethod.transactions[0].TRANSACTIONID;\n    const currencycode = paymentMethod.transactions[0].CURRENCYCODE;\n    let response;\n\n    // 100% discounts are not valid when using PayPal Express\n    // If discount is 100%, void authorization instead of applying discount\n    if (amount === accounting.toFixed(0, 2)) {\n      try {\n        response = HTTP.post(options.url, {\n          params: {\n            USER: options.username,\n            PWD: options.password,\n            SIGNATURE: options.signature,\n            VERSION: nvpVersion,\n            METHOD: \"DoVoid\",\n            AUTHORIZATIONID: authorizationId,\n            NOTE: \"Your order has been discounted 100%, and will appear as voided or canceled inside your payment account.\"\n          }\n        });\n      } catch (error) {\n        throw new Meteor.Error(error.message);\n      }\n    } else {\n      try {\n        response = HTTP.post(options.url, {\n          params: {\n            USER: options.username,\n            PWD: options.password,\n            SIGNATURE: options.signature,\n            VERSION: nvpVersion,\n            METHOD: \"DoCapture\",\n            AUTHORIZATIONID: authorizationId,\n            CURRENCYCODE: currencycode,\n            AMT: amount,\n            COMPLETETYPE: \"Complete\" // TODO: Allow for partial captures\n          }\n        });\n      } catch (error) {\n        throw new Meteor.Error(error.message);\n      }\n    }\n\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad Response from PayPal during Capture\");\n    }\n\n    const parsedResponse = parseResponse(response);\n\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n\n    const result = {\n      saved: true,\n      authorizationId: parsedResponse.AUTHORIZATIONID,\n      transactionId: parsedResponse.TRANSACTIONID,\n      currencycode: currencycode,\n      metadata: {},\n      rawTransaction: parsedResponse\n    };\n\n    return result;\n  },\n\n  /**\n   * Refund an order using the PayPay Express method\n   * https://developer.paypal.com/docs/classic/api/merchant/RefundTransaction_API_Operation_NVP/\n   * @param  {Object} paymentMethod A PaymentMethod object\n   * @param {Number} amount to be refunded\n   * @return {Object} Transaction results from PayPal normalized\n   */\n  \"paypalexpress/refund/create\": function (paymentMethod, amount) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    check(amount, Number);\n    this.unblock();\n\n    const options = PayPal.expressCheckoutAccountOptions();\n    const previousTransaction = _.last(paymentMethod.transactions);\n    const transactionId = previousTransaction.transactionId;\n    const currencycode = previousTransaction.currencycode;\n\n    let response;\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          VERSION: nvpVersion,\n          METHOD: \"RefundTransaction\",\n          TRANSACTIONID: transactionId,\n          REFUNDTYPE: \"Partial\",\n          AMT: amount,\n          CURRENCYCODE: currencycode\n        }\n      });\n    }  catch (error) {\n      Logger.debug(error, \"Failed paypalexpress/refund/create\");\n      throw new Meteor.Error(error.message);\n    }\n\n    if (!response || response.statusCode !== 200) {\n      Logger.debug(error, \"Bad Response from PayPal during Refund Creation\");\n      throw new Meteor.Error(\"Bad Response from PayPal during Refund Creation\");\n    }\n\n    const parsedResponse = parseResponse(response);\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n\n    const amountFormatted = {\n      total: amount,\n      currency: currencycode\n    };\n\n    const result = {\n      saved: true,\n      type: \"refund\",\n      created: new Date(),\n      transactionId: transactionId,\n      refundTransactionId: parsedResponse.REFUNDTRANSACTIONID,\n      grossRefundAmount: parsedResponse.GROSSREFUNDAMT,\n      netRefundAmount: parsedResponse.NETREFUNDAMT,\n      correlationId: parsedResponse.CORRELATIONID,\n      currencycode: parsedResponse.CURRENCYCODE,\n      amount: amountFormatted,\n      rawTransaction: parsedResponse\n    };\n    return result;\n  },\n  /**\n   * Query PayPal Express NVP API for Refund transactions\n   * Refunds returned here are listed in the dashboard\n   * https://developer.paypal.com/docs/classic/api/merchant/GetTransactionDetails_API_Operation_NVP/\n   * @param  {Object} paymentMethod A PaymentMethod object\n   * @return {array}  Refunds from PayPal query, normalized\n   */\n  \"paypalexpress/refund/list\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    this.unblock();\n\n    const options = PayPal.expressCheckoutAccountOptions();\n    const transactionId = paymentMethod.transactionId;\n    let response;\n\n    try {\n      response = HTTP.post(options.url, {\n        params: {\n          USER: options.username,\n          PWD: options.password,\n          SIGNATURE: options.signature,\n          VERSION: nvpVersion,\n          METHOD: \"TransactionSearch\",\n          STARTDATE: \"2013-08-24T05:38:48Z\",\n          TRANSACTIONID: transactionId,\n          TRANSACTIONCLASS: \"Refund\"\n        }\n      });\n    }  catch (error) {\n      throw new Meteor.Error(error.message);\n    }\n\n    if (!response || response.statusCode !== 200) {\n      throw new Meteor.Error(\"Bad Response from PayPal during refund list\");\n    }\n\n    const parsedResponse = parseResponse(response);\n\n    if (parsedResponse.ACK !== \"Success\") {\n      throw new Meteor.Error(\"ACK \" + parsedResponse.ACK + \": \" + parsedResponse.L_LONGMESSAGE0);\n    }\n    const result = parseRefundReponse(parsedResponse);\n    return result;\n  }\n\n};\n\n// internal helpers\nfunction parseResponse(response) {\n  const result = {};\n  const pieces = response.content.split(\"&\");\n  pieces.forEach(function (piece) {\n    const subpieces = piece.split(\"=\");\n    const decodedResult = result[subpieces[0]] = decodeURIComponent(subpieces[1]);\n    return decodedResult;\n  });\n  return result;\n}\n\n/**\n * Parse PayPal's 'unique' Transaction Query response to look for refunds\n * @param  {Object} response The response from PayPal\n * @return {Object} Refunds, normalized to an Array\n */\nfunction parseRefundReponse(response) {\n  const paypalArray = [];\n\n  for (let i = 0; i < 101; i++) {\n    const timeStampKey = \"L_TIMESTAMP\" + i;\n    const timestamp = response[timeStampKey];\n    const typeKey = \"L_TYPE\" + i;\n    const transactionType = response[typeKey];\n    const amountKey = \"L_AMT\" + i;\n    const amount = response[amountKey];\n    const currencyCodeKey = \"L_CURRENCYCODE\" + i;\n    const currencyCode = response[currencyCodeKey];\n\n    if (timestamp !== undefined && transactionType === \"Refund\") {\n      const responseObject = {\n        created: moment(timestamp).valueOf(),\n        type: \"refund\",\n        amount: Math.abs(Number(amount, 10)),\n        currency: currencyCode\n      };\n      paypalArray.push(responseObject);\n    }\n  }\n\n  return paypalArray;\n}\n\ngetSetting = function (shopId, parameter) {\n  const settings = Packages.findOne({\n    name: \"reaction-paypal\",\n    shopId: shopId,\n    enabled: true\n  }).settings;\n  return settings[parameter];\n};\n\n// export methods to Meteor\nMeteor.methods(methods);\n"]},"hash":"616517b5d5c9b36fdbdfc86aabc4d7f6aae21a0d"}
