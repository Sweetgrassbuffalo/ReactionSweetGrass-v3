{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"nodemailer","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"nodemailer"}]},{"source":"nodemailer-wellknown","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"getServiceConfig"}]},{"source":"url","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"url"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":["getMailUrl","getMailConfig","verifyConfig","config","callback"],"specifiers":[{"kind":"local","local":"getMailUrl","exported":"getMailUrl"},{"kind":"local","local":"getMailConfig","exported":"getMailConfig"},{"kind":"local","local":"verifyConfig","exported":"verifyConfig"},{"kind":"local","local":"config","exported":"config"},{"kind":"local","local":"callback","exported":"callback"}]}}},"options":{"filename":"/server/api/core/email/config.js","filenameRelative":"/server/api/core/email/config.js","inputSourceMap":{"version":3,"sources":["/server/api/core/email/config.js"],"names":["nodemailer","getServiceConfig","url","Meteor","Reaction","Logger","getMailUrl","shopSettings","getShopSettings","shopMail","mail","processUrl","process","env","MAIL_URL","settingsUrl","settings","service","user","password","host","port","mailString","conf","encodeURIComponent","mailUrl","warn","getMailConfig","parsedUrl","parse","creds","auth","split","Number","debug","hostname","secure","pass","logger","EMAIL_DEBUG","direct","verifyConfig","config","callback","transporter","createTransport","verify"],"mappings":"AAAA,OAAO;AAAP,AAAuB;WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAO,AAAsB,AAC7B,AAAO,AAAS,AAChB,AAAS,AAAc,AACvB,AAAS,AAAU,AAAc,AAGjC,AAUA,AAAO,AAAS,AAAa,AAC3B,AAAM,AAAe,AAAS,AAE9B,AAAI;;;AAEA,MAAJ,AAAkB,wBAChB,AAAW,AAAa,AAAQ,AACjC;AAP0B,AAS3B;;oBACA;AAAM,eAAa,aAAA,AAAQ,AAAI,QAA/B,AACA;AAAA,AAAM,AAAc,AAAO,AAAS,AACpC,AAAM,AAAE,IAAF,AAAW;;;MAAX,yBAAiB;MAAjB,8BAAA,AAA2B;AAPjC,kBAOM,AAAiC;;;;;;MAZZ,AAY3B,AAAgD,AAEhD,AAAI,AAEJ,AACA;AACA;;MAAI,WAAW,YAAX,AAAuB,YAAvB,AAAmC,QAAvC,AAA+C,UAAU,AACvD;QAAM,OAAO,iBAAb,AAAa,AAAiB,AAE9B;;QAAA,AAAI,MAAM,AACR;AACA;UAAI,CAAC,KAAL,AAAU,MAAM,AACd;AAAc,2CAAmB,KAAjC,AAAsC,AAAK,AAC5C;AAFD,aAEO,AACL;AAAc,iCAAS,mBAAA,AAAmB,AAAM,cAAG,AAAS,iBAAG,KAAK,AAAK,aAAG,KAA5E,AAAiF,AAAK,AACvF;AACF;AACF;AA7B0B,AA+B3B,IACA;;;MAAI,CAAC,CAAA,AAAC,WAAW,YAAb,AAAyB,aAAzB,AAAsC,QAAtC,AAA8C,YAA9C,AAA0D,QAA9D,AAAsE,MAAM,AAC1E;AAAc,6BAAS,mBAAA,AAAmB,AAAM,cAAG,AAAS,iBAAG,AAAK,aAApE,AAAuE,AAAK,AAC7E;AAlC0B,AAoC3B,IACA;;;MAAM,UAAU,cAAA,AAAc,eAA9B,AAA6C,AAE7C;;MAAI,CAAJ,AAAK,SAAS,AACZ;WAAA,AAAO,KAAP,AAAY,AACZ;WAAA,AAAO,AACR;AAED;;SAAA,AAAO,AACR;A,AAGD,AAIA,AAAO,AAAS,AAAgB,AAC9B,AAAM,AAAa,AAAQ,AAAI,AAC/B,AAAM,AAAc,AAAO,AAAS,AAEpC;;AAAM,SAAa;;oCAInB,AAAI,AAAY,AACd;iCACA,AAAM,AAAY,AAAI,AAAM,AAC5B,aAAA,AAAM,AAAQ,AAAU,AAAK,AAAM,AACnC;AAAA,AAAU,AAAO,AAAO,AAAU,AAElC;;MAAA,AAAO,AAAO,YANA,AAMd,AAAsB,AAAU,AAAS,AAEzC;AACA;QAAO,sBACL;QAAM,QAAU,UADX,WAEL;AAAM,qBAFD,AAEW,iBAChB,AACA;WAAQ,AAAU,iBAAV,AAAmB,UAJtB,AAKL,AAAM,AACJ,8BADI,AACE,AAAM,AACZ;;;AAPG,sBASL;YAAQ,UATV,AAAO,AASG,AAAQ,AAAI,AAAgB;AA1BV,AA4B7B,AAED;;;oBACA;AAAM,oBAAN,AAAqB,AAAS,AAE9B,AAAI;;0CAEJ,AAAI,AAAc,AAChB;AAdQ,AAEE,AAAM;AAYhB,AAAW,AAAa,AAAQ,AACjC,IAED;;;MAAM,wBAAA,AAAE,AAAS;MAAX,AAAiB,AAAU;;MAA3B,cAAiC;oCAAjC;AAvCwB,AAuC9B,AAAgD,AAEhD,AACA;;AA1C8B,AAI9B,AAAiC,AAEjC,AACA,mBAoCA,AAAI,AAAW,AAAY,AAAY,AAAQ,AAAU,AACvD;;;;;8BADuD,AACvD,AAAO,AAAO,AAAQ,AAAQ,AAE9B;AACA;;MAAM,WAAO,YAAiB,YAJyB,AAIvD,AAAa,AAEb;4BACA,AAAI,AAAC,AAAK,AAAM,AACd,6BAAA,AAAO,AACR;;AATsD,AAWvD,0CACA;;SAAA,AAAK,KAAO,MAAE;AAAF,aAAQ;AAApB,AAAY,AAAc,AAE1B,MAzD4B,AAyD5B,AAAO,AACR;;;AAED;;YACA;;;AACA,AAAI,AAAC,AAAC,AAAW,AAAY,AAAa,AAAQ,AAAY,AAAQ,AAAM,AAC1E,IAAA,AAAO,AAAO,AAAQ,AAAK,AAE3B;AAAO,AACL;;;QADK,sEAEL;AAFK,4BAAA,AAGL,AAAQ,AAAS,AACjB;;AAAM,AAAQ;AAAR,AAAc;AAJf,uBAKL;;AAAQ;AAAA,AAAQ,cALlB,AAAO,AAKG,AAAY,AAAgB;;0CAtEV,AAwE7B,AAED;AALU,AAAE;AAMZ,IAAA,AAAO,AAAM;;;SAAb,AAMA,AAAO,AACL,AAAQ,AACR;;YAKJ,A,AAHC;;AAJC,AAAO,AAEG,AAAQ,AAAI,AAAgB;AAYxC,AAAO,AAAS,AAAa,AAAQ,AAAU,AAC7C,AAAM,AAAc,AAAW,AAAgB,AAC/C,AAAO,AAAY,AAAO,AAC3B","file":"/server/api/core/email/config.js.map","sourcesContent":["import nodemailer from \"nodemailer\";\nimport getServiceConfig from \"nodemailer-wellknown\";\nimport url from \"url\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, Logger } from \"/server/api\";\n\n\n/**\n * getMailUrl - get the smtp URL for sending emails\n * There are 3 possible ways to set the email configuration and\n * the first value found will be used.\n * The priority order is:\n *   1. MAIL_URL environment variable\n *   2. Meteor settings (MAIL_URL key)\n *   3. Core shop settings from the database\n * @return {String} returns an SMTP url if one of the settings have been set\n */\nexport function getMailUrl() {\n  const shopSettings = Reaction.getShopSettings();\n\n  let shopMail;\n\n  if (shopSettings) {\n    shopMail = shopSettings.mail || {};\n  }\n\n  // get all possible mail settings\n  const processUrl = process.env.MAIL_URL;\n  const settingsUrl = Meteor.settings.MAIL_URL;\n  const { service, user, password, host, port } = shopMail;\n\n  let mailString;\n\n  // create a mail url from well-known provider settings (if they exist)\n  // https://github.com/nodemailer/nodemailer-wellknown\n  if (service && service !== \"custom\" && user && password) {\n    const conf = getServiceConfig(service);\n\n    if (conf) {\n      // account for local test providers like Maildev\n      if (!conf.host) {\n        mailString = `smtp://localhost:${conf.port}`;\n      } else {\n        mailString = `smtp://${encodeURIComponent(user)}:${password}@${conf.host}:${conf.port}`;\n      }\n    }\n  }\n\n  // create a mail url from custom provider settings (if they exist)\n  if ((!service || service === \"custom\") && user && password && host && port) {\n    mailString = `smtp://${encodeURIComponent(user)}:${password}@${host}:${port}`;\n  }\n\n  // create the final url from the available options\n  const mailUrl = processUrl || settingsUrl || mailString;\n\n  if (!mailUrl) {\n    Logger.warn(\"Reaction.Email.getMailUrl() - no email provider configured\");\n    return null;\n  }\n\n  return mailUrl;\n}\n\n\n/**\n * getMailConfig - get the email sending config for Nodemailer\n * @return {{host: String, port: Number, secure: Boolean, auth: Object, logger: Boolean}} returns a config object\n */\nexport function getMailConfig() {\n  const processUrl = process.env.MAIL_URL;\n  const settingsUrl = Meteor.settings.MAIL_URL;\n\n  const mailString = processUrl || settingsUrl;\n\n  // if MAIL_URL or Meteor settings have been used,\n  // parse the URL and create a config object\n  if (mailString) {\n    // parse the url\n    const parsedUrl = url.parse(mailString);\n    const creds = parsedUrl.auth.split(\":\");\n    parsedUrl.port = Number(parsedUrl.port);\n\n    Logger.debug(`Using ${parsedUrl.hostname} to send email`);\n\n    // create a nodemailer config from the SMTP url string\n    return {\n      host: parsedUrl.hostname,\n      port: parsedUrl.port,\n      // since the port is casted to number above\n      secure: parsedUrl.port === 465,\n      auth: {\n        user: creds[0],\n        pass: creds[1]\n      },\n      logger: process.env.EMAIL_DEBUG === \"true\"\n    };\n  }\n\n  // check for mail settings in the database\n  const shopSettings = Reaction.getShopSettings();\n\n  let shopMail;\n\n  if (shopSettings) {\n    shopMail = shopSettings.mail || {};\n  }\n\n  const { service, user, password, host, port } = shopMail;\n\n  // if a service provider preset was chosen, return a Nodemailer config for it\n  // https://github.com/nodemailer/nodemailer-wellknown\n  if (service && service !== \"custom\" && user && password) {\n    Logger.debug(`Using ${service} to send email`);\n\n    // get the config from nodemailer-wellknown\n    const conf = getServiceConfig(service);\n\n    // account for local test providers like Maildev with no auth\n    if (!conf.host) {\n      return conf;\n    }\n\n    // add the credentials to the config\n    conf.auth = { user, pass: password };\n\n    return conf;\n  }\n\n  // if a custom config was chosen and all necessary fields exist in the database,\n  // return the custom Nodemailer config\n  if ((!service || service === \"custom\") && user && password && host && port) {\n    Logger.debug(`Using ${host} to send email`);\n\n    return {\n      host,\n      port,\n      secure: port === 465,\n      auth: { user, pass: password },\n      logger: process.env.EMAIL_DEBUG === \"true\"\n    };\n  }\n\n  // else, return the direct mail config and a warning\n  Logger.warn(`\n    Mail service not configured. Attempting to use direct sending option.\n    The mail may send, but messages are far more likely go to the user's spam folder.\n    Please configure an SMTP mail sending provider.\n  `);\n\n  return {\n    direct: true,\n    logger: process.env.EMAIL_DEBUG === \"true\"\n  };\n}\n\n\n/**\n * Verify a transporter configuration works\n * https://github.com/nodemailer/nodemailer#verify-smtp-connection-configuration\n * @param {Object} config - a Nodemailer transporter config object\n * @param {Function} callback - optional callback with standard error/result args\n * @return {Promise} returns a Promise if no callback is provided\n */\nexport function verifyConfig(config, callback) {\n  const transporter = nodemailer.createTransport(config);\n  return transporter.verify(callback);\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/api/core/email/config.js.map","sourceFileName":"/server/api/core/email/config.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"config"},"ignored":false,"code":"module.export({\n  getMailUrl: function () {\n    return getMailUrl;\n  },\n  getMailConfig: function () {\n    return getMailConfig;\n  },\n  verifyConfig: function () {\n    return verifyConfig;\n  }\n});\nvar nodemailer = void 0;\nmodule.importSync(\"nodemailer\", {\n  \"default\": function (v) {\n    nodemailer = v;\n  }\n}, 0);\nvar getServiceConfig = void 0;\nmodule.importSync(\"nodemailer-wellknown\", {\n  \"default\": function (v) {\n    getServiceConfig = v;\n  }\n}, 1);\nvar url = void 0;\nmodule.importSync(\"url\", {\n  \"default\": function (v) {\n    url = v;\n  }\n}, 2);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 3);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 4);\n\nfunction getMailUrl() {\n  var shopSettings = Reaction.getShopSettings();\n  var shopMail = void 0;\n\n  if (shopSettings) {\n    shopMail = shopSettings.mail || {};\n  } // get all possible mail settings\n\n\n  var processUrl = process.env.MAIL_URL;\n  var settingsUrl = Meteor.settings.MAIL_URL;\n  var _shopMail = shopMail,\n      service = _shopMail.service,\n      user = _shopMail.user,\n      password = _shopMail.password,\n      host = _shopMail.host,\n      port = _shopMail.port;\n  var mailString = void 0; // create a mail url from well-known provider settings (if they exist)\n  // https://github.com/nodemailer/nodemailer-wellknown\n\n  if (service && service !== \"custom\" && user && password) {\n    var conf = getServiceConfig(service);\n\n    if (conf) {\n      // account for local test providers like Maildev\n      if (!conf.host) {\n        mailString = \"smtp://localhost:\" + conf.port;\n      } else {\n        mailString = \"smtp://\" + encodeURIComponent(user) + \":\" + password + \"@\" + conf.host + \":\" + conf.port;\n      }\n    }\n  } // create a mail url from custom provider settings (if they exist)\n\n\n  if ((!service || service === \"custom\") && user && password && host && port) {\n    mailString = \"smtp://\" + encodeURIComponent(user) + \":\" + password + \"@\" + host + \":\" + port;\n  } // create the final url from the available options\n\n\n  var mailUrl = processUrl || settingsUrl || mailString;\n\n  if (!mailUrl) {\n    Logger.warn(\"Reaction.Email.getMailUrl() - no email provider configured\");\n    return null;\n  }\n\n  return mailUrl;\n}\n\nfunction getMailConfig() {\n  var processUrl = process.env.MAIL_URL;\n  var settingsUrl = Meteor.settings.MAIL_URL;\n  var mailString = processUrl || settingsUrl; // if MAIL_URL or Meteor settings have been used,\n  // parse the URL and create a config object\n\n  if (mailString) {\n    // parse the url\n    var parsedUrl = url.parse(mailString);\n    var creds = parsedUrl.auth.split(\":\");\n    parsedUrl.port = Number(parsedUrl.port);\n    Logger.debug(\"Using \" + parsedUrl.hostname + \" to send email\"); // create a nodemailer config from the SMTP url string\n\n    return {\n      host: parsedUrl.hostname,\n      port: parsedUrl.port,\n      // since the port is casted to number above\n      secure: parsedUrl.port === 465,\n      auth: {\n        user: creds[0],\n        pass: creds[1]\n      },\n      logger: process.env.EMAIL_DEBUG === \"true\"\n    };\n  } // check for mail settings in the database\n\n\n  var shopSettings = Reaction.getShopSettings();\n  var shopMail = void 0;\n\n  if (shopSettings) {\n    shopMail = shopSettings.mail || {};\n  }\n\n  var _shopMail2 = shopMail,\n      service = _shopMail2.service,\n      user = _shopMail2.user,\n      password = _shopMail2.password,\n      host = _shopMail2.host,\n      port = _shopMail2.port; // if a service provider preset was chosen, return a Nodemailer config for it\n  // https://github.com/nodemailer/nodemailer-wellknown\n\n  if (service && service !== \"custom\" && user && password) {\n    Logger.debug(\"Using \" + service + \" to send email\"); // get the config from nodemailer-wellknown\n\n    var conf = getServiceConfig(service); // account for local test providers like Maildev with no auth\n\n    if (!conf.host) {\n      return conf;\n    } // add the credentials to the config\n\n\n    conf.auth = {\n      user: user,\n      pass: password\n    };\n    return conf;\n  } // if a custom config was chosen and all necessary fields exist in the database,\n  // return the custom Nodemailer config\n\n\n  if ((!service || service === \"custom\") && user && password && host && port) {\n    Logger.debug(\"Using \" + host + \" to send email\");\n    return {\n      host: host,\n      port: port,\n      secure: port === 465,\n      auth: {\n        user: user,\n        pass: password\n      },\n      logger: process.env.EMAIL_DEBUG === \"true\"\n    };\n  } // else, return the direct mail config and a warning\n\n\n  Logger.warn(\"\\n    Mail service not configured. Attempting to use direct sending option.\\n    The mail may send, but messages are far more likely go to the user's spam folder.\\n    Please configure an SMTP mail sending provider.\\n  \");\n  return {\n    direct: true,\n    logger: process.env.EMAIL_DEBUG === \"true\"\n  };\n}\n\nfunction verifyConfig(config, callback) {\n  var transporter = nodemailer.createTransport(config);\n  return transporter.verify(callback);\n}","map":{"version":3,"sources":["/server/api/core/email/config.js"],"names":["nodemailer","getServiceConfig","url","Meteor","Reaction","Logger","getMailUrl","shopSettings","getShopSettings","shopMail","mail","processUrl","process","env","MAIL_URL","settingsUrl","settings","service","user","password","host","port","mailString","conf","encodeURIComponent","mailUrl","warn","getMailConfig","parsedUrl","parse","creds","auth","split","Number","debug","hostname","secure","pass","logger","EMAIL_DEBUG","direct","verifyConfig","config","callback","transporter","createTransport","verify"],"mappings":"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","file":"/server/api/core/email/config.js.map","sourcesContent":["import nodemailer from \"nodemailer\";\nimport getServiceConfig from \"nodemailer-wellknown\";\nimport url from \"url\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, Logger } from \"/server/api\";\n\n\n/**\n * getMailUrl - get the smtp URL for sending emails\n * There are 3 possible ways to set the email configuration and\n * the first value found will be used.\n * The priority order is:\n *   1. MAIL_URL environment variable\n *   2. Meteor settings (MAIL_URL key)\n *   3. Core shop settings from the database\n * @return {String} returns an SMTP url if one of the settings have been set\n */\nexport function getMailUrl() {\n  const shopSettings = Reaction.getShopSettings();\n\n  let shopMail;\n\n  if (shopSettings) {\n    shopMail = shopSettings.mail || {};\n  }\n\n  // get all possible mail settings\n  const processUrl = process.env.MAIL_URL;\n  const settingsUrl = Meteor.settings.MAIL_URL;\n  const { service, user, password, host, port } = shopMail;\n\n  let mailString;\n\n  // create a mail url from well-known provider settings (if they exist)\n  // https://github.com/nodemailer/nodemailer-wellknown\n  if (service && service !== \"custom\" && user && password) {\n    const conf = getServiceConfig(service);\n\n    if (conf) {\n      // account for local test providers like Maildev\n      if (!conf.host) {\n        mailString = `smtp://localhost:${conf.port}`;\n      } else {\n        mailString = `smtp://${encodeURIComponent(user)}:${password}@${conf.host}:${conf.port}`;\n      }\n    }\n  }\n\n  // create a mail url from custom provider settings (if they exist)\n  if ((!service || service === \"custom\") && user && password && host && port) {\n    mailString = `smtp://${encodeURIComponent(user)}:${password}@${host}:${port}`;\n  }\n\n  // create the final url from the available options\n  const mailUrl = processUrl || settingsUrl || mailString;\n\n  if (!mailUrl) {\n    Logger.warn(\"Reaction.Email.getMailUrl() - no email provider configured\");\n    return null;\n  }\n\n  return mailUrl;\n}\n\n\n/**\n * getMailConfig - get the email sending config for Nodemailer\n * @return {{host: String, port: Number, secure: Boolean, auth: Object, logger: Boolean}} returns a config object\n */\nexport function getMailConfig() {\n  const processUrl = process.env.MAIL_URL;\n  const settingsUrl = Meteor.settings.MAIL_URL;\n\n  const mailString = processUrl || settingsUrl;\n\n  // if MAIL_URL or Meteor settings have been used,\n  // parse the URL and create a config object\n  if (mailString) {\n    // parse the url\n    const parsedUrl = url.parse(mailString);\n    const creds = parsedUrl.auth.split(\":\");\n    parsedUrl.port = Number(parsedUrl.port);\n\n    Logger.debug(`Using ${parsedUrl.hostname} to send email`);\n\n    // create a nodemailer config from the SMTP url string\n    return {\n      host: parsedUrl.hostname,\n      port: parsedUrl.port,\n      // since the port is casted to number above\n      secure: parsedUrl.port === 465,\n      auth: {\n        user: creds[0],\n        pass: creds[1]\n      },\n      logger: process.env.EMAIL_DEBUG === \"true\"\n    };\n  }\n\n  // check for mail settings in the database\n  const shopSettings = Reaction.getShopSettings();\n\n  let shopMail;\n\n  if (shopSettings) {\n    shopMail = shopSettings.mail || {};\n  }\n\n  const { service, user, password, host, port } = shopMail;\n\n  // if a service provider preset was chosen, return a Nodemailer config for it\n  // https://github.com/nodemailer/nodemailer-wellknown\n  if (service && service !== \"custom\" && user && password) {\n    Logger.debug(`Using ${service} to send email`);\n\n    // get the config from nodemailer-wellknown\n    const conf = getServiceConfig(service);\n\n    // account for local test providers like Maildev with no auth\n    if (!conf.host) {\n      return conf;\n    }\n\n    // add the credentials to the config\n    conf.auth = { user, pass: password };\n\n    return conf;\n  }\n\n  // if a custom config was chosen and all necessary fields exist in the database,\n  // return the custom Nodemailer config\n  if ((!service || service === \"custom\") && user && password && host && port) {\n    Logger.debug(`Using ${host} to send email`);\n\n    return {\n      host,\n      port,\n      secure: port === 465,\n      auth: { user, pass: password },\n      logger: process.env.EMAIL_DEBUG === \"true\"\n    };\n  }\n\n  // else, return the direct mail config and a warning\n  Logger.warn(`\n    Mail service not configured. Attempting to use direct sending option.\n    The mail may send, but messages are far more likely go to the user's spam folder.\n    Please configure an SMTP mail sending provider.\n  `);\n\n  return {\n    direct: true,\n    logger: process.env.EMAIL_DEBUG === \"true\"\n  };\n}\n\n\n/**\n * Verify a transporter configuration works\n * https://github.com/nodemailer/nodemailer#verify-smtp-connection-configuration\n * @param {Object} config - a Nodemailer transporter config object\n * @param {Function} callback - optional callback with standard error/result args\n * @return {Promise} returns a Promise if no callback is provided\n */\nexport function verifyConfig(config, callback) {\n  const transporter = nodemailer.createTransport(config);\n  return transporter.verify(callback);\n}\n"]},"hash":"4fabc6f64e4f092c01bf4074852bd9deb019985f"}
