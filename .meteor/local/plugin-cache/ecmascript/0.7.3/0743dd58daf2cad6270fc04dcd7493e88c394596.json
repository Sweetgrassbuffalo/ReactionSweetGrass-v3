{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":["ExampleApi","cardSchema"],"specifiers":[{"kind":"local","local":"ExampleApi","exported":"ExampleApi"},{"kind":"local","local":"cardSchema","exported":"cardSchema"}]}}},"options":{"filename":"/imports/plugins/included/payments-example/server/methods/exampleapi.js","filenameRelative":"/imports/plugins/included/payments-example/server/methods/exampleapi.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-example/server/methods/exampleapi.js"],"names":["ThirdPartyAPI","authorize","transactionType","cardData","paymentData","results","success","id","Random","cardNumber","number","slice","amount","total","currency","capture","authorizationId","refund","transactionId","sucess","listRefunds","refunds","type","created","raw","ExampleApi","methods","cardSchema","SimpleSchema","String","name","cvv2","expireMonth","expireYear","paymentDataSchema","ValidatedMethod","validate","validator","run","Number","decimal","args"],"mappings":"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","file":"/imports/plugins/included/payments-example/server/methods/exampleapi.js.map","sourcesContent":["\n// You should not implement ThirdPartyAPI. It is supposed to represent your third party API\n// And is called so that it can be stubbed out for testing. This would be a library\n// like Stripe or Authorize.net usually just included with a NPM.require\n\nThirdPartyAPI = {\n  authorize: function (transactionType, cardData, paymentData) {\n    if (transactionType === \"authorize\") {\n      const results = {\n        success: true,\n        id: Random.id(),\n        cardNumber: cardData.number.slice(-4),\n        amount: paymentData.total,\n        currency: \"USD\"\n      };\n      return results;\n    }\n    return {\n      success: false\n    };\n  },\n  capture: function (authorizationId, amount) {\n    return {\n      authorizationId: authorizationId,\n      amount: amount,\n      success: true\n    };\n  },\n  refund: function (transactionId, amount) {\n    return {\n      sucess: true,\n      transactionId: transactionId,\n      amount: amount\n    };\n  },\n  listRefunds: function (transactionId) {\n    return {\n      transactionId: transactionId,\n      refunds: [\n        {\n          type: \"refund\",\n          amount: 3.99,\n          created: 1454034562000,\n          currency: \"usd\",\n          raw: {}\n        }\n      ]\n    };\n  }\n};\n\n// This is the \"wrapper\" functions you should write in order to make your code more\n// testable. You can either mirror the API calls or normalize them to the authorize/capture/refund/refunds\n// that Reaction is expecting\nexport const ExampleApi = {};\nExampleApi.methods = {};\n\nexport const cardSchema = new SimpleSchema({\n  number: { type: String },\n  name: { type: String },\n  cvv2: { type: String },\n  expireMonth: { type: String },\n  expireYear: { type: String },\n  type: { type: String }\n});\n\npaymentDataSchema = new SimpleSchema({\n  total: { type: String },\n  currency: { type: String }\n});\n\n\nExampleApi.methods.authorize = new ValidatedMethod({\n  name: \"ExampleApi.methods.authorize\",\n  validate: new SimpleSchema({\n    transactionType: { type: String },\n    cardData: { type: cardSchema },\n    paymentData: { type: paymentDataSchema }\n  }).validator(),\n  run({ transactionType, cardData, paymentData }) {\n    const results = ThirdPartyAPI.authorize(transactionType, cardData, paymentData);\n    return results;\n  }\n});\n\n\nExampleApi.methods.capture = new ValidatedMethod({\n  name: \"ExampleApi.methods.capture\",\n  validate: new SimpleSchema({\n    authorizationId: { type: String },\n    amount: { type: Number, decimal: true }\n  }).validator(),\n  run(args) {\n    const transactionId = args.authorizationId;\n    const amount = args.amount;\n    const results = ThirdPartyAPI.capture(transactionId, amount);\n    return results;\n  }\n});\n\n\nExampleApi.methods.refund = new ValidatedMethod({\n  name: \"ExampleApi.methods.refund\",\n  validate: new SimpleSchema({\n    transactionId: { type: String },\n    amount: { type: Number, decimal: true  }\n  }).validator(),\n  run(args) {\n    const transactionId = args.transactionId;\n    const amount = args.amount;\n    const results = ThirdPartyAPI.refund(transactionId, amount);\n    return results;\n  }\n});\n\n\nExampleApi.methods.refunds = new ValidatedMethod({\n  name: \"ExampleApi.methods.refunds\",\n  validate: new SimpleSchema({\n    transactionId: { type: String }\n  }).validator(),\n  run(args) {\n    const { transactionId } = args;\n    const results = ThirdPartyAPI.listRefunds(transactionId);\n    return results;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-example/server/methods/exampleapi.js.map","sourceFileName":"/imports/plugins/included/payments-example/server/methods/exampleapi.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"exampleapi"},"ignored":false,"code":"module.export({\n  ExampleApi: function () {\n    return ExampleApi;\n  },\n  cardSchema: function () {\n    return cardSchema;\n  }\n});\n// You should not implement ThirdPartyAPI. It is supposed to represent your third party API\n// And is called so that it can be stubbed out for testing. This would be a library\n// like Stripe or Authorize.net usually just included with a NPM.require\nThirdPartyAPI = {\n  authorize: function (transactionType, cardData, paymentData) {\n    if (transactionType === \"authorize\") {\n      var results = {\n        success: true,\n        id: Random.id(),\n        cardNumber: cardData.number.slice(-4),\n        amount: paymentData.total,\n        currency: \"USD\"\n      };\n      return results;\n    }\n\n    return {\n      success: false\n    };\n  },\n  capture: function (authorizationId, amount) {\n    return {\n      authorizationId: authorizationId,\n      amount: amount,\n      success: true\n    };\n  },\n  refund: function (transactionId, amount) {\n    return {\n      sucess: true,\n      transactionId: transactionId,\n      amount: amount\n    };\n  },\n  listRefunds: function (transactionId) {\n    return {\n      transactionId: transactionId,\n      refunds: [{\n        type: \"refund\",\n        amount: 3.99,\n        created: 1454034562000,\n        currency: \"usd\",\n        raw: {}\n      }]\n    };\n  }\n}; // This is the \"wrapper\" functions you should write in order to make your code more\n// testable. You can either mirror the API calls or normalize them to the authorize/capture/refund/refunds\n// that Reaction is expecting\n\nvar ExampleApi = {};\nExampleApi.methods = {};\nvar cardSchema = new SimpleSchema({\n  number: {\n    type: String\n  },\n  name: {\n    type: String\n  },\n  cvv2: {\n    type: String\n  },\n  expireMonth: {\n    type: String\n  },\n  expireYear: {\n    type: String\n  },\n  type: {\n    type: String\n  }\n});\npaymentDataSchema = new SimpleSchema({\n  total: {\n    type: String\n  },\n  currency: {\n    type: String\n  }\n});\nExampleApi.methods.authorize = new ValidatedMethod({\n  name: \"ExampleApi.methods.authorize\",\n  validate: new SimpleSchema({\n    transactionType: {\n      type: String\n    },\n    cardData: {\n      type: cardSchema\n    },\n    paymentData: {\n      type: paymentDataSchema\n    }\n  }).validator(),\n  run: function (_ref) {\n    var transactionType = _ref.transactionType,\n        cardData = _ref.cardData,\n        paymentData = _ref.paymentData;\n    var results = ThirdPartyAPI.authorize(transactionType, cardData, paymentData);\n    return results;\n  }\n});\nExampleApi.methods.capture = new ValidatedMethod({\n  name: \"ExampleApi.methods.capture\",\n  validate: new SimpleSchema({\n    authorizationId: {\n      type: String\n    },\n    amount: {\n      type: Number,\n      decimal: true\n    }\n  }).validator(),\n  run: function (args) {\n    var transactionId = args.authorizationId;\n    var amount = args.amount;\n    var results = ThirdPartyAPI.capture(transactionId, amount);\n    return results;\n  }\n});\nExampleApi.methods.refund = new ValidatedMethod({\n  name: \"ExampleApi.methods.refund\",\n  validate: new SimpleSchema({\n    transactionId: {\n      type: String\n    },\n    amount: {\n      type: Number,\n      decimal: true\n    }\n  }).validator(),\n  run: function (args) {\n    var transactionId = args.transactionId;\n    var amount = args.amount;\n    var results = ThirdPartyAPI.refund(transactionId, amount);\n    return results;\n  }\n});\nExampleApi.methods.refunds = new ValidatedMethod({\n  name: \"ExampleApi.methods.refunds\",\n  validate: new SimpleSchema({\n    transactionId: {\n      type: String\n    }\n  }).validator(),\n  run: function (args) {\n    var transactionId = args.transactionId;\n    var results = ThirdPartyAPI.listRefunds(transactionId);\n    return results;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/payments-example/server/methods/exampleapi.js"],"names":["ThirdPartyAPI","authorize","transactionType","cardData","paymentData","results","success","id","Random","cardNumber","number","slice","amount","total","currency","capture","authorizationId","refund","transactionId","sucess","listRefunds","refunds","type","created","raw","ExampleApi","methods","cardSchema","SimpleSchema","String","name","cvv2","expireMonth","expireYear","paymentDataSchema","ValidatedMethod","validate","validator","run","Number","decimal","args"],"mappings":"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","file":"/imports/plugins/included/payments-example/server/methods/exampleapi.js.map","sourcesContent":["\n// You should not implement ThirdPartyAPI. It is supposed to represent your third party API\n// And is called so that it can be stubbed out for testing. This would be a library\n// like Stripe or Authorize.net usually just included with a NPM.require\n\nThirdPartyAPI = {\n  authorize: function (transactionType, cardData, paymentData) {\n    if (transactionType === \"authorize\") {\n      const results = {\n        success: true,\n        id: Random.id(),\n        cardNumber: cardData.number.slice(-4),\n        amount: paymentData.total,\n        currency: \"USD\"\n      };\n      return results;\n    }\n    return {\n      success: false\n    };\n  },\n  capture: function (authorizationId, amount) {\n    return {\n      authorizationId: authorizationId,\n      amount: amount,\n      success: true\n    };\n  },\n  refund: function (transactionId, amount) {\n    return {\n      sucess: true,\n      transactionId: transactionId,\n      amount: amount\n    };\n  },\n  listRefunds: function (transactionId) {\n    return {\n      transactionId: transactionId,\n      refunds: [\n        {\n          type: \"refund\",\n          amount: 3.99,\n          created: 1454034562000,\n          currency: \"usd\",\n          raw: {}\n        }\n      ]\n    };\n  }\n};\n\n// This is the \"wrapper\" functions you should write in order to make your code more\n// testable. You can either mirror the API calls or normalize them to the authorize/capture/refund/refunds\n// that Reaction is expecting\nexport const ExampleApi = {};\nExampleApi.methods = {};\n\nexport const cardSchema = new SimpleSchema({\n  number: { type: String },\n  name: { type: String },\n  cvv2: { type: String },\n  expireMonth: { type: String },\n  expireYear: { type: String },\n  type: { type: String }\n});\n\npaymentDataSchema = new SimpleSchema({\n  total: { type: String },\n  currency: { type: String }\n});\n\n\nExampleApi.methods.authorize = new ValidatedMethod({\n  name: \"ExampleApi.methods.authorize\",\n  validate: new SimpleSchema({\n    transactionType: { type: String },\n    cardData: { type: cardSchema },\n    paymentData: { type: paymentDataSchema }\n  }).validator(),\n  run({ transactionType, cardData, paymentData }) {\n    const results = ThirdPartyAPI.authorize(transactionType, cardData, paymentData);\n    return results;\n  }\n});\n\n\nExampleApi.methods.capture = new ValidatedMethod({\n  name: \"ExampleApi.methods.capture\",\n  validate: new SimpleSchema({\n    authorizationId: { type: String },\n    amount: { type: Number, decimal: true }\n  }).validator(),\n  run(args) {\n    const transactionId = args.authorizationId;\n    const amount = args.amount;\n    const results = ThirdPartyAPI.capture(transactionId, amount);\n    return results;\n  }\n});\n\n\nExampleApi.methods.refund = new ValidatedMethod({\n  name: \"ExampleApi.methods.refund\",\n  validate: new SimpleSchema({\n    transactionId: { type: String },\n    amount: { type: Number, decimal: true  }\n  }).validator(),\n  run(args) {\n    const transactionId = args.transactionId;\n    const amount = args.amount;\n    const results = ThirdPartyAPI.refund(transactionId, amount);\n    return results;\n  }\n});\n\n\nExampleApi.methods.refunds = new ValidatedMethod({\n  name: \"ExampleApi.methods.refunds\",\n  validate: new SimpleSchema({\n    transactionId: { type: String }\n  }).validator(),\n  run(args) {\n    const { transactionId } = args;\n    const results = ThirdPartyAPI.listRefunds(transactionId);\n    return results;\n  }\n});\n"]},"hash":"0743dd58daf2cad6270fc04dcd7493e88c394596"}
