{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/tmeasday:publish-counts","imported":["Counts"],"specifiers":[{"kind":"named","imported":"Counts","local":"Counts"}]},{"source":"/lib/collections","imported":["Orders"],"specifiers":[{"kind":"named","imported":"Orders","local":"Orders"}]},{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/publications/collections/orders.js","filenameRelative":"/server/publications/collections/orders.js","inputSourceMap":{"version":3,"sources":["/server/publications/collections/orders.js"],"names":["Counts","Orders","Reaction","OrderHelper","makeQuery","filter","shopId","getShopId","query","$in","Meteor","publish","userId","ready","Roles","userIsInRole","find","limit","check","Match","OptionalOrNull","String","Number","noReady","currentShopId","cartId","OneOf"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;GACA,AAAS,AAAc,AACvB,AAAS,AAAgB,AAEzB,AAAM,AAAe;AACnB,IAAA,AAAU,AAAQ;AACV,uBAAS,QAAf,AAAe,AAAS,AACxB;AAAI,QAAJ,AAAY;gBAEZ,AAAQ,AACN;;YACA;AAAA,AAAK,AACH;WAAQ,AACN;;oBADF,AAAQ,AAEa;6BAErB,AAEF;AANU,AACI,AACV;AAKJ;AAAA,AAAK,AACH;;WAAQ,AACN;;oBADF,AAAQ,AAEa;6BAErB,AAEF;AANU,AACI,AACV;AAKJ;AAAA,AAAK,AACH;;WAAQ,AACN;;oBADF,AAAQ,AAEmB;mCAE3B,AAEF;AANU,AACI,AACV;AAKJ;AAAA,AAAK,AACH;;WAAQ,AACN;;oBACmB,AACjB;AAAK,AAAC;iDAER,AAAyB,AACvB;AANI,AAEa,AACZ,AAAgC;AAGhC,AAAC;qDANV,AAAQ,AASR,AAEF;AAN6B,AAClB,AAAoC;AANrC,AACI,AACV;AAUJ;AAAA,AAAK,AACH;;WAAQ,AACN;;oBADM,AAE0B,AAChC;AAAoB,0CAHtB,AAAQ;8BAKR;AALQ,AACI,AACV;AAKJ,AAAK,AACH;;WAAQ,AACN;;oBADF,AAAQ,AAEa;6BAErB,AAEF;AANU,AACI,AACV;AAKJ;AAAA,AAAK,AACH;;WAAQ,AACN;;oBADM,AAE0B,AAChC;AAAoB,0CAHtB,AAAQ;8BAKR;AALQ,AACI,AACV;AAIJ;;AA9DF,AAiEA,AAAO,AACR;;;AAvEH,AAAqB,A,AA0ErB;AAxEI,GA4EJ,AAAO,AAAQ,AAAU,AAAY,AACnC,AAAI,AAAK,AAAW,AAAM,AACxB,AAAO,AAAK;;;AACb;4BACD;AAAM,gBAAN,AAAe,AAAS;AACxB;;AAAI,AAAC,MAAL,AAAa,kBACX;;OAAO,QAAP,AAAO,AAAK,AACb;;AACD;;MAAI,MAAA,AAAM,aAAa,KAAnB,AAAwB,QAAQ,CAAA,AAAC,SAAjC,AAAgC,AAAU,UAA9C,AAAI,AAAoD,SAAS,AAC/D;kBAAO,AAAO;cAAd,AAAO,AAAY,AACT,AAEX;AAHoB,AACjB,KADK;;;;AAIF,YAAA,AAAO,AAAK,AACjB;YAAQ,KADS,AAEjB,AAAQ,AAAK;AAFf;AAbF,AAaE,AAAO,AAIR,AAED,A,IAIA,AAAO,AAAQ,AAAmB,AAAU,AAAQ,AAAO,AACzD,AAAM,AAAQ,AAAM,AAAe;;;AACnC,OAAA,AAAM,QAAN,AAAa;qCAEb;AAAI,QAAK,OAAT,AAAI,AAAgB,AAAM,AACxB,AAAO,AAAK,AACb;;;gBACD;AAAA,AAAM,AAAS,AAAS;;wBACxB;;MAAI,CAAJ,AAAK,QAAQ,AACX;WAAO,KAAP,AAAO,AAAK,AACb;;;mEACD;AAAI,WAAM,QAAN,MAAA,AAAmB,AAAK,AAAQ,AAAC,kBAAD,AAAU,YAA9C,AAAI,AAAgC,AAAoB,YAAS;eAC/D;;WAAA,AAAO,QAAP,AAAe,MAAf,AAAqB,AAAkB,yBAAA,AAAO,AAAK,YAAY,YAAxB,AAAY,AAAsB,UAAzE,AAAkF;eAAE;;WAAS;eAAX;;AAAlF;aACA;;AAAA,AAAO,AAAQ,AAAM,AAAyB,AAAO,AAAK,AAAY,AAAU,AAAgB,AAAE;;;AAAlG,YACA;AAAO,iBAAP,AAAe,AAAM,AAAwB,AAAO,AAAK,AAAY,AAAU,AAAe,AAAE,AAAS;AADT,GAAW;AAC3G,AACA,AAAO,AAAO,AAAK,AAAY,AAAU,AAAS,IAAlD,AAAO,AAA2C,AAAE,AAAO,AAC5D;;;iEACD;QAAO,QAAA,AAAO,AAAK,qBACjB;QADiB,AACT,oCACR;;WAAQ,AAAK,iBAFR,AAAY;AAAnB,gBAjBF,AAqBC;AAED,A;;;gBAGA;AAAA,AAAO,AAAQ,AAAiB,AAAU,AAAQ,AAAe,AAC/D;;MAAA,AAAM,AAAQ,SAAM,iBAAN,AAAqB,SAAnC,AAAc,AACd;;OAAM,QAAN,AAAqB,AAAM,AAAe;gBAC1C;AAAA,AAAI,AAAK,AAAW,AAAM,AACxB;;gBAAY;;iBAEd,AAAI,AAAO,AAAW,AAAY,AAAK,AAAW,AAAQ,AACxD;AAHA,AAAO,AACR,GADQ;AAGP,AAAO,AAAK,AACb,IACD,AAAM,AAAS,AAAiB,AAAS;;;AACzC,AAAI,OAAJ,AAAK,QAAQ,gDACX;QAAO,QAAA,AAAK,MAAZ,cACD;;;4BACD;AAAO,gBAAA,AAAO,AAAK,AACjB;AADiB,AACT,AACR;;MAAQ,OAAK,+CAFR,AAAY;AAAnB,gBAbF,AAiBC;A,AAED;;;AAGO,YAAP,AAAe,AAAsB,AAAU,AAAQ,AAAQ,AAC7D;AAAM,YAAN,AAAc,AAAM,AAAM,AAAQ,AAClC,AAAM,AAAQ;AAFhB;AAAA,AAGE,AAAI,AAAK,AAAW,AAAM,AACxB,AAAO,AAAK,AACb,AACD,AAAI,AAAO,AAAW,AAAY,AAAW,AAAK,AAAQ,AACxD,AAAO,AAAK,AACb,AAED,AAAO,AAAO,AAAK,AACjB,AAAQ,AACR,AAAQ,AAEX","file":"/server/publications/collections/orders.js.map","sourcesContent":["import { Counts } from \"meteor/tmeasday:publish-counts\";\nimport { Orders } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\n\nconst OrderHelper =  {\n  makeQuery(filter) {\n    const shopId = Reaction.getShopId();\n    let query = {};\n\n    switch (filter) {\n      // New orders\n      case \"new\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": \"new\"\n        };\n        break;\n\n      // Orders that have yet to be captured & shipped\n      case \"processing\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": \"coreOrderWorkflow/processing\"\n        };\n        break;\n\n      // Orders that have been shipped, based on if the items have been shipped\n      case \"shipped\":\n        query = {\n          \"shopId\": shopId,\n          \"items.workflow.status\": \"coreOrderItemWorkflow/shipped\"\n        };\n        break;\n\n      // Orders that are complete, including all items with complete status\n      case \"completed\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": {\n            $in: [\"coreOrderWorkflow/completed\", \"coreOrderWorkflow/canceled\"]\n          },\n          \"items.workflow.status\": {\n            $in: [\"coreOrderItemWorkflow/completed\", \"coreOrderItemWorkflow/canceled\"]\n          }\n        };\n        break;\n\n      // Orders that have been captured, but not yet shipped\n      case \"captured\":\n        query = {\n          \"shopId\": shopId,\n          \"billing.paymentMethod.status\": \"completed\",\n          \"shipping.shipped\": false\n        };\n        break;\n\n      case \"canceled\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": \"canceled\"\n        };\n        break;\n\n      // Orders that have been refunded partially or fully\n      case \"refunded\":\n        query = {\n          \"shopId\": shopId,\n          \"billing.paymentMethod.status\": \"captured\",\n          \"shipping.shipped\": true\n        };\n        break;\n      default:\n    }\n\n    return query;\n  }\n};\n\n/**\n * orders\n */\n\nMeteor.publish(\"Orders\", function () {\n  if (this.userId === null) {\n    return this.ready();\n  }\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"], shopId)) {\n    return Orders.find({\n      shopId: shopId\n    });\n  }\n  return Orders.find({\n    shopId: shopId,\n    userId: this.userId\n  });\n});\n\n/**\n * paginated orders\n */\n\nMeteor.publish(\"PaginatedOrders\", function (filter, limit) {\n  check(filter, Match.OptionalOrNull(String));\n  check(limit, Number);\n\n  if (this.userId === null) {\n    return this.ready();\n  }\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"], shopId)) {\n    Counts.publish(this, \"newOrder-count\", Orders.find(OrderHelper.makeQuery(\"new\")), { noReady: true });\n    Counts.publish(this, \"processingOrder-count\", Orders.find(OrderHelper.makeQuery(\"processing\")), { noReady: true });\n    Counts.publish(this, \"completedOrder-count\", Orders.find(OrderHelper.makeQuery(\"completed\")), { noReady: true });\n    return Orders.find(OrderHelper.makeQuery(filter), { limit: limit });\n  }\n  return Orders.find({\n    shopId: shopId,\n    userId: this.userId\n  });\n});\n\n/**\n * account orders\n */\nMeteor.publish(\"AccountOrders\", function (userId, currentShopId) {\n  check(userId, Match.OptionalOrNull(String));\n  check(currentShopId, Match.OptionalOrNull(String));\n  if (this.userId === null) {\n    return this.ready();\n  }\n  if (typeof userId === \"string\" && this.userId !== userId) {\n    return this.ready();\n  }\n  const shopId = currentShopId || Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n  return Orders.find({\n    shopId: shopId,\n    userId: this.userId\n  });\n});\n\n/**\n * completed cart order\n */\nMeteor.publish(\"CompletedCartOrder\", function (userId, cartId) {\n  check(userId, Match.OneOf(String, null));\n  check(cartId, String);\n  if (this.userId === null) {\n    return this.ready();\n  }\n  if (typeof userId === \"string\" && userId !== this.userId) {\n    return this.ready();\n  }\n\n  return Orders.find({\n    cartId: cartId,\n    userId: userId\n  });\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/publications/collections/orders.js.map","sourceFileName":"/server/publications/collections/orders.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"orders"},"ignored":false,"code":"var Counts = void 0;\nmodule.importSync(\"meteor/tmeasday:publish-counts\", {\n  Counts: function (v) {\n    Counts = v;\n  }\n}, 0);\nvar Orders = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Orders: function (v) {\n    Orders = v;\n  }\n}, 1);\nvar Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 2);\nvar OrderHelper = {\n  makeQuery: function (filter) {\n    var shopId = Reaction.getShopId();\n    var query = {};\n\n    switch (filter) {\n      // New orders\n      case \"new\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": \"new\"\n        };\n        break;\n      // Orders that have yet to be captured & shipped\n\n      case \"processing\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": \"coreOrderWorkflow/processing\"\n        };\n        break;\n      // Orders that have been shipped, based on if the items have been shipped\n\n      case \"shipped\":\n        query = {\n          \"shopId\": shopId,\n          \"items.workflow.status\": \"coreOrderItemWorkflow/shipped\"\n        };\n        break;\n      // Orders that are complete, including all items with complete status\n\n      case \"completed\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": {\n            $in: [\"coreOrderWorkflow/completed\", \"coreOrderWorkflow/canceled\"]\n          },\n          \"items.workflow.status\": {\n            $in: [\"coreOrderItemWorkflow/completed\", \"coreOrderItemWorkflow/canceled\"]\n          }\n        };\n        break;\n      // Orders that have been captured, but not yet shipped\n\n      case \"captured\":\n        query = {\n          \"shopId\": shopId,\n          \"billing.paymentMethod.status\": \"completed\",\n          \"shipping.shipped\": false\n        };\n        break;\n\n      case \"canceled\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": \"canceled\"\n        };\n        break;\n      // Orders that have been refunded partially or fully\n\n      case \"refunded\":\n        query = {\n          \"shopId\": shopId,\n          \"billing.paymentMethod.status\": \"captured\",\n          \"shipping.shipped\": true\n        };\n        break;\n\n      default:}\n\n    return query;\n  }\n}; /**\n    * orders\n    */\nMeteor.publish(\"Orders\", function () {\n  if (this.userId === null) {\n    return this.ready();\n  }\n\n  var shopId = Reaction.getShopId();\n\n  if (!shopId) {\n    return this.ready();\n  }\n\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"], shopId)) {\n    return Orders.find({\n      shopId: shopId\n    });\n  }\n\n  return Orders.find({\n    shopId: shopId,\n    userId: this.userId\n  });\n}); /**\n     * paginated orders\n     */\nMeteor.publish(\"PaginatedOrders\", function (filter, limit) {\n  check(filter, Match.OptionalOrNull(String));\n  check(limit, Number);\n\n  if (this.userId === null) {\n    return this.ready();\n  }\n\n  var shopId = Reaction.getShopId();\n\n  if (!shopId) {\n    return this.ready();\n  }\n\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"], shopId)) {\n    Counts.publish(this, \"newOrder-count\", Orders.find(OrderHelper.makeQuery(\"new\")), {\n      noReady: true\n    });\n    Counts.publish(this, \"processingOrder-count\", Orders.find(OrderHelper.makeQuery(\"processing\")), {\n      noReady: true\n    });\n    Counts.publish(this, \"completedOrder-count\", Orders.find(OrderHelper.makeQuery(\"completed\")), {\n      noReady: true\n    });\n    return Orders.find(OrderHelper.makeQuery(filter), {\n      limit: limit\n    });\n  }\n\n  return Orders.find({\n    shopId: shopId,\n    userId: this.userId\n  });\n}); /**\n     * account orders\n     */\nMeteor.publish(\"AccountOrders\", function (userId, currentShopId) {\n  check(userId, Match.OptionalOrNull(String));\n  check(currentShopId, Match.OptionalOrNull(String));\n\n  if (this.userId === null) {\n    return this.ready();\n  }\n\n  if (typeof userId === \"string\" && this.userId !== userId) {\n    return this.ready();\n  }\n\n  var shopId = currentShopId || Reaction.getShopId();\n\n  if (!shopId) {\n    return this.ready();\n  }\n\n  return Orders.find({\n    shopId: shopId,\n    userId: this.userId\n  });\n}); /**\n     * completed cart order\n     */\nMeteor.publish(\"CompletedCartOrder\", function (userId, cartId) {\n  check(userId, Match.OneOf(String, null));\n  check(cartId, String);\n\n  if (this.userId === null) {\n    return this.ready();\n  }\n\n  if (typeof userId === \"string\" && userId !== this.userId) {\n    return this.ready();\n  }\n\n  return Orders.find({\n    cartId: cartId,\n    userId: userId\n  });\n});","map":{"version":3,"sources":["/server/publications/collections/orders.js"],"names":["Counts","Orders","Reaction","OrderHelper","makeQuery","filter","shopId","getShopId","query","$in","Meteor","publish","userId","ready","Roles","userIsInRole","find","limit","check","Match","OptionalOrNull","String","Number","noReady","currentShopId","cartId","OneOf"],"mappings":"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","file":"/server/publications/collections/orders.js.map","sourcesContent":["import { Counts } from \"meteor/tmeasday:publish-counts\";\nimport { Orders } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\n\nconst OrderHelper =  {\n  makeQuery(filter) {\n    const shopId = Reaction.getShopId();\n    let query = {};\n\n    switch (filter) {\n      // New orders\n      case \"new\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": \"new\"\n        };\n        break;\n\n      // Orders that have yet to be captured & shipped\n      case \"processing\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": \"coreOrderWorkflow/processing\"\n        };\n        break;\n\n      // Orders that have been shipped, based on if the items have been shipped\n      case \"shipped\":\n        query = {\n          \"shopId\": shopId,\n          \"items.workflow.status\": \"coreOrderItemWorkflow/shipped\"\n        };\n        break;\n\n      // Orders that are complete, including all items with complete status\n      case \"completed\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": {\n            $in: [\"coreOrderWorkflow/completed\", \"coreOrderWorkflow/canceled\"]\n          },\n          \"items.workflow.status\": {\n            $in: [\"coreOrderItemWorkflow/completed\", \"coreOrderItemWorkflow/canceled\"]\n          }\n        };\n        break;\n\n      // Orders that have been captured, but not yet shipped\n      case \"captured\":\n        query = {\n          \"shopId\": shopId,\n          \"billing.paymentMethod.status\": \"completed\",\n          \"shipping.shipped\": false\n        };\n        break;\n\n      case \"canceled\":\n        query = {\n          \"shopId\": shopId,\n          \"workflow.status\": \"canceled\"\n        };\n        break;\n\n      // Orders that have been refunded partially or fully\n      case \"refunded\":\n        query = {\n          \"shopId\": shopId,\n          \"billing.paymentMethod.status\": \"captured\",\n          \"shipping.shipped\": true\n        };\n        break;\n      default:\n    }\n\n    return query;\n  }\n};\n\n/**\n * orders\n */\n\nMeteor.publish(\"Orders\", function () {\n  if (this.userId === null) {\n    return this.ready();\n  }\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"], shopId)) {\n    return Orders.find({\n      shopId: shopId\n    });\n  }\n  return Orders.find({\n    shopId: shopId,\n    userId: this.userId\n  });\n});\n\n/**\n * paginated orders\n */\n\nMeteor.publish(\"PaginatedOrders\", function (filter, limit) {\n  check(filter, Match.OptionalOrNull(String));\n  check(limit, Number);\n\n  if (this.userId === null) {\n    return this.ready();\n  }\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"], shopId)) {\n    Counts.publish(this, \"newOrder-count\", Orders.find(OrderHelper.makeQuery(\"new\")), { noReady: true });\n    Counts.publish(this, \"processingOrder-count\", Orders.find(OrderHelper.makeQuery(\"processing\")), { noReady: true });\n    Counts.publish(this, \"completedOrder-count\", Orders.find(OrderHelper.makeQuery(\"completed\")), { noReady: true });\n    return Orders.find(OrderHelper.makeQuery(filter), { limit: limit });\n  }\n  return Orders.find({\n    shopId: shopId,\n    userId: this.userId\n  });\n});\n\n/**\n * account orders\n */\nMeteor.publish(\"AccountOrders\", function (userId, currentShopId) {\n  check(userId, Match.OptionalOrNull(String));\n  check(currentShopId, Match.OptionalOrNull(String));\n  if (this.userId === null) {\n    return this.ready();\n  }\n  if (typeof userId === \"string\" && this.userId !== userId) {\n    return this.ready();\n  }\n  const shopId = currentShopId || Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n  return Orders.find({\n    shopId: shopId,\n    userId: this.userId\n  });\n});\n\n/**\n * completed cart order\n */\nMeteor.publish(\"CompletedCartOrder\", function (userId, cartId) {\n  check(userId, Match.OneOf(String, null));\n  check(cartId, String);\n  if (this.userId === null) {\n    return this.ready();\n  }\n  if (typeof userId === \"string\" && userId !== this.userId) {\n    return this.ready();\n  }\n\n  return Orders.find({\n    cartId: cartId,\n    userId: userId\n  });\n});\n"]},"hash":"3f2fd7f2e9a6023172925b260e261d93e4135dd7"}
