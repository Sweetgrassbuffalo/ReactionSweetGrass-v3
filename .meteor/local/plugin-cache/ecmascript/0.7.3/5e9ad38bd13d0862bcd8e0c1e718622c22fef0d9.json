{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/collections","imported":["AnalyticsEvents","Orders"],"specifiers":[{"kind":"named","imported":"AnalyticsEvents","local":"AnalyticsEvents"},{"kind":"named","imported":"Orders","local":"Orders"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/orders/server/startup.js","filenameRelative":"/imports/plugins/core/orders/server/startup.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/orders/server/startup.js"],"names":["AnalyticsEvents","Orders","before","insert","userId","order","analyticsEvent","eventType","value","_id","label","update","fieldNames","modifier","$set","status","workflowMethod","Meteor","server","method_handlers","result","call"],"mappings":"AAAA,IAAS;IAAT,AAA0B;AAA1B,OAAwC,WAAxC;;;;;;;GAGA,AAAO,AAAO,AAAO,AAAC,AAAQ,AAAU,AACtC,AAAM,AAAiB;AACrB,cADqB,AACV,gCACX;MAFqB,AAEd,AAAM;AACN,eAHT,AAAuB;iBAKvB;WANF,AAME,AAAgB,AAAO,AACxB,A,AAED;AALI;;IAaJ;;;;;;OAQA,AAAO,AAAO,AAAO,AAAC,AAAQ,AAAO,AAAY,AAAa,AAC5D,AACA,AAAI,AAAS,AAAM,AACjB,AACA,AAAI,AAAS,AAAK,AAAoB,AACpC,AAAM,AAAS,AAAS,AAAK;;;;;;;;AAC7B,OAAM,wBAAkB,eAAW,AAAO,YAA1C;AAEA;MAAI,SAAO,MAAX,AAAI,AAAc,AAAgB,AAAiB,AACjD;AAAM,AAAS,AAAO,AAAK,AAAgB,AACzC;QADyC,kCAEzC;UAFyC,uBAGzC;yCAJ+C,AACjD,AAAe,AAA4B,AAK3C;;;YACA,AAAO;AAEV;AACF;AAlBH,AAmBC;AAHM,WADC","file":"/imports/plugins/core/orders/server/startup.js.map","sourcesContent":["import { AnalyticsEvents, Orders } from \"/lib/collections\";\n\n\nOrders.before.insert((userId, order) => {\n  const analyticsEvent = {\n    eventType: \"buy\",\n    value: order._id,\n    label: \"bought products\"\n  };\n  AnalyticsEvents.insert(analyticsEvent);\n});\n\n/**\n*  Step 3 of the \"workflow/pushOrderWorkflow\" flow\n*\n*\tThe following methods are called from Orders.before.update hook.\n*\t@see packages/reaction-schema/common/hooks/orders.js\n  * @see packages/reaction-core/common/methods/workflow.js\n*/\n\n/**\n * Orders collection before update\n * @param {String} userId - User wanting to update this documen\n * @param {Order} order - Order object, before any modifications\n * @param {Array} fieldNames - Array of field names to update\n * @param {Object} modifier - Mongo modifier object\n * @return {Boolean} true if document should be updated, false otherwise\n*/\nOrders.before.update((userId, order, fieldNames, modifier) => {\n  // if we're adding a new product or variant to the cart\n  if (modifier.$set) {\n    // Updating status of order e.g. \"coreOrderWorkflow/processing\"\n    if (modifier.$set[\"workflow.status\"]) {\n      const status = modifier.$set[\"workflow.status\"];\n      const workflowMethod = `workflow/${status}`;\n\n      if (Meteor.server.method_handlers[workflowMethod]) {\n        const result = Meteor.call(workflowMethod, {\n          userId,\n          order,\n          modifier\n        });\n        // Result should be true / false to all or disallow updating the status\n        return result;\n      }\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/orders/server/startup.js.map","sourceFileName":"/imports/plugins/core/orders/server/startup.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"startup"},"ignored":false,"code":"var AnalyticsEvents = void 0,\n    Orders = void 0;\nmodule.importSync(\"/lib/collections\", {\n  AnalyticsEvents: function (v) {\n    AnalyticsEvents = v;\n  },\n  Orders: function (v) {\n    Orders = v;\n  }\n}, 0);\nOrders.before.insert(function (userId, order) {\n  var analyticsEvent = {\n    eventType: \"buy\",\n    value: order._id,\n    label: \"bought products\"\n  };\n  AnalyticsEvents.insert(analyticsEvent);\n}); /**\n    *  Step 3 of the \"workflow/pushOrderWorkflow\" flow\n    *\n    *\tThe following methods are called from Orders.before.update hook.\n    *\t@see packages/reaction-schema/common/hooks/orders.js\n      * @see packages/reaction-core/common/methods/workflow.js\n    */ /**\n        * Orders collection before update\n        * @param {String} userId - User wanting to update this documen\n        * @param {Order} order - Order object, before any modifications\n        * @param {Array} fieldNames - Array of field names to update\n        * @param {Object} modifier - Mongo modifier object\n        * @return {Boolean} true if document should be updated, false otherwise\n       */\nOrders.before.update(function (userId, order, fieldNames, modifier) {\n  // if we're adding a new product or variant to the cart\n  if (modifier.$set) {\n    // Updating status of order e.g. \"coreOrderWorkflow/processing\"\n    if (modifier.$set[\"workflow.status\"]) {\n      var status = modifier.$set[\"workflow.status\"];\n      var workflowMethod = \"workflow/\" + status;\n\n      if (Meteor.server.method_handlers[workflowMethod]) {\n        var result = Meteor.call(workflowMethod, {\n          userId: userId,\n          order: order,\n          modifier: modifier\n        }); // Result should be true / false to all or disallow updating the status\n\n        return result;\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/orders/server/startup.js"],"names":["AnalyticsEvents","Orders","before","insert","userId","order","analyticsEvent","eventType","value","_id","label","update","fieldNames","modifier","$set","status","workflowMethod","Meteor","server","method_handlers","result","call"],"mappings":"AAAA,IAAS;IAAT,AAA0B;AAA1B,OAAwC,WAAxC;;;;;;;GAGA,AAAO,AAAO,AAAO,AAAC,AAAQ,AAAU,AACtC,AAAM,AAAiB;AACrB,cADqB,AACV,gCACX;MAFqB,AAEd,AAAM;AACN,eAHT,AAAuB;iBAKvB;WANF,AAME,AAAgB,AAAO,AACxB,A,AAED;AALI;;IAaJ;;;;;;OAQA,AAAO,AAAO,AAAO,AAAC,AAAQ,AAAO,AAAY,AAAa,AAC5D,AACA,AAAI,AAAS,AAAM,AACjB,AACA,AAAI,AAAS,AAAK,AAAoB,AACpC,AAAM,AAAS,AAAS,AAAK;;;;;;;;AAC7B,OAAM,wBAAkB,eAAW,AAAO,YAA1C;AAEA;MAAI,SAAO,MAAX,AAAI,AAAc,AAAgB,AAAiB,AACjD;AAAM,AAAS,AAAO,AAAK,AAAgB,AACzC;QADyC,kCAEzC;UAFyC,uBAGzC;yCAJ+C,AACjD,AAAe,AAA4B,AAK3C;;;YACA,AAAO;AAEV;AACF;AAlBH,AAmBC;AAHM,WADC","file":"/imports/plugins/core/orders/server/startup.js.map","sourcesContent":["import { AnalyticsEvents, Orders } from \"/lib/collections\";\n\n\nOrders.before.insert((userId, order) => {\n  const analyticsEvent = {\n    eventType: \"buy\",\n    value: order._id,\n    label: \"bought products\"\n  };\n  AnalyticsEvents.insert(analyticsEvent);\n});\n\n/**\n*  Step 3 of the \"workflow/pushOrderWorkflow\" flow\n*\n*\tThe following methods are called from Orders.before.update hook.\n*\t@see packages/reaction-schema/common/hooks/orders.js\n  * @see packages/reaction-core/common/methods/workflow.js\n*/\n\n/**\n * Orders collection before update\n * @param {String} userId - User wanting to update this documen\n * @param {Order} order - Order object, before any modifications\n * @param {Array} fieldNames - Array of field names to update\n * @param {Object} modifier - Mongo modifier object\n * @return {Boolean} true if document should be updated, false otherwise\n*/\nOrders.before.update((userId, order, fieldNames, modifier) => {\n  // if we're adding a new product or variant to the cart\n  if (modifier.$set) {\n    // Updating status of order e.g. \"coreOrderWorkflow/processing\"\n    if (modifier.$set[\"workflow.status\"]) {\n      const status = modifier.$set[\"workflow.status\"];\n      const workflowMethod = `workflow/${status}`;\n\n      if (Meteor.server.method_handlers[workflowMethod]) {\n        const result = Meteor.call(workflowMethod, {\n          userId,\n          order,\n          modifier\n        });\n        // Result should be true / false to all or disallow updating the status\n        return result;\n      }\n    }\n  }\n});\n"]},"hash":"5e9ad38bd13d0862bcd8e0c1e718622c22fef0d9"}
