{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/lib/api/account-validation.js","filenameRelative":"/lib/api/account-validation.js","inputSourceMap":{"version":3,"sources":["/lib/api/account-validation.js"],"names":["Meteor","validationMethods","username","check","Match","OptionalOrNull","String","length","error","reason","i18nKeyReason","email","optional","Boolean","processedEmail","trim","indexOf","password","options","Object","passwordOptions","errors","validationLevel","push","LoginFormValidation","methods"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;GAEA,AAAM,AAAoB;AACxB;AAMA,AAAS,AAAU,AACjB,AAAM,AAAU,AAAM,AAAe,AAErC;;;;;;AACI,UAAS,UAAT,MAAJ,AAAuB,AAAG,eACxB,AAAO,AACR,UANgB,AAQjB;;;aACA;AAAO,AACL,AAAO,AACP,KAPF,CAKO,AAEG,AACR;;;;aAnBoB,AAqBvB;;qBAED;AAPE,AAAO,AAGU;;AAWnB,AAAM,AAAO,AAAU,AACrB,AAAM,AAAO,AAAM,AAAe,AAClC,AAAM,AAAU,AAAM,AAAe,AAErC,AAAM,AAAiB,AAAM,AAE7B;;;;;;;AACI,iBAAa,MAAb,AAAqB,eAAzB,AAAyB,AAAe,AAAW,AAAG,AACpD;UAAA,AAAO,+BADT,AAEC,AAAM,AAAI,AAAe,AAAQ,AAAS,AAAC,AAAG,AAC7C;QAAA,AAAO,uBAVY,AAWpB,AAED;;0DACA;AAAO,aACL;WAAO,IADF,oCAEL;aAFK,AAEG,AACR;AA/CoB,AA4CtB,AAAO,AAGU,AAElB,KAZC;;;;;;;AAcF;;AAUA,AAAS,AAAU,AAAS,AAC1B,AAAM,AAAU,AAAM,AAAe,AACrC,AAAM,AAAS,AAAM,AAAe,AAEpC,AAAM,AAAkB,AAAW,AACnC,AAAM,AAAS,AAEf,AACA,AACA;;;;;;;;;KAAI,8BAAgB;UACd,AAAS,UAAT,MAAJ,AAAsB,AAAG,eACvB;UAAO,SAAP,qBACD;qCAED;QAAA,AAAO,AAAK,SAAA,AACV,AAAO,AACP,IAFU,AAEF,AACR;AAHU,AAGK;;AAHjB,sDALF,AAUC;UAAM,qBACL;eACA;AACA,AAAI,AAAS,AAAS,AAAG,AACvB;;aAAO;eAAK,AACH,AACP;gBAFU,AAEF,AACR;uBAHF,AAAY,AAGK,AAElB;AALC,AAAY,AACV;WAKL;;AAED;AAAI,UAAO,SAAX,AAAmB,YACjB;AAAO,eAAP;;;yBAIF,AAAO,AACR;AArC2B,AAiCzB,AAED;;A,AAhGJ,AAA0B,AAqG1B;;uBACA;aAAA,AAAsB,AAEtB,A;AACA,AAAO,AAAQ,AACb,KApCE,AAAI,AAAoC,AAAU,AAChD,CAkCS,AACmB,AAAkB,AAClD;;;WAFa,AAEgB,AAAkB,AAC/C;AAHF,AAAe,AAGmB,AAAkB","file":"/lib/api/account-validation.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\n\nconst validationMethods = {\n  /**\n   * Username validation\n   * @summary Determins if a username meets the minimum requirement of 3 characters\n   * @param  {String} username Username to validate\n   * @return {Boolean|Object} true if valid, error object if invalid\n   */\n  username(username) {\n    check(username, Match.OptionalOrNull(String));\n\n    // Valid\n    if (username.length >= 3) {\n      return true;\n    }\n\n    // Invalid\n    return {\n      error: \"INVALID_USERNAME\",\n      reason: \"Username must be at least 3 characters long\",\n      i18nKeyReason: \"accountsUI.error.usernameMinLength\"\n    };\n  },\n\n  /**\n   * Email validation\n   * @summary Validates both required and optional email addresses.\n   * @param  {String} email Email address to validate\n   * @param  {Boolean} optional If set to true, validation will pass if email is blank\n   * @return {Boolean|Object} Returns true if valid; Returns an error object if invalid\n   */\n  email(email, optional) {\n    check(email, Match.OptionalOrNull(String));\n    check(optional, Match.OptionalOrNull(Boolean));\n\n    const processedEmail = email.trim();\n\n    // Valid\n    if (optional === true && processedEmail.length === 0) {\n      return true;\n    } else if (processedEmail.indexOf(\"@\") !== -1) {\n      return true;\n    }\n\n    // Invalid\n    return {\n      error: \"INVALID_EMAIL\",\n      reason: \"Email address is invalid\",\n      i18nKeyReason: \"accountsUI.error.invalidEmail\"\n    };\n  },\n\n  /**\n   * Password validation\n   * Passwords may be validated 2 ways.\n   * \"exists\" (options.validationLevel = \"exists\") - Password must not be blank. Thats is the only rule. Used to validate a sign in.\n   * undefined (options.validationLevel = undefined) - Password must meet the lenght and other criteria to validate. Used for validating a new sign up.\n   * @param  {String} password Password to validate\n   * @param  {Object} options Options to apply to the password validator\n   * @param  {String} options.validationLevel \"exists\" | undefined (default)\n   * @return {Boolean|[{error: String, reason: String}]} true if valid | Error object otherwise\n   */\n  password(password, options) {\n    check(password, Match.OptionalOrNull(String));\n    check(options, Match.OptionalOrNull(Object));\n\n    const passwordOptions = options || {};\n    const errors = [];\n\n    // Only check if a password has been entered at all.\n    // This is usefull for the login forms\n    if (passwordOptions.validationLevel === \"exists\") {\n      if (password.length > 0) {\n        return true;\n      }\n\n      errors.push({\n        error: \"INVALID_PASSWORD\",\n        reason: \"Password is required\",\n        i18nKeyReason: \"accountsUI.error.passwordRequired\"\n      });\n    } else {\n      // Validate the password on some rules\n      // This is useful for cases where a password needs to be created or updated.\n      if (password.length < 6) {\n        errors.push({\n          error: \"INVALID_PASSWORD\",\n          reason: \"Password must be at least 6 characters long.\",\n          i18nKeyReason: \"accountsUI.error.passwordMustBeAtLeast6CharactersLong\"\n        });\n      }\n    }\n\n    if (errors.length) {\n      return errors;\n    }\n\n    // Otherwise the password is valid\n    return true;\n  }\n};\n\n// Export object globally\nLoginFormValidation = validationMethods;\n\n// Register validation methods as meteor methods\nMeteor.methods({\n  \"accounts/validation/username\": validationMethods.username,\n  \"accounts/validation/email\": validationMethods.email,\n  \"accounts/validation/password\": validationMethods.password\n});\n\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/api/account-validation.js.map","sourceFileName":"/lib/api/account-validation.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"account-validation"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar validationMethods = {\n  /**\n   * Username validation\n   * @summary Determins if a username meets the minimum requirement of 3 characters\n   * @param  {String} username Username to validate\n   * @return {Boolean|Object} true if valid, error object if invalid\n   */username: function (username) {\n    check(username, Match.OptionalOrNull(String)); // Valid\n\n    if (username.length >= 3) {\n      return true;\n    } // Invalid\n\n\n    return {\n      error: \"INVALID_USERNAME\",\n      reason: \"Username must be at least 3 characters long\",\n      i18nKeyReason: \"accountsUI.error.usernameMinLength\"\n    };\n  },\n  /**\n   * Email validation\n   * @summary Validates both required and optional email addresses.\n   * @param  {String} email Email address to validate\n   * @param  {Boolean} optional If set to true, validation will pass if email is blank\n   * @return {Boolean|Object} Returns true if valid; Returns an error object if invalid\n   */email: function (email, optional) {\n    check(email, Match.OptionalOrNull(String));\n    check(optional, Match.OptionalOrNull(Boolean));\n    var processedEmail = email.trim(); // Valid\n\n    if (optional === true && processedEmail.length === 0) {\n      return true;\n    } else if (processedEmail.indexOf(\"@\") !== -1) {\n      return true;\n    } // Invalid\n\n\n    return {\n      error: \"INVALID_EMAIL\",\n      reason: \"Email address is invalid\",\n      i18nKeyReason: \"accountsUI.error.invalidEmail\"\n    };\n  },\n  /**\n   * Password validation\n   * Passwords may be validated 2 ways.\n   * \"exists\" (options.validationLevel = \"exists\") - Password must not be blank. Thats is the only rule. Used to validate a sign in.\n   * undefined (options.validationLevel = undefined) - Password must meet the lenght and other criteria to validate. Used for validating a new sign up.\n   * @param  {String} password Password to validate\n   * @param  {Object} options Options to apply to the password validator\n   * @param  {String} options.validationLevel \"exists\" | undefined (default)\n   * @return {Boolean|[{error: String, reason: String}]} true if valid | Error object otherwise\n   */password: function (password, options) {\n    check(password, Match.OptionalOrNull(String));\n    check(options, Match.OptionalOrNull(Object));\n    var passwordOptions = options || {};\n    var errors = []; // Only check if a password has been entered at all.\n    // This is usefull for the login forms\n\n    if (passwordOptions.validationLevel === \"exists\") {\n      if (password.length > 0) {\n        return true;\n      }\n\n      errors.push({\n        error: \"INVALID_PASSWORD\",\n        reason: \"Password is required\",\n        i18nKeyReason: \"accountsUI.error.passwordRequired\"\n      });\n    } else {\n      // Validate the password on some rules\n      // This is useful for cases where a password needs to be created or updated.\n      if (password.length < 6) {\n        errors.push({\n          error: \"INVALID_PASSWORD\",\n          reason: \"Password must be at least 6 characters long.\",\n          i18nKeyReason: \"accountsUI.error.passwordMustBeAtLeast6CharactersLong\"\n        });\n      }\n    }\n\n    if (errors.length) {\n      return errors;\n    } // Otherwise the password is valid\n\n\n    return true;\n  }\n}; // Export object globally\n\nLoginFormValidation = validationMethods; // Register validation methods as meteor methods\n\nMeteor.methods({\n  \"accounts/validation/username\": validationMethods.username,\n  \"accounts/validation/email\": validationMethods.email,\n  \"accounts/validation/password\": validationMethods.password\n});","map":{"version":3,"sources":["/lib/api/account-validation.js"],"names":["Meteor","validationMethods","username","check","Match","OptionalOrNull","String","length","error","reason","i18nKeyReason","email","optional","Boolean","processedEmail","trim","indexOf","password","options","Object","passwordOptions","errors","validationLevel","push","LoginFormValidation","methods"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;GAEA,AAAM,AAAoB;AACxB;AAMA,AAAS,AAAU,AACjB,AAAM,AAAU,AAAM,AAAe,AAErC;;;;;;AACI,UAAS,UAAT,MAAJ,AAAuB,AAAG,eACxB,AAAO,AACR,UANgB,AAQjB;;;aACA;AAAO,AACL,AAAO,AACP,KAPF,CAKO,AAEG,AACR;;;;aAnBoB,AAqBvB;;qBAED;AAPE,AAAO,AAGU;;AAWnB,AAAM,AAAO,AAAU,AACrB,AAAM,AAAO,AAAM,AAAe,AAClC,AAAM,AAAU,AAAM,AAAe,AAErC,AAAM,AAAiB,AAAM,AAE7B;;;;;;;AACI,iBAAa,MAAb,AAAqB,eAAzB,AAAyB,AAAe,AAAW,AAAG,AACpD;UAAA,AAAO,+BADT,AAEC,AAAM,AAAI,AAAe,AAAQ,AAAS,AAAC,AAAG,AAC7C;QAAA,AAAO,uBAVY,AAWpB,AAED;;0DACA;AAAO,aACL;WAAO,IADF,oCAEL;aAFK,AAEG,AACR;AA/CoB,AA4CtB,AAAO,AAGU,AAElB,KAZC;;;;;;;AAcF;;AAUA,AAAS,AAAU,AAAS,AAC1B,AAAM,AAAU,AAAM,AAAe,AACrC,AAAM,AAAS,AAAM,AAAe,AAEpC,AAAM,AAAkB,AAAW,AACnC,AAAM,AAAS,AAEf,AACA,AACA;;;;;;;;;KAAI,8BAAgB;UACd,AAAS,UAAT,MAAJ,AAAsB,AAAG,eACvB;UAAO,SAAP,qBACD;qCAED;QAAA,AAAO,AAAK,SAAA,AACV,AAAO,AACP,IAFU,AAEF,AACR;AAHU,AAGK;;AAHjB,sDALF,AAUC;UAAM,qBACL;eACA;AACA,AAAI,AAAS,AAAS,AAAG,AACvB;;aAAO;eAAK,AACH,AACP;gBAFU,AAEF,AACR;uBAHF,AAAY,AAGK,AAElB;AALC,AAAY,AACV;WAKL;;AAED;AAAI,UAAO,SAAX,AAAmB,YACjB;AAAO,eAAP;;;yBAIF,AAAO,AACR;AArC2B,AAiCzB,AAED;;A,AAhGJ,AAA0B,AAqG1B;;uBACA;aAAA,AAAsB,AAEtB,A;AACA,AAAO,AAAQ,AACb,KApCE,AAAI,AAAoC,AAAU,AAChD,CAkCS,AACmB,AAAkB,AAClD;;;WAFa,AAEgB,AAAkB,AAC/C;AAHF,AAAe,AAGmB,AAAkB","file":"/lib/api/account-validation.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\n\nconst validationMethods = {\n  /**\n   * Username validation\n   * @summary Determins if a username meets the minimum requirement of 3 characters\n   * @param  {String} username Username to validate\n   * @return {Boolean|Object} true if valid, error object if invalid\n   */\n  username(username) {\n    check(username, Match.OptionalOrNull(String));\n\n    // Valid\n    if (username.length >= 3) {\n      return true;\n    }\n\n    // Invalid\n    return {\n      error: \"INVALID_USERNAME\",\n      reason: \"Username must be at least 3 characters long\",\n      i18nKeyReason: \"accountsUI.error.usernameMinLength\"\n    };\n  },\n\n  /**\n   * Email validation\n   * @summary Validates both required and optional email addresses.\n   * @param  {String} email Email address to validate\n   * @param  {Boolean} optional If set to true, validation will pass if email is blank\n   * @return {Boolean|Object} Returns true if valid; Returns an error object if invalid\n   */\n  email(email, optional) {\n    check(email, Match.OptionalOrNull(String));\n    check(optional, Match.OptionalOrNull(Boolean));\n\n    const processedEmail = email.trim();\n\n    // Valid\n    if (optional === true && processedEmail.length === 0) {\n      return true;\n    } else if (processedEmail.indexOf(\"@\") !== -1) {\n      return true;\n    }\n\n    // Invalid\n    return {\n      error: \"INVALID_EMAIL\",\n      reason: \"Email address is invalid\",\n      i18nKeyReason: \"accountsUI.error.invalidEmail\"\n    };\n  },\n\n  /**\n   * Password validation\n   * Passwords may be validated 2 ways.\n   * \"exists\" (options.validationLevel = \"exists\") - Password must not be blank. Thats is the only rule. Used to validate a sign in.\n   * undefined (options.validationLevel = undefined) - Password must meet the lenght and other criteria to validate. Used for validating a new sign up.\n   * @param  {String} password Password to validate\n   * @param  {Object} options Options to apply to the password validator\n   * @param  {String} options.validationLevel \"exists\" | undefined (default)\n   * @return {Boolean|[{error: String, reason: String}]} true if valid | Error object otherwise\n   */\n  password(password, options) {\n    check(password, Match.OptionalOrNull(String));\n    check(options, Match.OptionalOrNull(Object));\n\n    const passwordOptions = options || {};\n    const errors = [];\n\n    // Only check if a password has been entered at all.\n    // This is usefull for the login forms\n    if (passwordOptions.validationLevel === \"exists\") {\n      if (password.length > 0) {\n        return true;\n      }\n\n      errors.push({\n        error: \"INVALID_PASSWORD\",\n        reason: \"Password is required\",\n        i18nKeyReason: \"accountsUI.error.passwordRequired\"\n      });\n    } else {\n      // Validate the password on some rules\n      // This is useful for cases where a password needs to be created or updated.\n      if (password.length < 6) {\n        errors.push({\n          error: \"INVALID_PASSWORD\",\n          reason: \"Password must be at least 6 characters long.\",\n          i18nKeyReason: \"accountsUI.error.passwordMustBeAtLeast6CharactersLong\"\n        });\n      }\n    }\n\n    if (errors.length) {\n      return errors;\n    }\n\n    // Otherwise the password is valid\n    return true;\n  }\n};\n\n// Export object globally\nLoginFormValidation = validationMethods;\n\n// Register validation methods as meteor methods\nMeteor.methods({\n  \"accounts/validation/username\": validationMethods.username,\n  \"accounts/validation/email\": validationMethods.email,\n  \"accounts/validation/password\": validationMethods.password\n});\n\n"]},"hash":"bd018e0b792332ac21c3e99e2bdf15c39149c457"}
