{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"/lib/collections","imported":["Shipping","Packages"],"specifiers":[{"kind":"named","imported":"Shipping","local":"Shipping"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"../lib/roles","imported":["shippingRoles"],"specifiers":[{"kind":"named","imported":"shippingRoles","local":"shippingRoles"}]}],"exports":{"exported":["methods"],"specifiers":[{"kind":"local","local":"methods","exported":"methods"}]}}},"options":{"filename":"/imports/plugins/core/shipping/server/methods/methods.js","filenameRelative":"/imports/plugins/core/shipping/server/methods/methods.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/shipping/server/methods/methods.js"],"names":["Meteor","check","Shipping","Packages","Reaction","shippingRoles","methods","orderId","String","packageId","provider","hasPermission","Error","pkg","findOne","settings","current","enabled","update","_id","$set","multi"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAU,AAAgB,AACnC,AAAS,AAAgB,AACzB,AAAS,AAAqB,AAE9B,AAAO,AAAM,AAAU,AACrB;;AAA8C,AAC5C,AAAM,AAAS,AACf;mBAEA,QADA;AAEA;AANmB,AAMnB,AAAO,AACR;;WACD;;AAOA,AAA4B,AAAU,AAAW,AAAU,AACzD,AAAM,AAAW,AACjB;;;;;;KAAA,AAAM,AAAU;qBAChB;AAAI,AAAC,UAAS,UAAd,AAAK,AAAuB,AAAgB,AAC1C;;SAAM,AAAI,SAAJ,AAAW,AAAM,cAAjB,AAAsB,gBAA5B,AAAM,AACP;;AACD;;QAAM,MAAM,SAAA,AAAS,QAArB,AAAY,AAAiB;;uCAC7B;AAAI,UAAO,AAAI,mBAAf,AAAW;yBACT;AADiC,OAAxB,AAAa;UAChB,UAAU,IAAS,SAAT,AAAiB,UAAE,SAAF,AAAmB;;AAApD,AAAgB,uCAChB;AAAM,wBAAc;yBAEpB;AAAI,AAAW,2BAAf,AAAuB,AAAU,AAC/B;AAL+B,AAEjC,AAAgB,AAAa,AAAU,AACvC,SADgB;;AAKK,gCAFZ,AAAgB,AAGpB,AACD;AAJqB,AACd,AAAQ,AACf;AAFK,AAAS,AAAO,AACrB;iBAEC,AACK,AACgB;AADhB,AACJ;AALG,AAOJ,AACD;AADC,AACM;AART,AAAO,AAUR,AACF;AArCwB,AAAU,AAAS,AAC5C;AAqCD,eAvCI,AAAgB,AA0CvB,AAAO,AAAQ","file":"/imports/plugins/core/shipping/server/methods/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Shipping, Packages } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\nimport { shippingRoles } from \"../lib/roles\";\n\nexport const methods = {\n  \"shipping/status/refresh\": function (orderId) {\n    check(orderId, String);\n    // this is a stub for future core processing\n    // it also serves as a place for Method Hooks\n    // in other shipping packages, like Shippo\n    return orderId;\n  },\n  /**\n   * shipping/provider/toggle\n   * @summary toggle enabled provider\n   * @param { String } packageId - packageId\n   * @param { String } provider - provider name\n   * @return { Number } update - result\n   */\n  \"shipping/provider/toggle\": function (packageId, provider) {\n    check(packageId, String);\n    check(provider, String);\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    const pkg = Packages.findOne(packageId);\n    if (pkg && pkg.settings[provider]) {\n      const current = Shipping.findOne({ \"provider.name\": provider });\n      const enabled = pkg.settings[provider].enabled;\n      // const enabled = !current.provider.enabled;\n      if (current && current.provider) {\n        return Shipping.update({\n          \"_id\": current._id,\n          \"provider.name\": provider\n        }, {\n          $set: {\n            \"provider.enabled\": enabled\n          }\n        }, {\n          multi: true\n        });\n      }\n    }\n  }\n};\n\nMeteor.methods(methods);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/shipping/server/methods/methods.js.map","sourceFileName":"/imports/plugins/core/shipping/server/methods/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  methods: function () {\n    return methods;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar Shipping = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shipping: function (v) {\n    Shipping = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 2);\nvar Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 3);\nvar shippingRoles = void 0;\nmodule.importSync(\"../lib/roles\", {\n  shippingRoles: function (v) {\n    shippingRoles = v;\n  }\n}, 4);\nvar methods = {\n  \"shipping/status/refresh\": function (orderId) {\n    check(orderId, String); // this is a stub for future core processing\n    // it also serves as a place for Method Hooks\n    // in other shipping packages, like Shippo\n\n    return orderId;\n  },\n  /**\n   * shipping/provider/toggle\n   * @summary toggle enabled provider\n   * @param { String } packageId - packageId\n   * @param { String } provider - provider name\n   * @return { Number } update - result\n   */\"shipping/provider/toggle\": function (packageId, provider) {\n    check(packageId, String);\n    check(provider, String);\n\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    var pkg = Packages.findOne(packageId);\n\n    if (pkg && pkg.settings[provider]) {\n      var current = Shipping.findOne({\n        \"provider.name\": provider\n      });\n      var enabled = pkg.settings[provider].enabled; // const enabled = !current.provider.enabled;\n\n      if (current && current.provider) {\n        return Shipping.update({\n          \"_id\": current._id,\n          \"provider.name\": provider\n        }, {\n          $set: {\n            \"provider.enabled\": enabled\n          }\n        }, {\n          multi: true\n        });\n      }\n    }\n  }\n};\nMeteor.methods(methods);","map":{"version":3,"sources":["/imports/plugins/core/shipping/server/methods/methods.js"],"names":["Meteor","check","Shipping","Packages","Reaction","shippingRoles","methods","orderId","String","packageId","provider","hasPermission","Error","pkg","findOne","settings","current","enabled","update","_id","$set","multi"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAU,AAAgB,AACnC,AAAS,AAAgB,AACzB,AAAS,AAAqB,AAE9B,AAAO,AAAM,AAAU,AACrB;;AAA8C,AAC5C,AAAM,AAAS,AACf;mBAEA,QADA;AAEA;AANmB,AAMnB,AAAO,AACR;;WACD;;AAOA,AAA4B,AAAU,AAAW,AAAU,AACzD,AAAM,AAAW,AACjB;;;;;;KAAA,AAAM,AAAU;qBAChB;AAAI,AAAC,UAAS,UAAd,AAAK,AAAuB,AAAgB,AAC1C;;SAAM,AAAI,SAAJ,AAAW,AAAM,cAAjB,AAAsB,gBAA5B,AAAM,AACP;;AACD;;QAAM,MAAM,SAAA,AAAS,QAArB,AAAY,AAAiB;;uCAC7B;AAAI,UAAO,AAAI,mBAAf,AAAW;yBACT;AADiC,OAAxB,AAAa;UAChB,UAAU,IAAS,SAAT,AAAiB,UAAE,SAAF,AAAmB;;AAApD,AAAgB,uCAChB;AAAM,wBAAc;yBAEpB;AAAI,AAAW,2BAAf,AAAuB,AAAU,AAC/B;AAL+B,AAEjC,AAAgB,AAAa,AAAU,AACvC,SADgB;;AAKK,gCAFZ,AAAgB,AAGpB,AACD;AAJqB,AACd,AAAQ,AACf;AAFK,AAAS,AAAO,AACrB;iBAEC,AACK,AACgB;AADhB,AACJ;AALG,AAOJ,AACD;AADC,AACM;AART,AAAO,AAUR,AACF;AArCwB,AAAU,AAAS,AAC5C;AAqCD,eAvCI,AAAgB,AA0CvB,AAAO,AAAQ","file":"/imports/plugins/core/shipping/server/methods/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Shipping, Packages } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\nimport { shippingRoles } from \"../lib/roles\";\n\nexport const methods = {\n  \"shipping/status/refresh\": function (orderId) {\n    check(orderId, String);\n    // this is a stub for future core processing\n    // it also serves as a place for Method Hooks\n    // in other shipping packages, like Shippo\n    return orderId;\n  },\n  /**\n   * shipping/provider/toggle\n   * @summary toggle enabled provider\n   * @param { String } packageId - packageId\n   * @param { String } provider - provider name\n   * @return { Number } update - result\n   */\n  \"shipping/provider/toggle\": function (packageId, provider) {\n    check(packageId, String);\n    check(provider, String);\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    const pkg = Packages.findOne(packageId);\n    if (pkg && pkg.settings[provider]) {\n      const current = Shipping.findOne({ \"provider.name\": provider });\n      const enabled = pkg.settings[provider].enabled;\n      // const enabled = !current.provider.enabled;\n      if (current && current.provider) {\n        return Shipping.update({\n          \"_id\": current._id,\n          \"provider.name\": provider\n        }, {\n          $set: {\n            \"provider.enabled\": enabled\n          }\n        }, {\n          multi: true\n        });\n      }\n    }\n  }\n};\n\nMeteor.methods(methods);\n"]},"hash":"f6e268317c698096cbdbd6aae5023ba1619fd076"}
