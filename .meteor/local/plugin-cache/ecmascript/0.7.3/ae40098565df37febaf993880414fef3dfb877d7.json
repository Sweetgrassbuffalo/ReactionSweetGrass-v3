{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/http","imported":["HTTP"],"specifiers":[{"kind":"named","imported":"HTTP","local":"HTTP"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/taxes-taxcloud/server/methods/methods.js","filenameRelative":"/imports/plugins/included/taxes-taxcloud/server/methods/methods.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/taxes-taxcloud/server/methods/methods.js"],"names":["Meteor","HTTP","methods","taxCodeArray","TAXCODE_SRC","taxCodes","get","data","tic_list","forEach","code","tic","children","child","push","Error"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;GACA,AAAS,AAAT,AAAqB,AAArB,AAEA,AAAO,AAAP,AAAe;AACb;AAQA,AAAwB,AAAY,AAClC,AAAM,AAAe,AAArB,AACA;;;;;;;KAAM,AAAc,oCAApB,AACA;QAAM,AAAW,eAAK,AAAL,AAAS,AAAT,AAAjB;sBAEA;AAAI,QAAJ,AAAc,oBACZ,AAAS,AAAT,AAAc,AAAd,AAAuB,AAAvB,AAA+B,AAAU,AAAV,AAAgB,AAC7C;;QAAI,AAAK,UAAL,AAAS,AAAb,AAAuB,AACrB;eAAK,AAAL,AAAS,KAAT,AAAkB,SAAlB,AAA0B,QAAU,UAAV,MAAiB,AACzC;qBAAa,AAAb,AAAkB,UAAM,AAAxB,AACD;AAFD,qDAGD;;AACD;AAAa,AAAb,AAAkB,AAAK,AAAvB,AACD,AAPD;;+BAQA;AAAO,AAAP,AACD;;AACD;;UAAM,IAAI,OAAO,AAAX,MAAiB,AAAjB,AAAN,AACD;AA1BY,AAAf","file":"/imports/plugins/included/taxes-taxcloud/server/methods/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { HTTP } from \"meteor/http\";\n\nMeteor.methods({\n  /**\n   * We're using https://taxcloud.net\n   * just to get an intial import data set\n   * this service doesn't require taxcloud id\n   * but other services need authorization\n   * use TAXCODE_SRC  to override source url\n   * @returns {Array} An array of Tax code objects\n   */\n  \"taxcloud/getTaxCodes\": function () {\n    const taxCodeArray = [];\n    const TAXCODE_SRC = \"https://taxcloud.net/tic/?format=json\";\n    const taxCodes = HTTP.get(TAXCODE_SRC);\n\n    if (taxCodes) {\n      taxCodes.data.tic_list.forEach(function (code) {\n        if (code.tic.children) {\n          code.tic.children.forEach(function (child) {\n            taxCodeArray.push(child.tic);\n          });\n        }\n        taxCodeArray.push(code.tic);\n      });\n      return taxCodeArray;\n    }\n    throw new Meteor.Error(\"Error getting tax codes\");\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/taxes-taxcloud/server/methods/methods.js.map","sourceFileName":"/imports/plugins/included/taxes-taxcloud/server/methods/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar HTTP = void 0;\nmodule.importSync(\"meteor/http\", {\n  HTTP: function (v) {\n    HTTP = v;\n  }\n}, 1);\nMeteor.methods({\n  /**\n   * We're using https://taxcloud.net\n   * just to get an intial import data set\n   * this service doesn't require taxcloud id\n   * but other services need authorization\n   * use TAXCODE_SRC  to override source url\n   * @returns {Array} An array of Tax code objects\n   */\"taxcloud/getTaxCodes\": function () {\n    var taxCodeArray = [];\n    var TAXCODE_SRC = \"https://taxcloud.net/tic/?format=json\";\n    var taxCodes = HTTP.get(TAXCODE_SRC);\n\n    if (taxCodes) {\n      taxCodes.data.tic_list.forEach(function (code) {\n        if (code.tic.children) {\n          code.tic.children.forEach(function (child) {\n            taxCodeArray.push(child.tic);\n          });\n        }\n\n        taxCodeArray.push(code.tic);\n      });\n      return taxCodeArray;\n    }\n\n    throw new Meteor.Error(\"Error getting tax codes\");\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/taxes-taxcloud/server/methods/methods.js"],"names":["Meteor","HTTP","methods","taxCodeArray","TAXCODE_SRC","taxCodes","get","data","tic_list","forEach","code","tic","children","child","push","Error"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;GACA,AAAS,AAAT,AAAqB,AAArB,AAEA,AAAO,AAAP,AAAe;AACb;AAQA,AAAwB,AAAY,AAClC,AAAM,AAAe,AAArB,AACA;;;;;;;KAAM,AAAc,oCAApB,AACA;QAAM,AAAW,eAAK,AAAL,AAAS,AAAT,AAAjB;sBAEA;AAAI,QAAJ,AAAc,oBACZ,AAAS,AAAT,AAAc,AAAd,AAAuB,AAAvB,AAA+B,AAAU,AAAV,AAAgB,AAC7C;;QAAI,AAAK,UAAL,AAAS,AAAb,AAAuB,AACrB;eAAK,AAAL,AAAS,KAAT,AAAkB,SAAlB,AAA0B,QAAU,UAAV,MAAiB,AACzC;qBAAa,AAAb,AAAkB,UAAM,AAAxB,AACD;AAFD,qDAGD;;AACD;AAAa,AAAb,AAAkB,AAAK,AAAvB,AACD,AAPD;;+BAQA;AAAO,AAAP,AACD;;AACD;;UAAM,IAAI,OAAO,AAAX,MAAiB,AAAjB,AAAN,AACD;AA1BY,AAAf","file":"/imports/plugins/included/taxes-taxcloud/server/methods/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { HTTP } from \"meteor/http\";\n\nMeteor.methods({\n  /**\n   * We're using https://taxcloud.net\n   * just to get an intial import data set\n   * this service doesn't require taxcloud id\n   * but other services need authorization\n   * use TAXCODE_SRC  to override source url\n   * @returns {Array} An array of Tax code objects\n   */\n  \"taxcloud/getTaxCodes\": function () {\n    const taxCodeArray = [];\n    const TAXCODE_SRC = \"https://taxcloud.net/tic/?format=json\";\n    const taxCodes = HTTP.get(TAXCODE_SRC);\n\n    if (taxCodes) {\n      taxCodes.data.tic_list.forEach(function (code) {\n        if (code.tic.children) {\n          code.tic.children.forEach(function (child) {\n            taxCodeArray.push(child.tic);\n          });\n        }\n        taxCodeArray.push(code.tic);\n      });\n      return taxCodeArray;\n    }\n    throw new Meteor.Error(\"Error getting tax codes\");\n  }\n});\n"]},"hash":"ae40098565df37febaf993880414fef3dfb877d7"}
