{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/isEmpty","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_isEmpty"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/session","imported":["Session"],"specifiers":[{"kind":"named","imported":"Session","local":"Session"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/lib/collections","imported":["Cart"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"}]},{"source":"../../../lib/paypalRestApi","imported":["PaypalClientAPI"],"specifiers":[{"kind":"named","imported":"PaypalClientAPI","local":"PaypalClientAPI"}]},{"source":"./checkoutButton.html","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/payments-paypal/client/templates/checkout/express/checkoutButton.js","filenameRelative":"/imports/plugins/included/payments-paypal/client/templates/checkout/express/checkoutButton.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-paypal/client/templates/checkout/express/checkoutButton.js"],"names":["Meteor","Session","Template","Cart","PaypalClientAPI","checkout","paypal","initXO","cart","findOne","undefined","call","_id","error","token","msg","i18next","t","Alerts","add","placement","closeFlow","url","urlPrefix","startFlow","expressCheckoutSettingsValid","settings","merchantId","mode","paypalCheckoutButton","onCreated","expressCheckoutSettings","set","load","state","ReactiveDict","setDefault","isConfigured","isLoading","onRendered","element","$","autorun","loaded","get","setup","environment","button","click","helpers","expressCheckoutEnabled","enabled","instance","equals","events"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBACA,A,AAAA,AAAS,AAAc,AACvB,AAAS,AAAe,AACxB,AAAS,AAAgB,AACzB,AAAS,AAAY,AACrB,AAAS,AAAuB,AAChC,AAAO,AAEP;;AAOA;;;;;IAIA,AAAS,AAAW,AAClB,AAAO,AAAS,AAChB,AAAM,AAAO,AAAK;;;2BAClB;AAAI,AAAC,SAAL,AAAW,SACT;MAAO,YAAP,AACD;;;WAED;AAAO,AAAO,AAAK,AAA2B,AAAK,AAAK,AAAU,AAAO,AAAO,AAC9E,AAAI,AAAO,AACT;;gBAAY,AAAC,KAAA,AAAU,AAAO,AAAM,2BAAQ,KAAhC,AAAqC,KAAM,UAAA,AAAQ,AAAE,cAAjE,AAAuD,AAA6C,AACpG;QAAO,OAAP,AAAW,AAAK,AAAU,AACxB;iBAAW,uFADa;AAA1B;AAGO,mBAAP,AAAO,AAAO,AAAS,AACxB;AADC;6BAEF;AAAA,AAAM,AAAM,AAAO,AAAS,AAAY,AACxC;;QAAO,MAAO,OAAP,AAAgB,SAAvB,AAAO,AAA0B,YAT5B,AAUN;AAVD,qCAWD,AAED,A;GAXY;EAgBZ,AAAS,AAA6B,AAAU,AAC9C,AAAO,AAAU,AAAS,AAAgB,AAAS,AAAU,AAAS,AAAU;;;;;;AAGlF,A,AAFC;;EAOD,AAAS,AAAqB,AAAU,AAAY,AAClD,AAAO,AAAK,AAA8B,AAAU,AAAO,AAAyB,AAClF,AAAI,AAAC,AAAO;;;;;;AACV,SAAO,AAAQ,AAAI,+BAAZ,YAAP,AAAO,AAAuC,AAC/C;sFAHH,AAIC;gBACD;aAAgB,QAAhB,+BACA;AAAA,AAAK,AAAQ,AAAI,AACjB;AAAA,AAAK,AAAM,AAAW,AACpB;kBADoB,AACN,AACd;eAAW,IAFS;AAAtB;AAMF;;AAdA,AAYC,A;IAOD,AAAS,AAAqB,AAAW,AAAY,AACnD,AAAM,AAAU,AAAK,AAAE,AAA+B,AAEtD,AAAK,AAAQ,AAAM,AACjB,AAAI,AAAgB,AAAU,AAC5B,AAAM,AAA0B,AAAQ,AAAI;;;;;;AAC5C;;MAAI,iBAA6B,+BAAjC,AAAI,AAAuD,AACzD,AACA;2BACA;QAAA,AAAO,gBAAP,AAAgB,AAAM,UAAtB,AAA8C,AAAY,AACxD;UAAa,kCAAwB,IADmB,AAExD;;UAFwD,AAEhD,uDACP;AACD;AAJwD,AAIjD,AAAY,AAAE;AAJvB;AAMA,AAAK,AAAM,uBAAX,AAAe,AAAa,wBAT9B,AAUC;AAAM,kBACL;AAAA,AAAK,AAAM,AAAI,AAAgB,AAC/B;AAAK,iBAAL,AAAW,AAAI,aAdnB,AAcI,AAA4B,AAC7B,AACF;AALG;;AAKG,qCACL;AAAK,aAAL,AAAW,AAAI,AAAa,AAC7B;wCAnBH,AAoBC;;qCAvBH,AAwBC,A,AAED;;;mCAGA;AAAA,AAAS,AAAqB,AAAQ,AACpC;AAAwB,AAAY,AAClC;AAAA,AAAM,AAA0B,AAAQ,AAAI,AAC5C,AAAO,AAA4B,AAAY,AAAwB,AAAU,AAAK,IAHpD,AAInC,AACD;;;;;;AAKA,WAAe,+EACb;AAAA,AAAO,AAAS,AAAW,AAAM,AAAO,AAAgB,AACzD;AAZH,AAAsC,A,AAetC,AAGA;;;;KAAS,0BAAT,AAA8B,AAAO,AAEnC;;AAIA,AAAsC;IACpC,AAAO,AACR;;;AARH,AAAqC","file":"/imports/plugins/included/payments-paypal/client/templates/checkout/express/checkoutButton.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Session } from \"meteor/session\";\nimport { Template } from \"meteor/templating\";\nimport { Cart } from \"/lib/collections\";\nimport { PaypalClientAPI } from \"../../../lib/paypalRestApi\";\nimport \"./checkoutButton.html\";\n\n/**\n * PayPal Checkout Button\n *\n * This is the PayPal Express Checkout button that displays opens a popup,\n * provided by paypal.\n */\n\n/**\n * Checkout - Open PayPal Express popup\n * @return {undefined} no return value\n */\nfunction checkout() {\n  paypal.checkout.initXO();\n  const cart = Cart.findOne();\n  if (!cart) {\n    return undefined;\n  }\n\n  return Meteor.call(\"getExpressCheckoutToken\", cart._id, function (error, token) {\n    if (error) {\n      const msg = (error !== null ? error.error : void 0) || i18next.t(\"checkoutPayment.processingError\", \"There was a problem with your payment.\");\n      Alerts.add(msg, \"danger\", {\n        placement: \"paymentMethod\"\n      });\n      return paypal.checkout.closeFlow();\n    }\n    const url = paypal.checkout.urlPrefix + token;\n    return paypal.checkout.startFlow(url);\n  });\n}\n\n/**\n * Validate express checkout settings object\n * @param  {Object} settings Object containing \"merchantId\" and \"mode\":\n * @return {Boolean} true if valid, false otherwise\n */\nfunction expressCheckoutSettingsValid(settings) {\n  return _.isEmpty(settings.merchantId) === false && _.isEmpty(settings.mode) === false;\n}\n\n/**\n * PayPal checkout onCreate\n * @param  {Function} function to execute when template is created\n * @return {undefined} no return value\n */\nTemplate.paypalCheckoutButton.onCreated(function () {\n  Meteor.call(\"getExpressCheckoutSettings\", function (error, expressCheckoutSettings) {\n    if (!error) {\n      return Session.set(\"expressCheckoutSettings\", expressCheckoutSettings);\n    }\n  });\n  PaypalClientAPI.load();\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isConfigured: true,\n    isLoading: true\n  });\n});\n\n/**\n * PayPal checkout onRendered\n * @param  {Function} function to execute when template is rendered\n * @return {undefined} no return value\n */\nTemplate.paypalCheckoutButton.onRendered(function () {\n  const element = this.$(\".js-paypal-express-checkout\")[0];\n\n  this.autorun(() => {\n    if (PaypalClientAPI.loaded()) {\n      const expressCheckoutSettings = Session.get(\"expressCheckoutSettings\");\n      if (expressCheckoutSettingsValid(expressCheckoutSettings)) {\n        // setup paypal button for this checkout\n        // gives nada back to us?\n        paypal.checkout.setup(expressCheckoutSettings.merchantId, {\n          environment: expressCheckoutSettings.mode,\n          button: element,\n           // Blank function to disable default paypal onClick functionality\n          click: function () {}\n        });\n        this.state.set(\"isLoading\", false);\n      } else {\n        this.state.set(\"isConfigured\", false);\n        this.state.set(\"isLoading\", false);\n      }\n    } else {\n      this.state.set(\"isLoading\", true);\n    }\n  });\n});\n\n/**\n * PayPal checkout button helpers\n */\nTemplate.paypalCheckoutButton.helpers({\n  expressCheckoutEnabled: function () {\n    const expressCheckoutSettings = Session.get(\"expressCheckoutSettings\");\n    return expressCheckoutSettings !== undefined ? expressCheckoutSettings.enabled : void 0;\n  },\n  /**\n   * Check for proper configuration of PayPal Express Checkout settings.\n   * This function only validates that the required settings exist and are not empty.\n   * @return {Boolean} true if properly configured, false otherwise\n   */\n  isConfigured() {\n    return Template.instance().state.equals(\"isConfigured\", true);\n  }\n});\n\n/**\n * PayPal checkout button events\n */\nTemplate.paypalCheckoutButton.events({\n\n  /**\n   * Click Event: Express Checkout Button\n   * @return {undefined} no return value\n   */\n  \"click .js-paypal-express-checkout\"() {\n    return checkout();\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-paypal/client/templates/checkout/express/checkoutButton.js.map","sourceFileName":"/imports/plugins/included/payments-paypal/client/templates/checkout/express/checkoutButton.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"checkoutButton"},"ignored":false,"code":"var _isEmpty = void 0;\n\nmodule.importSync(\"lodash/isEmpty\", {\n  \"default\": function (v) {\n    _isEmpty = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Session = void 0;\nmodule.importSync(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 2);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 3);\nvar Cart = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  }\n}, 4);\nvar PaypalClientAPI = void 0;\nmodule.importSync(\"../../../lib/paypalRestApi\", {\n  PaypalClientAPI: function (v) {\n    PaypalClientAPI = v;\n  }\n}, 5);\nmodule.importSync(\"./checkoutButton.html\");\n\n/**\n * PayPal Checkout Button\n *\n * This is the PayPal Express Checkout button that displays opens a popup,\n * provided by paypal.\n */ /**\n     * Checkout - Open PayPal Express popup\n     * @return {undefined} no return value\n     */function checkout() {\n  paypal.checkout.initXO();\n  var cart = Cart.findOne();\n\n  if (!cart) {\n    return undefined;\n  }\n\n  return Meteor.call(\"getExpressCheckoutToken\", cart._id, function (error, token) {\n    if (error) {\n      var msg = (error !== null ? error.error : void 0) || i18next.t(\"checkoutPayment.processingError\", \"There was a problem with your payment.\");\n      Alerts.add(msg, \"danger\", {\n        placement: \"paymentMethod\"\n      });\n      return paypal.checkout.closeFlow();\n    }\n\n    var url = paypal.checkout.urlPrefix + token;\n    return paypal.checkout.startFlow(url);\n  });\n} /**\n   * Validate express checkout settings object\n   * @param  {Object} settings Object containing \"merchantId\" and \"mode\":\n   * @return {Boolean} true if valid, false otherwise\n   */\n\nfunction expressCheckoutSettingsValid(settings) {\n  return _isEmpty(settings.merchantId) === false && _isEmpty(settings.mode) === false;\n} /**\n   * PayPal checkout onCreate\n   * @param  {Function} function to execute when template is created\n   * @return {undefined} no return value\n   */\n\nTemplate.paypalCheckoutButton.onCreated(function () {\n  Meteor.call(\"getExpressCheckoutSettings\", function (error, expressCheckoutSettings) {\n    if (!error) {\n      return Session.set(\"expressCheckoutSettings\", expressCheckoutSettings);\n    }\n  });\n  PaypalClientAPI.load();\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isConfigured: true,\n    isLoading: true\n  });\n}); /**\n     * PayPal checkout onRendered\n     * @param  {Function} function to execute when template is rendered\n     * @return {undefined} no return value\n     */\nTemplate.paypalCheckoutButton.onRendered(function () {\n  var _this = this;\n\n  var element = this.$(\".js-paypal-express-checkout\")[0];\n  this.autorun(function () {\n    if (PaypalClientAPI.loaded()) {\n      var expressCheckoutSettings = Session.get(\"expressCheckoutSettings\");\n\n      if (expressCheckoutSettingsValid(expressCheckoutSettings)) {\n        // setup paypal button for this checkout\n        // gives nada back to us?\n        paypal.checkout.setup(expressCheckoutSettings.merchantId, {\n          environment: expressCheckoutSettings.mode,\n          button: element,\n          // Blank function to disable default paypal onClick functionality\n          click: function () {}\n        });\n\n        _this.state.set(\"isLoading\", false);\n      } else {\n        _this.state.set(\"isConfigured\", false);\n\n        _this.state.set(\"isLoading\", false);\n      }\n    } else {\n      _this.state.set(\"isLoading\", true);\n    }\n  });\n}); /**\n     * PayPal checkout button helpers\n     */\nTemplate.paypalCheckoutButton.helpers({\n  expressCheckoutEnabled: function () {\n    var expressCheckoutSettings = Session.get(\"expressCheckoutSettings\");\n    return expressCheckoutSettings !== undefined ? expressCheckoutSettings.enabled : void 0;\n  },\n  /**\n   * Check for proper configuration of PayPal Express Checkout settings.\n   * This function only validates that the required settings exist and are not empty.\n   * @return {Boolean} true if properly configured, false otherwise\n   */isConfigured: function () {\n    return Template.instance().state.equals(\"isConfigured\", true);\n  }\n}); /**\n     * PayPal checkout button events\n     */\nTemplate.paypalCheckoutButton.events({\n  /**\n   * Click Event: Express Checkout Button\n   * @return {undefined} no return value\n   */\"click .js-paypal-express-checkout\": function () {\n    return checkout();\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/payments-paypal/client/templates/checkout/express/checkoutButton.js"],"names":["Meteor","Session","Template","Cart","PaypalClientAPI","checkout","paypal","initXO","cart","findOne","undefined","call","_id","error","token","msg","i18next","t","Alerts","add","placement","closeFlow","url","urlPrefix","startFlow","expressCheckoutSettingsValid","settings","merchantId","mode","paypalCheckoutButton","onCreated","expressCheckoutSettings","set","load","state","ReactiveDict","setDefault","isConfigured","isLoading","onRendered","element","$","autorun","loaded","get","setup","environment","button","click","helpers","expressCheckoutEnabled","enabled","instance","equals","events"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBACA,A,AAAA,AAAS,AAAc,AACvB,AAAS,AAAe,AACxB,AAAS,AAAgB,AACzB,AAAS,AAAY,AACrB,AAAS,AAAuB,AAChC,AAAO,AAEP;;AAOA;;;;;IAIA,AAAS,AAAW,AAClB,AAAO,AAAS,AAChB,AAAM,AAAO,AAAK;;;2BAClB;AAAI,AAAC,SAAL,AAAW,SACT;MAAO,YAAP,AACD;;;WAED;AAAO,AAAO,AAAK,AAA2B,AAAK,AAAK,AAAU,AAAO,AAAO,AAC9E,AAAI,AAAO,AACT;;gBAAY,AAAC,KAAA,AAAU,AAAO,AAAM,2BAAQ,KAAhC,AAAqC,KAAM,UAAA,AAAQ,AAAE,cAAjE,AAAuD,AAA6C,AACpG;QAAO,OAAP,AAAW,AAAK,AAAU,AACxB;iBAAW,uFADa;AAA1B;AAGO,mBAAP,AAAO,AAAO,AAAS,AACxB;AADC;6BAEF;AAAA,AAAM,AAAM,AAAO,AAAS,AAAY,AACxC;;QAAO,MAAO,OAAP,AAAgB,SAAvB,AAAO,AAA0B,YAT5B,AAUN;AAVD,qCAWD,AAED,A;GAXY;EAgBZ,AAAS,AAA6B,AAAU,AAC9C,AAAO,AAAU,AAAS,AAAgB,AAAS,AAAU,AAAS,AAAU;;;;;;AAGlF,A,AAFC;;EAOD,AAAS,AAAqB,AAAU,AAAY,AAClD,AAAO,AAAK,AAA8B,AAAU,AAAO,AAAyB,AAClF,AAAI,AAAC,AAAO;;;;;;AACV,SAAO,AAAQ,AAAI,+BAAZ,YAAP,AAAO,AAAuC,AAC/C;sFAHH,AAIC;gBACD;aAAgB,QAAhB,+BACA;AAAA,AAAK,AAAQ,AAAI,AACjB;AAAA,AAAK,AAAM,AAAW,AACpB;kBADoB,AACN,AACd;eAAW,IAFS;AAAtB;AAMF;;AAdA,AAYC,A;IAOD,AAAS,AAAqB,AAAW,AAAY,AACnD,AAAM,AAAU,AAAK,AAAE,AAA+B,AAEtD,AAAK,AAAQ,AAAM,AACjB,AAAI,AAAgB,AAAU,AAC5B,AAAM,AAA0B,AAAQ,AAAI;;;;;;AAC5C;;MAAI,iBAA6B,+BAAjC,AAAI,AAAuD,AACzD,AACA;2BACA;QAAA,AAAO,gBAAP,AAAgB,AAAM,UAAtB,AAA8C,AAAY,AACxD;UAAa,kCAAwB,IADmB,AAExD;;UAFwD,AAEhD,uDACP;AACD;AAJwD,AAIjD,AAAY,AAAE;AAJvB;AAMA,AAAK,AAAM,uBAAX,AAAe,AAAa,wBAT9B,AAUC;AAAM,kBACL;AAAA,AAAK,AAAM,AAAI,AAAgB,AAC/B;AAAK,iBAAL,AAAW,AAAI,aAdnB,AAcI,AAA4B,AAC7B,AACF;AALG;;AAKG,qCACL;AAAK,aAAL,AAAW,AAAI,AAAa,AAC7B;wCAnBH,AAoBC;;qCAvBH,AAwBC,A,AAED;;;mCAGA;AAAA,AAAS,AAAqB,AAAQ,AACpC;AAAwB,AAAY,AAClC;AAAA,AAAM,AAA0B,AAAQ,AAAI,AAC5C,AAAO,AAA4B,AAAY,AAAwB,AAAU,AAAK,IAHpD,AAInC,AACD;;;;;;AAKA,WAAe,+EACb;AAAA,AAAO,AAAS,AAAW,AAAM,AAAO,AAAgB,AACzD;AAZH,AAAsC,A,AAetC,AAGA;;;;KAAS,0BAAT,AAA8B,AAAO,AAEnC;;AAIA,AAAsC;IACpC,AAAO,AACR;;;AARH,AAAqC","file":"/imports/plugins/included/payments-paypal/client/templates/checkout/express/checkoutButton.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Session } from \"meteor/session\";\nimport { Template } from \"meteor/templating\";\nimport { Cart } from \"/lib/collections\";\nimport { PaypalClientAPI } from \"../../../lib/paypalRestApi\";\nimport \"./checkoutButton.html\";\n\n/**\n * PayPal Checkout Button\n *\n * This is the PayPal Express Checkout button that displays opens a popup,\n * provided by paypal.\n */\n\n/**\n * Checkout - Open PayPal Express popup\n * @return {undefined} no return value\n */\nfunction checkout() {\n  paypal.checkout.initXO();\n  const cart = Cart.findOne();\n  if (!cart) {\n    return undefined;\n  }\n\n  return Meteor.call(\"getExpressCheckoutToken\", cart._id, function (error, token) {\n    if (error) {\n      const msg = (error !== null ? error.error : void 0) || i18next.t(\"checkoutPayment.processingError\", \"There was a problem with your payment.\");\n      Alerts.add(msg, \"danger\", {\n        placement: \"paymentMethod\"\n      });\n      return paypal.checkout.closeFlow();\n    }\n    const url = paypal.checkout.urlPrefix + token;\n    return paypal.checkout.startFlow(url);\n  });\n}\n\n/**\n * Validate express checkout settings object\n * @param  {Object} settings Object containing \"merchantId\" and \"mode\":\n * @return {Boolean} true if valid, false otherwise\n */\nfunction expressCheckoutSettingsValid(settings) {\n  return _.isEmpty(settings.merchantId) === false && _.isEmpty(settings.mode) === false;\n}\n\n/**\n * PayPal checkout onCreate\n * @param  {Function} function to execute when template is created\n * @return {undefined} no return value\n */\nTemplate.paypalCheckoutButton.onCreated(function () {\n  Meteor.call(\"getExpressCheckoutSettings\", function (error, expressCheckoutSettings) {\n    if (!error) {\n      return Session.set(\"expressCheckoutSettings\", expressCheckoutSettings);\n    }\n  });\n  PaypalClientAPI.load();\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isConfigured: true,\n    isLoading: true\n  });\n});\n\n/**\n * PayPal checkout onRendered\n * @param  {Function} function to execute when template is rendered\n * @return {undefined} no return value\n */\nTemplate.paypalCheckoutButton.onRendered(function () {\n  const element = this.$(\".js-paypal-express-checkout\")[0];\n\n  this.autorun(() => {\n    if (PaypalClientAPI.loaded()) {\n      const expressCheckoutSettings = Session.get(\"expressCheckoutSettings\");\n      if (expressCheckoutSettingsValid(expressCheckoutSettings)) {\n        // setup paypal button for this checkout\n        // gives nada back to us?\n        paypal.checkout.setup(expressCheckoutSettings.merchantId, {\n          environment: expressCheckoutSettings.mode,\n          button: element,\n           // Blank function to disable default paypal onClick functionality\n          click: function () {}\n        });\n        this.state.set(\"isLoading\", false);\n      } else {\n        this.state.set(\"isConfigured\", false);\n        this.state.set(\"isLoading\", false);\n      }\n    } else {\n      this.state.set(\"isLoading\", true);\n    }\n  });\n});\n\n/**\n * PayPal checkout button helpers\n */\nTemplate.paypalCheckoutButton.helpers({\n  expressCheckoutEnabled: function () {\n    const expressCheckoutSettings = Session.get(\"expressCheckoutSettings\");\n    return expressCheckoutSettings !== undefined ? expressCheckoutSettings.enabled : void 0;\n  },\n  /**\n   * Check for proper configuration of PayPal Express Checkout settings.\n   * This function only validates that the required settings exist and are not empty.\n   * @return {Boolean} true if properly configured, false otherwise\n   */\n  isConfigured() {\n    return Template.instance().state.equals(\"isConfigured\", true);\n  }\n});\n\n/**\n * PayPal checkout button events\n */\nTemplate.paypalCheckoutButton.events({\n\n  /**\n   * Click Event: Express Checkout Button\n   * @return {undefined} no return value\n   */\n  \"click .js-paypal-express-checkout\"() {\n    return checkout();\n  }\n});\n"]},"hash":"015d822b8fc641a62639406c283f29d2922a7506"}
