{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"/lib/collections","imported":["Shipping","Packages"],"specifiers":[{"kind":"named","imported":"Shipping","local":"Shipping"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Logger","Reaction","Hooks"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Hooks","local":"Hooks"}]},{"source":"/lib/collections/schemas","imported":["Cart"],"specifiers":[{"kind":"named","imported":"Cart","local":"CartSchema"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/shipping-rates/server/hooks/hooks.js","filenameRelative":"/imports/plugins/included/shipping-rates/server/hooks/hooks.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/shipping-rates/server/hooks/hooks.js"],"names":["check","Shipping","Packages","Logger","Reaction","Hooks","Cart","CartSchema","getShippingRates","rates","cart","shops","products","items","pkgData","findOne","name","shopId","getShopId","settings","flatRates","enabled","selector","product","push","length","$in","shippingCollection","find","forEach","doc","_results","method","methods","rate","handling","carrier","provider","label","debug","Events","add"],"mappings":"AAAA,IAAS;AAAT,OAAsB,WAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G,AACA,AAAS,AAAU,AAAgB,AACnC,AAAS,AAAQ,AAAU,AAAa,AACxC,AAAS,AAAQ,AAAkB,AAEnC;;AACA,AAAS,AAAiB,AAAO,AAAM;AACrC,AAAM,SAAN,AAAY;QACN,MAAN,AAAc,AACd;MAAM,QAAN,AAAiB,AAAK,AAEtB;MAAM,AAAU,gBAAA,AAAS,AAAQ,AAC/B,AAAM,AACN;MAAQ,mBAAA;AAFV;qBAKA,AAAI,AAAC,AAAW,AAAC,AAAK,AAAS,AAAQ,AAAS,AAAU,AAAY,AAAM,AAC1E,AAAO,AACR;AAPe,AAAiB,GAEd;;AAPkB,AAcrC;;AACA,AAAI,AAAW,AACb,GAdF,CAae,AACH,AAAS,AACnB;;;;AAjBmC,AAoBrC,uBACA;wBACA,AAAK,AAAM,AAAW,AAAU,AAC9B;AARF,AAAe,AAEO,KAMpB,AAAI,AAAQ,AAAQ,AAClB;AAAA,AAAM,AAAK,AAAQ,AACpB;;;AAzBkC,AA0BpC;;;;;;;;;;;;;AACD;;AACA;AAAA,AAAI,AAAC,AAAU,AAAO,AAAM,AAAS,AAAK,AAAK,AAAG,AAChD,IAAW,AACT;;;OAAU,6CACR;AAAK;AAFE;aAAX,AAAW,AAIW,AAEvB;AAFG;0BAIJ;AAPc;AAOd,AAAM,AAAqB,AAAS,AAAK,AACzC,AAAmB,AAAQ,AAAU,AAAK,AACxC;;MAAA,AAAM,AAAW;4CACjB;AAAK,QAAM,WAAX,AAAqB,AAAI,AAAS,AAChC;;AAAI,AAAC,0BAAL,AAAqB;AACnB;;;;;;;;;;;UADU;;2BAEX;;AACD;;UAAI,CAAC,OAAL,AAAY,MAAM,AAChB;eAAA,AAAO,OAAP,AAAc,AACf;;;4BACD;AAAI,AAAC,eAAO,WAAZ,AAAsB,AACpB;AAAA,AAAO,AAAW,AACnB,QAT+B,AAUhC,AACA;;;;;sCACA;AAAA,AAAI,AAAC,AAAO,AAAS,AACnB;;UAAO,OAAP,AAAiB,OAAI,OAAJ,AAAa,OAA9B,AACD;;;AACK,iBAAO,IAAA,AAAO,SAApB,AAA2B,AAAO;gBAClC;AAAS,cAAT,AACE,AAAM,AAAK,AACT;AAAS,gBAAI,IADJ,AACA,AAAa,AACtB,AAAQ,AACR,AAAM,AACN;AANJ;AAEa,AAID,AAAI;;AALhB,AACE,WAOH;AACD;SAAO,MAAP,gCACD;AA5BD,SA8BA;AAAA,AAAO,AAAM,AAAgC,EAC7C,AAAO;;;AACR,A,AACD,uCACA,AAAM,AAAO,AAAI,AAAsB","file":"/imports/plugins/included/shipping-rates/server/hooks/hooks.js.map","sourcesContent":["import { check } from \"meteor/check\";\nimport { Shipping, Packages } from \"/lib/collections\";\nimport { Logger, Reaction, Hooks } from \"/server/api\";\nimport { Cart as CartSchema } from \"/lib/collections/schemas\";\n\n// callback ran on getShippingRates hook\nfunction getShippingRates(rates, cart) {\n  check(cart, CartSchema);\n  const shops = [];\n  const products = cart.items;\n\n  const pkgData = Packages.findOne({\n    name: \"reaction-shipping-rates\",\n    shopId: Reaction.getShopId()\n  });\n\n  if (!pkgData || !cart.items || pkgData.settings.flatRates.enabled !== true) {\n    return rates;\n  }\n\n  // default selector is current shop\n  let selector = {\n    \"shopId\": Reaction.getShopId(),\n    \"provider.enabled\": true\n  };\n\n  // create an array of shops, allowing\n  // the cart to have products from multiple shops\n  for (const product of products) {\n    if (product.shopId) {\n      shops.push(product.shopId);\n    }\n  }\n  // if we have multiple shops in cart\n  if ((shops !== null ? shops.length : void 0) > 0) {\n    selector = {\n      \"shopId\": {\n        $in: shops\n      },\n      \"provider.enabled\": true\n    };\n  }\n\n  const shippingCollection = Shipping.find(selector);\n  shippingCollection.forEach(function (doc) {\n    const _results = [];\n    for (const method of doc.methods) {\n      if (!method.enabled) {\n        continue;\n      }\n      if (!method.rate) {\n        method.rate = 0;\n      }\n      if (!method.handling) {\n        method.handling = 0;\n      }\n      // Store shipping provider here in order to have it available in shipmentMethod\n      // for cart and order usage\n      if (!method.carrier) {\n        method.carrier = doc.provider.label;\n      }\n      const rate = method.rate + method.handling;\n      _results.push(\n        rates.push({\n          carrier: doc.provider.label,\n          method: method,\n          rate: rate,\n          shopId: doc.shopId\n        })\n      );\n    }\n    return _results;\n  });\n\n  Logger.debug(\"Flat rate onGetShippingRates\", rates);\n  return rates;\n}\n// run getShippingRates when the onGetShippingRates event runs\nHooks.Events.add(\"onGetShippingRates\", getShippingRates);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/shipping-rates/server/hooks/hooks.js.map","sourceFileName":"/imports/plugins/included/shipping-rates/server/hooks/hooks.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"hooks"},"ignored":false,"code":"var check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 0);\nvar Shipping = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shipping: function (v) {\n    Shipping = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 1);\nvar Logger = void 0,\n    Reaction = void 0,\n    Hooks = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Hooks: function (v) {\n    Hooks = v;\n  }\n}, 2);\nvar CartSchema = void 0;\nmodule.importSync(\"/lib/collections/schemas\", {\n  Cart: function (v) {\n    CartSchema = v;\n  }\n}, 3);\n\n// callback ran on getShippingRates hook\nfunction getShippingRates(rates, cart) {\n  check(cart, CartSchema);\n  var shops = [];\n  var products = cart.items;\n  var pkgData = Packages.findOne({\n    name: \"reaction-shipping-rates\",\n    shopId: Reaction.getShopId()\n  });\n\n  if (!pkgData || !cart.items || pkgData.settings.flatRates.enabled !== true) {\n    return rates;\n  } // default selector is current shop\n\n\n  var selector = {\n    \"shopId\": Reaction.getShopId(),\n    \"provider.enabled\": true\n  }; // create an array of shops, allowing\n  // the cart to have products from multiple shops\n\n  for (var _iterator = products, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var product = _ref;\n\n    if (product.shopId) {\n      shops.push(product.shopId);\n    }\n  } // if we have multiple shops in cart\n\n\n  if ((shops !== null ? shops.length : void 0) > 0) {\n    selector = {\n      \"shopId\": {\n        $in: shops\n      },\n      \"provider.enabled\": true\n    };\n  }\n\n  var shippingCollection = Shipping.find(selector);\n  shippingCollection.forEach(function (doc) {\n    var _results = [];\n\n    for (var _iterator2 = doc.methods, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var method = _ref2;\n\n      if (!method.enabled) {\n        continue;\n      }\n\n      if (!method.rate) {\n        method.rate = 0;\n      }\n\n      if (!method.handling) {\n        method.handling = 0;\n      } // Store shipping provider here in order to have it available in shipmentMethod\n      // for cart and order usage\n\n\n      if (!method.carrier) {\n        method.carrier = doc.provider.label;\n      }\n\n      var rate = method.rate + method.handling;\n\n      _results.push(rates.push({\n        carrier: doc.provider.label,\n        method: method,\n        rate: rate,\n        shopId: doc.shopId\n      }));\n    }\n\n    return _results;\n  });\n  Logger.debug(\"Flat rate onGetShippingRates\", rates);\n  return rates;\n} // run getShippingRates when the onGetShippingRates event runs\n\n\nHooks.Events.add(\"onGetShippingRates\", getShippingRates);","map":{"version":3,"sources":["/imports/plugins/included/shipping-rates/server/hooks/hooks.js"],"names":["check","Shipping","Packages","Logger","Reaction","Hooks","Cart","CartSchema","getShippingRates","rates","cart","shops","products","items","pkgData","findOne","name","shopId","getShopId","settings","flatRates","enabled","selector","product","push","length","$in","shippingCollection","find","forEach","doc","_results","method","methods","rate","handling","carrier","provider","label","debug","Events","add"],"mappings":"AAAA,IAAS;AAAT,OAAsB,WAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G,AACA,AAAS,AAAU,AAAgB,AACnC,AAAS,AAAQ,AAAU,AAAa,AACxC,AAAS,AAAQ,AAAkB,AAEnC;;AACA,AAAS,AAAiB,AAAO,AAAM;AACrC,AAAM,SAAN,AAAY;QACN,MAAN,AAAc,AACd;MAAM,QAAN,AAAiB,AAAK,AAEtB;MAAM,AAAU,gBAAA,AAAS,AAAQ,AAC/B,AAAM,AACN;MAAQ,mBAAA;AAFV;qBAKA,AAAI,AAAC,AAAW,AAAC,AAAK,AAAS,AAAQ,AAAS,AAAU,AAAY,AAAM,AAC1E,AAAO,AACR;AAPe,AAAiB,GAEd;;AAPkB,AAcrC;;AACA,AAAI,AAAW,AACb,GAdF,CAae,AACH,AAAS,AACnB;;;;AAjBmC,AAoBrC,uBACA;wBACA,AAAK,AAAM,AAAW,AAAU,AAC9B;AARF,AAAe,AAEO,KAMpB,AAAI,AAAQ,AAAQ,AAClB;AAAA,AAAM,AAAK,AAAQ,AACpB;;;AAzBkC,AA0BpC;;;;;;;;;;;;;AACD;;AACA;AAAA,AAAI,AAAC,AAAU,AAAO,AAAM,AAAS,AAAK,AAAK,AAAG,AAChD,IAAW,AACT;;;OAAU,6CACR;AAAK;AAFE;aAAX,AAAW,AAIW,AAEvB;AAFG;0BAIJ;AAPc;AAOd,AAAM,AAAqB,AAAS,AAAK,AACzC,AAAmB,AAAQ,AAAU,AAAK,AACxC;;MAAA,AAAM,AAAW;4CACjB;AAAK,QAAM,WAAX,AAAqB,AAAI,AAAS,AAChC;;AAAI,AAAC,0BAAL,AAAqB;AACnB;;;;;;;;;;;UADU;;2BAEX;;AACD;;UAAI,CAAC,OAAL,AAAY,MAAM,AAChB;eAAA,AAAO,OAAP,AAAc,AACf;;;4BACD;AAAI,AAAC,eAAO,WAAZ,AAAsB,AACpB;AAAA,AAAO,AAAW,AACnB,QAT+B,AAUhC,AACA;;;;;sCACA;AAAA,AAAI,AAAC,AAAO,AAAS,AACnB;;UAAO,OAAP,AAAiB,OAAI,OAAJ,AAAa,OAA9B,AACD;;;AACK,iBAAO,IAAA,AAAO,SAApB,AAA2B,AAAO;gBAClC;AAAS,cAAT,AACE,AAAM,AAAK,AACT;AAAS,gBAAI,IADJ,AACA,AAAa,AACtB,AAAQ,AACR,AAAM,AACN;AANJ;AAEa,AAID,AAAI;;AALhB,AACE,WAOH;AACD;SAAO,MAAP,gCACD;AA5BD,SA8BA;AAAA,AAAO,AAAM,AAAgC,EAC7C,AAAO;;;AACR,A,AACD,uCACA,AAAM,AAAO,AAAI,AAAsB","file":"/imports/plugins/included/shipping-rates/server/hooks/hooks.js.map","sourcesContent":["import { check } from \"meteor/check\";\nimport { Shipping, Packages } from \"/lib/collections\";\nimport { Logger, Reaction, Hooks } from \"/server/api\";\nimport { Cart as CartSchema } from \"/lib/collections/schemas\";\n\n// callback ran on getShippingRates hook\nfunction getShippingRates(rates, cart) {\n  check(cart, CartSchema);\n  const shops = [];\n  const products = cart.items;\n\n  const pkgData = Packages.findOne({\n    name: \"reaction-shipping-rates\",\n    shopId: Reaction.getShopId()\n  });\n\n  if (!pkgData || !cart.items || pkgData.settings.flatRates.enabled !== true) {\n    return rates;\n  }\n\n  // default selector is current shop\n  let selector = {\n    \"shopId\": Reaction.getShopId(),\n    \"provider.enabled\": true\n  };\n\n  // create an array of shops, allowing\n  // the cart to have products from multiple shops\n  for (const product of products) {\n    if (product.shopId) {\n      shops.push(product.shopId);\n    }\n  }\n  // if we have multiple shops in cart\n  if ((shops !== null ? shops.length : void 0) > 0) {\n    selector = {\n      \"shopId\": {\n        $in: shops\n      },\n      \"provider.enabled\": true\n    };\n  }\n\n  const shippingCollection = Shipping.find(selector);\n  shippingCollection.forEach(function (doc) {\n    const _results = [];\n    for (const method of doc.methods) {\n      if (!method.enabled) {\n        continue;\n      }\n      if (!method.rate) {\n        method.rate = 0;\n      }\n      if (!method.handling) {\n        method.handling = 0;\n      }\n      // Store shipping provider here in order to have it available in shipmentMethod\n      // for cart and order usage\n      if (!method.carrier) {\n        method.carrier = doc.provider.label;\n      }\n      const rate = method.rate + method.handling;\n      _results.push(\n        rates.push({\n          carrier: doc.provider.label,\n          method: method,\n          rate: rate,\n          shopId: doc.shopId\n        })\n      );\n    }\n    return _results;\n  });\n\n  Logger.debug(\"Flat rate onGetShippingRates\", rates);\n  return rates;\n}\n// run getShippingRates when the onGetShippingRates event runs\nHooks.Events.add(\"onGetShippingRates\", getShippingRates);\n"]},"hash":"c8876f03712d484af8d5423b46cd3482e3d82250"}
