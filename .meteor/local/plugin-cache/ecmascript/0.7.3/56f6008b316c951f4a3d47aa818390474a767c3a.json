{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"./workflow","imported":["Workflow"],"specifiers":[{"kind":"named","imported":"Workflow","local":"Workflow"}]}],"exports":{"exported":["Document","History","Notes","OrderItem","OrderTransaction","Order"],"specifiers":[{"kind":"local","local":"Document","exported":"Document"},{"kind":"local","local":"History","exported":"History"},{"kind":"local","local":"Notes","exported":"Notes"},{"kind":"local","local":"OrderItem","exported":"OrderItem"},{"kind":"local","local":"OrderTransaction","exported":"OrderTransaction"},{"kind":"local","local":"Order","exported":"Order"}]}}},"options":{"filename":"/lib/collections/schemas/orders.js","filenameRelative":"/lib/collections/schemas/orders.js","inputSourceMap":{"version":3,"sources":["/lib/collections/schemas/orders.js"],"names":["SimpleSchema","Workflow","Document","docId","type","String","docType","optional","History","event","value","userId","updatedAt","Date","Notes","content","OrderItem","additionalField","workflow","history","documents","OrderTransaction","itemId","paymentId","shipmentId","inventoryId","createdAt","autoValue","isUpdate","isSet","unset","denyUpdate","Order","unique","cartId","notes","items","transactions"],"mappings":"AAAA,OAAS;AAAT;WAA6B;;;;;AAA7B;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAET,AAIA,A,AANA,AAAyB,AAMlB,AAAM,AAAW,AAAI,AAAa,AACvC,AAAO,AACL,AAAM;;;UAEC,AACD,AACN,AAAU;AAFH,AACP;;AAKJ;cAIA,AAAO,AAAM,AAAU,AAAI,AAAa,AACtC,AAAO,AACL,AAAM,AAER,AAAO,AACL,AAAM;AAnBH,AAAiB,AAAiB,A;AAIvC;;;UAUsC,AAO9B,AACA,AAER;AAHQ,AACN;;UARmB,AAAiB,AAU3B,AACH;AADG,AACT;AAXG,AAeP,A;UAIA;;AAAO;UAA+B,AAC3B,AACP,AAAM,AAER,AAAQ,AACN,AAAM,AAER,AAAW,AACT,AAAM;AARG,AAAQ,AAAI,AAAa,AACpC;AAbA;;AAYK,A,AAYP;;;;AAIO,UAAM,AAAY,AAAI,AAAa,AACxC,AAAiB,AACf;AAFJ;AAEU;UAFgC,AACvB,AAEL,AAEZ,AAAU,AACR,AAAM,AACN,AAAU,AAEZ,AAAS,AACP,AAAM,AAAC,AACP;AAVe,AAEf;AAnBiB,AAAiB;IA2BxB;AAX4B;UAa7B,AACT;AAAM,AAAC,cADE,AACH,AACN,AAAU;AAFZ;;AAOF;;A,AApBO,AAAkB,AAAiB;;AAwBnC,WAAM,AAAmB,AAAI,AAAa,AAC/C;AAAQ,cAAA,AACN,AAAM,AACN;AAHJ;;WAKE;AAAW,cALoC,AAKpC,AACT,AAAM,AACN,AAAU,AAEZ,AAAY,AACV,AAAM,AACN,AAAU,AAEZ,AAAa,AACX;AAd6C,AACvC,AAEI;AAlBH;AA6BD,IADK;;UAIb;AAAW,cAAA,AACT,AAAM,AACN;AAnB6C,AAalC,AAED;;UAKR,AAAI,AAAK,AAAY,AAAC,AAAK,AAAO,AAChC;cAAA,AAAO,AAAI,AACZ;AAHQ,AAAY,AACrB;;UAGA,AAAK,AACN;AAPQ,cAAA,AAQT,AAAY;AAFV;;AAMN;cAGA;AAhCO,A,AAAyB,AAAiB;AAgC1C;UACG,AACN;AAAM,eADA,YAEN;UAAQ,8BAH0B,AAC5B;mBAIR;AAAQ,AACN;;AAAM,WADA,AAEN;AAPkC,AAK5B,AAEI;gBAPwB,AASpC,AAAS,AACP,AAAM,AAAC,AACP,AAAU,AAEZ,AAAW,AACT,AAAM,AAAC,AACP;AAfS,AAAQ,AAAI,AAAa,AACpC;AAlBE;IAgCU;AAfwB;AAiB7B,UACL;AAAM,AAAC,YADF,AACC,AACN,AAAU;AAFZ;AAjBoC;AAqB7B,UACL;AAAM,AAAC,cADF,AACC,AACN,AAAU;AAFZ;AArBoC;WAyBtB,AACZ;AAAM,AAAC,cADK,AACN,AACN,AAAU;AAFZ;;;;AAzBK,AAAc,AAAiB;;;;;;;;;;;;;AAazB","file":"/lib/collections/schemas/orders.js.map","sourcesContent":["import { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { Workflow } from \"./workflow\";\n\n/**\n * Order Document Schema\n */\n\nexport const Document = new SimpleSchema({\n  docId: {\n    type: String\n  },\n  docType: {\n    type: String,\n    optional: true\n  }\n});\n\n/**\n * Order History Schema\n */\n\nexport const History = new SimpleSchema({\n  event: {\n    type: String\n  },\n  value: {\n    type: String\n  },\n  userId: {\n    type: String\n  },\n  updatedAt: {\n    type: Date\n  }\n});\n\n/**\n * Order Notes Schema\n */\n\nexport const Notes = new SimpleSchema({\n  content: {\n    type: String\n  },\n  userId: {\n    type: String\n  },\n  updatedAt: {\n    type: Date\n  }\n});\n\n/**\n * OrderItems Schema\n * merges with Cart and Order to create Orders collection\n */\nexport const OrderItem = new SimpleSchema({\n  additionalField: {\n    type: String,\n    optional: true\n  },\n  workflow: {\n    type: Workflow,\n    optional: true\n  },\n  history: {\n    type: [History],\n    optional: true\n  },\n  documents: {\n    type: [Document],\n    optional: true\n  }\n});\n\n\n/**\n * OrderTransaction Schema\n * order transactions tie shipping, billing, and inventory transactions\n */\nexport const OrderTransaction = new SimpleSchema({\n  itemId: {\n    type: String,\n    optional: true\n  },\n  paymentId: {\n    type: String,\n    optional: true\n  },\n  shipmentId: {\n    type: String,\n    optional: true\n  },\n  inventoryId: {\n    type: String,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isUpdate && !this.isSet) {\n        return new Date;\n      }\n      this.unset();\n    },\n    denyUpdate: true\n  }\n});\n\n/**\n * Order Schema\n */\nexport const Order = new SimpleSchema({\n  userId: {\n    type: String,\n    unique: false\n  },\n  cartId: {\n    type: String,\n    optional: true\n  },\n  history: {\n    type: [History],\n    optional: true\n  },\n  documents: {\n    type: [Document],\n    optional: true\n  },\n  notes: {\n    type: [Notes],\n    optional: true\n  },\n  items: {\n    type: [OrderItem],\n    optional: true\n  },\n  transactions: {\n    type: [OrderTransaction],\n    optional: true\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/collections/schemas/orders.js.map","sourceFileName":"/lib/collections/schemas/orders.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"orders"},"ignored":false,"code":"module.export({\n  Document: function () {\n    return Document;\n  },\n  History: function () {\n    return History;\n  },\n  Notes: function () {\n    return Notes;\n  },\n  OrderItem: function () {\n    return OrderItem;\n  },\n  OrderTransaction: function () {\n    return OrderTransaction;\n  },\n  Order: function () {\n    return Order;\n  }\n});\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar Workflow = void 0;\nmodule.importSync(\"./workflow\", {\n  Workflow: function (v) {\n    Workflow = v;\n  }\n}, 1);\nvar Document = new SimpleSchema({\n  docId: {\n    type: String\n  },\n  docType: {\n    type: String,\n    optional: true\n  }\n});\nvar History = new SimpleSchema({\n  event: {\n    type: String\n  },\n  value: {\n    type: String\n  },\n  userId: {\n    type: String\n  },\n  updatedAt: {\n    type: Date\n  }\n});\nvar Notes = new SimpleSchema({\n  content: {\n    type: String\n  },\n  userId: {\n    type: String\n  },\n  updatedAt: {\n    type: Date\n  }\n});\nvar OrderItem = new SimpleSchema({\n  additionalField: {\n    type: String,\n    optional: true\n  },\n  workflow: {\n    type: Workflow,\n    optional: true\n  },\n  history: {\n    type: [History],\n    optional: true\n  },\n  documents: {\n    type: [Document],\n    optional: true\n  }\n});\nvar OrderTransaction = new SimpleSchema({\n  itemId: {\n    type: String,\n    optional: true\n  },\n  paymentId: {\n    type: String,\n    optional: true\n  },\n  shipmentId: {\n    type: String,\n    optional: true\n  },\n  inventoryId: {\n    type: String,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isUpdate && !this.isSet) {\n        return new Date();\n      }\n\n      this.unset();\n    },\n    denyUpdate: true\n  }\n});\nvar Order = new SimpleSchema({\n  userId: {\n    type: String,\n    unique: false\n  },\n  cartId: {\n    type: String,\n    optional: true\n  },\n  history: {\n    type: [History],\n    optional: true\n  },\n  documents: {\n    type: [Document],\n    optional: true\n  },\n  notes: {\n    type: [Notes],\n    optional: true\n  },\n  items: {\n    type: [OrderItem],\n    optional: true\n  },\n  transactions: {\n    type: [OrderTransaction],\n    optional: true\n  }\n});","map":{"version":3,"sources":["/lib/collections/schemas/orders.js"],"names":["SimpleSchema","Workflow","Document","docId","type","String","docType","optional","History","event","value","userId","updatedAt","Date","Notes","content","OrderItem","additionalField","workflow","history","documents","OrderTransaction","itemId","paymentId","shipmentId","inventoryId","createdAt","autoValue","isUpdate","isSet","unset","denyUpdate","Order","unique","cartId","notes","items","transactions"],"mappings":"AAAA,OAAS;AAAT;WAA6B;;;;;AAA7B;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAET,AAIA,A,AANA,AAAyB,AAMlB,AAAM,AAAW,AAAI,AAAa,AACvC,AAAO,AACL,AAAM;;;UAEC,AACD,AACN,AAAU;AAFH,AACP;;AAKJ;cAIA,AAAO,AAAM,AAAU,AAAI,AAAa,AACtC,AAAO,AACL,AAAM,AAER,AAAO,AACL,AAAM;AAnBH,AAAiB,AAAiB,A;AAIvC;;;UAUsC,AAO9B,AACA,AAER;AAHQ,AACN;;UARmB,AAAiB,AAU3B,AACH;AADG,AACT;AAXG,AAeP,A;UAIA;;AAAO;UAA+B,AAC3B,AACP,AAAM,AAER,AAAQ,AACN,AAAM,AAER,AAAW,AACT,AAAM;AARG,AAAQ,AAAI,AAAa,AACpC;AAbA;;AAYK,A,AAYP;;;;AAIO,UAAM,AAAY,AAAI,AAAa,AACxC,AAAiB,AACf;AAFJ;AAEU;UAFgC,AACvB,AAEL,AAEZ,AAAU,AACR,AAAM,AACN,AAAU,AAEZ,AAAS,AACP,AAAM,AAAC,AACP;AAVe,AAEf;AAnBiB,AAAiB;IA2BxB;AAX4B;UAa7B,AACT;AAAM,AAAC,cADE,AACH,AACN,AAAU;AAFZ;;AAOF;;A,AApBO,AAAkB,AAAiB;;AAwBnC,WAAM,AAAmB,AAAI,AAAa,AAC/C;AAAQ,cAAA,AACN,AAAM,AACN;AAHJ;;WAKE;AAAW,cALoC,AAKpC,AACT,AAAM,AACN,AAAU,AAEZ,AAAY,AACV,AAAM,AACN,AAAU,AAEZ,AAAa,AACX;AAd6C,AACvC,AAEI;AAlBH;AA6BD,IADK;;UAIb;AAAW,cAAA,AACT,AAAM,AACN;AAnB6C,AAalC,AAED;;UAKR,AAAI,AAAK,AAAY,AAAC,AAAK,AAAO,AAChC;cAAA,AAAO,AAAI,AACZ;AAHQ,AAAY,AACrB;;UAGA,AAAK,AACN;AAPQ,cAAA,AAQT,AAAY;AAFV;;AAMN;cAGA;AAhCO,A,AAAyB,AAAiB;AAgC1C;UACG,AACN;AAAM,eADA,YAEN;UAAQ,8BAH0B,AAC5B;mBAIR;AAAQ,AACN;;AAAM,WADA,AAEN;AAPkC,AAK5B,AAEI;gBAPwB,AASpC,AAAS,AACP,AAAM,AAAC,AACP,AAAU,AAEZ,AAAW,AACT,AAAM,AAAC,AACP;AAfS,AAAQ,AAAI,AAAa,AACpC;AAlBE;IAgCU;AAfwB;AAiB7B,UACL;AAAM,AAAC,YADF,AACC,AACN,AAAU;AAFZ;AAjBoC;AAqB7B,UACL;AAAM,AAAC,cADF,AACC,AACN,AAAU;AAFZ;AArBoC;WAyBtB,AACZ;AAAM,AAAC,cADK,AACN,AACN,AAAU;AAFZ;;;;AAzBK,AAAc,AAAiB;;;;;;;;;;;;;AAazB","file":"/lib/collections/schemas/orders.js.map","sourcesContent":["import { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { Workflow } from \"./workflow\";\n\n/**\n * Order Document Schema\n */\n\nexport const Document = new SimpleSchema({\n  docId: {\n    type: String\n  },\n  docType: {\n    type: String,\n    optional: true\n  }\n});\n\n/**\n * Order History Schema\n */\n\nexport const History = new SimpleSchema({\n  event: {\n    type: String\n  },\n  value: {\n    type: String\n  },\n  userId: {\n    type: String\n  },\n  updatedAt: {\n    type: Date\n  }\n});\n\n/**\n * Order Notes Schema\n */\n\nexport const Notes = new SimpleSchema({\n  content: {\n    type: String\n  },\n  userId: {\n    type: String\n  },\n  updatedAt: {\n    type: Date\n  }\n});\n\n/**\n * OrderItems Schema\n * merges with Cart and Order to create Orders collection\n */\nexport const OrderItem = new SimpleSchema({\n  additionalField: {\n    type: String,\n    optional: true\n  },\n  workflow: {\n    type: Workflow,\n    optional: true\n  },\n  history: {\n    type: [History],\n    optional: true\n  },\n  documents: {\n    type: [Document],\n    optional: true\n  }\n});\n\n\n/**\n * OrderTransaction Schema\n * order transactions tie shipping, billing, and inventory transactions\n */\nexport const OrderTransaction = new SimpleSchema({\n  itemId: {\n    type: String,\n    optional: true\n  },\n  paymentId: {\n    type: String,\n    optional: true\n  },\n  shipmentId: {\n    type: String,\n    optional: true\n  },\n  inventoryId: {\n    type: String,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isUpdate && !this.isSet) {\n        return new Date;\n      }\n      this.unset();\n    },\n    denyUpdate: true\n  }\n});\n\n/**\n * Order Schema\n */\nexport const Order = new SimpleSchema({\n  userId: {\n    type: String,\n    unique: false\n  },\n  cartId: {\n    type: String,\n    optional: true\n  },\n  history: {\n    type: [History],\n    optional: true\n  },\n  documents: {\n    type: [Document],\n    optional: true\n  },\n  notes: {\n    type: [Notes],\n    optional: true\n  },\n  items: {\n    type: [OrderItem],\n    optional: true\n  },\n  transactions: {\n    type: [OrderTransaction],\n    optional: true\n  }\n});\n"]},"hash":"56f6008b316c951f4a3d47aa818390474a767c3a"}
