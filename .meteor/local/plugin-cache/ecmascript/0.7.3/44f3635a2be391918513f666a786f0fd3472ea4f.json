{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"/lib/collections","imported":["Packages"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"../lib/launchdock","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Launchdock"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/launchdock-connect/server/methods.js","filenameRelative":"/imports/plugins/included/launchdock-connect/server/methods.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/launchdock-connect/server/methods.js"],"names":["Meteor","check","Packages","Reaction","Logger","Launchdock","methods","opts","hasAdminAccess","err","error","Error","process","env","LAUNCHDOCK_USERID","domain","String","privateKey","publicCert","unblock","ldConnect","findOne","name","update","_id","$set","e","stackId","LAUNCHDOCK_STACK_ID","ldArgs","key","cert","launchdock","connect","ldUrl","result","call","disconnect","LAUNCHDOCK_DEFAULT_DOMAIN","LAUNCHDOCK_BALANCER_ENDPOINT"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAgB,AACzB,AAAS,AAAU,AAAc,AACjC,AAAO,AAAgB,AAEvB,AAAO,AAAQ;AACb;AAKA,AAA0B,AAAM,AAC9B,AAAI,AAAC,AAAS,AAAkB,AAC9B;;;;KAAM,AAAM,qCAAZ;SACO,SAAP,AAAa,kBACb;UAAM,AAAI,MAAV,AAAM,AAAW,AAAM,AAAc,AACtC;;2CAED;AAAA,AAAI,AAAC,AAAQ,AAAI,AAAmB,AAClC,AAAM,AAAM,AACZ;;SAAO,QAAP,AAAa,IAAb,mBACA;UAAM,AAAI,OAAV,AAAM,AAAW,AAAM,AAA+B,AACvD;;4DAED;AAAA,AAAM,AAAM,AACV,AAAQ,AACR;;;cAFF,AAAY,AAGE;kBAGd;AAAA,AAAK,kBAEL,AAAM,AAAY,AAAS,AAAQ,AACjC,AAAM;AATI,AAEE,AACZ;AAhB4B,AAqB9B,AAAkB,AAIlB,SACA;AAAI;YACF,AAAS,AAAO,AAAU,AAAK,AAC7B,AAAM,AACJ,AAAuB,AAAK,AAC5B;AAHJ,QACQ,AAEuB,AAAK,AAChC;;QAHI,AAGwB,AAAK;;;AAGrC,AAAO,AAAG,sCACV;AAAA,AAAO,AAAM,0CACb;AAAA,AAAM,AAAI,AAAO,AAAM,2CApCK,AAqC7B,AAED;AAbA,AAQC,AAAC;AAPA,AAA+B;gBAajC;AAAM,mBAAN,AAAgB,AAAQ,AAAI,AAC5B;AAAM,gBAAS,aACb;AADa,AACP,AAAK,AACX,AAAK,AAAK,AACV,KAzCA,CAsCa,AAGP,AAAK;;;AAHb,8BAMA;QAAM;iBAEN;AAAI,AAAC,gBAAL,AAAiB,AACf;YAAM,KAAN,AAAY,AACZ,AAAO,AAAM,AACb,AAAM,AAAI,AAAO,AAAM,AACxB;AAND,AAAmB,AAAW,AAAQ;wCAQtC;;SAAM,AAAS,YAAf,AAAe,AAAW,AAAK,AAA8B,AAAS,AAEtE;UAAW,QAAX,AAEA;AAAO,aAAP,MAjEW,AAkEZ;;AAGD,AAAgC,AAC9B;;AAAI,AAAC,QAAS,oBAAd,AAAK,KAA2B,uCAC9B,AAAM,AAAM,AACZ;AAAO,eAAP,AAAa,AACb,AAAM,AAAI,AAAO,AAAM,AAAc,AACtC;;AA1EU,AA4EX,AAAO,AAAQ,AAAI,AACpB;6CAGD;oCAAuC,AACrC;AAAI,AAAC,gBAAL,AAAK,AAAS,AAAkB,AAC9B;AAAM,aAAM,MAAZ,AACA;YAAO,IAAP,AAAa,2BACb;AAAA,AAAM,AAAI,AAAO,AAAM,AAAc,AACtC;;uBAED;AAvFJ,AAAe,AAuFX,AAAO,AAAQ,AAAI,AACpB","file":"/imports/plugins/included/launchdock-connect/server/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Packages } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\nimport Launchdock from \"../lib/launchdock\";\n\nMeteor.methods({\n  /**\n   * Sets custom domain name, confirms SSL key/cert exists.\n   * @param  {Object} opts - custom SSL cert details\n   * @return {Boolean} - returns true on successful update\n   */\n  \"launchdock/setCustomSsl\"(opts) {\n    if (!Reaction.hasAdminAccess()) {\n      const err = \"Access denied\";\n      Logger.error(err);\n      throw new Meteor.Error(\"auth-error\", err);\n    }\n\n    if (!process.env.LAUNCHDOCK_USERID) {\n      const err = \"Launchdock credentials not found\";\n      Logger.error(err);\n      throw new Meteor.Error(\"launchdock-credential-error\", err);\n    }\n\n    check(opts, {\n      domain: String,\n      privateKey: String,\n      publicCert: String\n    });\n\n    this.unblock();\n\n    const ldConnect = Packages.findOne({\n      name: \"reaction-connect\"\n    });\n\n    // save everything locally\n    try {\n      Packages.update(ldConnect._id, {\n        $set: {\n          \"settings.ssl.domain\": opts.domain,\n          \"settings.ssl.privateKey\": opts.privateKey,\n          \"settings.ssl.certificate\": opts.publicCert\n        }\n      });\n    } catch (e) {\n      Logger.error(e);\n      throw new Meteor.Error(e);\n    }\n\n    // build args for method on Launchdock side\n    const stackId = process.env.LAUNCHDOCK_STACK_ID;\n    const ldArgs = {\n      name: opts.domain,\n      key: opts.privateKey,\n      cert: opts.publicCert\n    };\n\n    const launchdock = Launchdock.connect(ldUrl);\n\n    if (!launchdock) {\n      const err = \"Unable to connect to Launchdock\";\n      Logger.error(err);\n      throw new Meteor.Error(err);\n    }\n\n    const result = launchdock.call(\"rancher/updateStackSSLCert\", stackId, ldArgs);\n\n    launchdock.disconnect();\n\n    return result;\n  },\n\n\n  \"launchdock/getDefaultDomain\"() {\n    if (!Reaction.hasAdminAccess()) {\n      const err = \"Access denied\";\n      Logger.error(err);\n      throw new Meteor.Error(\"auth-error\", err);\n    }\n\n    return process.env.LAUNCHDOCK_DEFAULT_DOMAIN;\n  },\n\n\n  \"launchdock/getLoadBalancerEndpoint\"() {\n    if (!Reaction.hasAdminAccess()) {\n      const err = \"Access denied\";\n      Logger.error(err);\n      throw new Meteor.Error(\"auth-error\", err);\n    }\n\n    return process.env.LAUNCHDOCK_BALANCER_ENDPOINT;\n  }\n\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/launchdock-connect/server/methods.js.map","sourceFileName":"/imports/plugins/included/launchdock-connect/server/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 2);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 3);\nvar Launchdock = void 0;\nmodule.importSync(\"../lib/launchdock\", {\n  \"default\": function (v) {\n    Launchdock = v;\n  }\n}, 4);\nMeteor.methods({\n  /**\n   * Sets custom domain name, confirms SSL key/cert exists.\n   * @param  {Object} opts - custom SSL cert details\n   * @return {Boolean} - returns true on successful update\n   */\"launchdock/setCustomSsl\": function (opts) {\n    if (!Reaction.hasAdminAccess()) {\n      var err = \"Access denied\";\n      Logger.error(err);\n      throw new Meteor.Error(\"auth-error\", err);\n    }\n\n    if (!process.env.LAUNCHDOCK_USERID) {\n      var _err = \"Launchdock credentials not found\";\n      Logger.error(_err);\n      throw new Meteor.Error(\"launchdock-credential-error\", _err);\n    }\n\n    check(opts, {\n      domain: String,\n      privateKey: String,\n      publicCert: String\n    });\n    this.unblock();\n    var ldConnect = Packages.findOne({\n      name: \"reaction-connect\"\n    }); // save everything locally\n\n    try {\n      Packages.update(ldConnect._id, {\n        $set: {\n          \"settings.ssl.domain\": opts.domain,\n          \"settings.ssl.privateKey\": opts.privateKey,\n          \"settings.ssl.certificate\": opts.publicCert\n        }\n      });\n    } catch (e) {\n      Logger.error(e);\n      throw new Meteor.Error(e);\n    } // build args for method on Launchdock side\n\n\n    var stackId = process.env.LAUNCHDOCK_STACK_ID;\n    var ldArgs = {\n      name: opts.domain,\n      key: opts.privateKey,\n      cert: opts.publicCert\n    };\n    var launchdock = Launchdock.connect(ldUrl);\n\n    if (!launchdock) {\n      var _err2 = \"Unable to connect to Launchdock\";\n      Logger.error(_err2);\n      throw new Meteor.Error(_err2);\n    }\n\n    var result = launchdock.call(\"rancher/updateStackSSLCert\", stackId, ldArgs);\n    launchdock.disconnect();\n    return result;\n  },\n  \"launchdock/getDefaultDomain\": function () {\n    if (!Reaction.hasAdminAccess()) {\n      var err = \"Access denied\";\n      Logger.error(err);\n      throw new Meteor.Error(\"auth-error\", err);\n    }\n\n    return process.env.LAUNCHDOCK_DEFAULT_DOMAIN;\n  },\n  \"launchdock/getLoadBalancerEndpoint\": function () {\n    if (!Reaction.hasAdminAccess()) {\n      var err = \"Access denied\";\n      Logger.error(err);\n      throw new Meteor.Error(\"auth-error\", err);\n    }\n\n    return process.env.LAUNCHDOCK_BALANCER_ENDPOINT;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/launchdock-connect/server/methods.js"],"names":["Meteor","check","Packages","Reaction","Logger","Launchdock","methods","opts","hasAdminAccess","err","error","Error","process","env","LAUNCHDOCK_USERID","domain","String","privateKey","publicCert","unblock","ldConnect","findOne","name","update","_id","$set","e","stackId","LAUNCHDOCK_STACK_ID","ldArgs","key","cert","launchdock","connect","ldUrl","result","call","disconnect","LAUNCHDOCK_DEFAULT_DOMAIN","LAUNCHDOCK_BALANCER_ENDPOINT"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAgB,AACzB,AAAS,AAAU,AAAc,AACjC,AAAO,AAAgB,AAEvB,AAAO,AAAQ;AACb;AAKA,AAA0B,AAAM,AAC9B,AAAI,AAAC,AAAS,AAAkB,AAC9B;;;;KAAM,AAAM,qCAAZ;SACO,SAAP,AAAa,kBACb;UAAM,AAAI,MAAV,AAAM,AAAW,AAAM,AAAc,AACtC;;2CAED;AAAA,AAAI,AAAC,AAAQ,AAAI,AAAmB,AAClC,AAAM,AAAM,AACZ;;SAAO,QAAP,AAAa,IAAb,mBACA;UAAM,AAAI,OAAV,AAAM,AAAW,AAAM,AAA+B,AACvD;;4DAED;AAAA,AAAM,AAAM,AACV,AAAQ,AACR;;;cAFF,AAAY,AAGE;kBAGd;AAAA,AAAK,kBAEL,AAAM,AAAY,AAAS,AAAQ,AACjC,AAAM;AATI,AAEE,AACZ;AAhB4B,AAqB9B,AAAkB,AAIlB,SACA;AAAI;YACF,AAAS,AAAO,AAAU,AAAK,AAC7B,AAAM,AACJ,AAAuB,AAAK,AAC5B;AAHJ,QACQ,AAEuB,AAAK,AAChC;;QAHI,AAGwB,AAAK;;;AAGrC,AAAO,AAAG,sCACV;AAAA,AAAO,AAAM,0CACb;AAAA,AAAM,AAAI,AAAO,AAAM,2CApCK,AAqC7B,AAED;AAbA,AAQC,AAAC;AAPA,AAA+B;gBAajC;AAAM,mBAAN,AAAgB,AAAQ,AAAI,AAC5B;AAAM,gBAAS,aACb;AADa,AACP,AAAK,AACX,AAAK,AAAK,AACV,KAzCA,CAsCa,AAGP,AAAK;;;AAHb,8BAMA;QAAM;iBAEN;AAAI,AAAC,gBAAL,AAAiB,AACf;YAAM,KAAN,AAAY,AACZ,AAAO,AAAM,AACb,AAAM,AAAI,AAAO,AAAM,AACxB;AAND,AAAmB,AAAW,AAAQ;wCAQtC;;SAAM,AAAS,YAAf,AAAe,AAAW,AAAK,AAA8B,AAAS,AAEtE;UAAW,QAAX,AAEA;AAAO,aAAP,MAjEW,AAkEZ;;AAGD,AAAgC,AAC9B;;AAAI,AAAC,QAAS,oBAAd,AAAK,KAA2B,uCAC9B,AAAM,AAAM,AACZ;AAAO,eAAP,AAAa,AACb,AAAM,AAAI,AAAO,AAAM,AAAc,AACtC;;AA1EU,AA4EX,AAAO,AAAQ,AAAI,AACpB;6CAGD;oCAAuC,AACrC;AAAI,AAAC,gBAAL,AAAK,AAAS,AAAkB,AAC9B;AAAM,aAAM,MAAZ,AACA;YAAO,IAAP,AAAa,2BACb;AAAA,AAAM,AAAI,AAAO,AAAM,AAAc,AACtC;;uBAED;AAvFJ,AAAe,AAuFX,AAAO,AAAQ,AAAI,AACpB","file":"/imports/plugins/included/launchdock-connect/server/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Packages } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\nimport Launchdock from \"../lib/launchdock\";\n\nMeteor.methods({\n  /**\n   * Sets custom domain name, confirms SSL key/cert exists.\n   * @param  {Object} opts - custom SSL cert details\n   * @return {Boolean} - returns true on successful update\n   */\n  \"launchdock/setCustomSsl\"(opts) {\n    if (!Reaction.hasAdminAccess()) {\n      const err = \"Access denied\";\n      Logger.error(err);\n      throw new Meteor.Error(\"auth-error\", err);\n    }\n\n    if (!process.env.LAUNCHDOCK_USERID) {\n      const err = \"Launchdock credentials not found\";\n      Logger.error(err);\n      throw new Meteor.Error(\"launchdock-credential-error\", err);\n    }\n\n    check(opts, {\n      domain: String,\n      privateKey: String,\n      publicCert: String\n    });\n\n    this.unblock();\n\n    const ldConnect = Packages.findOne({\n      name: \"reaction-connect\"\n    });\n\n    // save everything locally\n    try {\n      Packages.update(ldConnect._id, {\n        $set: {\n          \"settings.ssl.domain\": opts.domain,\n          \"settings.ssl.privateKey\": opts.privateKey,\n          \"settings.ssl.certificate\": opts.publicCert\n        }\n      });\n    } catch (e) {\n      Logger.error(e);\n      throw new Meteor.Error(e);\n    }\n\n    // build args for method on Launchdock side\n    const stackId = process.env.LAUNCHDOCK_STACK_ID;\n    const ldArgs = {\n      name: opts.domain,\n      key: opts.privateKey,\n      cert: opts.publicCert\n    };\n\n    const launchdock = Launchdock.connect(ldUrl);\n\n    if (!launchdock) {\n      const err = \"Unable to connect to Launchdock\";\n      Logger.error(err);\n      throw new Meteor.Error(err);\n    }\n\n    const result = launchdock.call(\"rancher/updateStackSSLCert\", stackId, ldArgs);\n\n    launchdock.disconnect();\n\n    return result;\n  },\n\n\n  \"launchdock/getDefaultDomain\"() {\n    if (!Reaction.hasAdminAccess()) {\n      const err = \"Access denied\";\n      Logger.error(err);\n      throw new Meteor.Error(\"auth-error\", err);\n    }\n\n    return process.env.LAUNCHDOCK_DEFAULT_DOMAIN;\n  },\n\n\n  \"launchdock/getLoadBalancerEndpoint\"() {\n    if (!Reaction.hasAdminAccess()) {\n      const err = \"Access denied\";\n      Logger.error(err);\n      throw new Meteor.Error(\"auth-error\", err);\n    }\n\n    return process.env.LAUNCHDOCK_BALANCER_ENDPOINT;\n  }\n\n});\n"]},"hash":"44f3635a2be391918513f666a786f0fd3472ea4f"}
