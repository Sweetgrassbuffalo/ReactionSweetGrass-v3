{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"meteor/session","imported":["Session"],"specifiers":[{"kind":"named","imported":"Session","local":"Session"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/core/accounts.js","filenameRelative":"/client/modules/core/accounts.js","inputSourceMap":{"version":3,"sources":["/client/modules/core/accounts.js"],"names":["Accounts","Session","loginWithAnonymous","anonymous","callback","amplify","store","newSession","Random","id","set","callLoginMethod","methodArguments","sessionId","get","userCallback"],"mappings":"AAAA,IAAS;AAAT,OAAyB,WAAzB;;;;;;;;;;GACA,A,AAAA,AAAS,AAAe,AACxB;;AAEA;AAKA,AAAS,AAAqB,AAAU,AAAW,AAAU,AAC3D;;;gEAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,AAAI,AAAO,AAAQ,AAAM,AAAwB,AAAU,AACzD;AAAA,AAAM,AAAa,AAAO,AAC1B;MAAQ,OAAR,AAAc,cAAd,AAAkC,kCAClC;QAAA,AAAQ,AAAI,aAAZ,AAAyB,OAAzB,AACD;;6BACD;AAAA,AAAS,AAAgB,AACvB;;WAAiB,AAAC;AACL;iBADI,AAAC,AAEL,AAAQ,AAAI;AAHF,6BAAzB,AAAyB,AAKvB,AAAc;AAFZ,KAFgB;kBAhBtB,AAsBC;AALK;CAfJ","file":"/client/modules/core/accounts.js.map","sourcesContent":["import { Accounts } from \"meteor/accounts-base\";\nimport { Session } from \"meteor/session\";\n// import { amplify } from \"meteor/amplify\";\n\n/*\n * registerLoginHandler\n * method to create anonymous users\n */\n\nAccounts.loginWithAnonymous = function (anonymous, callback) {\n  // We need to be sure that every user will work inside a session. Sometimes\n  // session could be destroyed, for example, by clearing browser's cache. In\n  // that case we need to take care about creating new session before new\n  // user or anonymous will be created/logged in.\n  // The problem here - looks like where is no way to track localStorage:\n  // `amplify.store(\"Reaction.session\")` itself. That's why we need to use\n  // another way: `accounts` package uses `setTimeout` for monitoring connection\n  // Accounts.callLoginMethod will be called after clearing cache. We could\n  // latch on this computations by running extra check here.\n  if (typeof amplify.store(\"Reaction.session\") !== \"string\") {\n    const newSession = Random.id();\n    amplify.store(\"Reaction.session\", newSession);\n    Session.set(\"sessionId\", newSession);\n  }\n  Accounts.callLoginMethod({\n    methodArguments: [{\n      anonymous: true,\n      sessionId: Session.get(\"sessionId\")\n    }],\n    userCallback: callback\n  });\n};\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/core/accounts.js.map","sourceFileName":"/client/modules/core/accounts.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"accounts"},"ignored":false,"code":"var Accounts = void 0;\nmodule.importSync(\"meteor/accounts-base\", {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 0);\nvar Session = void 0;\nmodule.importSync(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 1);\n\n// import { amplify } from \"meteor/amplify\";\n/*\n * registerLoginHandler\n * method to create anonymous users\n */Accounts.loginWithAnonymous = function (anonymous, callback) {\n  // We need to be sure that every user will work inside a session. Sometimes\n  // session could be destroyed, for example, by clearing browser's cache. In\n  // that case we need to take care about creating new session before new\n  // user or anonymous will be created/logged in.\n  // The problem here - looks like where is no way to track localStorage:\n  // `amplify.store(\"Reaction.session\")` itself. That's why we need to use\n  // another way: `accounts` package uses `setTimeout` for monitoring connection\n  // Accounts.callLoginMethod will be called after clearing cache. We could\n  // latch on this computations by running extra check here.\n  if (typeof amplify.store(\"Reaction.session\") !== \"string\") {\n    var newSession = Random.id();\n    amplify.store(\"Reaction.session\", newSession);\n    Session.set(\"sessionId\", newSession);\n  }\n\n  Accounts.callLoginMethod({\n    methodArguments: [{\n      anonymous: true,\n      sessionId: Session.get(\"sessionId\")\n    }],\n    userCallback: callback\n  });\n};","map":{"version":3,"sources":["/client/modules/core/accounts.js"],"names":["Accounts","Session","loginWithAnonymous","anonymous","callback","amplify","store","newSession","Random","id","set","callLoginMethod","methodArguments","sessionId","get","userCallback"],"mappings":"AAAA,IAAS;AAAT,OAAyB,WAAzB;;;;;;;;;;GACA,A,AAAA,AAAS,AAAe,AACxB;;AAEA;AAKA,AAAS,AAAqB,AAAU,AAAW,AAAU,AAC3D;;;gEAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,AAAI,AAAO,AAAQ,AAAM,AAAwB,AAAU,AACzD;AAAA,AAAM,AAAa,AAAO,AAC1B;MAAQ,OAAR,AAAc,cAAd,AAAkC,kCAClC;QAAA,AAAQ,AAAI,aAAZ,AAAyB,OAAzB,AACD;;6BACD;AAAA,AAAS,AAAgB,AACvB;;WAAiB,AAAC;AACL;iBADI,AAAC,AAEL,AAAQ,AAAI;AAHF,6BAAzB,AAAyB,AAKvB,AAAc;AAFZ,KAFgB;kBAhBtB,AAsBC;AALK;CAfJ","file":"/client/modules/core/accounts.js.map","sourcesContent":["import { Accounts } from \"meteor/accounts-base\";\nimport { Session } from \"meteor/session\";\n// import { amplify } from \"meteor/amplify\";\n\n/*\n * registerLoginHandler\n * method to create anonymous users\n */\n\nAccounts.loginWithAnonymous = function (anonymous, callback) {\n  // We need to be sure that every user will work inside a session. Sometimes\n  // session could be destroyed, for example, by clearing browser's cache. In\n  // that case we need to take care about creating new session before new\n  // user or anonymous will be created/logged in.\n  // The problem here - looks like where is no way to track localStorage:\n  // `amplify.store(\"Reaction.session\")` itself. That's why we need to use\n  // another way: `accounts` package uses `setTimeout` for monitoring connection\n  // Accounts.callLoginMethod will be called after clearing cache. We could\n  // latch on this computations by running extra check here.\n  if (typeof amplify.store(\"Reaction.session\") !== \"string\") {\n    const newSession = Random.id();\n    amplify.store(\"Reaction.session\", newSession);\n    Session.set(\"sessionId\", newSession);\n  }\n  Accounts.callLoginMethod({\n    methodArguments: [{\n      anonymous: true,\n      sessionId: Session.get(\"sessionId\")\n    }],\n    userCallback: callback\n  });\n};\n"]},"hash":"bc19758f7bacd8ebdec4201494ff550047c5ff72"}
