{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/collections","imported":["Shops"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"}]},{"source":"/server/api","imported":["Logger"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":["getRegistryDomain","requestUrl","setDomain"],"specifiers":[{"kind":"local","local":"getRegistryDomain","exported":"getRegistryDomain"},{"kind":"local","local":"requestUrl","exported":"requestUrl"},{"kind":"local","local":"setDomain","exported":"setDomain"}]}}},"options":{"filename":"/server/api/core/setDomain.js","filenameRelative":"/server/api/core/setDomain.js","inputSourceMap":{"version":3,"sources":["/server/api/core/setDomain.js"],"names":["Shops","Logger","getRegistryDomain","requestUrl","url","process","env","ROOT_URL","domain","match","setDomain","currentDomain","findOne","domains","_error","error","debug","update","$set"],"mappings":"AAAA,OAAS;AAAa;WAAtB;;;;;AAAA;;;;;;;;;;;;GACuB,A,AAAvB,AAAS,AAET,AAMA,AAAO,AAAS,AAAkB,AAAY,AAC5C,AAAM,AAAM,AAAc,AAAQ,AAAI,AACtC;;AAAM,SAAS,AAAI,AAAM,8BAAzB,AAAe,AAAoD,AACnE;MAAO,MAAP,0BACD,A;AAGD;;AAKA,AAAO,AAAS,AAAY,AAC1B,AAAI,AACJ,AACA,AAAI,AACF,AAAgB,AAAM,AAAU,AAAQ,AACzC,AAAC;;AAAO,SAAP,AAAe;MACf,AAAO,AAAM,AAAQ,AACtB,wBAPyB,AAQ1B;;;4CACA;IAAM,OAAS,QAAf;yBACA;AAAA,AAAI,AAAiB,AAAkB,AAAQ,AAC7C,GALA,CAKA,AAAO,AAAM,AAAwB,AACrC;;;MAAA,AAAM,SAAO,AACX;;MAAS,2CADE;AAAb,AAEG,yCACD;UAAM;eAAA,AACS;AAAb;;qBAIP;AADE;AAPC,AAEG","file":"/server/api/core/setDomain.js.map","sourcesContent":["import { Shops } from \"/lib/collections\";\nimport { Logger } from \"/server/api\";\n\n/**\n * getDomain\n * local helper for creating admin users\n * @param {String} requestUrl - url\n * @return {String} domain name stripped from requestUrl\n */\nexport function getRegistryDomain(requestUrl) {\n  const url = requestUrl || process.env.ROOT_URL;\n  const domain = url.match(/^https?\\:\\/\\/([^\\/:?#]+)(?:[\\/:?#]|$)/i)[1];\n  return domain;\n}\n\n\n/**\n *  @private setDomain\n *  @summary update the default shop url if ROOT_URL supplied is different from current\n *  @return {String} returns insert result\n */\nexport function setDomain() {\n  let currentDomain;\n  // we automatically update the shop domain when ROOT_URL changes\n  try {\n    currentDomain = Shops.findOne().domains[0];\n  } catch (_error) {\n    Logger.error(_error, \"Failed to determine default shop.\");\n  }\n  // if the server domain changes, update shop\n  const domain = getRegistryDomain();\n  if (currentDomain && currentDomain !== domain) {\n    Logger.debug(\"Updating domain to \" + domain);\n    Shops.update({\n      domains: currentDomain\n    }, {\n      $set: {\n        \"domains.$\": domain\n      }\n    });\n  }\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/api/core/setDomain.js.map","sourceFileName":"/server/api/core/setDomain.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"setDomain"},"ignored":false,"code":"module.export({\n  getRegistryDomain: function () {\n    return getRegistryDomain;\n  },\n  setDomain: function () {\n    return setDomain;\n  }\n});\nvar Shops = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  }\n}, 0);\nvar Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 1);\n\nfunction getRegistryDomain(requestUrl) {\n  var url = requestUrl || process.env.ROOT_URL;\n  var domain = url.match(/^https?\\:\\/\\/([^\\/:?#]+)(?:[\\/:?#]|$)/i)[1];\n  return domain;\n}\n\nfunction setDomain() {\n  var currentDomain = void 0; // we automatically update the shop domain when ROOT_URL changes\n\n  try {\n    currentDomain = Shops.findOne().domains[0];\n  } catch (_error) {\n    Logger.error(_error, \"Failed to determine default shop.\");\n  } // if the server domain changes, update shop\n\n\n  var domain = getRegistryDomain();\n\n  if (currentDomain && currentDomain !== domain) {\n    Logger.debug(\"Updating domain to \" + domain);\n    Shops.update({\n      domains: currentDomain\n    }, {\n      $set: {\n        \"domains.$\": domain\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/server/api/core/setDomain.js"],"names":["Shops","Logger","getRegistryDomain","requestUrl","url","process","env","ROOT_URL","domain","match","setDomain","currentDomain","findOne","domains","_error","error","debug","update","$set"],"mappings":"AAAA,OAAS;AAAa;WAAtB;;;;;AAAA;;;;;;;;;;;;GACuB,A,AAAvB,AAAS,AAET,AAMA,AAAO,AAAS,AAAkB,AAAY,AAC5C,AAAM,AAAM,AAAc,AAAQ,AAAI,AACtC;;AAAM,SAAS,AAAI,AAAM,8BAAzB,AAAe,AAAoD,AACnE;MAAO,MAAP,0BACD,A;AAGD;;AAKA,AAAO,AAAS,AAAY,AAC1B,AAAI,AACJ,AACA,AAAI,AACF,AAAgB,AAAM,AAAU,AAAQ,AACzC,AAAC;;AAAO,SAAP,AAAe;MACf,AAAO,AAAM,AAAQ,AACtB,wBAPyB,AAQ1B;;;4CACA;IAAM,OAAS,QAAf;yBACA;AAAA,AAAI,AAAiB,AAAkB,AAAQ,AAC7C,GALA,CAKA,AAAO,AAAM,AAAwB,AACrC;;;MAAA,AAAM,SAAO,AACX;;MAAS,2CADE;AAAb,AAEG,yCACD;UAAM;eAAA,AACS;AAAb;;qBAIP;AADE;AAPC,AAEG","file":"/server/api/core/setDomain.js.map","sourcesContent":["import { Shops } from \"/lib/collections\";\nimport { Logger } from \"/server/api\";\n\n/**\n * getDomain\n * local helper for creating admin users\n * @param {String} requestUrl - url\n * @return {String} domain name stripped from requestUrl\n */\nexport function getRegistryDomain(requestUrl) {\n  const url = requestUrl || process.env.ROOT_URL;\n  const domain = url.match(/^https?\\:\\/\\/([^\\/:?#]+)(?:[\\/:?#]|$)/i)[1];\n  return domain;\n}\n\n\n/**\n *  @private setDomain\n *  @summary update the default shop url if ROOT_URL supplied is different from current\n *  @return {String} returns insert result\n */\nexport function setDomain() {\n  let currentDomain;\n  // we automatically update the shop domain when ROOT_URL changes\n  try {\n    currentDomain = Shops.findOne().domains[0];\n  } catch (_error) {\n    Logger.error(_error, \"Failed to determine default shop.\");\n  }\n  // if the server domain changes, update shop\n  const domain = getRegistryDomain();\n  if (currentDomain && currentDomain !== domain) {\n    Logger.debug(\"Updating domain to \" + domain);\n    Shops.update({\n      domains: currentDomain\n    }, {\n      $set: {\n        \"domains.$\": domain\n      }\n    });\n  }\n}\n"]},"hash":"e3a03a1587c63660e2cf4e76ea94cbe5f4c228e3"}
