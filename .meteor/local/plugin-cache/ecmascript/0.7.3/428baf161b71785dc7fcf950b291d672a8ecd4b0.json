{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"/lib/api","imported":["getShopId"],"specifiers":[{"kind":"named","imported":"getShopId","local":"getShopId"}]}],"exports":{"exported":["shopIdAutoValue","schemaIdAutoValue"],"specifiers":[{"kind":"local","local":"shopIdAutoValue","exported":"shopIdAutoValue"},{"kind":"local","local":"schemaIdAutoValue","exported":"schemaIdAutoValue"}]}}},"options":{"filename":"/lib/collections/schemas/helpers.js","filenameRelative":"/lib/collections/schemas/helpers.js","inputSourceMap":{"version":3,"sources":["/lib/collections/schemas/helpers.js"],"names":["Meteor","Random","getShopId","shopIdAutoValue","isSet","isServer","value","isUpdate","isClient","isInsert","unset","schemaIdAutoValue","operator","id"],"mappings":"AAAA,OAAS;AAAT,AAAuB;WAAvB;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAT,AAAuB,AAAvB,AACA,AAAS,AAAT,AAA0B,AAA1B,A,AAEA,AAMA,AAAO,AAAS,AAAT,AAA2B,AAChC,AACA,AAAI;;AAAK,SAAL,AAAc,AAAO,kBAAzB,AAAmC,AACjC;AAAO,AAAK,AAAZ,AACD;AAFD,MAEO,KAAI,SAAO,OAAP,AAAmB,AAAC,UAAK,AAAzB,AAAqC,AAAO,AAAP,AAAmB,AAAK,AAAjE,AAA2E,AAChF;WAAO,KAAP,AACD;;WACD;AAAO,AAAK,AAAL,AAAP,AACD,A;;AAED;AAMA,AAAO,AAAS,AAAT,AAA6B,AAClC,AAAI,AAAK,AAAL,AAAc,AAAO,AAAzB,AAAmC,AACjC,AAAO,AAAK,AAAZ,AACD,AAFD;;AAEO,AAAI,SAAO,AAAP,AAAmB,oBAAK,AAAL,AAAkB,AAArC,AACT,AAAO,AAAP,AAAmB,AAAK,AADnB,AAC6B,AAClC;WAAO,AAAO,SAAP,AAAP,iBACD;;kDACD,WAAO,OAAK,AAAL,AAAP,2BACD","file":"/lib/collections/schemas/helpers.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Random } from \"meteor/random\";\nimport { getShopId } from \"/lib/api\";\n\n/**\n * shopIdAutoValue\n * @summary used for schema injection autoValue\n * @example autoValue: shopIdAutoValue\n * @return {String} returns current shopId\n */\nexport function shopIdAutoValue() {\n  // we should always have a shopId\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if (Meteor.isServer && !this.isUpdate || Meteor.isClient && this.isInsert) {\n    return getShopId();\n  }\n  return this.unset();\n}\n\n/**\n * schemaIdAutoValue\n * @summary used for schema injection autoValue\n * @example autoValue: schemaIdAutoValue\n * @return {String} returns randomId\n */\nexport function schemaIdAutoValue() {\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if (Meteor.isServer && this.operator !== \"$pull\" ||\n    Meteor.isClient && this.isInsert) {\n    return Random.id();\n  }\n  return this.unset();\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/collections/schemas/helpers.js.map","sourceFileName":"/lib/collections/schemas/helpers.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"helpers"},"ignored":false,"code":"module.export({\n  shopIdAutoValue: function () {\n    return shopIdAutoValue;\n  },\n  schemaIdAutoValue: function () {\n    return schemaIdAutoValue;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Random = void 0;\nmodule.importSync(\"meteor/random\", {\n  Random: function (v) {\n    Random = v;\n  }\n}, 1);\nvar getShopId = void 0;\nmodule.importSync(\"/lib/api\", {\n  getShopId: function (v) {\n    getShopId = v;\n  }\n}, 2);\n\nfunction shopIdAutoValue() {\n  // we should always have a shopId\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if (Meteor.isServer && !this.isUpdate || Meteor.isClient && this.isInsert) {\n    return getShopId();\n  }\n\n  return this.unset();\n}\n\nfunction schemaIdAutoValue() {\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if (Meteor.isServer && this.operator !== \"$pull\" || Meteor.isClient && this.isInsert) {\n    return Random.id();\n  }\n\n  return this.unset();\n}","map":{"version":3,"sources":["/lib/collections/schemas/helpers.js"],"names":["Meteor","Random","getShopId","shopIdAutoValue","isSet","isServer","value","isUpdate","isClient","isInsert","unset","schemaIdAutoValue","operator","id"],"mappings":"AAAA,OAAS;AAAT,AAAuB;WAAvB;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAT,AAAuB,AAAvB,AACA,AAAS,AAAT,AAA0B,AAA1B,A,AAEA,AAMA,AAAO,AAAS,AAAT,AAA2B,AAChC,AACA,AAAI;;AAAK,SAAL,AAAc,AAAO,kBAAzB,AAAmC,AACjC;AAAO,AAAK,AAAZ,AACD;AAFD,MAEO,KAAI,SAAO,OAAP,AAAmB,AAAC,UAAK,AAAzB,AAAqC,AAAO,AAAP,AAAmB,AAAK,AAAjE,AAA2E,AAChF;WAAO,KAAP,AACD;;WACD;AAAO,AAAK,AAAL,AAAP,AACD,A;;AAED;AAMA,AAAO,AAAS,AAAT,AAA6B,AAClC,AAAI,AAAK,AAAL,AAAc,AAAO,AAAzB,AAAmC,AACjC,AAAO,AAAK,AAAZ,AACD,AAFD;;AAEO,AAAI,SAAO,AAAP,AAAmB,oBAAK,AAAL,AAAkB,AAArC,AACT,AAAO,AAAP,AAAmB,AAAK,AADnB,AAC6B,AAClC;WAAO,AAAO,SAAP,AAAP,iBACD;;kDACD,WAAO,OAAK,AAAL,AAAP,2BACD","file":"/lib/collections/schemas/helpers.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Random } from \"meteor/random\";\nimport { getShopId } from \"/lib/api\";\n\n/**\n * shopIdAutoValue\n * @summary used for schema injection autoValue\n * @example autoValue: shopIdAutoValue\n * @return {String} returns current shopId\n */\nexport function shopIdAutoValue() {\n  // we should always have a shopId\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if (Meteor.isServer && !this.isUpdate || Meteor.isClient && this.isInsert) {\n    return getShopId();\n  }\n  return this.unset();\n}\n\n/**\n * schemaIdAutoValue\n * @summary used for schema injection autoValue\n * @example autoValue: schemaIdAutoValue\n * @return {String} returns randomId\n */\nexport function schemaIdAutoValue() {\n  if (this.isSet && Meteor.isServer) {\n    return this.value;\n  } else if (Meteor.isServer && this.operator !== \"$pull\" ||\n    Meteor.isClient && this.isInsert) {\n    return Random.id();\n  }\n  return this.unset();\n}\n"]},"hash":"428baf161b71785dc7fcf950b291d672a8ecd4b0"}
