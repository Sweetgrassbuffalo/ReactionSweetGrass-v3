{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/clone","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_clone"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"/client/api","imported":["Logger","Reaction","i18next"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/lib/collections","imported":["Cart"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/checkout/client/methods/cart.js","filenameRelative":"/imports/plugins/core/checkout/client/methods/cart.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/checkout/client/methods/cart.js"],"names":["Meteor","check","Logger","Reaction","i18next","Cart","methods","paymentMethod","Schemas","PaymentMethod","checkoutCart","findOne","userId","cart","cartId","_id","invoice","shipping","cartShipping","subtotal","cartSubTotal","taxes","cartTaxes","discounts","cartDiscounts","total","cartTotal","selector","update","billing","$set","$addToSet","error","result","debug","Error","call","Router","go","Alerts","inline","t","autoHide","placement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAc,AACvB,AAAS,AAAa,AACtB,AAAS,AAAQ,AAAU,AAAe,AAC1C,AAAS,AAAY,AAErB,AACA;;AACA,AAAO,AAAQ;AACb;AACE,AAAM,wBAAe,UAAA,AAAS,AAAQ;UAChC,eAAe,AAAK,SAAL,AAAa,QAChC;QAAQ,AAAO;AADjB,qBAIA,AAAM,AAAO,AAAQ;AAJA,AAAa,KACxB;;sBAIV;;QAAM,SAAS,KAAf,AAAoB,AACpB;QAAM;gBACM,KADI,AACJ,AAAK,AACf;gBAAU,KAFI,AAEJ,AAAK,AACf;aAAO,KAHO,AAGP,AAAK,AACZ;iBAAW,KAJG,AAIH,AAAK,AAChB;aAAO,KAboC,AAQ7C,AAAgB,AAKP,AAAK,AAEd,AACA;AARgB,AACd,MARF,AACA,CAeA;;AAEA,AAAI,AACJ;;QApB6C,AAoB7C,AAAI,AACJ,AACA;yBACA;AAAA,AAAI,AAAK,AAAS,AAChB;;aAAW,SACT;AAAO;eADT,AAAW,AAEM,AAAK,AAAQ,AAAG;uCAEjC,AAAS,AACP;AALS,AAET;AAGM;;AAEiB,qCAFjB;+BANV,AAKE,AAAS,AAMV,AAAM,AACL;AANQ,AACuB,AAC3B;AADA;WAKO,AACT;AAAK;aAEP,AAAS,AACP;AAJF,AAAW;;;AAMY,mCAFV;6BADb,AAAS,AAMV;AALc,AACgB,AACzB;AAFS,AACT;AAMN,AAAK,AAAO,AAAU,AAAQ,AAAU,AAAO,AAAQ,AACrD;;SAAA,AAAI,OAAO,2CACT;UAAO,OAAP,AAAa,AAAO,AACpB;AAAM,eAAI,MAAO,OAFnB,AAEE,AAAM,AAAiB,AAAsC,AAC9D;AAAM,qEACL;aACA;AAFK,AAEL,AAAO,AAAK,AAA6B,AAAoB,AAC7D;qEACA,qBAAA,AAAI,AAAW,AAAG,AAChB;;YAAS,WAAT,GAAA,AAAgB,AAAG,AAAkB,AAAI,AACvC;AAAK;iBAFT,AAIC,AAAM,AACL;AAJA,AAAyC;eAIzC,AAAO,AAAO,AAAQ,AAAE,AAAuC,AAAU,AACvE;iBAAU,OAD6D;sBAAzE,AAAyE,AAE5D;uBAEb,AAAO,AAAM,AAAO,AAAsC,AAAQ,AAClE;AAHE;AAGI,iBAAI,MAAO,OAAX,AAAiB,sCAAjB,AAAuD,QAA7D,AAAM,AAA+D,AACtE;+EACF;AApBH,AAqBC;AACF;AArEH,AAAe;;AACS,AAAU,AAAe,AAC7C","file":"/imports/plugins/core/checkout/client/methods/cart.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Logger, Reaction, i18next } from \"/client/api\";\nimport { Cart } from \"/lib/collections\";\n\n// Client Cart Methods\n// Stubs with matching server methods.\nMeteor.methods({\n  \"cart/submitPayment\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    const checkoutCart = Cart.findOne({\n      userId: Meteor.userId()\n    });\n\n    const cart = _.clone(checkoutCart);\n    const cartId = cart._id;\n    const invoice = {\n      shipping: cart.cartShipping(),\n      subtotal: cart.cartSubTotal(),\n      taxes: cart.cartTaxes(),\n      discounts: cart.cartDiscounts(),\n      total: cart.cartTotal()\n    };\n    // we won't actually close the order at this stage.\n    // we'll just update the workflow and billing data where\n    // method-hooks can process the workflow update.\n\n    let selector;\n    let update;\n    // temp hack until we build out multiple billing handlers\n    // if we have an existing item update it, otherwise add to set.\n    if (cart.billing) {\n      selector = {\n        \"_id\": cartId,\n        \"billing._id\": cart.billing[0]._id\n      };\n      update = {\n        $set: {\n          \"billing.$.paymentMethod\": paymentMethod,\n          \"billing.$.invoice\": invoice\n        }\n      };\n    } else {\n      selector = {\n        _id: cartId\n      };\n      update = {\n        $addToSet: {\n          \"billing.paymentMethod\": paymentMethod,\n          \"billing.invoice\": invoice\n        }\n      };\n    }\n\n    Cart.update(selector, update, function (error, result) {\n      if (error) {\n        Logger.debug(error, \"An error occurred saving the order\");\n        throw new Meteor.Error(\"An error occurred saving the order\", error);\n      } else {\n        // it's ok and a safety check for this to be called multiple times\n        Meteor.call(\"workflow/pushCartWorkflow\", \"coreCartWorkflow\", \"paymentSubmitted\");\n        // Client Stub Actions\n        if (result === 1) {\n          Reaction.Router.go(\"cart/completed\", {}, {\n            _id: cartId\n          });\n        } else {\n          Alerts.inline(i18next.t(\"checkoutPayment.failedToPlaceOrder\"), \"danger\", {\n            autoHide: true,\n            placement: \"paymentMethod\"\n          });\n          Logger.debug(error, \"An error occurred saving the order\", cartId, error);\n          throw new Meteor.Error(\"An error occurred saving the order\", cartId, error);\n        }\n      }\n    });\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/checkout/client/methods/cart.js.map","sourceFileName":"/imports/plugins/core/checkout/client/methods/cart.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"cart"},"ignored":false,"code":"var _clone = void 0;\n\nmodule.importSync(\"lodash/clone\", {\n  \"default\": function (v) {\n    _clone = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 2);\nvar Logger = void 0,\n    Reaction = void 0,\n    i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  Logger: function (v) {\n    Logger = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 3);\nvar Cart = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  }\n}, 4);\n// Client Cart Methods\n// Stubs with matching server methods.\nMeteor.methods({\n  \"cart/submitPayment\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    var checkoutCart = Cart.findOne({\n      userId: Meteor.userId()\n    });\n\n    var cart = _clone(checkoutCart);\n\n    var cartId = cart._id;\n    var invoice = {\n      shipping: cart.cartShipping(),\n      subtotal: cart.cartSubTotal(),\n      taxes: cart.cartTaxes(),\n      discounts: cart.cartDiscounts(),\n      total: cart.cartTotal()\n    }; // we won't actually close the order at this stage.\n    // we'll just update the workflow and billing data where\n    // method-hooks can process the workflow update.\n\n    var selector = void 0;\n    var update = void 0; // temp hack until we build out multiple billing handlers\n    // if we have an existing item update it, otherwise add to set.\n\n    if (cart.billing) {\n      selector = {\n        \"_id\": cartId,\n        \"billing._id\": cart.billing[0]._id\n      };\n      update = {\n        $set: {\n          \"billing.$.paymentMethod\": paymentMethod,\n          \"billing.$.invoice\": invoice\n        }\n      };\n    } else {\n      selector = {\n        _id: cartId\n      };\n      update = {\n        $addToSet: {\n          \"billing.paymentMethod\": paymentMethod,\n          \"billing.invoice\": invoice\n        }\n      };\n    }\n\n    Cart.update(selector, update, function (error, result) {\n      if (error) {\n        Logger.debug(error, \"An error occurred saving the order\");\n        throw new Meteor.Error(\"An error occurred saving the order\", error);\n      } else {\n        // it's ok and a safety check for this to be called multiple times\n        Meteor.call(\"workflow/pushCartWorkflow\", \"coreCartWorkflow\", \"paymentSubmitted\"); // Client Stub Actions\n\n        if (result === 1) {\n          Reaction.Router.go(\"cart/completed\", {}, {\n            _id: cartId\n          });\n        } else {\n          Alerts.inline(i18next.t(\"checkoutPayment.failedToPlaceOrder\"), \"danger\", {\n            autoHide: true,\n            placement: \"paymentMethod\"\n          });\n          Logger.debug(error, \"An error occurred saving the order\", cartId, error);\n          throw new Meteor.Error(\"An error occurred saving the order\", cartId, error);\n        }\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/checkout/client/methods/cart.js"],"names":["Meteor","check","Logger","Reaction","i18next","Cart","methods","paymentMethod","Schemas","PaymentMethod","checkoutCart","findOne","userId","cart","cartId","_id","invoice","shipping","cartShipping","subtotal","cartSubTotal","taxes","cartTaxes","discounts","cartDiscounts","total","cartTotal","selector","update","billing","$set","$addToSet","error","result","debug","Error","call","Router","go","Alerts","inline","t","autoHide","placement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAc,AACvB,AAAS,AAAa,AACtB,AAAS,AAAQ,AAAU,AAAe,AAC1C,AAAS,AAAY,AAErB,AACA;;AACA,AAAO,AAAQ;AACb;AACE,AAAM,wBAAe,UAAA,AAAS,AAAQ;UAChC,eAAe,AAAK,SAAL,AAAa,QAChC;QAAQ,AAAO;AADjB,qBAIA,AAAM,AAAO,AAAQ;AAJA,AAAa,KACxB;;sBAIV;;QAAM,SAAS,KAAf,AAAoB,AACpB;QAAM;gBACM,KADI,AACJ,AAAK,AACf;gBAAU,KAFI,AAEJ,AAAK,AACf;aAAO,KAHO,AAGP,AAAK,AACZ;iBAAW,KAJG,AAIH,AAAK,AAChB;aAAO,KAboC,AAQ7C,AAAgB,AAKP,AAAK,AAEd,AACA;AARgB,AACd,MARF,AACA,CAeA;;AAEA,AAAI,AACJ;;QApB6C,AAoB7C,AAAI,AACJ,AACA;yBACA;AAAA,AAAI,AAAK,AAAS,AAChB;;aAAW,SACT;AAAO;eADT,AAAW,AAEM,AAAK,AAAQ,AAAG;uCAEjC,AAAS,AACP;AALS,AAET;AAGM;;AAEiB,qCAFjB;+BANV,AAKE,AAAS,AAMV,AAAM,AACL;AANQ,AACuB,AAC3B;AADA;WAKO,AACT;AAAK;aAEP,AAAS,AACP;AAJF,AAAW;;;AAMY,mCAFV;6BADb,AAAS,AAMV;AALc,AACgB,AACzB;AAFS,AACT;AAMN,AAAK,AAAO,AAAU,AAAQ,AAAU,AAAO,AAAQ,AACrD;;SAAA,AAAI,OAAO,2CACT;UAAO,OAAP,AAAa,AAAO,AACpB;AAAM,eAAI,MAAO,OAFnB,AAEE,AAAM,AAAiB,AAAsC,AAC9D;AAAM,qEACL;aACA;AAFK,AAEL,AAAO,AAAK,AAA6B,AAAoB,AAC7D;qEACA,qBAAA,AAAI,AAAW,AAAG,AAChB;;YAAS,WAAT,GAAA,AAAgB,AAAG,AAAkB,AAAI,AACvC;AAAK;iBAFT,AAIC,AAAM,AACL;AAJA,AAAyC;eAIzC,AAAO,AAAO,AAAQ,AAAE,AAAuC,AAAU,AACvE;iBAAU,OAD6D;sBAAzE,AAAyE,AAE5D;uBAEb,AAAO,AAAM,AAAO,AAAsC,AAAQ,AAClE;AAHE;AAGI,iBAAI,MAAO,OAAX,AAAiB,sCAAjB,AAAuD,QAA7D,AAAM,AAA+D,AACtE;+EACF;AApBH,AAqBC;AACF;AArEH,AAAe;;AACS,AAAU,AAAe,AAC7C","file":"/imports/plugins/core/checkout/client/methods/cart.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Logger, Reaction, i18next } from \"/client/api\";\nimport { Cart } from \"/lib/collections\";\n\n// Client Cart Methods\n// Stubs with matching server methods.\nMeteor.methods({\n  \"cart/submitPayment\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    const checkoutCart = Cart.findOne({\n      userId: Meteor.userId()\n    });\n\n    const cart = _.clone(checkoutCart);\n    const cartId = cart._id;\n    const invoice = {\n      shipping: cart.cartShipping(),\n      subtotal: cart.cartSubTotal(),\n      taxes: cart.cartTaxes(),\n      discounts: cart.cartDiscounts(),\n      total: cart.cartTotal()\n    };\n    // we won't actually close the order at this stage.\n    // we'll just update the workflow and billing data where\n    // method-hooks can process the workflow update.\n\n    let selector;\n    let update;\n    // temp hack until we build out multiple billing handlers\n    // if we have an existing item update it, otherwise add to set.\n    if (cart.billing) {\n      selector = {\n        \"_id\": cartId,\n        \"billing._id\": cart.billing[0]._id\n      };\n      update = {\n        $set: {\n          \"billing.$.paymentMethod\": paymentMethod,\n          \"billing.$.invoice\": invoice\n        }\n      };\n    } else {\n      selector = {\n        _id: cartId\n      };\n      update = {\n        $addToSet: {\n          \"billing.paymentMethod\": paymentMethod,\n          \"billing.invoice\": invoice\n        }\n      };\n    }\n\n    Cart.update(selector, update, function (error, result) {\n      if (error) {\n        Logger.debug(error, \"An error occurred saving the order\");\n        throw new Meteor.Error(\"An error occurred saving the order\", error);\n      } else {\n        // it's ok and a safety check for this to be called multiple times\n        Meteor.call(\"workflow/pushCartWorkflow\", \"coreCartWorkflow\", \"paymentSubmitted\");\n        // Client Stub Actions\n        if (result === 1) {\n          Reaction.Router.go(\"cart/completed\", {}, {\n            _id: cartId\n          });\n        } else {\n          Alerts.inline(i18next.t(\"checkoutPayment.failedToPlaceOrder\"), \"danger\", {\n            autoHide: true,\n            placement: \"paymentMethod\"\n          });\n          Logger.debug(error, \"An error occurred saving the order\", cartId, error);\n          throw new Meteor.Error(\"An error occurred saving the order\", cartId, error);\n        }\n      }\n    });\n  }\n});\n"]},"hash":"dfa68aa0ea2c7f4a08188a1abf872c7a780f10ea"}
