{"metadata":{"usedHelpers":["classCallCheck","toConsumableArray","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/ongoworks:security/lib/server/Security.Check.js","filenameRelative":"/packages/ongoworks:security/lib/server/Security.Check.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ongoworks:security/lib/server/Security.Check.js.map","sourceFileName":"/packages/ongoworks:security/lib/server/Security.Check.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Security.Check"},"ignored":false,"code":"var _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nSecurity.Check = function () {\n  function _class(userId) {\n    (0, _classCallCheck3.default)(this, _class);\n    this.userId = userId || null;\n  }\n\n  _class.prototype.for = function () {\n    function _for(collection) {\n      this.collection = collection;\n      this.collectionName = getCollectionName(collection);\n      return this;\n    }\n\n    return _for;\n  }();\n\n  _class.prototype.insert = function () {\n    function insert(doc) {\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);\n      this.type = 'insert';\n      this.doc = doc;\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this.args = args;\n      return this;\n    }\n\n    return insert;\n  }();\n\n  _class.prototype.update = function () {\n    function update(doc, modifier) {\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);\n      this.type = 'update';\n      this.doc = doc;\n      this.modifier = modifier;\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      this.args = args;\n      return this;\n    }\n\n    return update;\n  }();\n\n  _class.prototype.remove = function () {\n    function remove(doc) {\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);\n      this.type = 'remove';\n      this.doc = doc;\n\n      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      this.args = args;\n      return this;\n    }\n\n    return remove;\n  }();\n\n  _class.prototype.read = function () {\n    function read(doc) {\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);\n      this.type = 'read';\n      this.doc = doc;\n\n      for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      this.args = args;\n      return this;\n    }\n\n    return read;\n  }();\n\n  _class.prototype.download = function () {\n    function download(doc) {\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);\n      this.type = 'download';\n      this.doc = doc;\n\n      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      this.args = args;\n      return this;\n    }\n\n    return download;\n  }(); // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).check()\n  // Security.can(userId).update(id, modifier).for(MyCollection).check()\n  // Security.can(userId).remove(id).for(MyCollection).check()\n\n\n  _class.prototype.check = function () {\n    function check() {\n      var _this = this;\n\n      // Select only those rules that apply to this operation type\n      var rules = getRulesForCollectionAndType(this.collectionName, this.type); // If this.doc is an ID, we will look up the doc, fetching only the fields needed.\n      // To find out which fields are needed, we will combine all the `fetch` arrays from\n      // all the restrictions in all the rules.\n\n      if (typeof this.doc === 'string' || this.doc instanceof MongoID.ObjectID) {\n        var fields = {};\n\n        _.every(rules, function (rule) {\n          var fetch = rule.combinedFetch();\n\n          if (fetch === null) {\n            fields = null;\n            return false; // Exit loop\n          }\n\n          rule.combinedFetch().forEach(function (field) {\n            fields[field] = 1;\n          });\n          return true;\n        });\n\n        var options = {};\n\n        if (fields) {\n          if (_.isEmpty(fields)) {\n            options = {\n              _id: 1\n            };\n          } else {\n            options = {\n              fields: fields\n            };\n          }\n        }\n\n        this.doc = this.collection.findOne(this.doc, options);\n      } // Loop through all defined rules for this collection. There is an OR relationship among\n      // all rules for the collection, so if any \"allow\" function DO return true, we allow.\n\n\n      return _.any(rules, function (rule) {\n        return rule.allow.apply(rule, [_this.type, _this.collection, _this.userId, _this.doc, _this.modifier].concat((0, _toConsumableArray3.default)(_this.args)));\n      });\n    }\n\n    return check;\n  }(); // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).throw()\n  // Security.can(userId).update(id, modifier).for(MyCollection).throw()\n  // Security.can(userId).remove(id).for(MyCollection).throw()\n\n\n  _class.prototype.throw = function () {\n    function _throw() {\n      if (!this.check()) throw new Meteor.Error('access-denied', Security.errorMessages.notAllowed);\n    }\n\n    return _throw;\n  }();\n\n  return _class;\n}();","map":{"version":3,"sources":["/packages/ongoworks:security/lib/server/Security.Check.js"],"names":["Security","Check","userId","for","collection","collectionName","getCollectionName","insert","doc","type","Error","errorMessages","multipleCan","args","update","modifier","remove","read","download","check","rules","getRulesForCollectionAndType","MongoID","ObjectID","fields","_","every","fetch","rule","combinedFetch","forEach","field","options","isEmpty","_id","findOne","any","allow","throw","Meteor","notAllowed"],"mappings":"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","file":"/packages/ongoworks:security/lib/server/Security.Check.js.map","sourcesContent":["Security.Check = class {\n  constructor(userId) {\n    this.userId = userId || null;\n  }\n\n  for(collection) {\n    this.collection = collection;\n    this.collectionName = getCollectionName(collection);\n    return this;\n  }\n\n  insert(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'insert';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  update(doc, modifier, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'update';\n    this.doc = doc;\n    this.modifier = modifier;\n    this.args = args;\n    return this;\n  }\n\n  remove(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'remove';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  read(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'read';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  download(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'download';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).check()\n  // Security.can(userId).update(id, modifier).for(MyCollection).check()\n  // Security.can(userId).remove(id).for(MyCollection).check()\n  check() {\n    // Select only those rules that apply to this operation type\n    const rules = getRulesForCollectionAndType(this.collectionName, this.type);\n\n    // If this.doc is an ID, we will look up the doc, fetching only the fields needed.\n    // To find out which fields are needed, we will combine all the `fetch` arrays from\n    // all the restrictions in all the rules.\n    if (typeof this.doc === 'string' || this.doc instanceof MongoID.ObjectID) {\n      let fields = {};\n      _.every(rules, rule => {\n        const fetch = rule.combinedFetch();\n        if (fetch === null) {\n          fields = null;\n          return false; // Exit loop\n        }\n        rule.combinedFetch().forEach(field => {\n          fields[field] = 1;\n        });\n        return true;\n      });\n\n      let options = {};\n      if (fields) {\n        if (_.isEmpty(fields)) {\n          options = {_id: 1};\n        } else {\n          options = {fields};\n        }\n      }\n      this.doc = this.collection.findOne(this.doc, options);\n    }\n\n    // Loop through all defined rules for this collection. There is an OR relationship among\n    // all rules for the collection, so if any \"allow\" function DO return true, we allow.\n    return _.any(rules, rule => rule.allow(this.type, this.collection, this.userId, this.doc, this.modifier, ...this.args));\n  }\n\n  // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).throw()\n  // Security.can(userId).update(id, modifier).for(MyCollection).throw()\n  // Security.can(userId).remove(id).for(MyCollection).throw()\n  throw() {\n    if (!this.check()) throw new Meteor.Error('access-denied', Security.errorMessages.notAllowed);\n  }\n}\n"]},"hash":"10a5518d94ed57ac2ea3e53d425b0202b16b64d4"}
