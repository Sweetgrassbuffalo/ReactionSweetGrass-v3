{"metadata":{"usedHelpers":["classCallCheck","typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/react-meteor-data/ReactMeteorData.jsx","filenameRelative":"/packages/react-meteor-data/ReactMeteorData.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/react-meteor-data/ReactMeteorData.jsx.map","sourceFileName":"/packages/react-meteor-data/ReactMeteorData.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ReactMeteorData"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar ReactMeteorData = {\n  componentWillMount: function () {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n\n    var newData = this._meteorDataManager.calculateData();\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUpdate: function (nextProps, nextState) {\n    var saveProps = this.props;\n    var saveState = this.state;\n    var newData = void 0;\n\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUnmount: function () {\n    this._meteorDataManager.dispose();\n  }\n}; // A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\n\nvar MeteorDataManager = function () {\n  function MeteorDataManager(component) {\n    (0, _classCallCheck3.default)(this, MeteorDataManager);\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  MeteorDataManager.prototype.dispose = function () {\n    function dispose() {\n      if (this.computation) {\n        this.computation.stop();\n        this.computation = null;\n      }\n    }\n\n    return dispose;\n  }();\n\n  MeteorDataManager.prototype.calculateData = function () {\n    function calculateData() {\n      var component = this.component;\n\n      if (!component.getMeteorData) {\n        return null;\n      } // When rendering on the server, we don't want to use the Tracker.\n      // We only do the first rendering on the server so we can get the data right away\n\n\n      if (Meteor.isServer) {\n        return component.getMeteorData();\n      }\n\n      if (this.computation) {\n        this.computation.stop();\n        this.computation = null;\n      }\n\n      var data = void 0; // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n      // This can happen if someone calls `ReactDOM.render` inside a Computation.\n      // In that case, we want to opt out of the normal behavior of nested\n      // Computations, where if the outer one is invalidated or stopped,\n      // it stops the inner one.\n\n      this.computation = Tracker.nonreactive(function () {\n        return Tracker.autorun(function (c) {\n          if (c.firstRun) {\n            var savedSetState = component.setState;\n\n            try {\n              component.setState = function () {\n                throw new Error(\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" + \" loop. To respond to Meteor data changing, consider making this component\" + \" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" + \" a child component. Then you can use `componentWillReceiveProps` in that\" + \" child component.\");\n              };\n\n              data = component.getMeteorData();\n            } finally {\n              component.setState = savedSetState;\n            }\n          } else {\n            // Stop this computation instead of using the re-run.\n            // We use a brand-new autorun for each call to getMeteorData\n            // to capture dependencies on any reactive data sources that\n            // are accessed.  The reason we can't use a single autorun\n            // for the lifetime of the component is that Tracker only\n            // re-runs autoruns at flush time, while we need to be able to\n            // re-call getMeteorData synchronously whenever we want, e.g.\n            // from componentWillUpdate.\n            c.stop(); // Calling forceUpdate() triggers componentWillUpdate which\n            // recalculates getMeteorData() and re-renders the component.\n\n            component.forceUpdate();\n          }\n        });\n      });\n\n      if (Package.mongo && Package.mongo.Mongo) {\n        Object.keys(data).forEach(function (key) {\n          if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n            console.warn(\"Warning: you are returning a Mongo cursor from getMeteorData. This value \" + \"will not be reactive. You probably want to call `.fetch()` on the cursor \" + \"before returning it.\");\n          }\n        });\n      }\n\n      return data;\n    }\n\n    return calculateData;\n  }();\n\n  MeteorDataManager.prototype.updateData = function () {\n    function updateData(newData) {\n      var component = this.component;\n      var oldData = this.oldData;\n\n      if (!(newData && (typeof newData === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(newData)) === 'object')) {\n        throw new Error(\"Expected object returned from getMeteorData\");\n      } // update componentData in place based on newData\n\n\n      for (var key in meteorBabelHelpers.sanitizeForInObject(newData)) {\n        component.data[key] = newData[key];\n      } // if there is oldData (which is every time this method is called\n      // except the first), delete keys in newData that aren't in\n      // oldData.  don't interfere with other keys, in case we are\n      // co-existing with something else that writes to a component's\n      // this.data.\n\n\n      if (oldData) {\n        for (var _key in meteorBabelHelpers.sanitizeForInObject(oldData)) {\n          if (!(_key in newData)) {\n            delete component.data[_key];\n          }\n        }\n      }\n\n      this.oldData = newData;\n    }\n\n    return updateData;\n  }();\n\n  return MeteorDataManager;\n}();\n\nmodule.export(\"default\", exports.default = ReactMeteorData);","map":{"version":3,"sources":["/packages/react-meteor-data/ReactMeteorData.jsx"],"names":["ReactMeteorData","componentWillMount","data","_meteorDataManager","MeteorDataManager","newData","calculateData","updateData","componentWillUpdate","nextProps","nextState","saveProps","props","saveState","state","componentWillUnmount","dispose","component","computation","oldData","stop","getMeteorData","Meteor","isServer","Tracker","nonreactive","autorun","c","firstRun","savedSetState","setState","Error","forceUpdate","Package","mongo","Mongo","Object","keys","forEach","key","Cursor","console","warn","module","export","exports","default"],"mappings":"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","file":"/packages/react-meteor-data/ReactMeteorData.jsx.map","sourcesContent":["const ReactMeteorData = {\n  componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n    const newData = this._meteorDataManager.calculateData();\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUpdate(nextProps, nextState) {\n    const saveProps = this.props;\n    const saveState = this.state;\n    let newData;\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  },\n};\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nclass MeteorDataManager {\n  constructor(component) {\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  }\n\n  calculateData() {\n    const component = this.component;\n\n    if (! component.getMeteorData) {\n      return null;\n    }\n\n    // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    let data;\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n    this.computation = Tracker.nonreactive(() => {\n      return Tracker.autorun((c) => {\n        if (c.firstRun) {\n          const savedSetState = component.setState;\n          try {\n            component.setState = () => {\n              throw new Error(\n\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" +\n\" loop. To respond to Meteor data changing, consider making this component\" +\n\" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" +\n\" a child component. Then you can use `componentWillReceiveProps` in that\" +\n\" child component.\");\n            };\n\n            data = component.getMeteorData();\n          } finally {\n            component.setState = savedSetState;\n          }\n        } else {\n          // Stop this computation instead of using the re-run.\n          // We use a brand-new autorun for each call to getMeteorData\n          // to capture dependencies on any reactive data sources that\n          // are accessed.  The reason we can't use a single autorun\n          // for the lifetime of the component is that Tracker only\n          // re-runs autoruns at flush time, while we need to be able to\n          // re-call getMeteorData synchronously whenever we want, e.g.\n          // from componentWillUpdate.\n          c.stop();\n          // Calling forceUpdate() triggers componentWillUpdate which\n          // recalculates getMeteorData() and re-renders the component.\n          component.forceUpdate();\n        }\n      });\n    });\n\n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach(function (key) {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn(\n  \"Warning: you are returning a Mongo cursor from getMeteorData. This value \" +\n  \"will not be reactive. You probably want to call `.fetch()` on the cursor \" +\n  \"before returning it.\");\n        }\n      });\n    }\n\n    return data;\n  }\n\n  updateData(newData) {\n    const component = this.component;\n    const oldData = this.oldData;\n\n    if (! (newData && (typeof newData) === 'object')) {\n      throw new Error(\"Expected object returned from getMeteorData\");\n    }\n    // update componentData in place based on newData\n    for (let key in newData) {\n      component.data[key] = newData[key];\n    }\n    // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n    if (oldData) {\n      for (let key in oldData) {\n        if (!(key in newData)) {\n          delete component.data[key];\n        }\n      }\n    }\n    this.oldData = newData;\n  }\n}\n\nexport default ReactMeteorData;\n"]},"hash":"e4fe55eb4b2e182185ebe4d32633d28f429fd772"}
