{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/lib/collections","imported":["AnalyticsEvents"],"specifiers":[{"kind":"named","imported":"AnalyticsEvents","local":"AnalyticsEvents"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/analytics/server/security.js","filenameRelative":"/imports/plugins/included/analytics/server/security.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/analytics/server/security.js"],"names":["Meteor","AnalyticsEvents","Reaction","Logger","startup","i","handle","setInterval","shopId","getShopId","permit","ifLoggedIn","allowInClientCode","ifHasRole","role","group","clearInterval","warn"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAuB,AAChC,AAAS,AAAU,AAAc,AAGjC,AAAO,AAAQ,AAAM,AACnB,AAAI,AAAI;AAER,OAAM,QAAS,YAAA,AAAO,AAAY,AAAM,AACtC;UACA,AAAM,AAAS,AAAS;8CAExB;AAAA,AAAI,AAAQ,AACV;iBAAgB,SAAhB,AAAuB,AAAU,AAAa,AAE9C,AAAgB,AAAO,AAAC,AAAU,AAAW,AAAU,AACrD;;QAAM,AAAC,QAD8C,AAC/C,AAAU,AAChB;AAAO,oDAFT,AAAuD,AAGpD,AAEH;AAAO,AAAO,8BAAP,AAAqB,UAA5B,AAAO;;eAGT,AAAI;AAFH,SAED,AAAQ,AAAI,AACV,AACA;aAAO,OAAP,AAAqB,cACrB;AAAA,AAAO,AAAK,AACb;;gBAED;AArBa,AAqBb,AAAO,AACR,AAAE;AAtBH,AAAe,2BAHjB,AA0BC","file":"/imports/plugins/included/analytics/server/security.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { AnalyticsEvents } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\n\nMeteor.startup(() => {\n  let i = 0;\n\n  const handle = Meteor.setInterval(() => {\n    i++;\n    const shopId = Reaction.getShopId();\n\n    if (shopId) {\n      AnalyticsEvents.permit(\"insert\").ifLoggedIn().allowInClientCode();\n\n      AnalyticsEvents.permit([\"update\", \"remove\"]).ifHasRole({\n        role: [\"admin\", \"owner\"],\n        group: shopId\n      }).allowInClientCode();\n\n      return Meteor.clearInterval(handle);\n    }\n\n    if (i > 30) {\n      // stop checking and warn if the shopId isn't available within 30 secs\n      Meteor.clearInterval(handle);\n      Logger.warn(\"Error getting shopId for 'AnalyticsEvents.permit()'\");\n    }\n\n    return null;\n  }, 1000);\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/analytics/server/security.js.map","sourceFileName":"/imports/plugins/included/analytics/server/security.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"security"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar AnalyticsEvents = void 0;\nmodule.importSync(\"/lib/collections\", {\n  AnalyticsEvents: function (v) {\n    AnalyticsEvents = v;\n  }\n}, 1);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 2);\nMeteor.startup(function () {\n  var i = 0;\n  var handle = Meteor.setInterval(function () {\n    i++;\n    var shopId = Reaction.getShopId();\n\n    if (shopId) {\n      AnalyticsEvents.permit(\"insert\").ifLoggedIn().allowInClientCode();\n      AnalyticsEvents.permit([\"update\", \"remove\"]).ifHasRole({\n        role: [\"admin\", \"owner\"],\n        group: shopId\n      }).allowInClientCode();\n      return Meteor.clearInterval(handle);\n    }\n\n    if (i > 30) {\n      // stop checking and warn if the shopId isn't available within 30 secs\n      Meteor.clearInterval(handle);\n      Logger.warn(\"Error getting shopId for 'AnalyticsEvents.permit()'\");\n    }\n\n    return null;\n  }, 1000);\n});","map":{"version":3,"sources":["/imports/plugins/included/analytics/server/security.js"],"names":["Meteor","AnalyticsEvents","Reaction","Logger","startup","i","handle","setInterval","shopId","getShopId","permit","ifLoggedIn","allowInClientCode","ifHasRole","role","group","clearInterval","warn"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAuB,AAChC,AAAS,AAAU,AAAc,AAGjC,AAAO,AAAQ,AAAM,AACnB,AAAI,AAAI;AAER,OAAM,QAAS,YAAA,AAAO,AAAY,AAAM,AACtC;UACA,AAAM,AAAS,AAAS;8CAExB;AAAA,AAAI,AAAQ,AACV;iBAAgB,SAAhB,AAAuB,AAAU,AAAa,AAE9C,AAAgB,AAAO,AAAC,AAAU,AAAW,AAAU,AACrD;;QAAM,AAAC,QAD8C,AAC/C,AAAU,AAChB;AAAO,oDAFT,AAAuD,AAGpD,AAEH;AAAO,AAAO,8BAAP,AAAqB,UAA5B,AAAO;;eAGT,AAAI;AAFH,SAED,AAAQ,AAAI,AACV,AACA;aAAO,OAAP,AAAqB,cACrB;AAAA,AAAO,AAAK,AACb;;gBAED;AArBa,AAqBb,AAAO,AACR,AAAE;AAtBH,AAAe,2BAHjB,AA0BC","file":"/imports/plugins/included/analytics/server/security.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { AnalyticsEvents } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\n\nMeteor.startup(() => {\n  let i = 0;\n\n  const handle = Meteor.setInterval(() => {\n    i++;\n    const shopId = Reaction.getShopId();\n\n    if (shopId) {\n      AnalyticsEvents.permit(\"insert\").ifLoggedIn().allowInClientCode();\n\n      AnalyticsEvents.permit([\"update\", \"remove\"]).ifHasRole({\n        role: [\"admin\", \"owner\"],\n        group: shopId\n      }).allowInClientCode();\n\n      return Meteor.clearInterval(handle);\n    }\n\n    if (i > 30) {\n      // stop checking and warn if the shopId isn't available within 30 secs\n      Meteor.clearInterval(handle);\n      Logger.warn(\"Error getting shopId for 'AnalyticsEvents.permit()'\");\n    }\n\n    return null;\n  }, 1000);\n});\n"]},"hash":"46d998918d7072236c99f24fdc4d3dcfc9ee24c8"}
