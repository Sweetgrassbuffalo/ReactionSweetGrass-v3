{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/get","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_get"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/client/api","imported":["Reaction","i18next"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/lib/collections","imported":["Packages","Accounts"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"},{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"/lib/collections/schemas/accounts","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"AccountsSchema"}]},{"source":"/client/collections","imported":["TaxEntityCodes"],"specifiers":[{"kind":"named","imported":"TaxEntityCodes","local":"TaxEntityCodes"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/taxes-avalara/client/accounts/exemption.js","filenameRelative":"/imports/plugins/included/taxes-avalara/client/accounts/exemption.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/client/accounts/exemption.js"],"names":["Meteor","Template","Reaction","i18next","Packages","Accounts","AccountsSchema","TaxEntityCodes","entityCodeList","currentAccount","taxSettingsPanel","onCreated","subscribe","userId","helpers","account","instance","subscriptionsReady","findOne","member","makeUniqueId","accountsSchema","entityCodes","customOption","label","t","value","find","map","entityCode","Object","assign","name","code","a","concat","events","event","stopPropagation","formId","$","currentTarget","closest","attr","isCustomValue","currType","indexOf","val","toggleClass","addClass","avalaraPackage","shopId","getShopId","isAvalaraEnabled","currentCodes","fetch","length","call","error","Alerts","toast","message","forEach","insert","AutoForm","addHooks","before","update","doc","oldType","$set","$unset","formData","getFormValues"],"mappings":"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","file":"/imports/plugins/included/taxes-avalara/client/accounts/exemption.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { Packages, Accounts } from \"/lib/collections\";\nimport { Accounts as AccountsSchema } from \"/lib/collections/schemas/accounts\";\nimport { TaxEntityCodes } from \"/client/collections\";\n\nlet entityCodeList = [];\nlet currentAccount;\n\nTemplate.taxSettingsPanel.onCreated(function () {\n  this.subscribe(\"UserAccount\", Meteor.userId());\n});\n\nTemplate.taxSettingsPanel.helpers({\n  account() {\n    if (Template.instance().subscriptionsReady()) {\n      const account = Accounts.findOne(this.member.userId);\n      currentAccount = account;\n      return account;\n    }\n\n    return null;\n  },\n  makeUniqueId() {\n    return `tax-settings-form-${this.member.userId}`;\n  },\n  accountsSchema() {\n    return AccountsSchema;\n  },\n  entityCodes() {\n    const customOption = [{\n      label: i18next.t(\"admin.taxSettings.entityCodeCustomLabel\"),\n      value: \"CUSTOM USER INPUT\"\n    }];\n\n    const entityCodes = TaxEntityCodes.find().map((entityCode) => {\n      return Object.assign({}, entityCode, {\n        label: entityCode.name,\n        value: entityCode.code\n      });\n    });\n    entityCodeList = (entityCodes || []).map((a) => a.code);\n    return (entityCodes || []).concat(customOption);\n  }\n});\n\nTemplate.taxSettingsPanel.events({\n  \"change [data-event-action=customType]\": function (event) {\n    event.stopPropagation();\n    const formId = $(event.currentTarget.closest(\"form\")).attr(\"id\");\n\n    if (isCustomValue(formId)) {\n      // show input field for custom; pre-fill with existing custom val\n      const currType = _.get(currentAccount, \"taxSettings.customerUsageType\", \"\");\n      if (entityCodeList.indexOf(currType) < 0) {\n        $(\".customerUsageType input\").val(currType);\n      }\n      return $(\".customerUsageType\").toggleClass(\"hide\");\n    }\n\n    $(\".customerUsageType\").addClass(\"hide\");\n  }\n});\n\nTemplate.taxSettingsPanel.onCreated(function () {\n  const avalaraPackage = Packages.findOne({\n    name: \"taxes-avalara\",\n    shopId: Reaction.getShopId()\n  });\n  const isAvalaraEnabled = _.get(avalaraPackage, \"settings.avalara.enabled\", false);\n  const currentCodes = TaxEntityCodes.find().fetch();\n\n  if (isAvalaraEnabled && !currentCodes.length) {\n    Meteor.call(\"avalara/getEntityCodes\", (error, entityCodes) => {\n      if (error) {\n        return Alerts.toast(\n          `${i18next.t(\"settings.apiError\")} ${error.message}`, \"error\"\n        );\n      }\n      (entityCodes || []).forEach((entityCode) => TaxEntityCodes.insert(entityCode));\n    });\n  }\n});\n\nAutoForm.addHooks(null, {\n  before: {\n    update: function (doc) {\n      const oldType = _.get(Template.instance(), \"data.doc.taxSettings.customerUsageType\");\n      if (isCustomValue()) {\n        const value = $(\".customerUsageType input\").val();\n        doc.$set[\"taxSettings.customerUsageType\"] = value;\n      }\n      if (oldType && entityCodeList.indexOf(oldType) < 0) {\n        delete doc.$unset; // there's existing custom value.... this prevent autoform override\n      }\n\n      return doc;\n    }\n  }\n});\n\n/**\n * @summary Checks if customerUsageType is set to \"custom\"\n * @param {String} formId - Id of the Autoform instance..\n * @returns {boolean} - true if Custom Entity Type is set\n */\nfunction isCustomValue(formId) {\n  const formData = AutoForm.getFormValues(formId);\n  const value = _.get(formData, \"insertDoc.taxSettings.customerUsageType\");\n  return value === \"CUSTOM USER INPUT\";\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/taxes-avalara/client/accounts/exemption.js.map","sourceFileName":"/imports/plugins/included/taxes-avalara/client/accounts/exemption.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"exemption"},"ignored":false,"code":"var _get = void 0;\n\nmodule.importSync(\"lodash/get\", {\n  \"default\": function (v) {\n    _get = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 2);\nvar Reaction = void 0,\n    i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 3);\nvar Packages = void 0,\n    Accounts = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  },\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 4);\nvar AccountsSchema = void 0;\nmodule.importSync(\"/lib/collections/schemas/accounts\", {\n  Accounts: function (v) {\n    AccountsSchema = v;\n  }\n}, 5);\nvar TaxEntityCodes = void 0;\nmodule.importSync(\"/client/collections\", {\n  TaxEntityCodes: function (v) {\n    TaxEntityCodes = v;\n  }\n}, 6);\nvar entityCodeList = [];\nvar currentAccount = void 0;\nTemplate.taxSettingsPanel.onCreated(function () {\n  this.subscribe(\"UserAccount\", Meteor.userId());\n});\nTemplate.taxSettingsPanel.helpers({\n  account: function () {\n    if (Template.instance().subscriptionsReady()) {\n      var account = Accounts.findOne(this.member.userId);\n      currentAccount = account;\n      return account;\n    }\n\n    return null;\n  },\n  makeUniqueId: function () {\n    return \"tax-settings-form-\" + this.member.userId;\n  },\n  accountsSchema: function () {\n    return AccountsSchema;\n  },\n  entityCodes: function () {\n    var customOption = [{\n      label: i18next.t(\"admin.taxSettings.entityCodeCustomLabel\"),\n      value: \"CUSTOM USER INPUT\"\n    }];\n    var entityCodes = TaxEntityCodes.find().map(function (entityCode) {\n      return Object.assign({}, entityCode, {\n        label: entityCode.name,\n        value: entityCode.code\n      });\n    });\n    entityCodeList = (entityCodes || []).map(function (a) {\n      return a.code;\n    });\n    return (entityCodes || []).concat(customOption);\n  }\n});\nTemplate.taxSettingsPanel.events({\n  \"change [data-event-action=customType]\": function (event) {\n    event.stopPropagation();\n    var formId = $(event.currentTarget.closest(\"form\")).attr(\"id\");\n\n    if (isCustomValue(formId)) {\n      // show input field for custom; pre-fill with existing custom val\n      var currType = _get(currentAccount, \"taxSettings.customerUsageType\", \"\");\n\n      if (entityCodeList.indexOf(currType) < 0) {\n        $(\".customerUsageType input\").val(currType);\n      }\n\n      return $(\".customerUsageType\").toggleClass(\"hide\");\n    }\n\n    $(\".customerUsageType\").addClass(\"hide\");\n  }\n});\nTemplate.taxSettingsPanel.onCreated(function () {\n  var avalaraPackage = Packages.findOne({\n    name: \"taxes-avalara\",\n    shopId: Reaction.getShopId()\n  });\n\n  var isAvalaraEnabled = _get(avalaraPackage, \"settings.avalara.enabled\", false);\n\n  var currentCodes = TaxEntityCodes.find().fetch();\n\n  if (isAvalaraEnabled && !currentCodes.length) {\n    Meteor.call(\"avalara/getEntityCodes\", function (error, entityCodes) {\n      if (error) {\n        return Alerts.toast(i18next.t(\"settings.apiError\") + \" \" + error.message, \"error\");\n      }\n\n      (entityCodes || []).forEach(function (entityCode) {\n        return TaxEntityCodes.insert(entityCode);\n      });\n    });\n  }\n});\nAutoForm.addHooks(null, {\n  before: {\n    update: function (doc) {\n      var oldType = _get(Template.instance(), \"data.doc.taxSettings.customerUsageType\");\n\n      if (isCustomValue()) {\n        var value = $(\".customerUsageType input\").val();\n        doc.$set[\"taxSettings.customerUsageType\"] = value;\n      }\n\n      if (oldType && entityCodeList.indexOf(oldType) < 0) {\n        delete doc.$unset; // there's existing custom value.... this prevent autoform override\n      }\n\n      return doc;\n    }\n  }\n}); /**\n     * @summary Checks if customerUsageType is set to \"custom\"\n     * @param {String} formId - Id of the Autoform instance..\n     * @returns {boolean} - true if Custom Entity Type is set\n     */\n\nfunction isCustomValue(formId) {\n  var formData = AutoForm.getFormValues(formId);\n\n  var value = _get(formData, \"insertDoc.taxSettings.customerUsageType\");\n\n  return value === \"CUSTOM USER INPUT\";\n}","map":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/client/accounts/exemption.js"],"names":["Meteor","Template","Reaction","i18next","Packages","Accounts","AccountsSchema","TaxEntityCodes","entityCodeList","currentAccount","taxSettingsPanel","onCreated","subscribe","userId","helpers","account","instance","subscriptionsReady","findOne","member","makeUniqueId","accountsSchema","entityCodes","customOption","label","t","value","find","map","entityCode","Object","assign","name","code","a","concat","events","event","stopPropagation","formId","$","currentTarget","closest","attr","isCustomValue","currType","indexOf","val","toggleClass","addClass","avalaraPackage","shopId","getShopId","isAvalaraEnabled","currentCodes","fetch","length","call","error","Alerts","toast","message","forEach","insert","AutoForm","addHooks","before","update","doc","oldType","$set","$unset","formData","getFormValues"],"mappings":"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","file":"/imports/plugins/included/taxes-avalara/client/accounts/exemption.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { Packages, Accounts } from \"/lib/collections\";\nimport { Accounts as AccountsSchema } from \"/lib/collections/schemas/accounts\";\nimport { TaxEntityCodes } from \"/client/collections\";\n\nlet entityCodeList = [];\nlet currentAccount;\n\nTemplate.taxSettingsPanel.onCreated(function () {\n  this.subscribe(\"UserAccount\", Meteor.userId());\n});\n\nTemplate.taxSettingsPanel.helpers({\n  account() {\n    if (Template.instance().subscriptionsReady()) {\n      const account = Accounts.findOne(this.member.userId);\n      currentAccount = account;\n      return account;\n    }\n\n    return null;\n  },\n  makeUniqueId() {\n    return `tax-settings-form-${this.member.userId}`;\n  },\n  accountsSchema() {\n    return AccountsSchema;\n  },\n  entityCodes() {\n    const customOption = [{\n      label: i18next.t(\"admin.taxSettings.entityCodeCustomLabel\"),\n      value: \"CUSTOM USER INPUT\"\n    }];\n\n    const entityCodes = TaxEntityCodes.find().map((entityCode) => {\n      return Object.assign({}, entityCode, {\n        label: entityCode.name,\n        value: entityCode.code\n      });\n    });\n    entityCodeList = (entityCodes || []).map((a) => a.code);\n    return (entityCodes || []).concat(customOption);\n  }\n});\n\nTemplate.taxSettingsPanel.events({\n  \"change [data-event-action=customType]\": function (event) {\n    event.stopPropagation();\n    const formId = $(event.currentTarget.closest(\"form\")).attr(\"id\");\n\n    if (isCustomValue(formId)) {\n      // show input field for custom; pre-fill with existing custom val\n      const currType = _.get(currentAccount, \"taxSettings.customerUsageType\", \"\");\n      if (entityCodeList.indexOf(currType) < 0) {\n        $(\".customerUsageType input\").val(currType);\n      }\n      return $(\".customerUsageType\").toggleClass(\"hide\");\n    }\n\n    $(\".customerUsageType\").addClass(\"hide\");\n  }\n});\n\nTemplate.taxSettingsPanel.onCreated(function () {\n  const avalaraPackage = Packages.findOne({\n    name: \"taxes-avalara\",\n    shopId: Reaction.getShopId()\n  });\n  const isAvalaraEnabled = _.get(avalaraPackage, \"settings.avalara.enabled\", false);\n  const currentCodes = TaxEntityCodes.find().fetch();\n\n  if (isAvalaraEnabled && !currentCodes.length) {\n    Meteor.call(\"avalara/getEntityCodes\", (error, entityCodes) => {\n      if (error) {\n        return Alerts.toast(\n          `${i18next.t(\"settings.apiError\")} ${error.message}`, \"error\"\n        );\n      }\n      (entityCodes || []).forEach((entityCode) => TaxEntityCodes.insert(entityCode));\n    });\n  }\n});\n\nAutoForm.addHooks(null, {\n  before: {\n    update: function (doc) {\n      const oldType = _.get(Template.instance(), \"data.doc.taxSettings.customerUsageType\");\n      if (isCustomValue()) {\n        const value = $(\".customerUsageType input\").val();\n        doc.$set[\"taxSettings.customerUsageType\"] = value;\n      }\n      if (oldType && entityCodeList.indexOf(oldType) < 0) {\n        delete doc.$unset; // there's existing custom value.... this prevent autoform override\n      }\n\n      return doc;\n    }\n  }\n});\n\n/**\n * @summary Checks if customerUsageType is set to \"custom\"\n * @param {String} formId - Id of the Autoform instance..\n * @returns {boolean} - true if Custom Entity Type is set\n */\nfunction isCustomValue(formId) {\n  const formData = AutoForm.getFormValues(formId);\n  const value = _.get(formData, \"insertDoc.taxSettings.customerUsageType\");\n  return value === \"CUSTOM USER INPUT\";\n}\n"]},"hash":"290ab27df1333a3f200d2327f352a0224df161dd"}
