{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","createClass","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"lodash/isEqual","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_isEqual"}]},{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"velocity-animate","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Velocity"}]},{"source":"velocity-animate/velocity.ui","imported":[],"specifiers":[]},{"source":"/imports/plugins/core/ui/client/components","imported":["Card","CardHeader","CardBody","CardGroup","Metadata","TextField","Translation","Select"],"specifiers":[{"kind":"named","imported":"Card","local":"Card"},{"kind":"named","imported":"CardHeader","local":"CardHeader"},{"kind":"named","imported":"CardBody","local":"CardBody"},{"kind":"named","imported":"CardGroup","local":"CardGroup"},{"kind":"named","imported":"Metadata","local":"Metadata"},{"kind":"named","imported":"TextField","local":"TextField"},{"kind":"named","imported":"Translation","local":"Translation"},{"kind":"named","imported":"Select","local":"Select"}]},{"source":"/client/api","imported":["Router"],"specifiers":[{"kind":"named","imported":"Router","local":"Router"}]},{"source":"/imports/plugins/core/ui/client/containers","imported":["TagListContainer"],"specifiers":[{"kind":"named","imported":"TagListContainer","local":"TagListContainer"}]},{"source":"react/lib/update","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"update"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/product-admin/client/components/productAdmin.js","filenameRelative":"/imports/plugins/included/product-admin/client/components/productAdmin.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/product-admin/client/components/productAdmin.js"],"names":["React","Component","PropTypes","Velocity","Card","CardHeader","CardBody","CardGroup","Metadata","TextField","Translation","Select","Router","TagListContainer","update","fieldNames","fieldGroups","title","group","handle","pageTitle","vendor","description","facebookMsg","twitterMsg","pinterestMsg","googleplusMsg","hashtags","metafields","ProductAdmin","constructor","props","state","expandedCard","fieldGroupForFieldName","editFocus","product","viewProps","componentWillReceiveProps","nextProps","nextProduct","currentProduct","fieldName","animateFieldFlash","cardGroupName","setState","field","Array","isArray","length","fieldData","fieldRef","refs","input","RunSequence","e","p","backgroundColor","o","duration","handleCardExpand","cardName","onCardExpand","handleDeleteProduct","onDeleteProduct","handleRestoreProduct","onRestoreProduct","handleFieldChange","event","value","newState","$merge","onFieldChange","handleSelectChange","onProductFieldSave","_id","handleToggleVisibility","isVisible","handleMetaChange","metafield","index","onMetaChange","handleFieldBlur","handleMetaSave","onMetaSave","handleMetaRemove","onMetaRemove","permalink","pathFor","hash","renderProductVisibilityLabel","isExpanded","groupName","render","bind","templates","template","originCountry","countries","fullWidth","newMetafield","propTypes","arrayOf","object","oneOfType","string","func","handleProductFieldChange","revisonDocumentIds","shape","label","any"],"mappings":"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","file":"/imports/plugins/included/product-admin/client/components/productAdmin.js.map","sourcesContent":["import { isEqual } from \"lodash\";\nimport React, { Component, PropTypes } from \"react\";\nimport Velocity from \"velocity-animate\";\nimport \"velocity-animate/velocity.ui\";\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardGroup,\n  Metadata,\n  TextField,\n  Translation,\n  Select\n} from \"/imports/plugins/core/ui/client/components\";\nimport { Router } from \"/client/api\";\nimport { TagListContainer } from \"/imports/plugins/core/ui/client/containers\";\nimport update from \"react/lib/update\";\n\nconst fieldNames = [\n  \"title\",\n  \"handle\",\n  \"subtitle\",\n  \"vendor\",\n  \"description\",\n  \"origincountry\",\n  \"facebookMsg\",\n  \"twitterMsg\",\n  \"pinterestMsg\",\n  \"googleplusMsg\"\n];\n\nconst fieldGroups = {\n  title: { group: \"productDetails\" },\n  handle: { group: \"productDetails\" },\n  pageTitle: { group: \"productDetails\" },\n  vendor: { group: \"productDetails\" },\n  description: { group: \"productDetails\" },\n  facebookMsg: { group: \"social\" },\n  twitterMsg: { group: \"social\" },\n  pinterestMsg: { group: \"social\" },\n  googleplusMsg: { group: \"social\" },\n  hashtags: { group: \"hashtags\" },\n  metafields: { group: \"metafields\" }\n};\n\nclass ProductAdmin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedCard: this.fieldGroupForFieldName(props.editFocus),\n      product: props.product,\n      viewProps: props.viewProps\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const nextProduct = nextProps.product || {};\n    const currentProduct = this.props.product || {};\n\n    if (!isEqual(nextProduct, currentProduct)) {\n      for (const fieldName of fieldNames) {\n        if (nextProduct[fieldName] !== currentProduct[fieldName]) {\n          this.animateFieldFlash(fieldName);\n        }\n      }\n    }\n\n    const cardGroupName = this.fieldGroupForFieldName(nextProps.editFocus);\n\n    this.setState({\n      expandedCard: cardGroupName,\n      viewProps: nextProps.viewProps\n    });\n\n    this.setState({\n      product: nextProps.product\n    });\n  }\n\n  fieldGroupForFieldName(field) {\n    // Other wise, if a field was passed\n    // const fieldName = this.state.viewProps.field;\n\n    let fieldName;\n\n    // If the field is an array of field name\n    if (Array.isArray(field) && field.length) {\n      // Use the first field name\n      fieldName = field[0];\n    } else {\n      fieldName = field;\n    }\n\n    const fieldData = fieldGroups[fieldName];\n\n    if (fieldData && fieldData.group) {\n      return fieldData.group;\n    }\n\n    return fieldName;\n  }\n\n  animateFieldFlash(fieldName) {\n    const fieldRef = this.refs[`${fieldName}Input`];\n\n    if (fieldRef) {\n      const input = fieldRef.refs.input;\n\n      Velocity.RunSequence([\n        { e: input, p: { backgroundColor: \"#e2f2e2\" }, o: { duration: 200 } },\n        { e: input, p: { backgroundColor: \"#fff\" }, o: { duration: 100 } }\n      ]);\n    }\n  }\n\n  handleCardExpand(cardName) {\n    if (this.props.onCardExpand) {\n      this.props.onCardExpand(cardName);\n    }\n  }\n\n  handleDeleteProduct = () => {\n    if (this.props.onDeleteProduct) {\n      this.props.onDeleteProduct(this.props.product);\n    }\n  }\n\n  handleRestoreProduct = () => {\n    if (this.props.onRestoreProduct) {\n      this.props.onRestoreProduct(this.props.product);\n    }\n  }\n\n\n  handleFieldChange = (event, value, field) => {\n    const newState = update(this.state, {\n      product: {\n        $merge: {\n          [field]: value\n        }\n      }\n    });\n\n    this.setState(newState, () => {\n      if (this.props.onFieldChange) {\n        this.props.onFieldChange(field, value);\n      }\n    });\n  }\n\n  handleSelectChange = (value, field) => {\n    if (this.props.onProductFieldSave) {\n      this.props.onProductFieldSave(this.product._id, field, value);\n    }\n  }\n\n  handleToggleVisibility = () => {\n    if (this.props.onProductFieldSave) {\n      this.props.onProductFieldSave(this.product._id, \"isVisible\", !this.product.isVisible);\n    }\n  }\n\n  handleMetaChange = (event, metafield, index) => {\n    if (this.props.onMetaChange) {\n      this.props.onMetaChange(metafield, index);\n    }\n  }\n\n  handleFieldBlur = (event, value, field) => {\n    if (this.props.onProductFieldSave) {\n      this.props.onProductFieldSave(this.product._id, field, value);\n    }\n  }\n\n  handleMetaSave = (event, metafield, index) => {\n    if (this.props.onMetaSave) {\n      this.props.onMetaSave(this.product._id, metafield, index);\n    }\n  }\n\n  handleMetaRemove = (event, metafield, index) => {\n    if (this.props.onMetaRemove) {\n      this.props.onMetaRemove(this.product._id, metafield, index);\n    }\n  }\n\n  get product() {\n    return this.state.product || this.props.product || {};\n  }\n\n  get permalink() {\n    if (this.props.product) {\n      return Router.pathFor(\"product\", {\n        hash: {\n          handle: this.props.product.handle\n        }\n      });\n    }\n\n    return \"\";\n  }\n\n  renderProductVisibilityLabel() {\n    if (this.product.isVisible) {\n      return (\n        <Translation defaultValue=\"Product is visible\" i18nKey=\"productDetailEdit.productIsVisible\" />\n      );\n    }\n\n    return (\n      <Translation defaultValue=\"Product is not visible\" i18nKey=\"productDetailEdit.productIsNotVisible\" />\n    );\n  }\n\n  isExpanded(groupName) {\n    if (this.state.expandedCard && this.state.expandedCard === groupName) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    return (\n      <CardGroup>\n        <Card\n          expanded={this.isExpanded(\"productDetails\")}\n          onExpand={this.handleCardExpand.bind(this, \"productDetails\")}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"productDetailEdit.productSettings\"\n            title=\"Product Settings\"\n            onChange={this.handleFieldChange}\n          />\n          <CardBody expandable={true}>\n            <Select\n              clearable={false}\n              i18nKeyLabel=\"productDetailEdit.template\"\n              i18nKeyPlaceholder=\"productDetailEdit.templateSelectPlaceholder\"\n              label=\"Template\"\n              name=\"template\"\n              onChange={this.handleSelectChange}\n              options={this.props.templates}\n              placeholder=\"Select a template\"\n              value={this.product.template}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.title\"\n              i18nKeyPlaceholder=\"productDetailEdit.title\"\n              label=\"Title\"\n              name=\"title\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              onReturnKeyDown={this.handleFieldBlur}\n              placeholder=\"Title\"\n              ref=\"titleInput\"\n              value={this.product.title}\n            />\n            <TextField\n              helpText={this.permalink}\n              i18nKeyLabel=\"productDetailEdit.permalink\"\n              i18nKeyPlaceholder=\"productDetailEdit.permalink\"\n              label=\"Permalink\"\n              name=\"handle\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              onReturnKeyDown={this.handleFieldBlur}\n              placeholder=\"Permalink\"\n              ref=\"handleInput\"\n              value={this.product.handle}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.pageTitle\"\n              i18nKeyPlaceholder=\"productDetailEdit.pageTitle\"\n              label=\"Subtitle\"\n              name=\"pageTitle\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              onReturnKeyDown={this.handleFieldBlur}\n              placeholder=\"Subtitle\"\n              ref=\"subtitleInput\"\n              value={this.product.pageTitle}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.vendor\"\n              i18nKeyPlaceholder=\"productDetailEdit.vendor\"\n              label=\"Vendor\"\n              name=\"vendor\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              onReturnKeyDown={this.handleFieldBlur}\n              placeholder=\"Vendor\"\n              ref=\"vendorInput\"\n              value={this.product.vendor}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.description\"\n              i18nKeyPlaceholder=\"productDetailEdit.description\"\n              label=\"Description\"\n              multiline={true}\n              name=\"description\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              placeholder=\"Description\"\n              ref=\"descriptionInput\"\n              value={this.product.description}\n            />\n            <Select\n              clearable={false}\n              i18nKeyLabel=\"productDetailEdit.originCountry\"\n              i18nKeyPlaceholder=\"productDetailEdit.originCountry\"\n              label=\"Origin Country\"\n              name=\"originCountry\"\n              onChange={this.handleSelectChange}\n              placeholder=\"Select a Country\"\n              ref=\"countryOfOriginInput\"\n              value={this.product.originCountry}\n              options={this.props.countries}\n            />\n          </CardBody>\n        </Card>\n        <Card\n          expanded={this.isExpanded(\"social\")}\n          onExpand={this.handleCardExpand.bind(this, \"social\")}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"social.socialTitle\"\n            title=\"Social\"\n          />\n          <CardBody expandable={true}>\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.facebookMsg\"\n              label=\"Facebook Message\"\n              multiline={true}\n              name=\"facebookMsg\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              ref=\"facebookMsgInput\"\n              value={this.product.facebookMsg}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.twitterMsg\"\n              label=\"Twitter Message\"\n              multiline={true}\n              name=\"twitterMsg\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              ref=\"twitterMsgInput\"\n              value={this.product.twitterMsg}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.pinterestMsg\"\n              label=\"Pinterest Message\"\n              multiline={true}\n              name=\"pinterestMsg\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              ref=\"pinterestMsgInput\"\n              value={this.product.pinterestMsg}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.googleplusMsg\"\n              label=\"Google+ Message\"\n              multiline={true}\n              name=\"googleplusMsg\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              ref=\"googleplusMsgInput\"\n              value={this.product.googleplusMsg}\n            />\n          </CardBody>\n        </Card>\n\n        <Card\n          expanded={this.isExpanded(\"hashtags\")}\n          onExpand={this.handleCardExpand.bind(this, \"hashtags\")}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"productDetail.tags\"\n            title=\"Tags\"\n          />\n          <CardBody expandable={true}>\n            <TagListContainer\n              enableNewTagForm={true}\n              product={this.product}\n              tagProps={{\n                fullWidth: true\n              }}\n            />\n          </CardBody>\n        </Card>\n\n        <Card\n          expanded={this.isExpanded(\"metafields\")}\n          onExpand={this.handleCardExpand.bind(this, \"metafields\")}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"productDetailEdit.details\"\n            title=\"Details\"\n          />\n          <CardBody expandable={true}>\n            <Metadata\n              metafields={this.product.metafields}\n              newMetafield={this.props.newMetafield}\n              onMetaChange={this.handleMetaChange}\n              onMetaRemove={this.handleMetaRemove}\n              onMetaSave={this.handleMetaSave}\n            />\n          </CardBody>\n        </Card>\n      </CardGroup>\n    );\n  }\n}\n\nProductAdmin.propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.object),\n  editFocus: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  handleFieldBlur: PropTypes.func,\n  handleFieldChange: PropTypes.func,\n  handleProductFieldChange: PropTypes.func,\n  newMetafield: PropTypes.object,\n  onCardExpand: PropTypes.func,\n  onDeleteProduct: PropTypes.func,\n  onFieldChange: PropTypes.func,\n  onMetaChange: PropTypes.func,\n  onMetaRemove: PropTypes.func,\n  onMetaSave: PropTypes.func,\n  onProductFieldSave: PropTypes.func,\n  onRestoreProduct: PropTypes.func,\n  product: PropTypes.object,\n  revisonDocumentIds: PropTypes.arrayOf(PropTypes.string),\n  templates: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.any\n  })),\n  viewProps: PropTypes.object\n};\n\nexport default ProductAdmin;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/product-admin/client/components/productAdmin.js.map","sourceFileName":"/imports/plugins/included/product-admin/client/components/productAdmin.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"productAdmin"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _isEqual = void 0;\n\nmodule.importSync(\"lodash/isEqual\", {\n  \"default\": function (v) {\n    _isEqual = v;\n  }\n}, 0);\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar Velocity = void 0;\nmodule.importSync(\"velocity-animate\", {\n  \"default\": function (v) {\n    Velocity = v;\n  }\n}, 2);\nmodule.importSync(\"velocity-animate/velocity.ui\");\nvar Card = void 0,\n    CardHeader = void 0,\n    CardBody = void 0,\n    CardGroup = void 0,\n    Metadata = void 0,\n    TextField = void 0,\n    Translation = void 0,\n    Select = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  Card: function (v) {\n    Card = v;\n  },\n  CardHeader: function (v) {\n    CardHeader = v;\n  },\n  CardBody: function (v) {\n    CardBody = v;\n  },\n  CardGroup: function (v) {\n    CardGroup = v;\n  },\n  Metadata: function (v) {\n    Metadata = v;\n  },\n  TextField: function (v) {\n    TextField = v;\n  },\n  Translation: function (v) {\n    Translation = v;\n  },\n  Select: function (v) {\n    Select = v;\n  }\n}, 4);\nvar Router = void 0;\nmodule.importSync(\"/client/api\", {\n  Router: function (v) {\n    Router = v;\n  }\n}, 5);\nvar TagListContainer = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/containers\", {\n  TagListContainer: function (v) {\n    TagListContainer = v;\n  }\n}, 6);\nvar update = void 0;\nmodule.importSync(\"react/lib/update\", {\n  \"default\": function (v) {\n    update = v;\n  }\n}, 7);\nvar fieldNames = [\"title\", \"handle\", \"subtitle\", \"vendor\", \"description\", \"origincountry\", \"facebookMsg\", \"twitterMsg\", \"pinterestMsg\", \"googleplusMsg\"];\nvar fieldGroups = {\n  title: {\n    group: \"productDetails\"\n  },\n  handle: {\n    group: \"productDetails\"\n  },\n  pageTitle: {\n    group: \"productDetails\"\n  },\n  vendor: {\n    group: \"productDetails\"\n  },\n  description: {\n    group: \"productDetails\"\n  },\n  facebookMsg: {\n    group: \"social\"\n  },\n  twitterMsg: {\n    group: \"social\"\n  },\n  pinterestMsg: {\n    group: \"social\"\n  },\n  googleplusMsg: {\n    group: \"social\"\n  },\n  hashtags: {\n    group: \"hashtags\"\n  },\n  metafields: {\n    group: \"metafields\"\n  }\n};\n\nvar ProductAdmin = function (_Component) {\n  (0, _inherits3.default)(ProductAdmin, _Component);\n\n  function ProductAdmin(props) {\n    (0, _classCallCheck3.default)(this, ProductAdmin);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _this.handleDeleteProduct = function () {\n      if (_this.props.onDeleteProduct) {\n        _this.props.onDeleteProduct(_this.props.product);\n      }\n    };\n\n    _this.handleRestoreProduct = function () {\n      if (_this.props.onRestoreProduct) {\n        _this.props.onRestoreProduct(_this.props.product);\n      }\n    };\n\n    _this.handleFieldChange = function (event, value, field) {\n      var _$merge;\n\n      var newState = update(_this.state, {\n        product: {\n          $merge: (_$merge = {}, _$merge[field] = value, _$merge)\n        }\n      });\n\n      _this.setState(newState, function () {\n        if (_this.props.onFieldChange) {\n          _this.props.onFieldChange(field, value);\n        }\n      });\n    };\n\n    _this.handleSelectChange = function (value, field) {\n      if (_this.props.onProductFieldSave) {\n        _this.props.onProductFieldSave(_this.product._id, field, value);\n      }\n    };\n\n    _this.handleToggleVisibility = function () {\n      if (_this.props.onProductFieldSave) {\n        _this.props.onProductFieldSave(_this.product._id, \"isVisible\", !_this.product.isVisible);\n      }\n    };\n\n    _this.handleMetaChange = function (event, metafield, index) {\n      if (_this.props.onMetaChange) {\n        _this.props.onMetaChange(metafield, index);\n      }\n    };\n\n    _this.handleFieldBlur = function (event, value, field) {\n      if (_this.props.onProductFieldSave) {\n        _this.props.onProductFieldSave(_this.product._id, field, value);\n      }\n    };\n\n    _this.handleMetaSave = function (event, metafield, index) {\n      if (_this.props.onMetaSave) {\n        _this.props.onMetaSave(_this.product._id, metafield, index);\n      }\n    };\n\n    _this.handleMetaRemove = function (event, metafield, index) {\n      if (_this.props.onMetaRemove) {\n        _this.props.onMetaRemove(_this.product._id, metafield, index);\n      }\n    };\n\n    _this.state = {\n      expandedCard: _this.fieldGroupForFieldName(props.editFocus),\n      product: props.product,\n      viewProps: props.viewProps\n    };\n    return _this;\n  }\n\n  ProductAdmin.prototype.componentWillReceiveProps = function () {\n    function componentWillReceiveProps(nextProps) {\n      var nextProduct = nextProps.product || {};\n      var currentProduct = this.props.product || {};\n\n      if (!_isEqual(nextProduct, currentProduct)) {\n        for (var _iterator = fieldNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var fieldName = _ref;\n\n          if (nextProduct[fieldName] !== currentProduct[fieldName]) {\n            this.animateFieldFlash(fieldName);\n          }\n        }\n      }\n\n      var cardGroupName = this.fieldGroupForFieldName(nextProps.editFocus);\n      this.setState({\n        expandedCard: cardGroupName,\n        viewProps: nextProps.viewProps\n      });\n      this.setState({\n        product: nextProps.product\n      });\n    }\n\n    return componentWillReceiveProps;\n  }();\n\n  ProductAdmin.prototype.fieldGroupForFieldName = function () {\n    function fieldGroupForFieldName(field) {\n      // Other wise, if a field was passed\n      // const fieldName = this.state.viewProps.field;\n      var fieldName = void 0; // If the field is an array of field name\n\n      if (Array.isArray(field) && field.length) {\n        // Use the first field name\n        fieldName = field[0];\n      } else {\n        fieldName = field;\n      }\n\n      var fieldData = fieldGroups[fieldName];\n\n      if (fieldData && fieldData.group) {\n        return fieldData.group;\n      }\n\n      return fieldName;\n    }\n\n    return fieldGroupForFieldName;\n  }();\n\n  ProductAdmin.prototype.animateFieldFlash = function () {\n    function animateFieldFlash(fieldName) {\n      var fieldRef = this.refs[fieldName + \"Input\"];\n\n      if (fieldRef) {\n        var input = fieldRef.refs.input;\n        Velocity.RunSequence([{\n          e: input,\n          p: {\n            backgroundColor: \"#e2f2e2\"\n          },\n          o: {\n            duration: 200\n          }\n        }, {\n          e: input,\n          p: {\n            backgroundColor: \"#fff\"\n          },\n          o: {\n            duration: 100\n          }\n        }]);\n      }\n    }\n\n    return animateFieldFlash;\n  }();\n\n  ProductAdmin.prototype.handleCardExpand = function () {\n    function handleCardExpand(cardName) {\n      if (this.props.onCardExpand) {\n        this.props.onCardExpand(cardName);\n      }\n    }\n\n    return handleCardExpand;\n  }();\n\n  ProductAdmin.prototype.renderProductVisibilityLabel = function () {\n    function renderProductVisibilityLabel() {\n      if (this.product.isVisible) {\n        return React.createElement(Translation, {\n          defaultValue: \"Product is visible\",\n          i18nKey: \"productDetailEdit.productIsVisible\"\n        });\n      }\n\n      return React.createElement(Translation, {\n        defaultValue: \"Product is not visible\",\n        i18nKey: \"productDetailEdit.productIsNotVisible\"\n      });\n    }\n\n    return renderProductVisibilityLabel;\n  }();\n\n  ProductAdmin.prototype.isExpanded = function () {\n    function isExpanded(groupName) {\n      if (this.state.expandedCard && this.state.expandedCard === groupName) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return isExpanded;\n  }();\n\n  ProductAdmin.prototype.render = function () {\n    function render() {\n      return React.createElement(\n        CardGroup,\n        null,\n        React.createElement(\n          Card,\n          {\n            expanded: this.isExpanded(\"productDetails\"),\n            onExpand: this.handleCardExpand.bind(this, \"productDetails\")\n          },\n          React.createElement(CardHeader, {\n            actAsExpander: true,\n            i18nKeyTitle: \"productDetailEdit.productSettings\",\n            title: \"Product Settings\",\n            onChange: this.handleFieldChange\n          }),\n          React.createElement(\n            CardBody,\n            {\n              expandable: true\n            },\n            React.createElement(Select, {\n              clearable: false,\n              i18nKeyLabel: \"productDetailEdit.template\",\n              i18nKeyPlaceholder: \"productDetailEdit.templateSelectPlaceholder\",\n              label: \"Template\",\n              name: \"template\",\n              onChange: this.handleSelectChange,\n              options: this.props.templates,\n              placeholder: \"Select a template\",\n              value: this.product.template\n            }),\n            React.createElement(TextField, {\n              i18nKeyLabel: \"productDetailEdit.title\",\n              i18nKeyPlaceholder: \"productDetailEdit.title\",\n              label: \"Title\",\n              name: \"title\",\n              onBlur: this.handleFieldBlur,\n              onChange: this.handleFieldChange,\n              onReturnKeyDown: this.handleFieldBlur,\n              placeholder: \"Title\",\n              ref: \"titleInput\",\n              value: this.product.title\n            }),\n            React.createElement(TextField, {\n              helpText: this.permalink,\n              i18nKeyLabel: \"productDetailEdit.permalink\",\n              i18nKeyPlaceholder: \"productDetailEdit.permalink\",\n              label: \"Permalink\",\n              name: \"handle\",\n              onBlur: this.handleFieldBlur,\n              onChange: this.handleFieldChange,\n              onReturnKeyDown: this.handleFieldBlur,\n              placeholder: \"Permalink\",\n              ref: \"handleInput\",\n              value: this.product.handle\n            }),\n            React.createElement(TextField, {\n              i18nKeyLabel: \"productDetailEdit.pageTitle\",\n              i18nKeyPlaceholder: \"productDetailEdit.pageTitle\",\n              label: \"Subtitle\",\n              name: \"pageTitle\",\n              onBlur: this.handleFieldBlur,\n              onChange: this.handleFieldChange,\n              onReturnKeyDown: this.handleFieldBlur,\n              placeholder: \"Subtitle\",\n              ref: \"subtitleInput\",\n              value: this.product.pageTitle\n            }),\n            React.createElement(TextField, {\n              i18nKeyLabel: \"productDetailEdit.vendor\",\n              i18nKeyPlaceholder: \"productDetailEdit.vendor\",\n              label: \"Vendor\",\n              name: \"vendor\",\n              onBlur: this.handleFieldBlur,\n              onChange: this.handleFieldChange,\n              onReturnKeyDown: this.handleFieldBlur,\n              placeholder: \"Vendor\",\n              ref: \"vendorInput\",\n              value: this.product.vendor\n            }),\n            React.createElement(TextField, {\n              i18nKeyLabel: \"productDetailEdit.description\",\n              i18nKeyPlaceholder: \"productDetailEdit.description\",\n              label: \"Description\",\n              multiline: true,\n              name: \"description\",\n              onBlur: this.handleFieldBlur,\n              onChange: this.handleFieldChange,\n              placeholder: \"Description\",\n              ref: \"descriptionInput\",\n              value: this.product.description\n            }),\n            React.createElement(Select, {\n              clearable: false,\n              i18nKeyLabel: \"productDetailEdit.originCountry\",\n              i18nKeyPlaceholder: \"productDetailEdit.originCountry\",\n              label: \"Origin Country\",\n              name: \"originCountry\",\n              onChange: this.handleSelectChange,\n              placeholder: \"Select a Country\",\n              ref: \"countryOfOriginInput\",\n              value: this.product.originCountry,\n              options: this.props.countries\n            })\n          )\n        ),\n        React.createElement(\n          Card,\n          {\n            expanded: this.isExpanded(\"social\"),\n            onExpand: this.handleCardExpand.bind(this, \"social\")\n          },\n          React.createElement(CardHeader, {\n            actAsExpander: true,\n            i18nKeyTitle: \"social.socialTitle\",\n            title: \"Social\"\n          }),\n          React.createElement(\n            CardBody,\n            {\n              expandable: true\n            },\n            React.createElement(TextField, {\n              i18nKeyLabel: \"productDetailEdit.facebookMsg\",\n              label: \"Facebook Message\",\n              multiline: true,\n              name: \"facebookMsg\",\n              onBlur: this.handleFieldBlur,\n              onChange: this.handleFieldChange,\n              ref: \"facebookMsgInput\",\n              value: this.product.facebookMsg\n            }),\n            React.createElement(TextField, {\n              i18nKeyLabel: \"productDetailEdit.twitterMsg\",\n              label: \"Twitter Message\",\n              multiline: true,\n              name: \"twitterMsg\",\n              onBlur: this.handleFieldBlur,\n              onChange: this.handleFieldChange,\n              ref: \"twitterMsgInput\",\n              value: this.product.twitterMsg\n            }),\n            React.createElement(TextField, {\n              i18nKeyLabel: \"productDetailEdit.pinterestMsg\",\n              label: \"Pinterest Message\",\n              multiline: true,\n              name: \"pinterestMsg\",\n              onBlur: this.handleFieldBlur,\n              onChange: this.handleFieldChange,\n              ref: \"pinterestMsgInput\",\n              value: this.product.pinterestMsg\n            }),\n            React.createElement(TextField, {\n              i18nKeyLabel: \"productDetailEdit.googleplusMsg\",\n              label: \"Google+ Message\",\n              multiline: true,\n              name: \"googleplusMsg\",\n              onBlur: this.handleFieldBlur,\n              onChange: this.handleFieldChange,\n              ref: \"googleplusMsgInput\",\n              value: this.product.googleplusMsg\n            })\n          )\n        ),\n        React.createElement(\n          Card,\n          {\n            expanded: this.isExpanded(\"hashtags\"),\n            onExpand: this.handleCardExpand.bind(this, \"hashtags\")\n          },\n          React.createElement(CardHeader, {\n            actAsExpander: true,\n            i18nKeyTitle: \"productDetail.tags\",\n            title: \"Tags\"\n          }),\n          React.createElement(\n            CardBody,\n            {\n              expandable: true\n            },\n            React.createElement(TagListContainer, {\n              enableNewTagForm: true,\n              product: this.product,\n              tagProps: {\n                fullWidth: true\n              }\n            })\n          )\n        ),\n        React.createElement(\n          Card,\n          {\n            expanded: this.isExpanded(\"metafields\"),\n            onExpand: this.handleCardExpand.bind(this, \"metafields\")\n          },\n          React.createElement(CardHeader, {\n            actAsExpander: true,\n            i18nKeyTitle: \"productDetailEdit.details\",\n            title: \"Details\"\n          }),\n          React.createElement(\n            CardBody,\n            {\n              expandable: true\n            },\n            React.createElement(Metadata, {\n              metafields: this.product.metafields,\n              newMetafield: this.props.newMetafield,\n              onMetaChange: this.handleMetaChange,\n              onMetaRemove: this.handleMetaRemove,\n              onMetaSave: this.handleMetaSave\n            })\n          )\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  (0, _createClass3.default)(ProductAdmin, [{\n    key: \"product\",\n    get: function () {\n      return this.state.product || this.props.product || {};\n    }\n  }, {\n    key: \"permalink\",\n    get: function () {\n      if (this.props.product) {\n        return Router.pathFor(\"product\", {\n          hash: {\n            handle: this.props.product.handle\n          }\n        });\n      }\n\n      return \"\";\n    }\n  }]);\n  return ProductAdmin;\n}(Component);\n\nProductAdmin.propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.object),\n  editFocus: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  handleFieldBlur: PropTypes.func,\n  handleFieldChange: PropTypes.func,\n  handleProductFieldChange: PropTypes.func,\n  newMetafield: PropTypes.object,\n  onCardExpand: PropTypes.func,\n  onDeleteProduct: PropTypes.func,\n  onFieldChange: PropTypes.func,\n  onMetaChange: PropTypes.func,\n  onMetaRemove: PropTypes.func,\n  onMetaSave: PropTypes.func,\n  onProductFieldSave: PropTypes.func,\n  onRestoreProduct: PropTypes.func,\n  product: PropTypes.object,\n  revisonDocumentIds: PropTypes.arrayOf(PropTypes.string),\n  templates: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.any\n  })),\n  viewProps: PropTypes.object\n};\nmodule.export(\"default\", exports.default = ProductAdmin);","map":{"version":3,"sources":["/imports/plugins/included/product-admin/client/components/productAdmin.js"],"names":["React","Component","PropTypes","Velocity","Card","CardHeader","CardBody","CardGroup","Metadata","TextField","Translation","Select","Router","TagListContainer","update","fieldNames","fieldGroups","title","group","handle","pageTitle","vendor","description","facebookMsg","twitterMsg","pinterestMsg","googleplusMsg","hashtags","metafields","ProductAdmin","constructor","props","state","expandedCard","fieldGroupForFieldName","editFocus","product","viewProps","componentWillReceiveProps","nextProps","nextProduct","currentProduct","fieldName","animateFieldFlash","cardGroupName","setState","field","Array","isArray","length","fieldData","fieldRef","refs","input","RunSequence","e","p","backgroundColor","o","duration","handleCardExpand","cardName","onCardExpand","handleDeleteProduct","onDeleteProduct","handleRestoreProduct","onRestoreProduct","handleFieldChange","event","value","newState","$merge","onFieldChange","handleSelectChange","onProductFieldSave","_id","handleToggleVisibility","isVisible","handleMetaChange","metafield","index","onMetaChange","handleFieldBlur","handleMetaSave","onMetaSave","handleMetaRemove","onMetaRemove","permalink","pathFor","hash","renderProductVisibilityLabel","isExpanded","groupName","render","bind","templates","template","originCountry","countries","fullWidth","newMetafield","propTypes","arrayOf","object","oneOfType","string","func","handleProductFieldChange","revisonDocumentIds","shape","label","any"],"mappings":"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","file":"/imports/plugins/included/product-admin/client/components/productAdmin.js.map","sourcesContent":["import { isEqual } from \"lodash\";\nimport React, { Component, PropTypes } from \"react\";\nimport Velocity from \"velocity-animate\";\nimport \"velocity-animate/velocity.ui\";\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardGroup,\n  Metadata,\n  TextField,\n  Translation,\n  Select\n} from \"/imports/plugins/core/ui/client/components\";\nimport { Router } from \"/client/api\";\nimport { TagListContainer } from \"/imports/plugins/core/ui/client/containers\";\nimport update from \"react/lib/update\";\n\nconst fieldNames = [\n  \"title\",\n  \"handle\",\n  \"subtitle\",\n  \"vendor\",\n  \"description\",\n  \"origincountry\",\n  \"facebookMsg\",\n  \"twitterMsg\",\n  \"pinterestMsg\",\n  \"googleplusMsg\"\n];\n\nconst fieldGroups = {\n  title: { group: \"productDetails\" },\n  handle: { group: \"productDetails\" },\n  pageTitle: { group: \"productDetails\" },\n  vendor: { group: \"productDetails\" },\n  description: { group: \"productDetails\" },\n  facebookMsg: { group: \"social\" },\n  twitterMsg: { group: \"social\" },\n  pinterestMsg: { group: \"social\" },\n  googleplusMsg: { group: \"social\" },\n  hashtags: { group: \"hashtags\" },\n  metafields: { group: \"metafields\" }\n};\n\nclass ProductAdmin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedCard: this.fieldGroupForFieldName(props.editFocus),\n      product: props.product,\n      viewProps: props.viewProps\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const nextProduct = nextProps.product || {};\n    const currentProduct = this.props.product || {};\n\n    if (!isEqual(nextProduct, currentProduct)) {\n      for (const fieldName of fieldNames) {\n        if (nextProduct[fieldName] !== currentProduct[fieldName]) {\n          this.animateFieldFlash(fieldName);\n        }\n      }\n    }\n\n    const cardGroupName = this.fieldGroupForFieldName(nextProps.editFocus);\n\n    this.setState({\n      expandedCard: cardGroupName,\n      viewProps: nextProps.viewProps\n    });\n\n    this.setState({\n      product: nextProps.product\n    });\n  }\n\n  fieldGroupForFieldName(field) {\n    // Other wise, if a field was passed\n    // const fieldName = this.state.viewProps.field;\n\n    let fieldName;\n\n    // If the field is an array of field name\n    if (Array.isArray(field) && field.length) {\n      // Use the first field name\n      fieldName = field[0];\n    } else {\n      fieldName = field;\n    }\n\n    const fieldData = fieldGroups[fieldName];\n\n    if (fieldData && fieldData.group) {\n      return fieldData.group;\n    }\n\n    return fieldName;\n  }\n\n  animateFieldFlash(fieldName) {\n    const fieldRef = this.refs[`${fieldName}Input`];\n\n    if (fieldRef) {\n      const input = fieldRef.refs.input;\n\n      Velocity.RunSequence([\n        { e: input, p: { backgroundColor: \"#e2f2e2\" }, o: { duration: 200 } },\n        { e: input, p: { backgroundColor: \"#fff\" }, o: { duration: 100 } }\n      ]);\n    }\n  }\n\n  handleCardExpand(cardName) {\n    if (this.props.onCardExpand) {\n      this.props.onCardExpand(cardName);\n    }\n  }\n\n  handleDeleteProduct = () => {\n    if (this.props.onDeleteProduct) {\n      this.props.onDeleteProduct(this.props.product);\n    }\n  }\n\n  handleRestoreProduct = () => {\n    if (this.props.onRestoreProduct) {\n      this.props.onRestoreProduct(this.props.product);\n    }\n  }\n\n\n  handleFieldChange = (event, value, field) => {\n    const newState = update(this.state, {\n      product: {\n        $merge: {\n          [field]: value\n        }\n      }\n    });\n\n    this.setState(newState, () => {\n      if (this.props.onFieldChange) {\n        this.props.onFieldChange(field, value);\n      }\n    });\n  }\n\n  handleSelectChange = (value, field) => {\n    if (this.props.onProductFieldSave) {\n      this.props.onProductFieldSave(this.product._id, field, value);\n    }\n  }\n\n  handleToggleVisibility = () => {\n    if (this.props.onProductFieldSave) {\n      this.props.onProductFieldSave(this.product._id, \"isVisible\", !this.product.isVisible);\n    }\n  }\n\n  handleMetaChange = (event, metafield, index) => {\n    if (this.props.onMetaChange) {\n      this.props.onMetaChange(metafield, index);\n    }\n  }\n\n  handleFieldBlur = (event, value, field) => {\n    if (this.props.onProductFieldSave) {\n      this.props.onProductFieldSave(this.product._id, field, value);\n    }\n  }\n\n  handleMetaSave = (event, metafield, index) => {\n    if (this.props.onMetaSave) {\n      this.props.onMetaSave(this.product._id, metafield, index);\n    }\n  }\n\n  handleMetaRemove = (event, metafield, index) => {\n    if (this.props.onMetaRemove) {\n      this.props.onMetaRemove(this.product._id, metafield, index);\n    }\n  }\n\n  get product() {\n    return this.state.product || this.props.product || {};\n  }\n\n  get permalink() {\n    if (this.props.product) {\n      return Router.pathFor(\"product\", {\n        hash: {\n          handle: this.props.product.handle\n        }\n      });\n    }\n\n    return \"\";\n  }\n\n  renderProductVisibilityLabel() {\n    if (this.product.isVisible) {\n      return (\n        <Translation defaultValue=\"Product is visible\" i18nKey=\"productDetailEdit.productIsVisible\" />\n      );\n    }\n\n    return (\n      <Translation defaultValue=\"Product is not visible\" i18nKey=\"productDetailEdit.productIsNotVisible\" />\n    );\n  }\n\n  isExpanded(groupName) {\n    if (this.state.expandedCard && this.state.expandedCard === groupName) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    return (\n      <CardGroup>\n        <Card\n          expanded={this.isExpanded(\"productDetails\")}\n          onExpand={this.handleCardExpand.bind(this, \"productDetails\")}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"productDetailEdit.productSettings\"\n            title=\"Product Settings\"\n            onChange={this.handleFieldChange}\n          />\n          <CardBody expandable={true}>\n            <Select\n              clearable={false}\n              i18nKeyLabel=\"productDetailEdit.template\"\n              i18nKeyPlaceholder=\"productDetailEdit.templateSelectPlaceholder\"\n              label=\"Template\"\n              name=\"template\"\n              onChange={this.handleSelectChange}\n              options={this.props.templates}\n              placeholder=\"Select a template\"\n              value={this.product.template}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.title\"\n              i18nKeyPlaceholder=\"productDetailEdit.title\"\n              label=\"Title\"\n              name=\"title\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              onReturnKeyDown={this.handleFieldBlur}\n              placeholder=\"Title\"\n              ref=\"titleInput\"\n              value={this.product.title}\n            />\n            <TextField\n              helpText={this.permalink}\n              i18nKeyLabel=\"productDetailEdit.permalink\"\n              i18nKeyPlaceholder=\"productDetailEdit.permalink\"\n              label=\"Permalink\"\n              name=\"handle\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              onReturnKeyDown={this.handleFieldBlur}\n              placeholder=\"Permalink\"\n              ref=\"handleInput\"\n              value={this.product.handle}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.pageTitle\"\n              i18nKeyPlaceholder=\"productDetailEdit.pageTitle\"\n              label=\"Subtitle\"\n              name=\"pageTitle\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              onReturnKeyDown={this.handleFieldBlur}\n              placeholder=\"Subtitle\"\n              ref=\"subtitleInput\"\n              value={this.product.pageTitle}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.vendor\"\n              i18nKeyPlaceholder=\"productDetailEdit.vendor\"\n              label=\"Vendor\"\n              name=\"vendor\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              onReturnKeyDown={this.handleFieldBlur}\n              placeholder=\"Vendor\"\n              ref=\"vendorInput\"\n              value={this.product.vendor}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.description\"\n              i18nKeyPlaceholder=\"productDetailEdit.description\"\n              label=\"Description\"\n              multiline={true}\n              name=\"description\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              placeholder=\"Description\"\n              ref=\"descriptionInput\"\n              value={this.product.description}\n            />\n            <Select\n              clearable={false}\n              i18nKeyLabel=\"productDetailEdit.originCountry\"\n              i18nKeyPlaceholder=\"productDetailEdit.originCountry\"\n              label=\"Origin Country\"\n              name=\"originCountry\"\n              onChange={this.handleSelectChange}\n              placeholder=\"Select a Country\"\n              ref=\"countryOfOriginInput\"\n              value={this.product.originCountry}\n              options={this.props.countries}\n            />\n          </CardBody>\n        </Card>\n        <Card\n          expanded={this.isExpanded(\"social\")}\n          onExpand={this.handleCardExpand.bind(this, \"social\")}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"social.socialTitle\"\n            title=\"Social\"\n          />\n          <CardBody expandable={true}>\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.facebookMsg\"\n              label=\"Facebook Message\"\n              multiline={true}\n              name=\"facebookMsg\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              ref=\"facebookMsgInput\"\n              value={this.product.facebookMsg}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.twitterMsg\"\n              label=\"Twitter Message\"\n              multiline={true}\n              name=\"twitterMsg\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              ref=\"twitterMsgInput\"\n              value={this.product.twitterMsg}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.pinterestMsg\"\n              label=\"Pinterest Message\"\n              multiline={true}\n              name=\"pinterestMsg\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              ref=\"pinterestMsgInput\"\n              value={this.product.pinterestMsg}\n            />\n            <TextField\n              i18nKeyLabel=\"productDetailEdit.googleplusMsg\"\n              label=\"Google+ Message\"\n              multiline={true}\n              name=\"googleplusMsg\"\n              onBlur={this.handleFieldBlur}\n              onChange={this.handleFieldChange}\n              ref=\"googleplusMsgInput\"\n              value={this.product.googleplusMsg}\n            />\n          </CardBody>\n        </Card>\n\n        <Card\n          expanded={this.isExpanded(\"hashtags\")}\n          onExpand={this.handleCardExpand.bind(this, \"hashtags\")}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"productDetail.tags\"\n            title=\"Tags\"\n          />\n          <CardBody expandable={true}>\n            <TagListContainer\n              enableNewTagForm={true}\n              product={this.product}\n              tagProps={{\n                fullWidth: true\n              }}\n            />\n          </CardBody>\n        </Card>\n\n        <Card\n          expanded={this.isExpanded(\"metafields\")}\n          onExpand={this.handleCardExpand.bind(this, \"metafields\")}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"productDetailEdit.details\"\n            title=\"Details\"\n          />\n          <CardBody expandable={true}>\n            <Metadata\n              metafields={this.product.metafields}\n              newMetafield={this.props.newMetafield}\n              onMetaChange={this.handleMetaChange}\n              onMetaRemove={this.handleMetaRemove}\n              onMetaSave={this.handleMetaSave}\n            />\n          </CardBody>\n        </Card>\n      </CardGroup>\n    );\n  }\n}\n\nProductAdmin.propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.object),\n  editFocus: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  handleFieldBlur: PropTypes.func,\n  handleFieldChange: PropTypes.func,\n  handleProductFieldChange: PropTypes.func,\n  newMetafield: PropTypes.object,\n  onCardExpand: PropTypes.func,\n  onDeleteProduct: PropTypes.func,\n  onFieldChange: PropTypes.func,\n  onMetaChange: PropTypes.func,\n  onMetaRemove: PropTypes.func,\n  onMetaSave: PropTypes.func,\n  onProductFieldSave: PropTypes.func,\n  onRestoreProduct: PropTypes.func,\n  product: PropTypes.object,\n  revisonDocumentIds: PropTypes.arrayOf(PropTypes.string),\n  templates: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.any\n  })),\n  viewProps: PropTypes.object\n};\n\nexport default ProductAdmin;\n"]},"hash":"00c237c36a082746219db750b35f5fd96bb6a972"}
