{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/lib/collections","imported":["Shipping","Packages"],"specifiers":[{"kind":"named","imported":"Shipping","local":"Shipping"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Logger","Reaction","Hooks"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Hooks","local":"Hooks"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/shippo/server/hooks/rates.js","filenameRelative":"/imports/plugins/included/shippo/server/hooks/rates.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/shippo/server/hooks/rates.js"],"names":["Meteor","Shipping","Packages","Logger","Reaction","Hooks","getShippingRates","rates","cart","shops","products","items","pkgData","findOne","name","shopId","getShopId","settings","shippo","enabled","selector","product","push","length","$in","shippingCollection","find","shippoDocs","forEach","doc","provider","shippoProvider","carrierAccountId","Object","keys","shippoRates","call","_id","debug","Events","add"],"mappings":";;AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAU,AAAgB,AACnC,AAAS,AAAQ,AAAU,AAAa,AAExC;;AACA,AAAS,AAAiB,AAAO,AAAM;AACrC,AAAM,SAAN,AAAc;MACR,QAAN,AAAiB,AAAK,AAEtB;MAAM,AAAU,gBAAA,AAAS,AAAQ,AAC/B,AAAM,AACN;MAAQ,mBAAA;AAN2B,AAIrC,AAKA;qBACA,AAAI,AAAC,AAAW,AAAC,AAAK,AAAS,AAAQ,AAAS,AAAO,AAAY,AAAM,AACvE,AAAO,AACR;AARe,AAAiB,GAEd,GANkB,AAcrC;;;WACA;AAAI,AAAW,AACb,AAAU,AAAS,AACnB,GAfF,CAae,AAEO;;;AAjBe,AAerC,AAKA;;wBAEA,AAAK,AAAM,AAAW,AAAU,AAC9B,AAAI,AAAQ,AAAQ,AAClB;AAHJ,KAGI,AAAM,AAAK,AAAQ,AACpB;AACF;;AA1BoC,AA2BrC;;;;;;;;;;;;;;;yBACA;AAAA,AAAI,AAAC,AAAU,AAAO,AAAM,AAAS,AAAK,AAAK,AAAG,AAChD;AAAW,AACT,IAAU,AACR;;;OAAK,6CADG;AADD;;aAMZ;AANC,AAAW,AAIW;0BAIxB,AAAM,AAAqB,AAAS,AAAK,AACzC;AALI;AAKJ,AAAM,AAAa,AACnB;;AAAI,MAAJ,AAAwB,mCACtB;mBAAA,AAAmB,AAAQ,AAAU,AAAK,AACxC;;;AACI,AAAI,uBAAS,QAAjB,AAAiC,eAC/B;AAAA,AAAW,AAAI,AAAS,AAAe,AAAoB,AAC5D;uCALmB,AACtB,AAKC;AAED;AACA;AAAA,AAAI,AAAO,AAAK,AAAY,AAAS,AAAG,AACtC,AAAM,AAAc,AAAO,AAAK,AAAkC,AAAK,AAAK,AAC5E,OARA,CAQA,AAAM,AAAK,AAAG,AACf;;4CACF;;iDAED;AAAA,AAAO,AAAM,AAA6B,AAC1C;AAAA,AAAO,AACR,A,AAED;;;SACA;AAAA,AAAM,AAAO,AAAI,AAAsB","file":"/imports/plugins/included/shippo/server/hooks/rates.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Shipping, Packages } from \"/lib/collections\";\nimport { Logger, Reaction, Hooks } from \"/server/api\";\n\n// callback ran on getShippingRates hook\nfunction getShippingRates(rates, cart) {\n  const shops = [];\n  const products = cart.items;\n\n  const pkgData = Packages.findOne({\n    name: \"reaction-shippo\",\n    shopId: Reaction.getShopId()\n  });\n\n  // must have cart items and package enabled to calculate shipping\n  if (!pkgData || !cart.items || pkgData.settings.shippo.enabled !== true) {\n    return rates;\n  }\n\n  // default selector is current shop\n  let selector = {\n    \"shopId\": Reaction.getShopId(),\n    \"provider.enabled\": true\n  };\n\n  // create an array of shops, allowing\n  // the cart to have products from multiple shops\n  for (const product of products) {\n    if (product.shopId) {\n      shops.push(product.shopId);\n    }\n  }\n  // if we have multiple shops in cart\n  if ((shops !== null ? shops.length : void 0) > 0) {\n    selector = {\n      \"shopId\": {\n        $in: shops\n      },\n      \"provider.enabled\": true\n    };\n  }\n\n  const shippingCollection = Shipping.find(selector);\n  const shippoDocs = {};\n  if (shippingCollection) {\n    shippingCollection.forEach(function (doc) {\n      // If provider is from Shippo, put it in an object to get rates dynamically(shippoApi) for all of them after.\n      if (doc.provider.shippoProvider) {\n        shippoDocs[doc.provider.shippoProvider.carrierAccountId] = doc;\n      }\n    });\n\n    //  Get shippingRates from Shippo\n    if (Object.keys(shippoDocs).length > 0) {\n      const shippoRates = Meteor.call(\"shippo/getShippingRatesForCart\", cart._id, shippoDocs);\n      rates.push(...shippoRates);\n    }\n  }\n\n  Logger.debug(\"Shippo onGetShippingRates\", rates);\n  return rates;\n}\n\n// run getShippingRates when the onGetShippingRates event runs\nHooks.Events.add(\"onGetShippingRates\", getShippingRates);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/shippo/server/hooks/rates.js.map","sourceFileName":"/imports/plugins/included/shippo/server/hooks/rates.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"rates"},"ignored":false,"code":"function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Shipping = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shipping: function (v) {\n    Shipping = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 1);\nvar Logger = void 0,\n    Reaction = void 0,\n    Hooks = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Hooks: function (v) {\n    Hooks = v;\n  }\n}, 2);\n\n// callback ran on getShippingRates hook\nfunction getShippingRates(rates, cart) {\n  var shops = [];\n  var products = cart.items;\n  var pkgData = Packages.findOne({\n    name: \"reaction-shippo\",\n    shopId: Reaction.getShopId()\n  }); // must have cart items and package enabled to calculate shipping\n\n  if (!pkgData || !cart.items || pkgData.settings.shippo.enabled !== true) {\n    return rates;\n  } // default selector is current shop\n\n\n  var selector = {\n    \"shopId\": Reaction.getShopId(),\n    \"provider.enabled\": true\n  }; // create an array of shops, allowing\n  // the cart to have products from multiple shops\n\n  for (var _iterator = products, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var product = _ref;\n\n    if (product.shopId) {\n      shops.push(product.shopId);\n    }\n  } // if we have multiple shops in cart\n\n\n  if ((shops !== null ? shops.length : void 0) > 0) {\n    selector = {\n      \"shopId\": {\n        $in: shops\n      },\n      \"provider.enabled\": true\n    };\n  }\n\n  var shippingCollection = Shipping.find(selector);\n  var shippoDocs = {};\n\n  if (shippingCollection) {\n    shippingCollection.forEach(function (doc) {\n      // If provider is from Shippo, put it in an object to get rates dynamically(shippoApi) for all of them after.\n      if (doc.provider.shippoProvider) {\n        shippoDocs[doc.provider.shippoProvider.carrierAccountId] = doc;\n      }\n    }); //  Get shippingRates from Shippo\n\n    if (Object.keys(shippoDocs).length > 0) {\n      var shippoRates = Meteor.call(\"shippo/getShippingRatesForCart\", cart._id, shippoDocs);\n      rates.push.apply(rates, _toConsumableArray(shippoRates));\n    }\n  }\n\n  Logger.debug(\"Shippo onGetShippingRates\", rates);\n  return rates;\n} // run getShippingRates when the onGetShippingRates event runs\n\n\nHooks.Events.add(\"onGetShippingRates\", getShippingRates);","map":{"version":3,"sources":["/imports/plugins/included/shippo/server/hooks/rates.js"],"names":["Meteor","Shipping","Packages","Logger","Reaction","Hooks","getShippingRates","rates","cart","shops","products","items","pkgData","findOne","name","shopId","getShopId","settings","shippo","enabled","selector","product","push","length","$in","shippingCollection","find","shippoDocs","forEach","doc","provider","shippoProvider","carrierAccountId","Object","keys","shippoRates","call","_id","debug","Events","add"],"mappings":";;AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAU,AAAgB,AACnC,AAAS,AAAQ,AAAU,AAAa,AAExC;;AACA,AAAS,AAAiB,AAAO,AAAM;AACrC,AAAM,SAAN,AAAc;MACR,QAAN,AAAiB,AAAK,AAEtB;MAAM,AAAU,gBAAA,AAAS,AAAQ,AAC/B,AAAM,AACN;MAAQ,mBAAA;AAN2B,AAIrC,AAKA;qBACA,AAAI,AAAC,AAAW,AAAC,AAAK,AAAS,AAAQ,AAAS,AAAO,AAAY,AAAM,AACvE,AAAO,AACR;AARe,AAAiB,GAEd,GANkB,AAcrC;;;WACA;AAAI,AAAW,AACb,AAAU,AAAS,AACnB,GAfF,CAae,AAEO;;;AAjBe,AAerC,AAKA;;wBAEA,AAAK,AAAM,AAAW,AAAU,AAC9B,AAAI,AAAQ,AAAQ,AAClB;AAHJ,KAGI,AAAM,AAAK,AAAQ,AACpB;AACF;;AA1BoC,AA2BrC;;;;;;;;;;;;;;;yBACA;AAAA,AAAI,AAAC,AAAU,AAAO,AAAM,AAAS,AAAK,AAAK,AAAG,AAChD;AAAW,AACT,IAAU,AACR;;;OAAK,6CADG;AADD;;aAMZ;AANC,AAAW,AAIW;0BAIxB,AAAM,AAAqB,AAAS,AAAK,AACzC;AALI;AAKJ,AAAM,AAAa,AACnB;;AAAI,MAAJ,AAAwB,mCACtB;mBAAA,AAAmB,AAAQ,AAAU,AAAK,AACxC;;;AACI,AAAI,uBAAS,QAAjB,AAAiC,eAC/B;AAAA,AAAW,AAAI,AAAS,AAAe,AAAoB,AAC5D;uCALmB,AACtB,AAKC;AAED;AACA;AAAA,AAAI,AAAO,AAAK,AAAY,AAAS,AAAG,AACtC,AAAM,AAAc,AAAO,AAAK,AAAkC,AAAK,AAAK,AAC5E,OARA,CAQA,AAAM,AAAK,AAAG,AACf;;4CACF;;iDAED;AAAA,AAAO,AAAM,AAA6B,AAC1C;AAAA,AAAO,AACR,A,AAED;;;SACA;AAAA,AAAM,AAAO,AAAI,AAAsB","file":"/imports/plugins/included/shippo/server/hooks/rates.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Shipping, Packages } from \"/lib/collections\";\nimport { Logger, Reaction, Hooks } from \"/server/api\";\n\n// callback ran on getShippingRates hook\nfunction getShippingRates(rates, cart) {\n  const shops = [];\n  const products = cart.items;\n\n  const pkgData = Packages.findOne({\n    name: \"reaction-shippo\",\n    shopId: Reaction.getShopId()\n  });\n\n  // must have cart items and package enabled to calculate shipping\n  if (!pkgData || !cart.items || pkgData.settings.shippo.enabled !== true) {\n    return rates;\n  }\n\n  // default selector is current shop\n  let selector = {\n    \"shopId\": Reaction.getShopId(),\n    \"provider.enabled\": true\n  };\n\n  // create an array of shops, allowing\n  // the cart to have products from multiple shops\n  for (const product of products) {\n    if (product.shopId) {\n      shops.push(product.shopId);\n    }\n  }\n  // if we have multiple shops in cart\n  if ((shops !== null ? shops.length : void 0) > 0) {\n    selector = {\n      \"shopId\": {\n        $in: shops\n      },\n      \"provider.enabled\": true\n    };\n  }\n\n  const shippingCollection = Shipping.find(selector);\n  const shippoDocs = {};\n  if (shippingCollection) {\n    shippingCollection.forEach(function (doc) {\n      // If provider is from Shippo, put it in an object to get rates dynamically(shippoApi) for all of them after.\n      if (doc.provider.shippoProvider) {\n        shippoDocs[doc.provider.shippoProvider.carrierAccountId] = doc;\n      }\n    });\n\n    //  Get shippingRates from Shippo\n    if (Object.keys(shippoDocs).length > 0) {\n      const shippoRates = Meteor.call(\"shippo/getShippingRatesForCart\", cart._id, shippoDocs);\n      rates.push(...shippoRates);\n    }\n  }\n\n  Logger.debug(\"Shippo onGetShippingRates\", rates);\n  return rates;\n}\n\n// run getShippingRates when the onGetShippingRates event runs\nHooks.Events.add(\"onGetShippingRates\", getShippingRates);\n"]},"hash":"8fd6bc7ed787e5b3eef37ce7e17c60b631210869"}
