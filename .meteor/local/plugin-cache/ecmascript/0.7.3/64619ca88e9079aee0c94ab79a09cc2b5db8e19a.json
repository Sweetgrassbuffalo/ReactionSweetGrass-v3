{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"/lib/api/compose","imported":["composeWithTracker","merge"],"specifiers":[{"kind":"named","imported":"composeWithTracker","local":"composeWithTracker"},{"kind":"named","imported":"merge","local":"merge"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/lib/collections","imported":["Notifications"],"specifiers":[{"kind":"named","imported":"Notifications","local":"Notifications"}]},{"source":"../components","imported":["NotificationRoute"],"specifiers":[{"kind":"named","imported":"NotificationRoute","local":"NotificationRoute"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/notifications/client/containers/notificationRouteContainer.js","filenameRelative":"/imports/plugins/included/notifications/client/containers/notificationRouteContainer.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/notifications/client/containers/notificationRouteContainer.js"],"names":["React","composeWithTracker","merge","Meteor","Notifications","NotificationRoute","NotificationRouteContainer","props","markAllAsRead","notificationList","map","notify","call","_id","markOneAsRead","id","composer","onData","subscribe","userId","find","sort","timeSent","fetch","unread","status","count"],"mappings":"AAAA;AAAA,OAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAClB,AAAS,AAAoB,AAAa,AAC1C,AAAS,AAAc,AACvB,AAAS,AAAqB,AAC9B,AAAS,AAAyB;;AAElC,IAAM,6BAA8B,UAAD,AAAW,OAC5C;AADF,AACE,AACE,AAAC,AAAkB,AAAI,AAE1B,gDAED;AAAA,AAAS,AAAc,AAAkB,AACvC,AAAiB,AAAI,AAAC,AAAW;;AAC/B,SAAA,AAAO,AAAK,gCAAZ,AAA0C,AAAO,AAClD;AAFD,yCAGD;;AAED;AAAA,AAAS,AAAc,AAAI,AACzB,AAAO,AAAK,AAA8B;;AAC3C;4CAED;AAAA,AAAS,AAAS,AAAO,AAAQ,AAC/B,AAAO,AAAU,AAAgB,AAAO;;AACxC,AAAM,yBAAmB,QAAA,AAAc,AAAK,AAAI,AAAE;SAAM,iCAAE;MAAU,AAAC;;;;KAAb;;;KAAxD,AAAyB,AAAuB,AAA4B,AAC5E;AAAM;AAAS,AAAmB,AAAU;AAA5C,AAAe,AAAyC,AAExD;AAAA,AAAO,AAAM,AACX;AADW,AAEX,AACA;AALa,AAAc,AAAK,AAAE;AAEpC,AAAa,AAIX;;OA/BG,kBAAP,kBAiCC,oCAED,AAAe,AACb,AAAmB,AACnB","file":"/imports/plugins/included/notifications/client/containers/notificationRouteContainer.js.map","sourcesContent":["import React from \"react\";\nimport { composeWithTracker, merge } from \"/lib/api/compose\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Notifications } from \"/lib/collections\";\nimport { NotificationRoute } from \"../components\";\n\nconst NotificationRouteContainer = (props) => {\n  return (\n    <NotificationRoute {...props}/>\n  );\n};\n\nfunction markAllAsRead(notificationList) {\n  notificationList.map((notify) => {\n    Meteor.call(\"notification/markOneAsRead\", notify._id);\n  });\n}\n\nfunction markOneAsRead(id) {\n  Meteor.call(\"notification/markOneAsRead\", id);\n}\n\nfunction composer(props, onData) {\n  Meteor.subscribe(\"Notification\", Meteor.userId());\n  const notificationList = Notifications.find({}, { sort: { timeSent: -1 } }).fetch();\n  const unread = Notifications.find({ status: \"unread\" }).count();\n\n  onData(null, {\n    notificationList,\n    unread,\n    markAllAsRead,\n    markOneAsRead\n  });\n}\n\nexport default merge(\n  composeWithTracker(composer)\n)(NotificationRouteContainer);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/notifications/client/containers/notificationRouteContainer.js.map","sourceFileName":"/imports/plugins/included/notifications/client/containers/notificationRouteContainer.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"notificationRouteContainer"},"ignored":false,"code":"var React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar composeWithTracker = void 0,\n    merge = void 0;\nmodule.importSync(\"/lib/api/compose\", {\n  composeWithTracker: function (v) {\n    composeWithTracker = v;\n  },\n  merge: function (v) {\n    merge = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar Notifications = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Notifications: function (v) {\n    Notifications = v;\n  }\n}, 3);\nvar NotificationRoute = void 0;\nmodule.importSync(\"../components\", {\n  NotificationRoute: function (v) {\n    NotificationRoute = v;\n  }\n}, 4);\n\nvar NotificationRouteContainer = function (props) {\n  return React.createElement(NotificationRoute, props);\n};\n\nfunction markAllAsRead(notificationList) {\n  notificationList.map(function (notify) {\n    Meteor.call(\"notification/markOneAsRead\", notify._id);\n  });\n}\n\nfunction markOneAsRead(id) {\n  Meteor.call(\"notification/markOneAsRead\", id);\n}\n\nfunction composer(props, onData) {\n  Meteor.subscribe(\"Notification\", Meteor.userId());\n  var notificationList = Notifications.find({}, {\n    sort: {\n      timeSent: -1\n    }\n  }).fetch();\n  var unread = Notifications.find({\n    status: \"unread\"\n  }).count();\n  onData(null, {\n    notificationList: notificationList,\n    unread: unread,\n    markAllAsRead: markAllAsRead,\n    markOneAsRead: markOneAsRead\n  });\n}\n\nmodule.export(\"default\", exports.default = merge(composeWithTracker(composer))(NotificationRouteContainer));","map":{"version":3,"sources":["/imports/plugins/included/notifications/client/containers/notificationRouteContainer.js"],"names":["React","composeWithTracker","merge","Meteor","Notifications","NotificationRoute","NotificationRouteContainer","props","markAllAsRead","notificationList","map","notify","call","_id","markOneAsRead","id","composer","onData","subscribe","userId","find","sort","timeSent","fetch","unread","status","count"],"mappings":"AAAA;AAAA,OAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAClB,AAAS,AAAoB,AAAa,AAC1C,AAAS,AAAc,AACvB,AAAS,AAAqB,AAC9B,AAAS,AAAyB;;AAElC,IAAM,6BAA8B,UAAD,AAAW,OAC5C;AADF,AACE,AACE,AAAC,AAAkB,AAAI,AAE1B,gDAED;AAAA,AAAS,AAAc,AAAkB,AACvC,AAAiB,AAAI,AAAC,AAAW;;AAC/B,SAAA,AAAO,AAAK,gCAAZ,AAA0C,AAAO,AAClD;AAFD,yCAGD;;AAED;AAAA,AAAS,AAAc,AAAI,AACzB,AAAO,AAAK,AAA8B;;AAC3C;4CAED;AAAA,AAAS,AAAS,AAAO,AAAQ,AAC/B,AAAO,AAAU,AAAgB,AAAO;;AACxC,AAAM,yBAAmB,QAAA,AAAc,AAAK,AAAI,AAAE;SAAM,iCAAE;MAAU,AAAC;;;;KAAb;;;KAAxD,AAAyB,AAAuB,AAA4B,AAC5E;AAAM;AAAS,AAAmB,AAAU;AAA5C,AAAe,AAAyC,AAExD;AAAA,AAAO,AAAM,AACX;AADW,AAEX,AACA;AALa,AAAc,AAAK,AAAE;AAEpC,AAAa,AAIX;;OA/BG,kBAAP,kBAiCC,oCAED,AAAe,AACb,AAAmB,AACnB","file":"/imports/plugins/included/notifications/client/containers/notificationRouteContainer.js.map","sourcesContent":["import React from \"react\";\nimport { composeWithTracker, merge } from \"/lib/api/compose\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Notifications } from \"/lib/collections\";\nimport { NotificationRoute } from \"../components\";\n\nconst NotificationRouteContainer = (props) => {\n  return (\n    <NotificationRoute {...props}/>\n  );\n};\n\nfunction markAllAsRead(notificationList) {\n  notificationList.map((notify) => {\n    Meteor.call(\"notification/markOneAsRead\", notify._id);\n  });\n}\n\nfunction markOneAsRead(id) {\n  Meteor.call(\"notification/markOneAsRead\", id);\n}\n\nfunction composer(props, onData) {\n  Meteor.subscribe(\"Notification\", Meteor.userId());\n  const notificationList = Notifications.find({}, { sort: { timeSent: -1 } }).fetch();\n  const unread = Notifications.find({ status: \"unread\" }).count();\n\n  onData(null, {\n    notificationList,\n    unread,\n    markAllAsRead,\n    markOneAsRead\n  });\n}\n\nexport default merge(\n  composeWithTracker(composer)\n)(NotificationRouteContainer);\n"]},"hash":"64619ca88e9079aee0c94ab79a09cc2b5db8e19a"}
