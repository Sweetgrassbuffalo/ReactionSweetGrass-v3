{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["Card","CardHeader","CardBody","CardGroup","Loading"],"specifiers":[{"kind":"named","imported":"Card","local":"Card"},{"kind":"named","imported":"CardHeader","local":"CardHeader"},{"kind":"named","imported":"CardBody","local":"CardBody"},{"kind":"named","imported":"CardGroup","local":"CardGroup"},{"kind":"named","imported":"Loading","local":"Loading"}]},{"source":"/imports/plugins/core/ui-grid/client/griddle","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"MeteorGriddle"}]},{"source":"./emailTableColumn","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"EmailTableColumn"}]},{"source":"/lib/collections","imported":["Jobs"],"specifiers":[{"kind":"named","imported":"Jobs","local":"Jobs"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"./emailConfig.css","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/email/client/components/emailLogs.js","filenameRelative":"/imports/plugins/core/email/client/components/emailLogs.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/email/client/components/emailLogs.js"],"names":["React","Component","PropTypes","Card","CardHeader","CardBody","CardGroup","Loading","MeteorGriddle","EmailTableColumn","Jobs","i18next","EmailLogs","renderEmailsTable","filteredFields","filteredFieldsColumns","noDataMessage","t","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","customComponent","push","render","propTypes","emails","arrayOf","shape","_id","string","isRequired","created","instanceOf","Date","data","to","subject","status","limit"],"mappings":";;;;;;;;;;;;;;AAAA;IAAA;;OAA4C,WAA5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBACA,AAAS,AAAM,AAAY,AAAU,AAAW,AAAe,AAC/D,AAAO,AAAmB,AAC1B,AAAO,AAAsB,AAC7B,AAAS,AAAY,AACrB,AAAS,AAAe,AACxB,AAAO,AAGP,AAAM,AAAkB,AAAU,AAChC;;IAAoB;;;;;;;;sBACZ;;UACA,kBAAwB,AAAC,WAAD,AAAY,WAAZ,AAAuB,gBAArD,AAA8B,AAAuC,AACrE;UAAM,AAAgB,wBAAQ,CAAR,AAAU,sBAHd,AAGlB,AAAsB,AAEtB;oCACA,AAAM,AAAoB,AACxB,wBAAkB,AAAO,AACvB;;UAAO;sCARO,AAMlB,AAA0B,AAM1B;;AACA,AAAM,AAAuB,AAC7B,AAAe,AAAQ,AAAU,AAAO,AACtC;AAPE,AACD,QARH,AAAuB,AAAC,AAAW,AAAW,AAAgB,AAC9D,CAaQ,AAAa,AACjB;;UADiB,AACL,uBACZ;qBAAa,QAAA,AAAQ,AAAG,iBAFP,AAEJ,AAAgC,AAAM,AACnD;;sBAEF;uBAAqB,QAArB,AAA0B,0BAN5B,AAOC;2BAGD,AACE,AAAC,AACC,AAAY,AACZ,AAAW,AAAC,AACZ,AAAqB,AACrB,AAAW,AAAC,AACZ,AAAiB,AAAC,AAClB,AAAY,AAAC,AACb,AAAe,AAAC,AAChB,AAAQ,AAAC,AACT,AAAc,AAAC,AACf,AAAe,AAAC,AAChB,AAAyB,AAAC,AAG/B;AAxBG,AAAmB,AAGA;;AAuBvB,AAAS,AACP,AACE,AAAC;AACC,AAAC,AACC,AAAS,AAAC,iCAEV,AAAC,AACC,AAAc,AAAC,AACf,AAAa,AACb,AAAM;AAER,AAAC,qBAAD,AAAU,AAAW,AAAC;AACpB,AAAC,AAAK,oBAAN,AAAC;AACH,AAAE;AACJ,AAAE,oBACJ;AAdF,AAcE,AAAE,0BAEL;;wBA3D+B;;uBA8DlC;AAAA,AAAU,AAAY,wBACpB;AAAQ,AAAU,AAAQ,kCAAA,AAAU,AAAM,AACxC,AAAK,AAAU,AAAO,AACtB,AAAS,AAAU,AAAW,AAAM,AACpC;;AAAM,AAAU,AAAM,AACpB,AAAI,AAAU,AAAO,AACrB;;;;;;sBAFoB,AAEX,AAAU,AAAO;AALY,AAGlC,AAIN;AARkB,AACZ,AAAkB,AAAgB,AAOhC,AAAU,AAAO;;;AAE3B,AAAO;;AAAU,sBAVnB,AAAsB,AAatB;;8BAAA,AAAe;;;;;;;;;;;;;;;;;;;;EAzEX;;;;;;;;;;;;;;OAXG,OAAS,WAAhB,AAA2B,QAA3B","file":"/imports/plugins/core/email/client/components/emailLogs.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { Card, CardHeader, CardBody, CardGroup, Loading } from \"/imports/plugins/core/ui/client/components\";\nimport MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport EmailTableColumn from \"./emailTableColumn\";\nimport { Jobs } from \"/lib/collections\";\nimport { i18next } from \"/client/api\";\nimport \"./emailConfig.css\";\n\n\nclass EmailLogs extends Component {\n  renderEmailsTable() {\n    const filteredFields = [\"data.to\", \"updated\", \"data.subject\", \"status\"];\n    const filteredFieldsColumns = [\"data.to\", \"updated\", \"data.subject\", \"status\"];\n    const noDataMessage = i18next.t(\"admin.logs.noEmails\");\n\n    // helper adds a class to every grid row\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"email-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`admin.logs.headers.${field}`),\n        customComponent: EmailTableColumn\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n\n    return (\n      <MeteorGriddle\n        publication=\"Emails\"\n        collection={Jobs}\n        matchingResultsCount=\"emails-count\"\n        showFilter={true}\n        useGriddleStyles={false}\n        rowMetadata={customRowMetaData}\n        filteredFields={filteredFields}\n        columns={filteredFieldsColumns}\n        noDataMessage={noDataMessage}\n        columnMetadata={customColumnMetadata}\n        externalLoadingComponent={Loading}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <CardGroup>\n        <Card\n          expanded={true}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"admin.logs.headers.emailLogs\"\n            title=\"Email Logs\"\n          />\n          <CardBody expandable={true}>\n            {this.renderEmailsTable()}\n          </CardBody>\n        </Card>\n      </CardGroup>\n    );\n  }\n}\n\nEmailLogs.propTypes = {\n  emails: PropTypes.arrayOf(PropTypes.shape({\n    _id: PropTypes.string.isRequired,\n    created: PropTypes.instanceOf(Date).isRequired,\n    data: PropTypes.shape({\n      to: PropTypes.string.isRequired,\n      subject: PropTypes.string.isRequired\n    }),\n    status: PropTypes.string.isRequired\n  })),\n  limit: PropTypes.string\n};\n\nexport default EmailLogs;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/email/client/components/emailLogs.js.map","sourceFileName":"/imports/plugins/core/email/client/components/emailLogs.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"emailLogs"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar Card = void 0,\n    CardHeader = void 0,\n    CardBody = void 0,\n    CardGroup = void 0,\n    Loading = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  Card: function (v) {\n    Card = v;\n  },\n  CardHeader: function (v) {\n    CardHeader = v;\n  },\n  CardBody: function (v) {\n    CardBody = v;\n  },\n  CardGroup: function (v) {\n    CardGroup = v;\n  },\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 1);\nvar MeteorGriddle = void 0;\nmodule.importSync(\"/imports/plugins/core/ui-grid/client/griddle\", {\n  \"default\": function (v) {\n    MeteorGriddle = v;\n  }\n}, 2);\nvar EmailTableColumn = void 0;\nmodule.importSync(\"./emailTableColumn\", {\n  \"default\": function (v) {\n    EmailTableColumn = v;\n  }\n}, 3);\nvar Jobs = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Jobs: function (v) {\n    Jobs = v;\n  }\n}, 4);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 5);\nmodule.importSync(\"./emailConfig.css\");\n\nvar EmailLogs = function (_Component) {\n  (0, _inherits3.default)(EmailLogs, _Component);\n\n  function EmailLogs() {\n    (0, _classCallCheck3.default)(this, EmailLogs);\n    return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));\n  }\n\n  EmailLogs.prototype.renderEmailsTable = function () {\n    function renderEmailsTable() {\n      var filteredFields = [\"data.to\", \"updated\", \"data.subject\", \"status\"];\n      var filteredFieldsColumns = [\"data.to\", \"updated\", \"data.subject\", \"status\"];\n      var noDataMessage = i18next.t(\"admin.logs.noEmails\"); // helper adds a class to every grid row\n\n      var customRowMetaData = {\n        bodyCssClassName: function () {\n          return \"email-grid-row\";\n        }\n      }; // add i18n handling to headers\n\n      var customColumnMetadata = [];\n      filteredFields.forEach(function (field) {\n        var columnMeta = {\n          columnName: field,\n          displayName: i18next.t(\"admin.logs.headers.\" + field),\n          customComponent: EmailTableColumn\n        };\n        customColumnMetadata.push(columnMeta);\n      });\n      return React.createElement(MeteorGriddle, {\n        publication: \"Emails\",\n        collection: Jobs,\n        matchingResultsCount: \"emails-count\",\n        showFilter: true,\n        useGriddleStyles: false,\n        rowMetadata: customRowMetaData,\n        filteredFields: filteredFields,\n        columns: filteredFieldsColumns,\n        noDataMessage: noDataMessage,\n        columnMetadata: customColumnMetadata,\n        externalLoadingComponent: Loading\n      });\n    }\n\n    return renderEmailsTable;\n  }();\n\n  EmailLogs.prototype.render = function () {\n    function render() {\n      return React.createElement(\n        CardGroup,\n        null,\n        React.createElement(\n          Card,\n          {\n            expanded: true\n          },\n          React.createElement(CardHeader, {\n            actAsExpander: true,\n            i18nKeyTitle: \"admin.logs.headers.emailLogs\",\n            title: \"Email Logs\"\n          }),\n          React.createElement(\n            CardBody,\n            {\n              expandable: true\n            },\n            this.renderEmailsTable()\n          )\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return EmailLogs;\n}(Component);\n\nEmailLogs.propTypes = {\n  emails: PropTypes.arrayOf(PropTypes.shape({\n    _id: PropTypes.string.isRequired,\n    created: PropTypes.instanceOf(Date).isRequired,\n    data: PropTypes.shape({\n      to: PropTypes.string.isRequired,\n      subject: PropTypes.string.isRequired\n    }),\n    status: PropTypes.string.isRequired\n  })),\n  limit: PropTypes.string\n};\nmodule.export(\"default\", exports.default = EmailLogs);","map":{"version":3,"sources":["/imports/plugins/core/email/client/components/emailLogs.js"],"names":["React","Component","PropTypes","Card","CardHeader","CardBody","CardGroup","Loading","MeteorGriddle","EmailTableColumn","Jobs","i18next","EmailLogs","renderEmailsTable","filteredFields","filteredFieldsColumns","noDataMessage","t","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","customComponent","push","render","propTypes","emails","arrayOf","shape","_id","string","isRequired","created","instanceOf","Date","data","to","subject","status","limit"],"mappings":";;;;;;;;;;;;;;AAAA;IAAA;;OAA4C,WAA5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBACA,AAAS,AAAM,AAAY,AAAU,AAAW,AAAe,AAC/D,AAAO,AAAmB,AAC1B,AAAO,AAAsB,AAC7B,AAAS,AAAY,AACrB,AAAS,AAAe,AACxB,AAAO,AAGP,AAAM,AAAkB,AAAU,AAChC;;IAAoB;;;;;;;;sBACZ;;UACA,kBAAwB,AAAC,WAAD,AAAY,WAAZ,AAAuB,gBAArD,AAA8B,AAAuC,AACrE;UAAM,AAAgB,wBAAQ,CAAR,AAAU,sBAHd,AAGlB,AAAsB,AAEtB;oCACA,AAAM,AAAoB,AACxB,wBAAkB,AAAO,AACvB;;UAAO;sCARO,AAMlB,AAA0B,AAM1B;;AACA,AAAM,AAAuB,AAC7B,AAAe,AAAQ,AAAU,AAAO,AACtC;AAPE,AACD,QARH,AAAuB,AAAC,AAAW,AAAW,AAAgB,AAC9D,CAaQ,AAAa,AACjB;;UADiB,AACL,uBACZ;qBAAa,QAAA,AAAQ,AAAG,iBAFP,AAEJ,AAAgC,AAAM,AACnD;;sBAEF;uBAAqB,QAArB,AAA0B,0BAN5B,AAOC;2BAGD,AACE,AAAC,AACC,AAAY,AACZ,AAAW,AAAC,AACZ,AAAqB,AACrB,AAAW,AAAC,AACZ,AAAiB,AAAC,AAClB,AAAY,AAAC,AACb,AAAe,AAAC,AAChB,AAAQ,AAAC,AACT,AAAc,AAAC,AACf,AAAe,AAAC,AAChB,AAAyB,AAAC,AAG/B;AAxBG,AAAmB,AAGA;;AAuBvB,AAAS,AACP,AACE,AAAC;AACC,AAAC,AACC,AAAS,AAAC,iCAEV,AAAC,AACC,AAAc,AAAC,AACf,AAAa,AACb,AAAM;AAER,AAAC,qBAAD,AAAU,AAAW,AAAC;AACpB,AAAC,AAAK,oBAAN,AAAC;AACH,AAAE;AACJ,AAAE,oBACJ;AAdF,AAcE,AAAE,0BAEL;;wBA3D+B;;uBA8DlC;AAAA,AAAU,AAAY,wBACpB;AAAQ,AAAU,AAAQ,kCAAA,AAAU,AAAM,AACxC,AAAK,AAAU,AAAO,AACtB,AAAS,AAAU,AAAW,AAAM,AACpC;;AAAM,AAAU,AAAM,AACpB,AAAI,AAAU,AAAO,AACrB;;;;;;sBAFoB,AAEX,AAAU,AAAO;AALY,AAGlC,AAIN;AARkB,AACZ,AAAkB,AAAgB,AAOhC,AAAU,AAAO;;;AAE3B,AAAO;;AAAU,sBAVnB,AAAsB,AAatB;;8BAAA,AAAe;;;;;;;;;;;;;;;;;;;;EAzEX;;;;;;;;;;;;;;OAXG,OAAS,WAAhB,AAA2B,QAA3B","file":"/imports/plugins/core/email/client/components/emailLogs.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { Card, CardHeader, CardBody, CardGroup, Loading } from \"/imports/plugins/core/ui/client/components\";\nimport MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport EmailTableColumn from \"./emailTableColumn\";\nimport { Jobs } from \"/lib/collections\";\nimport { i18next } from \"/client/api\";\nimport \"./emailConfig.css\";\n\n\nclass EmailLogs extends Component {\n  renderEmailsTable() {\n    const filteredFields = [\"data.to\", \"updated\", \"data.subject\", \"status\"];\n    const filteredFieldsColumns = [\"data.to\", \"updated\", \"data.subject\", \"status\"];\n    const noDataMessage = i18next.t(\"admin.logs.noEmails\");\n\n    // helper adds a class to every grid row\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"email-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`admin.logs.headers.${field}`),\n        customComponent: EmailTableColumn\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n\n    return (\n      <MeteorGriddle\n        publication=\"Emails\"\n        collection={Jobs}\n        matchingResultsCount=\"emails-count\"\n        showFilter={true}\n        useGriddleStyles={false}\n        rowMetadata={customRowMetaData}\n        filteredFields={filteredFields}\n        columns={filteredFieldsColumns}\n        noDataMessage={noDataMessage}\n        columnMetadata={customColumnMetadata}\n        externalLoadingComponent={Loading}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <CardGroup>\n        <Card\n          expanded={true}\n        >\n          <CardHeader\n            actAsExpander={true}\n            i18nKeyTitle=\"admin.logs.headers.emailLogs\"\n            title=\"Email Logs\"\n          />\n          <CardBody expandable={true}>\n            {this.renderEmailsTable()}\n          </CardBody>\n        </Card>\n      </CardGroup>\n    );\n  }\n}\n\nEmailLogs.propTypes = {\n  emails: PropTypes.arrayOf(PropTypes.shape({\n    _id: PropTypes.string.isRequired,\n    created: PropTypes.instanceOf(Date).isRequired,\n    data: PropTypes.shape({\n      to: PropTypes.string.isRequired,\n      subject: PropTypes.string.isRequired\n    }),\n    status: PropTypes.string.isRequired\n  })),\n  limit: PropTypes.string\n};\n\nexport default EmailLogs;\n"]},"hash":"86eff285e50a9609ad2f8da0658980693651e466"}
