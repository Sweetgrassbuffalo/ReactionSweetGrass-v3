{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"react-dom/server","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOMServer"}]},{"source":"handlebars","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Handlebars"}]},{"source":"immutable","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Immutable"}]},{"source":"/lib/collections","imported":["Assets","Templates"],"specifiers":[{"kind":"named","imported":"Assets","local":"Assets"},{"kind":"named","imported":"Templates","local":"Templates"}]},{"source":"/server/api","imported":["Hooks","Logger","Reaction"],"specifiers":[{"kind":"named","imported":"Hooks","local":"Hooks"},{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":["TEMPLATE_PARSER_REACT","TEMPLATE_PARSER_HANDLEBARS","registerTemplate","templateInfo","shopId","insertImmediately","registerTemplateForMemoryCache","templateInfo","shopId","registerTemplateForDatabase","templateInfo","getTemplateByName","templateName","shopId","processTemplateInfoForMemoryCache","templateInfo","processTemplateInfoForDatabase","templateInfo","registerTemplateParser","name","renderFunction","renderTemplate","templateInfo","data","compileHandlebarsTemplate","name","template","renderHandlebarsTemplate","templateInfo","data","renderTemplateToStaticMarkup","template","props","resetRegisteredTemplates","initTemplates"],"specifiers":[{"kind":"local","local":"TEMPLATE_PARSER_REACT","exported":"TEMPLATE_PARSER_REACT"},{"kind":"local","local":"TEMPLATE_PARSER_HANDLEBARS","exported":"TEMPLATE_PARSER_HANDLEBARS"},{"kind":"local","local":"registerTemplate","exported":"registerTemplate"},{"kind":"local","local":"templateInfo","exported":"templateInfo"},{"kind":"local","local":"shopId","exported":"shopId"},{"kind":"local","local":"insertImmediately","exported":"insertImmediately"},{"kind":"local","local":"registerTemplateForMemoryCache","exported":"registerTemplateForMemoryCache"},{"kind":"local","local":"templateInfo","exported":"templateInfo"},{"kind":"local","local":"shopId","exported":"shopId"},{"kind":"local","local":"registerTemplateForDatabase","exported":"registerTemplateForDatabase"},{"kind":"local","local":"templateInfo","exported":"templateInfo"},{"kind":"local","local":"getTemplateByName","exported":"getTemplateByName"},{"kind":"local","local":"templateName","exported":"templateName"},{"kind":"local","local":"shopId","exported":"shopId"},{"kind":"local","local":"processTemplateInfoForMemoryCache","exported":"processTemplateInfoForMemoryCache"},{"kind":"local","local":"templateInfo","exported":"templateInfo"},{"kind":"local","local":"processTemplateInfoForDatabase","exported":"processTemplateInfoForDatabase"},{"kind":"local","local":"templateInfo","exported":"templateInfo"},{"kind":"local","local":"registerTemplateParser","exported":"registerTemplateParser"},{"kind":"local","local":"name","exported":"name"},{"kind":"local","local":"renderFunction","exported":"renderFunction"},{"kind":"local","local":"renderTemplate","exported":"renderTemplate"},{"kind":"local","local":"templateInfo","exported":"templateInfo"},{"kind":"local","local":"data","exported":"data"},{"kind":"local","local":"compileHandlebarsTemplate","exported":"compileHandlebarsTemplate"},{"kind":"local","local":"name","exported":"name"},{"kind":"local","local":"template","exported":"template"},{"kind":"local","local":"renderHandlebarsTemplate","exported":"renderHandlebarsTemplate"},{"kind":"local","local":"templateInfo","exported":"templateInfo"},{"kind":"local","local":"data","exported":"data"},{"kind":"local","local":"renderTemplateToStaticMarkup","exported":"renderTemplateToStaticMarkup"},{"kind":"local","local":"template","exported":"template"},{"kind":"local","local":"props","exported":"props"},{"kind":"local","local":"resetRegisteredTemplates","exported":"resetRegisteredTemplates"},{"kind":"local","local":"initTemplates","exported":"initTemplates"}]}}},"options":{"filename":"/server/api/core/templates.js","filenameRelative":"/server/api/core/templates.js","inputSourceMap":{"version":3,"sources":["/server/api/core/templates.js"],"names":["React","ReactDOMServer","Handlebars","Immutable","Assets","Templates","Hooks","Logger","Reaction","registeredTemplates","OrderedMap","templateCache","Map","templateParsers","TEMPLATE_PARSER_REACT","TEMPLATE_PARSER_HANDLEBARS","registerTemplate","templateInfo","shopId","insertImmediately","literal","registerTemplateForMemoryCache","reference","registerTemplateForDatabase","templateLiteral","templateReference","templateInfoForMemoryCache","processTemplateInfoForMemoryCache","shopTemplates","get","name","set","templateInfoForDatabase","processTemplateInfoForDatabase","update","type","$set","content","JSON","stringify","upsert","getTemplateByName","templateName","registeredTemplate","findOne","$or","isOriginalTemplate","info","template","toObject","templateData","title","subject","templateFor","parser","registerTemplateParser","renderFunction","renderTemplate","data","renderHandlebarsTemplate","compileHandlebarsTemplate","compiledTemplate","compile","undefined","renderTemplateToStaticMarkup","props","renderToStaticMarkup","createElement","resetRegisteredTemplates","initTemplates","Events","add","find","forEach","t","debug","Import","parse","flush"],"mappings":"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","file":"/server/api/core/templates.js.map","sourcesContent":["import React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport Handlebars from \"handlebars\";\nimport Immutable from \"immutable\";\nimport { Assets, Templates } from \"/lib/collections\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\n\nlet registeredTemplates = Immutable.OrderedMap();\nlet templateCache = Immutable.Map();\nlet templateParsers = Immutable.Map();\n\n// var ReactComponentPrototype = React.Component.prototype\n// var ReactClassComponentPrototype = (Object.getPrototypeOf(Object.getPrototypeOf(new (React.createClass({ render () {} }))())))\n\nexport const TEMPLATE_PARSER_REACT = \"react\";\nexport const TEMPLATE_PARSER_HANDLEBARS = \"handlebars\";\n\nexport function registerTemplate(templateInfo, shopId, insertImmediately = false) {\n  const literal = registerTemplateForMemoryCache(templateInfo, shopId);\n  const reference = registerTemplateForDatabase(templateInfo, shopId, insertImmediately);\n\n  return {\n    templateLiteral: literal,\n    templateReference: reference\n  };\n}\n\nexport function registerTemplateForMemoryCache(templateInfo, shopId) {\n  // Process template info and cache in memory.\n  // This allows us to have function and class references for the templates for\n  // React and other custom parsers\n  const templateInfoForMemoryCache = processTemplateInfoForMemoryCache(templateInfo);\n  let shopTemplates = registeredTemplates.get(shopId);\n\n  if (!shopTemplates) {\n    shopTemplates = {};\n  }\n\n  shopTemplates[templateInfo.name] = templateInfoForMemoryCache;\n  registeredTemplates = registeredTemplates.set(shopId, shopTemplates);\n\n  return templateInfoForMemoryCache;\n}\n\nexport function registerTemplateForDatabase(templateInfo) {\n  // Process template info for use in a database\n  // Namely, any literals like functions are stripped as they cannot be safetly,\n  // and should not stored in the database\n  const templateInfoForDatabase = processTemplateInfoForDatabase(templateInfo);\n\n  // Import template into the Assets collecton.\n  Assets.update({\n    type: \"template\",\n    name: templateInfoForDatabase.name\n  }, {\n    $set: {\n      content: JSON.stringify(templateInfoForDatabase)\n    }\n  }, {\n    upsert: true\n  });\n\n  // Return template data crafted for entry into a database\n  return templateInfoForDatabase;\n}\n\nexport function getTemplateByName(templateName, shopId) {\n  const registeredTemplate = registeredTemplates.get(shopId)[templateName];\n\n  if (registeredTemplate) {\n    return registeredTemplate;\n  }\n\n  const templateInfo = Templates.findOne({\n    name: templateName,\n    $or: [\n      // Attemt to find user editable / edited templated first\n      {\n        isOriginalTemplate: false\n      },\n      // Fallback to the original templates\n      {\n        isOriginalTemplate: true\n      }\n    ],\n    shopId\n  });\n\n  return registerTemplateForMemoryCache(templateInfo);\n}\n\nexport function processTemplateInfoForMemoryCache(templateInfo) {\n  // Avoid mutating the original passed in param\n  const info = Immutable.Map(templateInfo);\n\n  if (typeof templateInfo.template === \"string\") {\n    // Set the template parser to Handlebars for string based templates\n    return info.set(\"parser\", TEMPLATE_PARSER_HANDLEBARS).toObject();\n  } else if (typeof templateInfo.template === \"function\") {\n    // Set the parser to react for React components\n    return info.set(\"parser\", TEMPLATE_PARSER_REACT).toObject();\n  } else if (typeof templateInfo.template === \"object\") {\n    // Set the parser to react for React components\n    return info.set(\"parser\", TEMPLATE_PARSER_REACT).toObject();\n  }\n\n  return null;\n}\n\nexport function processTemplateInfoForDatabase(templateInfo) {\n  const templateData = {\n    name: templateInfo.name,\n    title: templateInfo.title,\n    type: templateInfo.type,\n    subject: templateInfo.subject,\n    templateFor: templateInfo.templateFor\n  };\n\n\n  if (typeof templateInfo.template === \"string\") {\n    templateData.template = templateInfo.template;\n    templateData.parser = TEMPLATE_PARSER_HANDLEBARS;\n  } else if (typeof templateInfo.template === \"object\") {\n    templateData.template = templateInfo.template;\n    templateData.parser = TEMPLATE_PARSER_REACT;\n  } else if (typeof templateInfo.template === \"function\") {\n    templateData.parser = TEMPLATE_PARSER_REACT;\n  }\n\n  return templateData;\n}\n\n\nexport function registerTemplateParser(name, renderFunction) {\n  templateParsers = templateParsers.set(name, renderFunction);\n}\n\nexport function renderTemplate(templateInfo, data = {}) {\n  if (templateInfo.parser === TEMPLATE_PARSER_REACT) {\n    return null;\n  } else if (templateInfo.parser === TEMPLATE_PARSER_HANDLEBARS) {\n    return renderHandlebarsTemplate(templateInfo, data);\n  }\n\n  if (typeof templateParsers.get(name) === \"function\") {\n    return templateParsers.get(name)(templateInfo, data);\n  }\n\n  return false;\n}\n\n/**\n * Compile and cache Handlebars template\n * @param {String} name Name of template to register amd save to cache\n * @param {String} template markup\n * @return {Function} Compiled handlebars template.\n */\nexport function compileHandlebarsTemplate(name, template) {\n  const compiledTemplate = Handlebars.compile(template);\n  templateCache = templateCache.set(name, compiledTemplate);\n  return compiledTemplate;\n}\n\nexport function renderHandlebarsTemplate(templateInfo, data) {\n  if (templateCache[templateInfo.name] === undefined) {\n    compileHandlebarsTemplate(templateInfo.name, templateInfo.template);\n  }\n\n  const compiledTemplate = templateCache.get(templateInfo.name);\n  return compiledTemplate(data);\n}\n\nexport function renderTemplateToStaticMarkup(template, props) {\n  return ReactDOMServer.renderToStaticMarkup(\n    React.createElement(template, props)\n  );\n}\n\n/**\n * Reset regestered templates\n * This is mostly useful for aiding in unit testing\n * @return {Immutable.OrderedMap} immultable.js OrderedMap\n */\nexport function resetRegisteredTemplates() {\n  registeredTemplates = Immutable.OrderedMap();\n}\n\n\nexport function initTemplates() {\n  /**\n   * Hook to setup core Templates imports during Reaction init\n   */\n  Hooks.Events.add(\"afterCoreInit\", () => {\n    Assets.find({ type: \"template\" }).forEach((t) => {\n      Logger.debug(`Importing ${t.name} template`);\n      if (t.content) {\n        Reaction.Import.template(JSON.parse(t.content));\n      } else {\n        Logger.debug(`No template content found for ${t.name} asset`);\n      }\n    });\n    Reaction.Import.flush();\n  });\n}\n\n\nexport default {\n  get registeredTemplates() {\n    return registeredTemplates;\n  },\n  get templateCache() {\n    return templateCache;\n  },\n  get templateParsers() {\n    return templateParsers;\n  },\n  registerTemplate,\n  getTemplateByName,\n  processTemplateInfoForDatabase,\n  processTemplateInfoForMemoryCache,\n  compileHandlebarsTemplate,\n  renderHandlebarsTemplate,\n  renderTemplateToStaticMarkup\n};\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/api/core/templates.js.map","sourceFileName":"/server/api/core/templates.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"templates"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  TEMPLATE_PARSER_REACT: function () {\n    return TEMPLATE_PARSER_REACT;\n  },\n  TEMPLATE_PARSER_HANDLEBARS: function () {\n    return TEMPLATE_PARSER_HANDLEBARS;\n  },\n  registerTemplate: function () {\n    return registerTemplate;\n  },\n  registerTemplateForMemoryCache: function () {\n    return registerTemplateForMemoryCache;\n  },\n  registerTemplateForDatabase: function () {\n    return registerTemplateForDatabase;\n  },\n  getTemplateByName: function () {\n    return getTemplateByName;\n  },\n  processTemplateInfoForMemoryCache: function () {\n    return processTemplateInfoForMemoryCache;\n  },\n  processTemplateInfoForDatabase: function () {\n    return processTemplateInfoForDatabase;\n  },\n  registerTemplateParser: function () {\n    return registerTemplateParser;\n  },\n  renderTemplate: function () {\n    return renderTemplate;\n  },\n  compileHandlebarsTemplate: function () {\n    return compileHandlebarsTemplate;\n  },\n  renderHandlebarsTemplate: function () {\n    return renderHandlebarsTemplate;\n  },\n  renderTemplateToStaticMarkup: function () {\n    return renderTemplateToStaticMarkup;\n  },\n  resetRegisteredTemplates: function () {\n    return resetRegisteredTemplates;\n  },\n  initTemplates: function () {\n    return initTemplates;\n  }\n});\nvar React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar ReactDOMServer = void 0;\nmodule.importSync(\"react-dom/server\", {\n  \"default\": function (v) {\n    ReactDOMServer = v;\n  }\n}, 1);\nvar Handlebars = void 0;\nmodule.importSync(\"handlebars\", {\n  \"default\": function (v) {\n    Handlebars = v;\n  }\n}, 2);\nvar Immutable = void 0;\nmodule.importSync(\"immutable\", {\n  \"default\": function (v) {\n    Immutable = v;\n  }\n}, 3);\nvar Assets = void 0,\n    Templates = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Assets: function (v) {\n    Assets = v;\n  },\n  Templates: function (v) {\n    Templates = v;\n  }\n}, 4);\nvar Hooks = void 0,\n    Logger = void 0,\n    Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Hooks: function (v) {\n    Hooks = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 5);\nvar registeredTemplates = Immutable.OrderedMap();\nvar templateCache = Immutable.Map();\nvar templateParsers = Immutable.Map(); // var ReactComponentPrototype = React.Component.prototype\n// var ReactClassComponentPrototype = (Object.getPrototypeOf(Object.getPrototypeOf(new (React.createClass({ render () {} }))())))\n\nvar TEMPLATE_PARSER_REACT = \"react\";\nvar TEMPLATE_PARSER_HANDLEBARS = \"handlebars\";\n\nfunction registerTemplate(templateInfo, shopId) {\n  var insertImmediately = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var literal = registerTemplateForMemoryCache(templateInfo, shopId);\n  var reference = registerTemplateForDatabase(templateInfo, shopId, insertImmediately);\n  return {\n    templateLiteral: literal,\n    templateReference: reference\n  };\n}\n\nfunction registerTemplateForMemoryCache(templateInfo, shopId) {\n  // Process template info and cache in memory.\n  // This allows us to have function and class references for the templates for\n  // React and other custom parsers\n  var templateInfoForMemoryCache = processTemplateInfoForMemoryCache(templateInfo);\n  var shopTemplates = registeredTemplates.get(shopId);\n\n  if (!shopTemplates) {\n    shopTemplates = {};\n  }\n\n  shopTemplates[templateInfo.name] = templateInfoForMemoryCache;\n  registeredTemplates = registeredTemplates.set(shopId, shopTemplates);\n  return templateInfoForMemoryCache;\n}\n\nfunction registerTemplateForDatabase(templateInfo) {\n  // Process template info for use in a database\n  // Namely, any literals like functions are stripped as they cannot be safetly,\n  // and should not stored in the database\n  var templateInfoForDatabase = processTemplateInfoForDatabase(templateInfo); // Import template into the Assets collecton.\n\n  Assets.update({\n    type: \"template\",\n    name: templateInfoForDatabase.name\n  }, {\n    $set: {\n      content: JSON.stringify(templateInfoForDatabase)\n    }\n  }, {\n    upsert: true\n  }); // Return template data crafted for entry into a database\n\n  return templateInfoForDatabase;\n}\n\nfunction getTemplateByName(templateName, shopId) {\n  var registeredTemplate = registeredTemplates.get(shopId)[templateName];\n\n  if (registeredTemplate) {\n    return registeredTemplate;\n  }\n\n  var templateInfo = Templates.findOne({\n    name: templateName,\n    $or: [// Attemt to find user editable / edited templated first\n    {\n      isOriginalTemplate: false\n    }, // Fallback to the original templates\n    {\n      isOriginalTemplate: true\n    }],\n    shopId: shopId\n  });\n  return registerTemplateForMemoryCache(templateInfo);\n}\n\nfunction processTemplateInfoForMemoryCache(templateInfo) {\n  // Avoid mutating the original passed in param\n  var info = Immutable.Map(templateInfo);\n\n  if (typeof templateInfo.template === \"string\") {\n    // Set the template parser to Handlebars for string based templates\n    return info.set(\"parser\", TEMPLATE_PARSER_HANDLEBARS).toObject();\n  } else if (typeof templateInfo.template === \"function\") {\n    // Set the parser to react for React components\n    return info.set(\"parser\", TEMPLATE_PARSER_REACT).toObject();\n  } else if ((0, _typeof3.default)(templateInfo.template) === \"object\") {\n    // Set the parser to react for React components\n    return info.set(\"parser\", TEMPLATE_PARSER_REACT).toObject();\n  }\n\n  return null;\n}\n\nfunction processTemplateInfoForDatabase(templateInfo) {\n  var templateData = {\n    name: templateInfo.name,\n    title: templateInfo.title,\n    type: templateInfo.type,\n    subject: templateInfo.subject,\n    templateFor: templateInfo.templateFor\n  };\n\n  if (typeof templateInfo.template === \"string\") {\n    templateData.template = templateInfo.template;\n    templateData.parser = TEMPLATE_PARSER_HANDLEBARS;\n  } else if ((0, _typeof3.default)(templateInfo.template) === \"object\") {\n    templateData.template = templateInfo.template;\n    templateData.parser = TEMPLATE_PARSER_REACT;\n  } else if (typeof templateInfo.template === \"function\") {\n    templateData.parser = TEMPLATE_PARSER_REACT;\n  }\n\n  return templateData;\n}\n\nfunction registerTemplateParser(name, renderFunction) {\n  templateParsers = templateParsers.set(name, renderFunction);\n}\n\nfunction renderTemplate(templateInfo) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (templateInfo.parser === TEMPLATE_PARSER_REACT) {\n    return null;\n  } else if (templateInfo.parser === TEMPLATE_PARSER_HANDLEBARS) {\n    return renderHandlebarsTemplate(templateInfo, data);\n  }\n\n  if (typeof templateParsers.get(name) === \"function\") {\n    return templateParsers.get(name)(templateInfo, data);\n  }\n\n  return false;\n}\n\nfunction compileHandlebarsTemplate(name, template) {\n  var compiledTemplate = Handlebars.compile(template);\n  templateCache = templateCache.set(name, compiledTemplate);\n  return compiledTemplate;\n}\n\nfunction renderHandlebarsTemplate(templateInfo, data) {\n  if (templateCache[templateInfo.name] === undefined) {\n    compileHandlebarsTemplate(templateInfo.name, templateInfo.template);\n  }\n\n  var compiledTemplate = templateCache.get(templateInfo.name);\n  return compiledTemplate(data);\n}\n\nfunction renderTemplateToStaticMarkup(template, props) {\n  return ReactDOMServer.renderToStaticMarkup(React.createElement(template, props));\n}\n\nfunction resetRegisteredTemplates() {\n  registeredTemplates = Immutable.OrderedMap();\n}\n\nfunction initTemplates() {\n  /**\n   * Hook to setup core Templates imports during Reaction init\n   */Hooks.Events.add(\"afterCoreInit\", function () {\n    Assets.find({\n      type: \"template\"\n    }).forEach(function (t) {\n      Logger.debug(\"Importing \" + t.name + \" template\");\n\n      if (t.content) {\n        Reaction.Import.template(JSON.parse(t.content));\n      } else {\n        Logger.debug(\"No template content found for \" + t.name + \" asset\");\n      }\n    });\n    Reaction.Import.flush();\n  });\n}\n\nmodule.export(\"default\", exports.default = {\n  get registeredTemplates() {\n    return registeredTemplates;\n  },\n\n  get templateCache() {\n    return templateCache;\n  },\n\n  get templateParsers() {\n    return templateParsers;\n  },\n\n  registerTemplate: registerTemplate,\n  getTemplateByName: getTemplateByName,\n  processTemplateInfoForDatabase: processTemplateInfoForDatabase,\n  processTemplateInfoForMemoryCache: processTemplateInfoForMemoryCache,\n  compileHandlebarsTemplate: compileHandlebarsTemplate,\n  renderHandlebarsTemplate: renderHandlebarsTemplate,\n  renderTemplateToStaticMarkup: renderTemplateToStaticMarkup\n});","map":{"version":3,"sources":["/server/api/core/templates.js"],"names":["React","ReactDOMServer","Handlebars","Immutable","Assets","Templates","Hooks","Logger","Reaction","registeredTemplates","OrderedMap","templateCache","Map","templateParsers","TEMPLATE_PARSER_REACT","TEMPLATE_PARSER_HANDLEBARS","registerTemplate","templateInfo","shopId","insertImmediately","literal","registerTemplateForMemoryCache","reference","registerTemplateForDatabase","templateLiteral","templateReference","templateInfoForMemoryCache","processTemplateInfoForMemoryCache","shopTemplates","get","name","set","templateInfoForDatabase","processTemplateInfoForDatabase","update","type","$set","content","JSON","stringify","upsert","getTemplateByName","templateName","registeredTemplate","findOne","$or","isOriginalTemplate","info","template","toObject","templateData","title","subject","templateFor","parser","registerTemplateParser","renderFunction","renderTemplate","data","renderHandlebarsTemplate","compileHandlebarsTemplate","compiledTemplate","compile","undefined","renderTemplateToStaticMarkup","props","renderToStaticMarkup","createElement","resetRegisteredTemplates","initTemplates","Events","add","find","forEach","t","debug","Import","parse","flush"],"mappings":"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","file":"/server/api/core/templates.js.map","sourcesContent":["import React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport Handlebars from \"handlebars\";\nimport Immutable from \"immutable\";\nimport { Assets, Templates } from \"/lib/collections\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\n\nlet registeredTemplates = Immutable.OrderedMap();\nlet templateCache = Immutable.Map();\nlet templateParsers = Immutable.Map();\n\n// var ReactComponentPrototype = React.Component.prototype\n// var ReactClassComponentPrototype = (Object.getPrototypeOf(Object.getPrototypeOf(new (React.createClass({ render () {} }))())))\n\nexport const TEMPLATE_PARSER_REACT = \"react\";\nexport const TEMPLATE_PARSER_HANDLEBARS = \"handlebars\";\n\nexport function registerTemplate(templateInfo, shopId, insertImmediately = false) {\n  const literal = registerTemplateForMemoryCache(templateInfo, shopId);\n  const reference = registerTemplateForDatabase(templateInfo, shopId, insertImmediately);\n\n  return {\n    templateLiteral: literal,\n    templateReference: reference\n  };\n}\n\nexport function registerTemplateForMemoryCache(templateInfo, shopId) {\n  // Process template info and cache in memory.\n  // This allows us to have function and class references for the templates for\n  // React and other custom parsers\n  const templateInfoForMemoryCache = processTemplateInfoForMemoryCache(templateInfo);\n  let shopTemplates = registeredTemplates.get(shopId);\n\n  if (!shopTemplates) {\n    shopTemplates = {};\n  }\n\n  shopTemplates[templateInfo.name] = templateInfoForMemoryCache;\n  registeredTemplates = registeredTemplates.set(shopId, shopTemplates);\n\n  return templateInfoForMemoryCache;\n}\n\nexport function registerTemplateForDatabase(templateInfo) {\n  // Process template info for use in a database\n  // Namely, any literals like functions are stripped as they cannot be safetly,\n  // and should not stored in the database\n  const templateInfoForDatabase = processTemplateInfoForDatabase(templateInfo);\n\n  // Import template into the Assets collecton.\n  Assets.update({\n    type: \"template\",\n    name: templateInfoForDatabase.name\n  }, {\n    $set: {\n      content: JSON.stringify(templateInfoForDatabase)\n    }\n  }, {\n    upsert: true\n  });\n\n  // Return template data crafted for entry into a database\n  return templateInfoForDatabase;\n}\n\nexport function getTemplateByName(templateName, shopId) {\n  const registeredTemplate = registeredTemplates.get(shopId)[templateName];\n\n  if (registeredTemplate) {\n    return registeredTemplate;\n  }\n\n  const templateInfo = Templates.findOne({\n    name: templateName,\n    $or: [\n      // Attemt to find user editable / edited templated first\n      {\n        isOriginalTemplate: false\n      },\n      // Fallback to the original templates\n      {\n        isOriginalTemplate: true\n      }\n    ],\n    shopId\n  });\n\n  return registerTemplateForMemoryCache(templateInfo);\n}\n\nexport function processTemplateInfoForMemoryCache(templateInfo) {\n  // Avoid mutating the original passed in param\n  const info = Immutable.Map(templateInfo);\n\n  if (typeof templateInfo.template === \"string\") {\n    // Set the template parser to Handlebars for string based templates\n    return info.set(\"parser\", TEMPLATE_PARSER_HANDLEBARS).toObject();\n  } else if (typeof templateInfo.template === \"function\") {\n    // Set the parser to react for React components\n    return info.set(\"parser\", TEMPLATE_PARSER_REACT).toObject();\n  } else if (typeof templateInfo.template === \"object\") {\n    // Set the parser to react for React components\n    return info.set(\"parser\", TEMPLATE_PARSER_REACT).toObject();\n  }\n\n  return null;\n}\n\nexport function processTemplateInfoForDatabase(templateInfo) {\n  const templateData = {\n    name: templateInfo.name,\n    title: templateInfo.title,\n    type: templateInfo.type,\n    subject: templateInfo.subject,\n    templateFor: templateInfo.templateFor\n  };\n\n\n  if (typeof templateInfo.template === \"string\") {\n    templateData.template = templateInfo.template;\n    templateData.parser = TEMPLATE_PARSER_HANDLEBARS;\n  } else if (typeof templateInfo.template === \"object\") {\n    templateData.template = templateInfo.template;\n    templateData.parser = TEMPLATE_PARSER_REACT;\n  } else if (typeof templateInfo.template === \"function\") {\n    templateData.parser = TEMPLATE_PARSER_REACT;\n  }\n\n  return templateData;\n}\n\n\nexport function registerTemplateParser(name, renderFunction) {\n  templateParsers = templateParsers.set(name, renderFunction);\n}\n\nexport function renderTemplate(templateInfo, data = {}) {\n  if (templateInfo.parser === TEMPLATE_PARSER_REACT) {\n    return null;\n  } else if (templateInfo.parser === TEMPLATE_PARSER_HANDLEBARS) {\n    return renderHandlebarsTemplate(templateInfo, data);\n  }\n\n  if (typeof templateParsers.get(name) === \"function\") {\n    return templateParsers.get(name)(templateInfo, data);\n  }\n\n  return false;\n}\n\n/**\n * Compile and cache Handlebars template\n * @param {String} name Name of template to register amd save to cache\n * @param {String} template markup\n * @return {Function} Compiled handlebars template.\n */\nexport function compileHandlebarsTemplate(name, template) {\n  const compiledTemplate = Handlebars.compile(template);\n  templateCache = templateCache.set(name, compiledTemplate);\n  return compiledTemplate;\n}\n\nexport function renderHandlebarsTemplate(templateInfo, data) {\n  if (templateCache[templateInfo.name] === undefined) {\n    compileHandlebarsTemplate(templateInfo.name, templateInfo.template);\n  }\n\n  const compiledTemplate = templateCache.get(templateInfo.name);\n  return compiledTemplate(data);\n}\n\nexport function renderTemplateToStaticMarkup(template, props) {\n  return ReactDOMServer.renderToStaticMarkup(\n    React.createElement(template, props)\n  );\n}\n\n/**\n * Reset regestered templates\n * This is mostly useful for aiding in unit testing\n * @return {Immutable.OrderedMap} immultable.js OrderedMap\n */\nexport function resetRegisteredTemplates() {\n  registeredTemplates = Immutable.OrderedMap();\n}\n\n\nexport function initTemplates() {\n  /**\n   * Hook to setup core Templates imports during Reaction init\n   */\n  Hooks.Events.add(\"afterCoreInit\", () => {\n    Assets.find({ type: \"template\" }).forEach((t) => {\n      Logger.debug(`Importing ${t.name} template`);\n      if (t.content) {\n        Reaction.Import.template(JSON.parse(t.content));\n      } else {\n        Logger.debug(`No template content found for ${t.name} asset`);\n      }\n    });\n    Reaction.Import.flush();\n  });\n}\n\n\nexport default {\n  get registeredTemplates() {\n    return registeredTemplates;\n  },\n  get templateCache() {\n    return templateCache;\n  },\n  get templateParsers() {\n    return templateParsers;\n  },\n  registerTemplate,\n  getTemplateByName,\n  processTemplateInfoForDatabase,\n  processTemplateInfoForMemoryCache,\n  compileHandlebarsTemplate,\n  renderHandlebarsTemplate,\n  renderTemplateToStaticMarkup\n};\n"]},"hash":"e7d32d7098f18c4d30c65c2f5b96dda7940f98de"}
