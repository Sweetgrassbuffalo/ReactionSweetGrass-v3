{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/lib/collections","imported":["Cart","Shops"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Shops","local":"Shops"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/i18n/templates/currency/currency.js","filenameRelative":"/client/modules/i18n/templates/currency/currency.js","inputSourceMap":{"version":3,"sources":["/client/modules/i18n/templates/currency/currency.js"],"names":["Meteor","Reaction","Cart","Shops","Template","currencySelect","helpers","currencies","Subscriptions","ready","user","shop","findOne","getShopId","fields","currency","Locale","get","Match","test","Object","currencyName","enabled","localStorageCurrency","localStorage","getItem","class","symbol","push","length","currentCurrency","locale","events","event","preventDefault","users","update","userId","$set","setItem","cart","call","_id"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAgB,AACzB,AAAS,AAAM,AAAa,AAE5B,AAAS,AAAe,AAAQ;AAC9B,SAAa;AACL,0BAAN,AAAmB;qBACnB;;QAAI,SAAA,AAAS,cAAT,AAAuB,MAAvB,AAA6B,WAAW,OAA5C,AAA4C,AAAO,QAAQ,AACzD;UAAM,aAAO,AAAM,QAAQ,SAAd,AAAc,AAAS;;sBAC1B,AACM,AACZ;oBAHJ,AAAa,AAAoC,AACvC,AAEI,AAGd;AALU,AACN;AAF6C,AAC/C,OADW;eAMb,AAAS,OAAT,AAAgB;;uDAChB;AAAI,aAAM,IAAN,AAAW,AAAM,uDAAW,KAAK,aAArC,AAAiD,AAC/C;AAAK,mBAAM,WAAX,AAA2B,AAAK,cAAhC,AAA4C,kBAC1C;AAAI,gBAAK;wBAAT,AAAI,AAA8B,AAAY,AAAM,AAClD;AADE,AAAgB;gBACZ,AAAW,4CAAE,aAAF,AAAY;AAA7B,AACA;AAFkD,AAElD,AAAM,AAAuB,AAAa,AAAQ,AAClD,AACA;;sCACA;;iCACA;AAAA,AAAI,AAAsB,AACxB;AAAI,yCAAyB,SAAS,UAAtC,AAAgD,AAC9C;uBAAA,AAAS,QAAT,AAAiB,AAClB;AACF;;AAJD,AAIO,qBAAI,AAAK,cAAL,AAAkB,WAAtB,AAA+B,cAAU,AAC9C;uBAAS,KAAT,AAAiB,AAClB;;AACD;;YAAS,WAAT,AAAkB,YAAlB,AAAkB,AAAK,AAAW,AAAc,AAChD;iBAAA,AAAW,AAAK,AACjB;AACF;;AACD;;QAAI,WAAW,SAAX,GAAJ,AAAwB,AAAG,AACzB;aAAA,AAAO,AACR;AACF;AACF;+BACD;QAAI,SAAJ,AAAI,AAAW,AAAS,cAAG,gCACzB;UAAO;;;oBAIX,AAAkB,AAChB,AAAI,AAAS,AAAc,AAAM,AAAW,AAAO,AAAQ,AACzD;AA1C0B,AAsC7B;AADE,OADC;;UAMM,MAAO,KAAM,MAAN,AAAc,WAAS,KAAT,UAAd,AAAoC,AAC/C;YAAQ,4CACN;;YADM,AACM,sBACZ;iBAAU,mEAFJ;AADG,AAAoC;;AAAjD;;kEAMA;AAAI,AAAM,iBAAN,AAAW,OAAX,AAAiB,OAAjB,AAA4B,WAAK,MAArC,AAA+C,gBAC7C;AAAA,AAAM,AAAuB,AAAa,AAAQ;;oEAClD;AAAA,AAAI,AAAsB,AACxB;AAAA,AAAO,AAAuB,AAAM,AAAK,AAAW,AAAsB,AAC3E;;;AACD,AAAM,AAAS,AAAS,AAAO;AAnDnC;AAoDI,SAAI,AAAU,eAAO;AACZ,+BAAO;4BAEhB;AAAA,AAAO,AAAK,AAAW,AAAM,AAAK,AAAW,AAAK,AAAU,AAC7D;AACF;;AACD;;WAAO,MAAP;;iCACD;;;0CA7DH,AAAgC;;qBAgEhC,AAAS,AAAe,AAAO,AAC7B;OAVQ,AAAO,AAAc,AAAW,AAAM,AAAO,AAAS,AACvD,CASP,AAAkB,AAAO,AACvB;;AAAM,gBADiB,AACvB,AACA,uCACA;AAJJ,AAA+B,AACJ,AAIvB,AACA,AACA,AACA,AAAO,AAAM,AAAO,AAAO,AAAU,AAAE,AAAM,AAAE,AAAoB,AAAK,AACxE,AAAa,AAAQ,AAAY,AAAK,AAEtC,AAAM,AAAO,AAAK,AAAQ,AAAE,AAAQ,AAAO,AAE3C,AACA,AAAO,AAAK,AAAwB,AAAK,AAAK,AAAK,AACpD;AAzBK,AAAI,AAA6B,AAAO,AAAS,AAAS,AACxD","file":"/client/modules/i18n/templates/currency/currency.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Reaction } from \"/client/api\";\nimport { Cart, Shops } from \"/lib/collections\";\n\nTemplate.currencySelect.helpers({\n  currencies() {\n    const currencies = [];\n    if (Reaction.Subscriptions.Shops.ready() && Meteor.user()) {\n      const shop = Shops.findOne(Reaction.getShopId(), {\n        fields: {\n          currencies: 1,\n          currency: 1\n        }\n      });\n      Reaction.Locale.get();\n      if (Match.test(shop, Object) && shop.currencies) {\n        for (const currencyName in shop.currencies) {\n          if (shop.currencies[currencyName].enabled === true) {\n            const currency = { currency: currencyName };\n            const localStorageCurrency = localStorage.getItem(\"currency\");\n            // only one currency will be \"active\". Either the one\n            // matching the localStorageCurrency if exists or else\n            //  the one matching shop currency\n            if (localStorageCurrency) {\n              if (localStorageCurrency === currency.currency) {\n                currency.class = \"active\";\n              }\n            } else if (shop.currency === currency.currency) {\n              currency.class = \"active\";\n            }\n            currency.symbol = shop.currencies[currencyName].symbol;\n            currencies.push(currency);\n          }\n        }\n        if (currencies.length > 1) {\n          return currencies;\n        }\n      }\n    }\n    if (currencies.length > 1) {\n      return currencies;\n    }\n  },\n\n  currentCurrency() {\n    if (Reaction.Subscriptions.Shops.ready() && Meteor.user()) {\n      const shop = Shops.findOne(Reaction.getShopId(), {\n        fields: {\n          currencies: 1,\n          currency: 1\n        }\n      });\n      if (Match.test(shop, Object) && shop.currency) {\n        const localStorageCurrency = localStorage.getItem(\"currency\");\n        if (localStorageCurrency) {\n          return localStorageCurrency + \" \" + shop.currencies[localStorageCurrency].symbol;\n        }\n        const locale = Reaction.Locale.get();\n        if (locale && locale.currency && locale.currency.enabled) {\n          return locale.locale.currency + \" \" + locale.currency.symbol;\n        }\n        return shop.currency + \" \" + shop.currencies[shop.currency].symbol;\n      }\n    }\n    return \"USD $\";\n  }\n});\n\nTemplate.currencySelect.events({\n  \"click .currency\"(event) {\n    event.preventDefault();\n    //\n    // this is a sanctioned use of Meteor.user.update\n    // and only possible because we allow it in the\n    // UserProfile and ShopMembers publications.\n    //\n    Meteor.users.update(Meteor.userId(), { $set: { \"profile.currency\": this.currency } });\n    localStorage.setItem(\"currency\", this.currency);\n\n    const cart = Cart.findOne({ userId: Meteor.userId() });\n\n    // Attach changed currency to this users cart\n    Meteor.call(\"cart/setUserCurrency\", cart._id, this.currency);\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/i18n/templates/currency/currency.js.map","sourceFileName":"/client/modules/i18n/templates/currency/currency.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"currency"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 1);\nvar Cart = void 0,\n    Shops = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  },\n  Shops: function (v) {\n    Shops = v;\n  }\n}, 2);\nTemplate.currencySelect.helpers({\n  currencies: function () {\n    var currencies = [];\n\n    if (Reaction.Subscriptions.Shops.ready() && Meteor.user()) {\n      var shop = Shops.findOne(Reaction.getShopId(), {\n        fields: {\n          currencies: 1,\n          currency: 1\n        }\n      });\n      Reaction.Locale.get();\n\n      if (Match.test(shop, Object) && shop.currencies) {\n        for (var currencyName in meteorBabelHelpers.sanitizeForInObject(shop.currencies)) {\n          if (shop.currencies[currencyName].enabled === true) {\n            var currency = {\n              currency: currencyName\n            };\n            var localStorageCurrency = localStorage.getItem(\"currency\"); // only one currency will be \"active\". Either the one\n            // matching the localStorageCurrency if exists or else\n            //  the one matching shop currency\n\n            if (localStorageCurrency) {\n              if (localStorageCurrency === currency.currency) {\n                currency.class = \"active\";\n              }\n            } else if (shop.currency === currency.currency) {\n              currency.class = \"active\";\n            }\n\n            currency.symbol = shop.currencies[currencyName].symbol;\n            currencies.push(currency);\n          }\n        }\n\n        if (currencies.length > 1) {\n          return currencies;\n        }\n      }\n    }\n\n    if (currencies.length > 1) {\n      return currencies;\n    }\n  },\n  currentCurrency: function () {\n    if (Reaction.Subscriptions.Shops.ready() && Meteor.user()) {\n      var shop = Shops.findOne(Reaction.getShopId(), {\n        fields: {\n          currencies: 1,\n          currency: 1\n        }\n      });\n\n      if (Match.test(shop, Object) && shop.currency) {\n        var localStorageCurrency = localStorage.getItem(\"currency\");\n\n        if (localStorageCurrency) {\n          return localStorageCurrency + \" \" + shop.currencies[localStorageCurrency].symbol;\n        }\n\n        var locale = Reaction.Locale.get();\n\n        if (locale && locale.currency && locale.currency.enabled) {\n          return locale.locale.currency + \" \" + locale.currency.symbol;\n        }\n\n        return shop.currency + \" \" + shop.currencies[shop.currency].symbol;\n      }\n    }\n\n    return \"USD $\";\n  }\n});\nTemplate.currencySelect.events({\n  \"click .currency\": function (event) {\n    event.preventDefault(); //\n    // this is a sanctioned use of Meteor.user.update\n    // and only possible because we allow it in the\n    // UserProfile and ShopMembers publications.\n    //\n\n    Meteor.users.update(Meteor.userId(), {\n      $set: {\n        \"profile.currency\": this.currency\n      }\n    });\n    localStorage.setItem(\"currency\", this.currency);\n    var cart = Cart.findOne({\n      userId: Meteor.userId()\n    }); // Attach changed currency to this users cart\n\n    Meteor.call(\"cart/setUserCurrency\", cart._id, this.currency);\n  }\n});","map":{"version":3,"sources":["/client/modules/i18n/templates/currency/currency.js"],"names":["Meteor","Reaction","Cart","Shops","Template","currencySelect","helpers","currencies","Subscriptions","ready","user","shop","findOne","getShopId","fields","currency","Locale","get","Match","test","Object","currencyName","enabled","localStorageCurrency","localStorage","getItem","class","symbol","push","length","currentCurrency","locale","events","event","preventDefault","users","update","userId","$set","setItem","cart","call","_id"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAgB,AACzB,AAAS,AAAM,AAAa,AAE5B,AAAS,AAAe,AAAQ;AAC9B,SAAa;AACL,0BAAN,AAAmB;qBACnB;;QAAI,SAAA,AAAS,cAAT,AAAuB,MAAvB,AAA6B,WAAW,OAA5C,AAA4C,AAAO,QAAQ,AACzD;UAAM,aAAO,AAAM,QAAQ,SAAd,AAAc,AAAS;;sBAC1B,AACM,AACZ;oBAHJ,AAAa,AAAoC,AACvC,AAEI,AAGd;AALU,AACN;AAF6C,AAC/C,OADW;eAMb,AAAS,OAAT,AAAgB;;uDAChB;AAAI,aAAM,IAAN,AAAW,AAAM,uDAAW,KAAK,aAArC,AAAiD,AAC/C;AAAK,mBAAM,WAAX,AAA2B,AAAK,cAAhC,AAA4C,kBAC1C;AAAI,gBAAK;wBAAT,AAAI,AAA8B,AAAY,AAAM,AAClD;AADE,AAAgB;gBACZ,AAAW,4CAAE,aAAF,AAAY;AAA7B,AACA;AAFkD,AAElD,AAAM,AAAuB,AAAa,AAAQ,AAClD,AACA;;sCACA;;iCACA;AAAA,AAAI,AAAsB,AACxB;AAAI,yCAAyB,SAAS,UAAtC,AAAgD,AAC9C;uBAAA,AAAS,QAAT,AAAiB,AAClB;AACF;;AAJD,AAIO,qBAAI,AAAK,cAAL,AAAkB,WAAtB,AAA+B,cAAU,AAC9C;uBAAS,KAAT,AAAiB,AAClB;;AACD;;YAAS,WAAT,AAAkB,YAAlB,AAAkB,AAAK,AAAW,AAAc,AAChD;iBAAA,AAAW,AAAK,AACjB;AACF;;AACD;;QAAI,WAAW,SAAX,GAAJ,AAAwB,AAAG,AACzB;aAAA,AAAO,AACR;AACF;AACF;+BACD;QAAI,SAAJ,AAAI,AAAW,AAAS,cAAG,gCACzB;UAAO;;;oBAIX,AAAkB,AAChB,AAAI,AAAS,AAAc,AAAM,AAAW,AAAO,AAAQ,AACzD;AA1C0B,AAsC7B;AADE,OADC;;UAMM,MAAO,KAAM,MAAN,AAAc,WAAS,KAAT,UAAd,AAAoC,AAC/C;YAAQ,4CACN;;YADM,AACM,sBACZ;iBAAU,mEAFJ;AADG,AAAoC;;AAAjD;;kEAMA;AAAI,AAAM,iBAAN,AAAW,OAAX,AAAiB,OAAjB,AAA4B,WAAK,MAArC,AAA+C,gBAC7C;AAAA,AAAM,AAAuB,AAAa,AAAQ;;oEAClD;AAAA,AAAI,AAAsB,AACxB;AAAA,AAAO,AAAuB,AAAM,AAAK,AAAW,AAAsB,AAC3E;;;AACD,AAAM,AAAS,AAAS,AAAO;AAnDnC;AAoDI,SAAI,AAAU,eAAO;AACZ,+BAAO;4BAEhB;AAAA,AAAO,AAAK,AAAW,AAAM,AAAK,AAAW,AAAK,AAAU,AAC7D;AACF;;AACD;;WAAO,MAAP;;iCACD;;;0CA7DH,AAAgC;;qBAgEhC,AAAS,AAAe,AAAO,AAC7B;OAVQ,AAAO,AAAc,AAAW,AAAM,AAAO,AAAS,AACvD,CASP,AAAkB,AAAO,AACvB;;AAAM,gBADiB,AACvB,AACA,uCACA;AAJJ,AAA+B,AACJ,AAIvB,AACA,AACA,AACA,AAAO,AAAM,AAAO,AAAO,AAAU,AAAE,AAAM,AAAE,AAAoB,AAAK,AACxE,AAAa,AAAQ,AAAY,AAAK,AAEtC,AAAM,AAAO,AAAK,AAAQ,AAAE,AAAQ,AAAO,AAE3C,AACA,AAAO,AAAK,AAAwB,AAAK,AAAK,AAAK,AACpD;AAzBK,AAAI,AAA6B,AAAO,AAAS,AAAS,AACxD","file":"/client/modules/i18n/templates/currency/currency.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Reaction } from \"/client/api\";\nimport { Cart, Shops } from \"/lib/collections\";\n\nTemplate.currencySelect.helpers({\n  currencies() {\n    const currencies = [];\n    if (Reaction.Subscriptions.Shops.ready() && Meteor.user()) {\n      const shop = Shops.findOne(Reaction.getShopId(), {\n        fields: {\n          currencies: 1,\n          currency: 1\n        }\n      });\n      Reaction.Locale.get();\n      if (Match.test(shop, Object) && shop.currencies) {\n        for (const currencyName in shop.currencies) {\n          if (shop.currencies[currencyName].enabled === true) {\n            const currency = { currency: currencyName };\n            const localStorageCurrency = localStorage.getItem(\"currency\");\n            // only one currency will be \"active\". Either the one\n            // matching the localStorageCurrency if exists or else\n            //  the one matching shop currency\n            if (localStorageCurrency) {\n              if (localStorageCurrency === currency.currency) {\n                currency.class = \"active\";\n              }\n            } else if (shop.currency === currency.currency) {\n              currency.class = \"active\";\n            }\n            currency.symbol = shop.currencies[currencyName].symbol;\n            currencies.push(currency);\n          }\n        }\n        if (currencies.length > 1) {\n          return currencies;\n        }\n      }\n    }\n    if (currencies.length > 1) {\n      return currencies;\n    }\n  },\n\n  currentCurrency() {\n    if (Reaction.Subscriptions.Shops.ready() && Meteor.user()) {\n      const shop = Shops.findOne(Reaction.getShopId(), {\n        fields: {\n          currencies: 1,\n          currency: 1\n        }\n      });\n      if (Match.test(shop, Object) && shop.currency) {\n        const localStorageCurrency = localStorage.getItem(\"currency\");\n        if (localStorageCurrency) {\n          return localStorageCurrency + \" \" + shop.currencies[localStorageCurrency].symbol;\n        }\n        const locale = Reaction.Locale.get();\n        if (locale && locale.currency && locale.currency.enabled) {\n          return locale.locale.currency + \" \" + locale.currency.symbol;\n        }\n        return shop.currency + \" \" + shop.currencies[shop.currency].symbol;\n      }\n    }\n    return \"USD $\";\n  }\n});\n\nTemplate.currencySelect.events({\n  \"click .currency\"(event) {\n    event.preventDefault();\n    //\n    // this is a sanctioned use of Meteor.user.update\n    // and only possible because we allow it in the\n    // UserProfile and ShopMembers publications.\n    //\n    Meteor.users.update(Meteor.userId(), { $set: { \"profile.currency\": this.currency } });\n    localStorage.setItem(\"currency\", this.currency);\n\n    const cart = Cart.findOne({ userId: Meteor.userId() });\n\n    // Attach changed currency to this users cart\n    Meteor.call(\"cart/setUserCurrency\", cart._id, this.currency);\n  }\n});\n"]},"hash":"7da569950637acb4c83a02b6676697dfc80adb1f"}
