{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"shippo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Shippo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"/server/api","imported":["Logger"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"../lib/shippoApiSchema","imported":["purchaseAddressSchema","parcelSchema"],"specifiers":[{"kind":"named","imported":"purchaseAddressSchema","local":"purchaseAddressSchema"},{"kind":"named","imported":"parcelSchema","local":"parcelSchema"}]}],"exports":{"exported":["ShippoApi"],"specifiers":[{"kind":"local","local":"ShippoApi","exported":"ShippoApi"}]}}},"options":{"filename":"/imports/plugins/included/shippo/server/methods/shippoapi.js","filenameRelative":"/imports/plugins/included/shippo/server/methods/shippoapi.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/shippo/server/methods/shippoapi.js"],"names":["Shippo","Meteor","SimpleSchema","Logger","purchaseAddressSchema","parcelSchema","ShippoApi","methods","getAddressList","ValidatedMethod","name","validate","apiKey","type","String","validator","run","shippoObj","set","getAddressListFiber","wrapAsync","address","list","addressList","error","message","Error","getCarrierAccountsList","allCarriers","fetchCarriers","response","carrieraccount","concat","results","next","createFullPath","createShipment","shippoAddressFrom","shippoAddressTo","shippoParcel","purpose","allowedValues","carrierAccounts","optional","createShipmentFiber","shipment","create","object_purpose","address_from","address_to","parcel","carrier_accounts","async","createTransaction","rateId","createTransactionFiber","transaction","rate","label_file_type","object_status","messages","text","debug","getTransaction","transactionId","retrieveTransactionFiber","retrieve"],"mappings":"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","file":"/imports/plugins/included/shippo/server/methods/shippoapi.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport Shippo from \"shippo\";\nimport { Meteor } from \"meteor/meteor\";\nimport { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { Logger } from \"/server/api\";\nimport { purchaseAddressSchema, parcelSchema } from \"../lib/shippoApiSchema\";\n\nexport const ShippoApi = {\n  methods: {}\n};\n\n\n/**\n * Retrieves the address objects stored in Shippo Account\n * @see https://goshippo.com/docs/reference#addresses\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} addressList - compound object returned returned by Shippo\n * @return {Array} addressList.results - An array with the address objects\n * @return {Number} addressList.count - the count of the address objects.\n * */\nShippoApi.methods.getAddressList = new ValidatedMethod({\n  name: \"ShippoApi.methods.getAddressList\",\n  validate: new SimpleSchema({\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n  run({ apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    const getAddressListFiber = Meteor.wrapAsync(shippoObj.address.list, shippoObj.address);\n    try {\n      const addressList = getAddressListFiber();\n\n      return addressList;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n});\n\n\n/**\n * Retrieves all Shippo carriers from the Shippo Account\n * @see https://goshippo.com/docs/reference#carrier-accounts-list\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} carrierAccountList - the compound object returned by Shippo\n * @return {Array} carrierAccountList.results - An array with the carrier accounts objects\n * @return {Number} carrierAccountList.count - the count of the carrier accounts objects.\n *\n */\nShippoApi.methods.getCarrierAccountsList = new ValidatedMethod({\n  name: \"ShippoApi.methods.getCarrierAccountsList\",\n  validate: new SimpleSchema({\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n  run({ apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    let allCarriers = [];\n\n    // recursively fetch carriers because shippo returns paginated results\n    function fetchCarriers() {\n      try {\n        const response = Meteor.wrapAsync(shippoObj.carrieraccount.list, shippoObj.carrieraccount)();\n        allCarriers = allCarriers.concat(response.results);\n\n        if (!response.next) {\n          response.results = allCarriers;\n          return response;\n        }\n        // the Shippo module uses \"createFullPath\" to form the url for the request\n        // https://github.com/goshippo/shippo-node-client/blob/master/lib/Resource.js#L40-L48\n        // hence we're passing the next url in this way\n        shippoObj.carrieraccount.createFullPath = () => response.next;\n        return fetchCarriers();\n      } catch (error) {\n        Logger.error(error.message);\n        throw new Meteor.Error(error.message);\n      }\n    }\n\n    return fetchCarriers();\n  }\n});\n\n/**\n * Creates a Shippo's Shipment object for the given addresses and gets Rates for the particular shipment)\n * @see https://goshippo.com/docs/reference#shipments-create\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {Object} parameter.shippoAddressFrom - The address of the sender\n * @param {Object} parameter.shippoAddressTo - The address of the receiver\n * @param {Object} parameter.shippoParcel - The parcel dimensions's/weight\n * @param {String(\"QUOTE\"|\"PURCHASE\")} parameter.purpose  - The reason of the shipment(check prices/ purchase labels)\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} shipment - The compound shipment object returned by Shippo\n * @return {Array} shipment.rates_list - The available rate objects\n * */\nShippoApi.methods.createShipment = new ValidatedMethod({\n  name: \"ShippoApi.methods.createShipment\",\n  validate: new SimpleSchema({\n    shippoAddressFrom: { type: purchaseAddressSchema },\n    shippoAddressTo: { type: purchaseAddressSchema },\n    shippoParcel: { type: parcelSchema },\n    purpose: { type: String, allowedValues: [\"QUOTE\", \"PURCHASE\"] },\n    apiKey: { type: String },\n    carrierAccounts: { type: [String], optional: true }\n  }).validator(),\n  run({ shippoAddressFrom, shippoAddressTo, shippoParcel, purpose, apiKey, carrierAccounts }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n\n    const createShipmentFiber = Meteor.wrapAsync(shippoObj.shipment.create, shippoObj.shipment);\n    try {\n      const shipment = createShipmentFiber({\n        object_purpose: purpose,\n        address_from: shippoAddressFrom,\n        address_to: shippoAddressTo,\n        parcel: shippoParcel,\n        carrier_accounts: carrierAccounts,\n        async: false\n      });\n\n      return shipment;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n});\n\n/**\n * Makes the transaction (purchasing of a shipping label from a shipping provider for a specific service)\n * for the specific rateId and returns its Shipping Label ,Tracking number etc\n * @see https://goshippo.com/docs/reference#transactions-create\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.rateId - unique identifier of the chosen rate object\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} transaction - The compound transaction object returned by Shippo\n * */\nShippoApi.methods.createTransaction = new ValidatedMethod({\n  name: \"ShippoApi.methods.createTransaction\",\n  validate: new SimpleSchema({\n    rateId: { type: String },\n    apiKey: { type: String }\n  }).validator(),\n  run({ rateId, apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n\n    const createTransactionFiber = Meteor.wrapAsync(shippoObj.transaction.create, shippoObj.transaction);\n    try {\n      const transaction = createTransactionFiber({\n        rate: rateId,\n        label_file_type: \"PDF\",\n        async: false\n      });\n\n      if (transaction.object_status !== \"SUCCESS\") {\n        const error = transaction.messages[0].text;\n        Logger.error(error);\n        throw new Meteor.Error(error);\n      }\n\n      return transaction;\n    } catch (error) {\n      Logger.debug(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n});\n\n/**\n * Retrieves transaction with transactionId of Shippo Account\n * @see https://goshippo.com/docs/reference#transactions-retrieve\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.transactionId - unique identifier of the transaction object\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} transaction - transaction object returned by Shippo\n * */\nShippoApi.methods.getTransaction = new ValidatedMethod({\n  name: \"ShippoApi.methods.getTransaction\",\n  validate: new SimpleSchema({\n    transactionId: { type: String },\n    apiKey: { type: String }\n  }).validator(),\n  run({ transactionId, apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n\n    const retrieveTransactionFiber = Meteor.wrapAsync(shippoObj.transaction.retrieve, shippoObj.transaction);\n    try {\n      const transaction = retrieveTransactionFiber(transactionId);\n      return transaction;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/shippo/server/methods/shippoapi.js.map","sourceFileName":"/imports/plugins/included/shippo/server/methods/shippoapi.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"shippoapi"},"ignored":false,"code":"module.export({\n  ShippoApi: function () {\n    return ShippoApi;\n  }\n});\nvar Shippo = void 0;\nmodule.importSync(\"shippo\", {\n  \"default\": function (v) {\n    Shippo = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 2);\nvar Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 3);\nvar purchaseAddressSchema = void 0,\n    parcelSchema = void 0;\nmodule.importSync(\"../lib/shippoApiSchema\", {\n  purchaseAddressSchema: function (v) {\n    purchaseAddressSchema = v;\n  },\n  parcelSchema: function (v) {\n    parcelSchema = v;\n  }\n}, 4);\nvar ShippoApi = {\n  methods: {}\n};\n/**\n * Retrieves the address objects stored in Shippo Account\n * @see https://goshippo.com/docs/reference#addresses\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} addressList - compound object returned returned by Shippo\n * @return {Array} addressList.results - An array with the address objects\n * @return {Number} addressList.count - the count of the address objects.\n * */ShippoApi.methods.getAddressList = new ValidatedMethod({\n  name: \"ShippoApi.methods.getAddressList\",\n  validate: new SimpleSchema({\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n  run: function (_ref) {\n    var apiKey = _ref.apiKey;\n    var shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    var getAddressListFiber = Meteor.wrapAsync(shippoObj.address.list, shippoObj.address);\n\n    try {\n      var addressList = getAddressListFiber();\n      return addressList;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n}); /**\n     * Retrieves all Shippo carriers from the Shippo Account\n     * @see https://goshippo.com/docs/reference#carrier-accounts-list\n     * @param {Object} parameter - ValidatedMethod's parameter\n     * @param {String} parameter.apiKey - The Test or Live Token required\n     * for authentication by Shippo's api\n     * @return {Object} carrierAccountList - the compound object returned by Shippo\n     * @return {Array} carrierAccountList.results - An array with the carrier accounts objects\n     * @return {Number} carrierAccountList.count - the count of the carrier accounts objects.\n     *\n     */\nShippoApi.methods.getCarrierAccountsList = new ValidatedMethod({\n  name: \"ShippoApi.methods.getCarrierAccountsList\",\n  validate: new SimpleSchema({\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n  run: function (_ref2) {\n    var apiKey = _ref2.apiKey;\n    var shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    var allCarriers = []; // recursively fetch carriers because shippo returns paginated results\n\n    function fetchCarriers() {\n      try {\n        var response = Meteor.wrapAsync(shippoObj.carrieraccount.list, shippoObj.carrieraccount)();\n        allCarriers = allCarriers.concat(response.results);\n\n        if (!response.next) {\n          response.results = allCarriers;\n          return response;\n        } // the Shippo module uses \"createFullPath\" to form the url for the request\n        // https://github.com/goshippo/shippo-node-client/blob/master/lib/Resource.js#L40-L48\n        // hence we're passing the next url in this way\n\n\n        shippoObj.carrieraccount.createFullPath = function () {\n          return response.next;\n        };\n\n        return fetchCarriers();\n      } catch (error) {\n        Logger.error(error.message);\n        throw new Meteor.Error(error.message);\n      }\n    }\n\n    return fetchCarriers();\n  }\n}); /**\n     * Creates a Shippo's Shipment object for the given addresses and gets Rates for the particular shipment)\n     * @see https://goshippo.com/docs/reference#shipments-create\n     * @param {Object} parameter - ValidatedMethod's parameter\n     * @param {Object} parameter.shippoAddressFrom - The address of the sender\n     * @param {Object} parameter.shippoAddressTo - The address of the receiver\n     * @param {Object} parameter.shippoParcel - The parcel dimensions's/weight\n     * @param {String(\"QUOTE\"|\"PURCHASE\")} parameter.purpose  - The reason of the shipment(check prices/ purchase labels)\n     * @param {String} parameter.apiKey - The Test or Live Token required\n     * for authentication by Shippo's api\n     * @return {Object} shipment - The compound shipment object returned by Shippo\n     * @return {Array} shipment.rates_list - The available rate objects\n     * */\nShippoApi.methods.createShipment = new ValidatedMethod({\n  name: \"ShippoApi.methods.createShipment\",\n  validate: new SimpleSchema({\n    shippoAddressFrom: {\n      type: purchaseAddressSchema\n    },\n    shippoAddressTo: {\n      type: purchaseAddressSchema\n    },\n    shippoParcel: {\n      type: parcelSchema\n    },\n    purpose: {\n      type: String,\n      allowedValues: [\"QUOTE\", \"PURCHASE\"]\n    },\n    apiKey: {\n      type: String\n    },\n    carrierAccounts: {\n      type: [String],\n      optional: true\n    }\n  }).validator(),\n  run: function (_ref3) {\n    var shippoAddressFrom = _ref3.shippoAddressFrom,\n        shippoAddressTo = _ref3.shippoAddressTo,\n        shippoParcel = _ref3.shippoParcel,\n        purpose = _ref3.purpose,\n        apiKey = _ref3.apiKey,\n        carrierAccounts = _ref3.carrierAccounts;\n    var shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    var createShipmentFiber = Meteor.wrapAsync(shippoObj.shipment.create, shippoObj.shipment);\n\n    try {\n      var shipment = createShipmentFiber({\n        object_purpose: purpose,\n        address_from: shippoAddressFrom,\n        address_to: shippoAddressTo,\n        parcel: shippoParcel,\n        carrier_accounts: carrierAccounts,\n        async: false\n      });\n      return shipment;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n}); /**\n     * Makes the transaction (purchasing of a shipping label from a shipping provider for a specific service)\n     * for the specific rateId and returns its Shipping Label ,Tracking number etc\n     * @see https://goshippo.com/docs/reference#transactions-create\n     * @param {Object} parameter - ValidatedMethod's parameter\n     * @param {String} parameter.rateId - unique identifier of the chosen rate object\n     * @param {String} parameter.apiKey - The Test or Live Token required\n     * for authentication by Shippo's api\n     * @return {Object} transaction - The compound transaction object returned by Shippo\n     * */\nShippoApi.methods.createTransaction = new ValidatedMethod({\n  name: \"ShippoApi.methods.createTransaction\",\n  validate: new SimpleSchema({\n    rateId: {\n      type: String\n    },\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n  run: function (_ref4) {\n    var rateId = _ref4.rateId,\n        apiKey = _ref4.apiKey;\n    var shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    var createTransactionFiber = Meteor.wrapAsync(shippoObj.transaction.create, shippoObj.transaction);\n\n    try {\n      var transaction = createTransactionFiber({\n        rate: rateId,\n        label_file_type: \"PDF\",\n        async: false\n      });\n\n      if (transaction.object_status !== \"SUCCESS\") {\n        var error = transaction.messages[0].text;\n        Logger.error(error);\n        throw new Meteor.Error(error);\n      }\n\n      return transaction;\n    } catch (error) {\n      Logger.debug(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n}); /**\n     * Retrieves transaction with transactionId of Shippo Account\n     * @see https://goshippo.com/docs/reference#transactions-retrieve\n     * @param {Object} parameter - ValidatedMethod's parameter\n     * @param {String} parameter.transactionId - unique identifier of the transaction object\n     * @param {String} parameter.apiKey - The Test or Live Token required\n     * for authentication by Shippo's api\n     * @return {Object} transaction - transaction object returned by Shippo\n     * */\nShippoApi.methods.getTransaction = new ValidatedMethod({\n  name: \"ShippoApi.methods.getTransaction\",\n  validate: new SimpleSchema({\n    transactionId: {\n      type: String\n    },\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n  run: function (_ref5) {\n    var transactionId = _ref5.transactionId,\n        apiKey = _ref5.apiKey;\n    var shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    var retrieveTransactionFiber = Meteor.wrapAsync(shippoObj.transaction.retrieve, shippoObj.transaction);\n\n    try {\n      var transaction = retrieveTransactionFiber(transactionId);\n      return transaction;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/shippo/server/methods/shippoapi.js"],"names":["Shippo","Meteor","SimpleSchema","Logger","purchaseAddressSchema","parcelSchema","ShippoApi","methods","getAddressList","ValidatedMethod","name","validate","apiKey","type","String","validator","run","shippoObj","set","getAddressListFiber","wrapAsync","address","list","addressList","error","message","Error","getCarrierAccountsList","allCarriers","fetchCarriers","response","carrieraccount","concat","results","next","createFullPath","createShipment","shippoAddressFrom","shippoAddressTo","shippoParcel","purpose","allowedValues","carrierAccounts","optional","createShipmentFiber","shipment","create","object_purpose","address_from","address_to","parcel","carrier_accounts","async","createTransaction","rateId","createTransactionFiber","transaction","rate","label_file_type","object_status","messages","text","debug","getTransaction","transactionId","retrieveTransactionFiber","retrieve"],"mappings":"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","file":"/imports/plugins/included/shippo/server/methods/shippoapi.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport Shippo from \"shippo\";\nimport { Meteor } from \"meteor/meteor\";\nimport { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { Logger } from \"/server/api\";\nimport { purchaseAddressSchema, parcelSchema } from \"../lib/shippoApiSchema\";\n\nexport const ShippoApi = {\n  methods: {}\n};\n\n\n/**\n * Retrieves the address objects stored in Shippo Account\n * @see https://goshippo.com/docs/reference#addresses\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} addressList - compound object returned returned by Shippo\n * @return {Array} addressList.results - An array with the address objects\n * @return {Number} addressList.count - the count of the address objects.\n * */\nShippoApi.methods.getAddressList = new ValidatedMethod({\n  name: \"ShippoApi.methods.getAddressList\",\n  validate: new SimpleSchema({\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n  run({ apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    const getAddressListFiber = Meteor.wrapAsync(shippoObj.address.list, shippoObj.address);\n    try {\n      const addressList = getAddressListFiber();\n\n      return addressList;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n});\n\n\n/**\n * Retrieves all Shippo carriers from the Shippo Account\n * @see https://goshippo.com/docs/reference#carrier-accounts-list\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} carrierAccountList - the compound object returned by Shippo\n * @return {Array} carrierAccountList.results - An array with the carrier accounts objects\n * @return {Number} carrierAccountList.count - the count of the carrier accounts objects.\n *\n */\nShippoApi.methods.getCarrierAccountsList = new ValidatedMethod({\n  name: \"ShippoApi.methods.getCarrierAccountsList\",\n  validate: new SimpleSchema({\n    apiKey: {\n      type: String\n    }\n  }).validator(),\n  run({ apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n    let allCarriers = [];\n\n    // recursively fetch carriers because shippo returns paginated results\n    function fetchCarriers() {\n      try {\n        const response = Meteor.wrapAsync(shippoObj.carrieraccount.list, shippoObj.carrieraccount)();\n        allCarriers = allCarriers.concat(response.results);\n\n        if (!response.next) {\n          response.results = allCarriers;\n          return response;\n        }\n        // the Shippo module uses \"createFullPath\" to form the url for the request\n        // https://github.com/goshippo/shippo-node-client/blob/master/lib/Resource.js#L40-L48\n        // hence we're passing the next url in this way\n        shippoObj.carrieraccount.createFullPath = () => response.next;\n        return fetchCarriers();\n      } catch (error) {\n        Logger.error(error.message);\n        throw new Meteor.Error(error.message);\n      }\n    }\n\n    return fetchCarriers();\n  }\n});\n\n/**\n * Creates a Shippo's Shipment object for the given addresses and gets Rates for the particular shipment)\n * @see https://goshippo.com/docs/reference#shipments-create\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {Object} parameter.shippoAddressFrom - The address of the sender\n * @param {Object} parameter.shippoAddressTo - The address of the receiver\n * @param {Object} parameter.shippoParcel - The parcel dimensions's/weight\n * @param {String(\"QUOTE\"|\"PURCHASE\")} parameter.purpose  - The reason of the shipment(check prices/ purchase labels)\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} shipment - The compound shipment object returned by Shippo\n * @return {Array} shipment.rates_list - The available rate objects\n * */\nShippoApi.methods.createShipment = new ValidatedMethod({\n  name: \"ShippoApi.methods.createShipment\",\n  validate: new SimpleSchema({\n    shippoAddressFrom: { type: purchaseAddressSchema },\n    shippoAddressTo: { type: purchaseAddressSchema },\n    shippoParcel: { type: parcelSchema },\n    purpose: { type: String, allowedValues: [\"QUOTE\", \"PURCHASE\"] },\n    apiKey: { type: String },\n    carrierAccounts: { type: [String], optional: true }\n  }).validator(),\n  run({ shippoAddressFrom, shippoAddressTo, shippoParcel, purpose, apiKey, carrierAccounts }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n\n    const createShipmentFiber = Meteor.wrapAsync(shippoObj.shipment.create, shippoObj.shipment);\n    try {\n      const shipment = createShipmentFiber({\n        object_purpose: purpose,\n        address_from: shippoAddressFrom,\n        address_to: shippoAddressTo,\n        parcel: shippoParcel,\n        carrier_accounts: carrierAccounts,\n        async: false\n      });\n\n      return shipment;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n});\n\n/**\n * Makes the transaction (purchasing of a shipping label from a shipping provider for a specific service)\n * for the specific rateId and returns its Shipping Label ,Tracking number etc\n * @see https://goshippo.com/docs/reference#transactions-create\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.rateId - unique identifier of the chosen rate object\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} transaction - The compound transaction object returned by Shippo\n * */\nShippoApi.methods.createTransaction = new ValidatedMethod({\n  name: \"ShippoApi.methods.createTransaction\",\n  validate: new SimpleSchema({\n    rateId: { type: String },\n    apiKey: { type: String }\n  }).validator(),\n  run({ rateId, apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n\n    const createTransactionFiber = Meteor.wrapAsync(shippoObj.transaction.create, shippoObj.transaction);\n    try {\n      const transaction = createTransactionFiber({\n        rate: rateId,\n        label_file_type: \"PDF\",\n        async: false\n      });\n\n      if (transaction.object_status !== \"SUCCESS\") {\n        const error = transaction.messages[0].text;\n        Logger.error(error);\n        throw new Meteor.Error(error);\n      }\n\n      return transaction;\n    } catch (error) {\n      Logger.debug(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n});\n\n/**\n * Retrieves transaction with transactionId of Shippo Account\n * @see https://goshippo.com/docs/reference#transactions-retrieve\n * @param {Object} parameter - ValidatedMethod's parameter\n * @param {String} parameter.transactionId - unique identifier of the transaction object\n * @param {String} parameter.apiKey - The Test or Live Token required\n * for authentication by Shippo's api\n * @return {Object} transaction - transaction object returned by Shippo\n * */\nShippoApi.methods.getTransaction = new ValidatedMethod({\n  name: \"ShippoApi.methods.getTransaction\",\n  validate: new SimpleSchema({\n    transactionId: { type: String },\n    apiKey: { type: String }\n  }).validator(),\n  run({ transactionId, apiKey }) {\n    const shippoObj = new Shippo(apiKey);\n    shippoObj.set(\"version\", \"2016-10-25\");\n\n    const retrieveTransactionFiber = Meteor.wrapAsync(shippoObj.transaction.retrieve, shippoObj.transaction);\n    try {\n      const transaction = retrieveTransactionFiber(transactionId);\n      return transaction;\n    } catch (error) {\n      Logger.error(error.message);\n      throw new Meteor.Error(error.message);\n    }\n  }\n});\n"]},"hash":"ae44b18eba4ea959aee8fde548bf9b7102aeb5ee"}
