{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"./exampleapi","imported":["ExampleApi"],"specifiers":[{"kind":"named","imported":"ExampleApi","local":"ExampleApi"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/payments-example/server/methods/example.js","filenameRelative":"/imports/plugins/included/payments-example/server/methods/example.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-example/server/methods/example.js"],"names":["Meteor","check","Match","Reaction","Logger","ExampleApi","luhnValid","x","reverse","reduce","sum","c","i","d","parseInt","ValidCardNumber","Where","test","ValidExpireMonth","ValidExpireYear","ValidCVV","methods","transactionType","cardData","paymentData","String","name","number","expireMonth","expireYear","cvv2","type","total","currency","parseFloat","result","transaction","authorize","call","saved","status","amount","transactionId","id","response","error","warn","Schemas","PaymentMethod","authorizationId","capture","paymentMethod","Number","refund","results","refunds","push","emptyResult"],"mappings":"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","file":"/imports/plugins/included/payments-example/server/methods/example.js.map","sourcesContent":["/* eslint camelcase: 0 */\n// meteor modules\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\n// reaction modules\nimport { Reaction, Logger } from \"/server/api\";\nimport { ExampleApi } from \"./exampleapi\";\n\nfunction luhnValid(x) {\n  return [...x].reverse().reduce((sum, c, i) => {\n    let d = parseInt(c, 10);\n    if (i % 2 !== 0) { d *= 2; }\n    if (d > 9) { d -= 9; }\n    return sum + d;\n  }, 0) % 10 === 0;\n}\n\nconst ValidCardNumber = Match.Where(function (x) {\n  return /^[0-9]{13,16}$/.test(x) && luhnValid(x);\n});\n\nconst ValidExpireMonth = Match.Where(function (x) {\n  return /^[0-9]{1,2}$/.test(x);\n});\n\nconst ValidExpireYear = Match.Where(function (x) {\n  return /^[0-9]{4}$/.test(x);\n});\n\nconst ValidCVV = Match.Where(function (x) {\n  return /^[0-9]{3,4}$/.test(x);\n});\n\n// function chargeObj() {\n//   return {\n//     amount: \"\",\n//     currency: \"\",\n//     card: {},\n//     capture: true\n//   };\n// }\n\n// function parseCardData(data) {\n//   return {\n//     number: data.number,\n//     name: data.name,\n//     cvc: data.cvv2,\n//     expireMonth: data.expire_month,\n//     expireYear: data.expire_year\n//   };\n// }\n\n\nMeteor.methods({\n  /**\n   * Submit a card for Authorization\n   * @param  {Object} transactionType authorize or capture\n   * @param  {Object} cardData card Details\n   * @param  {Object} paymentData The details of the Payment Needed\n   * @return {Object} results normalized\n   */\n  \"exampleSubmit\": function (transactionType, cardData, paymentData) {\n    check(transactionType, String);\n    check(cardData, {\n      name: String,\n      number: ValidCardNumber,\n      expireMonth: ValidExpireMonth,\n      expireYear: ValidExpireYear,\n      cvv2: ValidCVV,\n      type: String\n    });\n\n    check(paymentData, {\n      total: String,\n      currency: String\n    });\n    const total = parseFloat(paymentData.total);\n    let result;\n    try {\n      const transaction = ExampleApi.methods.authorize.call({\n        transactionType: transactionType,\n        cardData: cardData,\n        paymentData: paymentData\n      });\n\n      result = {\n        saved: true,\n        status: \"created\",\n        currency: paymentData.currency,\n        amount: total,\n        transactionId: transaction.id,\n        response: {\n          amount: total,\n          transactionId: transaction.id,\n          currency: paymentData.currency\n        }\n      };\n    } catch (error) {\n      Logger.warn(error);\n      result = {\n        saved: false,\n        error: error\n      };\n    }\n    return result;\n  },\n\n  /**\n   * Capture a Charge\n   * @param {Object} paymentData Object containing data about the transaction to capture\n   * @return {Object} results normalized\n   */\n  \"example/payment/capture\": function (paymentData) {\n    check(paymentData, Reaction.Schemas.PaymentMethod);\n    const authorizationId = paymentData.transactionId;\n    const amount = paymentData.amount;\n    const response = ExampleApi.methods.capture.call({\n      authorizationId: authorizationId,\n      amount: amount\n    });\n    const result = {\n      saved: true,\n      response: response\n    };\n    return result;\n  },\n\n  /**\n   * Create a refund\n   * @param  {Object} paymentMethod object\n   * @param  {Number} amount The amount to be refunded\n   * @return {Object} result\n   */\n  \"example/refund/create\": function (paymentMethod, amount) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    check(amount, Number);\n    const { transactionId } = paymentMethod;\n    const response = ExampleApi.methods.refund.call({\n      transactionId: transactionId,\n      amount: amount\n    });\n    const results = {\n      saved: true,\n      response: response\n    };\n    return results;\n  },\n\n  /**\n   * List refunds\n   * @param  {Object} paymentMethod Object containing the pertinant data\n   * @return {Object} result\n   */\n  \"example/refund/list\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    const { transactionId } = paymentMethod;\n    const response = ExampleApi.methods.refunds.call({\n      transactionId: transactionId\n    });\n    const result = [];\n    for (const refund of response.refunds) {\n      result.push(refund);\n    }\n\n    // The results retured from the GenericAPI just so happen to look like exactly what the dashboard\n    // wants. The return package should ba an array of objects that look like this\n    // {\n    //   type: \"refund\",\n    //   amount: Number,\n    //   created: Number: Epoch Time,\n    //   currency: String,\n    //   raw: Object\n    // }\n    const emptyResult = [];\n    return emptyResult;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-example/server/methods/example.js.map","sourceFileName":"/imports/plugins/included/payments-example/server/methods/example.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"example"},"ignored":false,"code":"function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 1);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 2);\nvar ExampleApi = void 0;\nmodule.importSync(\"./exampleapi\", {\n  ExampleApi: function (v) {\n    ExampleApi = v;\n  }\n}, 3);\n\nfunction luhnValid(x) {\n  return [].concat(_toConsumableArray(x)).reverse().reduce(function (sum, c, i) {\n    var d = parseInt(c, 10);\n\n    if (i % 2 !== 0) {\n      d *= 2;\n    }\n\n    if (d > 9) {\n      d -= 9;\n    }\n\n    return sum + d;\n  }, 0) % 10 === 0;\n}\n\nvar ValidCardNumber = Match.Where(function (x) {\n  return (/^[0-9]{13,16}$/.test(x) && luhnValid(x)\n  );\n});\nvar ValidExpireMonth = Match.Where(function (x) {\n  return (/^[0-9]{1,2}$/.test(x)\n  );\n});\nvar ValidExpireYear = Match.Where(function (x) {\n  return (/^[0-9]{4}$/.test(x)\n  );\n});\nvar ValidCVV = Match.Where(function (x) {\n  return (/^[0-9]{3,4}$/.test(x)\n  );\n}); // function chargeObj() {\n//   return {\n//     amount: \"\",\n//     currency: \"\",\n//     card: {},\n//     capture: true\n//   };\n// }\n// function parseCardData(data) {\n//   return {\n//     number: data.number,\n//     name: data.name,\n//     cvc: data.cvv2,\n//     expireMonth: data.expire_month,\n//     expireYear: data.expire_year\n//   };\n// }\n\nMeteor.methods({\n  /**\n   * Submit a card for Authorization\n   * @param  {Object} transactionType authorize or capture\n   * @param  {Object} cardData card Details\n   * @param  {Object} paymentData The details of the Payment Needed\n   * @return {Object} results normalized\n   */\"exampleSubmit\": function (transactionType, cardData, paymentData) {\n    check(transactionType, String);\n    check(cardData, {\n      name: String,\n      number: ValidCardNumber,\n      expireMonth: ValidExpireMonth,\n      expireYear: ValidExpireYear,\n      cvv2: ValidCVV,\n      type: String\n    });\n    check(paymentData, {\n      total: String,\n      currency: String\n    });\n    var total = parseFloat(paymentData.total);\n    var result = void 0;\n\n    try {\n      var transaction = ExampleApi.methods.authorize.call({\n        transactionType: transactionType,\n        cardData: cardData,\n        paymentData: paymentData\n      });\n      result = {\n        saved: true,\n        status: \"created\",\n        currency: paymentData.currency,\n        amount: total,\n        transactionId: transaction.id,\n        response: {\n          amount: total,\n          transactionId: transaction.id,\n          currency: paymentData.currency\n        }\n      };\n    } catch (error) {\n      Logger.warn(error);\n      result = {\n        saved: false,\n        error: error\n      };\n    }\n\n    return result;\n  },\n  /**\n   * Capture a Charge\n   * @param {Object} paymentData Object containing data about the transaction to capture\n   * @return {Object} results normalized\n   */\"example/payment/capture\": function (paymentData) {\n    check(paymentData, Reaction.Schemas.PaymentMethod);\n    var authorizationId = paymentData.transactionId;\n    var amount = paymentData.amount;\n    var response = ExampleApi.methods.capture.call({\n      authorizationId: authorizationId,\n      amount: amount\n    });\n    var result = {\n      saved: true,\n      response: response\n    };\n    return result;\n  },\n  /**\n   * Create a refund\n   * @param  {Object} paymentMethod object\n   * @param  {Number} amount The amount to be refunded\n   * @return {Object} result\n   */\"example/refund/create\": function (paymentMethod, amount) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    check(amount, Number);\n    var transactionId = paymentMethod.transactionId;\n    var response = ExampleApi.methods.refund.call({\n      transactionId: transactionId,\n      amount: amount\n    });\n    var results = {\n      saved: true,\n      response: response\n    };\n    return results;\n  },\n  /**\n   * List refunds\n   * @param  {Object} paymentMethod Object containing the pertinant data\n   * @return {Object} result\n   */\"example/refund/list\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    var transactionId = paymentMethod.transactionId;\n    var response = ExampleApi.methods.refunds.call({\n      transactionId: transactionId\n    });\n    var result = [];\n\n    for (var _iterator = response.refunds, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var refund = _ref;\n      result.push(refund);\n    } // The results retured from the GenericAPI just so happen to look like exactly what the dashboard\n    // wants. The return package should ba an array of objects that look like this\n    // {\n    //   type: \"refund\",\n    //   amount: Number,\n    //   created: Number: Epoch Time,\n    //   currency: String,\n    //   raw: Object\n    // }\n\n\n    var emptyResult = [];\n    return emptyResult;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/payments-example/server/methods/example.js"],"names":["Meteor","check","Match","Reaction","Logger","ExampleApi","luhnValid","x","reverse","reduce","sum","c","i","d","parseInt","ValidCardNumber","Where","test","ValidExpireMonth","ValidExpireYear","ValidCVV","methods","transactionType","cardData","paymentData","String","name","number","expireMonth","expireYear","cvv2","type","total","currency","parseFloat","result","transaction","authorize","call","saved","status","amount","transactionId","id","response","error","warn","Schemas","PaymentMethod","authorizationId","capture","paymentMethod","Number","refund","results","refunds","push","emptyResult"],"mappings":"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","file":"/imports/plugins/included/payments-example/server/methods/example.js.map","sourcesContent":["/* eslint camelcase: 0 */\n// meteor modules\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\n// reaction modules\nimport { Reaction, Logger } from \"/server/api\";\nimport { ExampleApi } from \"./exampleapi\";\n\nfunction luhnValid(x) {\n  return [...x].reverse().reduce((sum, c, i) => {\n    let d = parseInt(c, 10);\n    if (i % 2 !== 0) { d *= 2; }\n    if (d > 9) { d -= 9; }\n    return sum + d;\n  }, 0) % 10 === 0;\n}\n\nconst ValidCardNumber = Match.Where(function (x) {\n  return /^[0-9]{13,16}$/.test(x) && luhnValid(x);\n});\n\nconst ValidExpireMonth = Match.Where(function (x) {\n  return /^[0-9]{1,2}$/.test(x);\n});\n\nconst ValidExpireYear = Match.Where(function (x) {\n  return /^[0-9]{4}$/.test(x);\n});\n\nconst ValidCVV = Match.Where(function (x) {\n  return /^[0-9]{3,4}$/.test(x);\n});\n\n// function chargeObj() {\n//   return {\n//     amount: \"\",\n//     currency: \"\",\n//     card: {},\n//     capture: true\n//   };\n// }\n\n// function parseCardData(data) {\n//   return {\n//     number: data.number,\n//     name: data.name,\n//     cvc: data.cvv2,\n//     expireMonth: data.expire_month,\n//     expireYear: data.expire_year\n//   };\n// }\n\n\nMeteor.methods({\n  /**\n   * Submit a card for Authorization\n   * @param  {Object} transactionType authorize or capture\n   * @param  {Object} cardData card Details\n   * @param  {Object} paymentData The details of the Payment Needed\n   * @return {Object} results normalized\n   */\n  \"exampleSubmit\": function (transactionType, cardData, paymentData) {\n    check(transactionType, String);\n    check(cardData, {\n      name: String,\n      number: ValidCardNumber,\n      expireMonth: ValidExpireMonth,\n      expireYear: ValidExpireYear,\n      cvv2: ValidCVV,\n      type: String\n    });\n\n    check(paymentData, {\n      total: String,\n      currency: String\n    });\n    const total = parseFloat(paymentData.total);\n    let result;\n    try {\n      const transaction = ExampleApi.methods.authorize.call({\n        transactionType: transactionType,\n        cardData: cardData,\n        paymentData: paymentData\n      });\n\n      result = {\n        saved: true,\n        status: \"created\",\n        currency: paymentData.currency,\n        amount: total,\n        transactionId: transaction.id,\n        response: {\n          amount: total,\n          transactionId: transaction.id,\n          currency: paymentData.currency\n        }\n      };\n    } catch (error) {\n      Logger.warn(error);\n      result = {\n        saved: false,\n        error: error\n      };\n    }\n    return result;\n  },\n\n  /**\n   * Capture a Charge\n   * @param {Object} paymentData Object containing data about the transaction to capture\n   * @return {Object} results normalized\n   */\n  \"example/payment/capture\": function (paymentData) {\n    check(paymentData, Reaction.Schemas.PaymentMethod);\n    const authorizationId = paymentData.transactionId;\n    const amount = paymentData.amount;\n    const response = ExampleApi.methods.capture.call({\n      authorizationId: authorizationId,\n      amount: amount\n    });\n    const result = {\n      saved: true,\n      response: response\n    };\n    return result;\n  },\n\n  /**\n   * Create a refund\n   * @param  {Object} paymentMethod object\n   * @param  {Number} amount The amount to be refunded\n   * @return {Object} result\n   */\n  \"example/refund/create\": function (paymentMethod, amount) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    check(amount, Number);\n    const { transactionId } = paymentMethod;\n    const response = ExampleApi.methods.refund.call({\n      transactionId: transactionId,\n      amount: amount\n    });\n    const results = {\n      saved: true,\n      response: response\n    };\n    return results;\n  },\n\n  /**\n   * List refunds\n   * @param  {Object} paymentMethod Object containing the pertinant data\n   * @return {Object} result\n   */\n  \"example/refund/list\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    const { transactionId } = paymentMethod;\n    const response = ExampleApi.methods.refunds.call({\n      transactionId: transactionId\n    });\n    const result = [];\n    for (const refund of response.refunds) {\n      result.push(refund);\n    }\n\n    // The results retured from the GenericAPI just so happen to look like exactly what the dashboard\n    // wants. The return package should ba an array of objects that look like this\n    // {\n    //   type: \"refund\",\n    //   amount: Number,\n    //   created: Number: Epoch Time,\n    //   currency: String,\n    //   raw: Object\n    // }\n    const emptyResult = [];\n    return emptyResult;\n  }\n});\n"]},"hash":"2b64b89b1dd6cf34dcbb62cbb2ee3f6d38261f50"}
