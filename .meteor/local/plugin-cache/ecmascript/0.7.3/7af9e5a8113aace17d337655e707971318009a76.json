{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"/client/api","imported":["Reaction","Router"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Router","local":"Router"}]},{"source":"/lib/collections","imported":["Tags"],"specifiers":[{"kind":"named","imported":"Tags","local":"Tags"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"classnames","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classnames"}]},{"source":"react-autosuggest","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Autosuggest"}]},{"source":"meteor/reactive-dict","imported":["ReactiveDict"],"specifiers":[{"kind":"named","imported":"ReactiveDict","local":"ReactiveDict"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui/client/components/tags/tagItem.js","filenameRelative":"/imports/plugins/core/ui/client/components/tags/tagItem.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/components/tags/tagItem.js"],"names":["Reaction","Router","Tags","i18next","classnames","Autosuggest","ReactiveDict","React","createAutosuggestInput","templateInstance","options","component","suggestions","state","get","getSuggestionValue","renderSuggestion","onSuggestionsFetchRequested","value","set","getSuggestions","onSuggestionsClearRequested","inputProps","placeholder","t","i18nPlaceholderKey","defaultValue","i18nPlaceholderValue","onKeyDown","event","keyCode","onUpdateCallback","onBlur","onChange","newValue","term","datums","slug","getSlug","find","RegExp","forEach","tag","push","label","name","suggestion","createElement","Template","tagItem","helpers","tagBlankProps","instance","onTagCreate","data","tagEditableProps","controls","_","map","control","toggleOn","isFunction","undefined","onClick","className","isSelected","selectable","onTagRemove","onTagSelect","onTagUpdate","tagEditable","onCreated","setDefault","oldValue","inputValue","submitInput","trim","isEmpty","updateTag","equals","_id","AutosuggestInput","selected","classes","handleTagSelect","handleTagRemove","tagBlank","tagLink","events","preventDefault","go"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/tags/tagItem.js.map","sourcesContent":["import { Reaction, Router } from \"/client/api\";\nimport { Tags } from \"/lib/collections\";\nimport { i18next } from \"/client/api\";\nimport classnames from \"classnames\";\nimport Autosuggest from \"react-autosuggest\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport React from \"react\";\n\nfunction createAutosuggestInput(templateInstance, options) {\n  return {\n    component: Autosuggest,\n    suggestions: templateInstance.state.get(\"suggestions\"),\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    onSuggestionsFetchRequested({ value }) {\n      templateInstance.state.set(\"suggestions\", getSuggestions(value));\n    },\n    onSuggestionsClearRequested() {\n      templateInstance.state.set(\"suggestions\", []);\n    },\n    inputProps: {\n      placeholder: i18next.t(options.i18nPlaceholderKey, { defaultValue: options.i18nPlaceholderValue }),\n      value: templateInstance.state.get(\"inputValue\"),\n      onKeyDown(event) {\n        // 9 == Tab key\n        // 13 == Enter Key\n        if (event.keyCode === 9 || event.keyCode === 13) {\n          options.onUpdateCallback && options.onUpdateCallback();\n        }\n      },\n      onBlur: () => {\n        options.onUpdateCallback && options.onUpdateCallback();\n      },\n      onChange(event, { newValue }) {\n        templateInstance.state.set(\"suggestion\", getSuggestions(newValue));\n        templateInstance.state.set(\"inputValue\", newValue);\n      }\n    }\n  };\n}\n\nfunction getSuggestions(term) {\n  const datums = [];\n  const slug = Reaction.getSlug(term);\n  Tags.find({\n    slug: new RegExp(slug, \"i\")\n  }).forEach(function (tag) {\n    return datums.push({\n      label: tag.name\n    });\n  });\n\n  return datums;\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nfunction renderSuggestion(suggestion) {\n  return React.createElement(\"span\", null, suggestion.label);\n}\n\nTemplate.tagItem.helpers({\n  tagBlankProps() {\n    const instance = Template.instance();\n    return {\n      onTagCreate: instance.data.onTagCreate\n    };\n  },\n\n  tagEditableProps(tag) {\n    const instance = Template.instance();\n\n    return {\n      tag,\n      controls: _.map(instance.data.controls, (control) => {\n        return {\n          ...control,\n          toggleOn() {\n            if (control.toggleOn) {\n              if (_.isFunction(control.toggleOn)) {\n                return control.toggleOn(tag);\n              }\n\n              return control.toggleOn;\n            }\n            return undefined;\n          },\n          onClick(event) {\n            // Call the original onClick and add the current tag\n            control.onClick(event, tag);\n          }\n        };\n      }),\n      className: instance.data.className,\n      isSelected: instance.data.isSelected,\n      selectable: instance.data.selectable,\n      onTagRemove: instance.data.onTagRemove,\n      onTagSelect: instance.data.onTagSelect,\n      onTagUpdate: instance.data.onTagUpdate\n    };\n  }\n});\n\nTemplate.tagEditable.onCreated(function () {\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    oldValue: this.data.tag.name,\n    inputValue: this.data.tag.name,\n    suggestions: []\n  });\n\n  this.submitInput = () => {\n    const value = this.state.get(\"inputValue\").trim();\n\n    if (this.data.onTagCreate && _.isEmpty(value) === false) {\n      this.data.onTagCreate(value);\n    }\n\n    this.state.set(\"inputValue\", \"\");\n  };\n\n  this.updateTag = () => {\n    const inputValue = this.state.get(\"inputValue\");\n    if (this.state.equals(\"oldValue\", inputValue) === false) {\n      const value = inputValue.trim();\n\n      if (this.data.onTagUpdate && _.isEmpty(value) === false) {\n        this.data.onTagUpdate(this.data.tag._id, value);\n        this.state.set(\"oldValue\", inputValue);\n      }\n    }\n  };\n});\n\nTemplate.tagEditable.helpers({\n  AutosuggestInput() {\n    const instance = Template.instance();\n\n    return createAutosuggestInput(instance, {\n      i18nPlaceholderKey: \"tags.updateTag\",\n      i18nPlaceholderValue: \"Update Tag\",\n      onUpdateCallback: instance.updateTag\n    });\n  },\n\n  className() {\n    const instance = Template.instance();\n\n    return classnames(instance.data.className, {\n      selected: instance.data.classes\n    });\n  },\n\n  handleTagSelect() {\n    const instance = Template.instance();\n    return () => {\n      // Pass the tag back up to the parent component\n      if (instance.data.onTagSelect) {\n        instance.data.onTagSelect(instance.data.tag);\n      }\n    };\n  },\n  handleTagRemove() {\n    const instance = Template.instance();\n    return () => {\n      // Pass the tag back up to the parent component\n      if (instance.data.onTagRemove) {\n        instance.data.onTagRemove(instance.data.tag);\n      }\n    };\n  }\n});\n\nTemplate.tagBlank.onCreated(function () {\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    inputValue: \"\",\n    suggestions: []\n  });\n\n  this.submitInput = () => {\n    const value = this.state.get(\"inputValue\").trim();\n\n    if (this.data.onTagCreate && _.isEmpty(value) === false) {\n      this.data.onTagCreate(value);\n    }\n\n    this.state.set(\"inputValue\", \"\");\n  };\n});\n\nTemplate.tagBlank.helpers({\n  AutosuggestInput() {\n    const instance = Template.instance();\n\n    return createAutosuggestInput(instance, {\n      i18nPlaceholderKey: \"tags.addTag\",\n      i18nPlaceholderValue: \"Add Tag\",\n      onUpdateCallback: instance.submitInput\n    });\n  }\n});\n\nTemplate.tagLink.events({\n  \"click a\"(event, templateInstance) {\n    event.preventDefault();\n    const slug = templateInstance.data.tag && templateInstance.data.tag.slug;\n    Router.go(\"tag\", { slug });\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/components/tags/tagItem.js.map","sourceFileName":"/imports/plugins/core/ui/client/components/tags/tagItem.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"tagItem"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Reaction = void 0,\n    Router = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Router: function (v) {\n    Router = v;\n  }\n}, 0);\nvar Tags = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Tags: function (v) {\n    Tags = v;\n  }\n}, 1);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 2);\nvar classnames = void 0;\nmodule.importSync(\"classnames\", {\n  \"default\": function (v) {\n    classnames = v;\n  }\n}, 3);\nvar Autosuggest = void 0;\nmodule.importSync(\"react-autosuggest\", {\n  \"default\": function (v) {\n    Autosuggest = v;\n  }\n}, 4);\nvar ReactiveDict = void 0;\nmodule.importSync(\"meteor/reactive-dict\", {\n  ReactiveDict: function (v) {\n    ReactiveDict = v;\n  }\n}, 5);\nvar React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 6);\n\nfunction createAutosuggestInput(templateInstance, options) {\n  return {\n    component: Autosuggest,\n    suggestions: templateInstance.state.get(\"suggestions\"),\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    onSuggestionsFetchRequested: function (_ref) {\n      var value = _ref.value;\n      templateInstance.state.set(\"suggestions\", getSuggestions(value));\n    },\n    onSuggestionsClearRequested: function () {\n      templateInstance.state.set(\"suggestions\", []);\n    },\n    inputProps: {\n      placeholder: i18next.t(options.i18nPlaceholderKey, {\n        defaultValue: options.i18nPlaceholderValue\n      }),\n      value: templateInstance.state.get(\"inputValue\"),\n      onKeyDown: function (event) {\n        // 9 == Tab key\n        // 13 == Enter Key\n        if (event.keyCode === 9 || event.keyCode === 13) {\n          options.onUpdateCallback && options.onUpdateCallback();\n        }\n      },\n      onBlur: function () {\n        options.onUpdateCallback && options.onUpdateCallback();\n      },\n      onChange: function (event, _ref2) {\n        var newValue = _ref2.newValue;\n        templateInstance.state.set(\"suggestion\", getSuggestions(newValue));\n        templateInstance.state.set(\"inputValue\", newValue);\n      }\n    }\n  };\n}\n\nfunction getSuggestions(term) {\n  var datums = [];\n  var slug = Reaction.getSlug(term);\n  Tags.find({\n    slug: new RegExp(slug, \"i\")\n  }).forEach(function (tag) {\n    return datums.push({\n      label: tag.name\n    });\n  });\n  return datums;\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nfunction renderSuggestion(suggestion) {\n  return React.createElement(\"span\", null, suggestion.label);\n}\n\nTemplate.tagItem.helpers({\n  tagBlankProps: function () {\n    var instance = Template.instance();\n    return {\n      onTagCreate: instance.data.onTagCreate\n    };\n  },\n  tagEditableProps: function (tag) {\n    var instance = Template.instance();\n    return {\n      tag: tag,\n      controls: _.map(instance.data.controls, function (control) {\n        return (0, _extends3.default)({}, control, {\n          toggleOn: function () {\n            if (control.toggleOn) {\n              if (_.isFunction(control.toggleOn)) {\n                return control.toggleOn(tag);\n              }\n\n              return control.toggleOn;\n            }\n\n            return undefined;\n          },\n          onClick: function (event) {\n            // Call the original onClick and add the current tag\n            control.onClick(event, tag);\n          }\n        });\n      }),\n      className: instance.data.className,\n      isSelected: instance.data.isSelected,\n      selectable: instance.data.selectable,\n      onTagRemove: instance.data.onTagRemove,\n      onTagSelect: instance.data.onTagSelect,\n      onTagUpdate: instance.data.onTagUpdate\n    };\n  }\n});\nTemplate.tagEditable.onCreated(function () {\n  var _this = this;\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    oldValue: this.data.tag.name,\n    inputValue: this.data.tag.name,\n    suggestions: []\n  });\n\n  this.submitInput = function () {\n    var value = _this.state.get(\"inputValue\").trim();\n\n    if (_this.data.onTagCreate && _.isEmpty(value) === false) {\n      _this.data.onTagCreate(value);\n    }\n\n    _this.state.set(\"inputValue\", \"\");\n  };\n\n  this.updateTag = function () {\n    var inputValue = _this.state.get(\"inputValue\");\n\n    if (_this.state.equals(\"oldValue\", inputValue) === false) {\n      var value = inputValue.trim();\n\n      if (_this.data.onTagUpdate && _.isEmpty(value) === false) {\n        _this.data.onTagUpdate(_this.data.tag._id, value);\n\n        _this.state.set(\"oldValue\", inputValue);\n      }\n    }\n  };\n});\nTemplate.tagEditable.helpers({\n  AutosuggestInput: function () {\n    var instance = Template.instance();\n    return createAutosuggestInput(instance, {\n      i18nPlaceholderKey: \"tags.updateTag\",\n      i18nPlaceholderValue: \"Update Tag\",\n      onUpdateCallback: instance.updateTag\n    });\n  },\n  className: function () {\n    var instance = Template.instance();\n    return classnames(instance.data.className, {\n      selected: instance.data.classes\n    });\n  },\n  handleTagSelect: function () {\n    var instance = Template.instance();\n    return function () {\n      // Pass the tag back up to the parent component\n      if (instance.data.onTagSelect) {\n        instance.data.onTagSelect(instance.data.tag);\n      }\n    };\n  },\n  handleTagRemove: function () {\n    var instance = Template.instance();\n    return function () {\n      // Pass the tag back up to the parent component\n      if (instance.data.onTagRemove) {\n        instance.data.onTagRemove(instance.data.tag);\n      }\n    };\n  }\n});\nTemplate.tagBlank.onCreated(function () {\n  var _this2 = this;\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    inputValue: \"\",\n    suggestions: []\n  });\n\n  this.submitInput = function () {\n    var value = _this2.state.get(\"inputValue\").trim();\n\n    if (_this2.data.onTagCreate && _.isEmpty(value) === false) {\n      _this2.data.onTagCreate(value);\n    }\n\n    _this2.state.set(\"inputValue\", \"\");\n  };\n});\nTemplate.tagBlank.helpers({\n  AutosuggestInput: function () {\n    var instance = Template.instance();\n    return createAutosuggestInput(instance, {\n      i18nPlaceholderKey: \"tags.addTag\",\n      i18nPlaceholderValue: \"Add Tag\",\n      onUpdateCallback: instance.submitInput\n    });\n  }\n});\nTemplate.tagLink.events({\n  \"click a\": function (event, templateInstance) {\n    event.preventDefault();\n    var slug = templateInstance.data.tag && templateInstance.data.tag.slug;\n    Router.go(\"tag\", {\n      slug: slug\n    });\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/ui/client/components/tags/tagItem.js"],"names":["Reaction","Router","Tags","i18next","classnames","Autosuggest","ReactiveDict","React","createAutosuggestInput","templateInstance","options","component","suggestions","state","get","getSuggestionValue","renderSuggestion","onSuggestionsFetchRequested","value","set","getSuggestions","onSuggestionsClearRequested","inputProps","placeholder","t","i18nPlaceholderKey","defaultValue","i18nPlaceholderValue","onKeyDown","event","keyCode","onUpdateCallback","onBlur","onChange","newValue","term","datums","slug","getSlug","find","RegExp","forEach","tag","push","label","name","suggestion","createElement","Template","tagItem","helpers","tagBlankProps","instance","onTagCreate","data","tagEditableProps","controls","_","map","control","toggleOn","isFunction","undefined","onClick","className","isSelected","selectable","onTagRemove","onTagSelect","onTagUpdate","tagEditable","onCreated","setDefault","oldValue","inputValue","submitInput","trim","isEmpty","updateTag","equals","_id","AutosuggestInput","selected","classes","handleTagSelect","handleTagRemove","tagBlank","tagLink","events","preventDefault","go"],"mappings":";;;;;;AAAA,IAAS;IAAT,AAAmB;AAAnB,OAAiC,WAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAY,AACrB,AAAS,AAAe,AACxB,AAAO,AAAgB,AACvB,AAAO,AAAiB,AACxB,AAAS,AAAoB,AAC7B,AAAO,AAAW;;AAElB,SAAA,AAAS,uBAAT,AAAgC,kBAAhC,AAAkD,SAAS,AACzD;;eAAO,AACM,AACX;iBAAa,iBAAA,AAAiB,MAAjB,AAAuB,IAF/B,AAEQ,AAA2B,AACxC;wBAHK,AAGe,AACpB;sBAJK,AAIa;;AAClB;6BAA4B,kCAAE;AAAF;AAA5B,AAAuC,6CACrC;uBAAA,AAAiB,MAAjB,AAAuB,IAAvB,AAA2B,eAA3B,AAA0C,AAAe,AAC1D;AAPI;;6BAQyB;8BAC5B;;aAAA,AAAiB,AAAM,iBAAvB,AAA2B,UATxB,AASH,AAA0C,AAC3C;;AACD;AAAY,AACV;kBAAa,AAAQ,AAAE,iBAAQ,kBAAlB,IAAsC,AAAE;kBAAc,AAAQ,4BADjE,AACG,AAAsC;AACnD;AAFU,AAEH,AAAiB,AAAM,AAAI;0BAClC;gBAAA,AAAU,AAAO,4BACf;AACA;;AACA;AAAI,AAAM,yBAAN,AAAkB,MAAlB,IAAuB,AAAM,cAAjC,AAA6C,AAAI,eAC/C;AAAQ,+BAAR,IAA4B,AAAQ,cAApC,AAA4B,AAC7B;AARO,AAST,AACD;AAbF;AARK,AACL;AAoBU,AAAM,AACZ,AAAQ,AAAoB,AAAQ;;AAX5B,AAYT;eACD;aAAA,AAAS,AAAO,iBAAE;;AAAlB,AAA8B,2BAC5B;AADc,uBACG,KAAjB,AAAuB,AAAI,AAAc,AAAe,AACxD;;iBAfQ;AAeR,AAAiB,AAAM,AAAI,AAAc,AAC1C;AA3BL,AAAO,AA8BR;;AAED,AAAS,AAAe,AAAM;;AAC5B,AAAM,SAAN,AAAe,+BACf;AAAM,SAAO,WAAb,AAAa,AAAS,AAAQ,AAC9B;AAAA,AAAK,AAAK,AACR,AAAM,AAAI,AAAO,AAAM;;AADzB,AAAU,AAEP,SAFH,AAEW,AAAU,iBAAV,AAAe,YACxB;SAAO,MAAA,AAAO,AAAK,uCACjB;AADF,AAAO,AAAY,AACV,AAAI;;AAJf,AAMC;AAED,AAAO,6BACR;;;AAEQ,mBAAT,SAA4B,KAA5B,AAAwC,AACtC,AAAO,AAAW,AACnB;AAFD;AAIA;AAAS,mCAAT,AAA0B,AAAY,AACpC;AAAO,QAAM,WAAN,AAAoB,SAA3B,AAAO,AAA4B,AAAM,AAAW,AACrD;;AAED,AAAS,AAAQ,AAAQ,AACvB;kBAAgB,+CACd;AAAA,AAAM,AAAW,AAAS,AAC1B,AAAO,0CACL;AAAa,gCADf,AAAO,AACQ,AAAS,AAAK;kCAJR,AAMtB;;wCAED;AAAA,AAAiB,AAAK,AACpB,AAAM,AAAW,AAAS,AAE1B,AAAO;;6BAAA,AACL;AACA;;AAAU,AAAE,mBAAF,AAAM,AAAS,AAAK,AAAU,AAAC,AAAY,AACnD;AAAO,AACL;AAAG,6BADE;AAEL;oBAAW,eACT;AAAA,AAAI,AAAQ,AAAU,AACpB,AAAI,AAAE,AAAW,AAAQ,AAAW,AAClC;;AAAA,AAAO,AAAQ,AAAS,AACzB;;gCAED;kBAAO,SAAQ,KAAf,AACD;;iCACD;mBAAO,SAAP,KAVG,AAWJ;AAzBX;AA0BU,AAAQ,AAAO,AACb;AAtCV;AAuCU,SAAQ,YAAR,AAAgB,UAAhB,AAAuB;AACxB;;;;AAfH,4BAiBD;AApBI,AAEK,8BAmBV;iBArBK,AAqBM,AAAS,AAAK,AACzB,AAAY,AAAS,AAAK,AAC1B,AAAY,AAAS,AAAK,AAC1B;AArBS;;OAqBI,0BAxBR,AAwBQ,AAAS,AAAK,AAC3B;gBAAa,MAAS,MAAT,IAzBR,AAyBsB,cAzBtB,AA0BL,AAAa,AAAS,AAAK;;AA1B7B,8DA4BD;;AAvCH,AAAyB,AA0CzB;;UAAS,UAAT,AAAqB,AAAU,cAAY,AACzC;AAAA,AAAK,AAAQ,AAAI,AACjB,AAAK,AAAM,AAAW,AACpB;;OAAU,YAAA,AAAK,AAAK,YADA,AACV,AAAc,AACxB;QAAY,AAAK,aAAL,AAAU,MAAV,AAAc,MAFN,IAGpB;;cAAa,gDAHf,AAAsB;6BAMtB;;AAAK,gBAAL,KAAmB,AAAM,2CACvB;AAAM,mBAAQ,AAAK,AAAM,YAAX,AAAe,eAAf,AAA6B,KAA3C,AAAc;;oCAEd;AAAA,AAAI,AAAK,AAAK,AAAe,AAAE,AAAQ,AAAW,AAAO,AACvD;AAAA,AAAK,AAAK,AAAY,AACvB;;AAED,AAAK,AAAM,AAAI,AAAc;AAP/B,AAQC;gCAED;AAAK,QAAL,AAAiB,WAAM,SACrB,AAAM,AAAa,AAAK,AAAM,AAAI;;AAC9B,AAAK,AAAM,0BAAf,AAAI,AAAkB,AAAY,AAAgB,AAAO,AACvD;AAAM,AAAQ,4BAAd,AAAc,AAAW;iCAEzB,AAAI,AAAK,AAAK,AAAe,AAAE,AAAQ,AAAW,AAAO,AACvD;AAJJ;AAII,AAAK,AAAK,AAAY,AAAK,AAAK,AAAI,AAAK,AACzC,AAAK,AAAM,AAAI,AAAY,AAC5B;yBACF;4BA3BL,AAkBE,AAUC,AACF;;AAEQ,gBAAT,AAAqB,SAArB,AAA6B,KAC3B,AAAmB,AACjB;AAFJ;AAEI,AAAM,AAAW,AAAS,AAE1B,AAAO,AAAuB,AAAU,AACtC;+BADsC,AAClB,AACpB;mBAAsB,SAFgB,AAGtC;uBAHK,AAAiC,AAGpB,AAAS;AAPJ,AAIzB,AAKD;;gDAED;AAAY,AACV;AAAA,AAAM,AAAW,AAAS,AAE1B;AAAO,AAAW,AAAS,AAAK,AAAW,AACzC;AAAU,+BAD+B,AAC/B,AAAS,AAAK;AAD1B,AAAO,4BAdkB,AAiB1B;;AAED;mBAAkB,kBAChB;AAAM,iBAAW,KAAS,YAA1B,AAAiB,cACjB;AAAO,AAAM,AACX;AACA;AAAA,AAAI,AAAS,AAAK,AAAa,AAC7B,AAAS,AAAK,AAAY,AAAS,AAAK,AACzC;;AAJH,AAKC;AACF;;AA3B0B;;gBA4BT,AAChB;AAAM,iBAAN,AAAiB,AAAS,AAC1B,AAAO,AAAM,AACX,AACA;AAJJ;;OAIQ,AAAS,cAAT,AAAc,YAAlB,AAA+B,AAC7B;QAAS,QAAT,AAAc,iBAAd,AAA0B,AAAS,cAAnC,AAA0B,AAAc,AACzC,AACF;;AALD,+DAMD;;AApCH,AAA6B,AAuC7B;;WAAS,MAAT,AAAkB,IAAlB,AAA4B,cAAY,AACtC;AAAA,AAAK,AAAQ,AAAI,AACjB;AAAA,AAAK,AAAM,AAAW,AACpB,AAAY;AACZ,SAAa;AAFf;4BAKA,AAAK,AAAc,AAAM,AACvB;AAAM;0BAEN;AAAI,AAAK,AAAK,4BAAd,AAAI,AAAyB,AAAE,AAAQ,AAAW,AAAO,AACvD;AAAA,AAAK,AAAK,wBAAV,AAAsB,SAAtB,AACD;AAJD,AAAc,AAA6B,KAA7B,AAAK,AAAM,AAAI;AAD/B,AAOE,AAAK,AAAM,AAAI,AAAc,AAC9B;AAbqB;AAFxB,AAgBC;AAEQ,uBAAT,AAAkB,OAAlB,AAA0B,kBACxB;UAAmB,AACjB;QAAM,OAAW,AAAS,iBAAT,KAAjB,iCAEA;WAAO;AAAA,AAAuB,AAAU,AACtC;;AALN,AAA0B,AAItB,AAAO,AAAiC,AAClB,AACpB,AAAsB,AACtB,AAAkB,AAAS,AAE9B,AAGH,AAAS,AAAQ,AAAO,AACtB,AAAU,AAAO,AAAkB,AACjC,AAAM,AACN,AAAM,AAAO,AAAiB,AAAK,AAAO,AAAiB,AAAK,AAAI,AACpE,AAAO,AAAG,AAAO,AAAE,AACpB;AAjBH","file":"/imports/plugins/core/ui/client/components/tags/tagItem.js.map","sourcesContent":["import { Reaction, Router } from \"/client/api\";\nimport { Tags } from \"/lib/collections\";\nimport { i18next } from \"/client/api\";\nimport classnames from \"classnames\";\nimport Autosuggest from \"react-autosuggest\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport React from \"react\";\n\nfunction createAutosuggestInput(templateInstance, options) {\n  return {\n    component: Autosuggest,\n    suggestions: templateInstance.state.get(\"suggestions\"),\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    onSuggestionsFetchRequested({ value }) {\n      templateInstance.state.set(\"suggestions\", getSuggestions(value));\n    },\n    onSuggestionsClearRequested() {\n      templateInstance.state.set(\"suggestions\", []);\n    },\n    inputProps: {\n      placeholder: i18next.t(options.i18nPlaceholderKey, { defaultValue: options.i18nPlaceholderValue }),\n      value: templateInstance.state.get(\"inputValue\"),\n      onKeyDown(event) {\n        // 9 == Tab key\n        // 13 == Enter Key\n        if (event.keyCode === 9 || event.keyCode === 13) {\n          options.onUpdateCallback && options.onUpdateCallback();\n        }\n      },\n      onBlur: () => {\n        options.onUpdateCallback && options.onUpdateCallback();\n      },\n      onChange(event, { newValue }) {\n        templateInstance.state.set(\"suggestion\", getSuggestions(newValue));\n        templateInstance.state.set(\"inputValue\", newValue);\n      }\n    }\n  };\n}\n\nfunction getSuggestions(term) {\n  const datums = [];\n  const slug = Reaction.getSlug(term);\n  Tags.find({\n    slug: new RegExp(slug, \"i\")\n  }).forEach(function (tag) {\n    return datums.push({\n      label: tag.name\n    });\n  });\n\n  return datums;\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nfunction renderSuggestion(suggestion) {\n  return React.createElement(\"span\", null, suggestion.label);\n}\n\nTemplate.tagItem.helpers({\n  tagBlankProps() {\n    const instance = Template.instance();\n    return {\n      onTagCreate: instance.data.onTagCreate\n    };\n  },\n\n  tagEditableProps(tag) {\n    const instance = Template.instance();\n\n    return {\n      tag,\n      controls: _.map(instance.data.controls, (control) => {\n        return {\n          ...control,\n          toggleOn() {\n            if (control.toggleOn) {\n              if (_.isFunction(control.toggleOn)) {\n                return control.toggleOn(tag);\n              }\n\n              return control.toggleOn;\n            }\n            return undefined;\n          },\n          onClick(event) {\n            // Call the original onClick and add the current tag\n            control.onClick(event, tag);\n          }\n        };\n      }),\n      className: instance.data.className,\n      isSelected: instance.data.isSelected,\n      selectable: instance.data.selectable,\n      onTagRemove: instance.data.onTagRemove,\n      onTagSelect: instance.data.onTagSelect,\n      onTagUpdate: instance.data.onTagUpdate\n    };\n  }\n});\n\nTemplate.tagEditable.onCreated(function () {\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    oldValue: this.data.tag.name,\n    inputValue: this.data.tag.name,\n    suggestions: []\n  });\n\n  this.submitInput = () => {\n    const value = this.state.get(\"inputValue\").trim();\n\n    if (this.data.onTagCreate && _.isEmpty(value) === false) {\n      this.data.onTagCreate(value);\n    }\n\n    this.state.set(\"inputValue\", \"\");\n  };\n\n  this.updateTag = () => {\n    const inputValue = this.state.get(\"inputValue\");\n    if (this.state.equals(\"oldValue\", inputValue) === false) {\n      const value = inputValue.trim();\n\n      if (this.data.onTagUpdate && _.isEmpty(value) === false) {\n        this.data.onTagUpdate(this.data.tag._id, value);\n        this.state.set(\"oldValue\", inputValue);\n      }\n    }\n  };\n});\n\nTemplate.tagEditable.helpers({\n  AutosuggestInput() {\n    const instance = Template.instance();\n\n    return createAutosuggestInput(instance, {\n      i18nPlaceholderKey: \"tags.updateTag\",\n      i18nPlaceholderValue: \"Update Tag\",\n      onUpdateCallback: instance.updateTag\n    });\n  },\n\n  className() {\n    const instance = Template.instance();\n\n    return classnames(instance.data.className, {\n      selected: instance.data.classes\n    });\n  },\n\n  handleTagSelect() {\n    const instance = Template.instance();\n    return () => {\n      // Pass the tag back up to the parent component\n      if (instance.data.onTagSelect) {\n        instance.data.onTagSelect(instance.data.tag);\n      }\n    };\n  },\n  handleTagRemove() {\n    const instance = Template.instance();\n    return () => {\n      // Pass the tag back up to the parent component\n      if (instance.data.onTagRemove) {\n        instance.data.onTagRemove(instance.data.tag);\n      }\n    };\n  }\n});\n\nTemplate.tagBlank.onCreated(function () {\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    inputValue: \"\",\n    suggestions: []\n  });\n\n  this.submitInput = () => {\n    const value = this.state.get(\"inputValue\").trim();\n\n    if (this.data.onTagCreate && _.isEmpty(value) === false) {\n      this.data.onTagCreate(value);\n    }\n\n    this.state.set(\"inputValue\", \"\");\n  };\n});\n\nTemplate.tagBlank.helpers({\n  AutosuggestInput() {\n    const instance = Template.instance();\n\n    return createAutosuggestInput(instance, {\n      i18nPlaceholderKey: \"tags.addTag\",\n      i18nPlaceholderValue: \"Add Tag\",\n      onUpdateCallback: instance.submitInput\n    });\n  }\n});\n\nTemplate.tagLink.events({\n  \"click a\"(event, templateInstance) {\n    event.preventDefault();\n    const slug = templateInstance.data.tag && templateInstance.data.tag.slug;\n    Router.go(\"tag\", { slug });\n  }\n});\n"]},"hash":"7af9e5a8113aace17d337655e707971318009a76"}
