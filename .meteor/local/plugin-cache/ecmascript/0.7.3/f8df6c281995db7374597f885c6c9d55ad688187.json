{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"twilio","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Twilio"}]},{"source":"nexmo","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Nexmo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"/lib/collections","imported":["Sms","Accounts"],"specifiers":[{"kind":"named","imported":"Sms","local":"Sms"},{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/sms/server/methods/sms.js","filenameRelative":"/imports/plugins/included/sms/server/methods/sms.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/sms/server/methods/sms.js"],"names":["Twilio","Nexmo","Meteor","check","Sms","Accounts","Reaction","Logger","methods","settings","Object","shopId","getShopId","smsDetails","find","count","update","$set","insert","message","userId","String","user","findOne","addressBook","profile","phone","smsSettings","apiKey","apiToken","smsPhone","smsProvider","debug","client","sendMessage","to","from","body","err","error","apiSecret","sendSms"],"mappings":"AAAA,IAAO;AAAP,OAAA,AAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACnB,AAAO,AAAW,AAClB,AAAS,AAAc,AACvB,AAAsB,A,AAAb,AACT,AAAS,AAAK,AAAgB,AAC9B,AAAS,AAAU,AAAc,AAGjC;AAGA,AAAO,AAAQ,AACb;;;AAMA,AAAoB,AAAC,AAAa,AAChC,AAAM,AAAU,AAChB,AAAS,AAAS,AAAS,AAE3B,AAAM,AAAa,AAAI,AAAO;;;;;6CAC9B;AAAI,oBAAJ,AAAkB,AAAG,AACnB;aAAO,AAAI,SAAJ,AAAW,SAAA,AAAE,AAAQ,AAAS;AAA9B,AAA6C,gCAClD;;QAAM,iBAD4C;AAApD,AAAO;;;cAIT;AADC;AAhBU,AAiBX,AAAO,AAAI,AAAO,AACnB;;sBAED;;AAQA,AAAY,AAAC,AAAS,AAAQ,AAAW,AACvC,AAAM,AAAS,AACf,AAAM,AAAQ,AACd;;;;;;;KAAM,sBAAN,AAAc,SAAd;UAEM,AAAO,SAAb,AAAa,AAAS,AACtB;UAAM,QAAN,AAAoB,AAAK,AAAQ,AACjC;AAAI,UAAQ,QAP2B,AAOvC,AACA,AACA;AAAI,QAAQ,gBAAZ,AAAyB,AACvB;QAAI,AAAY,cAAG,KAAnB,AAA0B,QACxB;gBAAA,AAAQ,AAAY,AAAG,AACxB,MAPH,CAQC;;;gCAED;AAAA,AAAI,AAAO,+BACT;AAAA,AAAM,AAAc,AAAI;AAExB,AAAI,AAAa,AACf;;QAAM,OAAE;UAAF,kBAAA,AAAU,AAAU;;UAApB;AAA8B,qBAA9B;;;;;YAAN,AAAoD;uBACpD;AAAI,uBAAgB,WAApB,AAA8B,QAC5B,AAAO,AAAM,AACb;AAAM,iBAAS;gBAEf,AAAO,AAAY,AACjB;AAAI,kBADa,AAEjB;kBAFiB,AAEX,AACN;AALF,AAAe,AAAI,AAAO,AAAQ,AAElC,uBAGQ,KAHR,AAAmB;AAIf,gBAAD,AAAS,KACV;AAAA,AAAI,qBAAK,aACP;AAAA,AAAO,AAAO,AAAM,AACrB;AACF;AARD,AASA;AACD;;;uBACD;;AAAI;AACF,AAAO,AAAM,AACb;AAAM,uBAAS,AAAI,AAAM,AACvB,AACA;AAJJ,AAA6B,AAC3B,WADkB;;kBAIL,6DAFE,AAAU;AAAzB,qBAIA;AAAO,qBAAP,AAAe,OAAf,AAAuB,MAAvB,AAAiC,AAAO,AAAS,AAAI,AAAC,AAAQ,AAC5D;AAAA,AAAI,AAAK,AACP;AAAA,AAAO,AAAO,AAAM,AACrB;AACF;AAJD,AAKD;AACF;AA3EP,AAAe,AA4EV,AACF","file":"/imports/plugins/included/sms/server/methods/sms.js.map","sourcesContent":["import Twilio from \"twilio\";\nimport Nexmo from \"nexmo\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Sms, Accounts } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\n\n/**\n * Sms Methods\n */\nMeteor.methods({\n  /**\n   * sms/saveSettings\n   * @summary This save the sms provider settings\n   * @param {Object} settings - settings\n   * @return {object} returns result\n   */\n  \"sms/saveSettings\": (settings) => {\n    check(settings, Object);\n    settings.shopId = Reaction.getShopId();\n\n    const smsDetails = Sms.find().count();\n    if (smsDetails >= 1) {\n      return Sms.update({ shopId: Reaction.getShopId() }, {\n        $set: settings\n      });\n    }\n    return Sms.insert(settings);\n  },\n\n  /**\n   * sms/send\n   * @summary This send the sms to the user\n   * @param {String} message - The message to send\n   * @param {String} userId - The user to receive the message\n   * @param {String} shopId - The currenct shopId\n   * @return {object} returns result\n   */\n  \"sms/send\": (message, userId, shopId) => {\n    check(message, String);\n    check(userId, String);\n    check(shopId, String);\n\n    const user = Accounts.findOne();\n    const addressBook = user.profile.addressBook;\n    let phone = false;\n    // check for addressBook phone\n    if (user && addressBook) {\n      if (addressBook[0].phone) {\n        phone = addressBook[0].phone;\n      }\n    }\n\n    if (phone) {\n      const smsSettings = Sms.findOne();\n\n      if (smsSettings) {\n        const { apiKey, apiToken, smsPhone, smsProvider } = smsSettings;\n        if (smsProvider === \"twilio\") {\n          Logger.debug(\"choose twilio\");\n          const client = new Twilio(apiKey, apiToken);\n\n          client.sendMessage({\n            to: phone,\n            from: smsPhone,\n            body: message\n          }, (err) => {\n            if (err) {\n              return Logger.error(err);\n            }\n          });\n          return;\n        }\n        if (smsProvider === \"nexmo\") {\n          Logger.debug(\"choose nexmo\");\n          const client = new Nexmo({\n            apiKey,\n            apiSecret: apiToken\n          });\n          client.message.sendSms(smsPhone, phone, message, {}, (err) => {\n            if (err) {\n              return Logger.error(err);\n            }\n          });\n        }\n      }\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/sms/server/methods/sms.js.map","sourceFileName":"/imports/plugins/included/sms/server/methods/sms.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"sms"},"ignored":false,"code":"var Twilio = void 0;\nmodule.importSync(\"twilio\", {\n  \"default\": function (v) {\n    Twilio = v;\n  }\n}, 0);\nvar Nexmo = void 0;\nmodule.importSync(\"nexmo\", {\n  \"default\": function (v) {\n    Nexmo = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 3);\nvar Sms = void 0,\n    Accounts = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Sms: function (v) {\n    Sms = v;\n  },\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 4);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 5);\n/**\n * Sms Methods\n */Meteor.methods({\n  /**\n   * sms/saveSettings\n   * @summary This save the sms provider settings\n   * @param {Object} settings - settings\n   * @return {object} returns result\n   */\"sms/saveSettings\": function (settings) {\n    check(settings, Object);\n    settings.shopId = Reaction.getShopId();\n    var smsDetails = Sms.find().count();\n\n    if (smsDetails >= 1) {\n      return Sms.update({\n        shopId: Reaction.getShopId()\n      }, {\n        $set: settings\n      });\n    }\n\n    return Sms.insert(settings);\n  },\n  /**\n   * sms/send\n   * @summary This send the sms to the user\n   * @param {String} message - The message to send\n   * @param {String} userId - The user to receive the message\n   * @param {String} shopId - The currenct shopId\n   * @return {object} returns result\n   */\"sms/send\": function (message, userId, shopId) {\n    check(message, String);\n    check(userId, String);\n    check(shopId, String);\n    var user = Accounts.findOne();\n    var addressBook = user.profile.addressBook;\n    var phone = false; // check for addressBook phone\n\n    if (user && addressBook) {\n      if (addressBook[0].phone) {\n        phone = addressBook[0].phone;\n      }\n    }\n\n    if (phone) {\n      var smsSettings = Sms.findOne();\n\n      if (smsSettings) {\n        var apiKey = smsSettings.apiKey,\n            apiToken = smsSettings.apiToken,\n            smsPhone = smsSettings.smsPhone,\n            smsProvider = smsSettings.smsProvider;\n\n        if (smsProvider === \"twilio\") {\n          Logger.debug(\"choose twilio\");\n          var client = new Twilio(apiKey, apiToken);\n          client.sendMessage({\n            to: phone,\n            from: smsPhone,\n            body: message\n          }, function (err) {\n            if (err) {\n              return Logger.error(err);\n            }\n          });\n          return;\n        }\n\n        if (smsProvider === \"nexmo\") {\n          Logger.debug(\"choose nexmo\");\n\n          var _client = new Nexmo({\n            apiKey: apiKey,\n            apiSecret: apiToken\n          });\n\n          _client.message.sendSms(smsPhone, phone, message, {}, function (err) {\n            if (err) {\n              return Logger.error(err);\n            }\n          });\n        }\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/sms/server/methods/sms.js"],"names":["Twilio","Nexmo","Meteor","check","Sms","Accounts","Reaction","Logger","methods","settings","Object","shopId","getShopId","smsDetails","find","count","update","$set","insert","message","userId","String","user","findOne","addressBook","profile","phone","smsSettings","apiKey","apiToken","smsPhone","smsProvider","debug","client","sendMessage","to","from","body","err","error","apiSecret","sendSms"],"mappings":"AAAA,IAAO;AAAP,OAAA,AAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACnB,AAAO,AAAW,AAClB,AAAS,AAAc,AACvB,AAAsB,A,AAAb,AACT,AAAS,AAAK,AAAgB,AAC9B,AAAS,AAAU,AAAc,AAGjC;AAGA,AAAO,AAAQ,AACb;;;AAMA,AAAoB,AAAC,AAAa,AAChC,AAAM,AAAU,AAChB,AAAS,AAAS,AAAS,AAE3B,AAAM,AAAa,AAAI,AAAO;;;;;6CAC9B;AAAI,oBAAJ,AAAkB,AAAG,AACnB;aAAO,AAAI,SAAJ,AAAW,SAAA,AAAE,AAAQ,AAAS;AAA9B,AAA6C,gCAClD;;QAAM,iBAD4C;AAApD,AAAO;;;cAIT;AADC;AAhBU,AAiBX,AAAO,AAAI,AAAO,AACnB;;sBAED;;AAQA,AAAY,AAAC,AAAS,AAAQ,AAAW,AACvC,AAAM,AAAS,AACf,AAAM,AAAQ,AACd;;;;;;;KAAM,sBAAN,AAAc,SAAd;UAEM,AAAO,SAAb,AAAa,AAAS,AACtB;UAAM,QAAN,AAAoB,AAAK,AAAQ,AACjC;AAAI,UAAQ,QAP2B,AAOvC,AACA,AACA;AAAI,QAAQ,gBAAZ,AAAyB,AACvB;QAAI,AAAY,cAAG,KAAnB,AAA0B,QACxB;gBAAA,AAAQ,AAAY,AAAG,AACxB,MAPH,CAQC;;;gCAED;AAAA,AAAI,AAAO,+BACT;AAAA,AAAM,AAAc,AAAI;AAExB,AAAI,AAAa,AACf;;QAAM,OAAE;UAAF,kBAAA,AAAU,AAAU;;UAApB;AAA8B,qBAA9B;;;;;YAAN,AAAoD;uBACpD;AAAI,uBAAgB,WAApB,AAA8B,QAC5B,AAAO,AAAM,AACb;AAAM,iBAAS;gBAEf,AAAO,AAAY,AACjB;AAAI,kBADa,AAEjB;kBAFiB,AAEX,AACN;AALF,AAAe,AAAI,AAAO,AAAQ,AAElC,uBAGQ,KAHR,AAAmB;AAIf,gBAAD,AAAS,KACV;AAAA,AAAI,qBAAK,aACP;AAAA,AAAO,AAAO,AAAM,AACrB;AACF;AARD,AASA;AACD;;;uBACD;;AAAI;AACF,AAAO,AAAM,AACb;AAAM,uBAAS,AAAI,AAAM,AACvB,AACA;AAJJ,AAA6B,AAC3B,WADkB;;kBAIL,6DAFE,AAAU;AAAzB,qBAIA;AAAO,qBAAP,AAAe,OAAf,AAAuB,MAAvB,AAAiC,AAAO,AAAS,AAAI,AAAC,AAAQ,AAC5D;AAAA,AAAI,AAAK,AACP;AAAA,AAAO,AAAO,AAAM,AACrB;AACF;AAJD,AAKD;AACF;AA3EP,AAAe,AA4EV,AACF","file":"/imports/plugins/included/sms/server/methods/sms.js.map","sourcesContent":["import Twilio from \"twilio\";\nimport Nexmo from \"nexmo\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Sms, Accounts } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\n\n/**\n * Sms Methods\n */\nMeteor.methods({\n  /**\n   * sms/saveSettings\n   * @summary This save the sms provider settings\n   * @param {Object} settings - settings\n   * @return {object} returns result\n   */\n  \"sms/saveSettings\": (settings) => {\n    check(settings, Object);\n    settings.shopId = Reaction.getShopId();\n\n    const smsDetails = Sms.find().count();\n    if (smsDetails >= 1) {\n      return Sms.update({ shopId: Reaction.getShopId() }, {\n        $set: settings\n      });\n    }\n    return Sms.insert(settings);\n  },\n\n  /**\n   * sms/send\n   * @summary This send the sms to the user\n   * @param {String} message - The message to send\n   * @param {String} userId - The user to receive the message\n   * @param {String} shopId - The currenct shopId\n   * @return {object} returns result\n   */\n  \"sms/send\": (message, userId, shopId) => {\n    check(message, String);\n    check(userId, String);\n    check(shopId, String);\n\n    const user = Accounts.findOne();\n    const addressBook = user.profile.addressBook;\n    let phone = false;\n    // check for addressBook phone\n    if (user && addressBook) {\n      if (addressBook[0].phone) {\n        phone = addressBook[0].phone;\n      }\n    }\n\n    if (phone) {\n      const smsSettings = Sms.findOne();\n\n      if (smsSettings) {\n        const { apiKey, apiToken, smsPhone, smsProvider } = smsSettings;\n        if (smsProvider === \"twilio\") {\n          Logger.debug(\"choose twilio\");\n          const client = new Twilio(apiKey, apiToken);\n\n          client.sendMessage({\n            to: phone,\n            from: smsPhone,\n            body: message\n          }, (err) => {\n            if (err) {\n              return Logger.error(err);\n            }\n          });\n          return;\n        }\n        if (smsProvider === \"nexmo\") {\n          Logger.debug(\"choose nexmo\");\n          const client = new Nexmo({\n            apiKey,\n            apiSecret: apiToken\n          });\n          client.message.sendSms(smsPhone, phone, message, {}, (err) => {\n            if (err) {\n              return Logger.error(err);\n            }\n          });\n        }\n      }\n    }\n  }\n});\n"]},"hash":"f8df6c281995db7374597f885c6c9d55ad688187"}
