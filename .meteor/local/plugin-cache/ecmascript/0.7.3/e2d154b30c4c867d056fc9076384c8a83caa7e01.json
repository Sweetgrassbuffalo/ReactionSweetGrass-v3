{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react-komposer","imported":["compose"],"specifiers":[{"kind":"named","imported":"compose","local":"compose"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]}],"exports":{"exported":["composeWithTracker","reactiveMapper","LoadingComponent"],"specifiers":[{"kind":"external-all","source":"react-komposer"},{"kind":"local","local":"composeWithTracker","exported":"composeWithTracker"},{"kind":"local","local":"reactiveMapper","exported":"reactiveMapper"},{"kind":"local","local":"LoadingComponent","exported":"LoadingComponent"}]}}},"options":{"filename":"/lib/api/compose.js","filenameRelative":"/lib/api/compose.js","inputSourceMap":{"version":3,"sources":["/lib/api/compose.js"],"names":["compose","React","getTrackerLoader","reactiveMapper","props","onData","env","trackerCleanup","handler","Tracker","nonreactive","autorun","stop","composeWithTracker","LoadingComponent","options","loadingHandler"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;GAIA,AAAS,AAAT,AAAwB,AAAxB,AACA,AAAO,AAAP,AAAkB,AAAlB,AACA,AAAc,AAAd,A,AAEA;;AAMA,AAAS,AAAT,AAA0B,AAA1B,AAA0C,AACxC,AAAO,AAAC,AAAD,AAAQ,AAAR,AAAgB,AAAhB,AAAwB;;;;;GAC7B,AAAI,SAAiB,iBAArB,gBACA;mBAAM,OAAU,QAAQ,KAAR,AAAoB,AAAM,AACxC;QAAO,AAAQ,iBAAR,AAAgB,AAAM,AAC3B;kDACA;qBAAiB,oBAAe,AAAf,AAAsB,AAAtB,AAA8B,AAA9B,AAAjB,AACD,AAHM;AAAP,AAID,AALe,AAAhB;uDAOA;AAAO,AAAM,AACX;AAAI,AAAO,AAAP,AAA0B,AAA9B,AAA0C,AAC1C,AAAO,AAAQ,AAAR,AAAP,AACD;AAHD,uBAID,AAbD;gDAcD,A,AAED;;;;EAMA,AAAO,AAAS,AAAT,AAA4B,AAA5B,AAA4C,AAA5C,AAA8D,AACnE,AAAM,AAAU,AAAhB,AAEA,AAAI,AAAO,AAAP,AAA4B,AAAhC,AAA6C,AAC3C;;;;;;;AAAQ,SAAR,AAAyB,mBAAM,kCAAE;gBAC/B,AACE,AAAC,AAAD,AADF,AAGD;;AAJD,+CAKD;;;AAED,iCAAO,AAAQ,AAAiB,AAAjB,AAAR,AAA0C,AAA1C,AAAP,AACD","file":"/lib/api/compose.js.map","sourcesContent":["/**\n * Wrapper around react-komposer v2 to provide some backwars compatability\n * for features from v1.\n */\nimport { compose } from \"react-komposer\";\nimport React from \"react\";\nexport * from \"react-komposer\";\n\n/**\n * getTrackerLoader creates a Meteor Tracker to watch dep updates from\n * passed in reactiveMapper funtion\n * @param  {Function} reactiveMapper data fetching function to bind to a tracker\n * @return {Function} composed function\n */\nfunction getTrackerLoader(reactiveMapper) {\n  return (props, onData, env) => {\n    let trackerCleanup = null;\n    const handler = Tracker.nonreactive(() => {\n      return Tracker.autorun(() => {\n        // assign the custom clean-up function.\n        trackerCleanup = reactiveMapper(props, onData, env);\n      });\n    });\n\n    return () => {\n      if (typeof trackerCleanup === \"function\") trackerCleanup();\n      return handler.stop();\n    };\n  };\n}\n\n/**\n * Re-implementation of composeWithTracker from v1.x\n * @param {Function} reactiveMapper data fetching function to bind to a tracker\n * @param {React.Component} LoadingComponent react component for a custom loading screen\n * @return {Function} composed function\n */\nexport function composeWithTracker(reactiveMapper, LoadingComponent) {\n  const options = {};\n\n  if (typeof LoadingComponent === \"undefined\") {\n    options.loadingHandler = () => { // eslint-disable-line react/display-name\n      return (\n        <LoadingComponent />\n      );\n    };\n  }\n\n  return compose(getTrackerLoader(reactiveMapper), options);\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/api/compose.js.map","sourceFileName":"/lib/api/compose.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"compose"},"ignored":false,"code":"module.export({\n  composeWithTracker: function () {\n    return composeWithTracker;\n  }\n});\nmodule.importSync(\"react-komposer\", {\n  \"*\": function (v, k) {\n    exports[k] = v;\n  }\n}, 2);\nvar compose = void 0;\nmodule.importSync(\"react-komposer\", {\n  compose: function (v) {\n    compose = v;\n  }\n}, 0);\nvar React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 1);\n\n/**\n * getTrackerLoader creates a Meteor Tracker to watch dep updates from\n * passed in reactiveMapper funtion\n * @param  {Function} reactiveMapper data fetching function to bind to a tracker\n * @return {Function} composed function\n */function getTrackerLoader(reactiveMapper) {\n  return function (props, onData, env) {\n    var trackerCleanup = null;\n    var handler = Tracker.nonreactive(function () {\n      return Tracker.autorun(function () {\n        // assign the custom clean-up function.\n        trackerCleanup = reactiveMapper(props, onData, env);\n      });\n    });\n    return function () {\n      if (typeof trackerCleanup === \"function\") trackerCleanup();\n      return handler.stop();\n    };\n  };\n} /**\n   * Re-implementation of composeWithTracker from v1.x\n   * @param {Function} reactiveMapper data fetching function to bind to a tracker\n   * @param {React.Component} LoadingComponent react component for a custom loading screen\n   * @return {Function} composed function\n   */\n\nfunction composeWithTracker(reactiveMapper, LoadingComponent) {\n  var options = {};\n\n  if (typeof LoadingComponent === \"undefined\") {\n    options.loadingHandler = function () {\n      // eslint-disable-line react/display-name\n      return React.createElement(LoadingComponent, null);\n    };\n  }\n\n  return compose(getTrackerLoader(reactiveMapper), options);\n}","map":{"version":3,"sources":["/lib/api/compose.js"],"names":["compose","React","getTrackerLoader","reactiveMapper","props","onData","env","trackerCleanup","handler","Tracker","nonreactive","autorun","stop","composeWithTracker","LoadingComponent","options","loadingHandler"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;GAIA,AAAS,AAAT,AAAwB,AAAxB,AACA,AAAO,AAAP,AAAkB,AAAlB,AACA,AAAc,AAAd,A,AAEA;;AAMA,AAAS,AAAT,AAA0B,AAA1B,AAA0C,AACxC,AAAO,AAAC,AAAD,AAAQ,AAAR,AAAgB,AAAhB,AAAwB;;;;;GAC7B,AAAI,SAAiB,iBAArB,gBACA;mBAAM,OAAU,QAAQ,KAAR,AAAoB,AAAM,AACxC;QAAO,AAAQ,iBAAR,AAAgB,AAAM,AAC3B;kDACA;qBAAiB,oBAAe,AAAf,AAAsB,AAAtB,AAA8B,AAA9B,AAAjB,AACD,AAHM;AAAP,AAID,AALe,AAAhB;uDAOA;AAAO,AAAM,AACX;AAAI,AAAO,AAAP,AAA0B,AAA9B,AAA0C,AAC1C,AAAO,AAAQ,AAAR,AAAP,AACD;AAHD,uBAID,AAbD;gDAcD,A,AAED;;;;EAMA,AAAO,AAAS,AAAT,AAA4B,AAA5B,AAA4C,AAA5C,AAA8D,AACnE,AAAM,AAAU,AAAhB,AAEA,AAAI,AAAO,AAAP,AAA4B,AAAhC,AAA6C,AAC3C;;;;;;;AAAQ,SAAR,AAAyB,mBAAM,kCAAE;gBAC/B,AACE,AAAC,AAAD,AADF,AAGD;;AAJD,+CAKD;;;AAED,iCAAO,AAAQ,AAAiB,AAAjB,AAAR,AAA0C,AAA1C,AAAP,AACD","file":"/lib/api/compose.js.map","sourcesContent":["/**\n * Wrapper around react-komposer v2 to provide some backwars compatability\n * for features from v1.\n */\nimport { compose } from \"react-komposer\";\nimport React from \"react\";\nexport * from \"react-komposer\";\n\n/**\n * getTrackerLoader creates a Meteor Tracker to watch dep updates from\n * passed in reactiveMapper funtion\n * @param  {Function} reactiveMapper data fetching function to bind to a tracker\n * @return {Function} composed function\n */\nfunction getTrackerLoader(reactiveMapper) {\n  return (props, onData, env) => {\n    let trackerCleanup = null;\n    const handler = Tracker.nonreactive(() => {\n      return Tracker.autorun(() => {\n        // assign the custom clean-up function.\n        trackerCleanup = reactiveMapper(props, onData, env);\n      });\n    });\n\n    return () => {\n      if (typeof trackerCleanup === \"function\") trackerCleanup();\n      return handler.stop();\n    };\n  };\n}\n\n/**\n * Re-implementation of composeWithTracker from v1.x\n * @param {Function} reactiveMapper data fetching function to bind to a tracker\n * @param {React.Component} LoadingComponent react component for a custom loading screen\n * @return {Function} composed function\n */\nexport function composeWithTracker(reactiveMapper, LoadingComponent) {\n  const options = {};\n\n  if (typeof LoadingComponent === \"undefined\") {\n    options.loadingHandler = () => { // eslint-disable-line react/display-name\n      return (\n        <LoadingComponent />\n      );\n    };\n  }\n\n  return compose(getTrackerLoader(reactiveMapper), options);\n}\n"]},"hash":"e2d154b30c4c867d056fc9076384c8a83caa7e01"}
