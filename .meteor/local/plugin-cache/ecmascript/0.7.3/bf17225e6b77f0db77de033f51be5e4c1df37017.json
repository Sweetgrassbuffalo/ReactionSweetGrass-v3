{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/get","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_get"}]},{"source":"lodash/keys","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_keys"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"meteor/vsivsi:job-collection","imported":["Job"],"specifiers":[{"kind":"named","imported":"Job","local":"Job"}]},{"source":"/lib/collections","imported":["Packages","Jobs"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"},{"kind":"named","imported":"Jobs","local":"Jobs"}]},{"source":"/lib/collections/schemas","imported":["CorePackageConfig"],"specifiers":[{"kind":"named","imported":"CorePackageConfig","local":"CorePackageConfig"}]},{"source":"/server/api","imported":["Logger","Reaction"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/search-mongo/server/methods/formHandler.js","filenameRelative":"/imports/plugins/included/search-mongo/server/methods/formHandler.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/search-mongo/server/methods/formHandler.js"],"names":["Meteor","check","Match","Job","Packages","Jobs","CorePackageConfig","Logger","Reaction","fieldsChanged","changedFields","fieldType","field","indexOf","weightsChanged","methods","modifier","_id","Optional","String","currentSettings","findOne","newSettingsArray","$set","changedSettings","setting","currentSetting","push","hasPermission","Error","rebuildJob","debug","priority","retry","retries","wait","backoff","save","cancelRepeats","update"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAc,AACvB,AAAS,AAAO,AAAa,AAC7B,AAAS,AAAW,AACpB,AAAS,AAAU,AAAY,AAC/B,AAAS,AAAyB,AAClC,AAAS,AAAQ,AAAgB;;AAGjC,SAAA,AAAS,cAAT,AAAuB;AAAuC,AAC5D,MADoC,gFAAtC,AAAkD;;AAC3C,uBAAL,AAAoB;AAAe,AACjC;;;;;;;;;;;QADF,AAAW;;QACL,MAAA,AAAM,QAAN,AAAc,eAAe,CAAjC,AAAkC,GAAG,AACnC;aAAA,AAAO,AACR;AACF;;;SACD;AAAA,AAAO,AACR;;uCAED;SAAS,cAAT,AAAwB,eAAe,AACrC;AAAA,AAAO,AAAc,AAAe,AACrC;;;AAED,AAAO,AAAQ;0BACkB,SAAA,AAAU,AAAU,AAAK,AACtD;UAAM,KAAN,AAAgB,AAAM,AAAS,AAC/B;QAAA,AAAM,AAAK,mCACX;;QAAM,AAAkB,yBAAA,AAAS,SAAjC,AAAwB,AAAiB;;0BACzC;;AAAM,0BAAmB,AAAO;AAAhC,AAAyB,AAAgB;;;;;;;;;;;;;iDACzC;;UAAM,AAAkB,mBAAxB;6BACA;AAAA,AAAK,AAAM,AAAW,AAAkB,AACtC;AAAA,AAAM,AAAiB,AAAM,AAAiB,KAPlD,CAQI;;;SAAI,SAAmB,cAAS,SAAhC,AAAuB,AAAc,AAAU,AAC7C;uBAAA,AAAgB,MAAK,KAArB,AACD;AACF;;AAXqD,AAYtD;;;mBACA,yEAAA,AAAI,AAAC,AAAS,AAAc,AAAS,AACnC;;AAAM,AAAI,uBAAO,IAAX,AAAiB,MAAvB,AAAM,AAAsB,iCAC7B;AACD;cACA,AAAI;iBAAc,cAAlB,AAAI,AAAgC,AAClC,AAAO,AAAM,AACb;;AAHF,AAAI;AAIW,AAAI,AAAI,AAAM,AAAiC,AACzD,AAAS,AACT,AAAM,AACL;AADK,AACI,AACT;AAFK,AAEC,uBAFD,AAGL,AAAS,AAAc;AAL3B;gDAES;AAFI,AAOV,AAAK,AACJ;mBACA;6DACA,aAVJ,AAAa,AAOL,AAGW;AAEd,AAAI,iBAAJ,AAAI,AAAe,AAAkB,AAC1C;cACA;AAAA,AAAO,iBAAP,AAAa,AACb,AAAa,AAAI,AAAI,AAAM,AAA4B,AACpD,AAAS,AACT,AAAM,AACL;AArBN,AAeC;AAKU,AAEC,AACN;AALS,AAEJ,AAGI,AAEV;AAPU,AAOL,uBACJ,AACA;AAPK,AACI,AACT;AAMA;;oBAAe,KAHX;AAPR,AAAa,WAYd;AAhDL,AAAe,AAiDX,AAAS,AAAO,AAAK,AACrB,AAAO,AACR;AAnDH","file":"/imports/plugins/included/search-mongo/server/methods/formHandler.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Job } from \"meteor/vsivsi:job-collection\";\nimport { Packages, Jobs } from \"/lib/collections\";\nimport { CorePackageConfig } from \"/lib/collections/schemas\";\nimport { Logger, Reaction } from \"/server/api\";\n\n\nfunction fieldsChanged(changedFields, fieldType = \"includes\") {\n  for (const field of changedFields) {\n    if (field.indexOf(fieldType) !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction weightsChanged(changedFields) {\n  return fieldsChanged(changedFields, \"weights\");\n}\n\nMeteor.methods({\n  \"search/updateSearchSettings\": function (modifier, _id) {\n    check(modifier, Match.Optional(CorePackageConfig));\n    check(_id, String);\n    const currentSettings = Packages.findOne(_id);\n    const newSettingsArray = _.keys(modifier.$set);\n    const changedSettings = [];\n    for (const setting of newSettingsArray) {\n      const currentSetting = _.get(currentSettings, setting);\n      if (currentSetting !== modifier.$set[setting]) {\n        changedSettings.push(setting);\n      }\n    }\n    // must have core permissions\n    if (!Reaction.hasPermission(\"core\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    let rebuildJob;\n    if (fieldsChanged(changedSettings)) {\n      Logger.debug(\"Fields have changed, we need to rebuild the ProductSearch Collection\");\n      // fields have changed, we need to rebuild entire Product Search Collection\n      rebuildJob = new Job(Jobs, \"product/buildSearchCollection\", {})\n        .priority(\"normal\")\n        .retry({\n          retries: 5,\n          wait: 60000,\n          backoff: \"exponential\" // delay by twice as long for each subsequent retry\n        })\n        .save({\n          // Cancel any jobs of the same type,\n          // but only if this job repeats forever.\n          cancelRepeats: true\n        });\n    } else if (weightsChanged(changedSettings)) {\n      // only weights have changed, we only need to build the index\n      Logger.debug(\"Weights have changed, we need to rebuild the ProductSearch index\");\n      rebuildJob = new Job(Jobs, \"product/buildSearchIndex\", {})\n        .priority(\"normal\")\n        .retry({\n          retries: 5,\n          wait: 60000,\n          backoff: \"exponential\"\n        })\n        .save({\n          // Cancel any jobs of the same type,\n          // but only if this job repeats forever.\n          cancelRepeats: true\n        });\n    }\n    Packages.update(_id, modifier);\n    return rebuildJob;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/search-mongo/server/methods/formHandler.js.map","sourceFileName":"/imports/plugins/included/search-mongo/server/methods/formHandler.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"formHandler"},"ignored":false,"code":"var _get = void 0;\n\nmodule.importSync(\"lodash/get\", {\n  \"default\": function (v) {\n    _get = v;\n  }\n}, 0);\n\nvar _keys = void 0;\n\nmodule.importSync(\"lodash/keys\", {\n  \"default\": function (v) {\n    _keys = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 3);\nvar Job = void 0;\nmodule.importSync(\"meteor/vsivsi:job-collection\", {\n  Job: function (v) {\n    Job = v;\n  }\n}, 4);\nvar Packages = void 0,\n    Jobs = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  },\n  Jobs: function (v) {\n    Jobs = v;\n  }\n}, 5);\nvar CorePackageConfig = void 0;\nmodule.importSync(\"/lib/collections/schemas\", {\n  CorePackageConfig: function (v) {\n    CorePackageConfig = v;\n  }\n}, 6);\nvar Logger = void 0,\n    Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 7);\n\nfunction fieldsChanged(changedFields) {\n  var fieldType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"includes\";\n\n  for (var _iterator = changedFields, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var field = _ref;\n\n    if (field.indexOf(fieldType) !== -1) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction weightsChanged(changedFields) {\n  return fieldsChanged(changedFields, \"weights\");\n}\n\nMeteor.methods({\n  \"search/updateSearchSettings\": function (modifier, _id) {\n    check(modifier, Match.Optional(CorePackageConfig));\n    check(_id, String);\n    var currentSettings = Packages.findOne(_id);\n\n    var newSettingsArray = _keys(modifier.$set);\n\n    var changedSettings = [];\n\n    for (var _iterator2 = newSettingsArray, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var setting = _ref2;\n\n      var currentSetting = _get(currentSettings, setting);\n\n      if (currentSetting !== modifier.$set[setting]) {\n        changedSettings.push(setting);\n      }\n    } // must have core permissions\n\n\n    if (!Reaction.hasPermission(\"core\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    var rebuildJob = void 0;\n\n    if (fieldsChanged(changedSettings)) {\n      Logger.debug(\"Fields have changed, we need to rebuild the ProductSearch Collection\"); // fields have changed, we need to rebuild entire Product Search Collection\n\n      rebuildJob = new Job(Jobs, \"product/buildSearchCollection\", {}).priority(\"normal\").retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\" // delay by twice as long for each subsequent retry\n\n      }).save({\n        // Cancel any jobs of the same type,\n        // but only if this job repeats forever.\n        cancelRepeats: true\n      });\n    } else if (weightsChanged(changedSettings)) {\n      // only weights have changed, we only need to build the index\n      Logger.debug(\"Weights have changed, we need to rebuild the ProductSearch index\");\n      rebuildJob = new Job(Jobs, \"product/buildSearchIndex\", {}).priority(\"normal\").retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      }).save({\n        // Cancel any jobs of the same type,\n        // but only if this job repeats forever.\n        cancelRepeats: true\n      });\n    }\n\n    Packages.update(_id, modifier);\n    return rebuildJob;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/search-mongo/server/methods/formHandler.js"],"names":["Meteor","check","Match","Job","Packages","Jobs","CorePackageConfig","Logger","Reaction","fieldsChanged","changedFields","fieldType","field","indexOf","weightsChanged","methods","modifier","_id","Optional","String","currentSettings","findOne","newSettingsArray","$set","changedSettings","setting","currentSetting","push","hasPermission","Error","rebuildJob","debug","priority","retry","retries","wait","backoff","save","cancelRepeats","update"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAc,AACvB,AAAS,AAAO,AAAa,AAC7B,AAAS,AAAW,AACpB,AAAS,AAAU,AAAY,AAC/B,AAAS,AAAyB,AAClC,AAAS,AAAQ,AAAgB;;AAGjC,SAAA,AAAS,cAAT,AAAuB;AAAuC,AAC5D,MADoC,gFAAtC,AAAkD;;AAC3C,uBAAL,AAAoB;AAAe,AACjC;;;;;;;;;;;QADF,AAAW;;QACL,MAAA,AAAM,QAAN,AAAc,eAAe,CAAjC,AAAkC,GAAG,AACnC;aAAA,AAAO,AACR;AACF;;;SACD;AAAA,AAAO,AACR;;uCAED;SAAS,cAAT,AAAwB,eAAe,AACrC;AAAA,AAAO,AAAc,AAAe,AACrC;;;AAED,AAAO,AAAQ;0BACkB,SAAA,AAAU,AAAU,AAAK,AACtD;UAAM,KAAN,AAAgB,AAAM,AAAS,AAC/B;QAAA,AAAM,AAAK,mCACX;;QAAM,AAAkB,yBAAA,AAAS,SAAjC,AAAwB,AAAiB;;0BACzC;;AAAM,0BAAmB,AAAO;AAAhC,AAAyB,AAAgB;;;;;;;;;;;;;iDACzC;;UAAM,AAAkB,mBAAxB;6BACA;AAAA,AAAK,AAAM,AAAW,AAAkB,AACtC;AAAA,AAAM,AAAiB,AAAM,AAAiB,KAPlD,CAQI;;;SAAI,SAAmB,cAAS,SAAhC,AAAuB,AAAc,AAAU,AAC7C;uBAAA,AAAgB,MAAK,KAArB,AACD;AACF;;AAXqD,AAYtD;;;mBACA,yEAAA,AAAI,AAAC,AAAS,AAAc,AAAS,AACnC;;AAAM,AAAI,uBAAO,IAAX,AAAiB,MAAvB,AAAM,AAAsB,iCAC7B;AACD;cACA,AAAI;iBAAc,cAAlB,AAAI,AAAgC,AAClC,AAAO,AAAM,AACb;;AAHF,AAAI;AAIW,AAAI,AAAI,AAAM,AAAiC,AACzD,AAAS,AACT,AAAM,AACL;AADK,AACI,AACT;AAFK,AAEC,uBAFD,AAGL,AAAS,AAAc;AAL3B;gDAES;AAFI,AAOV,AAAK,AACJ;mBACA;6DACA,aAVJ,AAAa,AAOL,AAGW;AAEd,AAAI,iBAAJ,AAAI,AAAe,AAAkB,AAC1C;cACA;AAAA,AAAO,iBAAP,AAAa,AACb,AAAa,AAAI,AAAI,AAAM,AAA4B,AACpD,AAAS,AACT,AAAM,AACL;AArBN,AAeC;AAKU,AAEC,AACN;AALS,AAEJ,AAGI,AAEV;AAPU,AAOL,uBACJ,AACA;AAPK,AACI,AACT;AAMA;;oBAAe,KAHX;AAPR,AAAa,WAYd;AAhDL,AAAe,AAiDX,AAAS,AAAO,AAAK,AACrB,AAAO,AACR;AAnDH","file":"/imports/plugins/included/search-mongo/server/methods/formHandler.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Job } from \"meteor/vsivsi:job-collection\";\nimport { Packages, Jobs } from \"/lib/collections\";\nimport { CorePackageConfig } from \"/lib/collections/schemas\";\nimport { Logger, Reaction } from \"/server/api\";\n\n\nfunction fieldsChanged(changedFields, fieldType = \"includes\") {\n  for (const field of changedFields) {\n    if (field.indexOf(fieldType) !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction weightsChanged(changedFields) {\n  return fieldsChanged(changedFields, \"weights\");\n}\n\nMeteor.methods({\n  \"search/updateSearchSettings\": function (modifier, _id) {\n    check(modifier, Match.Optional(CorePackageConfig));\n    check(_id, String);\n    const currentSettings = Packages.findOne(_id);\n    const newSettingsArray = _.keys(modifier.$set);\n    const changedSettings = [];\n    for (const setting of newSettingsArray) {\n      const currentSetting = _.get(currentSettings, setting);\n      if (currentSetting !== modifier.$set[setting]) {\n        changedSettings.push(setting);\n      }\n    }\n    // must have core permissions\n    if (!Reaction.hasPermission(\"core\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    let rebuildJob;\n    if (fieldsChanged(changedSettings)) {\n      Logger.debug(\"Fields have changed, we need to rebuild the ProductSearch Collection\");\n      // fields have changed, we need to rebuild entire Product Search Collection\n      rebuildJob = new Job(Jobs, \"product/buildSearchCollection\", {})\n        .priority(\"normal\")\n        .retry({\n          retries: 5,\n          wait: 60000,\n          backoff: \"exponential\" // delay by twice as long for each subsequent retry\n        })\n        .save({\n          // Cancel any jobs of the same type,\n          // but only if this job repeats forever.\n          cancelRepeats: true\n        });\n    } else if (weightsChanged(changedSettings)) {\n      // only weights have changed, we only need to build the index\n      Logger.debug(\"Weights have changed, we need to rebuild the ProductSearch index\");\n      rebuildJob = new Job(Jobs, \"product/buildSearchIndex\", {})\n        .priority(\"normal\")\n        .retry({\n          retries: 5,\n          wait: 60000,\n          backoff: \"exponential\"\n        })\n        .save({\n          // Cancel any jobs of the same type,\n          // but only if this job repeats forever.\n          cancelRepeats: true\n        });\n    }\n    Packages.update(_id, modifier);\n    return rebuildJob;\n  }\n});\n"]},"hash":"bf17225e6b77f0db77de033f51be5e4c1df37017"}
