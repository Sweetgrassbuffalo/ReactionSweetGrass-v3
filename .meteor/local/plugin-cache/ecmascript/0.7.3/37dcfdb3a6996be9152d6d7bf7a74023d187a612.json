{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"/lib/collections","imported":["Shipping"],"specifiers":[{"kind":"named","imported":"Shipping","local":"Shipping"}]},{"source":"/lib/collections/schemas","imported":["ShippingMethod"],"specifiers":[{"kind":"named","imported":"ShippingMethod","local":"ShippingMethod"}]},{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"../lib/roles","imported":["shippingRoles"],"specifiers":[{"kind":"named","imported":"shippingRoles","local":"shippingRoles"}]}],"exports":{"exported":["methods"],"specifiers":[{"kind":"local","local":"methods","exported":"methods"}]}}},"options":{"filename":"/imports/plugins/included/shipping-rates/server/methods/rates.js","filenameRelative":"/imports/plugins/included/shipping-rates/server/methods/rates.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/shipping-rates/server/methods/rates.js"],"names":["Meteor","check","Shipping","ShippingMethod","Reaction","shippingRoles","methods","rate","_id","Match","Optional","String","name","label","group","cost","Number","handling","enabled","Boolean","hasPermission","Error","providerId","find","count","defaultProvider","insert","provider","Random","id","update","$addToSet","method","methodId","$set","rateId","$pull"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAgB,AACzB,AAAS,AAAsB,AAC/B,AAAS,AAAgB,AACzB,AAAS,AAAqB,AAE9B,AAAO,AAAM,AAAU,AACrB;;AAOA,AAAsB,AAAU,AAAM,AACpC,AAAM,AAAM,AACV;;;;;;KAAK,AAAM,sBADD,AACL,AAAe;UACd;WACC,MAHG,SAIV;YAJU,AAIH,AACP;AAAM,aALI,AAKJ,AAAM,AAAS,AACrB;aANU,AAMA,AAAM,AAAS,AACzB;YAAM,MAPI,SAQV;AAAS,+BARX,AAAY;;eAUZ,AAAI,AAAC,AAAS,AAAc,AAAgB,AAC1C;AAXU,AAGV;;SAQM,AAAI,SAAJ,AAAW,AAAM,cAAjB,AAAsB,gBAZM,AAYlC,AAAM,AACP;AACD,kCACA;AACA,KAbE;;AAcF;;;QAAA,AAAI;;kBACJ;AAAA,AAAI,AAAK,AAAK,wBACZ;WADF,AACE,AAAa,AAAK,AACnB;AAAM,AACL;sCACA;AAAI,AAAC,YAAA,AAAS,AAAK,AAAI;AACf,gBAAkB,AAAS,AAAO,AACtC;AAAM;kBACI,AACR;AAAM,mBAH8B,AAE5B,AAER,AAAO;AAJ6B,AAEtC;AAFF,SADF,AAAK,AAA2B;AAC9B,AAAwB,qBAOxB;aARF,AAQE,AAAa,AACd;AAAM,kDACL;AAAA,AAAM,AAAI,AAAO,AAAM,AAAmB,AAC3C;AACF;;sBAED;AAAK,oBAAL,AAAW,AAAO;WACX,AAAS,AAAO,AACrB;AADF,KADA,AAAW;AAGR;iBAAA,AACU,AACT,AAAS;AADX;AAHK,AAAgB,AAChB;AA9CY,AA6CnB,AAAO,AAOR,AAED;AAMA,AAAyB,AAAU,AAAQ,AACzC;;;;;KAAA,AAAM,AAAQ,yBAAd;kBACA;;QAAI,CAAC,SAAA,AAAS,cAAd,AAAK,AAAuB,gBAAgB,AAC1C;YAAM,IAAI,OAAJ,AAAW,MAAX,AAAiB,KAAvB,AAAM,AAAsB,AAC7B;;;0BACD,AAAM,AAAW,AAAO,AAExB;oBAAO,AAAS;qBAAT,AAAgB,AACN;AADM,AACrB,KADK;;qBAAP,AAAO,AAEJ,AACK,AACS,AAGlB;AAJS,AACJ;AAFD,AACD;AAtEiB,AA4ErB;AAMA,AAAyB,AAAU,AAAQ,AACzC,AAAM,AAAQ;;;;;gDAEd;AAAI,AAAC,kBAAL,AAAK,AAAS,AAAc,AAAgB,AAC1C,AAAM,AAAI,AAAO,AAAM,AAAK,AAC7B;;;kCAED;AAAO,AAAS,AAAO,AACrB,AAAe;;AADV,AAEJ;AACM,qBACL;AADF;;;eAHF,AAAO,AAEJ,AACM,AAIV;;AAHc,AAAO;AAAP,AAAE;AA7FZ,AAAgB,AAmGvB,AAAO,AAAQ","file":"/imports/plugins/included/shipping-rates/server/methods/rates.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Shipping } from \"/lib/collections\";\nimport { ShippingMethod } from \"/lib/collections/schemas\";\nimport { Reaction } from \"/server/api\";\nimport { shippingRoles } from \"../lib/roles\";\n\nexport const methods = {\n  /**\n   * shipping/rates/add\n   * add new shipping flat rate methods\n   * @summary insert shipping method for a flat rate provider\n   * @param { Object } rate a valid ShippingMethod object\n   * @return { Number } insert result\n   */\n  \"shipping/rates/add\": function (rate) {\n    check(rate, {\n      _id: Match.Optional(String),\n      name: String,\n      label: String,\n      group: String,\n      cost: Match.Optional(Number),\n      handling: Match.Optional(Number),\n      rate: Number,\n      enabled: Boolean\n    });\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    // a little trickery\n    // we passed in the providerId\n    // as _id, perhaps cleanup\n    let providerId;\n    if (rate._id) {\n      providerId = rate._id;\n    } else {\n      // There is no default provider, so add it\n      if (!Shipping.find({}).count()) {\n        const defaultProvider = Shipping.insert({\n          name: \"Default Shipping Provider\",\n          provider: {\n            name: \"flatRates\",\n            label: \"Flat Rate\"\n          }\n        });\n        providerId = defaultProvider;\n      } else {\n        throw new Meteor.Error(\"bad-provider-id\", \"No Provider ID provided when adding methods\");\n      }\n    }\n\n    rate._id = Random.id();\n    return Shipping.update({\n      _id: providerId\n    }, {\n      $addToSet: {\n        methods: rate\n      }\n    });\n  },\n\n  /**\n   * shipping/rates/update\n   * @summary update shipping rate methods\n   * @param { Object } method shipping method object\n   * @return { Number } update result\n   */\n  \"shipping/rates/update\": function (method) {\n    check(method, ShippingMethod);\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    const methodId = method._id;\n\n    return Shipping.update({\n      \"methods._id\": methodId\n    }, {\n      $set: {\n        \"methods.$\": method\n      }\n    });\n  },\n\n  /**\n   * shipping/rates/delete\n   * @summary delete shipping rate method\n   * @param { String } rateId id of method to delete\n   * @return { Number } update result\n   */\n  \"shipping/rates/delete\": function (rateId) {\n    check(rateId, String);\n\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    return Shipping.update({\n      \"methods._id\": rateId\n    }, {\n      $pull: {\n        methods: { _id: rateId }\n      }\n    });\n  }\n};\n\nMeteor.methods(methods);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/shipping-rates/server/methods/rates.js.map","sourceFileName":"/imports/plugins/included/shipping-rates/server/methods/rates.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"rates"},"ignored":false,"code":"module.export({\n  methods: function () {\n    return methods;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar Shipping = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shipping: function (v) {\n    Shipping = v;\n  }\n}, 2);\nvar ShippingMethod = void 0;\nmodule.importSync(\"/lib/collections/schemas\", {\n  ShippingMethod: function (v) {\n    ShippingMethod = v;\n  }\n}, 3);\nvar Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 4);\nvar shippingRoles = void 0;\nmodule.importSync(\"../lib/roles\", {\n  shippingRoles: function (v) {\n    shippingRoles = v;\n  }\n}, 5);\nvar methods = {\n  /**\n   * shipping/rates/add\n   * add new shipping flat rate methods\n   * @summary insert shipping method for a flat rate provider\n   * @param { Object } rate a valid ShippingMethod object\n   * @return { Number } insert result\n   */\"shipping/rates/add\": function (rate) {\n    check(rate, {\n      _id: Match.Optional(String),\n      name: String,\n      label: String,\n      group: String,\n      cost: Match.Optional(Number),\n      handling: Match.Optional(Number),\n      rate: Number,\n      enabled: Boolean\n    });\n\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    } // a little trickery\n    // we passed in the providerId\n    // as _id, perhaps cleanup\n\n\n    var providerId = void 0;\n\n    if (rate._id) {\n      providerId = rate._id;\n    } else {\n      // There is no default provider, so add it\n      if (!Shipping.find({}).count()) {\n        var defaultProvider = Shipping.insert({\n          name: \"Default Shipping Provider\",\n          provider: {\n            name: \"flatRates\",\n            label: \"Flat Rate\"\n          }\n        });\n        providerId = defaultProvider;\n      } else {\n        throw new Meteor.Error(\"bad-provider-id\", \"No Provider ID provided when adding methods\");\n      }\n    }\n\n    rate._id = Random.id();\n    return Shipping.update({\n      _id: providerId\n    }, {\n      $addToSet: {\n        methods: rate\n      }\n    });\n  },\n  /**\n   * shipping/rates/update\n   * @summary update shipping rate methods\n   * @param { Object } method shipping method object\n   * @return { Number } update result\n   */\"shipping/rates/update\": function (method) {\n    check(method, ShippingMethod);\n\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    var methodId = method._id;\n    return Shipping.update({\n      \"methods._id\": methodId\n    }, {\n      $set: {\n        \"methods.$\": method\n      }\n    });\n  },\n  /**\n   * shipping/rates/delete\n   * @summary delete shipping rate method\n   * @param { String } rateId id of method to delete\n   * @return { Number } update result\n   */\"shipping/rates/delete\": function (rateId) {\n    check(rateId, String);\n\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    return Shipping.update({\n      \"methods._id\": rateId\n    }, {\n      $pull: {\n        methods: {\n          _id: rateId\n        }\n      }\n    });\n  }\n};\nMeteor.methods(methods);","map":{"version":3,"sources":["/imports/plugins/included/shipping-rates/server/methods/rates.js"],"names":["Meteor","check","Shipping","ShippingMethod","Reaction","shippingRoles","methods","rate","_id","Match","Optional","String","name","label","group","cost","Number","handling","enabled","Boolean","hasPermission","Error","providerId","find","count","defaultProvider","insert","provider","Random","id","update","$addToSet","method","methodId","$set","rateId","$pull"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAgB,AACzB,AAAS,AAAsB,AAC/B,AAAS,AAAgB,AACzB,AAAS,AAAqB,AAE9B,AAAO,AAAM,AAAU,AACrB;;AAOA,AAAsB,AAAU,AAAM,AACpC,AAAM,AAAM,AACV;;;;;;KAAK,AAAM,sBADD,AACL,AAAe;UACd;WACC,MAHG,SAIV;YAJU,AAIH,AACP;AAAM,aALI,AAKJ,AAAM,AAAS,AACrB;aANU,AAMA,AAAM,AAAS,AACzB;YAAM,MAPI,SAQV;AAAS,+BARX,AAAY;;eAUZ,AAAI,AAAC,AAAS,AAAc,AAAgB,AAC1C;AAXU,AAGV;;SAQM,AAAI,SAAJ,AAAW,AAAM,cAAjB,AAAsB,gBAZM,AAYlC,AAAM,AACP;AACD,kCACA;AACA,KAbE;;AAcF;;;QAAA,AAAI;;kBACJ;AAAA,AAAI,AAAK,AAAK,wBACZ;WADF,AACE,AAAa,AAAK,AACnB;AAAM,AACL;sCACA;AAAI,AAAC,YAAA,AAAS,AAAK,AAAI;AACf,gBAAkB,AAAS,AAAO,AACtC;AAAM;kBACI,AACR;AAAM,mBAH8B,AAE5B,AAER,AAAO;AAJ6B,AAEtC;AAFF,SADF,AAAK,AAA2B;AAC9B,AAAwB,qBAOxB;aARF,AAQE,AAAa,AACd;AAAM,kDACL;AAAA,AAAM,AAAI,AAAO,AAAM,AAAmB,AAC3C;AACF;;sBAED;AAAK,oBAAL,AAAW,AAAO;WACX,AAAS,AAAO,AACrB;AADF,KADA,AAAW;AAGR;iBAAA,AACU,AACT,AAAS;AADX;AAHK,AAAgB,AAChB;AA9CY,AA6CnB,AAAO,AAOR,AAED;AAMA,AAAyB,AAAU,AAAQ,AACzC;;;;;KAAA,AAAM,AAAQ,yBAAd;kBACA;;QAAI,CAAC,SAAA,AAAS,cAAd,AAAK,AAAuB,gBAAgB,AAC1C;YAAM,IAAI,OAAJ,AAAW,MAAX,AAAiB,KAAvB,AAAM,AAAsB,AAC7B;;;0BACD,AAAM,AAAW,AAAO,AAExB;oBAAO,AAAS;qBAAT,AAAgB,AACN;AADM,AACrB,KADK;;qBAAP,AAAO,AAEJ,AACK,AACS,AAGlB;AAJS,AACJ;AAFD,AACD;AAtEiB,AA4ErB;AAMA,AAAyB,AAAU,AAAQ,AACzC,AAAM,AAAQ;;;;;gDAEd;AAAI,AAAC,kBAAL,AAAK,AAAS,AAAc,AAAgB,AAC1C,AAAM,AAAI,AAAO,AAAM,AAAK,AAC7B;;;kCAED;AAAO,AAAS,AAAO,AACrB,AAAe;;AADV,AAEJ;AACM,qBACL;AADF;;;eAHF,AAAO,AAEJ,AACM,AAIV;;AAHc,AAAO;AAAP,AAAE;AA7FZ,AAAgB,AAmGvB,AAAO,AAAQ","file":"/imports/plugins/included/shipping-rates/server/methods/rates.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Shipping } from \"/lib/collections\";\nimport { ShippingMethod } from \"/lib/collections/schemas\";\nimport { Reaction } from \"/server/api\";\nimport { shippingRoles } from \"../lib/roles\";\n\nexport const methods = {\n  /**\n   * shipping/rates/add\n   * add new shipping flat rate methods\n   * @summary insert shipping method for a flat rate provider\n   * @param { Object } rate a valid ShippingMethod object\n   * @return { Number } insert result\n   */\n  \"shipping/rates/add\": function (rate) {\n    check(rate, {\n      _id: Match.Optional(String),\n      name: String,\n      label: String,\n      group: String,\n      cost: Match.Optional(Number),\n      handling: Match.Optional(Number),\n      rate: Number,\n      enabled: Boolean\n    });\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    // a little trickery\n    // we passed in the providerId\n    // as _id, perhaps cleanup\n    let providerId;\n    if (rate._id) {\n      providerId = rate._id;\n    } else {\n      // There is no default provider, so add it\n      if (!Shipping.find({}).count()) {\n        const defaultProvider = Shipping.insert({\n          name: \"Default Shipping Provider\",\n          provider: {\n            name: \"flatRates\",\n            label: \"Flat Rate\"\n          }\n        });\n        providerId = defaultProvider;\n      } else {\n        throw new Meteor.Error(\"bad-provider-id\", \"No Provider ID provided when adding methods\");\n      }\n    }\n\n    rate._id = Random.id();\n    return Shipping.update({\n      _id: providerId\n    }, {\n      $addToSet: {\n        methods: rate\n      }\n    });\n  },\n\n  /**\n   * shipping/rates/update\n   * @summary update shipping rate methods\n   * @param { Object } method shipping method object\n   * @return { Number } update result\n   */\n  \"shipping/rates/update\": function (method) {\n    check(method, ShippingMethod);\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    const methodId = method._id;\n\n    return Shipping.update({\n      \"methods._id\": methodId\n    }, {\n      $set: {\n        \"methods.$\": method\n      }\n    });\n  },\n\n  /**\n   * shipping/rates/delete\n   * @summary delete shipping rate method\n   * @param { String } rateId id of method to delete\n   * @return { Number } update result\n   */\n  \"shipping/rates/delete\": function (rateId) {\n    check(rateId, String);\n\n    if (!Reaction.hasPermission(shippingRoles)) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    return Shipping.update({\n      \"methods._id\": rateId\n    }, {\n      $pull: {\n        methods: { _id: rateId }\n      }\n    });\n  }\n};\n\nMeteor.methods(methods);\n"]},"hash":"37dcfdb3a6996be9152d6d7bf7a74023d187a612"}
