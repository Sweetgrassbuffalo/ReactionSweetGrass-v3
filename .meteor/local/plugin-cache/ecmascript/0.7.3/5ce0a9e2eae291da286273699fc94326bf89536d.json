{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/ddp","imported":["DDP"],"specifiers":[{"kind":"named","imported":"DDP","local":"DDP"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/launchdock-connect/lib/launchdock.js","filenameRelative":"/imports/plugins/included/launchdock-connect/lib/launchdock.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/launchdock-connect/lib/launchdock.js"],"names":["Meteor","DDP","Launchdock","connect","url","username","pw","isClient","user","services","launchdock","auth","isServer","process","env","LAUNCHDOCK_URL","LAUNCHDOCK_USERNAME","LAUNCHDOCK_AUTH","loginWithPassword"],"mappings":"AAAA;OAAuB;;;;;;;;;;GACvB,AAAS,AAAW,AAEpB,AAAM,AAAa;AACjB;AAGA,AAAU,AACR,AAAI,AACJ;;IAAI;QAFI,AAGR,AAAI,AAEJ;;QAGA,aAAA,AAAI,AAAO,AAAU,AACnB,AAAM,AAAO,AAAO,AAEpB;;;;QAAI,AAAC,OAAD,AAAS,AAAC,UAAd,AAAI,AAAe,AAAY,AAAC,AAAK,AAAS,AAAY,AACxD;UAAO,OAAP,OACD;;gEAED;AAAM,eAAN,AAAM,AAAK,AAAS,AAAW,AAC/B;AAhBM,AAgBN,AAAW,AAAK,AAAS,AAAW,AACpC,AAAK,AAAK,AAAS,AAAW,AAC/B;;AAED;;;AAGA,AAAI,AAAO,AAAU,AACnB,KAtBF,AACA,CAqBE,AAAM,AAAQ,AAAI,AAClB,AAAW,AAAQ,AAAI,AACvB,AAAK,AAAQ,AAAI,AAClB;;;;;wBAED;AAAI,AAAC,AAAO,iBAAC,QAAT,IAAJ,AAAyB,AAAC,AAAI,AAC5B;WAAA,AAAO,YACR;AA/BO,AAiCR;;kCACA;AAAM,aAAN,AAAmB,AAAI,AAAQ,AAC/B;AAAA,AAAI,AAAkB,AAAY,AAAE,AAAU,MAA9C,AAA0D,AAE1D;;;QAAA,AAAO,yBACR;;;OA1CH,AAAmB;WA6CnB;AAAA,AAAe;;OAhDN,OAAT,mBAAA","file":"/imports/plugins/included/launchdock-connect/lib/launchdock.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { DDP } from \"meteor/ddp\";\n\nconst Launchdock = {\n  /*\n  * Create authenticated DDP connection to Launchdock\n  */\n  connect() {\n    let url;\n    let username;\n    let pw;\n\n    /*\n    * client login info\n    */\n    if (Meteor.isClient) {\n      const user = Meteor.user();\n\n      if (!user || !user.services || !user.services.launchdock) {\n        return null;\n      }\n\n      url = user.services.launchdock.url;\n      username = user.services.launchdock.username;\n      pw = user.services.launchdock.auth;\n    }\n\n    /*\n    * server login info\n    */\n    if (Meteor.isServer) {\n      url = process.env.LAUNCHDOCK_URL;\n      username = process.env.LAUNCHDOCK_USERNAME;\n      pw = process.env.LAUNCHDOCK_AUTH;\n    }\n\n    if (!url || !username || !pw) {\n      return null;\n    }\n\n    // create and return connection\n    const launchdock = DDP.connect(url);\n    DDP.loginWithPassword(launchdock, { username: username }, pw);\n\n    return launchdock;\n  }\n};\n\nexport default Launchdock;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/launchdock-connect/lib/launchdock.js.map","sourceFileName":"/imports/plugins/included/launchdock-connect/lib/launchdock.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"launchdock"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar DDP = void 0;\nmodule.importSync(\"meteor/ddp\", {\n  DDP: function (v) {\n    DDP = v;\n  }\n}, 1);\nvar Launchdock = {\n  /*\n  * Create authenticated DDP connection to Launchdock\n  */connect: function () {\n    var url = void 0;\n    var username = void 0;\n    var pw = void 0; /*\n                     * client login info\n                     */\n\n    if (Meteor.isClient) {\n      var user = Meteor.user();\n\n      if (!user || !user.services || !user.services.launchdock) {\n        return null;\n      }\n\n      url = user.services.launchdock.url;\n      username = user.services.launchdock.username;\n      pw = user.services.launchdock.auth;\n    } /*\n      * server login info\n      */\n\n    if (Meteor.isServer) {\n      url = process.env.LAUNCHDOCK_URL;\n      username = process.env.LAUNCHDOCK_USERNAME;\n      pw = process.env.LAUNCHDOCK_AUTH;\n    }\n\n    if (!url || !username || !pw) {\n      return null;\n    } // create and return connection\n\n\n    var launchdock = DDP.connect(url);\n    DDP.loginWithPassword(launchdock, {\n      username: username\n    }, pw);\n    return launchdock;\n  }\n};\nmodule.export(\"default\", exports.default = Launchdock);","map":{"version":3,"sources":["/imports/plugins/included/launchdock-connect/lib/launchdock.js"],"names":["Meteor","DDP","Launchdock","connect","url","username","pw","isClient","user","services","launchdock","auth","isServer","process","env","LAUNCHDOCK_URL","LAUNCHDOCK_USERNAME","LAUNCHDOCK_AUTH","loginWithPassword"],"mappings":"AAAA;OAAuB;;;;;;;;;;GACvB,AAAS,AAAW,AAEpB,AAAM,AAAa;AACjB;AAGA,AAAU,AACR,AAAI,AACJ;;IAAI;QAFI,AAGR,AAAI,AAEJ;;QAGA,aAAA,AAAI,AAAO,AAAU,AACnB,AAAM,AAAO,AAAO,AAEpB;;;;QAAI,AAAC,OAAD,AAAS,AAAC,UAAd,AAAI,AAAe,AAAY,AAAC,AAAK,AAAS,AAAY,AACxD;UAAO,OAAP,OACD;;gEAED;AAAM,eAAN,AAAM,AAAK,AAAS,AAAW,AAC/B;AAhBM,AAgBN,AAAW,AAAK,AAAS,AAAW,AACpC,AAAK,AAAK,AAAS,AAAW,AAC/B;;AAED;;;AAGA,AAAI,AAAO,AAAU,AACnB,KAtBF,AACA,CAqBE,AAAM,AAAQ,AAAI,AAClB,AAAW,AAAQ,AAAI,AACvB,AAAK,AAAQ,AAAI,AAClB;;;;;wBAED;AAAI,AAAC,AAAO,iBAAC,QAAT,IAAJ,AAAyB,AAAC,AAAI,AAC5B;WAAA,AAAO,YACR;AA/BO,AAiCR;;kCACA;AAAM,aAAN,AAAmB,AAAI,AAAQ,AAC/B;AAAA,AAAI,AAAkB,AAAY,AAAE,AAAU,MAA9C,AAA0D,AAE1D;;;QAAA,AAAO,yBACR;;;OA1CH,AAAmB;WA6CnB;AAAA,AAAe;;OAhDN,OAAT,mBAAA","file":"/imports/plugins/included/launchdock-connect/lib/launchdock.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { DDP } from \"meteor/ddp\";\n\nconst Launchdock = {\n  /*\n  * Create authenticated DDP connection to Launchdock\n  */\n  connect() {\n    let url;\n    let username;\n    let pw;\n\n    /*\n    * client login info\n    */\n    if (Meteor.isClient) {\n      const user = Meteor.user();\n\n      if (!user || !user.services || !user.services.launchdock) {\n        return null;\n      }\n\n      url = user.services.launchdock.url;\n      username = user.services.launchdock.username;\n      pw = user.services.launchdock.auth;\n    }\n\n    /*\n    * server login info\n    */\n    if (Meteor.isServer) {\n      url = process.env.LAUNCHDOCK_URL;\n      username = process.env.LAUNCHDOCK_USERNAME;\n      pw = process.env.LAUNCHDOCK_AUTH;\n    }\n\n    if (!url || !username || !pw) {\n      return null;\n    }\n\n    // create and return connection\n    const launchdock = DDP.connect(url);\n    DDP.loginWithPassword(launchdock, { username: username }, pw);\n\n    return launchdock;\n  }\n};\n\nexport default Launchdock;\n"]},"hash":"5ce0a9e2eae291da286273699fc94326bf89536d"}
