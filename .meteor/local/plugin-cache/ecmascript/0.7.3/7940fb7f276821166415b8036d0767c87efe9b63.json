{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Children","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Children","local":"Children"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["EditButton","VisibilityButton","Translation"],"specifiers":[{"kind":"named","imported":"EditButton","local":"EditButton"},{"kind":"named","imported":"VisibilityButton","local":"VisibilityButton"},{"kind":"named","imported":"Translation","local":"Translation"}]},{"source":"/lib/api/compose","imported":["composeWithTracker"],"specifiers":[{"kind":"named","imported":"composeWithTracker","local":"composeWithTracker"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui/client/containers/editContainer.js","filenameRelative":"/imports/plugins/core/ui/client/containers/editContainer.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/containers/editContainer.js"],"names":["React","Children","Component","PropTypes","Reaction","EditButton","VisibilityButton","Translation","composeWithTracker","styles","editContainerItem","display","marginLeft","EditContainer","handleEditButtonClick","event","props","onEditButtonClick","returnValue","showActionView","label","i18nKeyLabel","template","editView","data","viewProps","field","state","set","handleVisibilityButtonClick","onVisibilityButtonClick","renderVisibilityButton","showsVisibilityButton","isVisible","renderEditButton","status","tooltip","hasChange","__draft","draft","Array","isArray","diff","hasChangedField","indexOf","path","autoHideEditButton","render","hasPermission","children","cloneElement","visibilityButton","editButton","only","propTypes","bool","node","object","oneOfType","string","array","func","composer","onData","viewAs","getUserPreferences","disabled","permissions"],"mappings":"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","file":"/imports/plugins/core/ui/client/containers/editContainer.js.map","sourcesContent":["import React, { Children, Component, PropTypes } from \"react\";\nimport { Reaction } from \"/client/api\";\nimport { EditButton, VisibilityButton, Translation } from \"/imports/plugins/core/ui/client/components\";\nimport { composeWithTracker } from \"/lib/api/compose\";\n\nconst styles = {\n  editContainerItem: {\n    display: \"flex\",\n    marginLeft: 5\n  }\n};\n\nclass EditContainer extends Component {\n\n  handleEditButtonClick = (event) => {\n    const props = this.props;\n\n    if (this.props.onEditButtonClick) {\n      const returnValue = this.props.onEditButtonClick(event, props);\n\n      if (returnValue === false) {\n        return returnValue;\n      }\n    }\n\n    Reaction.showActionView({\n      label: props.label,\n      i18nKeyLabel: props.i18nKeyLabel,\n      template: props.editView,\n      data: {\n        data: props.data,\n        viewProps: {\n          field: props.field\n        }\n      }\n    });\n\n    Reaction.state.set(\"edit/focus\", props.field);\n\n    return true;\n  }\n\n  handleVisibilityButtonClick = (event) => {\n    const props = this.props;\n\n    if (this.props.onVisibilityButtonClick) {\n      const returnValue = this.props.onVisibilityButtonClick(event, props);\n\n      if (returnValue === false) {\n        return returnValue;\n      }\n    }\n\n    return true;\n  }\n\n  renderVisibilityButton() {\n    if (this.props.showsVisibilityButton) {\n      return (\n        <span className=\"edit-container-item\" style={styles.editContainerItem}>\n          <VisibilityButton\n            onClick={this.handleVisibilityButtonClick}\n            toggleOn={this.props.data.isVisible}\n          />\n        </span>\n      );\n    }\n\n    return null;\n  }\n\n  renderEditButton() {\n    let status;\n    let tooltip;\n    let hasChange = false;\n\n    if (this.props.data.__draft && this.props.field) {\n      const draft = this.props.data.__draft;\n\n      if (Array.isArray(draft.diff)) {\n        for (const diff of draft.diff) {\n          let hasChangedField = false;\n\n          if (Array.isArray(this.props.field)) {\n            if (this.props.field.indexOf(diff.path[0]) >= 0) {\n              hasChangedField = true;\n            }\n          } else if (typeof this.props.field === \"string\" && this.props.field === diff.path[0]) {\n            hasChangedField = true;\n          }\n\n          if (hasChangedField) {\n            status = \"warning\";\n\n            tooltip = (\n              <span>\n                <Translation defaultValue=\"Unpublished Changes\" i18nKey=\"revisions.unpublishedChanges\" />\n              </span>\n            );\n\n            hasChange = true;\n          }\n        }\n      }\n    } else if (this.props.data.__draft) {\n      status = \"warning\";\n\n      tooltip = (\n        <span>\n          <Translation defaultValue=\"Unpublished Changes\" i18nKey=\"revisions.unpublishedChanges\" />\n        </span>\n      );\n    }\n\n    if (this.props.autoHideEditButton && hasChange === false) {\n      return null;\n    }\n\n    return (\n      <span className=\"edit-container-item\" style={styles.editContainerItem}>\n        <EditButton\n          onClick={this.handleEditButtonClick}\n          status={status}\n          tooltip={tooltip}\n        />\n      </span>\n    );\n  }\n\n  render() {\n    // Display edit button if the permissions allow it.\n    if (this.props.hasPermission) {\n      // If children were passed as props to this component,\n      // copy the children and inject the edit buttons\n      if (this.props.children) {\n        return React.cloneElement(this.props.children, {\n          visibilityButton: this.renderVisibilityButton(),\n          editButton: this.renderEditButton()\n        });\n      }\n\n      // Otherwise, render a container for the edit buttons\n      return (\n        <span className=\"rui edit-container\">\n          {this.renderVisibilityButton()}\n          {this.renderEditButton()}\n        </span>\n      );\n    }\n\n    // If permissions don't allow the edit buttons to be shown and there are\n    // no child elements, then cancel rendering.\n    if (!this.props.children) {\n      return null;\n    }\n\n    // If permissions don't allow the edit buttons to be shown and there are\n    // child elements, render them normally\n    return (\n      Children.only(this.props.children)\n    );\n  }\n}\n\nEditContainer.propTypes = {\n  autoHideEditButton: PropTypes.bool,\n  children: PropTypes.node,\n  data: PropTypes.object,\n  field: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  hasPermission: PropTypes.bool,\n  onEditButtonClick: PropTypes.func,\n  onVisibilityButtonClick: PropTypes.func,\n  showsVisibilityButton: PropTypes.bool\n};\n\nfunction composer(props, onData) {\n  let hasPermission;\n  const viewAs = Reaction.getUserPreferences(\"reaction-dashboard\", \"viewAs\", \"administrator\");\n\n  if (props.disabled === true || viewAs === \"customer\") {\n    hasPermission = false;\n  } else {\n    hasPermission = Reaction.hasPermission(props.permissions);\n  }\n\n  onData(null, {\n    hasPermission\n  });\n}\n\nexport default composeWithTracker(composer)(EditContainer);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/containers/editContainer.js.map","sourceFileName":"/imports/plugins/core/ui/client/containers/editContainer.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"editContainer"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Children = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Children: function (v) {\n    Children = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 1);\nvar EditButton = void 0,\n    VisibilityButton = void 0,\n    Translation = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  EditButton: function (v) {\n    EditButton = v;\n  },\n  VisibilityButton: function (v) {\n    VisibilityButton = v;\n  },\n  Translation: function (v) {\n    Translation = v;\n  }\n}, 2);\nvar composeWithTracker = void 0;\nmodule.importSync(\"/lib/api/compose\", {\n  composeWithTracker: function (v) {\n    composeWithTracker = v;\n  }\n}, 3);\nvar styles = {\n  editContainerItem: {\n    display: \"flex\",\n    marginLeft: 5\n  }\n};\n\nvar EditContainer = function (_Component) {\n  (0, _inherits3.default)(EditContainer, _Component);\n\n  function EditContainer() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, EditContainer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleEditButtonClick = function (event) {\n      var props = _this.props;\n\n      if (_this.props.onEditButtonClick) {\n        var returnValue = _this.props.onEditButtonClick(event, props);\n\n        if (returnValue === false) {\n          return returnValue;\n        }\n      }\n\n      Reaction.showActionView({\n        label: props.label,\n        i18nKeyLabel: props.i18nKeyLabel,\n        template: props.editView,\n        data: {\n          data: props.data,\n          viewProps: {\n            field: props.field\n          }\n        }\n      });\n      Reaction.state.set(\"edit/focus\", props.field);\n      return true;\n    }, _this.handleVisibilityButtonClick = function (event) {\n      var props = _this.props;\n\n      if (_this.props.onVisibilityButtonClick) {\n        var returnValue = _this.props.onVisibilityButtonClick(event, props);\n\n        if (returnValue === false) {\n          return returnValue;\n        }\n      }\n\n      return true;\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  EditContainer.prototype.renderVisibilityButton = function () {\n    function renderVisibilityButton() {\n      if (this.props.showsVisibilityButton) {\n        return React.createElement(\n          \"span\",\n          {\n            className: \"edit-container-item\",\n            style: styles.editContainerItem\n          },\n          React.createElement(VisibilityButton, {\n            onClick: this.handleVisibilityButtonClick,\n            toggleOn: this.props.data.isVisible\n          })\n        );\n      }\n\n      return null;\n    }\n\n    return renderVisibilityButton;\n  }();\n\n  EditContainer.prototype.renderEditButton = function () {\n    function renderEditButton() {\n      var status = void 0;\n      var tooltip = void 0;\n      var hasChange = false;\n\n      if (this.props.data.__draft && this.props.field) {\n        var draft = this.props.data.__draft;\n\n        if (Array.isArray(draft.diff)) {\n          for (var _iterator = draft.diff, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref;\n\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref = _i.value;\n            }\n\n            var diff = _ref;\n            var hasChangedField = false;\n\n            if (Array.isArray(this.props.field)) {\n              if (this.props.field.indexOf(diff.path[0]) >= 0) {\n                hasChangedField = true;\n              }\n            } else if (typeof this.props.field === \"string\" && this.props.field === diff.path[0]) {\n              hasChangedField = true;\n            }\n\n            if (hasChangedField) {\n              status = \"warning\";\n              tooltip = React.createElement(\n                \"span\",\n                null,\n                React.createElement(Translation, {\n                  defaultValue: \"Unpublished Changes\",\n                  i18nKey: \"revisions.unpublishedChanges\"\n                })\n              );\n              hasChange = true;\n            }\n          }\n        }\n      } else if (this.props.data.__draft) {\n        status = \"warning\";\n        tooltip = React.createElement(\n          \"span\",\n          null,\n          React.createElement(Translation, {\n            defaultValue: \"Unpublished Changes\",\n            i18nKey: \"revisions.unpublishedChanges\"\n          })\n        );\n      }\n\n      if (this.props.autoHideEditButton && hasChange === false) {\n        return null;\n      }\n\n      return React.createElement(\n        \"span\",\n        {\n          className: \"edit-container-item\",\n          style: styles.editContainerItem\n        },\n        React.createElement(EditButton, {\n          onClick: this.handleEditButtonClick,\n          status: status,\n          tooltip: tooltip\n        })\n      );\n    }\n\n    return renderEditButton;\n  }();\n\n  EditContainer.prototype.render = function () {\n    function render() {\n      // Display edit button if the permissions allow it.\n      if (this.props.hasPermission) {\n        // If children were passed as props to this component,\n        // copy the children and inject the edit buttons\n        if (this.props.children) {\n          return React.cloneElement(this.props.children, {\n            visibilityButton: this.renderVisibilityButton(),\n            editButton: this.renderEditButton()\n          });\n        } // Otherwise, render a container for the edit buttons\n\n\n        return React.createElement(\n          \"span\",\n          {\n            className: \"rui edit-container\"\n          },\n          this.renderVisibilityButton(),\n          this.renderEditButton()\n        );\n      } // If permissions don't allow the edit buttons to be shown and there are\n      // no child elements, then cancel rendering.\n\n\n      if (!this.props.children) {\n        return null;\n      } // If permissions don't allow the edit buttons to be shown and there are\n      // child elements, render them normally\n\n\n      return Children.only(this.props.children);\n    }\n\n    return render;\n  }();\n\n  return EditContainer;\n}(Component);\n\nEditContainer.propTypes = {\n  autoHideEditButton: PropTypes.bool,\n  children: PropTypes.node,\n  data: PropTypes.object,\n  field: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  hasPermission: PropTypes.bool,\n  onEditButtonClick: PropTypes.func,\n  onVisibilityButtonClick: PropTypes.func,\n  showsVisibilityButton: PropTypes.bool\n};\n\nfunction composer(props, onData) {\n  var hasPermission = void 0;\n  var viewAs = Reaction.getUserPreferences(\"reaction-dashboard\", \"viewAs\", \"administrator\");\n\n  if (props.disabled === true || viewAs === \"customer\") {\n    hasPermission = false;\n  } else {\n    hasPermission = Reaction.hasPermission(props.permissions);\n  }\n\n  onData(null, {\n    hasPermission: hasPermission\n  });\n}\n\nmodule.export(\"default\", exports.default = composeWithTracker(composer)(EditContainer));","map":{"version":3,"sources":["/imports/plugins/core/ui/client/containers/editContainer.js"],"names":["React","Children","Component","PropTypes","Reaction","EditButton","VisibilityButton","Translation","composeWithTracker","styles","editContainerItem","display","marginLeft","EditContainer","handleEditButtonClick","event","props","onEditButtonClick","returnValue","showActionView","label","i18nKeyLabel","template","editView","data","viewProps","field","state","set","handleVisibilityButtonClick","onVisibilityButtonClick","renderVisibilityButton","showsVisibilityButton","isVisible","renderEditButton","status","tooltip","hasChange","__draft","draft","Array","isArray","diff","hasChangedField","indexOf","path","autoHideEditButton","render","hasPermission","children","cloneElement","visibilityButton","editButton","only","propTypes","bool","node","object","oneOfType","string","array","func","composer","onData","viewAs","getUserPreferences","disabled","permissions"],"mappings":"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","file":"/imports/plugins/core/ui/client/containers/editContainer.js.map","sourcesContent":["import React, { Children, Component, PropTypes } from \"react\";\nimport { Reaction } from \"/client/api\";\nimport { EditButton, VisibilityButton, Translation } from \"/imports/plugins/core/ui/client/components\";\nimport { composeWithTracker } from \"/lib/api/compose\";\n\nconst styles = {\n  editContainerItem: {\n    display: \"flex\",\n    marginLeft: 5\n  }\n};\n\nclass EditContainer extends Component {\n\n  handleEditButtonClick = (event) => {\n    const props = this.props;\n\n    if (this.props.onEditButtonClick) {\n      const returnValue = this.props.onEditButtonClick(event, props);\n\n      if (returnValue === false) {\n        return returnValue;\n      }\n    }\n\n    Reaction.showActionView({\n      label: props.label,\n      i18nKeyLabel: props.i18nKeyLabel,\n      template: props.editView,\n      data: {\n        data: props.data,\n        viewProps: {\n          field: props.field\n        }\n      }\n    });\n\n    Reaction.state.set(\"edit/focus\", props.field);\n\n    return true;\n  }\n\n  handleVisibilityButtonClick = (event) => {\n    const props = this.props;\n\n    if (this.props.onVisibilityButtonClick) {\n      const returnValue = this.props.onVisibilityButtonClick(event, props);\n\n      if (returnValue === false) {\n        return returnValue;\n      }\n    }\n\n    return true;\n  }\n\n  renderVisibilityButton() {\n    if (this.props.showsVisibilityButton) {\n      return (\n        <span className=\"edit-container-item\" style={styles.editContainerItem}>\n          <VisibilityButton\n            onClick={this.handleVisibilityButtonClick}\n            toggleOn={this.props.data.isVisible}\n          />\n        </span>\n      );\n    }\n\n    return null;\n  }\n\n  renderEditButton() {\n    let status;\n    let tooltip;\n    let hasChange = false;\n\n    if (this.props.data.__draft && this.props.field) {\n      const draft = this.props.data.__draft;\n\n      if (Array.isArray(draft.diff)) {\n        for (const diff of draft.diff) {\n          let hasChangedField = false;\n\n          if (Array.isArray(this.props.field)) {\n            if (this.props.field.indexOf(diff.path[0]) >= 0) {\n              hasChangedField = true;\n            }\n          } else if (typeof this.props.field === \"string\" && this.props.field === diff.path[0]) {\n            hasChangedField = true;\n          }\n\n          if (hasChangedField) {\n            status = \"warning\";\n\n            tooltip = (\n              <span>\n                <Translation defaultValue=\"Unpublished Changes\" i18nKey=\"revisions.unpublishedChanges\" />\n              </span>\n            );\n\n            hasChange = true;\n          }\n        }\n      }\n    } else if (this.props.data.__draft) {\n      status = \"warning\";\n\n      tooltip = (\n        <span>\n          <Translation defaultValue=\"Unpublished Changes\" i18nKey=\"revisions.unpublishedChanges\" />\n        </span>\n      );\n    }\n\n    if (this.props.autoHideEditButton && hasChange === false) {\n      return null;\n    }\n\n    return (\n      <span className=\"edit-container-item\" style={styles.editContainerItem}>\n        <EditButton\n          onClick={this.handleEditButtonClick}\n          status={status}\n          tooltip={tooltip}\n        />\n      </span>\n    );\n  }\n\n  render() {\n    // Display edit button if the permissions allow it.\n    if (this.props.hasPermission) {\n      // If children were passed as props to this component,\n      // copy the children and inject the edit buttons\n      if (this.props.children) {\n        return React.cloneElement(this.props.children, {\n          visibilityButton: this.renderVisibilityButton(),\n          editButton: this.renderEditButton()\n        });\n      }\n\n      // Otherwise, render a container for the edit buttons\n      return (\n        <span className=\"rui edit-container\">\n          {this.renderVisibilityButton()}\n          {this.renderEditButton()}\n        </span>\n      );\n    }\n\n    // If permissions don't allow the edit buttons to be shown and there are\n    // no child elements, then cancel rendering.\n    if (!this.props.children) {\n      return null;\n    }\n\n    // If permissions don't allow the edit buttons to be shown and there are\n    // child elements, render them normally\n    return (\n      Children.only(this.props.children)\n    );\n  }\n}\n\nEditContainer.propTypes = {\n  autoHideEditButton: PropTypes.bool,\n  children: PropTypes.node,\n  data: PropTypes.object,\n  field: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  hasPermission: PropTypes.bool,\n  onEditButtonClick: PropTypes.func,\n  onVisibilityButtonClick: PropTypes.func,\n  showsVisibilityButton: PropTypes.bool\n};\n\nfunction composer(props, onData) {\n  let hasPermission;\n  const viewAs = Reaction.getUserPreferences(\"reaction-dashboard\", \"viewAs\", \"administrator\");\n\n  if (props.disabled === true || viewAs === \"customer\") {\n    hasPermission = false;\n  } else {\n    hasPermission = Reaction.hasPermission(props.permissions);\n  }\n\n  onData(null, {\n    hasPermission\n  });\n}\n\nexport default composeWithTracker(composer)(EditContainer);\n"]},"hash":"7940fb7f276821166415b8036d0767c87efe9b63"}
