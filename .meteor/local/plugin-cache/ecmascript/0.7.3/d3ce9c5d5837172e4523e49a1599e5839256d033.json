{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/session","imported":["Session"],"specifiers":[{"kind":"named","imported":"Session","local":"Session"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/tracker","imported":["Tracker"],"specifiers":[{"kind":"named","imported":"Tracker","local":"Tracker"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/lib/collections","imported":["Cart","Packages"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/client/modules/logger","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Logger"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/payments-paypal/client/templates/checkout/return/done.js","filenameRelative":"/imports/plugins/included/payments-paypal/client/templates/checkout/return/done.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-paypal/client/templates/checkout/return/done.js"],"names":["Meteor","Session","Template","Tracker","Reaction","Cart","Packages","Logger","isDuplicate","error","errorMessage","message","duplicateErrorCode","indexOf","showError","$","hide","text","show","buildPaymentMethod","result","status","mode","subscribe","packageData","findOne","name","shopId","getShopId","paymentMethod","processor","paymentPackageId","_id","paymentSettingsKey","registry","settingsKey","method","transactionId","TRANSACTIONID","amount","parseFloat","AMT","createdAt","Date","ORDERTIME","updatedAt","transactions","paypalDone","onRendered","helpers","checkoutUrl","template","instance","onCreated","payerId","Router","getQueryParam","token","prefix","getShopPrefix","autorun","c","Subscriptions","ready","cart","warn","stop","get","set","call","go","msg","PAYMENTSTATUS","payError","payResult"],"mappings":"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","file":"/imports/plugins/included/payments-paypal/client/templates/checkout/return/done.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Session } from \"meteor/session\";\nimport { Template } from \"meteor/templating\";\nimport { Tracker } from \"meteor/tracker\";\nimport { Reaction } from \"/client/api\";\nimport { Cart, Packages } from \"/lib/collections\";\nimport Logger from \"/client/modules/logger\";\n\n// This template handles receiving the token from Paypal, recording it and moving on the checkout\n\nfunction isDuplicate(error) {\n  const errorMessage = error.message;\n  const duplicateErrorCode = \"10415\";\n  return errorMessage.indexOf(duplicateErrorCode) > -1;\n}\n\nfunction showError(error) {\n  $(\".spinner-container\").hide();\n  $(\"#paypal-error-message\").text(error);\n  $(\".paypal-done-error\").show();\n}\n\nfunction buildPaymentMethod(result, status, mode) {\n  Meteor.subscribe(\"Packages\");\n  const packageData = Packages.findOne({\n    name: \"reaction-paypal\",\n    shopId: Reaction.getShopId()\n  });\n\n  const paymentMethod = {\n    processor: \"PaypalExpress\",\n    paymentPackageId: packageData._id,\n    paymentSettingsKey: packageData.registry[0].settingsKey,\n    method: \"credit\",\n    transactionId: result.TRANSACTIONID,\n    amount: parseFloat(result.AMT, 10),\n    status: status,\n    mode: mode,\n    createdAt: new Date(result.ORDERTIME),\n    updatedAt: new Date(result.ORDERTIME),\n    transactions: [result]\n  };\n  return paymentMethod;\n}\n\nTemplate.paypalDone.onRendered(function () {\n  $(\".paypal-done-error\").hide();\n});\n\nTemplate.paypalDone.helpers({\n  checkoutUrl: function () {\n    template = Template.instance();\n    return template.checkoutUrl;\n  }\n});\n\nTemplate.paypalDone.onCreated(function () {\n  const payerId = Reaction.Router.getQueryParam(\"PayerID\");\n  const token = Reaction.Router.getQueryParam(\"token\");\n  const prefix = Reaction.getShopPrefix();\n  this.checkoutUrl = `${prefix}/cart/checkout`;\n  // wait for cart to be ready\n  Tracker.autorun(function (c) {\n    if (Reaction.Subscriptions.Cart.ready()) {\n      const cart = Cart.findOne();\n      if (!cart) {\n        Logger.warn(\"Could not find valid cart\");\n        return;\n      }\n      c.stop();\n      if (Session.get(\"expressToken\") !== token) {\n        Session.set(\"expressToken\", token);\n        Meteor.call(\"confirmPaymentAuthorization\", cart._id, token, payerId, function (error, result) {\n          if (error) {\n            if (isDuplicate(error)) {\n              Reaction.Router.go(\"cart/completed\", {}, {\n                _id: cart._id\n              });\n            }\n            const msg = (error !== null ? error.error : void 0);\n            showError(msg);\n          }\n\n          if (result) {\n            let status;\n            let mode = \"authorize\";\n            // Normalize status depending on results\n            if (result.PAYMENTSTATUS === \"Pending\") {\n              status = \"created\";\n            } else if (result.PAYMENTSTATUS === \"Completed\") { // If we set capture at auth this will be completed\n              status = \"completed\";\n              mode = \"capture\";\n            } else {\n              status = result.PAYMENTSTATUS;\n            }\n            const paymentMethod = buildPaymentMethod(result, status, mode);\n\n            Meteor.call(\"cart/submitPayment\", paymentMethod, function (payError, payResult) {\n              if (!payResult && payError) {\n                Logger.warn(payError, \"Error received during submitting Payment via Paypal\");\n                showError(payError);\n                Session.set(\"guestCheckoutFlow\", true);\n              }\n            });\n          }\n        });\n      }\n    }\n  });\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-paypal/client/templates/checkout/return/done.js.map","sourceFileName":"/imports/plugins/included/payments-paypal/client/templates/checkout/return/done.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"done"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Session = void 0;\nmodule.importSync(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 1);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 2);\nvar Tracker = void 0;\nmodule.importSync(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 3);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 4);\nvar Cart = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 5);\nvar Logger = void 0;\nmodule.importSync(\"/client/modules/logger\", {\n  \"default\": function (v) {\n    Logger = v;\n  }\n}, 6);\n\n// This template handles receiving the token from Paypal, recording it and moving on the checkout\nfunction isDuplicate(error) {\n  var errorMessage = error.message;\n  var duplicateErrorCode = \"10415\";\n  return errorMessage.indexOf(duplicateErrorCode) > -1;\n}\n\nfunction showError(error) {\n  $(\".spinner-container\").hide();\n  $(\"#paypal-error-message\").text(error);\n  $(\".paypal-done-error\").show();\n}\n\nfunction buildPaymentMethod(result, status, mode) {\n  Meteor.subscribe(\"Packages\");\n  var packageData = Packages.findOne({\n    name: \"reaction-paypal\",\n    shopId: Reaction.getShopId()\n  });\n  var paymentMethod = {\n    processor: \"PaypalExpress\",\n    paymentPackageId: packageData._id,\n    paymentSettingsKey: packageData.registry[0].settingsKey,\n    method: \"credit\",\n    transactionId: result.TRANSACTIONID,\n    amount: parseFloat(result.AMT, 10),\n    status: status,\n    mode: mode,\n    createdAt: new Date(result.ORDERTIME),\n    updatedAt: new Date(result.ORDERTIME),\n    transactions: [result]\n  };\n  return paymentMethod;\n}\n\nTemplate.paypalDone.onRendered(function () {\n  $(\".paypal-done-error\").hide();\n});\nTemplate.paypalDone.helpers({\n  checkoutUrl: function () {\n    template = Template.instance();\n    return template.checkoutUrl;\n  }\n});\nTemplate.paypalDone.onCreated(function () {\n  var payerId = Reaction.Router.getQueryParam(\"PayerID\");\n  var token = Reaction.Router.getQueryParam(\"token\");\n  var prefix = Reaction.getShopPrefix();\n  this.checkoutUrl = prefix + \"/cart/checkout\"; // wait for cart to be ready\n\n  Tracker.autorun(function (c) {\n    if (Reaction.Subscriptions.Cart.ready()) {\n      var cart = Cart.findOne();\n\n      if (!cart) {\n        Logger.warn(\"Could not find valid cart\");\n        return;\n      }\n\n      c.stop();\n\n      if (Session.get(\"expressToken\") !== token) {\n        Session.set(\"expressToken\", token);\n        Meteor.call(\"confirmPaymentAuthorization\", cart._id, token, payerId, function (error, result) {\n          if (error) {\n            if (isDuplicate(error)) {\n              Reaction.Router.go(\"cart/completed\", {}, {\n                _id: cart._id\n              });\n            }\n\n            var msg = error !== null ? error.error : void 0;\n            showError(msg);\n          }\n\n          if (result) {\n            var status = void 0;\n            var mode = \"authorize\"; // Normalize status depending on results\n\n            if (result.PAYMENTSTATUS === \"Pending\") {\n              status = \"created\";\n            } else if (result.PAYMENTSTATUS === \"Completed\") {\n              // If we set capture at auth this will be completed\n              status = \"completed\";\n              mode = \"capture\";\n            } else {\n              status = result.PAYMENTSTATUS;\n            }\n\n            var paymentMethod = buildPaymentMethod(result, status, mode);\n            Meteor.call(\"cart/submitPayment\", paymentMethod, function (payError, payResult) {\n              if (!payResult && payError) {\n                Logger.warn(payError, \"Error received during submitting Payment via Paypal\");\n                showError(payError);\n                Session.set(\"guestCheckoutFlow\", true);\n              }\n            });\n          }\n        });\n      }\n    }\n  });\n});","map":{"version":3,"sources":["/imports/plugins/included/payments-paypal/client/templates/checkout/return/done.js"],"names":["Meteor","Session","Template","Tracker","Reaction","Cart","Packages","Logger","isDuplicate","error","errorMessage","message","duplicateErrorCode","indexOf","showError","$","hide","text","show","buildPaymentMethod","result","status","mode","subscribe","packageData","findOne","name","shopId","getShopId","paymentMethod","processor","paymentPackageId","_id","paymentSettingsKey","registry","settingsKey","method","transactionId","TRANSACTIONID","amount","parseFloat","AMT","createdAt","Date","ORDERTIME","updatedAt","transactions","paypalDone","onRendered","helpers","checkoutUrl","template","instance","onCreated","payerId","Router","getQueryParam","token","prefix","getShopPrefix","autorun","c","Subscriptions","ready","cart","warn","stop","get","set","call","go","msg","PAYMENTSTATUS","payError","payResult"],"mappings":"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","file":"/imports/plugins/included/payments-paypal/client/templates/checkout/return/done.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Session } from \"meteor/session\";\nimport { Template } from \"meteor/templating\";\nimport { Tracker } from \"meteor/tracker\";\nimport { Reaction } from \"/client/api\";\nimport { Cart, Packages } from \"/lib/collections\";\nimport Logger from \"/client/modules/logger\";\n\n// This template handles receiving the token from Paypal, recording it and moving on the checkout\n\nfunction isDuplicate(error) {\n  const errorMessage = error.message;\n  const duplicateErrorCode = \"10415\";\n  return errorMessage.indexOf(duplicateErrorCode) > -1;\n}\n\nfunction showError(error) {\n  $(\".spinner-container\").hide();\n  $(\"#paypal-error-message\").text(error);\n  $(\".paypal-done-error\").show();\n}\n\nfunction buildPaymentMethod(result, status, mode) {\n  Meteor.subscribe(\"Packages\");\n  const packageData = Packages.findOne({\n    name: \"reaction-paypal\",\n    shopId: Reaction.getShopId()\n  });\n\n  const paymentMethod = {\n    processor: \"PaypalExpress\",\n    paymentPackageId: packageData._id,\n    paymentSettingsKey: packageData.registry[0].settingsKey,\n    method: \"credit\",\n    transactionId: result.TRANSACTIONID,\n    amount: parseFloat(result.AMT, 10),\n    status: status,\n    mode: mode,\n    createdAt: new Date(result.ORDERTIME),\n    updatedAt: new Date(result.ORDERTIME),\n    transactions: [result]\n  };\n  return paymentMethod;\n}\n\nTemplate.paypalDone.onRendered(function () {\n  $(\".paypal-done-error\").hide();\n});\n\nTemplate.paypalDone.helpers({\n  checkoutUrl: function () {\n    template = Template.instance();\n    return template.checkoutUrl;\n  }\n});\n\nTemplate.paypalDone.onCreated(function () {\n  const payerId = Reaction.Router.getQueryParam(\"PayerID\");\n  const token = Reaction.Router.getQueryParam(\"token\");\n  const prefix = Reaction.getShopPrefix();\n  this.checkoutUrl = `${prefix}/cart/checkout`;\n  // wait for cart to be ready\n  Tracker.autorun(function (c) {\n    if (Reaction.Subscriptions.Cart.ready()) {\n      const cart = Cart.findOne();\n      if (!cart) {\n        Logger.warn(\"Could not find valid cart\");\n        return;\n      }\n      c.stop();\n      if (Session.get(\"expressToken\") !== token) {\n        Session.set(\"expressToken\", token);\n        Meteor.call(\"confirmPaymentAuthorization\", cart._id, token, payerId, function (error, result) {\n          if (error) {\n            if (isDuplicate(error)) {\n              Reaction.Router.go(\"cart/completed\", {}, {\n                _id: cart._id\n              });\n            }\n            const msg = (error !== null ? error.error : void 0);\n            showError(msg);\n          }\n\n          if (result) {\n            let status;\n            let mode = \"authorize\";\n            // Normalize status depending on results\n            if (result.PAYMENTSTATUS === \"Pending\") {\n              status = \"created\";\n            } else if (result.PAYMENTSTATUS === \"Completed\") { // If we set capture at auth this will be completed\n              status = \"completed\";\n              mode = \"capture\";\n            } else {\n              status = result.PAYMENTSTATUS;\n            }\n            const paymentMethod = buildPaymentMethod(result, status, mode);\n\n            Meteor.call(\"cart/submitPayment\", paymentMethod, function (payError, payResult) {\n              if (!payResult && payError) {\n                Logger.warn(payError, \"Error received during submitting Payment via Paypal\");\n                showError(payError);\n                Session.set(\"guestCheckoutFlow\", true);\n              }\n            });\n          }\n        });\n      }\n    }\n  });\n});\n"]},"hash":"d3ce9c5d5837172e4523e49a1599e5839256d033"}
