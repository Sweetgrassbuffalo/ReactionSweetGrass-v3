{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"accounting-js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"accounting"}]}],"exports":{"exported":["cartTransform"],"specifiers":[{"kind":"local","local":"cartTransform","exported":"cartTransform"}]}}},"options":{"filename":"/lib/collections/transform/cart.js","filenameRelative":"/lib/collections/transform/cart.js","inputSourceMap":{"version":3,"sources":["/lib/collections/transform/cart.js"],"names":["accounting","getSummary","items","prop","prop2","Array","isArray","reduce","sum","item","length","e","cartTransform","cartCount","cartShipping","rate","shipping","handling","toFixed","cartSubTotal","subTotal","cartTaxes","tax","parseFloat","taxTotal","cartDiscounts","discount","cartTotal","taxes","discountTotal","Math","max","total"],"mappings":"AAAA,OAAO;AAAP,AAAuB;WAAvB,AAEA,A;;;;;;;;;;AAQA,AAAS,AAAW,AAAO,AAAM,AAAO;;;;;;;GACtC,AAAI,wCACF;MAAA,AAAI,AAAM,AAAQ,AAAQ,AACxB;QAAO,MAAM,QAAN,AAAa,AAAC,QAAD,AAAM,AAAS,AACjC;AAAI,mBAAO;mBAET;AAH+B,AAG/B,AAAO,AAAM,AAAK,AAAK,AAAO,AAAM,AAAW,AAAI,AAAK,AAAM,AAC5D,AAAK,AAAM,AAAI,AAAM,AACxB;AACD;AACA,SALE,CAFG,AAOL,AAAO,AAAO,AAAK,AAAW,AAAI,AAAK,AAAK,AAC1C,AAAK,AAAK,AAAI,AAAK,AACtB;;;AATD,AAAO,AASJ,oDACJ,yBAZH,AAaC,AAAC;OAVI,EAUJ,AAAO,AAAG,AACV;AACA;cACA;AACA;AAAA,AAAO,AACR;;WACD;AAAA,AAAO,AACR,A;;AAED;EAUA,AAAO,AAAM,AAAgB,AAC3B,AAAY,AACV;;;;;;;;;;;AAAO,IAAW,AAAK;AAFE;mCAI3B;AAAe,AACb;4BACA;AAAA,AAAM,AAAO,AAAW,AAAK,AAAU,AAAC,AAAkB,AAC1D;QAAM,OAAW,WAAW,KAAK,WAAhB,AAA0B,AAAC,kBAA5C,AAAiB,AAA0B,AAAmB,AAC9D;QAAM,WAAW,WAAA,AAAW,KAA5B,AAAoC,6BACpC;QAAO,WAAA,AAAW,AAAQ,WAAnB,QATkB,AASzB,AAAO,AAA6B,AACrC;;AACD;4BAAe,AACb;QAAM,WAAW,WAAW,KAAX,AAAgB,OAAO,CAAvB,AAAuB,AAAC,aAAa,CAAA,AAAC,YAAvD,AAAiB,AAAqC,AAAa,AACnE;WAAO,WAAA,AAAW,QAAX,AAAmB,UAA1B,AAAO,AAA6B,AACrC;AAd0B;yBAe3B;AAAY,AACV;AACA;AACA;AACA;0BACA;QAAM,AAAM,WAAZ,AAAY,AAAK,AAAO,gBACxB;QAAM,WAAW,WAAjB,AAAiB,AAAW,AAAK,AACjC;AAAM,WAAW,mBAAjB,AAA4B,UAC5B;AAAA,AAAO,AAAW,AAAQ,AAAU,AACrC;AAxB0B;oCAyB3B;WAAgB,6BACd;AAAA,AAAM,AAAW,AAAK,AAAY,AAClC;AAAO,yBA3BkB,AA2BzB,AAAO,AAAW,AAAQ,AAAU,AACrC;;mCACD;QAAY,wBACV;QAAM,WAAW,WAAW,KAA5B,AAAiB,AAAW,AAAK,AACjC;QAAM,AAAW,qBAAW,IAAK,cAAjC,AAAiB,AAAW,AAC5B;QAAM,QAAQ,AAAW,gBAAA,AAAK,WAA9B,AAAc,AACd;AAAM,WAAW,mBAAW,OAA5B,AAAiB,AAAW,AAAK,AACjC;AAlCG,AAAsB,AAkCzB,AAAM,AAAgB,AAAK,AAAI,AAAG,AAAW,AAC7C,AAAM,AAAQ,AAAgB,AAAW,AACzC,AAAO,AAAW,AAAQ,AAAO,AAClC;AAnCC,AAAO,AAAuB,AAAC,AAChC","file":"/lib/collections/transform/cart.js.map","sourcesContent":["import accounting from \"accounting-js\";\n\n/**\n * getSummary\n * @summary iterates over cart items with computations\n * @param {Array} items - cart.items array\n * @param {Array} prop - path to item property represented by array\n * @param {Array} [prop2] - path to another item property represented by array\n * @return {Number} - computations result\n */\nfunction getSummary(items, prop, prop2) {\n  try {\n    if (Array.isArray(items)) {\n      return items.reduce((sum, item) => {\n        if (prop2) {\n          // S + a * b, where b could be b1 or b2\n          return sum + item[prop[0]] * (prop2.length === 1 ? item[prop2[0]] :\n            item[prop2[0]][prop2[1]]);\n        }\n        // S + b, where b could be b1 or b2\n        return sum + (prop.length === 1 ? item[prop[0]] :\n          item[prop[0]][prop[1]]);\n      }, 0);\n    }\n  } catch (e) {\n    // If data not prepared we should send a number to avoid exception with\n    // `toFixed`. This could happens if user stuck on `completed` checkout stage\n    // by some reason.\n    return 0;\n  }\n  return 0;\n}\n\n/**\n * Reaction transform collections\n *\n * transform methods used to return cart calculated values\n * cartCount, cartSubTotal, cartShipping, cartTaxes, cartTotal\n * are calculated by a transformation on the collection\n * and are available to use in template as cart.xxx\n * in template: {{cart.cartCount}}\n * in code: Cart.findOne().cartTotal()\n */\nexport const cartTransform = {\n  cartCount() {\n    return getSummary(this.items, [\"quantity\"]);\n  },\n  cartShipping() {\n    // loop through the cart.shipping, sum shipments.\n    const rate = getSummary(this.shipping, [\"shipmentMethod\", \"rate\"]);\n    const handling = getSummary(this.shipping, [\"shipmentMethod\", \"handling\"]);\n    const shipping = handling + rate || 0;\n    return accounting.toFixed(shipping, 2);\n  },\n  cartSubTotal() {\n    const subTotal = getSummary(this.items, [\"quantity\"], [\"variants\", \"price\"]);\n    return accounting.toFixed(subTotal, 2);\n  },\n  cartTaxes() {\n    // taxes are calculated in a Cart.after.update hooks\n    // the tax value stored with the cart is the effective tax rate\n    // calculated by line items\n    // in the imports/core/taxes plugin\n    const tax = this.tax || 0;\n    const subTotal = parseFloat(this.cartSubTotal());\n    const taxTotal = subTotal * tax;\n    return accounting.toFixed(taxTotal, 2);\n  },\n  cartDiscounts() {\n    const discount = this.discount || 0;\n    return accounting.toFixed(discount, 2);\n  },\n  cartTotal() {\n    const subTotal = parseFloat(this.cartSubTotal());\n    const shipping = parseFloat(this.cartShipping());\n    const taxes = parseFloat(this.cartTaxes());\n    const discount = parseFloat(this.cartDiscounts());\n    const discountTotal = Math.max(0, subTotal - discount);\n    const total = discountTotal + shipping + taxes;\n    return accounting.toFixed(total, 2);\n  }\n};\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/collections/transform/cart.js.map","sourceFileName":"/lib/collections/transform/cart.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"cart"},"ignored":false,"code":"module.export({\n  cartTransform: function () {\n    return cartTransform;\n  }\n});\nvar accounting = void 0;\nmodule.importSync(\"accounting-js\", {\n  \"default\": function (v) {\n    accounting = v;\n  }\n}, 0);\n\n/**\n * getSummary\n * @summary iterates over cart items with computations\n * @param {Array} items - cart.items array\n * @param {Array} prop - path to item property represented by array\n * @param {Array} [prop2] - path to another item property represented by array\n * @return {Number} - computations result\n */function getSummary(items, prop, prop2) {\n  try {\n    if (Array.isArray(items)) {\n      return items.reduce(function (sum, item) {\n        if (prop2) {\n          // S + a * b, where b could be b1 or b2\n          return sum + item[prop[0]] * (prop2.length === 1 ? item[prop2[0]] : item[prop2[0]][prop2[1]]);\n        } // S + b, where b could be b1 or b2\n\n\n        return sum + (prop.length === 1 ? item[prop[0]] : item[prop[0]][prop[1]]);\n      }, 0);\n    }\n  } catch (e) {\n    // If data not prepared we should send a number to avoid exception with\n    // `toFixed`. This could happens if user stuck on `completed` checkout stage\n    // by some reason.\n    return 0;\n  }\n\n  return 0;\n} /**\n   * Reaction transform collections\n   *\n   * transform methods used to return cart calculated values\n   * cartCount, cartSubTotal, cartShipping, cartTaxes, cartTotal\n   * are calculated by a transformation on the collection\n   * and are available to use in template as cart.xxx\n   * in template: {{cart.cartCount}}\n   * in code: Cart.findOne().cartTotal()\n   */\n\nvar cartTransform = {\n  cartCount: function () {\n    return getSummary(this.items, [\"quantity\"]);\n  },\n  cartShipping: function () {\n    // loop through the cart.shipping, sum shipments.\n    var rate = getSummary(this.shipping, [\"shipmentMethod\", \"rate\"]);\n    var handling = getSummary(this.shipping, [\"shipmentMethod\", \"handling\"]);\n    var shipping = handling + rate || 0;\n    return accounting.toFixed(shipping, 2);\n  },\n  cartSubTotal: function () {\n    var subTotal = getSummary(this.items, [\"quantity\"], [\"variants\", \"price\"]);\n    return accounting.toFixed(subTotal, 2);\n  },\n  cartTaxes: function () {\n    // taxes are calculated in a Cart.after.update hooks\n    // the tax value stored with the cart is the effective tax rate\n    // calculated by line items\n    // in the imports/core/taxes plugin\n    var tax = this.tax || 0;\n    var subTotal = parseFloat(this.cartSubTotal());\n    var taxTotal = subTotal * tax;\n    return accounting.toFixed(taxTotal, 2);\n  },\n  cartDiscounts: function () {\n    var discount = this.discount || 0;\n    return accounting.toFixed(discount, 2);\n  },\n  cartTotal: function () {\n    var subTotal = parseFloat(this.cartSubTotal());\n    var shipping = parseFloat(this.cartShipping());\n    var taxes = parseFloat(this.cartTaxes());\n    var discount = parseFloat(this.cartDiscounts());\n    var discountTotal = Math.max(0, subTotal - discount);\n    var total = discountTotal + shipping + taxes;\n    return accounting.toFixed(total, 2);\n  }\n};","map":{"version":3,"sources":["/lib/collections/transform/cart.js"],"names":["accounting","getSummary","items","prop","prop2","Array","isArray","reduce","sum","item","length","e","cartTransform","cartCount","cartShipping","rate","shipping","handling","toFixed","cartSubTotal","subTotal","cartTaxes","tax","parseFloat","taxTotal","cartDiscounts","discount","cartTotal","taxes","discountTotal","Math","max","total"],"mappings":"AAAA,OAAO;AAAP,AAAuB;WAAvB,AAEA,A;;;;;;;;;;AAQA,AAAS,AAAW,AAAO,AAAM,AAAO;;;;;;;GACtC,AAAI,wCACF;MAAA,AAAI,AAAM,AAAQ,AAAQ,AACxB;QAAO,MAAM,QAAN,AAAa,AAAC,QAAD,AAAM,AAAS,AACjC;AAAI,mBAAO;mBAET;AAH+B,AAG/B,AAAO,AAAM,AAAK,AAAK,AAAO,AAAM,AAAW,AAAI,AAAK,AAAM,AAC5D,AAAK,AAAM,AAAI,AAAM,AACxB;AACD;AACA,SALE,CAFG,AAOL,AAAO,AAAO,AAAK,AAAW,AAAI,AAAK,AAAK,AAC1C,AAAK,AAAK,AAAI,AAAK,AACtB;;;AATD,AAAO,AASJ,oDACJ,yBAZH,AAaC,AAAC;OAVI,EAUJ,AAAO,AAAG,AACV;AACA;cACA;AACA;AAAA,AAAO,AACR;;WACD;AAAA,AAAO,AACR,A;;AAED;EAUA,AAAO,AAAM,AAAgB,AAC3B,AAAY,AACV;;;;;;;;;;;AAAO,IAAW,AAAK;AAFE;mCAI3B;AAAe,AACb;4BACA;AAAA,AAAM,AAAO,AAAW,AAAK,AAAU,AAAC,AAAkB,AAC1D;QAAM,OAAW,WAAW,KAAK,WAAhB,AAA0B,AAAC,kBAA5C,AAAiB,AAA0B,AAAmB,AAC9D;QAAM,WAAW,WAAA,AAAW,KAA5B,AAAoC,6BACpC;QAAO,WAAA,AAAW,AAAQ,WAAnB,QATkB,AASzB,AAAO,AAA6B,AACrC;;AACD;4BAAe,AACb;QAAM,WAAW,WAAW,KAAX,AAAgB,OAAO,CAAvB,AAAuB,AAAC,aAAa,CAAA,AAAC,YAAvD,AAAiB,AAAqC,AAAa,AACnE;WAAO,WAAA,AAAW,QAAX,AAAmB,UAA1B,AAAO,AAA6B,AACrC;AAd0B;yBAe3B;AAAY,AACV;AACA;AACA;AACA;0BACA;QAAM,AAAM,WAAZ,AAAY,AAAK,AAAO,gBACxB;QAAM,WAAW,WAAjB,AAAiB,AAAW,AAAK,AACjC;AAAM,WAAW,mBAAjB,AAA4B,UAC5B;AAAA,AAAO,AAAW,AAAQ,AAAU,AACrC;AAxB0B;oCAyB3B;WAAgB,6BACd;AAAA,AAAM,AAAW,AAAK,AAAY,AAClC;AAAO,yBA3BkB,AA2BzB,AAAO,AAAW,AAAQ,AAAU,AACrC;;mCACD;QAAY,wBACV;QAAM,WAAW,WAAW,KAA5B,AAAiB,AAAW,AAAK,AACjC;QAAM,AAAW,qBAAW,IAAK,cAAjC,AAAiB,AAAW,AAC5B;QAAM,QAAQ,AAAW,gBAAA,AAAK,WAA9B,AAAc,AACd;AAAM,WAAW,mBAAW,OAA5B,AAAiB,AAAW,AAAK,AACjC;AAlCG,AAAsB,AAkCzB,AAAM,AAAgB,AAAK,AAAI,AAAG,AAAW,AAC7C,AAAM,AAAQ,AAAgB,AAAW,AACzC,AAAO,AAAW,AAAQ,AAAO,AAClC;AAnCC,AAAO,AAAuB,AAAC,AAChC","file":"/lib/collections/transform/cart.js.map","sourcesContent":["import accounting from \"accounting-js\";\n\n/**\n * getSummary\n * @summary iterates over cart items with computations\n * @param {Array} items - cart.items array\n * @param {Array} prop - path to item property represented by array\n * @param {Array} [prop2] - path to another item property represented by array\n * @return {Number} - computations result\n */\nfunction getSummary(items, prop, prop2) {\n  try {\n    if (Array.isArray(items)) {\n      return items.reduce((sum, item) => {\n        if (prop2) {\n          // S + a * b, where b could be b1 or b2\n          return sum + item[prop[0]] * (prop2.length === 1 ? item[prop2[0]] :\n            item[prop2[0]][prop2[1]]);\n        }\n        // S + b, where b could be b1 or b2\n        return sum + (prop.length === 1 ? item[prop[0]] :\n          item[prop[0]][prop[1]]);\n      }, 0);\n    }\n  } catch (e) {\n    // If data not prepared we should send a number to avoid exception with\n    // `toFixed`. This could happens if user stuck on `completed` checkout stage\n    // by some reason.\n    return 0;\n  }\n  return 0;\n}\n\n/**\n * Reaction transform collections\n *\n * transform methods used to return cart calculated values\n * cartCount, cartSubTotal, cartShipping, cartTaxes, cartTotal\n * are calculated by a transformation on the collection\n * and are available to use in template as cart.xxx\n * in template: {{cart.cartCount}}\n * in code: Cart.findOne().cartTotal()\n */\nexport const cartTransform = {\n  cartCount() {\n    return getSummary(this.items, [\"quantity\"]);\n  },\n  cartShipping() {\n    // loop through the cart.shipping, sum shipments.\n    const rate = getSummary(this.shipping, [\"shipmentMethod\", \"rate\"]);\n    const handling = getSummary(this.shipping, [\"shipmentMethod\", \"handling\"]);\n    const shipping = handling + rate || 0;\n    return accounting.toFixed(shipping, 2);\n  },\n  cartSubTotal() {\n    const subTotal = getSummary(this.items, [\"quantity\"], [\"variants\", \"price\"]);\n    return accounting.toFixed(subTotal, 2);\n  },\n  cartTaxes() {\n    // taxes are calculated in a Cart.after.update hooks\n    // the tax value stored with the cart is the effective tax rate\n    // calculated by line items\n    // in the imports/core/taxes plugin\n    const tax = this.tax || 0;\n    const subTotal = parseFloat(this.cartSubTotal());\n    const taxTotal = subTotal * tax;\n    return accounting.toFixed(taxTotal, 2);\n  },\n  cartDiscounts() {\n    const discount = this.discount || 0;\n    return accounting.toFixed(discount, 2);\n  },\n  cartTotal() {\n    const subTotal = parseFloat(this.cartSubTotal());\n    const shipping = parseFloat(this.cartShipping());\n    const taxes = parseFloat(this.cartTaxes());\n    const discount = parseFloat(this.cartDiscounts());\n    const discountTotal = Math.max(0, subTotal - discount);\n    const total = discountTotal + shipping + taxes;\n    return accounting.toFixed(total, 2);\n  }\n};\n"]},"hash":"7ba2695821a492d67131f8373cda26a8077a4678"}
