{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"moment","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"moment"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/reactive-var","imported":["ReactiveVar"],"specifiers":[{"kind":"named","imported":"ReactiveVar","local":"ReactiveVar"}]},{"source":"meteor/jeremy:stripe","imported":["ReactiveStripe"],"specifiers":[{"kind":"named","imported":"ReactiveStripe","local":"ReactiveStripe"}]},{"source":"/lib/collections","imported":["Packages"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"../../lib/launchdock","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Launchdock"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/launchdock-connect/client/templates/dashboard.js","filenameRelative":"/imports/plugins/included/launchdock-connect/client/templates/dashboard.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/launchdock-connect/client/templates/dashboard.js"],"names":["moment","Meteor","Template","Mongo","ReactiveVar","ReactiveStripe","Packages","Launchdock","launchdockDashboard","onCreated","launchdock","connect","LaunchdockUsers","Collection","connection","LaunchdockStacks","LaunchdockSettings","user","ldStackSub","subscribe","services","stackId","autorun","stripeKey","s","findOne","key","stripeLivePublishableKey","stripeTestPublishableKey","set","load","helpers","packageData","name","launchdockDataReady","instance","ready","launchdockStack","trial","stack","ends","daysRemaining","daySuffix","startDate","createdAt","Date","setDate","getDate","now","msPerDay","timeLeft","getTime","daysLeft","Math","floor","format","shopCreatedAt","isSubscribed","subscription","status","plan","nextPayment","next_payment","yearlyPaymentDate","today","nextDue","events","Reaction","showActionView","label","template","data","e","t","$","val","dueToday","term","daysFromNow","text","preventDefault","get","Alerts","add","price","charge","StripeCheckout","configure","image","locale","email","emails","address","panelLabel","toLowerCase","token","options","cardToken","id","call","err","autoHide","open","description","amount"],"mappings":"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","file":"/imports/plugins/included/launchdock-connect/client/templates/dashboard.js.map","sourcesContent":["import moment from \"moment\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Mongo } from \"meteor/mongo\";\nimport { ReactiveVar } from \"meteor/reactive-var\";\nimport { ReactiveStripe } from \"meteor/jeremy:stripe\";\nimport { Packages } from \"/lib/collections\";\nimport Launchdock from \"../../lib/launchdock\";\n\nTemplate.launchdockDashboard.onCreated(function () {\n  // create and return connection\n  const launchdock = Launchdock.connect();\n\n  // remote users collection (only contains current user)\n  this.LaunchdockUsers = new Mongo.Collection(\"users\", {\n    connection: launchdock\n  });\n\n  // remote stacks collection (only contains current stack)\n  this.LaunchdockStacks = new Mongo.Collection(\"stacks\", {\n    connection: launchdock\n  });\n\n  // remote settings collection (only contains Stripe public key)\n  this.LaunchdockSettings = new Mongo.Collection(\"settings\", {\n    connection: launchdock\n  });\n\n  const user = Meteor.user();\n\n  // subscribe to user/stack details\n  this.ldStackSub = launchdock.subscribe(\"reaction-account-info\", user.services.launchdock.stackId);\n\n  // Stripe public key for Launchdock\n  launchdock.subscribe(\"launchdock-stripe-public-key\");\n\n  // setup Stripe client libs\n  this.autorun(() => {\n    this.stripeKey = new ReactiveVar();\n    const s = this.LaunchdockSettings.findOne();\n\n    if (s) {\n      const key = s.stripeLivePublishableKey || s.stripeTestPublishableKey;\n\n      // store key in ReactiveVar on template instance\n      this.stripeKey.set(key);\n\n      // load client side Stripe libs\n      ReactiveStripe.load(key);\n    }\n  });\n});\n\n\nTemplate.launchdockDashboard.helpers({\n\n  packageData() {\n    return Packages.findOne({\n      name: \"reaction-connect\"\n    });\n  },\n\n  launchdockDataReady() {\n    return Template.instance().ldStackSub.ready();\n  },\n\n  launchdockStack() {\n    return Template.instance().LaunchdockStacks.findOne();\n  },\n\n  trial() {\n    const stack = Template.instance().LaunchdockStacks.findOne();\n    // calculate the trial end date and days remaining\n    let ends;\n    let daysRemaining;\n    let daySuffix;\n\n    if (stack) {\n      const startDate = stack.createdAt;\n      ends = new Date();\n      ends.setDate(startDate.getDate() + 30);\n      const now = new Date();\n      const msPerDay = 24 * 60 * 60 * 1000;\n      const timeLeft = ends.getTime() - now.getTime();\n      const daysLeft = timeLeft / msPerDay;\n      daysRemaining = Math.floor(daysLeft);\n      daySuffix = daysRemaining === 1 ? \" day\" : \" days\";\n    }\n    return {\n      ends: moment(ends).format(\"MMMM Do YYYY\"),\n      daysRemaining: daysRemaining + daySuffix\n    };\n  },\n\n  shopCreatedAt() {\n    const stack = Template.instance().LaunchdockStacks.findOne();\n    return stack ? moment(stack.createdAt).format(\"MMMM Do YYYY, h:mma\") : \"\";\n  },\n\n  isSubscribed() {\n    const user = Template.instance().LaunchdockUsers.findOne();\n    return !!(user && user.subscription && user.subscription.status === \"active\");\n  },\n\n  plan() {\n    const user = Template.instance().LaunchdockUsers.findOne();\n    return user && user.subscription ? user.subscription.plan.name : null;\n  },\n\n  nextPayment() {\n    const user = Template.instance().LaunchdockUsers.findOne();\n    if (user && user.subscription) {\n      const nextPayment = user.subscription.next_payment;\n      return moment(nextPayment).format(\"LL\");\n    }\n    return null;\n  },\n\n  yearlyPaymentDate() {\n    const today = new Date();\n    const nextDue = new Date();\n    nextDue.setDate(today.getDate() + 365);\n\n    return moment(nextDue).format(\"LL\");\n  }\n});\n\n\nTemplate.launchdockDashboard.events({\n  // open settings panel\n  \"click [data-event-action=showLaunchdockSettings]\"() {\n    Reaction.showActionView({\n      label: \"SSL Settings\",\n      template: \"connectSettings\",\n      data: this\n    });\n  },\n\n  // change UI based on which subscription option is chosen\n  \"change input[name='plan-choice']\"(e, t) {\n    const plan = t.$(\"input[name='plan-choice']:checked\").val();\n\n    let dueToday;\n    let term;\n\n    if (plan === \"Yearly\") {\n      dueToday = \"$540 for 12 months\";\n      term = dueToday;\n      daysFromNow = 365;\n    } else {\n      dueToday = \"$50 for first month\";\n      term = \"$50 per month\";\n      daysFromNow = 30;\n    }\n\n    const today = new Date();\n    const nextDue = new Date();\n    nextDue.setDate(today.getDate() + daysFromNow);\n\n    t.$(\".price\").text(dueToday);\n    t.$(\".term\").text(term);\n    t.$(\".next-due\").text(moment(nextDue).format(\"LL\"));\n  },\n\n  // trigger subscription checkout\n  \"click .checkout\"(e, t) {\n    e.preventDefault();\n\n    const stripeKey = Template.instance().stripeKey.get();\n\n    if (!stripeKey) {\n      Alerts.add(\"Unable to process a payment. Please contact support.\", \"danger\");\n    }\n\n    const plan = t.$(\"input[name='plan-choice']:checked\").val();\n\n    let price;\n\n    if (plan === \"Yearly\") {\n      price = 54000;\n    } else {\n      price = 5000;\n    }\n\n    const user = Meteor.user();\n\n    const charge = StripeCheckout.configure({\n      key: stripeKey,\n      image: \"https://reactioncommerce.com/images/reaction-logo.png\",\n      locale: \"auto\",\n      email: user.emails[0].address,\n      panelLabel: `Subscribe (${plan.toLowerCase()})`,\n      token: (token) => {\n        const options = {\n          cardToken: token.id,\n          plan: plan.toLowerCase(),\n          stackId: user.services.launchdock.stackId\n        };\n\n        const launchdock = Launchdock.connect();\n\n        launchdock.call(\"stripe/createCustomerAndSubscribe\", options, (err) => {\n          if (err) {\n            Alerts.add(\"Unable to process a payment. Please contact support.\", \"danger\");\n          } else {\n            Alerts.add(\"Thank you for your payment!\", \"success\", {\n              autoHide: true\n            });\n          }\n        });\n      }\n    });\n\n    charge.open({\n      name: \"Reaction Commerce\",\n      description: `${plan} Subscription`,\n      amount: price\n    });\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/launchdock-connect/client/templates/dashboard.js.map","sourceFileName":"/imports/plugins/included/launchdock-connect/client/templates/dashboard.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"dashboard"},"ignored":false,"code":"var moment = void 0;\nmodule.importSync(\"moment\", {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 2);\nvar Mongo = void 0;\nmodule.importSync(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 3);\nvar ReactiveVar = void 0;\nmodule.importSync(\"meteor/reactive-var\", {\n  ReactiveVar: function (v) {\n    ReactiveVar = v;\n  }\n}, 4);\nvar ReactiveStripe = void 0;\nmodule.importSync(\"meteor/jeremy:stripe\", {\n  ReactiveStripe: function (v) {\n    ReactiveStripe = v;\n  }\n}, 5);\nvar Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 6);\nvar Launchdock = void 0;\nmodule.importSync(\"../../lib/launchdock\", {\n  \"default\": function (v) {\n    Launchdock = v;\n  }\n}, 7);\nTemplate.launchdockDashboard.onCreated(function () {\n  var _this = this;\n\n  // create and return connection\n  var launchdock = Launchdock.connect(); // remote users collection (only contains current user)\n\n  this.LaunchdockUsers = new Mongo.Collection(\"users\", {\n    connection: launchdock\n  }); // remote stacks collection (only contains current stack)\n\n  this.LaunchdockStacks = new Mongo.Collection(\"stacks\", {\n    connection: launchdock\n  }); // remote settings collection (only contains Stripe public key)\n\n  this.LaunchdockSettings = new Mongo.Collection(\"settings\", {\n    connection: launchdock\n  });\n  var user = Meteor.user(); // subscribe to user/stack details\n\n  this.ldStackSub = launchdock.subscribe(\"reaction-account-info\", user.services.launchdock.stackId); // Stripe public key for Launchdock\n\n  launchdock.subscribe(\"launchdock-stripe-public-key\"); // setup Stripe client libs\n\n  this.autorun(function () {\n    _this.stripeKey = new ReactiveVar();\n\n    var s = _this.LaunchdockSettings.findOne();\n\n    if (s) {\n      var key = s.stripeLivePublishableKey || s.stripeTestPublishableKey; // store key in ReactiveVar on template instance\n\n      _this.stripeKey.set(key); // load client side Stripe libs\n\n\n      ReactiveStripe.load(key);\n    }\n  });\n});\nTemplate.launchdockDashboard.helpers({\n  packageData: function () {\n    return Packages.findOne({\n      name: \"reaction-connect\"\n    });\n  },\n  launchdockDataReady: function () {\n    return Template.instance().ldStackSub.ready();\n  },\n  launchdockStack: function () {\n    return Template.instance().LaunchdockStacks.findOne();\n  },\n  trial: function () {\n    var stack = Template.instance().LaunchdockStacks.findOne(); // calculate the trial end date and days remaining\n\n    var ends = void 0;\n    var daysRemaining = void 0;\n    var daySuffix = void 0;\n\n    if (stack) {\n      var startDate = stack.createdAt;\n      ends = new Date();\n      ends.setDate(startDate.getDate() + 30);\n      var now = new Date();\n      var msPerDay = 24 * 60 * 60 * 1000;\n      var timeLeft = ends.getTime() - now.getTime();\n      var daysLeft = timeLeft / msPerDay;\n      daysRemaining = Math.floor(daysLeft);\n      daySuffix = daysRemaining === 1 ? \" day\" : \" days\";\n    }\n\n    return {\n      ends: moment(ends).format(\"MMMM Do YYYY\"),\n      daysRemaining: daysRemaining + daySuffix\n    };\n  },\n  shopCreatedAt: function () {\n    var stack = Template.instance().LaunchdockStacks.findOne();\n    return stack ? moment(stack.createdAt).format(\"MMMM Do YYYY, h:mma\") : \"\";\n  },\n  isSubscribed: function () {\n    var user = Template.instance().LaunchdockUsers.findOne();\n    return !!(user && user.subscription && user.subscription.status === \"active\");\n  },\n  plan: function () {\n    var user = Template.instance().LaunchdockUsers.findOne();\n    return user && user.subscription ? user.subscription.plan.name : null;\n  },\n  nextPayment: function () {\n    var user = Template.instance().LaunchdockUsers.findOne();\n\n    if (user && user.subscription) {\n      var nextPayment = user.subscription.next_payment;\n      return moment(nextPayment).format(\"LL\");\n    }\n\n    return null;\n  },\n  yearlyPaymentDate: function () {\n    var today = new Date();\n    var nextDue = new Date();\n    nextDue.setDate(today.getDate() + 365);\n    return moment(nextDue).format(\"LL\");\n  }\n});\nTemplate.launchdockDashboard.events({\n  // open settings panel\n  \"click [data-event-action=showLaunchdockSettings]\": function () {\n    Reaction.showActionView({\n      label: \"SSL Settings\",\n      template: \"connectSettings\",\n      data: this\n    });\n  },\n  // change UI based on which subscription option is chosen\n  \"change input[name='plan-choice']\": function (e, t) {\n    var plan = t.$(\"input[name='plan-choice']:checked\").val();\n    var dueToday = void 0;\n    var term = void 0;\n\n    if (plan === \"Yearly\") {\n      dueToday = \"$540 for 12 months\";\n      term = dueToday;\n      daysFromNow = 365;\n    } else {\n      dueToday = \"$50 for first month\";\n      term = \"$50 per month\";\n      daysFromNow = 30;\n    }\n\n    var today = new Date();\n    var nextDue = new Date();\n    nextDue.setDate(today.getDate() + daysFromNow);\n    t.$(\".price\").text(dueToday);\n    t.$(\".term\").text(term);\n    t.$(\".next-due\").text(moment(nextDue).format(\"LL\"));\n  },\n  // trigger subscription checkout\n  \"click .checkout\": function (e, t) {\n    e.preventDefault();\n    var stripeKey = Template.instance().stripeKey.get();\n\n    if (!stripeKey) {\n      Alerts.add(\"Unable to process a payment. Please contact support.\", \"danger\");\n    }\n\n    var plan = t.$(\"input[name='plan-choice']:checked\").val();\n    var price = void 0;\n\n    if (plan === \"Yearly\") {\n      price = 54000;\n    } else {\n      price = 5000;\n    }\n\n    var user = Meteor.user();\n    var charge = StripeCheckout.configure({\n      key: stripeKey,\n      image: \"https://reactioncommerce.com/images/reaction-logo.png\",\n      locale: \"auto\",\n      email: user.emails[0].address,\n      panelLabel: \"Subscribe (\" + plan.toLowerCase() + \")\",\n      token: function (token) {\n        var options = {\n          cardToken: token.id,\n          plan: plan.toLowerCase(),\n          stackId: user.services.launchdock.stackId\n        };\n        var launchdock = Launchdock.connect();\n        launchdock.call(\"stripe/createCustomerAndSubscribe\", options, function (err) {\n          if (err) {\n            Alerts.add(\"Unable to process a payment. Please contact support.\", \"danger\");\n          } else {\n            Alerts.add(\"Thank you for your payment!\", \"success\", {\n              autoHide: true\n            });\n          }\n        });\n      }\n    });\n    charge.open({\n      name: \"Reaction Commerce\",\n      description: plan + \" Subscription\",\n      amount: price\n    });\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/launchdock-connect/client/templates/dashboard.js"],"names":["moment","Meteor","Template","Mongo","ReactiveVar","ReactiveStripe","Packages","Launchdock","launchdockDashboard","onCreated","launchdock","connect","LaunchdockUsers","Collection","connection","LaunchdockStacks","LaunchdockSettings","user","ldStackSub","subscribe","services","stackId","autorun","stripeKey","s","findOne","key","stripeLivePublishableKey","stripeTestPublishableKey","set","load","helpers","packageData","name","launchdockDataReady","instance","ready","launchdockStack","trial","stack","ends","daysRemaining","daySuffix","startDate","createdAt","Date","setDate","getDate","now","msPerDay","timeLeft","getTime","daysLeft","Math","floor","format","shopCreatedAt","isSubscribed","subscription","status","plan","nextPayment","next_payment","yearlyPaymentDate","today","nextDue","events","Reaction","showActionView","label","template","data","e","t","$","val","dueToday","term","daysFromNow","text","preventDefault","get","Alerts","add","price","charge","StripeCheckout","configure","image","locale","email","emails","address","panelLabel","toLowerCase","token","options","cardToken","id","call","err","autoHide","open","description","amount"],"mappings":"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","file":"/imports/plugins/included/launchdock-connect/client/templates/dashboard.js.map","sourcesContent":["import moment from \"moment\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Mongo } from \"meteor/mongo\";\nimport { ReactiveVar } from \"meteor/reactive-var\";\nimport { ReactiveStripe } from \"meteor/jeremy:stripe\";\nimport { Packages } from \"/lib/collections\";\nimport Launchdock from \"../../lib/launchdock\";\n\nTemplate.launchdockDashboard.onCreated(function () {\n  // create and return connection\n  const launchdock = Launchdock.connect();\n\n  // remote users collection (only contains current user)\n  this.LaunchdockUsers = new Mongo.Collection(\"users\", {\n    connection: launchdock\n  });\n\n  // remote stacks collection (only contains current stack)\n  this.LaunchdockStacks = new Mongo.Collection(\"stacks\", {\n    connection: launchdock\n  });\n\n  // remote settings collection (only contains Stripe public key)\n  this.LaunchdockSettings = new Mongo.Collection(\"settings\", {\n    connection: launchdock\n  });\n\n  const user = Meteor.user();\n\n  // subscribe to user/stack details\n  this.ldStackSub = launchdock.subscribe(\"reaction-account-info\", user.services.launchdock.stackId);\n\n  // Stripe public key for Launchdock\n  launchdock.subscribe(\"launchdock-stripe-public-key\");\n\n  // setup Stripe client libs\n  this.autorun(() => {\n    this.stripeKey = new ReactiveVar();\n    const s = this.LaunchdockSettings.findOne();\n\n    if (s) {\n      const key = s.stripeLivePublishableKey || s.stripeTestPublishableKey;\n\n      // store key in ReactiveVar on template instance\n      this.stripeKey.set(key);\n\n      // load client side Stripe libs\n      ReactiveStripe.load(key);\n    }\n  });\n});\n\n\nTemplate.launchdockDashboard.helpers({\n\n  packageData() {\n    return Packages.findOne({\n      name: \"reaction-connect\"\n    });\n  },\n\n  launchdockDataReady() {\n    return Template.instance().ldStackSub.ready();\n  },\n\n  launchdockStack() {\n    return Template.instance().LaunchdockStacks.findOne();\n  },\n\n  trial() {\n    const stack = Template.instance().LaunchdockStacks.findOne();\n    // calculate the trial end date and days remaining\n    let ends;\n    let daysRemaining;\n    let daySuffix;\n\n    if (stack) {\n      const startDate = stack.createdAt;\n      ends = new Date();\n      ends.setDate(startDate.getDate() + 30);\n      const now = new Date();\n      const msPerDay = 24 * 60 * 60 * 1000;\n      const timeLeft = ends.getTime() - now.getTime();\n      const daysLeft = timeLeft / msPerDay;\n      daysRemaining = Math.floor(daysLeft);\n      daySuffix = daysRemaining === 1 ? \" day\" : \" days\";\n    }\n    return {\n      ends: moment(ends).format(\"MMMM Do YYYY\"),\n      daysRemaining: daysRemaining + daySuffix\n    };\n  },\n\n  shopCreatedAt() {\n    const stack = Template.instance().LaunchdockStacks.findOne();\n    return stack ? moment(stack.createdAt).format(\"MMMM Do YYYY, h:mma\") : \"\";\n  },\n\n  isSubscribed() {\n    const user = Template.instance().LaunchdockUsers.findOne();\n    return !!(user && user.subscription && user.subscription.status === \"active\");\n  },\n\n  plan() {\n    const user = Template.instance().LaunchdockUsers.findOne();\n    return user && user.subscription ? user.subscription.plan.name : null;\n  },\n\n  nextPayment() {\n    const user = Template.instance().LaunchdockUsers.findOne();\n    if (user && user.subscription) {\n      const nextPayment = user.subscription.next_payment;\n      return moment(nextPayment).format(\"LL\");\n    }\n    return null;\n  },\n\n  yearlyPaymentDate() {\n    const today = new Date();\n    const nextDue = new Date();\n    nextDue.setDate(today.getDate() + 365);\n\n    return moment(nextDue).format(\"LL\");\n  }\n});\n\n\nTemplate.launchdockDashboard.events({\n  // open settings panel\n  \"click [data-event-action=showLaunchdockSettings]\"() {\n    Reaction.showActionView({\n      label: \"SSL Settings\",\n      template: \"connectSettings\",\n      data: this\n    });\n  },\n\n  // change UI based on which subscription option is chosen\n  \"change input[name='plan-choice']\"(e, t) {\n    const plan = t.$(\"input[name='plan-choice']:checked\").val();\n\n    let dueToday;\n    let term;\n\n    if (plan === \"Yearly\") {\n      dueToday = \"$540 for 12 months\";\n      term = dueToday;\n      daysFromNow = 365;\n    } else {\n      dueToday = \"$50 for first month\";\n      term = \"$50 per month\";\n      daysFromNow = 30;\n    }\n\n    const today = new Date();\n    const nextDue = new Date();\n    nextDue.setDate(today.getDate() + daysFromNow);\n\n    t.$(\".price\").text(dueToday);\n    t.$(\".term\").text(term);\n    t.$(\".next-due\").text(moment(nextDue).format(\"LL\"));\n  },\n\n  // trigger subscription checkout\n  \"click .checkout\"(e, t) {\n    e.preventDefault();\n\n    const stripeKey = Template.instance().stripeKey.get();\n\n    if (!stripeKey) {\n      Alerts.add(\"Unable to process a payment. Please contact support.\", \"danger\");\n    }\n\n    const plan = t.$(\"input[name='plan-choice']:checked\").val();\n\n    let price;\n\n    if (plan === \"Yearly\") {\n      price = 54000;\n    } else {\n      price = 5000;\n    }\n\n    const user = Meteor.user();\n\n    const charge = StripeCheckout.configure({\n      key: stripeKey,\n      image: \"https://reactioncommerce.com/images/reaction-logo.png\",\n      locale: \"auto\",\n      email: user.emails[0].address,\n      panelLabel: `Subscribe (${plan.toLowerCase()})`,\n      token: (token) => {\n        const options = {\n          cardToken: token.id,\n          plan: plan.toLowerCase(),\n          stackId: user.services.launchdock.stackId\n        };\n\n        const launchdock = Launchdock.connect();\n\n        launchdock.call(\"stripe/createCustomerAndSubscribe\", options, (err) => {\n          if (err) {\n            Alerts.add(\"Unable to process a payment. Please contact support.\", \"danger\");\n          } else {\n            Alerts.add(\"Thank you for your payment!\", \"success\", {\n              autoHide: true\n            });\n          }\n        });\n      }\n    });\n\n    charge.open({\n      name: \"Reaction Commerce\",\n      description: `${plan} Subscription`,\n      amount: price\n    });\n  }\n});\n"]},"hash":"23ebbf0ce107d6d38e41ecd23cb2c5e9657b1a70"}
