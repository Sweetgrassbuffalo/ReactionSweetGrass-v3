{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/lib/collections","imported":["Cart"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"./checkout.html","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/checkout/client/templates/checkout/checkout.js","filenameRelative":"/imports/plugins/core/checkout/client/templates/checkout/checkout.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/checkout/client/templates/checkout/checkout.js"],"names":["Reaction","Cart","Meteor","Template","cartCheckout","helpers","cart","Subscriptions","ready","findOne","onCreated","workflow","status","call","_id","checkoutSteps","isCompleted","isPending","template","checkoutStepBadge","checkoutStepBadgeClass","workflowStep","instance","data"],"mappings":"AAAA,IAAS;AAAT,OAAyB,WAAzB;;;;;;;;;;;;;;;;;;;;;;;kBACA,AAAS,AAAY,AACrB,AAAS,A,AAAc,AACvB,AAAS,AAAgB,AACzB,AAAO,AAEP,AACA;AACA;AACA;;AAEA,AAAS,AAAa,AAAQ,AAC5B,AAAO;AACL,AAAI,SAAS;oBACX,AAAO,AAAK,AACb;;kBACD;AAAA,AAAO,AACR;;;AANH,AAA8B,AAU9B,AAAS,AAAa,AAAU,AAAY,AAC1C,AAAI,AAAS,AAAc,AAAK,AAAS;AATvC,AAAI,AAAuB,AAAK,AAAS,AACvC;AASF,SAAM,AAAO,aAAb,AAAa,AAAK;2CAClB;AAAI,QAAQ,OAAK,KAAjB,AAAI,AAAyB,AAAK,AAAS,AAAW,AAAO,AACzD;;iEACF;AAAA,AAAO,AAAK,AAA6B,AAAoB,AAAiB,AAAK,AACpF;yFACF;AAPH,AAQC;A,AAED;IAKA,AAAS,AAAc,AAAQ,AAC7B,AAAa,AAAY,AACvB,AAAI,AAAK,AAAW,AAAM;;;;;AACxB,SAAO,AAAK,cAAZ;;8BAEF;AAAO,aAAP,KAL2B,AAM5B;AAED;;WAAW,AAAY,AACrB;AAAA,AAAI,AAAK,AAAW,AAAK,AAAU,AACjC,AAAO,AAAK,AACb;;uCACD;AAAO,aAAP,KACD;AAbH,AAA+B,A;;AAgB/B;AAGA,AAAS,AAAkB,AAAQ;AAf9B,IAgBH,AAAwB,AAAY,AAClC,AAAM,AAAe,AAAS,AAAW,AACzC;;;AACA,AAAI,SAAa,kBAAb,AAAwB;AAC1B,AAAO,sCACR;iDACD;;QAAA,AAAO,uEACR;aARH,AAAmC;;;;;AAI/B,AAAI,AAAgC,AAAa,AAAW,AAAK,AAAU,AACzE","file":"/imports/plugins/core/checkout/client/templates/checkout/checkout.js.map","sourcesContent":["import { Reaction } from \"/client/api\";\nimport { Cart } from \"/lib/collections\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport \"./checkout.html\";\n\n//\n// cartCheckout is a wrapper template\n// controlling the load order of checkout step templates\n//\n\nTemplate.cartCheckout.helpers({\n  cart() {\n    if (Reaction.Subscriptions.Cart.ready()) {\n      return Cart.findOne();\n    }\n    return {};\n  }\n});\n\n\nTemplate.cartCheckout.onCreated(function () {\n  if (Reaction.Subscriptions.Cart.ready()) {\n    const cart = Cart.findOne();\n    if (cart && cart.workflow && cart.workflow.status === \"new\") {\n        // if user logged in as normal user, we must pass it through the first stage\n      Meteor.call(\"workflow/pushCartWorkflow\", \"coreCartWorkflow\", \"checkoutLogin\", cart._id);\n    }\n  }\n});\n\n/**\n * checkoutSteps Helpers\n * helper isPending evaluates that this is\n * the current step, or has been processed already\n */\nTemplate.checkoutSteps.helpers({\n  isCompleted: function () {\n    if (this.status === true) {\n      return this.status;\n    }\n    return false;\n  },\n\n  isPending: function () {\n    if (this.status === this.template) {\n      return this.status;\n    }\n    return false;\n  }\n});\n\n/**\n * checkoutStepBadge Helpers\n */\nTemplate.checkoutStepBadge.helpers({\n  checkoutStepBadgeClass: function () {\n    const workflowStep = Template.instance().data;\n    // let currentStatus = Cart.findOne().workflow.status;\n    if (workflowStep.status === true || workflowStep.status === this.template) {\n      return \"active\";\n    }\n    return \"\";\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/checkout/client/templates/checkout/checkout.js.map","sourceFileName":"/imports/plugins/core/checkout/client/templates/checkout/checkout.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"checkout"},"ignored":false,"code":"var Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 0);\nvar Cart = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 3);\nmodule.importSync(\"./checkout.html\");\n//\n// cartCheckout is a wrapper template\n// controlling the load order of checkout step templates\n//\nTemplate.cartCheckout.helpers({\n  cart: function () {\n    if (Reaction.Subscriptions.Cart.ready()) {\n      return Cart.findOne();\n    }\n\n    return {};\n  }\n});\nTemplate.cartCheckout.onCreated(function () {\n  if (Reaction.Subscriptions.Cart.ready()) {\n    var cart = Cart.findOne();\n\n    if (cart && cart.workflow && cart.workflow.status === \"new\") {\n      // if user logged in as normal user, we must pass it through the first stage\n      Meteor.call(\"workflow/pushCartWorkflow\", \"coreCartWorkflow\", \"checkoutLogin\", cart._id);\n    }\n  }\n}); /**\n     * checkoutSteps Helpers\n     * helper isPending evaluates that this is\n     * the current step, or has been processed already\n     */\nTemplate.checkoutSteps.helpers({\n  isCompleted: function () {\n    if (this.status === true) {\n      return this.status;\n    }\n\n    return false;\n  },\n  isPending: function () {\n    if (this.status === this.template) {\n      return this.status;\n    }\n\n    return false;\n  }\n}); /**\n     * checkoutStepBadge Helpers\n     */\nTemplate.checkoutStepBadge.helpers({\n  checkoutStepBadgeClass: function () {\n    var workflowStep = Template.instance().data; // let currentStatus = Cart.findOne().workflow.status;\n\n    if (workflowStep.status === true || workflowStep.status === this.template) {\n      return \"active\";\n    }\n\n    return \"\";\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/checkout/client/templates/checkout/checkout.js"],"names":["Reaction","Cart","Meteor","Template","cartCheckout","helpers","cart","Subscriptions","ready","findOne","onCreated","workflow","status","call","_id","checkoutSteps","isCompleted","isPending","template","checkoutStepBadge","checkoutStepBadgeClass","workflowStep","instance","data"],"mappings":"AAAA,IAAS;AAAT,OAAyB,WAAzB;;;;;;;;;;;;;;;;;;;;;;;kBACA,AAAS,AAAY,AACrB,AAAS,A,AAAc,AACvB,AAAS,AAAgB,AACzB,AAAO,AAEP,AACA;AACA;AACA;;AAEA,AAAS,AAAa,AAAQ,AAC5B,AAAO;AACL,AAAI,SAAS;oBACX,AAAO,AAAK,AACb;;kBACD;AAAA,AAAO,AACR;;;AANH,AAA8B,AAU9B,AAAS,AAAa,AAAU,AAAY,AAC1C,AAAI,AAAS,AAAc,AAAK,AAAS;AATvC,AAAI,AAAuB,AAAK,AAAS,AACvC;AASF,SAAM,AAAO,aAAb,AAAa,AAAK;2CAClB;AAAI,QAAQ,OAAK,KAAjB,AAAI,AAAyB,AAAK,AAAS,AAAW,AAAO,AACzD;;iEACF;AAAA,AAAO,AAAK,AAA6B,AAAoB,AAAiB,AAAK,AACpF;yFACF;AAPH,AAQC;A,AAED;IAKA,AAAS,AAAc,AAAQ,AAC7B,AAAa,AAAY,AACvB,AAAI,AAAK,AAAW,AAAM;;;;;AACxB,SAAO,AAAK,cAAZ;;8BAEF;AAAO,aAAP,KAL2B,AAM5B;AAED;;WAAW,AAAY,AACrB;AAAA,AAAI,AAAK,AAAW,AAAK,AAAU,AACjC,AAAO,AAAK,AACb;;uCACD;AAAO,aAAP,KACD;AAbH,AAA+B,A;;AAgB/B;AAGA,AAAS,AAAkB,AAAQ;AAf9B,IAgBH,AAAwB,AAAY,AAClC,AAAM,AAAe,AAAS,AAAW,AACzC;;;AACA,AAAI,SAAa,kBAAb,AAAwB;AAC1B,AAAO,sCACR;iDACD;;QAAA,AAAO,uEACR;aARH,AAAmC;;;;;AAI/B,AAAI,AAAgC,AAAa,AAAW,AAAK,AAAU,AACzE","file":"/imports/plugins/core/checkout/client/templates/checkout/checkout.js.map","sourcesContent":["import { Reaction } from \"/client/api\";\nimport { Cart } from \"/lib/collections\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport \"./checkout.html\";\n\n//\n// cartCheckout is a wrapper template\n// controlling the load order of checkout step templates\n//\n\nTemplate.cartCheckout.helpers({\n  cart() {\n    if (Reaction.Subscriptions.Cart.ready()) {\n      return Cart.findOne();\n    }\n    return {};\n  }\n});\n\n\nTemplate.cartCheckout.onCreated(function () {\n  if (Reaction.Subscriptions.Cart.ready()) {\n    const cart = Cart.findOne();\n    if (cart && cart.workflow && cart.workflow.status === \"new\") {\n        // if user logged in as normal user, we must pass it through the first stage\n      Meteor.call(\"workflow/pushCartWorkflow\", \"coreCartWorkflow\", \"checkoutLogin\", cart._id);\n    }\n  }\n});\n\n/**\n * checkoutSteps Helpers\n * helper isPending evaluates that this is\n * the current step, or has been processed already\n */\nTemplate.checkoutSteps.helpers({\n  isCompleted: function () {\n    if (this.status === true) {\n      return this.status;\n    }\n    return false;\n  },\n\n  isPending: function () {\n    if (this.status === this.template) {\n      return this.status;\n    }\n    return false;\n  }\n});\n\n/**\n * checkoutStepBadge Helpers\n */\nTemplate.checkoutStepBadge.helpers({\n  checkoutStepBadgeClass: function () {\n    const workflowStep = Template.instance().data;\n    // let currentStatus = Cart.findOne().workflow.status;\n    if (workflowStep.status === true || workflowStep.status === this.template) {\n      return \"active\";\n    }\n    return \"\";\n  }\n});\n"]},"hash":"26fddb31f78850293cf0415f5d3462c2bd9f37b7"}
