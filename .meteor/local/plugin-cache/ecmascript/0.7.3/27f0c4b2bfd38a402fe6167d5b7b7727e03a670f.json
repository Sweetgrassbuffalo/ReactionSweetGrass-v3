{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"/lib/api/compose","imported":["composeWithTracker"],"specifiers":[{"kind":"named","imported":"composeWithTracker","local":"composeWithTracker"}]},{"source":"../components/publishControls","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PublishControls"}]},{"source":"/lib/collections","imported":["Revisions"],"specifiers":[{"kind":"named","imported":"Revisions","local":"Revisions"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/imports/plugins/core/ui/client/providers/translationProvider","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"TranslationProvider"}]},{"source":"../../lib/api","imported":["isRevisionControlEnabled"],"specifiers":[{"kind":"named","imported":"isRevisionControlEnabled","local":"isRevisionControlEnabled"}]},{"source":"/client/api","imported":["Reaction","i18next"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"i18next","local":"i18next"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/revisions/client/containers/publishContainer.js","filenameRelative":"/imports/plugins/core/revisions/client/containers/publishContainer.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/revisions/client/containers/publishContainer.js"],"names":["React","Component","PropTypes","composeWithTracker","PublishControls","Revisions","Meteor","TranslationProvider","isRevisionControlEnabled","Reaction","i18next","PublishContainer","handlePublishClick","revisions","Array","isArray","documentIds","map","revision","parentDocument","documentType","documentId","documentIdsSet","Set","from","call","error","result","status","message","t","defaultValue","Alerts","toast","props","onPublishSuccess","handlePublishActions","event","action","onAction","render","documents","isEnabled","onVisibilityChange","isPreview","propTypes","arrayOf","string","object","bool","func","composer","onData","viewAs","getUserPreferences","length","subscription","subscribe","ready","find","$in","$nin","fetch"],"mappings":"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","file":"/imports/plugins/core/revisions/client/containers/publishContainer.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { composeWithTracker } from \"/lib/api/compose\";\nimport PublishControls from \"../components/publishControls\";\nimport { Revisions } from \"/lib/collections\";\nimport { Meteor } from \"meteor/meteor\";\nimport TranslationProvider from \"/imports/plugins/core/ui/client/providers/translationProvider\";\nimport { isRevisionControlEnabled } from \"../../lib/api\";\nimport { Reaction, i18next } from \"/client/api\";\n\n/*\n * PublishContainer is a container component connected to Meteor data source.\n */\nclass PublishContainer extends Component {\n  handlePublishClick = (revisions) => {\n    if (Array.isArray(revisions)) {\n      let documentIds = revisions.map((revision) => {\n        if (revision.parentDocument && revision.documentType !== \"product\") {\n          return revision.parentDocument;\n        }\n        return revision.documentId;\n      });\n\n      const documentIdsSet = new Set(documentIds); // ensures they are unique\n      documentIds = Array.from(documentIdsSet);\n      Meteor.call(\"revisions/publish\", documentIds, (error, result) => {\n        if (result && result.status === \"success\") {\n          const message = i18next.t(\"revisions.changedPublished\", {\n            defaultValue: \"Changes published successfully\"\n          });\n\n          Alerts.toast(message, \"success\");\n\n          if (this.props.onPublishSuccess) {\n            this.props.onPublishSuccess(result);\n          }\n        } else {\n          const message = i18next.t(\"revisions.noChangesPublished\", {\n            defaultValue: \"There are no changes to publish\"\n          });\n\n          Alerts.toast(message, \"warning\");\n        }\n      });\n    }\n  }\n\n  handlePublishActions = (event, action, documentIds) => {\n    switch (action) {\n      case \"archive\":\n        if (this.props.onAction) {\n          this.props.onAction(event, action, this.props.documentIds);\n        }\n        break;\n      case \"discard\":\n        Meteor.call(\"revisions/discard\", documentIds, (error, result) => {\n          if (result === true) {\n            const message = i18next.t(\"revisions.changesDiscarded\", {\n              defaultValue: \"Changes discarded successfully\"\n            });\n\n            Alerts.toast(message, \"success\");\n          } else {\n            const message = i18next.t(\"revisions.noChangesDiscarded\", {\n              defaultValue: \"There are no changes to discard\"\n            });\n\n            Alerts.toast(message, \"warning\");\n          }\n        });\n        break;\n      default:\n    }\n  }\n\n  render() {\n    return (\n      <TranslationProvider>\n        <PublishControls\n          documentIds={this.props.documentIds}\n          documents={this.props.documents}\n          isEnabled={this.props.isEnabled}\n          onPublishClick={this.handlePublishClick}\n          onAction={this.handlePublishActions}\n          onVisibilityChange={this.props.onVisibilityChange}\n          revisions={this.props.revisions}\n          isPreview={this.props.isPreview}\n        />\n      </TranslationProvider>\n    );\n  }\n}\n\nPublishContainer.propTypes = {\n  documentIds: PropTypes.arrayOf(PropTypes.string),\n  documents: PropTypes.arrayOf(PropTypes.object),\n  isEnabled: PropTypes.bool,\n  isPreview: PropTypes.bool,\n  onAction: PropTypes.func,\n  onPublishSuccess: PropTypes.func,\n  onVisibilityChange: PropTypes.func,\n  revisions: PropTypes.arrayOf(PropTypes.object)\n};\n\nfunction composer(props, onData) {\n  const viewAs = Reaction.getUserPreferences(\"reaction-dashboard\", \"viewAs\", \"administrator\");\n\n  if (Array.isArray(props.documentIds) && props.documentIds.length) {\n    const subscription = Meteor.subscribe(\"Revisions\", props.documentIds);\n\n    if (subscription.ready()) {\n      const revisions = Revisions.find({\n        \"$or\": [\n          {\n            documentId: {\n              $in: props.documentIds\n            }\n          },\n          {\n            \"documentData.ancestors\": {\n              $in: props.documentIds\n            }\n          },\n          {\n            parentDocument: {\n              $in: props.documentIds\n            }\n          }\n        ],\n        \"workflow.status\": {\n          $nin: [\n            \"revision/published\"\n          ]\n        }\n      }).fetch();\n\n      onData(null, {\n        isEnabled: isRevisionControlEnabled(),\n        documentIds: props.documentIds,\n        documents: props.documents,\n        revisions,\n        isPreview: viewAs === \"customer\" ? true : false\n      });\n\n      return;\n    }\n  }\n\n  onData(null, {\n    isEnabled: isRevisionControlEnabled(),\n    isPreview: viewAs === \"customer\" ? true : false\n  });\n}\n\nexport default composeWithTracker(composer, null)(PublishContainer);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/revisions/client/containers/publishContainer.js.map","sourceFileName":"/imports/plugins/core/revisions/client/containers/publishContainer.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"publishContainer"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar composeWithTracker = void 0;\nmodule.importSync(\"/lib/api/compose\", {\n  composeWithTracker: function (v) {\n    composeWithTracker = v;\n  }\n}, 1);\nvar PublishControls = void 0;\nmodule.importSync(\"../components/publishControls\", {\n  \"default\": function (v) {\n    PublishControls = v;\n  }\n}, 2);\nvar Revisions = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Revisions: function (v) {\n    Revisions = v;\n  }\n}, 3);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 4);\nvar TranslationProvider = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/providers/translationProvider\", {\n  \"default\": function (v) {\n    TranslationProvider = v;\n  }\n}, 5);\nvar isRevisionControlEnabled = void 0;\nmodule.importSync(\"../../lib/api\", {\n  isRevisionControlEnabled: function (v) {\n    isRevisionControlEnabled = v;\n  }\n}, 6);\nvar Reaction = void 0,\n    i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 7);\n\n/*\n * PublishContainer is a container component connected to Meteor data source.\n */var PublishContainer = function (_Component) {\n  (0, _inherits3.default)(PublishContainer, _Component);\n\n  function PublishContainer() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, PublishContainer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handlePublishClick = function (revisions) {\n      if (Array.isArray(revisions)) {\n        var documentIds = revisions.map(function (revision) {\n          if (revision.parentDocument && revision.documentType !== \"product\") {\n            return revision.parentDocument;\n          }\n\n          return revision.documentId;\n        });\n        var documentIdsSet = new Set(documentIds); // ensures they are unique\n\n        documentIds = Array.from(documentIdsSet);\n        Meteor.call(\"revisions/publish\", documentIds, function (error, result) {\n          if (result && result.status === \"success\") {\n            var message = i18next.t(\"revisions.changedPublished\", {\n              defaultValue: \"Changes published successfully\"\n            });\n            Alerts.toast(message, \"success\");\n\n            if (_this.props.onPublishSuccess) {\n              _this.props.onPublishSuccess(result);\n            }\n          } else {\n            var _message = i18next.t(\"revisions.noChangesPublished\", {\n              defaultValue: \"There are no changes to publish\"\n            });\n\n            Alerts.toast(_message, \"warning\");\n          }\n        });\n      }\n    }, _this.handlePublishActions = function (event, action, documentIds) {\n      switch (action) {\n        case \"archive\":\n          if (_this.props.onAction) {\n            _this.props.onAction(event, action, _this.props.documentIds);\n          }\n\n          break;\n\n        case \"discard\":\n          Meteor.call(\"revisions/discard\", documentIds, function (error, result) {\n            if (result === true) {\n              var message = i18next.t(\"revisions.changesDiscarded\", {\n                defaultValue: \"Changes discarded successfully\"\n              });\n              Alerts.toast(message, \"success\");\n            } else {\n              var _message2 = i18next.t(\"revisions.noChangesDiscarded\", {\n                defaultValue: \"There are no changes to discard\"\n              });\n\n              Alerts.toast(_message2, \"warning\");\n            }\n          });\n          break;\n\n        default:}\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  PublishContainer.prototype.render = function () {\n    function render() {\n      return React.createElement(\n        TranslationProvider,\n        null,\n        React.createElement(PublishControls, {\n          documentIds: this.props.documentIds,\n          documents: this.props.documents,\n          isEnabled: this.props.isEnabled,\n          onPublishClick: this.handlePublishClick,\n          onAction: this.handlePublishActions,\n          onVisibilityChange: this.props.onVisibilityChange,\n          revisions: this.props.revisions,\n          isPreview: this.props.isPreview\n        })\n      );\n    }\n\n    return render;\n  }();\n\n  return PublishContainer;\n}(Component);\n\nPublishContainer.propTypes = {\n  documentIds: PropTypes.arrayOf(PropTypes.string),\n  documents: PropTypes.arrayOf(PropTypes.object),\n  isEnabled: PropTypes.bool,\n  isPreview: PropTypes.bool,\n  onAction: PropTypes.func,\n  onPublishSuccess: PropTypes.func,\n  onVisibilityChange: PropTypes.func,\n  revisions: PropTypes.arrayOf(PropTypes.object)\n};\n\nfunction composer(props, onData) {\n  var viewAs = Reaction.getUserPreferences(\"reaction-dashboard\", \"viewAs\", \"administrator\");\n\n  if (Array.isArray(props.documentIds) && props.documentIds.length) {\n    var subscription = Meteor.subscribe(\"Revisions\", props.documentIds);\n\n    if (subscription.ready()) {\n      var revisions = Revisions.find({\n        \"$or\": [{\n          documentId: {\n            $in: props.documentIds\n          }\n        }, {\n          \"documentData.ancestors\": {\n            $in: props.documentIds\n          }\n        }, {\n          parentDocument: {\n            $in: props.documentIds\n          }\n        }],\n        \"workflow.status\": {\n          $nin: [\"revision/published\"]\n        }\n      }).fetch();\n      onData(null, {\n        isEnabled: isRevisionControlEnabled(),\n        documentIds: props.documentIds,\n        documents: props.documents,\n        revisions: revisions,\n        isPreview: viewAs === \"customer\" ? true : false\n      });\n      return;\n    }\n  }\n\n  onData(null, {\n    isEnabled: isRevisionControlEnabled(),\n    isPreview: viewAs === \"customer\" ? true : false\n  });\n}\n\nmodule.export(\"default\", exports.default = composeWithTracker(composer, null)(PublishContainer));","map":{"version":3,"sources":["/imports/plugins/core/revisions/client/containers/publishContainer.js"],"names":["React","Component","PropTypes","composeWithTracker","PublishControls","Revisions","Meteor","TranslationProvider","isRevisionControlEnabled","Reaction","i18next","PublishContainer","handlePublishClick","revisions","Array","isArray","documentIds","map","revision","parentDocument","documentType","documentId","documentIdsSet","Set","from","call","error","result","status","message","t","defaultValue","Alerts","toast","props","onPublishSuccess","handlePublishActions","event","action","onAction","render","documents","isEnabled","onVisibilityChange","isPreview","propTypes","arrayOf","string","object","bool","func","composer","onData","viewAs","getUserPreferences","length","subscription","subscribe","ready","find","$in","$nin","fetch"],"mappings":"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","file":"/imports/plugins/core/revisions/client/containers/publishContainer.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { composeWithTracker } from \"/lib/api/compose\";\nimport PublishControls from \"../components/publishControls\";\nimport { Revisions } from \"/lib/collections\";\nimport { Meteor } from \"meteor/meteor\";\nimport TranslationProvider from \"/imports/plugins/core/ui/client/providers/translationProvider\";\nimport { isRevisionControlEnabled } from \"../../lib/api\";\nimport { Reaction, i18next } from \"/client/api\";\n\n/*\n * PublishContainer is a container component connected to Meteor data source.\n */\nclass PublishContainer extends Component {\n  handlePublishClick = (revisions) => {\n    if (Array.isArray(revisions)) {\n      let documentIds = revisions.map((revision) => {\n        if (revision.parentDocument && revision.documentType !== \"product\") {\n          return revision.parentDocument;\n        }\n        return revision.documentId;\n      });\n\n      const documentIdsSet = new Set(documentIds); // ensures they are unique\n      documentIds = Array.from(documentIdsSet);\n      Meteor.call(\"revisions/publish\", documentIds, (error, result) => {\n        if (result && result.status === \"success\") {\n          const message = i18next.t(\"revisions.changedPublished\", {\n            defaultValue: \"Changes published successfully\"\n          });\n\n          Alerts.toast(message, \"success\");\n\n          if (this.props.onPublishSuccess) {\n            this.props.onPublishSuccess(result);\n          }\n        } else {\n          const message = i18next.t(\"revisions.noChangesPublished\", {\n            defaultValue: \"There are no changes to publish\"\n          });\n\n          Alerts.toast(message, \"warning\");\n        }\n      });\n    }\n  }\n\n  handlePublishActions = (event, action, documentIds) => {\n    switch (action) {\n      case \"archive\":\n        if (this.props.onAction) {\n          this.props.onAction(event, action, this.props.documentIds);\n        }\n        break;\n      case \"discard\":\n        Meteor.call(\"revisions/discard\", documentIds, (error, result) => {\n          if (result === true) {\n            const message = i18next.t(\"revisions.changesDiscarded\", {\n              defaultValue: \"Changes discarded successfully\"\n            });\n\n            Alerts.toast(message, \"success\");\n          } else {\n            const message = i18next.t(\"revisions.noChangesDiscarded\", {\n              defaultValue: \"There are no changes to discard\"\n            });\n\n            Alerts.toast(message, \"warning\");\n          }\n        });\n        break;\n      default:\n    }\n  }\n\n  render() {\n    return (\n      <TranslationProvider>\n        <PublishControls\n          documentIds={this.props.documentIds}\n          documents={this.props.documents}\n          isEnabled={this.props.isEnabled}\n          onPublishClick={this.handlePublishClick}\n          onAction={this.handlePublishActions}\n          onVisibilityChange={this.props.onVisibilityChange}\n          revisions={this.props.revisions}\n          isPreview={this.props.isPreview}\n        />\n      </TranslationProvider>\n    );\n  }\n}\n\nPublishContainer.propTypes = {\n  documentIds: PropTypes.arrayOf(PropTypes.string),\n  documents: PropTypes.arrayOf(PropTypes.object),\n  isEnabled: PropTypes.bool,\n  isPreview: PropTypes.bool,\n  onAction: PropTypes.func,\n  onPublishSuccess: PropTypes.func,\n  onVisibilityChange: PropTypes.func,\n  revisions: PropTypes.arrayOf(PropTypes.object)\n};\n\nfunction composer(props, onData) {\n  const viewAs = Reaction.getUserPreferences(\"reaction-dashboard\", \"viewAs\", \"administrator\");\n\n  if (Array.isArray(props.documentIds) && props.documentIds.length) {\n    const subscription = Meteor.subscribe(\"Revisions\", props.documentIds);\n\n    if (subscription.ready()) {\n      const revisions = Revisions.find({\n        \"$or\": [\n          {\n            documentId: {\n              $in: props.documentIds\n            }\n          },\n          {\n            \"documentData.ancestors\": {\n              $in: props.documentIds\n            }\n          },\n          {\n            parentDocument: {\n              $in: props.documentIds\n            }\n          }\n        ],\n        \"workflow.status\": {\n          $nin: [\n            \"revision/published\"\n          ]\n        }\n      }).fetch();\n\n      onData(null, {\n        isEnabled: isRevisionControlEnabled(),\n        documentIds: props.documentIds,\n        documents: props.documents,\n        revisions,\n        isPreview: viewAs === \"customer\" ? true : false\n      });\n\n      return;\n    }\n  }\n\n  onData(null, {\n    isEnabled: isRevisionControlEnabled(),\n    isPreview: viewAs === \"customer\" ? true : false\n  });\n}\n\nexport default composeWithTracker(composer, null)(PublishContainer);\n"]},"hash":"27f0c4b2bfd38a402fe6167d5b7b7727e03a670f"}
