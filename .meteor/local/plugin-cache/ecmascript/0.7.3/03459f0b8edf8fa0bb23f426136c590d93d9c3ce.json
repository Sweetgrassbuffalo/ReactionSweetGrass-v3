{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/api","imported":["ReactionProduct"],"specifiers":[{"kind":"named","imported":"ReactionProduct","local":"ReactionProduct"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/product-variant/client/templates/products/productGrid/notice.js","filenameRelative":"/imports/plugins/included/product-variant/client/templates/products/productGrid/notice.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/product-variant/client/templates/products/productGrid/notice.js"],"names":["ReactionProduct","Template","gridNotice","helpers","isLowQuantity","topVariants","getTopVariants","_id","topVariant","inventoryThreshold","lowInventoryWarningThreshold","inventoryQuantity","getVariantQuantity","isSoldOut","isBackorder"],"mappings":"AAAA,IAAS;AAAT,OAAgC,WAAhC,A,AAEA;;;;;AAGA,AAAS,AAAW,AAAQ,AAC1B,AAAe,AAAY;;YACnB,WAAc;6BAEpB;AAAK,QAAM,cAAX,AAAyB,gBAAzB,AAAsC,oBACpC,AAAM,AAAqB,AAAW,AACtC;;AAAM,yBAAoB;AAA1B,AAA0B,AAAgB,AAAmB;;;;;;;;;;;;0CAE7D;AAAI,8BAAA,AAAsB,AAAK,gBAAsB,mBAArD,AAAwE,AACtE,AAAO,AACR;;8EACF;;AACD;AAZwB,AAYxB,AAAO,AACR;;WACD;AAAW,AAAY,AACrB;AAAM,aAAc,YAApB,AAAoB,AAAgB,AAAe,AAAK;0DAExD,AAAK,AAAM,AAAc,AAAa,AACpC;;AAAM,0BAAoB;AAA1B,AAA0B,AAAgB,AAAmB;;;;;;;;;;;;iEAE7D,AAAI,AAAoB,AAAG,AACzB;;UAAA,AAAO,uBACR;eACF;;AACD;;WAAA,AAAO,AACR;AAzByB,AA0B1B;eAAa,YAAY,AACvB;WAAO,KAAP,AAAY,AACb;AA5BH,AAA4B;AAExB,AAAoB,AAAgB,AAAe,AAAK,CAAxD","file":"/imports/plugins/included/product-variant/client/templates/products/productGrid/notice.js.map","sourcesContent":["import { ReactionProduct } from \"/lib/api\";\n\n/**\n * gridNotice helpers\n */\nTemplate.gridNotice.helpers({\n  isLowQuantity: function () {\n    const topVariants = ReactionProduct.getTopVariants(this._id);\n\n    for (const topVariant of topVariants) {\n      const inventoryThreshold = topVariant.lowInventoryWarningThreshold;\n      const inventoryQuantity = ReactionProduct.getVariantQuantity(topVariant);\n\n      if (inventoryQuantity !== 0 && inventoryThreshold >= inventoryQuantity) {\n        return true;\n      }\n    }\n    return false;\n  },\n  isSoldOut: function () {\n    const topVariants = ReactionProduct.getTopVariants(this._id);\n\n    for (const topVariant of topVariants) {\n      const inventoryQuantity = ReactionProduct.getVariantQuantity(topVariant);\n\n      if (inventoryQuantity > 0) {\n        return false;\n      }\n    }\n    return true;\n  },\n  isBackorder: function () {\n    return this.isBackorder;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/product-variant/client/templates/products/productGrid/notice.js.map","sourceFileName":"/imports/plugins/included/product-variant/client/templates/products/productGrid/notice.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"notice"},"ignored":false,"code":"var ReactionProduct = void 0;\nmodule.importSync(\"/lib/api\", {\n  ReactionProduct: function (v) {\n    ReactionProduct = v;\n  }\n}, 0);\n/**\n * gridNotice helpers\n */Template.gridNotice.helpers({\n  isLowQuantity: function () {\n    var topVariants = ReactionProduct.getTopVariants(this._id);\n\n    for (var _iterator = topVariants, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var topVariant = _ref;\n      var inventoryThreshold = topVariant.lowInventoryWarningThreshold;\n      var inventoryQuantity = ReactionProduct.getVariantQuantity(topVariant);\n\n      if (inventoryQuantity !== 0 && inventoryThreshold >= inventoryQuantity) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  isSoldOut: function () {\n    var topVariants = ReactionProduct.getTopVariants(this._id);\n\n    for (var _iterator2 = topVariants, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var topVariant = _ref2;\n      var inventoryQuantity = ReactionProduct.getVariantQuantity(topVariant);\n\n      if (inventoryQuantity > 0) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  isBackorder: function () {\n    return this.isBackorder;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/product-variant/client/templates/products/productGrid/notice.js"],"names":["ReactionProduct","Template","gridNotice","helpers","isLowQuantity","topVariants","getTopVariants","_id","topVariant","inventoryThreshold","lowInventoryWarningThreshold","inventoryQuantity","getVariantQuantity","isSoldOut","isBackorder"],"mappings":"AAAA,IAAS;AAAT,OAAgC,WAAhC,A,AAEA;;;;;AAGA,AAAS,AAAW,AAAQ,AAC1B,AAAe,AAAY;;YACnB,WAAc;6BAEpB;AAAK,QAAM,cAAX,AAAyB,gBAAzB,AAAsC,oBACpC,AAAM,AAAqB,AAAW,AACtC;;AAAM,yBAAoB;AAA1B,AAA0B,AAAgB,AAAmB;;;;;;;;;;;;0CAE7D;AAAI,8BAAA,AAAsB,AAAK,gBAAsB,mBAArD,AAAwE,AACtE,AAAO,AACR;;8EACF;;AACD;AAZwB,AAYxB,AAAO,AACR;;WACD;AAAW,AAAY,AACrB;AAAM,aAAc,YAApB,AAAoB,AAAgB,AAAe,AAAK;0DAExD,AAAK,AAAM,AAAc,AAAa,AACpC;;AAAM,0BAAoB;AAA1B,AAA0B,AAAgB,AAAmB;;;;;;;;;;;;iEAE7D,AAAI,AAAoB,AAAG,AACzB;;UAAA,AAAO,uBACR;eACF;;AACD;;WAAA,AAAO,AACR;AAzByB,AA0B1B;eAAa,YAAY,AACvB;WAAO,KAAP,AAAY,AACb;AA5BH,AAA4B;AAExB,AAAoB,AAAgB,AAAe,AAAK,CAAxD","file":"/imports/plugins/included/product-variant/client/templates/products/productGrid/notice.js.map","sourcesContent":["import { ReactionProduct } from \"/lib/api\";\n\n/**\n * gridNotice helpers\n */\nTemplate.gridNotice.helpers({\n  isLowQuantity: function () {\n    const topVariants = ReactionProduct.getTopVariants(this._id);\n\n    for (const topVariant of topVariants) {\n      const inventoryThreshold = topVariant.lowInventoryWarningThreshold;\n      const inventoryQuantity = ReactionProduct.getVariantQuantity(topVariant);\n\n      if (inventoryQuantity !== 0 && inventoryThreshold >= inventoryQuantity) {\n        return true;\n      }\n    }\n    return false;\n  },\n  isSoldOut: function () {\n    const topVariants = ReactionProduct.getTopVariants(this._id);\n\n    for (const topVariant of topVariants) {\n      const inventoryQuantity = ReactionProduct.getVariantQuantity(topVariant);\n\n      if (inventoryQuantity > 0) {\n        return false;\n      }\n    }\n    return true;\n  },\n  isBackorder: function () {\n    return this.isBackorder;\n  }\n});\n"]},"hash":"03459f0b8edf8fa0bb23f426136c590d93d9c3ce"}
