{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/find","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_find"}]},{"source":"lodash/map","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_map"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/methods/accounts/accounts-password.js","filenameRelative":"/server/methods/accounts/accounts-password.js","inputSourceMap":{"version":3,"sources":["/server/methods/accounts/accounts-password.js"],"names":["Meteor","check","Accounts","Reaction","Logger","methods","options","email","String","user","findUserByEmail","error","Error","emails","caseInsensitiveEmail","toLowerCase","sendResetPasswordEmail","_id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAc,AACvB,AAAS,AAAa,AACtB,AAAS,AAAgB,AACzB,AAAS,AAAU,AAAc;AAEjC,OAAA,AAAO;AAGH,AAAM,AAAS,wDACb;UAAO;aAGT,AAAM,AAAO,AAAS,AAAgB,AAAQ,AAE9C;AANA,AAAe;AAMX,AAAC,QAAL,AAAW,wCACT,AAAO,AAAM,AACb;;SAAM,MAAN,AAAM,AAAI,AAAO,AAAM,AAAkB,AAC1C;;+CAED;AAAA,AAAM,AAAS,AAAM,AAAK,AAAU,AAAI,AAExC;;QAAM,mBAAuB,AAAO,cAAP,AAAe,AAAC,AAAU,AACrD,AAAO,AAAM,AAAkB,AAAQ,AAAM,AAC9C;;AAFD,AAA6B;mDAI7B;AAAA,AAAS,AAAS,AAAuB,AAAK,AAAK,AACpD;;uDArBH,AAAe;;AAAA,AAEb,AAAkC,AAAS,AACzC","file":"/server/methods/accounts/accounts-password.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Accounts } from \"meteor/accounts-base\";\nimport { Reaction, Logger } from \"/server/api\";\n\nMeteor.methods({\n\n  \"accounts/sendResetPasswordEmail\"(options) {\n    check(options, {\n      email: String\n    });\n\n    const user = Accounts.findUserByEmail(options.email);\n\n    if (!user) {\n      Logger.error(\"accounts/sendResetPasswordEmail - User not found\");\n      throw new Meteor.Error(\"user-not-found\", \"User not found\");\n    }\n\n    const emails = _.map(user.emails || [], \"address\");\n\n    const caseInsensitiveEmail = _.find(emails, (email) => {\n      return email.toLowerCase() === options.email.toLowerCase();\n    });\n\n    Reaction.Accounts.sendResetPasswordEmail(user._id, caseInsensitiveEmail);\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/methods/accounts/accounts-password.js.map","sourceFileName":"/server/methods/accounts/accounts-password.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"accounts-password"},"ignored":false,"code":"var _find = void 0;\n\nmodule.importSync(\"lodash/find\", {\n  \"default\": function (v) {\n    _find = v;\n  }\n}, 0);\n\nvar _map = void 0;\n\nmodule.importSync(\"lodash/map\", {\n  \"default\": function (v) {\n    _map = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 3);\nvar Accounts = void 0;\nmodule.importSync(\"meteor/accounts-base\", {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 4);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 5);\nMeteor.methods({\n  \"accounts/sendResetPasswordEmail\": function (options) {\n    check(options, {\n      email: String\n    });\n    var user = Accounts.findUserByEmail(options.email);\n\n    if (!user) {\n      Logger.error(\"accounts/sendResetPasswordEmail - User not found\");\n      throw new Meteor.Error(\"user-not-found\", \"User not found\");\n    }\n\n    var emails = _map(user.emails || [], \"address\");\n\n    var caseInsensitiveEmail = _find(emails, function (email) {\n      return email.toLowerCase() === options.email.toLowerCase();\n    });\n\n    Reaction.Accounts.sendResetPasswordEmail(user._id, caseInsensitiveEmail);\n  }\n});","map":{"version":3,"sources":["/server/methods/accounts/accounts-password.js"],"names":["Meteor","check","Accounts","Reaction","Logger","methods","options","email","String","user","findUserByEmail","error","Error","emails","caseInsensitiveEmail","toLowerCase","sendResetPasswordEmail","_id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAc,AACvB,AAAS,AAAa,AACtB,AAAS,AAAgB,AACzB,AAAS,AAAU,AAAc;AAEjC,OAAA,AAAO;AAGH,AAAM,AAAS,wDACb;UAAO;aAGT,AAAM,AAAO,AAAS,AAAgB,AAAQ,AAE9C;AANA,AAAe;AAMX,AAAC,QAAL,AAAW,wCACT,AAAO,AAAM,AACb;;SAAM,MAAN,AAAM,AAAI,AAAO,AAAM,AAAkB,AAC1C;;+CAED;AAAA,AAAM,AAAS,AAAM,AAAK,AAAU,AAAI,AAExC;;QAAM,mBAAuB,AAAO,cAAP,AAAe,AAAC,AAAU,AACrD,AAAO,AAAM,AAAkB,AAAQ,AAAM,AAC9C;;AAFD,AAA6B;mDAI7B;AAAA,AAAS,AAAS,AAAuB,AAAK,AAAK,AACpD;;uDArBH,AAAe;;AAAA,AAEb,AAAkC,AAAS,AACzC","file":"/server/methods/accounts/accounts-password.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Accounts } from \"meteor/accounts-base\";\nimport { Reaction, Logger } from \"/server/api\";\n\nMeteor.methods({\n\n  \"accounts/sendResetPasswordEmail\"(options) {\n    check(options, {\n      email: String\n    });\n\n    const user = Accounts.findUserByEmail(options.email);\n\n    if (!user) {\n      Logger.error(\"accounts/sendResetPasswordEmail - User not found\");\n      throw new Meteor.Error(\"user-not-found\", \"User not found\");\n    }\n\n    const emails = _.map(user.emails || [], \"address\");\n\n    const caseInsensitiveEmail = _.find(emails, (email) => {\n      return email.toLowerCase() === options.email.toLowerCase();\n    });\n\n    Reaction.Accounts.sendResetPasswordEmail(user._id, caseInsensitiveEmail);\n  }\n});\n"]},"hash":"5ac57a5a6ef58e20a3a24ccb67c5c5b3387cb50b"}
