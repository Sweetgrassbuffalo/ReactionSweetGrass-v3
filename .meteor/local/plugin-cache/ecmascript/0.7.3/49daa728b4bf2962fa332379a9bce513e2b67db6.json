{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/client/modules/accounts/helpers","imported":["LoginFormSharedHelpers"],"specifiers":[{"kind":"named","imported":"LoginFormSharedHelpers","local":"LoginFormSharedHelpers"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/accounts/templates/forgot/forgot.js","filenameRelative":"/client/modules/accounts/templates/forgot/forgot.js","inputSourceMap":{"version":3,"sources":["/client/modules/accounts/templates/forgot/forgot.js"],"names":["Meteor","Template","i18next","LoginFormSharedHelpers","loginFormResetPasswordView","events","event","template","preventDefault","emailAddress","$","val","trim","validatedEmail","LoginFormValidation","email","templateInstance","instance","errors","formMessages","set","isEmptyObject","call","error","alerts","info","reason","t","onCreated","uniqueId","Random","id","ReactiveVar","helpers"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAgB,AACzB,AAAS,AAAe,AACxB,AAAS,AAA8B,AAEvC,AAAS,AAA2B,AAAO;AAEzC;AAMA,AAAe,AAAC,AAAO,AAAa,AAClC,AAAM,AAEN,AAAM,AAAe,AAAS,AAAE,AAAsB,AAAM,AAC5D;;;;;KAAM,gCAAiB,UAAvB,AAAuB,AAAoB,AAAM,AACjD;UAAA,AAAM,AAAmB,AAAS,AAClC,AAAM,AAAS,AAEf;QAAiB,eAAjB,SAA8B,EAA9B,AAAkC;mDAElC;AAAI,QAAmB,mBAAvB,AAA6B,SAC3B;QAAA,AAAO,SAAP,AAAe,AAChB;sCAED,AAAI,AAAE,AAAc,AAAY,AAAO,AACrC;;QAAiB,yBAAjB,AAA8B,AAAI,AAChC;aAAQ,QADwB;AADG,AACrC,AAGA,AACA,AACD;;;;AAED,AAAO,gBAAP,AAAY,AAAmC,AAAE,AAAO;AAAxD,UAAwE,AAAC,AAAU,AACjF;AACA;AAAA,AAAI,AAAO,AACT,AAAiB,AAAa,AAAI,AAChC;;gBAAQ,AAAC;;wBADuB;AAAlC,AAGD;AAJD,UAIO,OACL;yBAAA,AAAiB,aAAjB,AAA8B;AACtB,AAAC,mBAAA,AACL,AAAQ,AAAQ,AAAE,AAAwC;AAF5B,AAChC;AAAM,aAD0B;AAAlC;;sEArCR,AAA2C,AA4CxC,A,AAIH;AAlBI,AAaC;AADE;;;AAUP,AAAS,AAA2B,AAAU,AAAM,AAClD,AAAM,AAAW,AAAS,AAE1B,AAAS,AAAW,AAAO;IAH7B,AAIE,AAAS,AAAe,AAAI,AAAY,AACzC,AAGD,AAAS,AAA2B,AAAQ","file":"/client/modules/accounts/templates/forgot/forgot.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { i18next } from \"/client/api\";\nimport { LoginFormSharedHelpers } from \"/client/modules/accounts/helpers\";\n\nTemplate.loginFormResetPasswordView.events({\n\n  /**\n   * Submit the password reset form\n   * @param {Event} event - jQuery Event\n   * @param {Object} template - Blaze Template\n   * @return {void}\n   */\n  \"submit form\": (event, template) => {\n    event.preventDefault();\n\n    const emailAddress = template.$(\".login-input-email\").val().trim();\n    const validatedEmail = LoginFormValidation.email(emailAddress);\n    const templateInstance = Template.instance();\n    const errors = {};\n\n    templateInstance.formMessages.set({});\n\n    if (validatedEmail !== true) {\n      errors.email = validatedEmail;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      });\n      // prevent password reset\n      // return;\n    }\n\n    Meteor.call(\"accounts/sendResetPasswordEmail\", { email: emailAddress }, (error) => {\n      // Show some message confirming result\n      if (error) {\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {\n        templateInstance.formMessages.set({\n          info: [{\n            reason: i18next.t(\"accountsUI.info.passwordResetSend\") || \"Password reset mail sent.\"\n          }]\n        });\n      }\n    });\n  }\n\n});\n\n/**\n * loginFormResetPasswordView\n *\n */\nTemplate.loginFormResetPasswordView.onCreated(() => {\n  const template = Template.instance();\n\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n});\n\n\nTemplate.loginFormResetPasswordView.helpers(LoginFormSharedHelpers);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/accounts/templates/forgot/forgot.js.map","sourceFileName":"/client/modules/accounts/templates/forgot/forgot.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"forgot"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 1);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 2);\nvar LoginFormSharedHelpers = void 0;\nmodule.importSync(\"/client/modules/accounts/helpers\", {\n  LoginFormSharedHelpers: function (v) {\n    LoginFormSharedHelpers = v;\n  }\n}, 3);\nTemplate.loginFormResetPasswordView.events({\n  /**\n   * Submit the password reset form\n   * @param {Event} event - jQuery Event\n   * @param {Object} template - Blaze Template\n   * @return {void}\n   */\"submit form\": function (event, template) {\n    event.preventDefault();\n    var emailAddress = template.$(\".login-input-email\").val().trim();\n    var validatedEmail = LoginFormValidation.email(emailAddress);\n    var templateInstance = Template.instance();\n    var errors = {};\n    templateInstance.formMessages.set({});\n\n    if (validatedEmail !== true) {\n      errors.email = validatedEmail;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      }); // prevent password reset\n      // return;\n    }\n\n    Meteor.call(\"accounts/sendResetPasswordEmail\", {\n      email: emailAddress\n    }, function (error) {\n      // Show some message confirming result\n      if (error) {\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {\n        templateInstance.formMessages.set({\n          info: [{\n            reason: i18next.t(\"accountsUI.info.passwordResetSend\") || \"Password reset mail sent.\"\n          }]\n        });\n      }\n    });\n  }\n}); /**\n     * loginFormResetPasswordView\n     *\n     */\nTemplate.loginFormResetPasswordView.onCreated(function () {\n  var template = Template.instance();\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n});\nTemplate.loginFormResetPasswordView.helpers(LoginFormSharedHelpers);","map":{"version":3,"sources":["/client/modules/accounts/templates/forgot/forgot.js"],"names":["Meteor","Template","i18next","LoginFormSharedHelpers","loginFormResetPasswordView","events","event","template","preventDefault","emailAddress","$","val","trim","validatedEmail","LoginFormValidation","email","templateInstance","instance","errors","formMessages","set","isEmptyObject","call","error","alerts","info","reason","t","onCreated","uniqueId","Random","id","ReactiveVar","helpers"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAgB,AACzB,AAAS,AAAe,AACxB,AAAS,AAA8B,AAEvC,AAAS,AAA2B,AAAO;AAEzC;AAMA,AAAe,AAAC,AAAO,AAAa,AAClC,AAAM,AAEN,AAAM,AAAe,AAAS,AAAE,AAAsB,AAAM,AAC5D;;;;;KAAM,gCAAiB,UAAvB,AAAuB,AAAoB,AAAM,AACjD;UAAA,AAAM,AAAmB,AAAS,AAClC,AAAM,AAAS,AAEf;QAAiB,eAAjB,SAA8B,EAA9B,AAAkC;mDAElC;AAAI,QAAmB,mBAAvB,AAA6B,SAC3B;QAAA,AAAO,SAAP,AAAe,AAChB;sCAED,AAAI,AAAE,AAAc,AAAY,AAAO,AACrC;;QAAiB,yBAAjB,AAA8B,AAAI,AAChC;aAAQ,QADwB;AADG,AACrC,AAGA,AACA,AACD;;;;AAED,AAAO,gBAAP,AAAY,AAAmC,AAAE,AAAO;AAAxD,UAAwE,AAAC,AAAU,AACjF;AACA;AAAA,AAAI,AAAO,AACT,AAAiB,AAAa,AAAI,AAChC;;gBAAQ,AAAC;;wBADuB;AAAlC,AAGD;AAJD,UAIO,OACL;yBAAA,AAAiB,aAAjB,AAA8B;AACtB,AAAC,mBAAA,AACL,AAAQ,AAAQ,AAAE,AAAwC;AAF5B,AAChC;AAAM,aAD0B;AAAlC;;sEArCR,AAA2C,AA4CxC,A,AAIH;AAlBI,AAaC;AADE;;;AAUP,AAAS,AAA2B,AAAU,AAAM,AAClD,AAAM,AAAW,AAAS,AAE1B,AAAS,AAAW,AAAO;IAH7B,AAIE,AAAS,AAAe,AAAI,AAAY,AACzC,AAGD,AAAS,AAA2B,AAAQ","file":"/client/modules/accounts/templates/forgot/forgot.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { i18next } from \"/client/api\";\nimport { LoginFormSharedHelpers } from \"/client/modules/accounts/helpers\";\n\nTemplate.loginFormResetPasswordView.events({\n\n  /**\n   * Submit the password reset form\n   * @param {Event} event - jQuery Event\n   * @param {Object} template - Blaze Template\n   * @return {void}\n   */\n  \"submit form\": (event, template) => {\n    event.preventDefault();\n\n    const emailAddress = template.$(\".login-input-email\").val().trim();\n    const validatedEmail = LoginFormValidation.email(emailAddress);\n    const templateInstance = Template.instance();\n    const errors = {};\n\n    templateInstance.formMessages.set({});\n\n    if (validatedEmail !== true) {\n      errors.email = validatedEmail;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      });\n      // prevent password reset\n      // return;\n    }\n\n    Meteor.call(\"accounts/sendResetPasswordEmail\", { email: emailAddress }, (error) => {\n      // Show some message confirming result\n      if (error) {\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {\n        templateInstance.formMessages.set({\n          info: [{\n            reason: i18next.t(\"accountsUI.info.passwordResetSend\") || \"Password reset mail sent.\"\n          }]\n        });\n      }\n    });\n  }\n\n});\n\n/**\n * loginFormResetPasswordView\n *\n */\nTemplate.loginFormResetPasswordView.onCreated(() => {\n  const template = Template.instance();\n\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n});\n\n\nTemplate.loginFormResetPasswordView.helpers(LoginFormSharedHelpers);\n"]},"hash":"49daa728b4bf2962fa332379a9bce513e2b67db6"}
