{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/cfs:gridfs/gridfs.client.js","filenameRelative":"/packages/cfs:gridfs/gridfs.client.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/cfs:gridfs/gridfs.client.js.map","sourceFileName":"/packages/cfs:gridfs/gridfs.client.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"gridfs.client"},"ignored":false,"code":"/* eslint-disable */ /**\n                      * @public\n                      * @constructor\n                      * @param {String} name - The store name\n                      * @param {Object} options\n                      * @param {Function} [options.beforeSave] - Function to run before saving a file from the client. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\n                      * @param {Number} [options.maxTries=5] - Max times to attempt saving a file\n                      * @returns {undefined}\n                      *\n                      * Creates a GridFS store instance on the client, which is just a shell object\n                      * storing some info.\n                      */FS.Store.GridFS = function (name, options) {\n  var self = this;\n\n  if (!(self instanceof FS.Store.GridFS)) {\n    throw new Error('FS.Store.GridFS missing keyword \"new\"');\n  }\n\n  return new FS.StorageAdapter(name, options, {\n    typeName: \"storage.gridfs\"\n  });\n};","map":{"version":3,"sources":["/packages/cfs:gridfs/gridfs.client.js"],"names":["FS","Store","GridFS","name","options","self","Error","StorageAdapter","typeName"],"mappings":"AAAA,oB,CAEA;;;;;;;;;;;wBAYAA,GAAGC,KAAH,CAASC,MAAT,GAAkB,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACzC,MAAMC,OAAO,IAAb;;AACA,MAAI,EAAEA,gBAAgBL,GAAGC,KAAH,CAASC,MAA3B,CAAJ,EAA2C;AACzC,UAAM,IAAII,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,SAAO,IAAIN,GAAGO,cAAP,CAAsBJ,IAAtB,EAA4BC,OAA5B,EAAqC;AAC1CI,cAAU;AADgC,GAArC,CAAP;AAGD,CATD","file":"/packages/cfs:gridfs/gridfs.client.js.map","sourcesContent":["/* eslint-disable */\n\n/**\n * @public\n * @constructor\n * @param {String} name - The store name\n * @param {Object} options\n * @param {Function} [options.beforeSave] - Function to run before saving a file from the client. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\n * @param {Number} [options.maxTries=5] - Max times to attempt saving a file\n * @returns {undefined}\n *\n * Creates a GridFS store instance on the client, which is just a shell object\n * storing some info.\n */\nFS.Store.GridFS = function (name, options) {\n  const self = this;\n  if (!(self instanceof FS.Store.GridFS))    {\n    throw new Error('FS.Store.GridFS missing keyword \"new\"');\n  }\n\n  return new FS.StorageAdapter(name, options, {\n    typeName: \"storage.gridfs\"\n  });\n};\n"]},"hash":"e0914e0ec20871f66b7094948bea87ce8dcb8ed1"}
