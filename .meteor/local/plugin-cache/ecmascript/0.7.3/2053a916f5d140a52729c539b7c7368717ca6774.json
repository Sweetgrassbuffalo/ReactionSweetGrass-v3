{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/session","imported":["Session"],"specifiers":[{"kind":"named","imported":"Session","local":"Session"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/alanning:roles","imported":["Roles"],"specifiers":[{"kind":"named","imported":"Roles","local":"Roles"}]}],"exports":{"exported":["toggleSession","sessionVariable","positiveState","getCardType","cardNumber","getGuestLoginState"],"specifiers":[{"kind":"local","local":"toggleSession","exported":"toggleSession"},{"kind":"local","local":"sessionVariable","exported":"sessionVariable"},{"kind":"local","local":"positiveState","exported":"positiveState"},{"kind":"local","local":"getCardType","exported":"getCardType"},{"kind":"local","local":"cardNumber","exported":"cardNumber"},{"kind":"local","local":"getGuestLoginState","exported":"getGuestLoginState"}]}}},"options":{"filename":"/client/modules/core/helpers/globals.js","filenameRelative":"/client/modules/core/helpers/globals.js","inputSourceMap":{"version":3,"sources":["/client/modules/core/helpers/globals.js"],"names":["Session","Meteor","Roles","toggleSession","sessionVariable","positiveState","session","get","positive","_","isEqual","set","getCardType","cardNumber","re","RegExp","match","getGuestLoginState","userId","getShopId","allowGuestCheckout","isGuestFlow","equals","isGuest","userIsInRole","isAnonymous","pluck","user","emails"],"mappings":"AAAA,OAAS;AAAT,AAAwB;WAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAT,AAAuB,AAAvB,AACA,AAAS,AAAT,AAAsB,AAAtB,A,AAEA,AACA,AACA,AACA,AACA,A,AACA,A,AAEA,AAOA,AAAO,AAAS,AAAT,AAAuB,AAAvB,AAAwC,AAAxC,AAAuD,AAC5D,AAAM,AAAU,AAAQ,AAAR,AAAY,AAAZ,AAAhB,AACA,AAAM,AAAW,AAAiB,AAAlC,AACA,AAAI,AAAE,AAAF,AAAU,AAAV,AAAoB,AAApB,AAAJ,AAAkC,AAChC;;AAAQ,AAAR,SAAY,cAAZ,AAA6B,AAA7B,gCACD;AAFD,MAEO,sBACL;MAAQ,AAAR,AAAY,WAAZ,AAA6B,iBAA7B,AACD;;;iCACD;SAAO,AAAQ,AAAR,AAAY,AAAZ,AAAP,AACD,A,AAGD;;;;;AAOA,AAAO,AAAS,AAAT,AAAqB,AAArB,AAAiC,AACtC,AAAI,AAAK,AAAI,AAAJ,AAAW,AAAX,AAAT,AACA,AAAI,AAAW,AAAX,AAAiB,AAAjB,AAAyB,AAA7B,AAAmC,AACjC,AAAO,AAAP,AACD;;iCACD;MAAK,KAAI,IAAJ,AAAW,OAAX,AAAL;;qCACA;AAAI,WAAW,AAAX,AAAiB,AAAjB,AAAyB,AAA7B,AAAmC,AACjC;AAAO,AAAP,AACD;;;;qCACD;AAAK,WAAI,AAAJ,AAAW,AAAX,AAAL;AACA;;AAAI,WAAW,OAAX,AAAiB,AAAjB,AAAyB,AAA7B,AAAmC,AACjC;;MAAO,iBAAP,cACD;;AACD;;OAAK,IAAI,AAAJ,OAAW,AAAX,AAAL;;qCACA;AAAI,WAAW,AAAX,AAAiB,AAAjB,AAAyB,AAA7B,AAAmC,AACjC;AAAO,AAAP,AACD;;;AACD,AAAO,AAAP,AACD,A,AAED,AAKA;;AAAO,SAAS,AAAT,qBAA8B,AACnC;MAAI,OAAO,AAAP,aAAoB,AAApB,YAAgC,KAAK,AAAL,AAAhC,eAAoD,KAAK,AAAL,AAAxD,sBAAmF,AACjF;QAAM,cAAc,QAAQ,AAAR,OAAe,AAAf,qBAAoC,AAApC,AAApB,AACA;QAAM,UAAU,MAAM,AAAN,aAAmB,OAAO,AAAP,AAAnB,UAAoC,AAApC,SAA6C,KAAK,AAAL,AAA7C,AAAhB,AACA;QAAM,cAAc,MAAM,AAAN,aAAmB,OAAO,AAAP,AAAnB,UAAoC,AAApC,aAAiD,KAAK,AAAL,AAAjD,AAApB;;iDACA;AAAI,AAAC,aAAD,AAAgB,AAAC,AAAjB,AAA4B,AAAhC,AAA6C,AAC3C;WAAO,KAAP,wCACD,AAFD;AAEO,aAAI,AAAC,AAAD,AAAgB,AAAhB,AAA2B,AAAC,AAAhC,AAA6C,AAClD;AAAO,AAAP,AACD;yEACF,AATD,OASO,AAAI,QAAQ,YAAR,AAAe,AAAf,AAAoC,AAApC,AAA6C,AAAE,AAAF,AAAQ,AAAO,AAAP,AAC3D,AADmD,AAC3C,AAD2C,AAAjD,AACkB,AACvB;WAAO,AAAP,AACD;;;SACD;AAAO,AAAP,AACD","file":"/client/modules/core/helpers/globals.js.map","sourcesContent":["import { Session } from \"meteor/session\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Roles } from \"meteor/alanning:roles\";\n\n// Reaction Globals\n//\n// These should all be removed. PR's happily accepted.\n//\n/* eslint \"no-extend-native\": [2, {\"exceptions\": [\"String\"]}] */\n/* eslint \"no-alert\": 0 */\n\n/**\n * toggleSession\n * quick and easy snippet for toggling sessions\n * @param {String} sessionVariable - string name, see http://docs.meteor.com/#/basic/session\n * @param {String} positiveState - optional, if is is positiveState, set opposite\n * @return {Object} return session value\n */\nexport function toggleSession(sessionVariable, positiveState) {\n  const session = Session.get(sessionVariable);\n  const positive = positiveState || true;\n  if (_.isEqual(positive, session)) {\n    Session.set(sessionVariable, false);\n  } else {\n    Session.set(sessionVariable, positive);\n  }\n  return Session.get(sessionVariable);\n}\n\n\n/**\n * getCardTypes\n * @summary determine the card type and return label\n * @todo needs i18n conversion?\n * @param {String} cardNumber - a credit card number\n * @return {String} card label, ie: visa\n */\nexport function getCardType(cardNumber) {\n  let re = new RegExp(\"^4\");\n  if (cardNumber.match(re) !== null) {\n    return \"visa\";\n  }\n  re = new RegExp(\"^(34|37)\");\n  if (cardNumber.match(re) !== null) {\n    return \"amex\";\n  }\n  re = new RegExp(\"^5[1-5]\");\n  if (cardNumber.match(re) !== null) {\n    return \"mastercard\";\n  }\n  re = new RegExp(\"^6011\");\n  if (cardNumber.match(re) !== null) {\n    return \"discover\";\n  }\n  return \"\";\n}\n\n/**\n * getGuestLoginState\n * @summary determines if a guest checkout is enabled and the login state for users\n * @return {Boolean} true if authenticated user\n */\nexport function getGuestLoginState() {\n  if (Meteor.userId() === \"string\" && this.getShopId() && this.allowGuestCheckout()) {\n    const isGuestFlow = Session.equals(\"guestCheckoutFlow\", true);\n    const isGuest = Roles.userIsInRole(Meteor.userId(), \"guest\", this.getShopId());\n    const isAnonymous = Roles.userIsInRole(Meteor.userId(), \"anonymous\", this.getShopId());\n    if (!isGuestFlow && !isGuest && isAnonymous) {\n      return false;\n    } else if (!isGuestFlow && isGuest && !isAnonymous) {\n      return true;\n    }\n  } else if (Session.equals(\"guestCheckoutFlow\", true) && _.pluck(Meteor.user()\n      .emails, \"address\")) {\n    return true;\n  }\n  return false;\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/core/helpers/globals.js.map","sourceFileName":"/client/modules/core/helpers/globals.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"globals"},"ignored":false,"code":"module.export({\n  toggleSession: function () {\n    return toggleSession;\n  },\n  getCardType: function () {\n    return getCardType;\n  },\n  getGuestLoginState: function () {\n    return getGuestLoginState;\n  }\n});\nvar Session = void 0;\nmodule.importSync(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Roles = void 0;\nmodule.importSync(\"meteor/alanning:roles\", {\n  Roles: function (v) {\n    Roles = v;\n  }\n}, 2);\n\nfunction toggleSession(sessionVariable, positiveState) {\n  var session = Session.get(sessionVariable);\n  var positive = positiveState || true;\n\n  if (_.isEqual(positive, session)) {\n    Session.set(sessionVariable, false);\n  } else {\n    Session.set(sessionVariable, positive);\n  }\n\n  return Session.get(sessionVariable);\n}\n\nfunction getCardType(cardNumber) {\n  var re = new RegExp(\"^4\");\n\n  if (cardNumber.match(re) !== null) {\n    return \"visa\";\n  }\n\n  re = new RegExp(\"^(34|37)\");\n\n  if (cardNumber.match(re) !== null) {\n    return \"amex\";\n  }\n\n  re = new RegExp(\"^5[1-5]\");\n\n  if (cardNumber.match(re) !== null) {\n    return \"mastercard\";\n  }\n\n  re = new RegExp(\"^6011\");\n\n  if (cardNumber.match(re) !== null) {\n    return \"discover\";\n  }\n\n  return \"\";\n}\n\nfunction getGuestLoginState() {\n  if (Meteor.userId() === \"string\" && this.getShopId() && this.allowGuestCheckout()) {\n    var isGuestFlow = Session.equals(\"guestCheckoutFlow\", true);\n    var isGuest = Roles.userIsInRole(Meteor.userId(), \"guest\", this.getShopId());\n    var isAnonymous = Roles.userIsInRole(Meteor.userId(), \"anonymous\", this.getShopId());\n\n    if (!isGuestFlow && !isGuest && isAnonymous) {\n      return false;\n    } else if (!isGuestFlow && isGuest && !isAnonymous) {\n      return true;\n    }\n  } else if (Session.equals(\"guestCheckoutFlow\", true) && _.pluck(Meteor.user().emails, \"address\")) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/client/modules/core/helpers/globals.js"],"names":["Session","Meteor","Roles","toggleSession","sessionVariable","positiveState","session","get","positive","_","isEqual","set","getCardType","cardNumber","re","RegExp","match","getGuestLoginState","userId","getShopId","allowGuestCheckout","isGuestFlow","equals","isGuest","userIsInRole","isAnonymous","pluck","user","emails"],"mappings":"AAAA,OAAS;AAAT,AAAwB;WAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAT,AAAuB,AAAvB,AACA,AAAS,AAAT,AAAsB,AAAtB,A,AAEA,AACA,AACA,AACA,AACA,A,AACA,A,AAEA,AAOA,AAAO,AAAS,AAAT,AAAuB,AAAvB,AAAwC,AAAxC,AAAuD,AAC5D,AAAM,AAAU,AAAQ,AAAR,AAAY,AAAZ,AAAhB,AACA,AAAM,AAAW,AAAiB,AAAlC,AACA,AAAI,AAAE,AAAF,AAAU,AAAV,AAAoB,AAApB,AAAJ,AAAkC,AAChC;;AAAQ,AAAR,SAAY,cAAZ,AAA6B,AAA7B,gCACD;AAFD,MAEO,sBACL;MAAQ,AAAR,AAAY,WAAZ,AAA6B,iBAA7B,AACD;;;iCACD;SAAO,AAAQ,AAAR,AAAY,AAAZ,AAAP,AACD,A,AAGD;;;;;AAOA,AAAO,AAAS,AAAT,AAAqB,AAArB,AAAiC,AACtC,AAAI,AAAK,AAAI,AAAJ,AAAW,AAAX,AAAT,AACA,AAAI,AAAW,AAAX,AAAiB,AAAjB,AAAyB,AAA7B,AAAmC,AACjC,AAAO,AAAP,AACD;;iCACD;MAAK,KAAI,IAAJ,AAAW,OAAX,AAAL;;qCACA;AAAI,WAAW,AAAX,AAAiB,AAAjB,AAAyB,AAA7B,AAAmC,AACjC;AAAO,AAAP,AACD;;;;qCACD;AAAK,WAAI,AAAJ,AAAW,AAAX,AAAL;AACA;;AAAI,WAAW,OAAX,AAAiB,AAAjB,AAAyB,AAA7B,AAAmC,AACjC;;MAAO,iBAAP,cACD;;AACD;;OAAK,IAAI,AAAJ,OAAW,AAAX,AAAL;;qCACA;AAAI,WAAW,AAAX,AAAiB,AAAjB,AAAyB,AAA7B,AAAmC,AACjC;AAAO,AAAP,AACD;;;AACD,AAAO,AAAP,AACD,A,AAED,AAKA;;AAAO,SAAS,AAAT,qBAA8B,AACnC;MAAI,OAAO,AAAP,aAAoB,AAApB,YAAgC,KAAK,AAAL,AAAhC,eAAoD,KAAK,AAAL,AAAxD,sBAAmF,AACjF;QAAM,cAAc,QAAQ,AAAR,OAAe,AAAf,qBAAoC,AAApC,AAApB,AACA;QAAM,UAAU,MAAM,AAAN,aAAmB,OAAO,AAAP,AAAnB,UAAoC,AAApC,SAA6C,KAAK,AAAL,AAA7C,AAAhB,AACA;QAAM,cAAc,MAAM,AAAN,aAAmB,OAAO,AAAP,AAAnB,UAAoC,AAApC,aAAiD,KAAK,AAAL,AAAjD,AAApB;;iDACA;AAAI,AAAC,aAAD,AAAgB,AAAC,AAAjB,AAA4B,AAAhC,AAA6C,AAC3C;WAAO,KAAP,wCACD,AAFD;AAEO,aAAI,AAAC,AAAD,AAAgB,AAAhB,AAA2B,AAAC,AAAhC,AAA6C,AAClD;AAAO,AAAP,AACD;yEACF,AATD,OASO,AAAI,QAAQ,YAAR,AAAe,AAAf,AAAoC,AAApC,AAA6C,AAAE,AAAF,AAAQ,AAAO,AAAP,AAC3D,AADmD,AAC3C,AAD2C,AAAjD,AACkB,AACvB;WAAO,AAAP,AACD;;;SACD;AAAO,AAAP,AACD","file":"/client/modules/core/helpers/globals.js.map","sourcesContent":["import { Session } from \"meteor/session\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Roles } from \"meteor/alanning:roles\";\n\n// Reaction Globals\n//\n// These should all be removed. PR's happily accepted.\n//\n/* eslint \"no-extend-native\": [2, {\"exceptions\": [\"String\"]}] */\n/* eslint \"no-alert\": 0 */\n\n/**\n * toggleSession\n * quick and easy snippet for toggling sessions\n * @param {String} sessionVariable - string name, see http://docs.meteor.com/#/basic/session\n * @param {String} positiveState - optional, if is is positiveState, set opposite\n * @return {Object} return session value\n */\nexport function toggleSession(sessionVariable, positiveState) {\n  const session = Session.get(sessionVariable);\n  const positive = positiveState || true;\n  if (_.isEqual(positive, session)) {\n    Session.set(sessionVariable, false);\n  } else {\n    Session.set(sessionVariable, positive);\n  }\n  return Session.get(sessionVariable);\n}\n\n\n/**\n * getCardTypes\n * @summary determine the card type and return label\n * @todo needs i18n conversion?\n * @param {String} cardNumber - a credit card number\n * @return {String} card label, ie: visa\n */\nexport function getCardType(cardNumber) {\n  let re = new RegExp(\"^4\");\n  if (cardNumber.match(re) !== null) {\n    return \"visa\";\n  }\n  re = new RegExp(\"^(34|37)\");\n  if (cardNumber.match(re) !== null) {\n    return \"amex\";\n  }\n  re = new RegExp(\"^5[1-5]\");\n  if (cardNumber.match(re) !== null) {\n    return \"mastercard\";\n  }\n  re = new RegExp(\"^6011\");\n  if (cardNumber.match(re) !== null) {\n    return \"discover\";\n  }\n  return \"\";\n}\n\n/**\n * getGuestLoginState\n * @summary determines if a guest checkout is enabled and the login state for users\n * @return {Boolean} true if authenticated user\n */\nexport function getGuestLoginState() {\n  if (Meteor.userId() === \"string\" && this.getShopId() && this.allowGuestCheckout()) {\n    const isGuestFlow = Session.equals(\"guestCheckoutFlow\", true);\n    const isGuest = Roles.userIsInRole(Meteor.userId(), \"guest\", this.getShopId());\n    const isAnonymous = Roles.userIsInRole(Meteor.userId(), \"anonymous\", this.getShopId());\n    if (!isGuestFlow && !isGuest && isAnonymous) {\n      return false;\n    } else if (!isGuestFlow && isGuest && !isAnonymous) {\n      return true;\n    }\n  } else if (Session.equals(\"guestCheckoutFlow\", true) && _.pluck(Meteor.user()\n      .emails, \"address\")) {\n    return true;\n  }\n  return false;\n}\n"]},"hash":"2053a916f5d140a52729c539b7c7368717ca6774"}
