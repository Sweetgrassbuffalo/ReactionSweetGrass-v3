{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"../../lib/collections","imported":["TaxCodes"],"specifiers":[{"kind":"named","imported":"TaxCodes","local":"TaxCodes"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/taxes/client/settings/settings.js","filenameRelative":"/imports/plugins/core/taxes/client/settings/settings.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/taxes/client/settings/settings.js"],"names":["Template","TaxCodes","i18next","taxSettings","onCreated","autorun","subscribe","helpers","checked","enabled","shown","taxCodes","instance","subscriptionsReady","find","fetch","options","label","t","value","taxCode","push","id","undefined","events","event","settingsKey","target","getAttribute","packageId","fields","property","Meteor","call","button","$","currentTarget","input","closest","attr","html"],"mappings":"AAAA,IAAS;AAAT,OAAyB,WAAzB;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAgB,AACzB,AAAS,AAAe,AAExB;AAGA,AAAS,AAAY,AAAU,AAAY,AACzC,AAAK,AAAQ,AAAM;;YACjB,AAAK,AAAU,YAAf;AACD;;AAFD,2BADF,AAIC;oBAED;AAAA,AAAS,AAAY,AAAQ,AAC3B;AAAA,AAAQ,AAAS,AACf,AAAI,AAAY,AAAM,CANtB;AAOE,SAAO,YAAP;;0BAEF;AAAO,aALkB,AAKzB,AACD;;;WACD;AAAA,AAAM,AAAS,AACb;mBAAI,SAAJ,AAAgB,AAAM,AACpB;QAAO,YAAP,MACD;;AACD;;WAAA,AAAO,AACR;AAZ0B;AAa3B;AACA;AACA;wBACA;QAAW,oBACT;;QAAM,SAAW,AAAS,sBAA1B;qCACA;AAAI,UAAS;AACL,uBAAW,EAAjB,AAAiB,AAAS,AAAO,AACjC;AAAM,eAAU,AAAC,AACf,AAAO,AAAQ,AAAE,AACjB,AAAO;AAJX,AAAI,AAA+B,AACjC;;AACA,AAAgB;;;;;;;;;;;;;;AAKX,iBAAL,AAAW,UAAW,QAAtB,AAAgC,AAC9B;AAAQ,iBAAR,AAAa,QAAA,AACX,AAAO,AAAQ,AAAE,AAAQ,AACzB;AAHJ;AACe,AAEJ,AAAQ;;AAFjB,aAID;;;WACD;AAAA,AAAO,AACR;AA5BA;AA6BD,SAAA,AAAO;AAjCX,AAA6B,AAqC7B,AAAS,AAAY,AAAO,AAC1B;;;;;;;AAKA;AACQ,gBAAN,AAAoB,AAAM,AAAO,AAAa,AAC9C;AAAM,mBAAY,OAAlB,AAAkB,AAAM,AAAO,AAAa,AAC5C,AAAM,AAAS,AAAC,AACd;AAJ0B,AAAC,AAAU,AACvC,QAEgB,AACJ,AACV;;WAAO,KAAA,AAAM,AAAO,2CAFN;AAHuB,AAGvC,AAAe,AAIf,AACA;AAdwB,AAcxB,AAAO,AAAK,AAAmB,AAAW,AAAa,AACxD,AAED;;;;;AAKA,uCAAyC,MAAD,AAAW,AACjD;QAAM,QAAS,OAAS,QAAT,AAAoB,AAAE,AAAM,oBAA3C,AAAe,AACf,AAAM,AAAQ,AAAO,AAAQ,AAAe,AAAK;;2CAEjD;AAAI,YAAM,KAAN,AAAW,QAAf,AAAI,AAAuB,AAAY,AACrC;AAAM,aAAN,AAAW,KAAX,AAAmB,AACnB;WAFF,AAEE,AAAO,AAAK,AACb;AAAM,yBACL;AAAM,aAAN,AAAW,KAAX,AAAmB,AACnB;AAAA,AAAO,AAAK,AACb;AAhCL,AAA4B,AAiCzB;AApCA","file":"/imports/plugins/core/taxes/client/settings/settings.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { TaxCodes } from \"../../lib/collections\";\nimport { i18next } from \"/client/api\";\n\n/*\n * Template taxes Helpers\n */\nTemplate.taxSettings.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"TaxCodes\");\n  });\n});\n\nTemplate.taxSettings.helpers({\n  checked(enabled) {\n    if (enabled === true) {\n      return \"checked\";\n    }\n    return \"\";\n  },\n  shown(enabled) {\n    if (enabled !== true) {\n      return \"hidden\";\n    }\n    return \"\";\n  },\n  // prepare and return taxCodes\n  // for default shop value\n  //\n  taxCodes() {\n    const instance = Template.instance();\n    if (instance.subscriptionsReady()) {\n      const taxCodes = TaxCodes.find().fetch();\n      const options = [{\n        label: i18next.t(\"app.auto\"),\n        value: \"none\"\n      }];\n\n      for (const taxCode of taxCodes) {\n        options.push({\n          label: i18next.t(taxCode.label),\n          value: taxCode.id\n        });\n      }\n      return options;\n    }\n    return undefined;\n  }\n});\n\nTemplate.taxSettings.events({\n  /**\n   * taxSettings settings update enabled status for tax service on change\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\n  \"change input[name=enabled]\": (event) => {\n    const settingsKey = event.target.getAttribute(\"data-key\");\n    const packageId = event.target.getAttribute(\"data-id\");\n    const fields = [{\n      property: \"enabled\",\n      value: event.target.checked\n    }];\n    // save tax registry updates\n    Meteor.call(\"registry/update\", packageId, settingsKey, fields);\n  },\n\n  /**\n   * taxSettings settings show/hide secret key for a tax service\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\n  \"click [data-event-action=showSecret]\": (event) => {\n    const button = Template.instance().$(event.currentTarget);\n    const input = button.closest(\".form-group\").find(\"input[name=secret]\");\n\n    if (input.attr(\"type\") === \"password\") {\n      input.attr(\"type\", \"text\");\n      button.html(\"Hide\");\n    } else {\n      input.attr(\"type\", \"password\");\n      button.html(\"Show\");\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/taxes/client/settings/settings.js.map","sourceFileName":"/imports/plugins/core/taxes/client/settings/settings.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"settings"},"ignored":false,"code":"var Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 0);\nvar TaxCodes = void 0;\nmodule.importSync(\"../../lib/collections\", {\n  TaxCodes: function (v) {\n    TaxCodes = v;\n  }\n}, 1);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 2);\n/*\n * Template taxes Helpers\n */Template.taxSettings.onCreated(function () {\n  var _this = this;\n\n  this.autorun(function () {\n    _this.subscribe(\"TaxCodes\");\n  });\n});\nTemplate.taxSettings.helpers({\n  checked: function (enabled) {\n    if (enabled === true) {\n      return \"checked\";\n    }\n\n    return \"\";\n  },\n  shown: function (enabled) {\n    if (enabled !== true) {\n      return \"hidden\";\n    }\n\n    return \"\";\n  },\n  // prepare and return taxCodes\n  // for default shop value\n  //\n  taxCodes: function () {\n    var instance = Template.instance();\n\n    if (instance.subscriptionsReady()) {\n      var taxCodes = TaxCodes.find().fetch();\n      var options = [{\n        label: i18next.t(\"app.auto\"),\n        value: \"none\"\n      }];\n\n      for (var _iterator = taxCodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var taxCode = _ref;\n        options.push({\n          label: i18next.t(taxCode.label),\n          value: taxCode.id\n        });\n      }\n\n      return options;\n    }\n\n    return undefined;\n  }\n});\nTemplate.taxSettings.events({\n  /**\n   * taxSettings settings update enabled status for tax service on change\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\"change input[name=enabled]\": function (event) {\n    var settingsKey = event.target.getAttribute(\"data-key\");\n    var packageId = event.target.getAttribute(\"data-id\");\n    var fields = [{\n      property: \"enabled\",\n      value: event.target.checked\n    }]; // save tax registry updates\n\n    Meteor.call(\"registry/update\", packageId, settingsKey, fields);\n  },\n  /**\n   * taxSettings settings show/hide secret key for a tax service\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\"click [data-event-action=showSecret]\": function (event) {\n    var button = Template.instance().$(event.currentTarget);\n    var input = button.closest(\".form-group\").find(\"input[name=secret]\");\n\n    if (input.attr(\"type\") === \"password\") {\n      input.attr(\"type\", \"text\");\n      button.html(\"Hide\");\n    } else {\n      input.attr(\"type\", \"password\");\n      button.html(\"Show\");\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/taxes/client/settings/settings.js"],"names":["Template","TaxCodes","i18next","taxSettings","onCreated","autorun","subscribe","helpers","checked","enabled","shown","taxCodes","instance","subscriptionsReady","find","fetch","options","label","t","value","taxCode","push","id","undefined","events","event","settingsKey","target","getAttribute","packageId","fields","property","Meteor","call","button","$","currentTarget","input","closest","attr","html"],"mappings":"AAAA,IAAS;AAAT,OAAyB,WAAzB;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAgB,AACzB,AAAS,AAAe,AAExB;AAGA,AAAS,AAAY,AAAU,AAAY,AACzC,AAAK,AAAQ,AAAM;;YACjB,AAAK,AAAU,YAAf;AACD;;AAFD,2BADF,AAIC;oBAED;AAAA,AAAS,AAAY,AAAQ,AAC3B;AAAA,AAAQ,AAAS,AACf,AAAI,AAAY,AAAM,CANtB;AAOE,SAAO,YAAP;;0BAEF;AAAO,aALkB,AAKzB,AACD;;;WACD;AAAA,AAAM,AAAS,AACb;mBAAI,SAAJ,AAAgB,AAAM,AACpB;QAAO,YAAP,MACD;;AACD;;WAAA,AAAO,AACR;AAZ0B;AAa3B;AACA;AACA;wBACA;QAAW,oBACT;;QAAM,SAAW,AAAS,sBAA1B;qCACA;AAAI,UAAS;AACL,uBAAW,EAAjB,AAAiB,AAAS,AAAO,AACjC;AAAM,eAAU,AAAC,AACf,AAAO,AAAQ,AAAE,AACjB,AAAO;AAJX,AAAI,AAA+B,AACjC;;AACA,AAAgB;;;;;;;;;;;;;;AAKX,iBAAL,AAAW,UAAW,QAAtB,AAAgC,AAC9B;AAAQ,iBAAR,AAAa,QAAA,AACX,AAAO,AAAQ,AAAE,AAAQ,AACzB;AAHJ;AACe,AAEJ,AAAQ;;AAFjB,aAID;;;WACD;AAAA,AAAO,AACR;AA5BA;AA6BD,SAAA,AAAO;AAjCX,AAA6B,AAqC7B,AAAS,AAAY,AAAO,AAC1B;;;;;;;AAKA;AACQ,gBAAN,AAAoB,AAAM,AAAO,AAAa,AAC9C;AAAM,mBAAY,OAAlB,AAAkB,AAAM,AAAO,AAAa,AAC5C,AAAM,AAAS,AAAC,AACd;AAJ0B,AAAC,AAAU,AACvC,QAEgB,AACJ,AACV;;WAAO,KAAA,AAAM,AAAO,2CAFN;AAHuB,AAGvC,AAAe,AAIf,AACA;AAdwB,AAcxB,AAAO,AAAK,AAAmB,AAAW,AAAa,AACxD,AAED;;;;;AAKA,uCAAyC,MAAD,AAAW,AACjD;QAAM,QAAS,OAAS,QAAT,AAAoB,AAAE,AAAM,oBAA3C,AAAe,AACf,AAAM,AAAQ,AAAO,AAAQ,AAAe,AAAK;;2CAEjD;AAAI,YAAM,KAAN,AAAW,QAAf,AAAI,AAAuB,AAAY,AACrC;AAAM,aAAN,AAAW,KAAX,AAAmB,AACnB;WAFF,AAEE,AAAO,AAAK,AACb;AAAM,yBACL;AAAM,aAAN,AAAW,KAAX,AAAmB,AACnB;AAAA,AAAO,AAAK,AACb;AAhCL,AAA4B,AAiCzB;AApCA","file":"/imports/plugins/core/taxes/client/settings/settings.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { TaxCodes } from \"../../lib/collections\";\nimport { i18next } from \"/client/api\";\n\n/*\n * Template taxes Helpers\n */\nTemplate.taxSettings.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"TaxCodes\");\n  });\n});\n\nTemplate.taxSettings.helpers({\n  checked(enabled) {\n    if (enabled === true) {\n      return \"checked\";\n    }\n    return \"\";\n  },\n  shown(enabled) {\n    if (enabled !== true) {\n      return \"hidden\";\n    }\n    return \"\";\n  },\n  // prepare and return taxCodes\n  // for default shop value\n  //\n  taxCodes() {\n    const instance = Template.instance();\n    if (instance.subscriptionsReady()) {\n      const taxCodes = TaxCodes.find().fetch();\n      const options = [{\n        label: i18next.t(\"app.auto\"),\n        value: \"none\"\n      }];\n\n      for (const taxCode of taxCodes) {\n        options.push({\n          label: i18next.t(taxCode.label),\n          value: taxCode.id\n        });\n      }\n      return options;\n    }\n    return undefined;\n  }\n});\n\nTemplate.taxSettings.events({\n  /**\n   * taxSettings settings update enabled status for tax service on change\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\n  \"change input[name=enabled]\": (event) => {\n    const settingsKey = event.target.getAttribute(\"data-key\");\n    const packageId = event.target.getAttribute(\"data-id\");\n    const fields = [{\n      property: \"enabled\",\n      value: event.target.checked\n    }];\n    // save tax registry updates\n    Meteor.call(\"registry/update\", packageId, settingsKey, fields);\n  },\n\n  /**\n   * taxSettings settings show/hide secret key for a tax service\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\n  \"click [data-event-action=showSecret]\": (event) => {\n    const button = Template.instance().$(event.currentTarget);\n    const input = button.closest(\".form-group\").find(\"input[name=secret]\");\n\n    if (input.attr(\"type\") === \"password\") {\n      input.attr(\"type\", \"text\");\n      button.html(\"Hide\");\n    } else {\n      input.attr(\"type\", \"password\");\n      button.html(\"Show\");\n    }\n  }\n});\n"]},"hash":"4e06c6f6401a7e8407c94e2c1c262463b5285379"}
