{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"faker","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"faker"}]},{"source":"meteor/dburles:factory","imported":["Factory"],"specifiers":[{"kind":"named","imported":"Factory","local":"Factory"}]},{"source":"/lib/collections","imported":["Cart","Products"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Products","local":"Products"}]},{"source":"./shops","imported":[],"specifiers":[]},{"source":"./shops","imported":["getShop"],"specifiers":[{"kind":"named","imported":"getShop","local":"getShop"}]},{"source":"./accounts","imported":["getAddress"],"specifiers":[{"kind":"named","imported":"getAddress","local":"getAddress"}]},{"source":"./products","imported":["addProduct"],"specifiers":[{"kind":"named","imported":"addProduct","local":"addProduct"}]}],"exports":{"exported":["getCartItem","options","createCart","productId","variantId"],"specifiers":[{"kind":"local","local":"getCartItem","exported":"getCartItem"},{"kind":"local","local":"options","exported":"options"},{"kind":"local","local":"createCart","exported":"createCart"},{"kind":"local","local":"productId","exported":"productId"},{"kind":"local","local":"variantId","exported":"variantId"}]}}},"options":{"filename":"/server/imports/fixtures/cart.js","filenameRelative":"/server/imports/fixtures/cart.js","inputSourceMap":{"version":3,"sources":["/server/imports/fixtures/cart.js"],"names":["faker","Factory","Cart","Products","getShop","getAddress","addProduct","getCartItem","options","product","variant","findOne","ancestors","_id","childVariants","find","fetch","selectedOption","Random","choice","defaults","id","productId","shopId","quantity","_","random","inventoryQuantity","variants","title","getSingleCartItem","cartItem","cartQuantity","createCart","variantId","user","create","cart","userId","sessionId","email","internet","items","shipping","address","billing","workflow","status","createdAt","date","past","updatedAt","Date","newCartId","insert","insertedCart","cartNoItems","get","cartOne","cartTwo","addressForOrder","cartToOrder","anonymousCart","define","Object","assign"],"mappings":"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","file":"/server/imports/fixtures/cart.js.map","sourcesContent":["import faker from \"faker\";\nimport { Factory } from \"meteor/dburles:factory\";\nimport { Cart, Products } from \"/lib/collections\";\nimport \"./shops\";\nimport { getShop } from \"./shops\";\nimport { getAddress } from \"./accounts\";\nimport { addProduct } from \"./products\";\n\n/**\n *\n * @param {Object} [options] - Options object (optional)\n * @param {string} [options._id] - id of CartItem\n * @param {string} [options.productId] - _id of product that item came from\n * @param {string} [options.shopId] - _id of shop that item came from\n * @param {number} [options.quantity] - quantity of item in CartItem\n * @param {Object} [options.variants] - _single_ variant object. ¯\\_(ツ)_/¯ why called variants\n *\n * @returns {Object} - randomly generated cartItem/orderItem data object\n */\nexport function getCartItem(options = {}) {\n  const product = addProduct();\n  const variant = Products.findOne({ ancestors: [product._id] });\n  const childVariants = Products.find({ ancestors: [\n    product._id, variant._id\n  ] }).fetch();\n  const selectedOption = Random.choice(childVariants);\n  const defaults = {\n    _id: Random.id(),\n    productId: product._id,\n    shopId: getShop()._id,\n    quantity: _.random(1, selectedOption.inventoryQuantity),\n    variants: selectedOption,\n    title: product.title\n  };\n  return _.defaults(options, defaults);\n}\n\nfunction getSingleCartItem(options = {}) {\n  const cartItem = getCartItem(options);\n  const quantity = options.cartQuantity || 1;\n  cartItem.quantity = quantity;\n  return cartItem;\n}\n\nexport function createCart(productId, variantId) {\n  const product = Products.findOne(productId);\n  const variant = Products.findOne(variantId);\n  const user = Factory.create(\"user\");\n  const cartItem = {\n    _id: Random.id(),\n    productId: product._id,\n    shopId: getShop()._id,\n    quantity: 1,\n    variants: variant,\n    title: product.title\n  };\n\n  const cart = {\n    shopId: getShop()._id,\n    userId: user._id,\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [cartItem],\n    shipping: [\n      {\n        _id: Random.id(),\n        address: getAddress()\n      }\n    ],\n    billing: [\n      {\n        _id: Random.id(),\n        address: getAddress()\n      }\n    ],\n    workflow: {\n      status: \"checkoutPayment\",\n      workflow: [\n        \"checkoutLogin\",\n        \"checkoutAddressBook\",\n        \"coreCheckoutShipping\",\n        \"checkoutReview\",\n        \"checkoutPayment\"\n      ]\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n  const newCartId = Cart.insert(cart);\n  const insertedCart = Cart.findOne(newCartId);\n  return insertedCart;\n}\n\n\nexport default function () {\n  /**\n   * Cart Factory\n   * @summary define cart Factory\n   */\n\n  const cartNoItems = {\n    shopId: getShop()._id,\n    userId: Factory.get(\"user\"),\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [],\n    shipping: [],\n    billing: [],\n    workflow: {\n      status: \"new\",\n      workflow: []\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n\n  const cart = {\n    shopId: getShop()._id,\n    userId: Factory.get(\"user\"),\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [\n      getCartItem(),\n      getCartItem()\n    ],\n    shipping: [],\n    billing: [],\n    workflow: {\n      status: \"new\",\n      workflow: []\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n\n  const cartOne = {\n    items: [\n      getSingleCartItem()\n    ]\n  };\n\n  const cartTwo = {\n    items: [\n      getSingleCartItem({ cartQuantity: 2 })\n    ]\n  };\n\n  const addressForOrder = getAddress();\n  const cartToOrder = {\n    shopId: getShop()._id,\n    shipping: [\n      {\n        _id: Random.id(),\n        address: addressForOrder\n      }\n    ],\n    billing: [\n      {\n        _id: Random.id(),\n        address: addressForOrder\n      }\n    ],\n    workflow: {\n      status: \"checkoutPayment\",\n      workflow: [\n        \"checkoutLogin\",\n        \"checkoutAddressBook\",\n        \"coreCheckoutShipping\",\n        \"checkoutReview\",\n        \"checkoutPayment\"\n      ]\n    }\n  };\n\n  const anonymousCart = {\n    userId: Factory.get(\"anonymous\")\n  };\n\n  Factory.define(\"cart\", Cart, Object.assign({}, cart));\n  Factory.define(\"cartToOrder\", Cart, Object.assign({}, cart, cartToOrder));\n  Factory.define(\"anonymousCart\", Cart, Object.assign({}, cart, anonymousCart));\n  Factory.define(\"cartOne\", Cart, Object.assign({}, cart, cartToOrder, cartOne));\n  Factory.define(\"cartTwo\", Cart, Object.assign({}, cart, cartToOrder, cartTwo));\n  Factory.define(\"cartNoItems\", Cart, Object.assign({}, cart, cartToOrder, cartNoItems));\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/imports/fixtures/cart.js.map","sourceFileName":"/server/imports/fixtures/cart.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"cart"},"ignored":false,"code":"module.export({\n  getCartItem: function () {\n    return getCartItem;\n  },\n  createCart: function () {\n    return createCart;\n  }\n});\nvar faker = void 0;\nmodule.importSync(\"faker\", {\n  \"default\": function (v) {\n    faker = v;\n  }\n}, 0);\nvar Factory = void 0;\nmodule.importSync(\"meteor/dburles:factory\", {\n  Factory: function (v) {\n    Factory = v;\n  }\n}, 1);\nvar Cart = void 0,\n    Products = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  },\n  Products: function (v) {\n    Products = v;\n  }\n}, 2);\nmodule.importSync(\"./shops\");\nvar getShop = void 0;\nmodule.importSync(\"./shops\", {\n  getShop: function (v) {\n    getShop = v;\n  }\n}, 4);\nvar getAddress = void 0;\nmodule.importSync(\"./accounts\", {\n  getAddress: function (v) {\n    getAddress = v;\n  }\n}, 5);\nvar addProduct = void 0;\nmodule.importSync(\"./products\", {\n  addProduct: function (v) {\n    addProduct = v;\n  }\n}, 6);\n\nfunction getCartItem() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var product = addProduct();\n  var variant = Products.findOne({\n    ancestors: [product._id]\n  });\n  var childVariants = Products.find({\n    ancestors: [product._id, variant._id]\n  }).fetch();\n  var selectedOption = Random.choice(childVariants);\n  var defaults = {\n    _id: Random.id(),\n    productId: product._id,\n    shopId: getShop()._id,\n    quantity: _.random(1, selectedOption.inventoryQuantity),\n    variants: selectedOption,\n    title: product.title\n  };\n  return _.defaults(options, defaults);\n}\n\nfunction getSingleCartItem() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var cartItem = getCartItem(options);\n  var quantity = options.cartQuantity || 1;\n  cartItem.quantity = quantity;\n  return cartItem;\n}\n\nfunction createCart(productId, variantId) {\n  var product = Products.findOne(productId);\n  var variant = Products.findOne(variantId);\n  var user = Factory.create(\"user\");\n  var cartItem = {\n    _id: Random.id(),\n    productId: product._id,\n    shopId: getShop()._id,\n    quantity: 1,\n    variants: variant,\n    title: product.title\n  };\n  var cart = {\n    shopId: getShop()._id,\n    userId: user._id,\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [cartItem],\n    shipping: [{\n      _id: Random.id(),\n      address: getAddress()\n    }],\n    billing: [{\n      _id: Random.id(),\n      address: getAddress()\n    }],\n    workflow: {\n      status: \"checkoutPayment\",\n      workflow: [\"checkoutLogin\", \"checkoutAddressBook\", \"coreCheckoutShipping\", \"checkoutReview\", \"checkoutPayment\"]\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n  var newCartId = Cart.insert(cart);\n  var insertedCart = Cart.findOne(newCartId);\n  return insertedCart;\n}\n\nmodule.export(\"default\", exports.default = function () {\n  /**\n   * Cart Factory\n   * @summary define cart Factory\n   */var cartNoItems = {\n    shopId: getShop()._id,\n    userId: Factory.get(\"user\"),\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [],\n    shipping: [],\n    billing: [],\n    workflow: {\n      status: \"new\",\n      workflow: []\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n  var cart = {\n    shopId: getShop()._id,\n    userId: Factory.get(\"user\"),\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [getCartItem(), getCartItem()],\n    shipping: [],\n    billing: [],\n    workflow: {\n      status: \"new\",\n      workflow: []\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n  var cartOne = {\n    items: [getSingleCartItem()]\n  };\n  var cartTwo = {\n    items: [getSingleCartItem({\n      cartQuantity: 2\n    })]\n  };\n  var addressForOrder = getAddress();\n  var cartToOrder = {\n    shopId: getShop()._id,\n    shipping: [{\n      _id: Random.id(),\n      address: addressForOrder\n    }],\n    billing: [{\n      _id: Random.id(),\n      address: addressForOrder\n    }],\n    workflow: {\n      status: \"checkoutPayment\",\n      workflow: [\"checkoutLogin\", \"checkoutAddressBook\", \"coreCheckoutShipping\", \"checkoutReview\", \"checkoutPayment\"]\n    }\n  };\n  var anonymousCart = {\n    userId: Factory.get(\"anonymous\")\n  };\n  Factory.define(\"cart\", Cart, Object.assign({}, cart));\n  Factory.define(\"cartToOrder\", Cart, Object.assign({}, cart, cartToOrder));\n  Factory.define(\"anonymousCart\", Cart, Object.assign({}, cart, anonymousCart));\n  Factory.define(\"cartOne\", Cart, Object.assign({}, cart, cartToOrder, cartOne));\n  Factory.define(\"cartTwo\", Cart, Object.assign({}, cart, cartToOrder, cartTwo));\n  Factory.define(\"cartNoItems\", Cart, Object.assign({}, cart, cartToOrder, cartNoItems));\n});","map":{"version":3,"sources":["/server/imports/fixtures/cart.js"],"names":["faker","Factory","Cart","Products","getShop","getAddress","addProduct","getCartItem","options","product","variant","findOne","ancestors","_id","childVariants","find","fetch","selectedOption","Random","choice","defaults","id","productId","shopId","quantity","_","random","inventoryQuantity","variants","title","getSingleCartItem","cartItem","cartQuantity","createCart","variantId","user","create","cart","userId","sessionId","email","internet","items","shipping","address","billing","workflow","status","createdAt","date","past","updatedAt","Date","newCartId","insert","insertedCart","cartNoItems","get","cartOne","cartTwo","addressForOrder","cartToOrder","anonymousCart","define","Object","assign"],"mappings":"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","file":"/server/imports/fixtures/cart.js.map","sourcesContent":["import faker from \"faker\";\nimport { Factory } from \"meteor/dburles:factory\";\nimport { Cart, Products } from \"/lib/collections\";\nimport \"./shops\";\nimport { getShop } from \"./shops\";\nimport { getAddress } from \"./accounts\";\nimport { addProduct } from \"./products\";\n\n/**\n *\n * @param {Object} [options] - Options object (optional)\n * @param {string} [options._id] - id of CartItem\n * @param {string} [options.productId] - _id of product that item came from\n * @param {string} [options.shopId] - _id of shop that item came from\n * @param {number} [options.quantity] - quantity of item in CartItem\n * @param {Object} [options.variants] - _single_ variant object. ¯\\_(ツ)_/¯ why called variants\n *\n * @returns {Object} - randomly generated cartItem/orderItem data object\n */\nexport function getCartItem(options = {}) {\n  const product = addProduct();\n  const variant = Products.findOne({ ancestors: [product._id] });\n  const childVariants = Products.find({ ancestors: [\n    product._id, variant._id\n  ] }).fetch();\n  const selectedOption = Random.choice(childVariants);\n  const defaults = {\n    _id: Random.id(),\n    productId: product._id,\n    shopId: getShop()._id,\n    quantity: _.random(1, selectedOption.inventoryQuantity),\n    variants: selectedOption,\n    title: product.title\n  };\n  return _.defaults(options, defaults);\n}\n\nfunction getSingleCartItem(options = {}) {\n  const cartItem = getCartItem(options);\n  const quantity = options.cartQuantity || 1;\n  cartItem.quantity = quantity;\n  return cartItem;\n}\n\nexport function createCart(productId, variantId) {\n  const product = Products.findOne(productId);\n  const variant = Products.findOne(variantId);\n  const user = Factory.create(\"user\");\n  const cartItem = {\n    _id: Random.id(),\n    productId: product._id,\n    shopId: getShop()._id,\n    quantity: 1,\n    variants: variant,\n    title: product.title\n  };\n\n  const cart = {\n    shopId: getShop()._id,\n    userId: user._id,\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [cartItem],\n    shipping: [\n      {\n        _id: Random.id(),\n        address: getAddress()\n      }\n    ],\n    billing: [\n      {\n        _id: Random.id(),\n        address: getAddress()\n      }\n    ],\n    workflow: {\n      status: \"checkoutPayment\",\n      workflow: [\n        \"checkoutLogin\",\n        \"checkoutAddressBook\",\n        \"coreCheckoutShipping\",\n        \"checkoutReview\",\n        \"checkoutPayment\"\n      ]\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n  const newCartId = Cart.insert(cart);\n  const insertedCart = Cart.findOne(newCartId);\n  return insertedCart;\n}\n\n\nexport default function () {\n  /**\n   * Cart Factory\n   * @summary define cart Factory\n   */\n\n  const cartNoItems = {\n    shopId: getShop()._id,\n    userId: Factory.get(\"user\"),\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [],\n    shipping: [],\n    billing: [],\n    workflow: {\n      status: \"new\",\n      workflow: []\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n\n  const cart = {\n    shopId: getShop()._id,\n    userId: Factory.get(\"user\"),\n    sessionId: Random.id(),\n    email: faker.internet.email(),\n    items: [\n      getCartItem(),\n      getCartItem()\n    ],\n    shipping: [],\n    billing: [],\n    workflow: {\n      status: \"new\",\n      workflow: []\n    },\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  };\n\n  const cartOne = {\n    items: [\n      getSingleCartItem()\n    ]\n  };\n\n  const cartTwo = {\n    items: [\n      getSingleCartItem({ cartQuantity: 2 })\n    ]\n  };\n\n  const addressForOrder = getAddress();\n  const cartToOrder = {\n    shopId: getShop()._id,\n    shipping: [\n      {\n        _id: Random.id(),\n        address: addressForOrder\n      }\n    ],\n    billing: [\n      {\n        _id: Random.id(),\n        address: addressForOrder\n      }\n    ],\n    workflow: {\n      status: \"checkoutPayment\",\n      workflow: [\n        \"checkoutLogin\",\n        \"checkoutAddressBook\",\n        \"coreCheckoutShipping\",\n        \"checkoutReview\",\n        \"checkoutPayment\"\n      ]\n    }\n  };\n\n  const anonymousCart = {\n    userId: Factory.get(\"anonymous\")\n  };\n\n  Factory.define(\"cart\", Cart, Object.assign({}, cart));\n  Factory.define(\"cartToOrder\", Cart, Object.assign({}, cart, cartToOrder));\n  Factory.define(\"anonymousCart\", Cart, Object.assign({}, cart, anonymousCart));\n  Factory.define(\"cartOne\", Cart, Object.assign({}, cart, cartToOrder, cartOne));\n  Factory.define(\"cartTwo\", Cart, Object.assign({}, cart, cartToOrder, cartTwo));\n  Factory.define(\"cartNoItems\", Cart, Object.assign({}, cart, cartToOrder, cartNoItems));\n}\n"]},"hash":"0e84f013bcdfa0798dda272270001926544866c7"}
