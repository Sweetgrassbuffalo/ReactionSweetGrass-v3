{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"/lib/collections","imported":["Products","Media","Revisions","Packages"],"specifiers":[{"kind":"named","imported":"Products","local":"Products"},{"kind":"named","imported":"Media","local":"Media"},{"kind":"named","imported":"Revisions","local":"Revisions"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Logger"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":["updateSettings","settings","discardDrafts","documentIds"],"specifiers":[{"kind":"local","local":"updateSettings","exported":"updateSettings"},{"kind":"local","local":"settings","exported":"settings"},{"kind":"local","local":"discardDrafts","exported":"discardDrafts"},{"kind":"local","local":"documentIds","exported":"documentIds"}]}}},"options":{"filename":"/imports/plugins/core/revisions/server/methods.js","filenameRelative":"/imports/plugins/core/revisions/server/methods.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/revisions/server/methods.js"],"names":["Meteor","check","Match","Products","Media","Revisions","Packages","Logger","updateSettings","settings","Object","update","name","$set","discardDrafts","documentIds","OneOf","String","Array","documentIdArray","isArray","selector","$nin","documentId","$in","parentDocument","result","remove","methods","revisions","find","fetch","updatedDocuments","previousDocuments","revision","documentType","push","findOne","res","_id","documentData","publish","changeType","files","direct","metadata","debug","JSON","stringify","status"],"mappings":"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","file":"/imports/plugins/core/revisions/server/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Products, Media, Revisions, Packages } from \"/lib/collections\";\nimport { Logger } from \"/server/api\";\n\nexport function updateSettings(settings) {\n  check(settings, Object);\n\n  Packages.update({\n    name: \"reaction-revisions\"\n  }, {\n    $set: {\n      settings\n    }\n  });\n}\n\nexport function discardDrafts(documentIds) {\n  check(documentIds, Match.OneOf(String, Array));\n\n  let documentIdArray;\n\n  if (Array.isArray(documentIds)) {\n    documentIdArray = documentIds;\n  } else {\n    documentIdArray = [documentIds];\n  }\n\n  const selector = {\n    \"workflow.status\": {\n      $nin: [\n        \"revision/published\"\n      ]\n    },\n    \"$or\": [\n      {\n        documentId: {\n          $in: documentIdArray\n        }\n      },\n      {\n        \"documentData.ancestors\": {\n          $in: documentIdArray\n        }\n      },\n      {\n        parentDocument: {\n          $in: documentIds\n        }\n      }\n    ]\n  };\n\n  const result = Revisions.remove(selector);\n\n  return result > 0;\n}\n\nMeteor.methods({\n  \"revisions/settings/update\": updateSettings,\n  \"revisions/discard\": discardDrafts,\n  \"revisions/publish\"(documentIds) {\n    check(documentIds, Match.OneOf(String, Array));\n\n    // Also publish variants if they have a draft\n    let revisions;\n\n    if (Array.isArray(documentIds)) {\n      revisions = Revisions.find({\n        \"workflow.status\": {\n          $nin: [\n            \"revision/published\"\n          ]\n        },\n        \"$or\": [\n          {\n            documentId: {\n              $in: documentIds\n            }\n          },\n          {\n            \"documentData.ancestors\": {\n              $in: documentIds\n            }\n          },\n          {\n            parentDocument: {\n              $in: documentIds\n            }\n          }\n        ]\n      }).fetch();\n    } else {\n      revisions = Revisions.find({\n        \"workflow.status\": {\n          $nin: [\n            \"revision/published\"\n          ]\n        },\n        \"$or\": [\n          { documentId: documentIds },\n          {\n            \"documentData.ancestors\": {\n              $in: [documentIds]\n            }\n          }\n        ]\n      }).fetch();\n    }\n\n    let updatedDocuments = 0;\n    const previousDocuments = [];\n\n    if (revisions) {\n      for (const revision of revisions) {\n        if (!revision.documentType || revision.documentType === \"product\") {\n          previousDocuments.push(Products.findOne(revision.documentId));\n\n          const res = Products.update({\n            _id: revision.documentId\n          }, {\n            $set: revision.documentData\n          }, {\n            publish: true\n          });\n          updatedDocuments += res;\n        } else if (revision.documentType === \"image\") {\n          if (revision.changeType === \"insert\") {\n            const res = Media.files.direct.update({\n              _id: revision.documentId\n            }, {\n              $set: {\n                metadata: revision.documentData\n              }\n            });\n            updatedDocuments += res;\n          } else if (revision.changeType === \"remove\") {\n            const res = Media.files.direct.update({\n              _id: revision.documentId\n            }, {\n              $set: {\n                \"metadata.workflow\": \"archived\"\n              }\n            });\n            updatedDocuments += res;\n          } else if (revision.changeType === \"update\") {\n            const res = Media.files.direct.update({\n              _id: revision.documentId\n            }, {\n              $set: {\n                metadata: revision.documentData\n              }\n            });\n            updatedDocuments += res;\n            Logger.debug(`setting metadata for ${revision.documentId} to ${JSON.stringify(revision.documentData, null, 4)}`);\n          }\n          // mark revision published whether we are publishing the image or not\n          Revisions.direct.update({\n            _id: revision._id\n          }, {\n            $set: {\n              \"workflow.status\": \"revision/published\"\n            }\n          });\n        }\n      }\n    }\n\n    if (updatedDocuments > 0) {\n      return {\n        status: \"success\",\n        previousDocuments\n      };\n    }\n\n    return false;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/revisions/server/methods.js.map","sourceFileName":"/imports/plugins/core/revisions/server/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  updateSettings: function () {\n    return updateSettings;\n  },\n  discardDrafts: function () {\n    return discardDrafts;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 1);\nvar Products = void 0,\n    Media = void 0,\n    Revisions = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Products: function (v) {\n    Products = v;\n  },\n  Media: function (v) {\n    Media = v;\n  },\n  Revisions: function (v) {\n    Revisions = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 2);\nvar Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 3);\n\nfunction updateSettings(settings) {\n  check(settings, Object);\n  Packages.update({\n    name: \"reaction-revisions\"\n  }, {\n    $set: {\n      settings: settings\n    }\n  });\n}\n\nfunction discardDrafts(documentIds) {\n  check(documentIds, Match.OneOf(String, Array));\n  var documentIdArray = void 0;\n\n  if (Array.isArray(documentIds)) {\n    documentIdArray = documentIds;\n  } else {\n    documentIdArray = [documentIds];\n  }\n\n  var selector = {\n    \"workflow.status\": {\n      $nin: [\"revision/published\"]\n    },\n    \"$or\": [{\n      documentId: {\n        $in: documentIdArray\n      }\n    }, {\n      \"documentData.ancestors\": {\n        $in: documentIdArray\n      }\n    }, {\n      parentDocument: {\n        $in: documentIds\n      }\n    }]\n  };\n  var result = Revisions.remove(selector);\n  return result > 0;\n}\n\nMeteor.methods({\n  \"revisions/settings/update\": updateSettings,\n  \"revisions/discard\": discardDrafts,\n  \"revisions/publish\": function (documentIds) {\n    check(documentIds, Match.OneOf(String, Array)); // Also publish variants if they have a draft\n\n    var revisions = void 0;\n\n    if (Array.isArray(documentIds)) {\n      revisions = Revisions.find({\n        \"workflow.status\": {\n          $nin: [\"revision/published\"]\n        },\n        \"$or\": [{\n          documentId: {\n            $in: documentIds\n          }\n        }, {\n          \"documentData.ancestors\": {\n            $in: documentIds\n          }\n        }, {\n          parentDocument: {\n            $in: documentIds\n          }\n        }]\n      }).fetch();\n    } else {\n      revisions = Revisions.find({\n        \"workflow.status\": {\n          $nin: [\"revision/published\"]\n        },\n        \"$or\": [{\n          documentId: documentIds\n        }, {\n          \"documentData.ancestors\": {\n            $in: [documentIds]\n          }\n        }]\n      }).fetch();\n    }\n\n    var updatedDocuments = 0;\n    var previousDocuments = [];\n\n    if (revisions) {\n      for (var _iterator = revisions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var revision = _ref;\n\n        if (!revision.documentType || revision.documentType === \"product\") {\n          previousDocuments.push(Products.findOne(revision.documentId));\n          var res = Products.update({\n            _id: revision.documentId\n          }, {\n            $set: revision.documentData\n          }, {\n            publish: true\n          });\n          updatedDocuments += res;\n        } else if (revision.documentType === \"image\") {\n          if (revision.changeType === \"insert\") {\n            var _res = Media.files.direct.update({\n              _id: revision.documentId\n            }, {\n              $set: {\n                metadata: revision.documentData\n              }\n            });\n\n            updatedDocuments += _res;\n          } else if (revision.changeType === \"remove\") {\n            var _res2 = Media.files.direct.update({\n              _id: revision.documentId\n            }, {\n              $set: {\n                \"metadata.workflow\": \"archived\"\n              }\n            });\n\n            updatedDocuments += _res2;\n          } else if (revision.changeType === \"update\") {\n            var _res3 = Media.files.direct.update({\n              _id: revision.documentId\n            }, {\n              $set: {\n                metadata: revision.documentData\n              }\n            });\n\n            updatedDocuments += _res3;\n            Logger.debug(\"setting metadata for \" + revision.documentId + \" to \" + JSON.stringify(revision.documentData, null, 4));\n          } // mark revision published whether we are publishing the image or not\n\n\n          Revisions.direct.update({\n            _id: revision._id\n          }, {\n            $set: {\n              \"workflow.status\": \"revision/published\"\n            }\n          });\n        }\n      }\n    }\n\n    if (updatedDocuments > 0) {\n      return {\n        status: \"success\",\n        previousDocuments: previousDocuments\n      };\n    }\n\n    return false;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/revisions/server/methods.js"],"names":["Meteor","check","Match","Products","Media","Revisions","Packages","Logger","updateSettings","settings","Object","update","name","$set","discardDrafts","documentIds","OneOf","String","Array","documentIdArray","isArray","selector","$nin","documentId","$in","parentDocument","result","remove","methods","revisions","find","fetch","updatedDocuments","previousDocuments","revision","documentType","push","findOne","res","_id","documentData","publish","changeType","files","direct","metadata","debug","JSON","stringify","status"],"mappings":"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","file":"/imports/plugins/core/revisions/server/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Products, Media, Revisions, Packages } from \"/lib/collections\";\nimport { Logger } from \"/server/api\";\n\nexport function updateSettings(settings) {\n  check(settings, Object);\n\n  Packages.update({\n    name: \"reaction-revisions\"\n  }, {\n    $set: {\n      settings\n    }\n  });\n}\n\nexport function discardDrafts(documentIds) {\n  check(documentIds, Match.OneOf(String, Array));\n\n  let documentIdArray;\n\n  if (Array.isArray(documentIds)) {\n    documentIdArray = documentIds;\n  } else {\n    documentIdArray = [documentIds];\n  }\n\n  const selector = {\n    \"workflow.status\": {\n      $nin: [\n        \"revision/published\"\n      ]\n    },\n    \"$or\": [\n      {\n        documentId: {\n          $in: documentIdArray\n        }\n      },\n      {\n        \"documentData.ancestors\": {\n          $in: documentIdArray\n        }\n      },\n      {\n        parentDocument: {\n          $in: documentIds\n        }\n      }\n    ]\n  };\n\n  const result = Revisions.remove(selector);\n\n  return result > 0;\n}\n\nMeteor.methods({\n  \"revisions/settings/update\": updateSettings,\n  \"revisions/discard\": discardDrafts,\n  \"revisions/publish\"(documentIds) {\n    check(documentIds, Match.OneOf(String, Array));\n\n    // Also publish variants if they have a draft\n    let revisions;\n\n    if (Array.isArray(documentIds)) {\n      revisions = Revisions.find({\n        \"workflow.status\": {\n          $nin: [\n            \"revision/published\"\n          ]\n        },\n        \"$or\": [\n          {\n            documentId: {\n              $in: documentIds\n            }\n          },\n          {\n            \"documentData.ancestors\": {\n              $in: documentIds\n            }\n          },\n          {\n            parentDocument: {\n              $in: documentIds\n            }\n          }\n        ]\n      }).fetch();\n    } else {\n      revisions = Revisions.find({\n        \"workflow.status\": {\n          $nin: [\n            \"revision/published\"\n          ]\n        },\n        \"$or\": [\n          { documentId: documentIds },\n          {\n            \"documentData.ancestors\": {\n              $in: [documentIds]\n            }\n          }\n        ]\n      }).fetch();\n    }\n\n    let updatedDocuments = 0;\n    const previousDocuments = [];\n\n    if (revisions) {\n      for (const revision of revisions) {\n        if (!revision.documentType || revision.documentType === \"product\") {\n          previousDocuments.push(Products.findOne(revision.documentId));\n\n          const res = Products.update({\n            _id: revision.documentId\n          }, {\n            $set: revision.documentData\n          }, {\n            publish: true\n          });\n          updatedDocuments += res;\n        } else if (revision.documentType === \"image\") {\n          if (revision.changeType === \"insert\") {\n            const res = Media.files.direct.update({\n              _id: revision.documentId\n            }, {\n              $set: {\n                metadata: revision.documentData\n              }\n            });\n            updatedDocuments += res;\n          } else if (revision.changeType === \"remove\") {\n            const res = Media.files.direct.update({\n              _id: revision.documentId\n            }, {\n              $set: {\n                \"metadata.workflow\": \"archived\"\n              }\n            });\n            updatedDocuments += res;\n          } else if (revision.changeType === \"update\") {\n            const res = Media.files.direct.update({\n              _id: revision.documentId\n            }, {\n              $set: {\n                metadata: revision.documentData\n              }\n            });\n            updatedDocuments += res;\n            Logger.debug(`setting metadata for ${revision.documentId} to ${JSON.stringify(revision.documentData, null, 4)}`);\n          }\n          // mark revision published whether we are publishing the image or not\n          Revisions.direct.update({\n            _id: revision._id\n          }, {\n            $set: {\n              \"workflow.status\": \"revision/published\"\n            }\n          });\n        }\n      }\n    }\n\n    if (updatedDocuments > 0) {\n      return {\n        status: \"success\",\n        previousDocuments\n      };\n    }\n\n    return false;\n  }\n});\n"]},"hash":"94174c61ee75227dd68a5655b767ceca266770e0"}
