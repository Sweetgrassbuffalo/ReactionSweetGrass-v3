{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/lib/collections","imported":["Orders"],"specifiers":[{"kind":"named","imported":"Orders","local":"Orders"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/orders/client/templates/orderPage/orderPage.js","filenameRelative":"/imports/plugins/core/orders/client/templates/orderPage/orderPage.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/orders/client/templates/orderPage/orderPage.js"],"names":["Meteor","Template","Orders","orderPage","helpers","getNote","latestNote","notes","length","content","events","event","template","date","Date","find","value","note","userId","updatedAt","update","_id","$addToSet"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAgB,AACzB,AAAS,AAAc,AAEvB;AAKA,AAAS,AAAU,AAAQ,AACzB,AAAS,AAAY,AACnB,AAAI;;;;AACA,WAAJ,AAAS,AAAO,YACd;QAAA,AAAa,AAAK,AAAM,AAAS,AACjC;;aAAO,AAAK,OAAZ,AAAO,AAAW,AAAY,AAC/B;uCACF;oCAPH,AAA2B,A,AAU3B;;;AAPI,IAYJ,AAAS,AAAU,AAAO,AACxB,AAAyB,AAAY,AAAE,AACvC,AAAuB,AAAU,AAAO,AAAU,AAChD,AAAM,AAAO,AAAI,AACjB,AAAM,AAAU,AAAS,AAAK,AAAuB;;;;AACrD,SAAM,AAAO;AAAA,AACF,wCACT;AAAQ,AAAO,yBAFJ,AAEH,2BACR;eAAW,IAHA;AAAb;;AAKI,AAAK,eAAT,AAAgB,AACd;AAAI,cAAK,OAAT,AAAI,AAAgB,AAAK,AAAY,AAAK,AAAM,AAAK,AAAM,AAAS,AAAG,AAAS,AAC9E;AAAO,iBAAP,AAAc,AAAK,AAAK,AACtB,AAAW,AACT;AAJR;;aAIe,OADE;sFADW;AAAxB;;AAMO,mBAAJ,AAAS,AAAS,AACvB,AAAO,AAAO,AAAK,AAAK,AACtB,AAAW,AACT;AAXN,AAQC,AAAM;AADJ;AAGY,AACF;6BAFa;AAAxB;;iBAnBN,AAA0B;AAyBvB;AADE;;;AAlBC","file":"/imports/plugins/core/orders/client/templates/orderPage/orderPage.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Orders } from \"/lib/collections\";\n\n/**\n * orderPage helpers\n *\n */\n\nTemplate.orderPage.helpers({\n  getNote: function () {\n    let latestNote;\n    if (this.notes) {\n      latestNote = this.notes.length - 1;\n      return this.notes[latestNote].content;\n    }\n  }\n});\n\n/**\n * orderPage events\n *\n */\n\nTemplate.orderPage.events({\n  \"click .save-label-pdf\": function () {},\n  \"click .btn-add-note\": function (event, template) {\n    const date = new Date();\n    const content = template.find(\"textarea[name=note]\").value;\n    const note = {\n      content: content,\n      userId: Meteor.userId(),\n      updatedAt: date\n    };\n    if (this.notes) {\n      if (note.content && note.content !== this.notes[this.notes.length - 1].content) {\n        Orders.update(this._id, {\n          $addToSet: {\n            notes: note\n          }\n        });\n      }\n    } else if (note.content) {\n      Orders.update(this._id, {\n        $addToSet: {\n          notes: note\n        }\n      });\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/orders/client/templates/orderPage/orderPage.js.map","sourceFileName":"/imports/plugins/core/orders/client/templates/orderPage/orderPage.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"orderPage"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 1);\nvar Orders = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Orders: function (v) {\n    Orders = v;\n  }\n}, 2);\n/**\n * orderPage helpers\n *\n */Template.orderPage.helpers({\n  getNote: function () {\n    var latestNote = void 0;\n\n    if (this.notes) {\n      latestNote = this.notes.length - 1;\n      return this.notes[latestNote].content;\n    }\n  }\n}); /**\n     * orderPage events\n     *\n     */\nTemplate.orderPage.events({\n  \"click .save-label-pdf\": function () {},\n  \"click .btn-add-note\": function (event, template) {\n    var date = new Date();\n    var content = template.find(\"textarea[name=note]\").value;\n    var note = {\n      content: content,\n      userId: Meteor.userId(),\n      updatedAt: date\n    };\n\n    if (this.notes) {\n      if (note.content && note.content !== this.notes[this.notes.length - 1].content) {\n        Orders.update(this._id, {\n          $addToSet: {\n            notes: note\n          }\n        });\n      }\n    } else if (note.content) {\n      Orders.update(this._id, {\n        $addToSet: {\n          notes: note\n        }\n      });\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/orders/client/templates/orderPage/orderPage.js"],"names":["Meteor","Template","Orders","orderPage","helpers","getNote","latestNote","notes","length","content","events","event","template","date","Date","find","value","note","userId","updatedAt","update","_id","$addToSet"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAgB,AACzB,AAAS,AAAc,AAEvB;AAKA,AAAS,AAAU,AAAQ,AACzB,AAAS,AAAY,AACnB,AAAI;;;;AACA,WAAJ,AAAS,AAAO,YACd;QAAA,AAAa,AAAK,AAAM,AAAS,AACjC;;aAAO,AAAK,OAAZ,AAAO,AAAW,AAAY,AAC/B;uCACF;oCAPH,AAA2B,A,AAU3B;;;AAPI,IAYJ,AAAS,AAAU,AAAO,AACxB,AAAyB,AAAY,AAAE,AACvC,AAAuB,AAAU,AAAO,AAAU,AAChD,AAAM,AAAO,AAAI,AACjB,AAAM,AAAU,AAAS,AAAK,AAAuB;;;;AACrD,SAAM,AAAO;AAAA,AACF,wCACT;AAAQ,AAAO,yBAFJ,AAEH,2BACR;eAAW,IAHA;AAAb;;AAKI,AAAK,eAAT,AAAgB,AACd;AAAI,cAAK,OAAT,AAAI,AAAgB,AAAK,AAAY,AAAK,AAAM,AAAK,AAAM,AAAS,AAAG,AAAS,AAC9E;AAAO,iBAAP,AAAc,AAAK,AAAK,AACtB,AAAW,AACT;AAJR;;aAIe,OADE;sFADW;AAAxB;;AAMO,mBAAJ,AAAS,AAAS,AACvB,AAAO,AAAO,AAAK,AAAK,AACtB,AAAW,AACT;AAXN,AAQC,AAAM;AADJ;AAGY,AACF;6BAFa;AAAxB;;iBAnBN,AAA0B;AAyBvB;AADE;;;AAlBC","file":"/imports/plugins/core/orders/client/templates/orderPage/orderPage.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Orders } from \"/lib/collections\";\n\n/**\n * orderPage helpers\n *\n */\n\nTemplate.orderPage.helpers({\n  getNote: function () {\n    let latestNote;\n    if (this.notes) {\n      latestNote = this.notes.length - 1;\n      return this.notes[latestNote].content;\n    }\n  }\n});\n\n/**\n * orderPage events\n *\n */\n\nTemplate.orderPage.events({\n  \"click .save-label-pdf\": function () {},\n  \"click .btn-add-note\": function (event, template) {\n    const date = new Date();\n    const content = template.find(\"textarea[name=note]\").value;\n    const note = {\n      content: content,\n      userId: Meteor.userId(),\n      updatedAt: date\n    };\n    if (this.notes) {\n      if (note.content && note.content !== this.notes[this.notes.length - 1].content) {\n        Orders.update(this._id, {\n          $addToSet: {\n            notes: note\n          }\n        });\n      }\n    } else if (note.content) {\n      Orders.update(this._id, {\n        $addToSet: {\n          notes: note\n        }\n      });\n    }\n  }\n});\n"]},"hash":"f714b6fdcef693637ca9ab303c059ba3d0763488"}
