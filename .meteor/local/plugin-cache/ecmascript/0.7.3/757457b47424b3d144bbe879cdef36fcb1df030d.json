{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/find","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_find"}]},{"source":"lodash/map","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_map"}]},{"source":"lodash/includes","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_includes"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"meteor/meteorhacks:ssr","imported":["SSR"],"specifiers":[{"kind":"named","imported":"SSR","local":"SSR"}]},{"source":"/lib/collections","imported":["Media","Shops"],"specifiers":[{"kind":"named","imported":"Media","local":"Media"},{"kind":"named","imported":"Shops","local":"Shops"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":["sendResetPasswordEmail","userId","optionalEmail","sendVerificationEmail","userId","email"],"specifiers":[{"kind":"local","local":"sendResetPasswordEmail","exported":"sendResetPasswordEmail"},{"kind":"local","local":"userId","exported":"userId"},{"kind":"local","local":"optionalEmail","exported":"optionalEmail"},{"kind":"local","local":"sendVerificationEmail","exported":"sendVerificationEmail"},{"kind":"local","local":"userId","exported":"userId"},{"kind":"local","local":"email","exported":"email"}]}}},"options":{"filename":"/server/api/core/accounts/password.js","filenameRelative":"/server/api/core/accounts/password.js","inputSourceMap":{"version":3,"sources":["/server/api/core/accounts/password.js"],"names":["Meteor","Accounts","SSR","Media","Shops","Reaction","Logger","sendResetPasswordEmail","userId","optionalEmail","user","users","findOne","error","Error","email","emails","address","token","Random","secret","when","Date","tokenObj","update","$set","_ensure","reset","shop","getShopId","emailLogo","Array","isArray","brandAssets","brandAsset","asset","type","mediaId","path","join","absoluteUrl","url","dataForEmail","contactEmail","homepage","copyrightDate","moment","format","legalName","addressBook","company","physicalAddress","address1","address2","city","region","postal","shopName","name","socialLinks","display","facebook","icon","link","googlePlus","twitter","passwordResetUrl","urls","resetPassword","tpl","subject","compileTemplate","Email","getTemplate","getSubject","send","to","from","getShopEmail","render","html","sendVerificationEmail","unverifiedEmail","e","verified","msg","_id","$push","getShopName","verifyEmail","github","instagram","confirmationUrl","userEmailAddress","getMailUrl","warn"],"mappings":"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","file":"/server/api/core/accounts/password.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Accounts } from \"meteor/accounts-base\";\nimport { SSR } from \"meteor/meteorhacks:ssr\";\nimport { Media, Shops } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\n\n/**\n * Send an email with a link that the user can use to reset their password.\n * @param {String} userId - The id of the user to send email to.\n * @param {String} [optionalEmail] Address to send the email to.\n *                 This address must be in the user's `emails` list.\n *                 Defaults to the first email in the list.\n * @return {Job} - returns a sendEmail Job instance\n */\nexport function sendResetPasswordEmail(userId, optionalEmail) {\n  // Make sure the user exists, and email is one of their addresses.\n  const user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    Logger.error(\"sendResetPasswordEmail - User not found\");\n    throw new Meteor.Error(\"user-not-found\", \"User not found\");\n  }\n\n  let email = optionalEmail;\n\n  // pick the first email if we weren't passed an email.\n  if (!optionalEmail && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  }\n\n  // make sure we have a valid email\n  if (!email || !_.includes(_.map(user.emails || [], \"address\"), email)) {\n    Logger.error(\"sendResetPasswordEmail - Email not found\");\n    throw new Meteor.Error(\"email-not-found\", \"Email not found\");\n  }\n\n  // Create token for password reset\n  const token = Random.secret();\n  const when = new Date();\n  const tokenObj = { token, email, when };\n\n  Meteor.users.update(userId, {\n    $set: {\n      \"services.password.reset\": tokenObj\n    }\n  });\n\n  Meteor._ensure(user, \"services\", \"password\").reset = tokenObj;\n\n  // Get shop data for email display\n  const shop = Shops.findOne(Reaction.getShopId());\n\n  // Get shop logo, if available. If not, use default logo from file-system\n  let emailLogo;\n  if (Array.isArray(shop.brandAssets)) {\n    const brandAsset = _.find(shop.brandAssets, (asset) => asset.type === \"navbarBrandImage\");\n    const mediaId = Media.findOne(brandAsset.mediaId);\n    emailLogo = path.join(Meteor.absoluteUrl(), mediaId.url());\n  } else {\n    emailLogo = Meteor.absoluteUrl() + \"resources/email-templates/shop-logo.png\";\n  }\n\n  const dataForEmail = {\n    // Shop Data\n    shop: shop,\n    contactEmail: shop.emails[0].address,\n    homepage: Meteor.absoluteUrl(),\n    emailLogo: emailLogo,\n    copyrightDate: moment().format(\"YYYY\"),\n    legalName: shop.addressBook[0].company,\n    physicalAddress: {\n      address: shop.addressBook[0].address1 + \" \" + shop.addressBook[0].address2,\n      city: shop.addressBook[0].city,\n      region: shop.addressBook[0].region,\n      postal: shop.addressBook[0].postal\n    },\n    shopName: shop.name,\n    socialLinks: {\n      display: true,\n      facebook: {\n        display: true,\n        icon: Meteor.absoluteUrl() + \"resources/email-templates/facebook-icon.png\",\n        link: \"https://www.facebook.com\"\n      },\n      googlePlus: {\n        display: true,\n        icon: Meteor.absoluteUrl() + \"resources/email-templates/google-plus-icon.png\",\n        link: \"https://plus.google.com\"\n      },\n      twitter: {\n        display: true,\n        icon: Meteor.absoluteUrl() + \"resources/email-templates/twitter-icon.png\",\n        link: \"https://www.twitter.com\"\n      }\n    },\n    // Account Data\n    passwordResetUrl: Accounts.urls.resetPassword(token),\n    user: user\n  };\n\n  // Compile Email with SSR\n  const tpl = \"accounts/resetPassword\";\n  const subject = \"accounts/resetPassword/subject\";\n  SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n  SSR.compileTemplate(subject, Reaction.Email.getSubject(tpl));\n\n  return Reaction.Email.send({\n    to: email,\n    from: Reaction.getShopEmail(),\n    subject: SSR.render(subject, dataForEmail),\n    html: SSR.render(tpl, dataForEmail)\n  });\n}\n\n\n/**\n * Send an email with a link the user can use verify their email address.\n * @param {String} userId - The id of the user to send email to.\n * @param {String} [email] Optional. Address to send the email to.\n *                 This address must be in the user's emails list.\n *                 Defaults to the first unverified email in the list.\n * @return {Job} - returns a sendEmail Job instance\n */\nexport function sendVerificationEmail(userId, email) {\n  // Make sure the user exists, and email is one of their addresses.\n  const user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    Logger.error(\"sendVerificationEmail - User not found\");\n    throw new Meteor.Error(\"user-not-found\", \"User not found\");\n  }\n\n  let address = email;\n\n  // pick the first unverified address if no address provided.\n  if (!email) {\n    const unverifiedEmail = _.find(user.emails || [], (e) => !e.verified) || {};\n\n    address = unverifiedEmail.address;\n\n    if (!address) {\n      const msg = \"No unverified email addresses found.\";\n      Logger.error(msg);\n      throw new Meteor.Error(\"no-unverified-address\", msg);\n    }\n  }\n\n  // make sure we have a valid address\n  if (!address || !_.includes(_.map(user.emails || [], \"address\"), address)) {\n    const msg = \"Email not found for user\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"email-not-found\", msg);\n  }\n\n  const token = Random.secret();\n  const when = new Date();\n  const tokenObj = { token, address, when };\n\n  Meteor.users.update({ _id: userId }, {\n    $push: {\n      \"services.email.verificationTokens\": tokenObj\n    }\n  });\n\n  const shopName = Reaction.getShopName();\n  const url = Accounts.urls.verifyEmail(token);\n\n  const dataForEmail = {\n    // Reaction Information\n    contactEmail: \"hello@reactioncommerce.com\",\n    homepage: Meteor.absoluteUrl(),\n    emailLogo: Meteor.absoluteUrl() + \"resources/placeholder.gif\",\n    copyrightDate: moment().format(\"YYYY\"),\n    legalName: \"Reaction Commerce\",\n    physicalAddress: {\n      address: \"2110 Main Street, Suite 207\",\n      city: \"Santa Monica\",\n      region: \"CA\",\n      postal: \"90405\"\n    },\n    shopName: shopName,\n    socialLinks: {\n      facebook: {\n        link: \"https://www.facebook.com/reactioncommerce\"\n      },\n      github: {\n        link: \"https://github.com/reactioncommerce/reaction\"\n      },\n      instagram: {\n        link: \"https://instagram.com/reactioncommerce\"\n      },\n      twitter: {\n        link: \"https://www.twitter.com/getreaction\"\n      }\n    },\n    confirmationUrl: url,\n    userEmailAddress: address\n  };\n\n  if (!Reaction.Email.getMailUrl()) {\n    Logger.warn(`\n\n  ***************************************************\n          IMPORTANT! EMAIL VERIFICATION LINK\n\n           Email sending is not configured.\n\n  Go to the following URL to verify email: ${address}\n\n  ${url}\n  ***************************************************\n\n    `);\n  }\n\n  const tpl = \"accounts/verifyEmail\";\n  const subject = \"accounts/verifyEmail/subject\";\n\n  SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n  SSR.compileTemplate(subject, Reaction.Email.getSubject(subject));\n\n  return Reaction.Email.send({\n    to: address,\n    from: Reaction.getShopEmail(),\n    subject: SSR.render(subject, dataForEmail),\n    html: SSR.render(tpl, dataForEmail)\n  });\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/api/core/accounts/password.js.map","sourceFileName":"/server/api/core/accounts/password.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"password"},"ignored":false,"code":"module.export({\n  sendResetPasswordEmail: function () {\n    return sendResetPasswordEmail;\n  },\n  sendVerificationEmail: function () {\n    return sendVerificationEmail;\n  }\n});\n\nvar _find = void 0;\n\nmodule.importSync(\"lodash/find\", {\n  \"default\": function (v) {\n    _find = v;\n  }\n}, 0);\n\nvar _map = void 0;\n\nmodule.importSync(\"lodash/map\", {\n  \"default\": function (v) {\n    _map = v;\n  }\n}, 1);\n\nvar _includes = void 0;\n\nmodule.importSync(\"lodash/includes\", {\n  \"default\": function (v) {\n    _includes = v;\n  }\n}, 2);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 3);\nvar Accounts = void 0;\nmodule.importSync(\"meteor/accounts-base\", {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 4);\nvar SSR = void 0;\nmodule.importSync(\"meteor/meteorhacks:ssr\", {\n  SSR: function (v) {\n    SSR = v;\n  }\n}, 5);\nvar Media = void 0,\n    Shops = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Media: function (v) {\n    Media = v;\n  },\n  Shops: function (v) {\n    Shops = v;\n  }\n}, 6);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 7);\n\nfunction sendResetPasswordEmail(userId, optionalEmail) {\n  // Make sure the user exists, and email is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    Logger.error(\"sendResetPasswordEmail - User not found\");\n    throw new Meteor.Error(\"user-not-found\", \"User not found\");\n  }\n\n  var email = optionalEmail; // pick the first email if we weren't passed an email.\n\n  if (!optionalEmail && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  } // make sure we have a valid email\n\n\n  if (!email || !_includes(_map(user.emails || [], \"address\"), email)) {\n    Logger.error(\"sendResetPasswordEmail - Email not found\");\n    throw new Meteor.Error(\"email-not-found\", \"Email not found\");\n  } // Create token for password reset\n\n\n  var token = Random.secret();\n  var when = new Date();\n  var tokenObj = {\n    token: token,\n    email: email,\n    when: when\n  };\n  Meteor.users.update(userId, {\n    $set: {\n      \"services.password.reset\": tokenObj\n    }\n  });\n  Meteor._ensure(user, \"services\", \"password\").reset = tokenObj; // Get shop data for email display\n\n  var shop = Shops.findOne(Reaction.getShopId()); // Get shop logo, if available. If not, use default logo from file-system\n\n  var emailLogo = void 0;\n\n  if (Array.isArray(shop.brandAssets)) {\n    var brandAsset = _find(shop.brandAssets, function (asset) {\n      return asset.type === \"navbarBrandImage\";\n    });\n\n    var mediaId = Media.findOne(brandAsset.mediaId);\n    emailLogo = path.join(Meteor.absoluteUrl(), mediaId.url());\n  } else {\n    emailLogo = Meteor.absoluteUrl() + \"resources/email-templates/shop-logo.png\";\n  }\n\n  var dataForEmail = {\n    // Shop Data\n    shop: shop,\n    contactEmail: shop.emails[0].address,\n    homepage: Meteor.absoluteUrl(),\n    emailLogo: emailLogo,\n    copyrightDate: moment().format(\"YYYY\"),\n    legalName: shop.addressBook[0].company,\n    physicalAddress: {\n      address: shop.addressBook[0].address1 + \" \" + shop.addressBook[0].address2,\n      city: shop.addressBook[0].city,\n      region: shop.addressBook[0].region,\n      postal: shop.addressBook[0].postal\n    },\n    shopName: shop.name,\n    socialLinks: {\n      display: true,\n      facebook: {\n        display: true,\n        icon: Meteor.absoluteUrl() + \"resources/email-templates/facebook-icon.png\",\n        link: \"https://www.facebook.com\"\n      },\n      googlePlus: {\n        display: true,\n        icon: Meteor.absoluteUrl() + \"resources/email-templates/google-plus-icon.png\",\n        link: \"https://plus.google.com\"\n      },\n      twitter: {\n        display: true,\n        icon: Meteor.absoluteUrl() + \"resources/email-templates/twitter-icon.png\",\n        link: \"https://www.twitter.com\"\n      }\n    },\n    // Account Data\n    passwordResetUrl: Accounts.urls.resetPassword(token),\n    user: user\n  }; // Compile Email with SSR\n\n  var tpl = \"accounts/resetPassword\";\n  var subject = \"accounts/resetPassword/subject\";\n  SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n  SSR.compileTemplate(subject, Reaction.Email.getSubject(tpl));\n  return Reaction.Email.send({\n    to: email,\n    from: Reaction.getShopEmail(),\n    subject: SSR.render(subject, dataForEmail),\n    html: SSR.render(tpl, dataForEmail)\n  });\n}\n\nfunction sendVerificationEmail(userId, email) {\n  // Make sure the user exists, and email is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    Logger.error(\"sendVerificationEmail - User not found\");\n    throw new Meteor.Error(\"user-not-found\", \"User not found\");\n  }\n\n  var address = email; // pick the first unverified address if no address provided.\n\n  if (!email) {\n    var unverifiedEmail = _find(user.emails || [], function (e) {\n      return !e.verified;\n    }) || {};\n    address = unverifiedEmail.address;\n\n    if (!address) {\n      var msg = \"No unverified email addresses found.\";\n      Logger.error(msg);\n      throw new Meteor.Error(\"no-unverified-address\", msg);\n    }\n  } // make sure we have a valid address\n\n\n  if (!address || !_includes(_map(user.emails || [], \"address\"), address)) {\n    var _msg = \"Email not found for user\";\n    Logger.error(_msg);\n    throw new Meteor.Error(\"email-not-found\", _msg);\n  }\n\n  var token = Random.secret();\n  var when = new Date();\n  var tokenObj = {\n    token: token,\n    address: address,\n    when: when\n  };\n  Meteor.users.update({\n    _id: userId\n  }, {\n    $push: {\n      \"services.email.verificationTokens\": tokenObj\n    }\n  });\n  var shopName = Reaction.getShopName();\n  var url = Accounts.urls.verifyEmail(token);\n  var dataForEmail = {\n    // Reaction Information\n    contactEmail: \"hello@reactioncommerce.com\",\n    homepage: Meteor.absoluteUrl(),\n    emailLogo: Meteor.absoluteUrl() + \"resources/placeholder.gif\",\n    copyrightDate: moment().format(\"YYYY\"),\n    legalName: \"Reaction Commerce\",\n    physicalAddress: {\n      address: \"2110 Main Street, Suite 207\",\n      city: \"Santa Monica\",\n      region: \"CA\",\n      postal: \"90405\"\n    },\n    shopName: shopName,\n    socialLinks: {\n      facebook: {\n        link: \"https://www.facebook.com/reactioncommerce\"\n      },\n      github: {\n        link: \"https://github.com/reactioncommerce/reaction\"\n      },\n      instagram: {\n        link: \"https://instagram.com/reactioncommerce\"\n      },\n      twitter: {\n        link: \"https://www.twitter.com/getreaction\"\n      }\n    },\n    confirmationUrl: url,\n    userEmailAddress: address\n  };\n\n  if (!Reaction.Email.getMailUrl()) {\n    Logger.warn(\"\\n\\n  ***************************************************\\n          IMPORTANT! EMAIL VERIFICATION LINK\\n\\n           Email sending is not configured.\\n\\n  Go to the following URL to verify email: \" + address + \"\\n\\n  \" + url + \"\\n  ***************************************************\\n\\n    \");\n  }\n\n  var tpl = \"accounts/verifyEmail\";\n  var subject = \"accounts/verifyEmail/subject\";\n  SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n  SSR.compileTemplate(subject, Reaction.Email.getSubject(subject));\n  return Reaction.Email.send({\n    to: address,\n    from: Reaction.getShopEmail(),\n    subject: SSR.render(subject, dataForEmail),\n    html: SSR.render(tpl, dataForEmail)\n  });\n}","map":{"version":3,"sources":["/server/api/core/accounts/password.js"],"names":["Meteor","Accounts","SSR","Media","Shops","Reaction","Logger","sendResetPasswordEmail","userId","optionalEmail","user","users","findOne","error","Error","email","emails","address","token","Random","secret","when","Date","tokenObj","update","$set","_ensure","reset","shop","getShopId","emailLogo","Array","isArray","brandAssets","brandAsset","asset","type","mediaId","path","join","absoluteUrl","url","dataForEmail","contactEmail","homepage","copyrightDate","moment","format","legalName","addressBook","company","physicalAddress","address1","address2","city","region","postal","shopName","name","socialLinks","display","facebook","icon","link","googlePlus","twitter","passwordResetUrl","urls","resetPassword","tpl","subject","compileTemplate","Email","getTemplate","getSubject","send","to","from","getShopEmail","render","html","sendVerificationEmail","unverifiedEmail","e","verified","msg","_id","$push","getShopName","verifyEmail","github","instagram","confirmationUrl","userEmailAddress","getMailUrl","warn"],"mappings":"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","file":"/server/api/core/accounts/password.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Accounts } from \"meteor/accounts-base\";\nimport { SSR } from \"meteor/meteorhacks:ssr\";\nimport { Media, Shops } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\n\n\n/**\n * Send an email with a link that the user can use to reset their password.\n * @param {String} userId - The id of the user to send email to.\n * @param {String} [optionalEmail] Address to send the email to.\n *                 This address must be in the user's `emails` list.\n *                 Defaults to the first email in the list.\n * @return {Job} - returns a sendEmail Job instance\n */\nexport function sendResetPasswordEmail(userId, optionalEmail) {\n  // Make sure the user exists, and email is one of their addresses.\n  const user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    Logger.error(\"sendResetPasswordEmail - User not found\");\n    throw new Meteor.Error(\"user-not-found\", \"User not found\");\n  }\n\n  let email = optionalEmail;\n\n  // pick the first email if we weren't passed an email.\n  if (!optionalEmail && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  }\n\n  // make sure we have a valid email\n  if (!email || !_.includes(_.map(user.emails || [], \"address\"), email)) {\n    Logger.error(\"sendResetPasswordEmail - Email not found\");\n    throw new Meteor.Error(\"email-not-found\", \"Email not found\");\n  }\n\n  // Create token for password reset\n  const token = Random.secret();\n  const when = new Date();\n  const tokenObj = { token, email, when };\n\n  Meteor.users.update(userId, {\n    $set: {\n      \"services.password.reset\": tokenObj\n    }\n  });\n\n  Meteor._ensure(user, \"services\", \"password\").reset = tokenObj;\n\n  // Get shop data for email display\n  const shop = Shops.findOne(Reaction.getShopId());\n\n  // Get shop logo, if available. If not, use default logo from file-system\n  let emailLogo;\n  if (Array.isArray(shop.brandAssets)) {\n    const brandAsset = _.find(shop.brandAssets, (asset) => asset.type === \"navbarBrandImage\");\n    const mediaId = Media.findOne(brandAsset.mediaId);\n    emailLogo = path.join(Meteor.absoluteUrl(), mediaId.url());\n  } else {\n    emailLogo = Meteor.absoluteUrl() + \"resources/email-templates/shop-logo.png\";\n  }\n\n  const dataForEmail = {\n    // Shop Data\n    shop: shop,\n    contactEmail: shop.emails[0].address,\n    homepage: Meteor.absoluteUrl(),\n    emailLogo: emailLogo,\n    copyrightDate: moment().format(\"YYYY\"),\n    legalName: shop.addressBook[0].company,\n    physicalAddress: {\n      address: shop.addressBook[0].address1 + \" \" + shop.addressBook[0].address2,\n      city: shop.addressBook[0].city,\n      region: shop.addressBook[0].region,\n      postal: shop.addressBook[0].postal\n    },\n    shopName: shop.name,\n    socialLinks: {\n      display: true,\n      facebook: {\n        display: true,\n        icon: Meteor.absoluteUrl() + \"resources/email-templates/facebook-icon.png\",\n        link: \"https://www.facebook.com\"\n      },\n      googlePlus: {\n        display: true,\n        icon: Meteor.absoluteUrl() + \"resources/email-templates/google-plus-icon.png\",\n        link: \"https://plus.google.com\"\n      },\n      twitter: {\n        display: true,\n        icon: Meteor.absoluteUrl() + \"resources/email-templates/twitter-icon.png\",\n        link: \"https://www.twitter.com\"\n      }\n    },\n    // Account Data\n    passwordResetUrl: Accounts.urls.resetPassword(token),\n    user: user\n  };\n\n  // Compile Email with SSR\n  const tpl = \"accounts/resetPassword\";\n  const subject = \"accounts/resetPassword/subject\";\n  SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n  SSR.compileTemplate(subject, Reaction.Email.getSubject(tpl));\n\n  return Reaction.Email.send({\n    to: email,\n    from: Reaction.getShopEmail(),\n    subject: SSR.render(subject, dataForEmail),\n    html: SSR.render(tpl, dataForEmail)\n  });\n}\n\n\n/**\n * Send an email with a link the user can use verify their email address.\n * @param {String} userId - The id of the user to send email to.\n * @param {String} [email] Optional. Address to send the email to.\n *                 This address must be in the user's emails list.\n *                 Defaults to the first unverified email in the list.\n * @return {Job} - returns a sendEmail Job instance\n */\nexport function sendVerificationEmail(userId, email) {\n  // Make sure the user exists, and email is one of their addresses.\n  const user = Meteor.users.findOne(userId);\n\n  if (!user) {\n    Logger.error(\"sendVerificationEmail - User not found\");\n    throw new Meteor.Error(\"user-not-found\", \"User not found\");\n  }\n\n  let address = email;\n\n  // pick the first unverified address if no address provided.\n  if (!email) {\n    const unverifiedEmail = _.find(user.emails || [], (e) => !e.verified) || {};\n\n    address = unverifiedEmail.address;\n\n    if (!address) {\n      const msg = \"No unverified email addresses found.\";\n      Logger.error(msg);\n      throw new Meteor.Error(\"no-unverified-address\", msg);\n    }\n  }\n\n  // make sure we have a valid address\n  if (!address || !_.includes(_.map(user.emails || [], \"address\"), address)) {\n    const msg = \"Email not found for user\";\n    Logger.error(msg);\n    throw new Meteor.Error(\"email-not-found\", msg);\n  }\n\n  const token = Random.secret();\n  const when = new Date();\n  const tokenObj = { token, address, when };\n\n  Meteor.users.update({ _id: userId }, {\n    $push: {\n      \"services.email.verificationTokens\": tokenObj\n    }\n  });\n\n  const shopName = Reaction.getShopName();\n  const url = Accounts.urls.verifyEmail(token);\n\n  const dataForEmail = {\n    // Reaction Information\n    contactEmail: \"hello@reactioncommerce.com\",\n    homepage: Meteor.absoluteUrl(),\n    emailLogo: Meteor.absoluteUrl() + \"resources/placeholder.gif\",\n    copyrightDate: moment().format(\"YYYY\"),\n    legalName: \"Reaction Commerce\",\n    physicalAddress: {\n      address: \"2110 Main Street, Suite 207\",\n      city: \"Santa Monica\",\n      region: \"CA\",\n      postal: \"90405\"\n    },\n    shopName: shopName,\n    socialLinks: {\n      facebook: {\n        link: \"https://www.facebook.com/reactioncommerce\"\n      },\n      github: {\n        link: \"https://github.com/reactioncommerce/reaction\"\n      },\n      instagram: {\n        link: \"https://instagram.com/reactioncommerce\"\n      },\n      twitter: {\n        link: \"https://www.twitter.com/getreaction\"\n      }\n    },\n    confirmationUrl: url,\n    userEmailAddress: address\n  };\n\n  if (!Reaction.Email.getMailUrl()) {\n    Logger.warn(`\n\n  ***************************************************\n          IMPORTANT! EMAIL VERIFICATION LINK\n\n           Email sending is not configured.\n\n  Go to the following URL to verify email: ${address}\n\n  ${url}\n  ***************************************************\n\n    `);\n  }\n\n  const tpl = \"accounts/verifyEmail\";\n  const subject = \"accounts/verifyEmail/subject\";\n\n  SSR.compileTemplate(tpl, Reaction.Email.getTemplate(tpl));\n  SSR.compileTemplate(subject, Reaction.Email.getSubject(subject));\n\n  return Reaction.Email.send({\n    to: address,\n    from: Reaction.getShopEmail(),\n    subject: SSR.render(subject, dataForEmail),\n    html: SSR.render(tpl, dataForEmail)\n  });\n}\n"]},"hash":"757457b47424b3d144bbe879cdef36fcb1df030d"}
