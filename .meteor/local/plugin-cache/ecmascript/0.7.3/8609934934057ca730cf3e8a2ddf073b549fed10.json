{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"meteor/alanning:roles","imported":["Roles"],"specifiers":[{"kind":"named","imported":"Roles","local":"Roles"}]},{"source":"meteor/tmeasday:publish-counts","imported":["Counts"],"specifiers":[{"kind":"named","imported":"Counts","local":"Counts"}]},{"source":"/lib/collections","imported":["Logs"],"specifiers":[{"kind":"named","imported":"Logs","local":"Logs"}]},{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/logging/server/publications.js","filenameRelative":"/imports/plugins/core/logging/server/publications.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/logging/server/publications.js"],"names":["Meteor","check","Match","Roles","Counts","Logs","Reaction","publish","query","options","OneOf","undefined","Object","shopId","getShopId","logType","ready","userIsInRole","userId","find","sort","date"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAO,AAAa,AAC7B,AAAsB,A,AAAb,AACT,AAAS,AAAc,AACvB,AAAS,AAAY,AACrB,AAAS,AAAgB,AAGzB;AAKA,AAAO,AAAQ,AAAQ,AAAU,AAAO,AAAS,AAC/C,AAAM,AAAO,AAAM,AAAM,AAAW,AACpC,AAAM,AAAS,AAAM,AAAM,AAAW;;;;UAEhC,QAAS,QAAS,UAAxB,AAAe;sCACf;AAAI,AAAC,QAAD,AAAU,SAAC,MAAM,MAAjB,AAA4B,AAAC,WAAjC,AAAyC,AACvC,AAAO,AAAK,AACb;;;2CAED;AAAM,gBAAN,AAAgB,AAAM;AACtB,AAAI,AAAM,AAAa,AAAK,AAAQ,AAAC,AAAS,AAAW,AACvD;;MAAO,UAAP,AAAe,MAAf,AAAqB,AAAc,AAAK,AAAK,AAAE;;YAAF,+CAAU;;;AAAV;;AAA7C,AAAmC;;;;;cACnC;;;AAAO,AAAK,AAAK,AAAE;AAZvB,AAYI,AAAO,AAAU,AAAU,AAAW,AAAE,AAAM,AAAE,AAAM,AACvD,AACF,CAVC","file":"/imports/plugins/core/logging/server/publications.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Roles } from \"meteor/alanning:roles\";\nimport { Counts } from \"meteor/tmeasday:publish-counts\";\nimport { Logs } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\n\n\n/**\n * Publish logs\n * Poor admins get swamped with a ton of data so let's just only subscribe to one\n * logType at a time\n */\nMeteor.publish(\"Logs\", function (query, options) {\n  check(query, Match.OneOf(undefined, Object));\n  check(options, Match.OneOf(undefined, Object));\n\n  const shopId = Reaction.getShopId();\n  if (!query || !query.logType || !shopId) {\n    return this.ready();\n  }\n\n  const logType = query.logType;\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"])) {\n    Counts.publish(this, \"logs-count\", Logs.find({ shopId, logType }));\n    return Logs.find({ shopId, logType }, { sort: { date: 1 } });\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/logging/server/publications.js.map","sourceFileName":"/imports/plugins/core/logging/server/publications.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"publications"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 1);\nvar Roles = void 0;\nmodule.importSync(\"meteor/alanning:roles\", {\n  Roles: function (v) {\n    Roles = v;\n  }\n}, 2);\nvar Counts = void 0;\nmodule.importSync(\"meteor/tmeasday:publish-counts\", {\n  Counts: function (v) {\n    Counts = v;\n  }\n}, 3);\nvar Logs = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Logs: function (v) {\n    Logs = v;\n  }\n}, 4);\nvar Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 5);\n/**\n * Publish logs\n * Poor admins get swamped with a ton of data so let's just only subscribe to one\n * logType at a time\n */Meteor.publish(\"Logs\", function (query, options) {\n  check(query, Match.OneOf(undefined, Object));\n  check(options, Match.OneOf(undefined, Object));\n  var shopId = Reaction.getShopId();\n\n  if (!query || !query.logType || !shopId) {\n    return this.ready();\n  }\n\n  var logType = query.logType;\n\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"])) {\n    Counts.publish(this, \"logs-count\", Logs.find({\n      shopId: shopId,\n      logType: logType\n    }));\n    return Logs.find({\n      shopId: shopId,\n      logType: logType\n    }, {\n      sort: {\n        date: 1\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/logging/server/publications.js"],"names":["Meteor","check","Match","Roles","Counts","Logs","Reaction","publish","query","options","OneOf","undefined","Object","shopId","getShopId","logType","ready","userIsInRole","userId","find","sort","date"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAO,AAAa,AAC7B,AAAsB,A,AAAb,AACT,AAAS,AAAc,AACvB,AAAS,AAAY,AACrB,AAAS,AAAgB,AAGzB;AAKA,AAAO,AAAQ,AAAQ,AAAU,AAAO,AAAS,AAC/C,AAAM,AAAO,AAAM,AAAM,AAAW,AACpC,AAAM,AAAS,AAAM,AAAM,AAAW;;;;UAEhC,QAAS,QAAS,UAAxB,AAAe;sCACf;AAAI,AAAC,QAAD,AAAU,SAAC,MAAM,MAAjB,AAA4B,AAAC,WAAjC,AAAyC,AACvC,AAAO,AAAK,AACb;;;2CAED;AAAM,gBAAN,AAAgB,AAAM;AACtB,AAAI,AAAM,AAAa,AAAK,AAAQ,AAAC,AAAS,AAAW,AACvD;;MAAO,UAAP,AAAe,MAAf,AAAqB,AAAc,AAAK,AAAK,AAAE;;YAAF,+CAAU;;;AAAV;;AAA7C,AAAmC;;;;;cACnC;;;AAAO,AAAK,AAAK,AAAE;AAZvB,AAYI,AAAO,AAAU,AAAU,AAAW,AAAE,AAAM,AAAE,AAAM,AACvD,AACF,CAVC","file":"/imports/plugins/core/logging/server/publications.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Roles } from \"meteor/alanning:roles\";\nimport { Counts } from \"meteor/tmeasday:publish-counts\";\nimport { Logs } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\n\n\n/**\n * Publish logs\n * Poor admins get swamped with a ton of data so let's just only subscribe to one\n * logType at a time\n */\nMeteor.publish(\"Logs\", function (query, options) {\n  check(query, Match.OneOf(undefined, Object));\n  check(options, Match.OneOf(undefined, Object));\n\n  const shopId = Reaction.getShopId();\n  if (!query || !query.logType || !shopId) {\n    return this.ready();\n  }\n\n  const logType = query.logType;\n  if (Roles.userIsInRole(this.userId, [\"admin\", \"owner\"])) {\n    Counts.publish(this, \"logs-count\", Logs.find({ shopId, logType }));\n    return Logs.find({ shopId, logType }, { sort: { date: 1 } });\n  }\n});\n"]},"hash":"8609934934057ca730cf3e8a2ddf073b549fed10"}
