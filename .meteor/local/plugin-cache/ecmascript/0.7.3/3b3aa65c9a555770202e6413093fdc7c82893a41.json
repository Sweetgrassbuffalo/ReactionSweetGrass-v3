{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/cfs:gridfs/gridfs.server.js","filenameRelative":"/packages/cfs:gridfs/gridfs.server.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/cfs:gridfs/gridfs.server.js.map","sourceFileName":"/packages/cfs:gridfs/gridfs.server.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"gridfs.server"},"ignored":false,"code":"/* eslint-disable */var path = Npm.require(\"path\");\n\nvar mongodb = Npm.require(\"mongodb\");\n\nvar ObjectID = Npm.require(\"mongodb\").ObjectID;\n\nvar Grid = Npm.require(\"gridfs-stream\"); // var Grid = Npm.require('gridfs-locking-stream');\n\n\nvar chunkSize = 1024 * 1024 * 2; // 256k is default GridFS chunk size, but performs terribly for largish files\n/**\n * @public\n * @constructor\n * @param {String} name - The store name\n * @param {Object} options\n * @param {Function} [options.beforeSave] - Function to run before saving a file from the server. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\n * @param {Number} [options.maxTries=5] - Max times to attempt saving a file\n * @returns {FS.StorageAdapter} An instance of FS.StorageAdapter.\n *\n * Creates a GridFS store instance on the server. Inherits from FS.StorageAdapter\n * type.\n */\n\nFS.Store.GridFS = function (name, options) {\n  var self = this;\n  options = options || {};\n  var gridfsName = name;\n  var mongoOptions = options.mongoOptions || {};\n\n  if (!(self instanceof FS.Store.GridFS)) {\n    throw new Error('FS.Store.GridFS missing keyword \"new\"');\n  }\n\n  if (!options.mongoUrl) {\n    options.mongoUrl = process.env.MONGO_URL; // When using a Meteor MongoDB instance, preface name with \"cfs_gridfs.\"\n\n    gridfsName = \"cfs_gridfs.\" + name;\n  }\n\n  if (!options.mongoOptions) {\n    options.mongoOptions = {\n      db: {\n        native_parser: true\n      },\n      server: {\n        auto_reconnect: true\n      }\n    };\n  }\n\n  if (options.chunkSize) {\n    chunkSize = options.chunkSize;\n  }\n\n  return new FS.StorageAdapter(name, options, {\n    typeName: \"storage.gridfs\",\n    fileKey: function (fileObj) {\n      // We should not have to mount the file here - We assume its taken\n      // care of - Otherwise we create new files instead of overwriting\n      var key = {\n        _id: null,\n        filename: null\n      }; // If we're passed a fileObj, we retrieve the _id and filename from it.\n\n      if (fileObj) {\n        var info = fileObj._getInfo(name, {\n          updateFileRecordFirst: false\n        });\n\n        key._id = info.key || null;\n        key.filename = info.name || fileObj.name({\n          updateFileRecordFirst: false\n        }) || fileObj.collectionName + \"-\" + fileObj._id;\n      } // If key._id is null at this point, createWriteStream will let GridFS generate a new ID\n\n\n      return key;\n    },\n    createReadStream: function (fileKey, options) {\n      options = options || {}; // Init GridFS\n\n      var gfs = new Grid(self.db, mongodb); // Set the default streamning settings\n\n      var settings = {\n        _id: new ObjectID(fileKey._id),\n        root: gridfsName\n      }; // Check if this should be a partial read\n\n      if (typeof options.start !== \"undefined\" && typeof options.end !== \"undefined\") {\n        // Add partial info\n        settings.range = {\n          startPos: options.start,\n          endPos: options.end\n        };\n      }\n\n      FS.debug && console.log(\"GRIDFS\", settings);\n      return gfs.createReadStream(settings);\n    },\n    createWriteStream: function (fileKey, options) {\n      options = options || {}; // Init GridFS\n\n      var gfs = new Grid(self.db, mongodb);\n      var opts = {\n        filename: fileKey.filename,\n        mode: \"w\",\n        root: gridfsName,\n        chunk_size: options.chunk_size || chunkSize,\n        // We allow aliases, metadata and contentType to be passed in via\n        // options\n        aliases: options.aliases || [],\n        metadata: options.metadata || null,\n        content_type: options.contentType || \"application/octet-stream\"\n      };\n\n      if (fileKey._id) {\n        opts._id = new ObjectID(fileKey._id);\n      }\n\n      var writeStream = gfs.createWriteStream(opts);\n      writeStream.on(\"close\", function (file) {\n        if (!file) {\n          // gridfs-stream will emit \"close\" without passing a file\n          // if there is an error. We can simply exit here because\n          // the \"error\" listener will also be called in this case.\n          return;\n        }\n\n        if (FS.debug) console.log(\"SA GridFS - DONE!\"); // Emit end and return the fileKey, size, and updated date\n\n        writeStream.emit(\"stored\", {\n          // Set the generated _id so that we know it for future reads and writes.\n          // We store the _id as a string and only convert to ObjectID right before\n          // reading, writing, or deleting. If we store the ObjectID itself,\n          // Meteor (EJSON?) seems to convert it to a LocalCollection.ObjectID,\n          // which GFS doesn't understand.\n          fileKey: file._id.toString(),\n          size: file.length,\n          storedAt: file.uploadDate || new Date()\n        });\n      });\n      writeStream.on(\"error\", function (error) {\n        console.log(\"SA GridFS - ERROR!\", error);\n      });\n      return writeStream;\n    },\n    remove: function (fileKey, callback) {\n      // Init GridFS\n      var gfs = new Grid(self.db, mongodb);\n\n      try {\n        gfs.remove({\n          _id: new ObjectID(fileKey._id),\n          root: gridfsName\n        }, callback);\n      } catch (err) {\n        callback(err);\n      }\n    },\n    // Not implemented\n    watch: function () {\n      throw new Error(\"GridFS storage adapter does not support the sync option\");\n    },\n    init: function (callback) {\n      mongodb.MongoClient.connect(options.mongoUrl, mongoOptions, function (err, db) {\n        if (err) {\n          return callback(err);\n        }\n\n        self.db = db;\n        callback(null);\n      });\n    }\n  });\n};","map":{"version":3,"sources":["/packages/cfs:gridfs/gridfs.server.js"],"names":["path","Npm","require","mongodb","ObjectID","Grid","chunkSize","FS","Store","GridFS","name","options","self","gridfsName","mongoOptions","Error","mongoUrl","process","env","MONGO_URL","db","native_parser","server","auto_reconnect","StorageAdapter","typeName","fileKey","fileObj","key","_id","filename","info","_getInfo","updateFileRecordFirst","collectionName","createReadStream","gfs","settings","root","start","end","range","startPos","endPos","debug","console","log","createWriteStream","opts","mode","chunk_size","aliases","metadata","content_type","contentType","writeStream","on","file","emit","toString","size","length","storedAt","uploadDate","Date","error","remove","callback","err","watch","init","MongoClient","connect"],"mappings":"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","file":"/packages/cfs:gridfs/gridfs.server.js.map","sourcesContent":["/* eslint-disable */\nconst path = Npm.require(\"path\");\nconst mongodb = Npm.require(\"mongodb\");\nconst ObjectID = Npm.require(\"mongodb\").ObjectID;\nconst Grid = Npm.require(\"gridfs-stream\");\n// var Grid = Npm.require('gridfs-locking-stream');\n\nlet chunkSize = 1024 * 1024 * 2; // 256k is default GridFS chunk size, but performs terribly for largish files\n\n/**\n * @public\n * @constructor\n * @param {String} name - The store name\n * @param {Object} options\n * @param {Function} [options.beforeSave] - Function to run before saving a file from the server. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\n * @param {Number} [options.maxTries=5] - Max times to attempt saving a file\n * @returns {FS.StorageAdapter} An instance of FS.StorageAdapter.\n *\n * Creates a GridFS store instance on the server. Inherits from FS.StorageAdapter\n * type.\n */\n\nFS.Store.GridFS = function (name, options) {\n  const self = this;\n  options = options || {};\n\n  let gridfsName = name;\n  const mongoOptions = options.mongoOptions || {};\n\n  if (!(self instanceof FS.Store.GridFS))    {\n    throw new Error('FS.Store.GridFS missing keyword \"new\"');\n  }\n\n  if (!options.mongoUrl) {\n    options.mongoUrl = process.env.MONGO_URL;\n    // When using a Meteor MongoDB instance, preface name with \"cfs_gridfs.\"\n    gridfsName = \"cfs_gridfs.\" + name;\n  }\n\n  if (!options.mongoOptions) {\n    options.mongoOptions = { db: { native_parser: true }, server: { auto_reconnect: true } };\n  }\n\n  if (options.chunkSize) {\n    chunkSize = options.chunkSize;\n  }\n\n  return new FS.StorageAdapter(name, options, {\n\n    typeName: \"storage.gridfs\",\n    fileKey: function (fileObj) {\n      // We should not have to mount the file here - We assume its taken\n      // care of - Otherwise we create new files instead of overwriting\n      const key = {\n        _id: null,\n        filename: null\n      };\n\n      // If we're passed a fileObj, we retrieve the _id and filename from it.\n      if (fileObj) {\n        const info = fileObj._getInfo(name, { updateFileRecordFirst: false });\n        key._id = info.key || null;\n        key.filename = info.name || fileObj.name({ updateFileRecordFirst: false }) || (fileObj.collectionName + \"-\" + fileObj._id);\n      }\n\n      // If key._id is null at this point, createWriteStream will let GridFS generate a new ID\n      return key;\n    },\n    createReadStream: function (fileKey, options) {\n      options = options || {};\n\n      // Init GridFS\n      const gfs = new Grid(self.db, mongodb);\n\n      // Set the default streamning settings\n      const settings = {\n        _id: new ObjectID(fileKey._id),\n        root: gridfsName\n      };\n\n      // Check if this should be a partial read\n      if (typeof options.start !== \"undefined\" && typeof options.end !== \"undefined\") {\n        // Add partial info\n        settings.range = {\n          startPos: options.start,\n          endPos: options.end\n        };\n      }\n\n      FS.debug && console.log(\"GRIDFS\", settings);\n\n      return gfs.createReadStream(settings);\n    },\n    createWriteStream: function (fileKey, options) {\n      options = options || {};\n\n      // Init GridFS\n      const gfs = new Grid(self.db, mongodb);\n\n      const opts = {\n        filename: fileKey.filename,\n        mode: \"w\",\n        root: gridfsName,\n        chunk_size: options.chunk_size || chunkSize,\n        // We allow aliases, metadata and contentType to be passed in via\n        // options\n        aliases: options.aliases || [],\n        metadata: options.metadata || null,\n        content_type: options.contentType || \"application/octet-stream\"\n      };\n\n      if (fileKey._id) {\n        opts._id = new ObjectID(fileKey._id);\n      }\n\n      const writeStream = gfs.createWriteStream(opts);\n\n      writeStream.on(\"close\", function (file) {\n        if (!file) {\n          // gridfs-stream will emit \"close\" without passing a file\n          // if there is an error. We can simply exit here because\n          // the \"error\" listener will also be called in this case.\n          return;\n        }\n\n        if (FS.debug) console.log(\"SA GridFS - DONE!\");\n\n        // Emit end and return the fileKey, size, and updated date\n        writeStream.emit(\"stored\", {\n          // Set the generated _id so that we know it for future reads and writes.\n          // We store the _id as a string and only convert to ObjectID right before\n          // reading, writing, or deleting. If we store the ObjectID itself,\n          // Meteor (EJSON?) seems to convert it to a LocalCollection.ObjectID,\n          // which GFS doesn't understand.\n          fileKey: file._id.toString(),\n          size: file.length,\n          storedAt: file.uploadDate || new Date()\n        });\n      });\n\n      writeStream.on(\"error\", function (error) {\n        console.log(\"SA GridFS - ERROR!\", error);\n      });\n\n      return writeStream;\n    },\n    remove: function (fileKey, callback) {\n      // Init GridFS\n      const gfs = new Grid(self.db, mongodb);\n\n      try {\n        gfs.remove({ _id: new ObjectID(fileKey._id), root: gridfsName }, callback);\n      } catch (err) {\n        callback(err);\n      }\n    },\n\n    // Not implemented\n    watch: function () {\n      throw new Error(\"GridFS storage adapter does not support the sync option\");\n    },\n\n    init: function (callback) {\n      mongodb.MongoClient.connect(options.mongoUrl, mongoOptions, function (err, db) {\n        if (err) { return callback(err); }\n        self.db = db;\n        callback(null);\n      });\n    }\n  });\n};\n"]},"hash":"3b3aa65c9a555770202e6413093fdc7c82893a41"}
