{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/omit","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_omit"}]},{"source":"i18next-browser-languagedetector","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"i18nextBrowserLanguageDetector"}]},{"source":"i18next-localstorage-cache","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"i18nextLocalStorageCache"}]},{"source":"i18next-sprintf-postprocessor","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"i18nextSprintfPostProcessor"}]},{"source":"jquery-i18next","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"i18nextJquery"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/tracker","imported":["Tracker"],"specifiers":[{"kind":"named","imported":"Tracker","local":"Tracker"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/lib/collections","imported":["Shops","Translations"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"},{"kind":"named","imported":"Translations","local":"Translations"}]},{"source":"/lib/collections/schemas","imported":["*"],"specifiers":[{"kind":"namespace","local":"Schemas"}]},{"source":"./main","imported":["default","packageNamespaces","getLabelsFor","getMessagesFor","i18nextDep","currencyDep"],"specifiers":[{"kind":"named","imported":"default","local":"i18next"},{"kind":"named","imported":"packageNamespaces","local":"packageNamespaces"},{"kind":"named","imported":"getLabelsFor","local":"getLabelsFor"},{"kind":"named","imported":"getMessagesFor","local":"getMessagesFor"},{"kind":"named","imported":"i18nextDep","local":"i18nextDep"},{"kind":"named","imported":"currencyDep","local":"currencyDep"}]},{"source":"/lib/api","imported":["mergeDeep"],"specifiers":[{"kind":"named","imported":"mergeDeep","local":"mergeDeep"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/i18n/startup.js","filenameRelative":"/client/modules/i18n/startup.js","inputSourceMap":{"version":3,"sources":["/client/modules/i18n/startup.js"],"names":["i18nextBrowserLanguageDetector","i18nextLocalStorageCache","i18nextSprintfPostProcessor","i18nextJquery","Meteor","Tracker","Reaction","Shops","Translations","Schemas","i18next","packageNamespaces","getLabelsFor","getMessagesFor","i18nextDep","currencyDep","mergeDeep","options","order","lookupQuerystring","lookupCookie","lookupLocalStorage","caches","htmlTag","document","documentElement","startup","autorun","Subscriptions","ready","user","shop","findOne","getShopId","language","profile","lang","subscribe","translations","find","fields","_id","fetch","resources","forEach","translation","resource","i18n","use","init","detection","debug","ns","defaultNS","fallbackNS","lng","fallbackLng","schema","hasOwnProperty","call","ss","labels","messages","changed","$elements","$","localize","dir","addClass","removeClass","currency","localStorageCurrency","localStorage","getItem","setItem","tName","i18nName","handleName","selectorAttr","targetAttr","parseDefaultValueFromContent","Template","onRendered","depend"],"mappings":"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","file":"/client/modules/i18n/startup.js.map","sourcesContent":["import _ from \"lodash\";\nimport i18nextBrowserLanguageDetector from \"i18next-browser-languagedetector\";\nimport i18nextLocalStorageCache from \"i18next-localstorage-cache\";\nimport i18nextSprintfPostProcessor from \"i18next-sprintf-postprocessor\";\nimport i18nextJquery from \"jquery-i18next\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Tracker } from \"meteor/tracker\";\nimport { Reaction } from \"/client/api\";\nimport { Shops, Translations } from \"/lib/collections\";\nimport * as Schemas from \"/lib/collections/schemas\";\nimport i18next, { packageNamespaces, getLabelsFor, getMessagesFor, i18nextDep, currencyDep } from \"./main\";\nimport { mergeDeep } from \"/lib/api\";\n\n//\n// setup options for i18nextBrowserLanguageDetector\n// note: this isn't fully operational yet\n// language is set by user currently\n// progress toward detecting language\n// should focus around i18nextBrowserLanguageDetector\n//\nconst options = {\n  // order and from where user language should be detected\n  order: [\"querystring\", \"cookie\", \"localStorage\", \"navigator\", \"htmlTag\"],\n\n  // keys or params to lookup language from\n  lookupQuerystring: \"lng\",\n  lookupCookie: \"i18next\",\n  lookupLocalStorage: \"i18nextLng\",\n\n  // cache user language on\n  caches: [\"localStorage\", \"cookie\"],\n  // optional htmlTag with lang attribute, the default is:\n  htmlTag: document.documentElement\n};\n\nMeteor.startup(() => {\n  // use tracker autorun to detect language changes\n  // this only runs on initial page loaded\n  // and when user.profile.lang updates\n  Tracker.autorun(function () {\n    if (Reaction.Subscriptions.Shops.ready() && Meteor.user()) {\n      const shop = Shops.findOne(Reaction.getShopId());\n      let language = shop.language;\n      if (Meteor.user() && Meteor.user().profile && Meteor.user().profile.lang) {\n        language = Meteor.user().profile.lang;\n      }\n      //\n      // subscribe to user + shop Translations\n      //\n      return Meteor.subscribe(\"Translations\", language, () => {\n        // fetch reaction translations\n        const translations = Translations.find({}, {\n          fields: {\n            _id: 0\n          }\n        }).fetch();\n\n        //\n        // reduce and merge translations\n        // into i18next resource format\n        //\n        let resources = {};\n        translations.forEach(function (translation) {\n          const resource = {};\n          resource[translation.i18n] = translation.translation;\n          resources = mergeDeep(resources, resource);\n        });\n\n        //\n        // initialize i18next\n        //\n        i18next\n          .use(i18nextBrowserLanguageDetector)\n          .use(i18nextLocalStorageCache)\n          .use(i18nextSprintfPostProcessor)\n          .init({\n            detection: options,\n            debug: false,\n            ns: packageNamespaces, // translation namespace for every package\n            defaultNS: \"core\", // reaction \"core\" is the default namespace\n            fallbackNS: packageNamespaces,\n            lng: language, // user session language\n            fallbackLng: shop ? shop.language : null, // Shop language\n            resources: resources\n          }, () => {\n            // someday this should work\n            // see: https://github.com/aldeed/meteor-simple-schema/issues/494\n            for (const schema in _.omit(Schemas, \"__esModule\")) {\n              if ({}.hasOwnProperty.call(Schemas, schema)) {\n                const ss = Schemas[schema];\n                ss.labels(getLabelsFor(ss, schema));\n                ss.messages(getMessagesFor(ss, schema));\n              }\n            }\n\n            i18nextDep.changed();\n\n            // global first time init event finds and replaces\n            // data-i18n attributes in html/template source.\n            $elements = $(\"[data-i18n]\").localize();\n\n            // apply language direction to html\n            if (i18next.dir(language) === \"rtl\") {\n              return $(\"html\").addClass(\"rtl\");\n            }\n            return $(\"html\").removeClass(\"rtl\");\n          });\n      }); // return\n    }\n  });\n\n  // use tracker autorun to detect currency changes\n  // this only runs on initial page loaded\n  // and when user.profile.currency updates\n  // althought it is also triggered when profile updates ( meaning .lang )\n  Tracker.autorun(function () {\n    const user = Meteor.user();\n    if (Reaction.Subscriptions.Shops.ready() && user) {\n      if (user.profile && user.profile.currency) {\n        const localStorageCurrency = localStorage.getItem(\"currency\");\n        if (localStorageCurrency !== user.profile.currency) {\n          localStorage.setItem(\"currency\", user.profile.currency);\n        }\n        currencyDep.changed();\n      }\n    }\n  });\n  //\n  // init i18nextJquery\n  //\n  i18nextJquery.init(i18next, $, {\n    tName: \"t\", // --> appends $.t = i18next.t\n    i18nName: \"i18n\", // --> appends $.i18n = i18next\n    handleName: \"localize\", // --> appends $(selector).localize(opts);\n    selectorAttr: \"data-i18n\", // selector for translating elements\n    targetAttr: \"data-i18n-target\", // element attribute to grab target element to translate (if diffrent then itself)\n    parseDefaultValueFromContent: true // parses default values from content ele.val or ele.text\n  });\n\n  // global onRendered event finds and replaces\n  // data-i18n attributes in html/template source.\n  // uses methods from i18nextJquery\n  Template.onRendered(function () {\n    this.autorun((function () {\n      return function () {\n        i18nextDep.depend();\n        $elements = $(\"[data-i18n]\").localize();\n      };\n    })(this));\n  });\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/i18n/startup.js.map","sourceFileName":"/client/modules/i18n/startup.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"startup"},"ignored":false,"code":"var _omit = void 0;\n\nmodule.importSync(\"lodash/omit\", {\n  \"default\": function (v) {\n    _omit = v;\n  }\n}, 0);\nvar i18nextBrowserLanguageDetector = void 0;\nmodule.importSync(\"i18next-browser-languagedetector\", {\n  \"default\": function (v) {\n    i18nextBrowserLanguageDetector = v;\n  }\n}, 1);\nvar i18nextLocalStorageCache = void 0;\nmodule.importSync(\"i18next-localstorage-cache\", {\n  \"default\": function (v) {\n    i18nextLocalStorageCache = v;\n  }\n}, 2);\nvar i18nextSprintfPostProcessor = void 0;\nmodule.importSync(\"i18next-sprintf-postprocessor\", {\n  \"default\": function (v) {\n    i18nextSprintfPostProcessor = v;\n  }\n}, 3);\nvar i18nextJquery = void 0;\nmodule.importSync(\"jquery-i18next\", {\n  \"default\": function (v) {\n    i18nextJquery = v;\n  }\n}, 4);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 5);\nvar Tracker = void 0;\nmodule.importSync(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 6);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 7);\nvar Shops = void 0,\n    Translations = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  },\n  Translations: function (v) {\n    Translations = v;\n  }\n}, 8);\nvar Schemas = Object.create(null);\nmodule.importSync(\"/lib/collections/schemas\", {\n  \"*\": function (v, n) {\n    Schemas[n] = v;\n  }\n}, 9);\nvar i18next = void 0,\n    packageNamespaces = void 0,\n    getLabelsFor = void 0,\n    getMessagesFor = void 0,\n    i18nextDep = void 0,\n    currencyDep = void 0;\nmodule.importSync(\"./main\", {\n  \"default\": function (v) {\n    i18next = v;\n  },\n  packageNamespaces: function (v) {\n    packageNamespaces = v;\n  },\n  getLabelsFor: function (v) {\n    getLabelsFor = v;\n  },\n  getMessagesFor: function (v) {\n    getMessagesFor = v;\n  },\n  i18nextDep: function (v) {\n    i18nextDep = v;\n  },\n  currencyDep: function (v) {\n    currencyDep = v;\n  }\n}, 10);\nvar mergeDeep = void 0;\nmodule.importSync(\"/lib/api\", {\n  mergeDeep: function (v) {\n    mergeDeep = v;\n  }\n}, 11);\n//\n// setup options for i18nextBrowserLanguageDetector\n// note: this isn't fully operational yet\n// language is set by user currently\n// progress toward detecting language\n// should focus around i18nextBrowserLanguageDetector\n//\nvar options = {\n  // order and from where user language should be detected\n  order: [\"querystring\", \"cookie\", \"localStorage\", \"navigator\", \"htmlTag\"],\n  // keys or params to lookup language from\n  lookupQuerystring: \"lng\",\n  lookupCookie: \"i18next\",\n  lookupLocalStorage: \"i18nextLng\",\n  // cache user language on\n  caches: [\"localStorage\", \"cookie\"],\n  // optional htmlTag with lang attribute, the default is:\n  htmlTag: document.documentElement\n};\nMeteor.startup(function () {\n  // use tracker autorun to detect language changes\n  // this only runs on initial page loaded\n  // and when user.profile.lang updates\n  Tracker.autorun(function () {\n    if (Reaction.Subscriptions.Shops.ready() && Meteor.user()) {\n      var shop = Shops.findOne(Reaction.getShopId());\n      var language = shop.language;\n\n      if (Meteor.user() && Meteor.user().profile && Meteor.user().profile.lang) {\n        language = Meteor.user().profile.lang;\n      } //\n      // subscribe to user + shop Translations\n      //\n\n\n      return Meteor.subscribe(\"Translations\", language, function () {\n        // fetch reaction translations\n        var translations = Translations.find({}, {\n          fields: {\n            _id: 0\n          }\n        }).fetch(); //\n        // reduce and merge translations\n        // into i18next resource format\n        //\n\n        var resources = {};\n        translations.forEach(function (translation) {\n          var resource = {};\n          resource[translation.i18n] = translation.translation;\n          resources = mergeDeep(resources, resource);\n        }); //\n        // initialize i18next\n        //\n\n        i18next.use(i18nextBrowserLanguageDetector).use(i18nextLocalStorageCache).use(i18nextSprintfPostProcessor).init({\n          detection: options,\n          debug: false,\n          ns: packageNamespaces,\n          // translation namespace for every package\n          defaultNS: \"core\",\n          // reaction \"core\" is the default namespace\n          fallbackNS: packageNamespaces,\n          lng: language,\n          // user session language\n          fallbackLng: shop ? shop.language : null,\n          // Shop language\n          resources: resources\n        }, function () {\n          // someday this should work\n          // see: https://github.com/aldeed/meteor-simple-schema/issues/494\n          for (var schema in meteorBabelHelpers.sanitizeForInObject(_omit(Schemas, \"__esModule\"))) {\n            if ({}.hasOwnProperty.call(Schemas, schema)) {\n              var ss = Schemas[schema];\n              ss.labels(getLabelsFor(ss, schema));\n              ss.messages(getMessagesFor(ss, schema));\n            }\n          }\n\n          i18nextDep.changed(); // global first time init event finds and replaces\n          // data-i18n attributes in html/template source.\n\n          $elements = $(\"[data-i18n]\").localize(); // apply language direction to html\n\n          if (i18next.dir(language) === \"rtl\") {\n            return $(\"html\").addClass(\"rtl\");\n          }\n\n          return $(\"html\").removeClass(\"rtl\");\n        });\n      }); // return\n    }\n  }); // use tracker autorun to detect currency changes\n  // this only runs on initial page loaded\n  // and when user.profile.currency updates\n  // althought it is also triggered when profile updates ( meaning .lang )\n\n  Tracker.autorun(function () {\n    var user = Meteor.user();\n\n    if (Reaction.Subscriptions.Shops.ready() && user) {\n      if (user.profile && user.profile.currency) {\n        var localStorageCurrency = localStorage.getItem(\"currency\");\n\n        if (localStorageCurrency !== user.profile.currency) {\n          localStorage.setItem(\"currency\", user.profile.currency);\n        }\n\n        currencyDep.changed();\n      }\n    }\n  }); //\n  // init i18nextJquery\n  //\n\n  i18nextJquery.init(i18next, $, {\n    tName: \"t\",\n    // --> appends $.t = i18next.t\n    i18nName: \"i18n\",\n    // --> appends $.i18n = i18next\n    handleName: \"localize\",\n    // --> appends $(selector).localize(opts);\n    selectorAttr: \"data-i18n\",\n    // selector for translating elements\n    targetAttr: \"data-i18n-target\",\n    // element attribute to grab target element to translate (if diffrent then itself)\n    parseDefaultValueFromContent: true // parses default values from content ele.val or ele.text\n\n  }); // global onRendered event finds and replaces\n  // data-i18n attributes in html/template source.\n  // uses methods from i18nextJquery\n\n  Template.onRendered(function () {\n    this.autorun(function () {\n      return function () {\n        i18nextDep.depend();\n        $elements = $(\"[data-i18n]\").localize();\n      };\n    }(this));\n  });\n});","map":{"version":3,"sources":["/client/modules/i18n/startup.js"],"names":["i18nextBrowserLanguageDetector","i18nextLocalStorageCache","i18nextSprintfPostProcessor","i18nextJquery","Meteor","Tracker","Reaction","Shops","Translations","Schemas","i18next","packageNamespaces","getLabelsFor","getMessagesFor","i18nextDep","currencyDep","mergeDeep","options","order","lookupQuerystring","lookupCookie","lookupLocalStorage","caches","htmlTag","document","documentElement","startup","autorun","Subscriptions","ready","user","shop","findOne","getShopId","language","profile","lang","subscribe","translations","find","fields","_id","fetch","resources","forEach","translation","resource","i18n","use","init","detection","debug","ns","defaultNS","fallbackNS","lng","fallbackLng","schema","hasOwnProperty","call","ss","labels","messages","changed","$elements","$","localize","dir","addClass","removeClass","currency","localStorageCurrency","localStorage","getItem","setItem","tName","i18nName","handleName","selectorAttr","targetAttr","parseDefaultValueFromContent","Template","onRendered","depend"],"mappings":"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","file":"/client/modules/i18n/startup.js.map","sourcesContent":["import _ from \"lodash\";\nimport i18nextBrowserLanguageDetector from \"i18next-browser-languagedetector\";\nimport i18nextLocalStorageCache from \"i18next-localstorage-cache\";\nimport i18nextSprintfPostProcessor from \"i18next-sprintf-postprocessor\";\nimport i18nextJquery from \"jquery-i18next\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Tracker } from \"meteor/tracker\";\nimport { Reaction } from \"/client/api\";\nimport { Shops, Translations } from \"/lib/collections\";\nimport * as Schemas from \"/lib/collections/schemas\";\nimport i18next, { packageNamespaces, getLabelsFor, getMessagesFor, i18nextDep, currencyDep } from \"./main\";\nimport { mergeDeep } from \"/lib/api\";\n\n//\n// setup options for i18nextBrowserLanguageDetector\n// note: this isn't fully operational yet\n// language is set by user currently\n// progress toward detecting language\n// should focus around i18nextBrowserLanguageDetector\n//\nconst options = {\n  // order and from where user language should be detected\n  order: [\"querystring\", \"cookie\", \"localStorage\", \"navigator\", \"htmlTag\"],\n\n  // keys or params to lookup language from\n  lookupQuerystring: \"lng\",\n  lookupCookie: \"i18next\",\n  lookupLocalStorage: \"i18nextLng\",\n\n  // cache user language on\n  caches: [\"localStorage\", \"cookie\"],\n  // optional htmlTag with lang attribute, the default is:\n  htmlTag: document.documentElement\n};\n\nMeteor.startup(() => {\n  // use tracker autorun to detect language changes\n  // this only runs on initial page loaded\n  // and when user.profile.lang updates\n  Tracker.autorun(function () {\n    if (Reaction.Subscriptions.Shops.ready() && Meteor.user()) {\n      const shop = Shops.findOne(Reaction.getShopId());\n      let language = shop.language;\n      if (Meteor.user() && Meteor.user().profile && Meteor.user().profile.lang) {\n        language = Meteor.user().profile.lang;\n      }\n      //\n      // subscribe to user + shop Translations\n      //\n      return Meteor.subscribe(\"Translations\", language, () => {\n        // fetch reaction translations\n        const translations = Translations.find({}, {\n          fields: {\n            _id: 0\n          }\n        }).fetch();\n\n        //\n        // reduce and merge translations\n        // into i18next resource format\n        //\n        let resources = {};\n        translations.forEach(function (translation) {\n          const resource = {};\n          resource[translation.i18n] = translation.translation;\n          resources = mergeDeep(resources, resource);\n        });\n\n        //\n        // initialize i18next\n        //\n        i18next\n          .use(i18nextBrowserLanguageDetector)\n          .use(i18nextLocalStorageCache)\n          .use(i18nextSprintfPostProcessor)\n          .init({\n            detection: options,\n            debug: false,\n            ns: packageNamespaces, // translation namespace for every package\n            defaultNS: \"core\", // reaction \"core\" is the default namespace\n            fallbackNS: packageNamespaces,\n            lng: language, // user session language\n            fallbackLng: shop ? shop.language : null, // Shop language\n            resources: resources\n          }, () => {\n            // someday this should work\n            // see: https://github.com/aldeed/meteor-simple-schema/issues/494\n            for (const schema in _.omit(Schemas, \"__esModule\")) {\n              if ({}.hasOwnProperty.call(Schemas, schema)) {\n                const ss = Schemas[schema];\n                ss.labels(getLabelsFor(ss, schema));\n                ss.messages(getMessagesFor(ss, schema));\n              }\n            }\n\n            i18nextDep.changed();\n\n            // global first time init event finds and replaces\n            // data-i18n attributes in html/template source.\n            $elements = $(\"[data-i18n]\").localize();\n\n            // apply language direction to html\n            if (i18next.dir(language) === \"rtl\") {\n              return $(\"html\").addClass(\"rtl\");\n            }\n            return $(\"html\").removeClass(\"rtl\");\n          });\n      }); // return\n    }\n  });\n\n  // use tracker autorun to detect currency changes\n  // this only runs on initial page loaded\n  // and when user.profile.currency updates\n  // althought it is also triggered when profile updates ( meaning .lang )\n  Tracker.autorun(function () {\n    const user = Meteor.user();\n    if (Reaction.Subscriptions.Shops.ready() && user) {\n      if (user.profile && user.profile.currency) {\n        const localStorageCurrency = localStorage.getItem(\"currency\");\n        if (localStorageCurrency !== user.profile.currency) {\n          localStorage.setItem(\"currency\", user.profile.currency);\n        }\n        currencyDep.changed();\n      }\n    }\n  });\n  //\n  // init i18nextJquery\n  //\n  i18nextJquery.init(i18next, $, {\n    tName: \"t\", // --> appends $.t = i18next.t\n    i18nName: \"i18n\", // --> appends $.i18n = i18next\n    handleName: \"localize\", // --> appends $(selector).localize(opts);\n    selectorAttr: \"data-i18n\", // selector for translating elements\n    targetAttr: \"data-i18n-target\", // element attribute to grab target element to translate (if diffrent then itself)\n    parseDefaultValueFromContent: true // parses default values from content ele.val or ele.text\n  });\n\n  // global onRendered event finds and replaces\n  // data-i18n attributes in html/template source.\n  // uses methods from i18nextJquery\n  Template.onRendered(function () {\n    this.autorun((function () {\n      return function () {\n        i18nextDep.depend();\n        $elements = $(\"[data-i18n]\").localize();\n      };\n    })(this));\n  });\n});\n"]},"hash":"a54d1b6bb6f66681cb73af2bddbac67b08454a4d"}
