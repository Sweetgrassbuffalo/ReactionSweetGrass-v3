{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/server/api","imported":["Logger","MethodHooks"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"MethodHooks","local":"MethodHooks"}]},{"source":"/lib/collections","imported":["Cart","Orders"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Orders","local":"Orders"}]},{"source":"../methods/taxCalc","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"taxCalc"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/taxes-avalara/server/hooks/hooks.js","filenameRelative":"/imports/plugins/included/taxes-avalara/server/hooks/hooks.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/server/hooks/hooks.js"],"names":["Meteor","Logger","MethodHooks","Cart","Orders","taxCalc","linesToTaxes","lines","taxes","map","line","lineNumber","discountAmount","taxable","isItemTaxable","tax","taxableAmount","taxCode","details","after","options","cartId","arguments","cartToCalc","findOne","pkg","getPackageData","debug","settings","avalara","enabled","performTaxCalculation","estimateCart","result","totalTax","taxAmount","reduce","totalTaxes","taxRate","calcTaxable","call","order","recordOrder","info","_id","orderId","refundAmount","reportRefund"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAQ,AAAmB,AACpC,AAAS,AAAM,AAAc,AAC7B,AAAO,AAAa;;AAEpB,SAAA,AAAS,aAAT,AAAsB,OAAO,AAC3B;MAAM,cAAQ,AAAM,IAAK,UAAD,AAAU,MAChC;;kBACc,KADP,AACY,AACjB;sBAAgB,KAFX,AAEgB,AACrB;eAAS,KAHJ,AAGS,AACd;WAAK,KAJA,AAIK,AACV;qBAAe,KALV,AAKe,AACpB;eAAS,KANJ,AAMS,AACd;eAAS,KAPX,AAAO,AAOS,AAEjB;AATQ,AACL;AAFJ,AAAc,AAWd,GAXc;SAWd,AAAO,AACR;AAGD,AAAY,AAAM,AAAmB,AAAC,AAAY;;AAChD,AAAM,YAAS,MAAA,AAAQ,AAAU,mBAAjC,mBACA;MAAM,SAAa,QAAA,AAAK,AAAQ,UAAhC,AAAmB,AACnB;MAAM,AAAM,aAAQ,aAApB,AAAY,AAEZ;MAAO,MAAP,AAAa,QALmC,AAKhD,AAAiE,AACjE,AACA;AAAI,SAAO,MAAP,AAAO,AAAI,AAAS,AAAQ,AAAW,AAAI,AAAS,AAAQ,oDAAhE,AAAuF,AACrF,SAAA,AAAQ,AAAa,AAAY,AAAU,AAAQ,AACjD;;yFACA;AAAI,YAAU,aAAV,AAAiB,YAAY,AAAO,UAAO,QAA/C,AAAI,AAA6B,AAA2B,AAAY,AAAO,AAAO,AACpF;AAAA,AAAM,AAAQ,AAAa,AAAO,AAClC;UAAM,UAAY,OAAA,AAAM,YAAO,AAAC,OAAD,AAAa,OAAb,AAAqB,aAAa,AAAI,YAArE,AAAkB,AAAwD,cAC1E;YAAM,QAAU,aAAY,OAA5B,AAA4B,AAAQ,AAAY,AAChD;YAAA,AAAO,AAAK,kBAAZ,AAA6B,iBAA7B,AAAqC,YAArC,AAA8C;;WAC/C;sDAPH,AAQC;sDACF;;AACD;AAlBF,AAkBE,AAAO,AACR;;SAED;AAAA,AAAY,AAAM,AAAwB,AAAC,AAAY,AACrD,AAAM,AAAM,AAAQ;6DACpB;AAAI,MAAO,MAAI,QAAf,AAAI,AAAO,AAAa,AAAQ,AAAW,AAAI,AAAS,AAAQ,AAAuB,AACrF;;MAAM,WAAS,SAAQ,QAAvB,AAAe,AAAkB,uDACjC;QAAM,AAAQ,SAAO,QAAP,AAAe,UAAE;QAAQ;cAAV;;AAA7B,AAAc,iDACd;UAAQ,QAAR,AAAoB,AAAO,AAAU,AAAQ,AAC3C;AAAI,eAAJ,AAAY,sBACV;AAAA,AAAO,AAAM,AAAQ,AAAM,AAAI,AAChC;AACF;AAJD,AAKD;;;AACD,AAAO;AAXT,AAYC,8DAED;MAAY,MAAZ,AAAkB,QAAlB,AAA2C,AAAC,AAAY,AACtD;;MAAM,OAAM,IAAQ,iBAApB,AAAY;oCACZ;AAAI,QAAO,AAAI,eAAJ,AAAa,QAAxB,AAAI,AAAO,AAAqB,AAAW,AAAI,AAAS,AAAQ,AAAuB,AACrF;QAAM,AAAU,eAAQ,QAAxB,AAAgB,AAAkB,UAClC;AAAM,YAAQ,aAAO,OAArB,AAAc,AAAe,gCAC7B;UAAM,QAAN,AAAqB,AAAQ,AAAU,AACvC;AAAQ,eAAR,AAAqB,AAAO,2BAA5B,MAA0C,AAAU,AAAQ,AAC1D;AAAA,AAAI,AAAQ,AACV;AAAA,AAAO,AAAM,AAAmB,AAAM,AAAI,AAC3C;AACF;;AAJD,SAKD;AAXH,AAYE,AAAO,AACR","file":"/imports/plugins/included/taxes-avalara/server/hooks/hooks.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Logger, MethodHooks } from \"/server/api\";\nimport { Cart, Orders } from \"/lib/collections\";\nimport taxCalc from \"../methods/taxCalc\";\n\nfunction linesToTaxes(lines) {\n  const taxes = lines.map((line) => {\n    return {\n      lineNumber: line.lineNumber,\n      discountAmount: line.discountAmount,\n      taxable: line.isItemTaxable,\n      tax: line.tax,\n      taxableAmount: line.taxableAmount,\n      taxCode: line.taxCode,\n      details: line.details\n    };\n  });\n  return taxes;\n}\n\n\nMethodHooks.after(\"taxes/calculate\", (options) => {\n  const cartId = options.arguments[0];\n  const cartToCalc = Cart.findOne(cartId);\n  const pkg = taxCalc.getPackageData();\n\n  Logger.debug(\"Avalara triggered on taxes/calculate for cartId:\", cartId);\n  // console.log(pkg, \"package in hook\");\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    taxCalc.estimateCart(cartToCalc, function (result) {\n      // we don't use totalTax, that just tells us we have a valid tax calculation\n      if (result && result.totalTax && typeof result.totalTax === \"number\" && result.lines) {\n        const taxes = linesToTaxes(result.lines);\n        const taxAmount = taxes.reduce((totalTaxes, tax) => totalTaxes + tax.tax, 0);\n        const taxRate = taxAmount / taxCalc.calcTaxable(cartToCalc);\n        Meteor.call(\"taxes/setRate\", cartId, taxRate, taxes);\n      }\n    });\n  }\n  return options;\n});\n\nMethodHooks.after(\"cart/copyCartToOrder\", (options) => {\n  const pkg = taxCalc.getPackageData();\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    const cartId = options.arguments[0];\n    const order = Orders.findOne({ cartId: cartId });\n    taxCalc.recordOrder(order, function (result) {\n      if (result) {\n        Logger.info(`Order ${order._id} recorded with Avalara`);\n      }\n    });\n  }\n  return options;\n});\n\nMethodHooks.after(\"orders/refunds/create\", (options) => {\n  const pkg = taxCalc.getPackageData();\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    const orderId = options.arguments[0];\n    const order = Orders.findOne(orderId);\n    const refundAmount = options.arguments[2];\n    taxCalc.reportRefund(order, refundAmount, function (result) {\n      if (result) {\n        Logger.info(`Refund for order ${order._id} recorded with Avalara`);\n      }\n    });\n  }\n  return options;\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/taxes-avalara/server/hooks/hooks.js.map","sourceFileName":"/imports/plugins/included/taxes-avalara/server/hooks/hooks.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"hooks"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Logger = void 0,\n    MethodHooks = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  },\n  MethodHooks: function (v) {\n    MethodHooks = v;\n  }\n}, 1);\nvar Cart = void 0,\n    Orders = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  },\n  Orders: function (v) {\n    Orders = v;\n  }\n}, 2);\nvar taxCalc = void 0;\nmodule.importSync(\"../methods/taxCalc\", {\n  \"default\": function (v) {\n    taxCalc = v;\n  }\n}, 3);\n\nfunction linesToTaxes(lines) {\n  var taxes = lines.map(function (line) {\n    return {\n      lineNumber: line.lineNumber,\n      discountAmount: line.discountAmount,\n      taxable: line.isItemTaxable,\n      tax: line.tax,\n      taxableAmount: line.taxableAmount,\n      taxCode: line.taxCode,\n      details: line.details\n    };\n  });\n  return taxes;\n}\n\nMethodHooks.after(\"taxes/calculate\", function (options) {\n  var cartId = options.arguments[0];\n  var cartToCalc = Cart.findOne(cartId);\n  var pkg = taxCalc.getPackageData();\n  Logger.debug(\"Avalara triggered on taxes/calculate for cartId:\", cartId); // console.log(pkg, \"package in hook\");\n\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    taxCalc.estimateCart(cartToCalc, function (result) {\n      // we don't use totalTax, that just tells us we have a valid tax calculation\n      if (result && result.totalTax && typeof result.totalTax === \"number\" && result.lines) {\n        var taxes = linesToTaxes(result.lines);\n        var taxAmount = taxes.reduce(function (totalTaxes, tax) {\n          return totalTaxes + tax.tax;\n        }, 0);\n        var taxRate = taxAmount / taxCalc.calcTaxable(cartToCalc);\n        Meteor.call(\"taxes/setRate\", cartId, taxRate, taxes);\n      }\n    });\n  }\n\n  return options;\n});\nMethodHooks.after(\"cart/copyCartToOrder\", function (options) {\n  var pkg = taxCalc.getPackageData();\n\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    var cartId = options.arguments[0];\n    var order = Orders.findOne({\n      cartId: cartId\n    });\n    taxCalc.recordOrder(order, function (result) {\n      if (result) {\n        Logger.info(\"Order \" + order._id + \" recorded with Avalara\");\n      }\n    });\n  }\n\n  return options;\n});\nMethodHooks.after(\"orders/refunds/create\", function (options) {\n  var pkg = taxCalc.getPackageData();\n\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    var orderId = options.arguments[0];\n    var order = Orders.findOne(orderId);\n    var refundAmount = options.arguments[2];\n    taxCalc.reportRefund(order, refundAmount, function (result) {\n      if (result) {\n        Logger.info(\"Refund for order \" + order._id + \" recorded with Avalara\");\n      }\n    });\n  }\n\n  return options;\n});","map":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/server/hooks/hooks.js"],"names":["Meteor","Logger","MethodHooks","Cart","Orders","taxCalc","linesToTaxes","lines","taxes","map","line","lineNumber","discountAmount","taxable","isItemTaxable","tax","taxableAmount","taxCode","details","after","options","cartId","arguments","cartToCalc","findOne","pkg","getPackageData","debug","settings","avalara","enabled","performTaxCalculation","estimateCart","result","totalTax","taxAmount","reduce","totalTaxes","taxRate","calcTaxable","call","order","recordOrder","info","_id","orderId","refundAmount","reportRefund"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAQ,AAAmB,AACpC,AAAS,AAAM,AAAc,AAC7B,AAAO,AAAa;;AAEpB,SAAA,AAAS,aAAT,AAAsB,OAAO,AAC3B;MAAM,cAAQ,AAAM,IAAK,UAAD,AAAU,MAChC;;kBACc,KADP,AACY,AACjB;sBAAgB,KAFX,AAEgB,AACrB;eAAS,KAHJ,AAGS,AACd;WAAK,KAJA,AAIK,AACV;qBAAe,KALV,AAKe,AACpB;eAAS,KANJ,AAMS,AACd;eAAS,KAPX,AAAO,AAOS,AAEjB;AATQ,AACL;AAFJ,AAAc,AAWd,GAXc;SAWd,AAAO,AACR;AAGD,AAAY,AAAM,AAAmB,AAAC,AAAY;;AAChD,AAAM,YAAS,MAAA,AAAQ,AAAU,mBAAjC,mBACA;MAAM,SAAa,QAAA,AAAK,AAAQ,UAAhC,AAAmB,AACnB;MAAM,AAAM,aAAQ,aAApB,AAAY,AAEZ;MAAO,MAAP,AAAa,QALmC,AAKhD,AAAiE,AACjE,AACA;AAAI,SAAO,MAAP,AAAO,AAAI,AAAS,AAAQ,AAAW,AAAI,AAAS,AAAQ,oDAAhE,AAAuF,AACrF,SAAA,AAAQ,AAAa,AAAY,AAAU,AAAQ,AACjD;;yFACA;AAAI,YAAU,aAAV,AAAiB,YAAY,AAAO,UAAO,QAA/C,AAAI,AAA6B,AAA2B,AAAY,AAAO,AAAO,AACpF;AAAA,AAAM,AAAQ,AAAa,AAAO,AAClC;UAAM,UAAY,OAAA,AAAM,YAAO,AAAC,OAAD,AAAa,OAAb,AAAqB,aAAa,AAAI,YAArE,AAAkB,AAAwD,cAC1E;YAAM,QAAU,aAAY,OAA5B,AAA4B,AAAQ,AAAY,AAChD;YAAA,AAAO,AAAK,kBAAZ,AAA6B,iBAA7B,AAAqC,YAArC,AAA8C;;WAC/C;sDAPH,AAQC;sDACF;;AACD;AAlBF,AAkBE,AAAO,AACR;;SAED;AAAA,AAAY,AAAM,AAAwB,AAAC,AAAY,AACrD,AAAM,AAAM,AAAQ;6DACpB;AAAI,MAAO,MAAI,QAAf,AAAI,AAAO,AAAa,AAAQ,AAAW,AAAI,AAAS,AAAQ,AAAuB,AACrF;;MAAM,WAAS,SAAQ,QAAvB,AAAe,AAAkB,uDACjC;QAAM,AAAQ,SAAO,QAAP,AAAe,UAAE;QAAQ;cAAV;;AAA7B,AAAc,iDACd;UAAQ,QAAR,AAAoB,AAAO,AAAU,AAAQ,AAC3C;AAAI,eAAJ,AAAY,sBACV;AAAA,AAAO,AAAM,AAAQ,AAAM,AAAI,AAChC;AACF;AAJD,AAKD;;;AACD,AAAO;AAXT,AAYC,8DAED;MAAY,MAAZ,AAAkB,QAAlB,AAA2C,AAAC,AAAY,AACtD;;MAAM,OAAM,IAAQ,iBAApB,AAAY;oCACZ;AAAI,QAAO,AAAI,eAAJ,AAAa,QAAxB,AAAI,AAAO,AAAqB,AAAW,AAAI,AAAS,AAAQ,AAAuB,AACrF;QAAM,AAAU,eAAQ,QAAxB,AAAgB,AAAkB,UAClC;AAAM,YAAQ,aAAO,OAArB,AAAc,AAAe,gCAC7B;UAAM,QAAN,AAAqB,AAAQ,AAAU,AACvC;AAAQ,eAAR,AAAqB,AAAO,2BAA5B,MAA0C,AAAU,AAAQ,AAC1D;AAAA,AAAI,AAAQ,AACV;AAAA,AAAO,AAAM,AAAmB,AAAM,AAAI,AAC3C;AACF;;AAJD,SAKD;AAXH,AAYE,AAAO,AACR","file":"/imports/plugins/included/taxes-avalara/server/hooks/hooks.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Logger, MethodHooks } from \"/server/api\";\nimport { Cart, Orders } from \"/lib/collections\";\nimport taxCalc from \"../methods/taxCalc\";\n\nfunction linesToTaxes(lines) {\n  const taxes = lines.map((line) => {\n    return {\n      lineNumber: line.lineNumber,\n      discountAmount: line.discountAmount,\n      taxable: line.isItemTaxable,\n      tax: line.tax,\n      taxableAmount: line.taxableAmount,\n      taxCode: line.taxCode,\n      details: line.details\n    };\n  });\n  return taxes;\n}\n\n\nMethodHooks.after(\"taxes/calculate\", (options) => {\n  const cartId = options.arguments[0];\n  const cartToCalc = Cart.findOne(cartId);\n  const pkg = taxCalc.getPackageData();\n\n  Logger.debug(\"Avalara triggered on taxes/calculate for cartId:\", cartId);\n  // console.log(pkg, \"package in hook\");\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    taxCalc.estimateCart(cartToCalc, function (result) {\n      // we don't use totalTax, that just tells us we have a valid tax calculation\n      if (result && result.totalTax && typeof result.totalTax === \"number\" && result.lines) {\n        const taxes = linesToTaxes(result.lines);\n        const taxAmount = taxes.reduce((totalTaxes, tax) => totalTaxes + tax.tax, 0);\n        const taxRate = taxAmount / taxCalc.calcTaxable(cartToCalc);\n        Meteor.call(\"taxes/setRate\", cartId, taxRate, taxes);\n      }\n    });\n  }\n  return options;\n});\n\nMethodHooks.after(\"cart/copyCartToOrder\", (options) => {\n  const pkg = taxCalc.getPackageData();\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    const cartId = options.arguments[0];\n    const order = Orders.findOne({ cartId: cartId });\n    taxCalc.recordOrder(order, function (result) {\n      if (result) {\n        Logger.info(`Order ${order._id} recorded with Avalara`);\n      }\n    });\n  }\n  return options;\n});\n\nMethodHooks.after(\"orders/refunds/create\", (options) => {\n  const pkg = taxCalc.getPackageData();\n  if (pkg && pkg.settings.avalara.enabled && pkg.settings.avalara.performTaxCalculation) {\n    const orderId = options.arguments[0];\n    const order = Orders.findOne(orderId);\n    const refundAmount = options.arguments[2];\n    taxCalc.reportRefund(order, refundAmount, function (result) {\n      if (result) {\n        Logger.info(`Refund for order ${order._id} recorded with Avalara`);\n      }\n    });\n  }\n  return options;\n});\n"]},"hash":"4e5c8e1a4426d42c3ba995c2fb5dbcbea5a4bc5c"}
