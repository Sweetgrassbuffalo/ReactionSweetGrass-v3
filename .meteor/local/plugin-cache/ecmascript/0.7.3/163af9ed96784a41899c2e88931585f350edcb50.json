{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"lodash/isFunction","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_isFunction"}]},{"source":"lodash/filter","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_filter"}]},{"source":"lodash/extend","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_extend"}]},{"source":"lodash/map","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_map"}]}],"exports":{"exported":["ServiceConfigHelper"],"specifiers":[{"kind":"local","local":"ServiceConfigHelper","exported":"ServiceConfigHelper"}]}}},"options":{"filename":"/client/modules/accounts/helpers/util.js","filenameRelative":"/client/modules/accounts/helpers/util.js","inputSourceMap":{"version":3,"sources":["/client/modules/accounts/helpers/util.js"],"names":["capitalize","str","finalString","String","charAt","toUpperCase","slice","providers","Facebook","Google","Twitter","fields","property","label","ServiceConfigHelper","availableServices","services","Package","Accounts","oauth","serviceNames","sort","capitalizedServiceName","name","configFieldsForService","capitalizedName","template","field","type","extendEach","configurations","ServiceConfiguration","find","fetch","matchingConfigurations","service","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yDAEA;AAAA,AAAS,AAAW,AAAK,AACvB,AAAM,AAAc,AAAQ,AAAO,AAAK,AAAO;;AAC/C,IAAO;;UAGT;AAAM,WAAY,AAChB,AAAU,AACV,AAAQ;AALR,AAAO,AAAY,AAAO,AAAG,AAAgB,AAAI,AAAM,AACxD;;AAKC,UAAS,8BAHX,AAAkB;;;WAMlB;;AAAU,cAAV,AAAmB;AAAS,WAAY,AACtC,AAAO,AACL,AAAE;;AAAF,AAAY,AAAS,AAAO;;AADvB,AACL,AACA,sCAAE;;AAA2B;WAFxB,AAEL;GAAA,AAAY,AAAU;;WAH1B,AAKC;AAJC;AAMF,AAAU,AAAO,AAAS,AAAY;;AACpC,AAAO,UACL,6BAAE;;AAA6B;WAD1B,AACL;GAAA,AAAY,AAAY;;WACxB,AAAE,AAAU,AAAU;AAAtB;AAHJ,AACE,AAAO,AAEL,AAA6B,AAEhC;;IAED;;;;;gCAAA,AAAU,AAAQ;iCAAlB,AAA2B,AAAY,AACrC;AAAO,UACL,uEAAE;eADG,AACL,AAAY,AAAe,AAAO;AAClC,aAAE;AAAF,AAAY,AAAU,AAAO;;;;;gCAF/B,AAAO;0CADT,AAKC;;eAED;AAAO,AAAM,AAAoB,AAE/B,AAAoB,AAClB;;AAAM,aAAW,WAAjB,AAAiB,AAAQ,AAAoB,AAAS,AAAM,AAAiB,AAC7E;AAAA,AAAS,AAET,AAAO,AACR;;;;;;;wDAED;qBAAA,AAAuB,UAAM,AAC3B,AAAI,AAAS,AAAoB,AAC/B;;UAAO,UAAP,AACD;8BAED;AAAO,oBAAA,AAAW,QAAlB,iBACD;;oEAED;AAAA,AAAuB,AAAM,AAC3B,AAAM,AAAkB,AAAK,AAAuB,AACpD;;AAAM;wBAEN,AAAI,AAAU,AACZ;AAHF,AAAiB,AAAU,WAAV;AAGf,AAAM,AAAS,AAAS,AAExB;AAAO,AAAM,AAAQ,AAAC,AAAU,AAC9B,AAAI,AAAC,AAAM,AAAM,AACf;;aAAA,AAAM,AAAO,AAAM,AAAa,AAAW,AAAa,AACzD;AAED;;;;;;sBAAO;AAAA,AAAS,AAAO,AACrB;;UAAM,AAAM,yBADS;AAAhB,UAAP,4DALF,AAAO,AAQN,AACF;;;mBAED;;;YAAA,AAAO;;8CAGT;AAAS,wBAAT,AAAqB,uBACnB,AAAM,AAAoB,AAAK,AAC/B,AAAM,AAAiB,AAAqB,AAAe,AAAO,AAElE;AAND;;YAMQ,AAAM,uBAAN,AAAyB,AAAC,QAAS,AACxC;AAAM,qCAAyB,AAAS,uBAAT,AAAyB,AAAE;AAA1D,AAA+B,AAAyB,AAAW;;qCACnE;AAAI,oBAAU,wCACZ;AADY,AAEZ,AAAO,AAAK,AAAuB,AACnC;;eAHY,AAGJ,AAAK,AAAuB;AAHtC;AA5C2B,AA0C7B,AAAO,AAQL,AAAI,AAAuB,AAAQ,AACjC,AAAU,AAAS,AAAS,AAAuB,AACpD,AAED,AAAI,AAAa,AAAa,AAC5B,AAAU,AAAS,AAAS,AAAW,AAAY,AACpD,AAED,AAAO,AACR,AACF","file":"/client/modules/accounts/helpers/util.js.map","sourcesContent":["import _ from \"lodash\";\n\nfunction capitalize(str) {\n  const finalString = str === null ? \"\" : String(str);\n  return finalString.charAt(0).toUpperCase() + str.slice(1);\n}\n\nconst providers = {\n  Facebook: {},\n  Google: {},\n  Twitter: {}\n};\n\nproviders.Facebook.fields = function () {\n  return [\n    { property: \"appId\", label: \"App ID\" },\n    { property: \"secret\", label: \"App Secret\" }\n  ];\n};\n\nproviders.Google.fields = function () {\n  return [\n    { property: \"clientId\", label: \"Client ID\" },\n    { property: \"secret\", label: \"Client secret\" }\n  ];\n};\n\nproviders.Twitter.fields = function () {\n  return [\n    { property: \"consumerKey\", label: \"API key\" },\n    { property: \"secret\", label: \"API secret\" }\n  ];\n};\n\nexport class ServiceConfigHelper {\n\n  availableServices() {\n    const services = Package[\"accounts-oauth\"] ? Accounts.oauth.serviceNames() : [];\n    services.sort();\n\n    return services;\n  }\n\n  capitalizedServiceName(name) {\n    if (name === \"meteor-developer\") {\n      return \"MeteorDeveloperAccount\";\n    }\n\n    return capitalize(name);\n  }\n\n  configFieldsForService(name) {\n    const capitalizedName = this.capitalizedServiceName(name);\n    const template = providers[capitalizedName];\n\n    if (template) {\n      const fields = template.fields();\n\n      return _.map(fields, (field) => {\n        if (!field.type) {\n          field.type = field.property === \"secret\" ? \"password\" : \"text\";\n        }\n\n        return _.extend(field, {\n          type: field.type\n        });\n      });\n    }\n\n    return [];\n  }\n\n  services(extendEach) {\n    const availableServices = this.availableServices();\n    const configurations = ServiceConfiguration.configurations.find().fetch();\n\n    return _.map(availableServices, (name) => {\n      const matchingConfigurations = _.filter(configurations, { service: name });\n      let service = {\n        name,\n        label: this.capitalizedServiceName(name),\n        fields: this.configFieldsForService(name)\n      };\n\n      if (matchingConfigurations.length) {\n        service = _.extend(service, matchingConfigurations[0]);\n      }\n\n      if (_.isFunction(extendEach)) {\n        service = _.extend(service, extendEach(service) || {});\n      }\n\n      return service;\n    });\n  }\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/accounts/helpers/util.js.map","sourceFileName":"/client/modules/accounts/helpers/util.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"util"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  ServiceConfigHelper: function () {\n    return ServiceConfigHelper;\n  }\n});\n\nvar _isFunction = void 0;\n\nmodule.importSync(\"lodash/isFunction\", {\n  \"default\": function (v) {\n    _isFunction = v;\n  }\n}, 0);\n\nvar _filter = void 0;\n\nmodule.importSync(\"lodash/filter\", {\n  \"default\": function (v) {\n    _filter = v;\n  }\n}, 1);\n\nvar _extend = void 0;\n\nmodule.importSync(\"lodash/extend\", {\n  \"default\": function (v) {\n    _extend = v;\n  }\n}, 2);\n\nvar _map = void 0;\n\nmodule.importSync(\"lodash/map\", {\n  \"default\": function (v) {\n    _map = v;\n  }\n}, 3);\n\nfunction capitalize(str) {\n  var finalString = str === null ? \"\" : String(str);\n  return finalString.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar providers = {\n  Facebook: {},\n  Google: {},\n  Twitter: {}\n};\n\nproviders.Facebook.fields = function () {\n  return [{\n    property: \"appId\",\n    label: \"App ID\"\n  }, {\n    property: \"secret\",\n    label: \"App Secret\"\n  }];\n};\n\nproviders.Google.fields = function () {\n  return [{\n    property: \"clientId\",\n    label: \"Client ID\"\n  }, {\n    property: \"secret\",\n    label: \"Client secret\"\n  }];\n};\n\nproviders.Twitter.fields = function () {\n  return [{\n    property: \"consumerKey\",\n    label: \"API key\"\n  }, {\n    property: \"secret\",\n    label: \"API secret\"\n  }];\n};\n\nvar ServiceConfigHelper = function () {\n  function ServiceConfigHelper() {\n    (0, _classCallCheck3.default)(this, ServiceConfigHelper);\n  }\n\n  ServiceConfigHelper.prototype.availableServices = function () {\n    function availableServices() {\n      var services = Package[\"accounts-oauth\"] ? Accounts.oauth.serviceNames() : [];\n      services.sort();\n      return services;\n    }\n\n    return availableServices;\n  }();\n\n  ServiceConfigHelper.prototype.capitalizedServiceName = function () {\n    function capitalizedServiceName(name) {\n      if (name === \"meteor-developer\") {\n        return \"MeteorDeveloperAccount\";\n      }\n\n      return capitalize(name);\n    }\n\n    return capitalizedServiceName;\n  }();\n\n  ServiceConfigHelper.prototype.configFieldsForService = function () {\n    function configFieldsForService(name) {\n      var capitalizedName = this.capitalizedServiceName(name);\n      var template = providers[capitalizedName];\n\n      if (template) {\n        var fields = template.fields();\n        return _map(fields, function (field) {\n          if (!field.type) {\n            field.type = field.property === \"secret\" ? \"password\" : \"text\";\n          }\n\n          return _extend(field, {\n            type: field.type\n          });\n        });\n      }\n\n      return [];\n    }\n\n    return configFieldsForService;\n  }();\n\n  ServiceConfigHelper.prototype.services = function () {\n    function services(extendEach) {\n      var _this = this;\n\n      var availableServices = this.availableServices();\n      var configurations = ServiceConfiguration.configurations.find().fetch();\n      return _map(availableServices, function (name) {\n        var matchingConfigurations = _filter(configurations, {\n          service: name\n        });\n\n        var service = {\n          name: name,\n          label: _this.capitalizedServiceName(name),\n          fields: _this.configFieldsForService(name)\n        };\n\n        if (matchingConfigurations.length) {\n          service = _extend(service, matchingConfigurations[0]);\n        }\n\n        if (_isFunction(extendEach)) {\n          service = _extend(service, extendEach(service) || {});\n        }\n\n        return service;\n      });\n    }\n\n    return services;\n  }();\n\n  return ServiceConfigHelper;\n}();","map":{"version":3,"sources":["/client/modules/accounts/helpers/util.js"],"names":["capitalize","str","finalString","String","charAt","toUpperCase","slice","providers","Facebook","Google","Twitter","fields","property","label","ServiceConfigHelper","availableServices","services","Package","Accounts","oauth","serviceNames","sort","capitalizedServiceName","name","configFieldsForService","capitalizedName","template","field","type","extendEach","configurations","ServiceConfiguration","find","fetch","matchingConfigurations","service","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yDAEA;AAAA,AAAS,AAAW,AAAK,AACvB,AAAM,AAAc,AAAQ,AAAO,AAAK,AAAO;;AAC/C,IAAO;;UAGT;AAAM,WAAY,AAChB,AAAU,AACV,AAAQ;AALR,AAAO,AAAY,AAAO,AAAG,AAAgB,AAAI,AAAM,AACxD;;AAKC,UAAS,8BAHX,AAAkB;;;WAMlB;;AAAU,cAAV,AAAmB;AAAS,WAAY,AACtC,AAAO,AACL,AAAE;;AAAF,AAAY,AAAS,AAAO;;AADvB,AACL,AACA,sCAAE;;AAA2B;WAFxB,AAEL;GAAA,AAAY,AAAU;;WAH1B,AAKC;AAJC;AAMF,AAAU,AAAO,AAAS,AAAY;;AACpC,AAAO,UACL,6BAAE;;AAA6B;WAD1B,AACL;GAAA,AAAY,AAAY;;WACxB,AAAE,AAAU,AAAU;AAAtB;AAHJ,AACE,AAAO,AAEL,AAA6B,AAEhC;;IAED;;;;;gCAAA,AAAU,AAAQ;iCAAlB,AAA2B,AAAY,AACrC;AAAO,UACL,uEAAE;eADG,AACL,AAAY,AAAe,AAAO;AAClC,aAAE;AAAF,AAAY,AAAU,AAAO;;;;;gCAF/B,AAAO;0CADT,AAKC;;eAED;AAAO,AAAM,AAAoB,AAE/B,AAAoB,AAClB;;AAAM,aAAW,WAAjB,AAAiB,AAAQ,AAAoB,AAAS,AAAM,AAAiB,AAC7E;AAAA,AAAS,AAET,AAAO,AACR;;;;;;;wDAED;qBAAA,AAAuB,UAAM,AAC3B,AAAI,AAAS,AAAoB,AAC/B;;UAAO,UAAP,AACD;8BAED;AAAO,oBAAA,AAAW,QAAlB,iBACD;;oEAED;AAAA,AAAuB,AAAM,AAC3B,AAAM,AAAkB,AAAK,AAAuB,AACpD;;AAAM;wBAEN,AAAI,AAAU,AACZ;AAHF,AAAiB,AAAU,WAAV;AAGf,AAAM,AAAS,AAAS,AAExB;AAAO,AAAM,AAAQ,AAAC,AAAU,AAC9B,AAAI,AAAC,AAAM,AAAM,AACf;;aAAA,AAAM,AAAO,AAAM,AAAa,AAAW,AAAa,AACzD;AAED;;;;;;sBAAO;AAAA,AAAS,AAAO,AACrB;;UAAM,AAAM,yBADS;AAAhB,UAAP,4DALF,AAAO,AAQN,AACF;;;mBAED;;;YAAA,AAAO;;8CAGT;AAAS,wBAAT,AAAqB,uBACnB,AAAM,AAAoB,AAAK,AAC/B,AAAM,AAAiB,AAAqB,AAAe,AAAO,AAElE;AAND;;YAMQ,AAAM,uBAAN,AAAyB,AAAC,QAAS,AACxC;AAAM,qCAAyB,AAAS,uBAAT,AAAyB,AAAE;AAA1D,AAA+B,AAAyB,AAAW;;qCACnE;AAAI,oBAAU,wCACZ;AADY,AAEZ,AAAO,AAAK,AAAuB,AACnC;;eAHY,AAGJ,AAAK,AAAuB;AAHtC;AA5C2B,AA0C7B,AAAO,AAQL,AAAI,AAAuB,AAAQ,AACjC,AAAU,AAAS,AAAS,AAAuB,AACpD,AAED,AAAI,AAAa,AAAa,AAC5B,AAAU,AAAS,AAAS,AAAW,AAAY,AACpD,AAED,AAAO,AACR,AACF","file":"/client/modules/accounts/helpers/util.js.map","sourcesContent":["import _ from \"lodash\";\n\nfunction capitalize(str) {\n  const finalString = str === null ? \"\" : String(str);\n  return finalString.charAt(0).toUpperCase() + str.slice(1);\n}\n\nconst providers = {\n  Facebook: {},\n  Google: {},\n  Twitter: {}\n};\n\nproviders.Facebook.fields = function () {\n  return [\n    { property: \"appId\", label: \"App ID\" },\n    { property: \"secret\", label: \"App Secret\" }\n  ];\n};\n\nproviders.Google.fields = function () {\n  return [\n    { property: \"clientId\", label: \"Client ID\" },\n    { property: \"secret\", label: \"Client secret\" }\n  ];\n};\n\nproviders.Twitter.fields = function () {\n  return [\n    { property: \"consumerKey\", label: \"API key\" },\n    { property: \"secret\", label: \"API secret\" }\n  ];\n};\n\nexport class ServiceConfigHelper {\n\n  availableServices() {\n    const services = Package[\"accounts-oauth\"] ? Accounts.oauth.serviceNames() : [];\n    services.sort();\n\n    return services;\n  }\n\n  capitalizedServiceName(name) {\n    if (name === \"meteor-developer\") {\n      return \"MeteorDeveloperAccount\";\n    }\n\n    return capitalize(name);\n  }\n\n  configFieldsForService(name) {\n    const capitalizedName = this.capitalizedServiceName(name);\n    const template = providers[capitalizedName];\n\n    if (template) {\n      const fields = template.fields();\n\n      return _.map(fields, (field) => {\n        if (!field.type) {\n          field.type = field.property === \"secret\" ? \"password\" : \"text\";\n        }\n\n        return _.extend(field, {\n          type: field.type\n        });\n      });\n    }\n\n    return [];\n  }\n\n  services(extendEach) {\n    const availableServices = this.availableServices();\n    const configurations = ServiceConfiguration.configurations.find().fetch();\n\n    return _.map(availableServices, (name) => {\n      const matchingConfigurations = _.filter(configurations, { service: name });\n      let service = {\n        name,\n        label: this.capitalizedServiceName(name),\n        fields: this.configFieldsForService(name)\n      };\n\n      if (matchingConfigurations.length) {\n        service = _.extend(service, matchingConfigurations[0]);\n      }\n\n      if (_.isFunction(extendEach)) {\n        service = _.extend(service, extendEach(service) || {});\n      }\n\n      return service;\n    });\n  }\n}\n"]},"hash":"163af9ed96784a41899c2e88931585f350edcb50"}
