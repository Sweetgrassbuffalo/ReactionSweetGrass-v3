{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/client/api","imported":["Reaction","i18next"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/lib/api/compose","imported":["composeWithTracker"],"specifiers":[{"kind":"named","imported":"composeWithTracker","local":"composeWithTracker"}]},{"source":"../components/orderActions","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"OrderActions"}]},{"source":"../../lib/constants","imported":["*"],"specifiers":[{"kind":"namespace","local":"Constants"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/orders/client/containers/ordersActionContainer.js","filenameRelative":"/imports/plugins/core/orders/client/containers/ordersActionContainer.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/orders/client/containers/ordersActionContainer.js"],"names":["React","Meteor","Reaction","i18next","composeWithTracker","OrderActions","Constants","handleActionClick","filter","pushActionView","provides","template","data","composer","props","onData","selectedFilterName","getUserPreferences","PACKAGE_NAME","ORDER_LIST_FILTERS_PREFERENCE_NAME","selectedIndex","subscribe","limit","filters","orderFilters","map","index","name","label","t","defaultValue","i18nKeyLabel","count","Counts","get","onActionClick","OrdersActionContainer"],"mappings":"AAAA;AAAA,OAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAClB,AAAS,AAAc,AACvB,AAAS,AAAU,AAAe,AAClC,AAAS,AAA0B,AACnC,AAAO,AAAkB,AACzB,AAAO,AAAK,AAAe;;AAE3B,SAAA,AAAS,kBAAT,AAA2B,QAAQ,AACjC;WAAA,AAAS;cAAe,AACZ,AACV;cAFsB,AAEZ,AACV;;AAHF,AAAwB,AAGhB,AAIT;AAJS,AACJ;AAJoB,AACtB;;;AAQJ,SAAA,AAAS,SAAT,AAAkB,OAAlB,AAAyB,QAAQ,AAC/B;MAAM,qBAAqB,SAAA,AAAS,mBAAmB,UAA5B,AAAsC,cAAc,UAA/E,AAA2B,AAA8D,AACzF;MAAA,AAAI,AAEJ,AAAO,AAAU,AAAmB,AAAqB,AAAM,AAAS,AAExE;AAAM,SAAU,UAAU,mBAAV,AAAuB,AAAI,AAAC,AAAQ,oBAAT,AAAmB,eAC5D,AAAI,AAAO,AAAS,AAAoB,AACtC;oEACD;;sBAED;AAAA,AAAO,AAAQ,AAAQ,AAAG,AAAe,AAAO,AAAK,AAAG,AAAE,AAAc,AAAO;;AAA/E,AAAe;2BACf;;WAAA,AAAO,AAAgB,iCAAe,OAAtC,AAA6C,AAAK,AAElD;;QAAI,OAAA,AAAO,SAAX,AAAoB,OAAO,AACzB;aAAA,AAAO,QAAQ,OAAA,AAAO,IAAtB,AAAe,AAAW,AAC3B;AAFD,eAEW,OAAA,AAAO,SAAX,AAAoB,cAAc,AACvC;aAAA,AAAO,QAAQ,OAAA,AAAO,IAAtB,AAAe,AAAW,AAC3B;AAFM,KAAA,MAEA,IAAI,OAAA,AAAO,SAAX,AAAoB,aAAa,AACtC;aAAA,AAAO,QAAQ,OAAA,AAAO,IAAtB,AAAe,AAAW,AAC3B;AAED;;WAAA,AAAO,AACR;AAjBD,AAAgB,AAmBhB,AAAO,AAAM,AACX,GAlBE,AAAgB;SAiBP;AAAA,AAIX;AAJF,AAAa,AAII,AAAM,AAAiB,AAEzC;0CAED;AANI;AAMJ,AAAS,AAAsB,AAAO,AACpC,AACE,AAAC,AAAa,AAAI;;AAErB;AAED,6BAAe,cAAf,AAAe,AAAmB,AAAU,AAAM;;;OAxD3C,kBAAP","file":"/imports/plugins/core/orders/client/containers/ordersActionContainer.js.map","sourcesContent":["import React from \"react\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { composeWithTracker } from \"/lib/api/compose\";\nimport OrderActions from \"../components/orderActions\";\nimport * as Constants from \"../../lib/constants\";\n\nfunction handleActionClick(filter) {\n  Reaction.pushActionView({\n    provides: \"dashboard\",\n    template: \"orders\",\n    data: {\n      filter\n    }\n  });\n}\n\nfunction composer(props, onData) {\n  const selectedFilterName = Reaction.getUserPreferences(Constants.PACKAGE_NAME, Constants.ORDER_LIST_FILTERS_PREFERENCE_NAME);\n  let selectedIndex;\n\n  Meteor.subscribe(\"PaginatedOrders\", selectedFilterName, (props.limit || 0));\n\n  const filters = Constants.orderFilters.map((filter, index) => {\n    if (filter.name === selectedFilterName) {\n      selectedIndex = index;\n    }\n\n    filter.label = i18next.t(`order.filter.${filter.name}`, { defaultValue: filter.label });\n    filter.i18nKeyLabel = `order.filter.${filter.name}`;\n\n    if (filter.name === \"new\") {\n      filter.count = Counts.get(\"newOrder-count\");\n    } else if (filter.name === \"processing\") {\n      filter.count = Counts.get(\"processingOrder-count\");\n    } else if (filter.name === \"completed\") {\n      filter.count = Counts.get(\"completedOrder-count\");\n    }\n\n    return filter;\n  });\n\n  onData(null, {\n    filters,\n    selectedIndex,\n\n    onActionClick: props.onActionClick || handleActionClick\n  });\n}\n\nfunction OrdersActionContainer(props) {\n  return (\n    <OrderActions {...props} />\n  );\n}\n\nexport default composeWithTracker(composer, null)(OrdersActionContainer);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/orders/client/containers/ordersActionContainer.js.map","sourceFileName":"/imports/plugins/core/orders/client/containers/ordersActionContainer.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ordersActionContainer"},"ignored":false,"code":"var React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Reaction = void 0,\n    i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 2);\nvar composeWithTracker = void 0;\nmodule.importSync(\"/lib/api/compose\", {\n  composeWithTracker: function (v) {\n    composeWithTracker = v;\n  }\n}, 3);\nvar OrderActions = void 0;\nmodule.importSync(\"../components/orderActions\", {\n  \"default\": function (v) {\n    OrderActions = v;\n  }\n}, 4);\nvar Constants = Object.create(null);\nmodule.importSync(\"../../lib/constants\", {\n  \"*\": function (v, n) {\n    Constants[n] = v;\n  }\n}, 5);\n\nfunction handleActionClick(filter) {\n  Reaction.pushActionView({\n    provides: \"dashboard\",\n    template: \"orders\",\n    data: {\n      filter: filter\n    }\n  });\n}\n\nfunction composer(props, onData) {\n  var selectedFilterName = Reaction.getUserPreferences(Constants.PACKAGE_NAME, Constants.ORDER_LIST_FILTERS_PREFERENCE_NAME);\n  var selectedIndex = void 0;\n  Meteor.subscribe(\"PaginatedOrders\", selectedFilterName, props.limit || 0);\n  var filters = Constants.orderFilters.map(function (filter, index) {\n    if (filter.name === selectedFilterName) {\n      selectedIndex = index;\n    }\n\n    filter.label = i18next.t(\"order.filter.\" + filter.name, {\n      defaultValue: filter.label\n    });\n    filter.i18nKeyLabel = \"order.filter.\" + filter.name;\n\n    if (filter.name === \"new\") {\n      filter.count = Counts.get(\"newOrder-count\");\n    } else if (filter.name === \"processing\") {\n      filter.count = Counts.get(\"processingOrder-count\");\n    } else if (filter.name === \"completed\") {\n      filter.count = Counts.get(\"completedOrder-count\");\n    }\n\n    return filter;\n  });\n  onData(null, {\n    filters: filters,\n    selectedIndex: selectedIndex,\n    onActionClick: props.onActionClick || handleActionClick\n  });\n}\n\nfunction OrdersActionContainer(props) {\n  return React.createElement(OrderActions, props);\n}\n\nmodule.export(\"default\", exports.default = composeWithTracker(composer, null)(OrdersActionContainer));","map":{"version":3,"sources":["/imports/plugins/core/orders/client/containers/ordersActionContainer.js"],"names":["React","Meteor","Reaction","i18next","composeWithTracker","OrderActions","Constants","handleActionClick","filter","pushActionView","provides","template","data","composer","props","onData","selectedFilterName","getUserPreferences","PACKAGE_NAME","ORDER_LIST_FILTERS_PREFERENCE_NAME","selectedIndex","subscribe","limit","filters","orderFilters","map","index","name","label","t","defaultValue","i18nKeyLabel","count","Counts","get","onActionClick","OrdersActionContainer"],"mappings":"AAAA;AAAA,OAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAClB,AAAS,AAAc,AACvB,AAAS,AAAU,AAAe,AAClC,AAAS,AAA0B,AACnC,AAAO,AAAkB,AACzB,AAAO,AAAK,AAAe;;AAE3B,SAAA,AAAS,kBAAT,AAA2B,QAAQ,AACjC;WAAA,AAAS;cAAe,AACZ,AACV;cAFsB,AAEZ,AACV;;AAHF,AAAwB,AAGhB,AAIT;AAJS,AACJ;AAJoB,AACtB;;;AAQJ,SAAA,AAAS,SAAT,AAAkB,OAAlB,AAAyB,QAAQ,AAC/B;MAAM,qBAAqB,SAAA,AAAS,mBAAmB,UAA5B,AAAsC,cAAc,UAA/E,AAA2B,AAA8D,AACzF;MAAA,AAAI,AAEJ,AAAO,AAAU,AAAmB,AAAqB,AAAM,AAAS,AAExE;AAAM,SAAU,UAAU,mBAAV,AAAuB,AAAI,AAAC,AAAQ,oBAAT,AAAmB,eAC5D,AAAI,AAAO,AAAS,AAAoB,AACtC;oEACD;;sBAED;AAAA,AAAO,AAAQ,AAAQ,AAAG,AAAe,AAAO,AAAK,AAAG,AAAE,AAAc,AAAO;;AAA/E,AAAe;2BACf;;WAAA,AAAO,AAAgB,iCAAe,OAAtC,AAA6C,AAAK,AAElD;;QAAI,OAAA,AAAO,SAAX,AAAoB,OAAO,AACzB;aAAA,AAAO,QAAQ,OAAA,AAAO,IAAtB,AAAe,AAAW,AAC3B;AAFD,eAEW,OAAA,AAAO,SAAX,AAAoB,cAAc,AACvC;aAAA,AAAO,QAAQ,OAAA,AAAO,IAAtB,AAAe,AAAW,AAC3B;AAFM,KAAA,MAEA,IAAI,OAAA,AAAO,SAAX,AAAoB,aAAa,AACtC;aAAA,AAAO,QAAQ,OAAA,AAAO,IAAtB,AAAe,AAAW,AAC3B;AAED;;WAAA,AAAO,AACR;AAjBD,AAAgB,AAmBhB,AAAO,AAAM,AACX,GAlBE,AAAgB;SAiBP;AAAA,AAIX;AAJF,AAAa,AAII,AAAM,AAAiB,AAEzC;0CAED;AANI;AAMJ,AAAS,AAAsB,AAAO,AACpC,AACE,AAAC,AAAa,AAAI;;AAErB;AAED,6BAAe,cAAf,AAAe,AAAmB,AAAU,AAAM;;;OAxD3C,kBAAP","file":"/imports/plugins/core/orders/client/containers/ordersActionContainer.js.map","sourcesContent":["import React from \"react\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { composeWithTracker } from \"/lib/api/compose\";\nimport OrderActions from \"../components/orderActions\";\nimport * as Constants from \"../../lib/constants\";\n\nfunction handleActionClick(filter) {\n  Reaction.pushActionView({\n    provides: \"dashboard\",\n    template: \"orders\",\n    data: {\n      filter\n    }\n  });\n}\n\nfunction composer(props, onData) {\n  const selectedFilterName = Reaction.getUserPreferences(Constants.PACKAGE_NAME, Constants.ORDER_LIST_FILTERS_PREFERENCE_NAME);\n  let selectedIndex;\n\n  Meteor.subscribe(\"PaginatedOrders\", selectedFilterName, (props.limit || 0));\n\n  const filters = Constants.orderFilters.map((filter, index) => {\n    if (filter.name === selectedFilterName) {\n      selectedIndex = index;\n    }\n\n    filter.label = i18next.t(`order.filter.${filter.name}`, { defaultValue: filter.label });\n    filter.i18nKeyLabel = `order.filter.${filter.name}`;\n\n    if (filter.name === \"new\") {\n      filter.count = Counts.get(\"newOrder-count\");\n    } else if (filter.name === \"processing\") {\n      filter.count = Counts.get(\"processingOrder-count\");\n    } else if (filter.name === \"completed\") {\n      filter.count = Counts.get(\"completedOrder-count\");\n    }\n\n    return filter;\n  });\n\n  onData(null, {\n    filters,\n    selectedIndex,\n\n    onActionClick: props.onActionClick || handleActionClick\n  });\n}\n\nfunction OrdersActionContainer(props) {\n  return (\n    <OrderActions {...props} />\n  );\n}\n\nexport default composeWithTracker(composer, null)(OrdersActionContainer);\n"]},"hash":"c6668f97a05d8abc7c9a562d0a18714667dc52e1"}
