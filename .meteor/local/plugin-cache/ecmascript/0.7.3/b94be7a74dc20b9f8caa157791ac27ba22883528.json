{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/filter","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_filter"}]},{"source":"lodash/includes","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_includes"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/client/api","imported":["Reaction","i18next"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"../../helpers/util","imported":["ServiceConfigHelper"],"specifiers":[{"kind":"named","imported":"ServiceConfigHelper","local":"ServiceConfigHelper"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/accounts/templates/dashboard/dashboard.js","filenameRelative":"/client/modules/accounts/templates/dashboard/dashboard.js","inputSourceMap":{"version":3,"sources":["/client/modules/accounts/templates/dashboard/dashboard.js"],"names":["Meteor","Template","Reaction","i18next","ServiceConfigHelper","accountsDashboard","onCreated","autorun","subscribe","helpers","isShopMember","role","isShopGuest","members","hasPermission","shopId","getShopId","instance","subscriptionsReady","shopUsers","users","find","map","user","member","userId","_id","emails","length","email","address","username","isAdmin","Roles","userIsInRole","roles","services","accountsSettings","serviceHelper","configurations","ServiceConfiguration","fetch","item","matchingConfigurations","service","name","shown","enabled","checked","valueForField","fieldName","events","event","preventDefault","target","value","fields","configFieldsForService","field","property","call","error","Alerts","toast","t","button","$","currentTarget","input","closest","attr","html"],"mappings":"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","file":"/client/modules/accounts/templates/dashboard/dashboard.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { ServiceConfigHelper } from \"../../helpers/util\";\n\n/**\n * Accounts helpers\n */\nTemplate.accountsDashboard.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"ShopMembers\");\n  });\n});\n\nTemplate.accountsDashboard.helpers({\n  /**\n   * isShopMember\n   * @param {Object} member member object\n   * @return {Boolean} True if the memnber is an administrator\n   */\n  isShopMember() {\n    return _.includes([\"dashboard\", \"admin\", \"owner\"], this.role);\n  },\n\n  /**\n   * isShopGuest\n   * @param {Object} member member object\n   * @return {Boolean} True if the member is a guest\n   */\n  isShopGuest() {\n    return !_.includes([\"dashboard\", \"admin\", \"owner\"], this.role);\n  },\n  /**\n   * members\n   * @return {Boolean} True array of adminsitrative members\n   */\n  members() {\n    if (Reaction.hasPermission(\"reaction-accounts\")) {\n      const shopId = Reaction.getShopId();\n      const instance = Template.instance();\n      if (instance.subscriptionsReady()) {\n        const shopUsers = Meteor.users.find();\n\n        return shopUsers.map(user => {\n          const member = {};\n\n          member.userId = user._id;\n\n          if (user.emails && user.emails.length) {\n            // this is some kind of denormalization. It is helpful to have both\n            // of this string and array. Array goes to avatar, string goes to\n            // template\n            member.emails = user.emails;\n            member.email = user.emails[0].address;\n          }\n          // member.user = user;\n          member.username = user.username;\n          member.isAdmin = Roles.userIsInRole(user._id, \"admin\", shopId);\n          member.roles = user.roles;\n          member.services = user.services;\n\n          if (Roles.userIsInRole(member.userId, \"owner\", shopId)) {\n            member.role = \"owner\";\n          } else if (Roles.userIsInRole(member.userId, \"admin\", shopId)) {\n            member.role = \"admin\";\n          } else if (Roles.userIsInRole(member.userId, \"dashboard\", shopId)) {\n            member.role = \"dashboard\";\n          } else if (Roles.userIsInRole(member.userId, \"guest\", shopId)) {\n            member.role = \"guest\";\n          }\n\n          return member;\n        });\n      }\n    }\n  }\n});\n\n/**\n * Account Settings Helpers\n */\nTemplate.accountsSettings.onCreated(function () {\n  this.subscribe(\"ServiceConfiguration\", Meteor.userId());\n});\n\n/**\n * Account Settings Helpers\n */\nTemplate.accountsSettings.helpers({\n\n  /**\n   * services\n   * @return {Array} available services\n   */\n  services() {\n    const serviceHelper = new ServiceConfigHelper();\n    const configurations = ServiceConfiguration.configurations.find().fetch();\n\n    const services = serviceHelper.services((item) => {\n      const matchingConfigurations = _.filter(configurations, {\n        service: item.name\n      });\n      if (matchingConfigurations.length) {\n        return matchingConfigurations[0];\n      }\n    });\n\n    return services;\n  },\n\n  /**\n   * Template helper to add a hidden class if the condition is false\n   * @param  {Boolean} enabled Service enabled\n   * @return {String}          \"hidden\" or \"\"\n   */\n  shown(enabled) {\n    return enabled !== true ? \"hidden\" : \"\";\n  },\n\n  /**\n   * Return checked classname if true\n   * @param  {Boolean} enabled Boolean value true/false\n   * @return {String}          \"checked\" or \"\"\n   */\n  checked(enabled) {\n    return enabled === true ? \"checked\" : \"\";\n  },\n\n  /**\n   * Returns a value from the supplied service object with a field name\n   * @param  {String} fieldName name of field to retrive the value for.\n   * @param  {Object} service   Service object to find the value in.\n   * @return {String}           A value or blank string if nothing is found.\n   */\n  valueForField(fieldName, service) {\n    return service[fieldName] || \"\";\n  }\n});\n\nTemplate.accountsSettings.events({\n\n  /**\n   * Account settings form submit\n   * @param  {event} event    jQuery event\n   * @return {void}\n   */\n  \"submit form\": (event) => {\n    event.preventDefault();\n\n    const service = event.target.service.value;\n    const serviceHelper = new ServiceConfigHelper();\n    const fields = serviceHelper.configFieldsForService(service);\n    // todo remove this after i18next 2 will be installed\n    // let niceName = serviceHelper.capitalizedServiceName(service);\n\n    for (const field of fields) {\n      field.value = event.target[field.property].value;\n    }\n\n    Meteor.call(\"accounts/updateServiceConfiguration\", service, fields, (error) => {\n      if (!error) {\n        Alerts.toast(i18next.t(\n          \"accountsUI.updatedServiceConfiguration\",\n          { service: i18next.t(`social.${service}`) }\n        ));\n      }\n    });\n  },\n\n  /**\n   * Account settings update enabled status for login service on change\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\n  \"change input[name=enabled]\": (event) => {\n    const service = event.target.value;\n    const fields = [{\n      property: \"enabled\",\n      value: event.target.checked\n    }];\n\n    Meteor.call(\"accounts/updateServiceConfiguration\", service, fields);\n  },\n\n  /**\n   * Account settings show/hide secret key for a service\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\n  \"click [data-event-action=showSecret]\": (event) => {\n    const button = Template.instance().$(event.currentTarget);\n    const input = button.closest(\".form-group\").find(\"input[name=secret]\");\n\n    if (input.attr(\"type\") === \"password\") {\n      input.attr(\"type\", \"text\");\n      button.html(\"Hide\");\n    } else {\n      input.attr(\"type\", \"password\");\n      button.html(\"Show\");\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/accounts/templates/dashboard/dashboard.js.map","sourceFileName":"/client/modules/accounts/templates/dashboard/dashboard.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"dashboard"},"ignored":false,"code":"var _filter = void 0;\n\nmodule.importSync(\"lodash/filter\", {\n  \"default\": function (v) {\n    _filter = v;\n  }\n}, 0);\n\nvar _includes = void 0;\n\nmodule.importSync(\"lodash/includes\", {\n  \"default\": function (v) {\n    _includes = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 3);\nvar Reaction = void 0,\n    i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 4);\nvar ServiceConfigHelper = void 0;\nmodule.importSync(\"../../helpers/util\", {\n  ServiceConfigHelper: function (v) {\n    ServiceConfigHelper = v;\n  }\n}, 5);\n/**\n * Accounts helpers\n */Template.accountsDashboard.onCreated(function () {\n  var _this = this;\n\n  this.autorun(function () {\n    _this.subscribe(\"ShopMembers\");\n  });\n});\nTemplate.accountsDashboard.helpers({\n  /**\n   * isShopMember\n   * @param {Object} member member object\n   * @return {Boolean} True if the memnber is an administrator\n   */isShopMember: function () {\n    return _includes([\"dashboard\", \"admin\", \"owner\"], this.role);\n  },\n  /**\n   * isShopGuest\n   * @param {Object} member member object\n   * @return {Boolean} True if the member is a guest\n   */isShopGuest: function () {\n    return !_includes([\"dashboard\", \"admin\", \"owner\"], this.role);\n  },\n  /**\n   * members\n   * @return {Boolean} True array of adminsitrative members\n   */members: function () {\n    if (Reaction.hasPermission(\"reaction-accounts\")) {\n      var shopId = Reaction.getShopId();\n      var instance = Template.instance();\n\n      if (instance.subscriptionsReady()) {\n        var shopUsers = Meteor.users.find();\n        return shopUsers.map(function (user) {\n          var member = {};\n          member.userId = user._id;\n\n          if (user.emails && user.emails.length) {\n            // this is some kind of denormalization. It is helpful to have both\n            // of this string and array. Array goes to avatar, string goes to\n            // template\n            member.emails = user.emails;\n            member.email = user.emails[0].address;\n          } // member.user = user;\n\n\n          member.username = user.username;\n          member.isAdmin = Roles.userIsInRole(user._id, \"admin\", shopId);\n          member.roles = user.roles;\n          member.services = user.services;\n\n          if (Roles.userIsInRole(member.userId, \"owner\", shopId)) {\n            member.role = \"owner\";\n          } else if (Roles.userIsInRole(member.userId, \"admin\", shopId)) {\n            member.role = \"admin\";\n          } else if (Roles.userIsInRole(member.userId, \"dashboard\", shopId)) {\n            member.role = \"dashboard\";\n          } else if (Roles.userIsInRole(member.userId, \"guest\", shopId)) {\n            member.role = \"guest\";\n          }\n\n          return member;\n        });\n      }\n    }\n  }\n}); /**\n     * Account Settings Helpers\n     */\nTemplate.accountsSettings.onCreated(function () {\n  this.subscribe(\"ServiceConfiguration\", Meteor.userId());\n}); /**\n     * Account Settings Helpers\n     */\nTemplate.accountsSettings.helpers({\n  /**\n   * services\n   * @return {Array} available services\n   */services: function () {\n    var serviceHelper = new ServiceConfigHelper();\n    var configurations = ServiceConfiguration.configurations.find().fetch();\n    var services = serviceHelper.services(function (item) {\n      var matchingConfigurations = _filter(configurations, {\n        service: item.name\n      });\n\n      if (matchingConfigurations.length) {\n        return matchingConfigurations[0];\n      }\n    });\n    return services;\n  },\n  /**\n   * Template helper to add a hidden class if the condition is false\n   * @param  {Boolean} enabled Service enabled\n   * @return {String}          \"hidden\" or \"\"\n   */shown: function (enabled) {\n    return enabled !== true ? \"hidden\" : \"\";\n  },\n  /**\n   * Return checked classname if true\n   * @param  {Boolean} enabled Boolean value true/false\n   * @return {String}          \"checked\" or \"\"\n   */checked: function (enabled) {\n    return enabled === true ? \"checked\" : \"\";\n  },\n  /**\n   * Returns a value from the supplied service object with a field name\n   * @param  {String} fieldName name of field to retrive the value for.\n   * @param  {Object} service   Service object to find the value in.\n   * @return {String}           A value or blank string if nothing is found.\n   */valueForField: function (fieldName, service) {\n    return service[fieldName] || \"\";\n  }\n});\nTemplate.accountsSettings.events({\n  /**\n   * Account settings form submit\n   * @param  {event} event    jQuery event\n   * @return {void}\n   */\"submit form\": function (event) {\n    event.preventDefault();\n    var service = event.target.service.value;\n    var serviceHelper = new ServiceConfigHelper();\n    var fields = serviceHelper.configFieldsForService(service); // todo remove this after i18next 2 will be installed\n    // let niceName = serviceHelper.capitalizedServiceName(service);\n\n    for (var _iterator = fields, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var field = _ref;\n      field.value = event.target[field.property].value;\n    }\n\n    Meteor.call(\"accounts/updateServiceConfiguration\", service, fields, function (error) {\n      if (!error) {\n        Alerts.toast(i18next.t(\"accountsUI.updatedServiceConfiguration\", {\n          service: i18next.t(\"social.\" + service)\n        }));\n      }\n    });\n  },\n  /**\n   * Account settings update enabled status for login service on change\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\"change input[name=enabled]\": function (event) {\n    var service = event.target.value;\n    var fields = [{\n      property: \"enabled\",\n      value: event.target.checked\n    }];\n    Meteor.call(\"accounts/updateServiceConfiguration\", service, fields);\n  },\n  /**\n   * Account settings show/hide secret key for a service\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\"click [data-event-action=showSecret]\": function (event) {\n    var button = Template.instance().$(event.currentTarget);\n    var input = button.closest(\".form-group\").find(\"input[name=secret]\");\n\n    if (input.attr(\"type\") === \"password\") {\n      input.attr(\"type\", \"text\");\n      button.html(\"Hide\");\n    } else {\n      input.attr(\"type\", \"password\");\n      button.html(\"Show\");\n    }\n  }\n});","map":{"version":3,"sources":["/client/modules/accounts/templates/dashboard/dashboard.js"],"names":["Meteor","Template","Reaction","i18next","ServiceConfigHelper","accountsDashboard","onCreated","autorun","subscribe","helpers","isShopMember","role","isShopGuest","members","hasPermission","shopId","getShopId","instance","subscriptionsReady","shopUsers","users","find","map","user","member","userId","_id","emails","length","email","address","username","isAdmin","Roles","userIsInRole","roles","services","accountsSettings","serviceHelper","configurations","ServiceConfiguration","fetch","item","matchingConfigurations","service","name","shown","enabled","checked","valueForField","fieldName","events","event","preventDefault","target","value","fields","configFieldsForService","field","property","call","error","Alerts","toast","t","button","$","currentTarget","input","closest","attr","html"],"mappings":"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","file":"/client/modules/accounts/templates/dashboard/dashboard.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { ServiceConfigHelper } from \"../../helpers/util\";\n\n/**\n * Accounts helpers\n */\nTemplate.accountsDashboard.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"ShopMembers\");\n  });\n});\n\nTemplate.accountsDashboard.helpers({\n  /**\n   * isShopMember\n   * @param {Object} member member object\n   * @return {Boolean} True if the memnber is an administrator\n   */\n  isShopMember() {\n    return _.includes([\"dashboard\", \"admin\", \"owner\"], this.role);\n  },\n\n  /**\n   * isShopGuest\n   * @param {Object} member member object\n   * @return {Boolean} True if the member is a guest\n   */\n  isShopGuest() {\n    return !_.includes([\"dashboard\", \"admin\", \"owner\"], this.role);\n  },\n  /**\n   * members\n   * @return {Boolean} True array of adminsitrative members\n   */\n  members() {\n    if (Reaction.hasPermission(\"reaction-accounts\")) {\n      const shopId = Reaction.getShopId();\n      const instance = Template.instance();\n      if (instance.subscriptionsReady()) {\n        const shopUsers = Meteor.users.find();\n\n        return shopUsers.map(user => {\n          const member = {};\n\n          member.userId = user._id;\n\n          if (user.emails && user.emails.length) {\n            // this is some kind of denormalization. It is helpful to have both\n            // of this string and array. Array goes to avatar, string goes to\n            // template\n            member.emails = user.emails;\n            member.email = user.emails[0].address;\n          }\n          // member.user = user;\n          member.username = user.username;\n          member.isAdmin = Roles.userIsInRole(user._id, \"admin\", shopId);\n          member.roles = user.roles;\n          member.services = user.services;\n\n          if (Roles.userIsInRole(member.userId, \"owner\", shopId)) {\n            member.role = \"owner\";\n          } else if (Roles.userIsInRole(member.userId, \"admin\", shopId)) {\n            member.role = \"admin\";\n          } else if (Roles.userIsInRole(member.userId, \"dashboard\", shopId)) {\n            member.role = \"dashboard\";\n          } else if (Roles.userIsInRole(member.userId, \"guest\", shopId)) {\n            member.role = \"guest\";\n          }\n\n          return member;\n        });\n      }\n    }\n  }\n});\n\n/**\n * Account Settings Helpers\n */\nTemplate.accountsSettings.onCreated(function () {\n  this.subscribe(\"ServiceConfiguration\", Meteor.userId());\n});\n\n/**\n * Account Settings Helpers\n */\nTemplate.accountsSettings.helpers({\n\n  /**\n   * services\n   * @return {Array} available services\n   */\n  services() {\n    const serviceHelper = new ServiceConfigHelper();\n    const configurations = ServiceConfiguration.configurations.find().fetch();\n\n    const services = serviceHelper.services((item) => {\n      const matchingConfigurations = _.filter(configurations, {\n        service: item.name\n      });\n      if (matchingConfigurations.length) {\n        return matchingConfigurations[0];\n      }\n    });\n\n    return services;\n  },\n\n  /**\n   * Template helper to add a hidden class if the condition is false\n   * @param  {Boolean} enabled Service enabled\n   * @return {String}          \"hidden\" or \"\"\n   */\n  shown(enabled) {\n    return enabled !== true ? \"hidden\" : \"\";\n  },\n\n  /**\n   * Return checked classname if true\n   * @param  {Boolean} enabled Boolean value true/false\n   * @return {String}          \"checked\" or \"\"\n   */\n  checked(enabled) {\n    return enabled === true ? \"checked\" : \"\";\n  },\n\n  /**\n   * Returns a value from the supplied service object with a field name\n   * @param  {String} fieldName name of field to retrive the value for.\n   * @param  {Object} service   Service object to find the value in.\n   * @return {String}           A value or blank string if nothing is found.\n   */\n  valueForField(fieldName, service) {\n    return service[fieldName] || \"\";\n  }\n});\n\nTemplate.accountsSettings.events({\n\n  /**\n   * Account settings form submit\n   * @param  {event} event    jQuery event\n   * @return {void}\n   */\n  \"submit form\": (event) => {\n    event.preventDefault();\n\n    const service = event.target.service.value;\n    const serviceHelper = new ServiceConfigHelper();\n    const fields = serviceHelper.configFieldsForService(service);\n    // todo remove this after i18next 2 will be installed\n    // let niceName = serviceHelper.capitalizedServiceName(service);\n\n    for (const field of fields) {\n      field.value = event.target[field.property].value;\n    }\n\n    Meteor.call(\"accounts/updateServiceConfiguration\", service, fields, (error) => {\n      if (!error) {\n        Alerts.toast(i18next.t(\n          \"accountsUI.updatedServiceConfiguration\",\n          { service: i18next.t(`social.${service}`) }\n        ));\n      }\n    });\n  },\n\n  /**\n   * Account settings update enabled status for login service on change\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\n  \"change input[name=enabled]\": (event) => {\n    const service = event.target.value;\n    const fields = [{\n      property: \"enabled\",\n      value: event.target.checked\n    }];\n\n    Meteor.call(\"accounts/updateServiceConfiguration\", service, fields);\n  },\n\n  /**\n   * Account settings show/hide secret key for a service\n   * @param  {event} event    jQuery Event\n   * @return {void}\n   */\n  \"click [data-event-action=showSecret]\": (event) => {\n    const button = Template.instance().$(event.currentTarget);\n    const input = button.closest(\".form-group\").find(\"input[name=secret]\");\n\n    if (input.attr(\"type\") === \"password\") {\n      input.attr(\"type\", \"text\");\n      button.html(\"Hide\");\n    } else {\n      input.attr(\"type\", \"password\");\n      button.html(\"Show\");\n    }\n  }\n});\n"]},"hash":"b94be7a74dc20b9f8caa157791ac27ba22883528"}
