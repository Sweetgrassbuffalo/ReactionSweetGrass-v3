{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/includes","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_includes"}]},{"source":"lodash/replace","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_replace"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"/lib/collections","imported":["ProductSearch","OrderSearch","AccountSearch"],"specifiers":[{"kind":"named","imported":"ProductSearch","local":"ProductSearch"},{"kind":"named","imported":"OrderSearch","local":"OrderSearch"},{"kind":"named","imported":"AccountSearch","local":"AccountSearch"}]}],"exports":{"exported":["getResults"],"specifiers":[{"kind":"local","local":"getResults","exported":"getResults"}]}}},"options":{"filename":"/imports/plugins/included/search-mongo/server/publications/searchresults.js","filenameRelative":"/imports/plugins/included/search-mongo/server/publications/searchresults.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/search-mongo/server/publications/searchresults.js"],"names":["Meteor","check","Match","Reaction","Logger","ProductSearch","OrderSearch","AccountSearch","supportedCollections","getProductFindTerm","searchTerm","searchTags","userId","shopId","getShopId","findTerm","$text","$search","length","hashtags","$all","Roles","userIsInRole","isVisible","getResults","products","facets","maxResults","productResults","find","fields","score","$meta","title","description","handle","price","isSoldOut","isLowQuantity","isBackorder","sort","limit","orders","orderResults","searchPhone","$and","$or","_id","userEmails","$regex","$options","shippingName","billingName","billingPhone","shippingPhone","hasPermission","debug","count","accounts","accountResults","emails","publish","collection","String","Where","coll","Optional","OneOf","Array","undefined","ready"],"mappings":"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","file":"/imports/plugins/included/search-mongo/server/publications/searchresults.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { ProductSearch, OrderSearch, AccountSearch } from \"/lib/collections\";\n\nconst supportedCollections = [\"products\", \"orders\", \"accounts\"];\n\nfunction getProductFindTerm(searchTerm, searchTags, userId) {\n  const shopId = Reaction.getShopId();\n  const findTerm = {\n    shopId: shopId,\n    $text: { $search: searchTerm }\n  };\n  if (searchTags.length) {\n    findTerm.hashtags = { $all: searchTags };\n  }\n  if (!Roles.userIsInRole(userId, [\"admin\", \"owner\"], shopId)) {\n    findTerm.isVisible = true;\n  }\n  return findTerm;\n}\n\nexport const getResults = {};\n\ngetResults.products = function (searchTerm, facets, maxResults, userId) {\n  const searchTags = facets || [];\n  const findTerm = getProductFindTerm(searchTerm, searchTags, userId);\n  const productResults = ProductSearch.find(findTerm,\n    {\n      fields: {\n        score: { $meta: \"textScore\" },\n        title: 1,\n        hashtags: 1,\n        description: 1,\n        handle: 1,\n        price: 1,\n        isSoldOut: 1,\n        isLowQuantity: 1,\n        isBackorder: 1\n      },\n      sort: { score: { $meta: \"textScore\" } },\n      limit: maxResults\n    }\n  );\n  return productResults;\n};\n\ngetResults.orders = function (searchTerm, facets, maxResults, userId) {\n  let orderResults;\n  const searchPhone = _.replace(searchTerm, /\\D/g, \"\");\n  const shopId = Reaction.getShopId();\n  const findTerm = {\n    $and: [\n      { shopId: shopId },\n      { $or: [\n        { _id: searchTerm },\n        { userEmails: {\n          $regex: searchTerm,\n          $options: \"i\"\n        } },\n        { shippingName: {\n          $regex: searchTerm,\n          $options: \"i\"\n        } },\n        { billingName: {\n          $regex: searchTerm,\n          $options: \"i\"\n        } },\n        { billingPhone: {\n          $regex: \"^\" + searchPhone + \"$\",\n          $options: \"i\"\n        } },\n        { shippingPhone: {\n          $regex: \"^\" + searchPhone + \"$\",\n          $options: \"i\"\n        } }\n      ] }\n    ] };\n  if (Reaction.hasPermission(\"orders\", userId)) {\n    orderResults = OrderSearch.find(findTerm, { limit: maxResults });\n    Logger.debug(`Found ${orderResults.count()} orders searching for ${searchTerm}`);\n  }\n  return orderResults;\n};\n\ngetResults.accounts = function (searchTerm, facets, maxResults, userId) {\n  let accountResults;\n  const shopId = Reaction.getShopId();\n  const searchPhone = _.replace(searchTerm, /\\D/g, \"\");\n  if (Reaction.hasPermission(\"reaction-accounts\", userId)) {\n    const findTerm = {\n      $and: [\n        { shopId: shopId },\n        { $or: [\n          { emails: {\n            $regex: searchTerm,\n            $options: \"i\"\n          } },\n          { \"profile.firstName\": {\n            $regex: \"^\" + searchTerm + \"$\",\n            $options: \"i\"\n          } },\n          { \"profile.lastName\": {\n            $regex: \"^\" + searchTerm + \"$\",\n            $options: \"i\"\n          } },\n          { \"profile.phone\": {\n            $regex: \"^\" + searchPhone + \"$\",\n            $options: \"i\"\n          } }\n        ] }\n      ] };\n    accountResults = AccountSearch.find(findTerm, {\n      limit: maxResults\n    });\n    Logger.debug(`Found ${accountResults.count()} accounts searching for ${searchTerm}`);\n  }\n  return accountResults;\n};\n\nMeteor.publish(\"SearchResults\", function (collection, searchTerm, facets, maxResults = 99) {\n  check(collection, String);\n  check(collection, Match.Where((coll) => {\n    return _.includes(supportedCollections, coll);\n  }));\n  check(searchTerm, Match.Optional(String));\n  check(facets, Match.OneOf(Array, undefined));\n  Logger.debug(`Returning search results on ${collection}. SearchTerm: |${searchTerm}|. Facets: |${facets}|.`);\n  if (!searchTerm) {\n    return this.ready();\n  }\n  return getResults[collection](searchTerm, facets, maxResults, this.userId);\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/search-mongo/server/publications/searchresults.js.map","sourceFileName":"/imports/plugins/included/search-mongo/server/publications/searchresults.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"searchresults"},"ignored":false,"code":"module.export({\n  getResults: function () {\n    return getResults;\n  }\n});\n\nvar _includes = void 0;\n\nmodule.importSync(\"lodash/includes\", {\n  \"default\": function (v) {\n    _includes = v;\n  }\n}, 0);\n\nvar _replace = void 0;\n\nmodule.importSync(\"lodash/replace\", {\n  \"default\": function (v) {\n    _replace = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 3);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 4);\nvar ProductSearch = void 0,\n    OrderSearch = void 0,\n    AccountSearch = void 0;\nmodule.importSync(\"/lib/collections\", {\n  ProductSearch: function (v) {\n    ProductSearch = v;\n  },\n  OrderSearch: function (v) {\n    OrderSearch = v;\n  },\n  AccountSearch: function (v) {\n    AccountSearch = v;\n  }\n}, 5);\nvar supportedCollections = [\"products\", \"orders\", \"accounts\"];\n\nfunction getProductFindTerm(searchTerm, searchTags, userId) {\n  var shopId = Reaction.getShopId();\n  var findTerm = {\n    shopId: shopId,\n    $text: {\n      $search: searchTerm\n    }\n  };\n\n  if (searchTags.length) {\n    findTerm.hashtags = {\n      $all: searchTags\n    };\n  }\n\n  if (!Roles.userIsInRole(userId, [\"admin\", \"owner\"], shopId)) {\n    findTerm.isVisible = true;\n  }\n\n  return findTerm;\n}\n\nvar getResults = {};\n\ngetResults.products = function (searchTerm, facets, maxResults, userId) {\n  var searchTags = facets || [];\n  var findTerm = getProductFindTerm(searchTerm, searchTags, userId);\n  var productResults = ProductSearch.find(findTerm, {\n    fields: {\n      score: {\n        $meta: \"textScore\"\n      },\n      title: 1,\n      hashtags: 1,\n      description: 1,\n      handle: 1,\n      price: 1,\n      isSoldOut: 1,\n      isLowQuantity: 1,\n      isBackorder: 1\n    },\n    sort: {\n      score: {\n        $meta: \"textScore\"\n      }\n    },\n    limit: maxResults\n  });\n  return productResults;\n};\n\ngetResults.orders = function (searchTerm, facets, maxResults, userId) {\n  var orderResults = void 0;\n\n  var searchPhone = _replace(searchTerm, /\\D/g, \"\");\n\n  var shopId = Reaction.getShopId();\n  var findTerm = {\n    $and: [{\n      shopId: shopId\n    }, {\n      $or: [{\n        _id: searchTerm\n      }, {\n        userEmails: {\n          $regex: searchTerm,\n          $options: \"i\"\n        }\n      }, {\n        shippingName: {\n          $regex: searchTerm,\n          $options: \"i\"\n        }\n      }, {\n        billingName: {\n          $regex: searchTerm,\n          $options: \"i\"\n        }\n      }, {\n        billingPhone: {\n          $regex: \"^\" + searchPhone + \"$\",\n          $options: \"i\"\n        }\n      }, {\n        shippingPhone: {\n          $regex: \"^\" + searchPhone + \"$\",\n          $options: \"i\"\n        }\n      }]\n    }]\n  };\n\n  if (Reaction.hasPermission(\"orders\", userId)) {\n    orderResults = OrderSearch.find(findTerm, {\n      limit: maxResults\n    });\n    Logger.debug(\"Found \" + orderResults.count() + \" orders searching for \" + searchTerm);\n  }\n\n  return orderResults;\n};\n\ngetResults.accounts = function (searchTerm, facets, maxResults, userId) {\n  var accountResults = void 0;\n  var shopId = Reaction.getShopId();\n\n  var searchPhone = _replace(searchTerm, /\\D/g, \"\");\n\n  if (Reaction.hasPermission(\"reaction-accounts\", userId)) {\n    var findTerm = {\n      $and: [{\n        shopId: shopId\n      }, {\n        $or: [{\n          emails: {\n            $regex: searchTerm,\n            $options: \"i\"\n          }\n        }, {\n          \"profile.firstName\": {\n            $regex: \"^\" + searchTerm + \"$\",\n            $options: \"i\"\n          }\n        }, {\n          \"profile.lastName\": {\n            $regex: \"^\" + searchTerm + \"$\",\n            $options: \"i\"\n          }\n        }, {\n          \"profile.phone\": {\n            $regex: \"^\" + searchPhone + \"$\",\n            $options: \"i\"\n          }\n        }]\n      }]\n    };\n    accountResults = AccountSearch.find(findTerm, {\n      limit: maxResults\n    });\n    Logger.debug(\"Found \" + accountResults.count() + \" accounts searching for \" + searchTerm);\n  }\n\n  return accountResults;\n};\n\nMeteor.publish(\"SearchResults\", function (collection, searchTerm, facets) {\n  var maxResults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 99;\n  check(collection, String);\n  check(collection, Match.Where(function (coll) {\n    return _includes(supportedCollections, coll);\n  }));\n  check(searchTerm, Match.Optional(String));\n  check(facets, Match.OneOf(Array, undefined));\n  Logger.debug(\"Returning search results on \" + collection + \". SearchTerm: |\" + searchTerm + \"|. Facets: |\" + facets + \"|.\");\n\n  if (!searchTerm) {\n    return this.ready();\n  }\n\n  return getResults[collection](searchTerm, facets, maxResults, this.userId);\n});","map":{"version":3,"sources":["/imports/plugins/included/search-mongo/server/publications/searchresults.js"],"names":["Meteor","check","Match","Reaction","Logger","ProductSearch","OrderSearch","AccountSearch","supportedCollections","getProductFindTerm","searchTerm","searchTags","userId","shopId","getShopId","findTerm","$text","$search","length","hashtags","$all","Roles","userIsInRole","isVisible","getResults","products","facets","maxResults","productResults","find","fields","score","$meta","title","description","handle","price","isSoldOut","isLowQuantity","isBackorder","sort","limit","orders","orderResults","searchPhone","$and","$or","_id","userEmails","$regex","$options","shippingName","billingName","billingPhone","shippingPhone","hasPermission","debug","count","accounts","accountResults","emails","publish","collection","String","Where","coll","Optional","OneOf","Array","undefined","ready"],"mappings":"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","file":"/imports/plugins/included/search-mongo/server/publications/searchresults.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { ProductSearch, OrderSearch, AccountSearch } from \"/lib/collections\";\n\nconst supportedCollections = [\"products\", \"orders\", \"accounts\"];\n\nfunction getProductFindTerm(searchTerm, searchTags, userId) {\n  const shopId = Reaction.getShopId();\n  const findTerm = {\n    shopId: shopId,\n    $text: { $search: searchTerm }\n  };\n  if (searchTags.length) {\n    findTerm.hashtags = { $all: searchTags };\n  }\n  if (!Roles.userIsInRole(userId, [\"admin\", \"owner\"], shopId)) {\n    findTerm.isVisible = true;\n  }\n  return findTerm;\n}\n\nexport const getResults = {};\n\ngetResults.products = function (searchTerm, facets, maxResults, userId) {\n  const searchTags = facets || [];\n  const findTerm = getProductFindTerm(searchTerm, searchTags, userId);\n  const productResults = ProductSearch.find(findTerm,\n    {\n      fields: {\n        score: { $meta: \"textScore\" },\n        title: 1,\n        hashtags: 1,\n        description: 1,\n        handle: 1,\n        price: 1,\n        isSoldOut: 1,\n        isLowQuantity: 1,\n        isBackorder: 1\n      },\n      sort: { score: { $meta: \"textScore\" } },\n      limit: maxResults\n    }\n  );\n  return productResults;\n};\n\ngetResults.orders = function (searchTerm, facets, maxResults, userId) {\n  let orderResults;\n  const searchPhone = _.replace(searchTerm, /\\D/g, \"\");\n  const shopId = Reaction.getShopId();\n  const findTerm = {\n    $and: [\n      { shopId: shopId },\n      { $or: [\n        { _id: searchTerm },\n        { userEmails: {\n          $regex: searchTerm,\n          $options: \"i\"\n        } },\n        { shippingName: {\n          $regex: searchTerm,\n          $options: \"i\"\n        } },\n        { billingName: {\n          $regex: searchTerm,\n          $options: \"i\"\n        } },\n        { billingPhone: {\n          $regex: \"^\" + searchPhone + \"$\",\n          $options: \"i\"\n        } },\n        { shippingPhone: {\n          $regex: \"^\" + searchPhone + \"$\",\n          $options: \"i\"\n        } }\n      ] }\n    ] };\n  if (Reaction.hasPermission(\"orders\", userId)) {\n    orderResults = OrderSearch.find(findTerm, { limit: maxResults });\n    Logger.debug(`Found ${orderResults.count()} orders searching for ${searchTerm}`);\n  }\n  return orderResults;\n};\n\ngetResults.accounts = function (searchTerm, facets, maxResults, userId) {\n  let accountResults;\n  const shopId = Reaction.getShopId();\n  const searchPhone = _.replace(searchTerm, /\\D/g, \"\");\n  if (Reaction.hasPermission(\"reaction-accounts\", userId)) {\n    const findTerm = {\n      $and: [\n        { shopId: shopId },\n        { $or: [\n          { emails: {\n            $regex: searchTerm,\n            $options: \"i\"\n          } },\n          { \"profile.firstName\": {\n            $regex: \"^\" + searchTerm + \"$\",\n            $options: \"i\"\n          } },\n          { \"profile.lastName\": {\n            $regex: \"^\" + searchTerm + \"$\",\n            $options: \"i\"\n          } },\n          { \"profile.phone\": {\n            $regex: \"^\" + searchPhone + \"$\",\n            $options: \"i\"\n          } }\n        ] }\n      ] };\n    accountResults = AccountSearch.find(findTerm, {\n      limit: maxResults\n    });\n    Logger.debug(`Found ${accountResults.count()} accounts searching for ${searchTerm}`);\n  }\n  return accountResults;\n};\n\nMeteor.publish(\"SearchResults\", function (collection, searchTerm, facets, maxResults = 99) {\n  check(collection, String);\n  check(collection, Match.Where((coll) => {\n    return _.includes(supportedCollections, coll);\n  }));\n  check(searchTerm, Match.Optional(String));\n  check(facets, Match.OneOf(Array, undefined));\n  Logger.debug(`Returning search results on ${collection}. SearchTerm: |${searchTerm}|. Facets: |${facets}|.`);\n  if (!searchTerm) {\n    return this.ready();\n  }\n  return getResults[collection](searchTerm, facets, maxResults, this.userId);\n});\n"]},"hash":"f9ba5f4353fd0680cbe0f579655c3b32790e20df"}
