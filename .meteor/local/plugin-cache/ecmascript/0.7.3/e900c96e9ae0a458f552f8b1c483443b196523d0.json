{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","createClass","classCallCheck","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"classnames","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classnames"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui/client/components/numericInput/numericInput.js","filenameRelative":"/imports/plugins/core/ui/client/components/numericInput/numericInput.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/components/numericInput/numericInput.js"],"names":["React","classnames","accounting","require","setCaretPosition","ctrl","pos","setSelectionRange","focus","createTextRange","range","collapse","moveEnd","moveStart","select","NumericInput","Component","constructor","props","state","value","handleChange","bind","componentWillReceiveProps","nextProps","setState","moneyFormat","format","precision","scale","undefined","displayValue","parts","split","length","decimal","unformatedValue","unformat","formatMoney","event","input","currentTarget","numberValue","caretPosition","selectionStart","Math","max","onChange","render","classNames","isEditing","textValueClassName","rui","text","fieldClassName","disabled","displayName","defaultProps","propTypes","PropTypes","shape","bool","number","func"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/numericInput/numericInput.js.map","sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nconst accounting = require(\"accounting-js\");\n\nfunction setCaretPosition(ctrl, pos) {\n  if (ctrl.setSelectionRange) {\n    ctrl.focus();\n    ctrl.setSelectionRange(pos, pos);\n  } else if (ctrl.createTextRange) {\n    const range = ctrl.createTextRange();\n\n    range.collapse(true);\n    range.moveEnd(\"character\", pos);\n    range.moveStart(\"character\", pos);\n    range.select();\n  }\n}\n\nclass NumericInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Set default state\n    this.state = {\n      value: this.props.value\n    };\n\n    // Bind event handlers\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * update state when component receives props\n   * @param  {Object} nextProps new props\n   * @return {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      value: nextProps.value\n    });\n  }\n\n  get moneyFormat() {\n    const moneyFormat = this.props.format || {};\n    // precision is mis-represented in accounting.js. Precision in this case is actually scale\n    // so we add the property for precision based on scale.\n    moneyFormat.precision = moneyFormat.scale !== undefined ? moneyFormat.scale : 2;\n\n    return moneyFormat;\n  }\n\n  get displayValue() {\n    const value = this.state.value;\n\n    if (typeof value === \"number\") {\n      if (this.props.format && this.props.format.scale === 0) {\n        return this.format(value * 100);\n      }\n      return this.format(value);\n    }\n\n    return 0;\n  }\n\n  get scale() {\n    const parts = this.state.value.split(\".\");\n\n    if (parts.length === 2) {\n      return parts[1].length;\n    }\n\n    return 0;\n  }\n\n  /**\n   * format a numeric string\n   * @param  {String} value Value to format\n   * @param  {Object} format Object containing settings for formatting value\n   * @return {String} Foramtted numeric string\n   */\n  format(value, format) {\n    const moneyFormat = format || this.moneyFormat;\n\n\n    // value * (10 ^ (2 - moneyFormat.scale))\n\n    // console.log(moneyFormat, value, value * Math.pow(10, 2 - moneyFormat.precision));\n    const decimal = moneyFormat.decimal || undefined;\n    const unformatedValue = this.unformat(value, decimal);\n\n    return accounting.formatMoney(unformatedValue, moneyFormat);\n  }\n\n  /**\n   * unformat numeric string\n   * @param  {String} value String value to unformat\n   * @param  {String} decimal String representing the decimal place\n   * @return {String} unformatted numeric string\n   */\n  unformat(value, decimal) {\n    return accounting.unformat(value, decimal);\n  }\n\n  /**\n   * Handle change event from text input\n   * @param  {SytheticEvent} event Change event\n   * @return {undefined}\n   */\n  handleChange(event) {\n    const input = event.currentTarget;\n    const value = event.currentTarget.value;\n    let numberValue = this.unformat(value);\n\n    if (this.props.format.scale === 0) {\n      numberValue = numberValue / 100;\n    }\n\n    this.setState({\n      value: numberValue,\n      caretPosition: input.selectionStart\n    }, () => {\n      setCaretPosition(input, Math.max(this.state.caretPosition, 0));\n\n      if (this.props.onChange) {\n        this.props.onChange(event, { value, numberValue });\n      }\n    });\n  }\n\n  /**\n   * render\n   * @return {ReactElement} markup\n   */\n  render() {\n    const { classNames } = this.props;\n\n\n    if (this.props.isEditing === false) {\n      const textValueClassName = classnames({\n        rui: true,\n        text: true,\n        ...(classNames.text || {})\n      });\n\n      return (\n        <span className={textValueClassName}>\n          {this.displayValue}\n        </span>\n      );\n    }\n\n    const fieldClassName = classnames({\n      \"form-control\": true, // eslint-disable-line: quote-props\n      ...(classNames.input || {})\n    });\n\n    return (\n      <div className=\"rui control numeric-input\">\n        <input\n          className={fieldClassName}\n          disabled={this.props.disabled}\n          onChange={this.handleChange}\n          value={this.displayValue}\n        />\n      </div>\n    );\n  }\n}\n\nNumericInput.displayName = \"Numeric Input\";\n\nNumericInput.defaultProps = {\n  disabled: false,\n  isEditing: true,\n  classNames: {}\n};\n\nNumericInput.propTypes = {\n  classNames: React.PropTypes.shape({}),\n  disabled: React.PropTypes.bool,\n  format: React.PropTypes.shape({\n    scale: React.PropTypes.number\n  }),\n  isEditing: React.PropTypes.bool,\n  onChange: React.PropTypes.func,\n  value: React.PropTypes.number\n};\n\nexport default NumericInput;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/components/numericInput/numericInput.js.map","sourceFileName":"/imports/plugins/core/ui/client/components/numericInput/numericInput.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"numericInput"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar classnames = void 0;\nmodule.importSync(\"classnames\", {\n  \"default\": function (v) {\n    classnames = v;\n  }\n}, 1);\n\nvar accounting = require(\"accounting-js\");\n\nfunction setCaretPosition(ctrl, pos) {\n  if (ctrl.setSelectionRange) {\n    ctrl.focus();\n    ctrl.setSelectionRange(pos, pos);\n  } else if (ctrl.createTextRange) {\n    var range = ctrl.createTextRange();\n    range.collapse(true);\n    range.moveEnd(\"character\", pos);\n    range.moveStart(\"character\", pos);\n    range.select();\n  }\n}\n\nvar NumericInput = function (_React$Component) {\n  (0, _inherits3.default)(NumericInput, _React$Component);\n\n  function NumericInput(props) {\n    (0, _classCallCheck3.default)(this, NumericInput);\n\n    // Set default state\n    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this, props));\n\n    _this.state = {\n      value: _this.props.value\n    }; // Bind event handlers\n\n    _this.handleChange = _this.handleChange.bind(_this);\n    return _this;\n  } /**\n     * update state when component receives props\n     * @param  {Object} nextProps new props\n     * @return {undefined}\n     */\n\n  NumericInput.prototype.componentWillReceiveProps = function () {\n    function componentWillReceiveProps(nextProps) {\n      this.setState({\n        value: nextProps.value\n      });\n    }\n\n    return componentWillReceiveProps;\n  }();\n\n  /**\n   * format a numeric string\n   * @param  {String} value Value to format\n   * @param  {Object} format Object containing settings for formatting value\n   * @return {String} Foramtted numeric string\n   */NumericInput.prototype.format = function () {\n    function format(value, _format) {\n      var moneyFormat = _format || this.moneyFormat; // value * (10 ^ (2 - moneyFormat.scale))\n      // console.log(moneyFormat, value, value * Math.pow(10, 2 - moneyFormat.precision));\n\n      var decimal = moneyFormat.decimal || undefined;\n      var unformatedValue = this.unformat(value, decimal);\n      return accounting.formatMoney(unformatedValue, moneyFormat);\n    }\n\n    return format;\n  }(); /**\n        * unformat numeric string\n        * @param  {String} value String value to unformat\n        * @param  {String} decimal String representing the decimal place\n        * @return {String} unformatted numeric string\n        */\n\n  NumericInput.prototype.unformat = function () {\n    function unformat(value, decimal) {\n      return accounting.unformat(value, decimal);\n    }\n\n    return unformat;\n  }(); /**\n        * Handle change event from text input\n        * @param  {SytheticEvent} event Change event\n        * @return {undefined}\n        */\n\n  NumericInput.prototype.handleChange = function () {\n    function handleChange(event) {\n      var _this2 = this;\n\n      var input = event.currentTarget;\n      var value = event.currentTarget.value;\n      var numberValue = this.unformat(value);\n\n      if (this.props.format.scale === 0) {\n        numberValue = numberValue / 100;\n      }\n\n      this.setState({\n        value: numberValue,\n        caretPosition: input.selectionStart\n      }, function () {\n        setCaretPosition(input, Math.max(_this2.state.caretPosition, 0));\n\n        if (_this2.props.onChange) {\n          _this2.props.onChange(event, {\n            value: value,\n            numberValue: numberValue\n          });\n        }\n      });\n    }\n\n    return handleChange;\n  }(); /**\n        * render\n        * @return {ReactElement} markup\n        */\n\n  NumericInput.prototype.render = function () {\n    function render() {\n      var classNames = this.props.classNames;\n\n      if (this.props.isEditing === false) {\n        var textValueClassName = classnames((0, _extends3.default)({\n          rui: true,\n          text: true\n        }, classNames.text || {}));\n        return React.createElement(\n          \"span\",\n          {\n            className: textValueClassName\n          },\n          this.displayValue\n        );\n      }\n\n      var fieldClassName = classnames((0, _extends3.default)({\n        \"form-control\": true\n      }, classNames.input || {}));\n      return React.createElement(\n        \"div\",\n        {\n          className: \"rui control numeric-input\"\n        },\n        React.createElement(\"input\", {\n          className: fieldClassName,\n          disabled: this.props.disabled,\n          onChange: this.handleChange,\n          value: this.displayValue\n        })\n      );\n    }\n\n    return render;\n  }();\n\n  (0, _createClass3.default)(NumericInput, [{\n    key: \"moneyFormat\",\n    get: function () {\n      var moneyFormat = this.props.format || {}; // precision is mis-represented in accounting.js. Precision in this case is actually scale\n      // so we add the property for precision based on scale.\n\n      moneyFormat.precision = moneyFormat.scale !== undefined ? moneyFormat.scale : 2;\n      return moneyFormat;\n    }\n  }, {\n    key: \"displayValue\",\n    get: function () {\n      var value = this.state.value;\n\n      if (typeof value === \"number\") {\n        if (this.props.format && this.props.format.scale === 0) {\n          return this.format(value * 100);\n        }\n\n        return this.format(value);\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"scale\",\n    get: function () {\n      var parts = this.state.value.split(\".\");\n\n      if (parts.length === 2) {\n        return parts[1].length;\n      }\n\n      return 0;\n    }\n  }]);\n  return NumericInput;\n}(React.Component);\n\nNumericInput.displayName = \"Numeric Input\";\nNumericInput.defaultProps = {\n  disabled: false,\n  isEditing: true,\n  classNames: {}\n};\nNumericInput.propTypes = {\n  classNames: React.PropTypes.shape({}),\n  disabled: React.PropTypes.bool,\n  format: React.PropTypes.shape({\n    scale: React.PropTypes.number\n  }),\n  isEditing: React.PropTypes.bool,\n  onChange: React.PropTypes.func,\n  value: React.PropTypes.number\n};\nmodule.export(\"default\", exports.default = NumericInput);","map":{"version":3,"sources":["/imports/plugins/core/ui/client/components/numericInput/numericInput.js"],"names":["React","classnames","accounting","require","setCaretPosition","ctrl","pos","setSelectionRange","focus","createTextRange","range","collapse","moveEnd","moveStart","select","NumericInput","Component","constructor","props","state","value","handleChange","bind","componentWillReceiveProps","nextProps","setState","moneyFormat","format","precision","scale","undefined","displayValue","parts","split","length","decimal","unformatedValue","unformat","formatMoney","event","input","currentTarget","numberValue","caretPosition","selectionStart","Math","max","onChange","render","classNames","isEditing","textValueClassName","rui","text","fieldClassName","disabled","displayName","defaultProps","propTypes","PropTypes","shape","bool","number","func"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/numericInput/numericInput.js.map","sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nconst accounting = require(\"accounting-js\");\n\nfunction setCaretPosition(ctrl, pos) {\n  if (ctrl.setSelectionRange) {\n    ctrl.focus();\n    ctrl.setSelectionRange(pos, pos);\n  } else if (ctrl.createTextRange) {\n    const range = ctrl.createTextRange();\n\n    range.collapse(true);\n    range.moveEnd(\"character\", pos);\n    range.moveStart(\"character\", pos);\n    range.select();\n  }\n}\n\nclass NumericInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Set default state\n    this.state = {\n      value: this.props.value\n    };\n\n    // Bind event handlers\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * update state when component receives props\n   * @param  {Object} nextProps new props\n   * @return {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      value: nextProps.value\n    });\n  }\n\n  get moneyFormat() {\n    const moneyFormat = this.props.format || {};\n    // precision is mis-represented in accounting.js. Precision in this case is actually scale\n    // so we add the property for precision based on scale.\n    moneyFormat.precision = moneyFormat.scale !== undefined ? moneyFormat.scale : 2;\n\n    return moneyFormat;\n  }\n\n  get displayValue() {\n    const value = this.state.value;\n\n    if (typeof value === \"number\") {\n      if (this.props.format && this.props.format.scale === 0) {\n        return this.format(value * 100);\n      }\n      return this.format(value);\n    }\n\n    return 0;\n  }\n\n  get scale() {\n    const parts = this.state.value.split(\".\");\n\n    if (parts.length === 2) {\n      return parts[1].length;\n    }\n\n    return 0;\n  }\n\n  /**\n   * format a numeric string\n   * @param  {String} value Value to format\n   * @param  {Object} format Object containing settings for formatting value\n   * @return {String} Foramtted numeric string\n   */\n  format(value, format) {\n    const moneyFormat = format || this.moneyFormat;\n\n\n    // value * (10 ^ (2 - moneyFormat.scale))\n\n    // console.log(moneyFormat, value, value * Math.pow(10, 2 - moneyFormat.precision));\n    const decimal = moneyFormat.decimal || undefined;\n    const unformatedValue = this.unformat(value, decimal);\n\n    return accounting.formatMoney(unformatedValue, moneyFormat);\n  }\n\n  /**\n   * unformat numeric string\n   * @param  {String} value String value to unformat\n   * @param  {String} decimal String representing the decimal place\n   * @return {String} unformatted numeric string\n   */\n  unformat(value, decimal) {\n    return accounting.unformat(value, decimal);\n  }\n\n  /**\n   * Handle change event from text input\n   * @param  {SytheticEvent} event Change event\n   * @return {undefined}\n   */\n  handleChange(event) {\n    const input = event.currentTarget;\n    const value = event.currentTarget.value;\n    let numberValue = this.unformat(value);\n\n    if (this.props.format.scale === 0) {\n      numberValue = numberValue / 100;\n    }\n\n    this.setState({\n      value: numberValue,\n      caretPosition: input.selectionStart\n    }, () => {\n      setCaretPosition(input, Math.max(this.state.caretPosition, 0));\n\n      if (this.props.onChange) {\n        this.props.onChange(event, { value, numberValue });\n      }\n    });\n  }\n\n  /**\n   * render\n   * @return {ReactElement} markup\n   */\n  render() {\n    const { classNames } = this.props;\n\n\n    if (this.props.isEditing === false) {\n      const textValueClassName = classnames({\n        rui: true,\n        text: true,\n        ...(classNames.text || {})\n      });\n\n      return (\n        <span className={textValueClassName}>\n          {this.displayValue}\n        </span>\n      );\n    }\n\n    const fieldClassName = classnames({\n      \"form-control\": true, // eslint-disable-line: quote-props\n      ...(classNames.input || {})\n    });\n\n    return (\n      <div className=\"rui control numeric-input\">\n        <input\n          className={fieldClassName}\n          disabled={this.props.disabled}\n          onChange={this.handleChange}\n          value={this.displayValue}\n        />\n      </div>\n    );\n  }\n}\n\nNumericInput.displayName = \"Numeric Input\";\n\nNumericInput.defaultProps = {\n  disabled: false,\n  isEditing: true,\n  classNames: {}\n};\n\nNumericInput.propTypes = {\n  classNames: React.PropTypes.shape({}),\n  disabled: React.PropTypes.bool,\n  format: React.PropTypes.shape({\n    scale: React.PropTypes.number\n  }),\n  isEditing: React.PropTypes.bool,\n  onChange: React.PropTypes.func,\n  value: React.PropTypes.number\n};\n\nexport default NumericInput;\n"]},"hash":"e900c96e9ae0a458f552f8b1c483443b196523d0"}
