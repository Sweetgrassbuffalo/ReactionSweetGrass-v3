{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./payflowproApi","imported":["PayflowproApi"],"specifiers":[{"kind":"named","imported":"PayflowproApi","local":"PayflowproApi"}]},{"source":"/server/api","imported":["Logger"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"/lib/collections/schemas","imported":["PaymentMethod"],"specifiers":[{"kind":"named","imported":"PaymentMethod","local":"PaymentMethod"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"../../lib/api","imported":["PayPal"],"specifiers":[{"kind":"named","imported":"PayPal","local":"PayPal"}]}],"exports":{"exported":["paymentSubmit","transactionType","cardData","paymentData","paymentCapture","paymentMethod","createRefund","paymentMethod","amount","listRefunds","paymentMethod","getSettings"],"specifiers":[{"kind":"local","local":"paymentSubmit","exported":"paymentSubmit"},{"kind":"local","local":"transactionType","exported":"transactionType"},{"kind":"local","local":"cardData","exported":"cardData"},{"kind":"local","local":"paymentData","exported":"paymentData"},{"kind":"local","local":"paymentCapture","exported":"paymentCapture"},{"kind":"local","local":"paymentMethod","exported":"paymentMethod"},{"kind":"local","local":"createRefund","exported":"createRefund"},{"kind":"local","local":"paymentMethod","exported":"paymentMethod"},{"kind":"local","local":"amount","exported":"amount"},{"kind":"local","local":"listRefunds","exported":"listRefunds"},{"kind":"local","local":"paymentMethod","exported":"paymentMethod"},{"kind":"local","local":"getSettings","exported":"getSettings"}]}}},"options":{"filename":"/imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js","filenameRelative":"/imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js"],"names":["PayflowproApi","Logger","PaymentMethod","check","PayPal","paymentSubmit","transactionType","cardData","paymentData","String","Object","paymentSubmitDetails","result","refundResult","apiCall","debug","error","saved","message","fatal","paymentCapture","paymentMethod","paymentCaptureDetails","authorizationId","metadata","amount","captureCharge","createRefund","Number","refundDetails","captureId","listRefunds","refundListDetails","transactionId","getSettings","settings","payflowAccountOptions","payflowSettings","mode","enabled"],"mappings":"AAAA,OAAS;AAAT;AAA8B;;AAA9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAc,AACvB,AAAS,AAAqB,AAC9B,AAAS,AAAa,AACtB,AAAS,AAAc,AAAiB,AAGxC,AAQA,AAAO,AAAS,AAAc,AAAiB,AAAU,AAAa,AACpE,AAAM,AAAiB,AACvB;;AAAM,SAAN,AAAgB,sDAChB;QAAA,AAAM,AAAa,iBAAnB,AAEA;QAAM,UAAuB,AAC3B;qBAD2B,AACV,AACjB,AAAU,AACV;MAAa;qBAGf;AAAA,AAAI;iBAEJ,AAAI,AACF,AAAM,AAAe,AAAc,AAAQ,AAAc,AACzD;AAVF,AAA6B;MAU3B,AAAO,AAAM,AACb,AAAS,AACV;;AAJD,AAIE,MAAA,AAAO,AAAO,AACd;QAAA,AAAO,AAAM,mDACb;WAAS,MACP;aADO,AACA,AACP;WAAQ,OAFD,AAE0B,AAAM,AAAQ;AAFjD,iBAIA;AAAO;;+CAGT,AAAO,A,AACR,AAGD;AAPI,AAAa,AACd;;;;;AAYH,AAAO,AAAS,AAAe,AAAe,AAC5C,AAAM,AAAe,AAErB,AAAM,AAAwB,AAC5B,AAAiB,AAAc,AAAS,AACxC,AAAQ,AAAc,AAGxB,AAAI;;uCAEJ;AAAI,uBACF,AAAM,AAAe,AAAc,AAAQ,AAAc,AACzD;MAAA,AAAO,AAAM;AACJ,qBAAT,uBAHF,AAIC;AAAC,AAAO,YAAP,AAAc,cACd,AAAO,AAAM,AACb,AAAS,AACP;AAJF;MAGS,AACA,AACP,AAAQ,AAA0B,AAAM,AAAQ;;AAFlD,MAIA;QAAA,AAAO,AAAM,mDAAb,AACD;;aAED;IAAO,OAAP,O,AACD,AAGD;;;;;;;AAOA,AAAO,AAAS,AAAa,AAAe,AAAQ,AAClD;;AAAM,SAAN,AAAqB,AACrB;AAAA,AAAM,AAAQ,AAEd,AAAM,AAAgB,AACpB,AAAW,AAAc,AAAS,AAClC,AAAQ,AAGV,AAAI,AAEJ,AAAI,AACF,AAAM,AAAe,AAAc,AAAQ,AAAa,AACxD,AAAO,AAAM,AACb;;AAAS,SAAT,oCACD;AAJD,AAIE,QAAA,AAAO,AAAO,eACd;QAAO,QAAP,AAAa,AACb,AAAS,AACP;MADO,AACA;AACC,6BAAuB,SAFxB,AAE8B,AAAQ;AAF/C,YAIA,AAAO,AAAM,AACd;AAHG;MAKJ,AAAO,AACR,A;;AAGD;;;;;;;AAOO,aAAA,AAAS,AAAY,AAAe,AACzC;AAAA,AAAM,AAAe,6CAErB,AAAM,AAAoB,AACxB;AAJJ;iBAG4B,AACT,AAAc,AAAS;AADxC,AAIA,AAAI;;SAEJ;AAAA,AAAI,AACF,AAAM,AAAe,AAAc,AAAQ,AAAY,AACvD,AAAO,AAAM,AACb,AAAS,AACV,AAAC,AAAO,AAAO,AACd,AAAO,AAAM,AACb,AAAS,AACP,AAAO,AACP,AAAQ,AAAuB,AAAM,AAAQ,AAE/C;;AAAO,SAAP,AAAa,2BAAb,AACD;uBAED;MAAA,AAAO;0CAIT,AAAO,AAAS,AAAc,AAC5B,AAAM,AAAW,AAAO,AACxB;AALD;MAKO,AAAkB,AACtB,AAAM,AAAS,AACf;;MAFF,AAAwB,AAEb,AAAS;yDAEpB;AAAO,iBAAP,AACD","file":"/imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js.map","sourcesContent":["import { PayflowproApi } from \"./payflowproApi\";\nimport { Logger } from \"/server/api\";\nimport { PaymentMethod } from \"/lib/collections/schemas\";\nimport { check } from \"meteor/check\";\nimport { PayPal } from \"../../lib/api\"; // PayPal is the reaction api\n\n\n/**\n * payflowpro/payment/submit\n * Create and Submit a PayPal PayFlow transaction\n * @param  {Object} transactionType transactionType\n * @param  {Object} cardData cardData object\n * @param  {Object} paymentData paymentData object\n * @return {Object} results from PayPal payment create\n */\nexport function paymentSubmit(transactionType, cardData, paymentData) {\n  check(transactionType, String);\n  check(cardData, Object);\n  check(paymentData, Object);\n\n  const paymentSubmitDetails = {\n    transactionType: transactionType,\n    cardData: cardData,\n    paymentData: paymentData\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.paymentSubmit(paymentSubmitDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Submit Payment: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, payment was not submitted\");\n  }\n\n  return result;\n}\n\n\n/**\n * payflowpro/payment/capture\n * Capture an authorized PayPal PayFlow transaction\n * @param  {Object} paymentMethod A PaymentMethod object\n * @return {Object} results from PayPal normalized\n */\nexport function paymentCapture(paymentMethod) {\n  check(paymentMethod, PaymentMethod);\n\n  const paymentCaptureDetails = {\n    authorizationId: paymentMethod.metadata.authorizationId,\n    amount: paymentMethod.amount\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.captureCharge(paymentCaptureDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Capture Payment: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, payment was not captured\");\n  }\n\n  return result;\n}\n\n\n/**\n * createRefund\n * Refund PayPal PayFlow payment\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @param {Number} amount - Amount to be refunded if not the entire amount\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function createRefund(paymentMethod, amount) {\n  check(paymentMethod, PaymentMethod);\n  check(amount, Number);\n\n  const refundDetails = {\n    captureId: paymentMethod.metadata.captureId,\n    amount: amount\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.createRefund(refundDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\n\n/**\n * listRefunds\n * List all refunds for a PayPal PayFlow transaction\n * https://developers.braintreepayments.com/reference/request/transaction/find/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @return {Array} results - An array of refund objects for display in admin\n */\nexport function listRefunds(paymentMethod) {\n  check(paymentMethod, PaymentMethod);\n\n  const refundListDetails = {\n    transactionId: paymentMethod.metadata.transactionId\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.listRefunds(refundListDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\n\nexport function getSettings() {\n  const settings = PayPal.payflowAccountOptions();\n  const payflowSettings = {\n    mode: settings.mode,\n    enabled: settings.enabled\n  };\n  return payflowSettings;\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js.map","sourceFileName":"/imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"payflowproMethods"},"ignored":false,"code":"module.export({\n  paymentSubmit: function () {\n    return paymentSubmit;\n  },\n  paymentCapture: function () {\n    return paymentCapture;\n  },\n  createRefund: function () {\n    return createRefund;\n  },\n  listRefunds: function () {\n    return listRefunds;\n  },\n  getSettings: function () {\n    return getSettings;\n  }\n});\nvar PayflowproApi = void 0;\nmodule.importSync(\"./payflowproApi\", {\n  PayflowproApi: function (v) {\n    PayflowproApi = v;\n  }\n}, 0);\nvar Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 1);\nvar PaymentMethod = void 0;\nmodule.importSync(\"/lib/collections/schemas\", {\n  PaymentMethod: function (v) {\n    PaymentMethod = v;\n  }\n}, 2);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 3);\nvar PayPal = void 0;\nmodule.importSync(\"../../lib/api\", {\n  PayPal: function (v) {\n    PayPal = v;\n  }\n}, 4);\n\nfunction paymentSubmit(transactionType, cardData, paymentData) {\n  check(transactionType, String);\n  check(cardData, Object);\n  check(paymentData, Object);\n  var paymentSubmitDetails = {\n    transactionType: transactionType,\n    cardData: cardData,\n    paymentData: paymentData\n  };\n  var result = void 0;\n\n  try {\n    var refundResult = PayflowproApi.apiCall.paymentSubmit(paymentSubmitDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: \"Cannot Submit Payment: \" + error.message\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, payment was not submitted\");\n  }\n\n  return result;\n}\n\nfunction paymentCapture(paymentMethod) {\n  check(paymentMethod, PaymentMethod);\n  var paymentCaptureDetails = {\n    authorizationId: paymentMethod.metadata.authorizationId,\n    amount: paymentMethod.amount\n  };\n  var result = void 0;\n\n  try {\n    var refundResult = PayflowproApi.apiCall.captureCharge(paymentCaptureDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: \"Cannot Capture Payment: \" + error.message\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, payment was not captured\");\n  }\n\n  return result;\n}\n\nfunction createRefund(paymentMethod, amount) {\n  check(paymentMethod, PaymentMethod);\n  check(amount, Number);\n  var refundDetails = {\n    captureId: paymentMethod.metadata.captureId,\n    amount: amount\n  };\n  var result = void 0;\n\n  try {\n    var refundResult = PayflowproApi.apiCall.createRefund(refundDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: \"Cannot issue refund: \" + error.message\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\nfunction listRefunds(paymentMethod) {\n  check(paymentMethod, PaymentMethod);\n  var refundListDetails = {\n    transactionId: paymentMethod.metadata.transactionId\n  };\n  var result = void 0;\n\n  try {\n    var refundResult = PayflowproApi.apiCall.listRefunds(refundListDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: \"Cannot issue refund: \" + error.message\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\nfunction getSettings() {\n  var settings = PayPal.payflowAccountOptions();\n  var payflowSettings = {\n    mode: settings.mode,\n    enabled: settings.enabled\n  };\n  return payflowSettings;\n}","map":{"version":3,"sources":["/imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js"],"names":["PayflowproApi","Logger","PaymentMethod","check","PayPal","paymentSubmit","transactionType","cardData","paymentData","String","Object","paymentSubmitDetails","result","refundResult","apiCall","debug","error","saved","message","fatal","paymentCapture","paymentMethod","paymentCaptureDetails","authorizationId","metadata","amount","captureCharge","createRefund","Number","refundDetails","captureId","listRefunds","refundListDetails","transactionId","getSettings","settings","payflowAccountOptions","payflowSettings","mode","enabled"],"mappings":"AAAA,OAAS;AAAT;AAA8B;;AAA9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAc,AACvB,AAAS,AAAqB,AAC9B,AAAS,AAAa,AACtB,AAAS,AAAc,AAAiB,AAGxC,AAQA,AAAO,AAAS,AAAc,AAAiB,AAAU,AAAa,AACpE,AAAM,AAAiB,AACvB;;AAAM,SAAN,AAAgB,sDAChB;QAAA,AAAM,AAAa,iBAAnB,AAEA;QAAM,UAAuB,AAC3B;qBAD2B,AACV,AACjB,AAAU,AACV;MAAa;qBAGf;AAAA,AAAI;iBAEJ,AAAI,AACF,AAAM,AAAe,AAAc,AAAQ,AAAc,AACzD;AAVF,AAA6B;MAU3B,AAAO,AAAM,AACb,AAAS,AACV;;AAJD,AAIE,MAAA,AAAO,AAAO,AACd;QAAA,AAAO,AAAM,mDACb;WAAS,MACP;aADO,AACA,AACP;WAAQ,OAFD,AAE0B,AAAM,AAAQ;AAFjD,iBAIA;AAAO;;+CAGT,AAAO,A,AACR,AAGD;AAPI,AAAa,AACd;;;;;AAYH,AAAO,AAAS,AAAe,AAAe,AAC5C,AAAM,AAAe,AAErB,AAAM,AAAwB,AAC5B,AAAiB,AAAc,AAAS,AACxC,AAAQ,AAAc,AAGxB,AAAI;;uCAEJ;AAAI,uBACF,AAAM,AAAe,AAAc,AAAQ,AAAc,AACzD;MAAA,AAAO,AAAM;AACJ,qBAAT,uBAHF,AAIC;AAAC,AAAO,YAAP,AAAc,cACd,AAAO,AAAM,AACb,AAAS,AACP;AAJF;MAGS,AACA,AACP,AAAQ,AAA0B,AAAM,AAAQ;;AAFlD,MAIA;QAAA,AAAO,AAAM,mDAAb,AACD;;aAED;IAAO,OAAP,O,AACD,AAGD;;;;;;;AAOA,AAAO,AAAS,AAAa,AAAe,AAAQ,AAClD;;AAAM,SAAN,AAAqB,AACrB;AAAA,AAAM,AAAQ,AAEd,AAAM,AAAgB,AACpB,AAAW,AAAc,AAAS,AAClC,AAAQ,AAGV,AAAI,AAEJ,AAAI,AACF,AAAM,AAAe,AAAc,AAAQ,AAAa,AACxD,AAAO,AAAM,AACb;;AAAS,SAAT,oCACD;AAJD,AAIE,QAAA,AAAO,AAAO,eACd;QAAO,QAAP,AAAa,AACb,AAAS,AACP;MADO,AACA;AACC,6BAAuB,SAFxB,AAE8B,AAAQ;AAF/C,YAIA,AAAO,AAAM,AACd;AAHG;MAKJ,AAAO,AACR,A;;AAGD;;;;;;;AAOO,aAAA,AAAS,AAAY,AAAe,AACzC;AAAA,AAAM,AAAe,6CAErB,AAAM,AAAoB,AACxB;AAJJ;iBAG4B,AACT,AAAc,AAAS;AADxC,AAIA,AAAI;;SAEJ;AAAA,AAAI,AACF,AAAM,AAAe,AAAc,AAAQ,AAAY,AACvD,AAAO,AAAM,AACb,AAAS,AACV,AAAC,AAAO,AAAO,AACd,AAAO,AAAM,AACb,AAAS,AACP,AAAO,AACP,AAAQ,AAAuB,AAAM,AAAQ,AAE/C;;AAAO,SAAP,AAAa,2BAAb,AACD;uBAED;MAAA,AAAO;0CAIT,AAAO,AAAS,AAAc,AAC5B,AAAM,AAAW,AAAO,AACxB;AALD;MAKO,AAAkB,AACtB,AAAM,AAAS,AACf;;MAFF,AAAwB,AAEb,AAAS;yDAEpB;AAAO,iBAAP,AACD","file":"/imports/plugins/included/payments-paypal/server/methods/payflowproMethods.js.map","sourcesContent":["import { PayflowproApi } from \"./payflowproApi\";\nimport { Logger } from \"/server/api\";\nimport { PaymentMethod } from \"/lib/collections/schemas\";\nimport { check } from \"meteor/check\";\nimport { PayPal } from \"../../lib/api\"; // PayPal is the reaction api\n\n\n/**\n * payflowpro/payment/submit\n * Create and Submit a PayPal PayFlow transaction\n * @param  {Object} transactionType transactionType\n * @param  {Object} cardData cardData object\n * @param  {Object} paymentData paymentData object\n * @return {Object} results from PayPal payment create\n */\nexport function paymentSubmit(transactionType, cardData, paymentData) {\n  check(transactionType, String);\n  check(cardData, Object);\n  check(paymentData, Object);\n\n  const paymentSubmitDetails = {\n    transactionType: transactionType,\n    cardData: cardData,\n    paymentData: paymentData\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.paymentSubmit(paymentSubmitDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Submit Payment: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, payment was not submitted\");\n  }\n\n  return result;\n}\n\n\n/**\n * payflowpro/payment/capture\n * Capture an authorized PayPal PayFlow transaction\n * @param  {Object} paymentMethod A PaymentMethod object\n * @return {Object} results from PayPal normalized\n */\nexport function paymentCapture(paymentMethod) {\n  check(paymentMethod, PaymentMethod);\n\n  const paymentCaptureDetails = {\n    authorizationId: paymentMethod.metadata.authorizationId,\n    amount: paymentMethod.amount\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.captureCharge(paymentCaptureDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Capture Payment: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, payment was not captured\");\n  }\n\n  return result;\n}\n\n\n/**\n * createRefund\n * Refund PayPal PayFlow payment\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @param {Number} amount - Amount to be refunded if not the entire amount\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function createRefund(paymentMethod, amount) {\n  check(paymentMethod, PaymentMethod);\n  check(amount, Number);\n\n  const refundDetails = {\n    captureId: paymentMethod.metadata.captureId,\n    amount: amount\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.createRefund(refundDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\n\n/**\n * listRefunds\n * List all refunds for a PayPal PayFlow transaction\n * https://developers.braintreepayments.com/reference/request/transaction/find/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @return {Array} results - An array of refund objects for display in admin\n */\nexport function listRefunds(paymentMethod) {\n  check(paymentMethod, PaymentMethod);\n\n  const refundListDetails = {\n    transactionId: paymentMethod.metadata.transactionId\n  };\n\n  let result;\n\n  try {\n    const refundResult = PayflowproApi.apiCall.listRefunds(refundListDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"PayPal PayFlow call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\n\nexport function getSettings() {\n  const settings = PayPal.payflowAccountOptions();\n  const payflowSettings = {\n    mode: settings.mode,\n    enabled: settings.enabled\n  };\n  return payflowSettings;\n}\n"]},"hash":"3b6b5625027800eb472b7c3c2369e37649b47af1"}
