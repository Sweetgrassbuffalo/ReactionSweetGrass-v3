{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"lodash/extend","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_extend"}]},{"source":"lodash/min","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_min"}]},{"source":"lodash/isEmpty","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_isEmpty"}]},{"source":"lodash/debounce","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_debounce"}]},{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"griddle-react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Griddle"}]},{"source":"meteor/tmeasday:publish-counts","imported":["Counts"],"specifiers":[{"kind":"named","imported":"Counts","local":"Counts"}]},{"source":"meteor/react-meteor-data","imported":["ReactMeteorData"],"specifiers":[{"kind":"named","imported":"ReactMeteorData","local":"ReactMeteorData"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui-grid/client/griddle.js","filenameRelative":"/imports/plugins/core/ui-grid/client/griddle.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui-grid/client/griddle.js"],"names":["React","Griddle","Counts","ReactMeteorData","MeteorGriddle","createClass","propTypes","collection","PropTypes","object","filteredFields","array","matchingResultsCount","string","publication","subsManager","transform","func","mixins","getDefaultProps","useExternal","externalFilterDebounceWait","externalResultsPerPage","query","getInitialState","currentPage","maxPages","props","externalSortColumn","externalSortAscending","componentWillMount","applyQuery","setState","getMeteorData","matchingResults","get","options","skip","limit","state","sort","pubHandle","subscribe","Meteor","results","find","fetch","loading","ready","resetQuery","setPage","index","changeSort","sortAscending","setFilter","filter","columns","orArray","map","field","filterItem","$regex","$options","$or","setPageSize","size","render","Math","ceil","data","allProps","externalIsLoading","columnMetadata"],"mappings":"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","file":"/imports/plugins/core/ui-grid/client/griddle.js.map","sourcesContent":["/*\nForked from https://github.com/meteor-utilities/Meteor-Griddle\n */\nimport React from \"react\";\nimport _ from \"lodash\";\nimport Griddle from \"griddle-react\";\nimport { Counts } from \"meteor/tmeasday:publish-counts\";\nimport { ReactMeteorData } from \"meteor/react-meteor-data\";\n\n/* eslint react/prop-types:0, react/jsx-sort-props:0, react/forbid-prop-types: 0, \"react/prefer-es6-class\": [1, \"never\"] */\n\nconst MeteorGriddle = React.createClass({\n  propTypes: {\n    collection: React.PropTypes.object, // the collection to display\n    filteredFields: React.PropTypes.array, // an array of fields to search through when filtering\n    matchingResultsCount: React.PropTypes.string, // the name of the matching results counter\n    publication: React.PropTypes.string, // the publication that will provide the data\n    subsManager: React.PropTypes.object, // subsManager sub\n    transform: React.PropTypes.func // external function to filter result source\n  },\n  mixins: [ReactMeteorData],\n\n  getDefaultProps() {\n    return { useExternal: false, externalFilterDebounceWait: 300, externalResultsPerPage: 10, query: {} };\n  },\n\n  getInitialState() {\n    return {\n      currentPage: 0,\n      maxPages: 0,\n      externalResultsPerPage: this.props.externalResultsPerPage,\n      externalSortColumn: this.props.externalSortColumn,\n      externalSortAscending: this.props.externalSortAscending,\n      query: {}\n    };\n  },\n\n  componentWillMount() {\n    this.applyQuery = _.debounce((query) => {\n      this.setState({ query });\n    }, this.props.externalFilterDebounceWait);\n  },\n\n  getMeteorData() {\n    // Get a count of the number of items matching the current filter. If no filter is set it will return the total number\n    // of items in the collection.\n    const matchingResults = Counts.get(this.props.matchingResultsCount);\n\n    const options = {};\n    let skip;\n    if (this.props.useExternal) {\n      options.limit = this.state.externalResultsPerPage;\n      if (!_.isEmpty(this.state.query) && !!matchingResults) {\n        // if necessary, limit the cursor to number of matching results to avoid displaying results from other publications\n        options.limit = _.min([options.limit, matchingResults]);\n      }\n      options.sort = {\n        [this.state.externalSortColumn]: (this.state.externalSortAscending\n          ? 1\n          : -1)\n      };\n      skip = this.state.currentPage * this.state.externalResultsPerPage;\n    }\n\n    let pubHandle;\n\n    if (this.props.subsManager) {\n      pubHandle = this.props.subsManager.subscribe(this.props.publication, this.state.query, _.extend({\n        skip: skip\n      }, options));\n    } else {\n      pubHandle = Meteor.subscribe(this.props.publication, this.state.query, _.extend({\n        skip: skip\n      }, options));\n    }\n\n    // optional transform of collection for grid results\n    let results = this.props.collection.find(this.state.query, options).fetch();\n    if (this.props.transform) {\n      results = this.props.transform(results);\n    }\n\n    return {\n      loading: !pubHandle.ready(),\n      results: results,\n      matchingResults: matchingResults\n    };\n  },\n\n  resetQuery() {\n    this.setState({ query: {} });\n  },\n\n  // what page is currently viewed\n  setPage(index) {\n    this.setState({ currentPage: index });\n  },\n\n  // this changes whether data is sorted in ascending or descending order\n  changeSort(sort, sortAscending) {\n    this.setState({ externalSortColumn: sort, externalSortAscending: sortAscending });\n  },\n\n  setFilter(filter) {\n    if (filter) {\n      const filteredFields = this.props.filteredFields || this.props.columns;\n      const orArray = filteredFields.map((field) => {\n        const filterItem = {};\n        filterItem[field] = {\n          $regex: filter,\n          $options: \"i\"\n        };\n        return filterItem;\n      });\n      this.applyQuery({ $or: orArray });\n    } else {\n      this.resetQuery();\n    }\n  },\n\n  // this method handles determining the page size\n  setPageSize(size) {\n    this.setState({ externalResultsPerPage: size });\n  },\n\n  render() {\n    // figure out how many pages we have based on the number of total results matching the cursor\n    const maxPages = Math.ceil(this.data.matchingResults / this.state.externalResultsPerPage);\n\n    // The Griddle externalIsLoading property is managed internally to line up with the subscription ready state, so we're\n    // removing this property if it's passed in.\n    const allProps = this.props;\n    delete allProps.externalIsLoading;\n\n    return (<Griddle\n      {...allProps}\n      tableClassName=\"table\"\n      results={this.data.results}\n      columnMetadata={this.props.columnMetadata}\n      externalSetPage={this.setPage}\n      externalChangeSort={this.changeSort}\n      externalSetFilter={this.setFilter}\n      externalSetPageSize={this.setPageSize}\n      externalMaxPage={maxPages}\n      externalCurrentPage={this.state.currentPage}\n      resultsPerPage={this.state.externalResultsPerPage}\n      externalSortColumn={this.state.externalSortColumn}\n      externalSortAscending={this.state.externalSortAscending}\n      externalIsLoading={this.data.loading}\n            />);\n  }\n});\n\nexport default MeteorGriddle;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui-grid/client/griddle.js.map","sourceFileName":"/imports/plugins/core/ui-grid/client/griddle.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"griddle"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _extend = void 0;\n\nmodule.importSync(\"lodash/extend\", {\n  \"default\": function (v) {\n    _extend = v;\n  }\n}, 0);\n\nvar _min = void 0;\n\nmodule.importSync(\"lodash/min\", {\n  \"default\": function (v) {\n    _min = v;\n  }\n}, 1);\n\nvar _isEmpty = void 0;\n\nmodule.importSync(\"lodash/isEmpty\", {\n  \"default\": function (v) {\n    _isEmpty = v;\n  }\n}, 2);\n\nvar _debounce = void 0;\n\nmodule.importSync(\"lodash/debounce\", {\n  \"default\": function (v) {\n    _debounce = v;\n  }\n}, 3);\nvar React = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 4);\nvar Griddle = void 0;\nmodule.importSync(\"griddle-react\", {\n  \"default\": function (v) {\n    Griddle = v;\n  }\n}, 5);\nvar Counts = void 0;\nmodule.importSync(\"meteor/tmeasday:publish-counts\", {\n  Counts: function (v) {\n    Counts = v;\n  }\n}, 6);\nvar ReactMeteorData = void 0;\nmodule.importSync(\"meteor/react-meteor-data\", {\n  ReactMeteorData: function (v) {\n    ReactMeteorData = v;\n  }\n}, 7);\n/* eslint react/prop-types:0, react/jsx-sort-props:0, react/forbid-prop-types: 0, \"react/prefer-es6-class\": [1, \"never\"] */var MeteorGriddle = React.createClass({\n  displayName: \"MeteorGriddle\",\n  propTypes: {\n    collection: React.PropTypes.object,\n    // the collection to display\n    filteredFields: React.PropTypes.array,\n    // an array of fields to search through when filtering\n    matchingResultsCount: React.PropTypes.string,\n    // the name of the matching results counter\n    publication: React.PropTypes.string,\n    // the publication that will provide the data\n    subsManager: React.PropTypes.object,\n    // subsManager sub\n    transform: React.PropTypes.func // external function to filter result source\n\n  },\n  mixins: [ReactMeteorData],\n  getDefaultProps: function () {\n    return {\n      useExternal: false,\n      externalFilterDebounceWait: 300,\n      externalResultsPerPage: 10,\n      query: {}\n    };\n  },\n  getInitialState: function () {\n    return {\n      currentPage: 0,\n      maxPages: 0,\n      externalResultsPerPage: this.props.externalResultsPerPage,\n      externalSortColumn: this.props.externalSortColumn,\n      externalSortAscending: this.props.externalSortAscending,\n      query: {}\n    };\n  },\n  componentWillMount: function () {\n    var _this = this;\n\n    this.applyQuery = _debounce(function (query) {\n      _this.setState({\n        query: query\n      });\n    }, this.props.externalFilterDebounceWait);\n  },\n  getMeteorData: function () {\n    // Get a count of the number of items matching the current filter. If no filter is set it will return the total number\n    // of items in the collection.\n    var matchingResults = Counts.get(this.props.matchingResultsCount);\n    var options = {};\n    var skip = void 0;\n\n    if (this.props.useExternal) {\n      var _options$sort;\n\n      options.limit = this.state.externalResultsPerPage;\n\n      if (!_isEmpty(this.state.query) && !!matchingResults) {\n        // if necessary, limit the cursor to number of matching results to avoid displaying results from other publications\n        options.limit = _min([options.limit, matchingResults]);\n      }\n\n      options.sort = (_options$sort = {}, _options$sort[this.state.externalSortColumn] = this.state.externalSortAscending ? 1 : -1, _options$sort);\n      skip = this.state.currentPage * this.state.externalResultsPerPage;\n    }\n\n    var pubHandle = void 0;\n\n    if (this.props.subsManager) {\n      pubHandle = this.props.subsManager.subscribe(this.props.publication, this.state.query, _extend({\n        skip: skip\n      }, options));\n    } else {\n      pubHandle = Meteor.subscribe(this.props.publication, this.state.query, _extend({\n        skip: skip\n      }, options));\n    } // optional transform of collection for grid results\n\n\n    var results = this.props.collection.find(this.state.query, options).fetch();\n\n    if (this.props.transform) {\n      results = this.props.transform(results);\n    }\n\n    return {\n      loading: !pubHandle.ready(),\n      results: results,\n      matchingResults: matchingResults\n    };\n  },\n  resetQuery: function () {\n    this.setState({\n      query: {}\n    });\n  },\n  // what page is currently viewed\n  setPage: function (index) {\n    this.setState({\n      currentPage: index\n    });\n  },\n  // this changes whether data is sorted in ascending or descending order\n  changeSort: function (sort, sortAscending) {\n    this.setState({\n      externalSortColumn: sort,\n      externalSortAscending: sortAscending\n    });\n  },\n  setFilter: function (filter) {\n    if (filter) {\n      var filteredFields = this.props.filteredFields || this.props.columns;\n      var orArray = filteredFields.map(function (field) {\n        var filterItem = {};\n        filterItem[field] = {\n          $regex: filter,\n          $options: \"i\"\n        };\n        return filterItem;\n      });\n      this.applyQuery({\n        $or: orArray\n      });\n    } else {\n      this.resetQuery();\n    }\n  },\n  // this method handles determining the page size\n  setPageSize: function (size) {\n    this.setState({\n      externalResultsPerPage: size\n    });\n  },\n  render: function () {\n    // figure out how many pages we have based on the number of total results matching the cursor\n    var maxPages = Math.ceil(this.data.matchingResults / this.state.externalResultsPerPage); // The Griddle externalIsLoading property is managed internally to line up with the subscription ready state, so we're\n    // removing this property if it's passed in.\n\n    var allProps = this.props;\n    delete allProps.externalIsLoading;\n    return React.createElement(Griddle, (0, _extends3.default)({}, allProps, {\n      tableClassName: \"table\",\n      results: this.data.results,\n      columnMetadata: this.props.columnMetadata,\n      externalSetPage: this.setPage,\n      externalChangeSort: this.changeSort,\n      externalSetFilter: this.setFilter,\n      externalSetPageSize: this.setPageSize,\n      externalMaxPage: maxPages,\n      externalCurrentPage: this.state.currentPage,\n      resultsPerPage: this.state.externalResultsPerPage,\n      externalSortColumn: this.state.externalSortColumn,\n      externalSortAscending: this.state.externalSortAscending,\n      externalIsLoading: this.data.loading\n    }));\n  }\n});\nmodule.export(\"default\", exports.default = MeteorGriddle);","map":{"version":3,"sources":["/imports/plugins/core/ui-grid/client/griddle.js"],"names":["React","Griddle","Counts","ReactMeteorData","MeteorGriddle","createClass","propTypes","collection","PropTypes","object","filteredFields","array","matchingResultsCount","string","publication","subsManager","transform","func","mixins","getDefaultProps","useExternal","externalFilterDebounceWait","externalResultsPerPage","query","getInitialState","currentPage","maxPages","props","externalSortColumn","externalSortAscending","componentWillMount","applyQuery","setState","getMeteorData","matchingResults","get","options","skip","limit","state","sort","pubHandle","subscribe","Meteor","results","find","fetch","loading","ready","resetQuery","setPage","index","changeSort","sortAscending","setFilter","filter","columns","orArray","map","field","filterItem","$regex","$options","$or","setPageSize","size","render","Math","ceil","data","allProps","externalIsLoading","columnMetadata"],"mappings":"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","file":"/imports/plugins/core/ui-grid/client/griddle.js.map","sourcesContent":["/*\nForked from https://github.com/meteor-utilities/Meteor-Griddle\n */\nimport React from \"react\";\nimport _ from \"lodash\";\nimport Griddle from \"griddle-react\";\nimport { Counts } from \"meteor/tmeasday:publish-counts\";\nimport { ReactMeteorData } from \"meteor/react-meteor-data\";\n\n/* eslint react/prop-types:0, react/jsx-sort-props:0, react/forbid-prop-types: 0, \"react/prefer-es6-class\": [1, \"never\"] */\n\nconst MeteorGriddle = React.createClass({\n  propTypes: {\n    collection: React.PropTypes.object, // the collection to display\n    filteredFields: React.PropTypes.array, // an array of fields to search through when filtering\n    matchingResultsCount: React.PropTypes.string, // the name of the matching results counter\n    publication: React.PropTypes.string, // the publication that will provide the data\n    subsManager: React.PropTypes.object, // subsManager sub\n    transform: React.PropTypes.func // external function to filter result source\n  },\n  mixins: [ReactMeteorData],\n\n  getDefaultProps() {\n    return { useExternal: false, externalFilterDebounceWait: 300, externalResultsPerPage: 10, query: {} };\n  },\n\n  getInitialState() {\n    return {\n      currentPage: 0,\n      maxPages: 0,\n      externalResultsPerPage: this.props.externalResultsPerPage,\n      externalSortColumn: this.props.externalSortColumn,\n      externalSortAscending: this.props.externalSortAscending,\n      query: {}\n    };\n  },\n\n  componentWillMount() {\n    this.applyQuery = _.debounce((query) => {\n      this.setState({ query });\n    }, this.props.externalFilterDebounceWait);\n  },\n\n  getMeteorData() {\n    // Get a count of the number of items matching the current filter. If no filter is set it will return the total number\n    // of items in the collection.\n    const matchingResults = Counts.get(this.props.matchingResultsCount);\n\n    const options = {};\n    let skip;\n    if (this.props.useExternal) {\n      options.limit = this.state.externalResultsPerPage;\n      if (!_.isEmpty(this.state.query) && !!matchingResults) {\n        // if necessary, limit the cursor to number of matching results to avoid displaying results from other publications\n        options.limit = _.min([options.limit, matchingResults]);\n      }\n      options.sort = {\n        [this.state.externalSortColumn]: (this.state.externalSortAscending\n          ? 1\n          : -1)\n      };\n      skip = this.state.currentPage * this.state.externalResultsPerPage;\n    }\n\n    let pubHandle;\n\n    if (this.props.subsManager) {\n      pubHandle = this.props.subsManager.subscribe(this.props.publication, this.state.query, _.extend({\n        skip: skip\n      }, options));\n    } else {\n      pubHandle = Meteor.subscribe(this.props.publication, this.state.query, _.extend({\n        skip: skip\n      }, options));\n    }\n\n    // optional transform of collection for grid results\n    let results = this.props.collection.find(this.state.query, options).fetch();\n    if (this.props.transform) {\n      results = this.props.transform(results);\n    }\n\n    return {\n      loading: !pubHandle.ready(),\n      results: results,\n      matchingResults: matchingResults\n    };\n  },\n\n  resetQuery() {\n    this.setState({ query: {} });\n  },\n\n  // what page is currently viewed\n  setPage(index) {\n    this.setState({ currentPage: index });\n  },\n\n  // this changes whether data is sorted in ascending or descending order\n  changeSort(sort, sortAscending) {\n    this.setState({ externalSortColumn: sort, externalSortAscending: sortAscending });\n  },\n\n  setFilter(filter) {\n    if (filter) {\n      const filteredFields = this.props.filteredFields || this.props.columns;\n      const orArray = filteredFields.map((field) => {\n        const filterItem = {};\n        filterItem[field] = {\n          $regex: filter,\n          $options: \"i\"\n        };\n        return filterItem;\n      });\n      this.applyQuery({ $or: orArray });\n    } else {\n      this.resetQuery();\n    }\n  },\n\n  // this method handles determining the page size\n  setPageSize(size) {\n    this.setState({ externalResultsPerPage: size });\n  },\n\n  render() {\n    // figure out how many pages we have based on the number of total results matching the cursor\n    const maxPages = Math.ceil(this.data.matchingResults / this.state.externalResultsPerPage);\n\n    // The Griddle externalIsLoading property is managed internally to line up with the subscription ready state, so we're\n    // removing this property if it's passed in.\n    const allProps = this.props;\n    delete allProps.externalIsLoading;\n\n    return (<Griddle\n      {...allProps}\n      tableClassName=\"table\"\n      results={this.data.results}\n      columnMetadata={this.props.columnMetadata}\n      externalSetPage={this.setPage}\n      externalChangeSort={this.changeSort}\n      externalSetFilter={this.setFilter}\n      externalSetPageSize={this.setPageSize}\n      externalMaxPage={maxPages}\n      externalCurrentPage={this.state.currentPage}\n      resultsPerPage={this.state.externalResultsPerPage}\n      externalSortColumn={this.state.externalSortColumn}\n      externalSortAscending={this.state.externalSortAscending}\n      externalIsLoading={this.data.loading}\n            />);\n  }\n});\n\nexport default MeteorGriddle;\n"]},"hash":"bf6dfce84c6aceca343d656da4efe9cfdc41c341"}
