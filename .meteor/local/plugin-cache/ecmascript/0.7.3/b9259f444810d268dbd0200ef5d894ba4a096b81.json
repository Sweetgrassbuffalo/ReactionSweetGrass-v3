{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"sortablejs","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Sortable"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/reactive-dict","imported":["ReactiveDict"],"specifiers":[{"kind":"named","imported":"ReactiveDict","local":"ReactiveDict"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/imports/plugins/core/ui-tagnav/client/helpers","imported":["TagHelpers"],"specifiers":[{"kind":"named","imported":"TagHelpers","local":"TagHelpers"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["IconButton","Overlay"],"specifiers":[{"kind":"named","imported":"IconButton","local":"IconButton"},{"kind":"named","imported":"Overlay","local":"Overlay"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui-tagnav/client/components/tagNav/tagNav.js","filenameRelative":"/imports/plugins/core/ui-tagnav/client/components/tagNav/tagNav.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui-tagnav/client/components/tagNav/tagNav.js"],"names":["Sortable","Template","ReactiveDict","Reaction","TagHelpers","IconButton","Overlay","NavbarStates","Orientation","Position","Anchor","Visible","NavbarOrientation","Vertical","Horizontal","NavbarVisibility","Shown","Hidden","NavbarPosition","Static","Fixed","NavbarAnchor","Top","Right","Bottom","Left","None","TagNavHelpers","onTagCreate","tagName","parentTag","createTag","undefined","onTagRemove","tag","removeTag","onTagSort","tagIds","sortTags","onTagDragAdd","movedTagId","toListId","toIndex","ofList","moveTagToNewParent","onTagUpdate","tagId","updateTag","isMobile","window","matchMedia","matches","tagById","tags","_","find","_id","hasSubTags","foundTag","isArray","relatedTagIds","length","tagNav","onCreated","state","setDefault","attachedBodyListener","isEditing","selectedTag","moveItem","array","fromIndex","splice","toggleNavbarVisibility","isVisible","get","set","closeNavbar","data","onToggleMenu","name","document","body","addEventListener","attachBodyListener","closeDropdown","detachhBodyListener","removeEventListener","event","$","target","closest","closeDropdownTimeout","setTimeout","clearTimeout","Visibility","onWindowResize","onRendered","instance","list","on","trigger","_sortable","create","group","handle","onSort","map","item","newTagsOrder","oldIndex","newIndex","onAdd","to","dataset","id","onRemove","onDestroyed","helpers","EditButton","equals","component","bezelStyle","primary","icon","onIcon","toggle","toggleOn","onClick","OverlayComponent","navbarOrientation","navbarPosition","navbarAnchor","navbarVisibility","navbarSelectedClassName","hasDropdownClassName","canEdit","editable","isPreview","handleMenuClose","tagTreeProps","subTagGroups","subTags","tagProps","isSelected","selectable","className","onTagSelect","JSON","stringify","blankTagProps","blank","events","preventDefault","currentTarget"],"mappings":"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","file":"/imports/plugins/core/ui-tagnav/client/components/tagNav/tagNav.js.map","sourcesContent":["import Sortable from \"sortablejs\";\nimport { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { Reaction } from \"/client/api\";\nimport { TagHelpers } from \"/imports/plugins/core/ui-tagnav/client/helpers\";\nimport { IconButton, Overlay } from \"/imports/plugins/core/ui/client/components\";\n\nconst NavbarStates = {\n  Orientation: \"stateNavbarOrientation\",\n  Position: \"stateNavbarPosition\",\n  Anchor: \"stateNavbarAnchor\",\n  Visible: \"stateNavbarVisible\"\n};\n\nconst NavbarOrientation = {\n  Vertical: \"vertical\",\n  Horizontal: \"horizontal\"\n};\n\nconst NavbarVisibility = {\n  Shown: \"shown\",\n  Hidden: \"hidden\"\n};\n\nconst NavbarPosition = {\n  Static: \"static\",\n  Fixed: \"fixed\"\n};\n\nconst NavbarAnchor = {\n  Top: \"top\",\n  Right: \"right\",\n  Bottom: \"bottom\",\n  Left: \"left\",\n  None: \"inline\"\n};\n\nconst TagNavHelpers = {\n  onTagCreate(tagName, parentTag) {\n    TagHelpers.createTag(tagName, undefined, parentTag);\n  },\n  onTagRemove(tag, parentTag) {\n    TagHelpers.removeTag(tag, parentTag);\n  },\n  onTagSort(tagIds, parentTag) {\n    TagHelpers.sortTags(tagIds, parentTag);\n  },\n  onTagDragAdd(movedTagId, toListId, toIndex, ofList) {\n    TagHelpers.moveTagToNewParent(movedTagId, toListId, toIndex, ofList);\n  },\n  onTagUpdate(tagId, tagName) {\n    TagHelpers.updateTag(tagId, tagName);\n  },\n  isMobile() {\n    return window.matchMedia(\"(max-width: 991px)\").matches;\n  },\n  tagById(tagId, tags) {\n    return _.find(tags, (tag) => tag._id === tagId);\n  },\n  hasSubTags(tagId, tags) {\n    const foundTag = this.tagById(tagId, tags);\n\n    if (foundTag) {\n      if (_.isArray(foundTag.relatedTagIds) && foundTag.relatedTagIds.length) {\n        return true;\n      }\n    }\n    return false;\n  }\n};\n\nTemplate.tagNav.onCreated(function () {\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    attachedBodyListener: false,\n    isEditing: false,\n    selectedTag: null,\n    [NavbarStates.Visible]: false\n  });\n\n  this.moveItem = (array, fromIndex, toIndex) => {\n    array.splice(toIndex, 0, array.splice(fromIndex, 1)[0]);\n    return array;\n  };\n\n  this.toggleNavbarVisibility = () => {\n    const isVisible = this.state.get(NavbarStates.Visible);\n    this.state.set(NavbarStates.Visible, !isVisible);\n  };\n\n  this.closeNavbar = () => {\n    this.state.set(NavbarStates.Visible, false);\n  };\n\n  this.data.onToggleMenu(this.toggleNavbarVisibility);\n\n  if (this.data.name) {\n    document.body.addEventListener(`${this.data.name}_toggleMenuVisibility`, this.toggleNavbarVisibility);\n  }\n\n  this.attachBodyListener = () => {\n    document.body.addEventListener(\"mouseover\", this.closeDropdown);\n    this.state.set(\"attachedBodyListener\", true);\n  };\n\n  this.detachhBodyListener = () => {\n    document.body.removeEventListener(\"mouseover\", this.closeDropdown);\n    this.state.set(\"attachedBodyListener\", false);\n  };\n\n  this.closeDropdown = (event) => {\n    if ($(event.target).closest(\".navbar-item\").length === 0) {\n      this.closeDropdownTimeout = setTimeout(() => {\n        this.state.set(\"selectedTag\", null);\n        this.detachhBodyListener();\n      }, 500);\n    } else {\n      if (this.closeDropdownTimeout) {\n        clearTimeout(this.closeDropdownTimeout);\n      }\n    }\n  };\n\n  this.state.set(NavbarStates.Visibility, NavbarVisibility.Hidden);\n\n\n  this.onWindowResize = () => {\n    if (window.matchMedia(\"(max-width: 991px)\").matches) {\n      this.state.set(NavbarStates.Orientation, NavbarOrientation.Vertical);\n      this.state.set(NavbarStates.Position, NavbarPosition.Fixed);\n      this.state.set(NavbarStates.Anchor, NavbarAnchor.Left);\n    } else {\n      this.state.set(NavbarStates.Orientation, NavbarOrientation.Horizontal);\n      this.state.set(NavbarStates.Position, NavbarPosition.Static);\n      this.state.set(NavbarStates.Anchor, NavbarAnchor.None);\n      this.state.set(NavbarStates.Visible, false);\n    }\n  };\n});\n\nTemplate.tagNav.onRendered(() => {\n  const instance = Template.instance();\n  const list = instance.$(\".navbar-items\")[0];\n\n  $(window).on(\"resize\", instance.onWindowResize).trigger(\"resize\");\n\n  instance._sortable = Sortable.create(list, {\n    group: \"tags\",\n    handle: \".js-tagNav-item\",\n    onSort(event) {\n      const tagIds = instance.data.tags.map(item => {\n        if (item) {\n          return item._id;\n        }\n        return null;\n      });\n\n      const newTagsOrder = instance.moveItem(tagIds, event.oldIndex, event.newIndex);\n\n      if (newTagsOrder) {\n        TagNavHelpers.onTagSort(newTagsOrder, instance.data.parentTag);\n      }\n    },\n\n    // On add from another list\n    onAdd(event) {\n      const toListId = event.to.dataset.id;\n      const movedTagId = event.item.dataset.id;\n      const tagIds = instance.data.tags.map(item => {\n        if (item) {\n          return item._id;\n        }\n        return null;\n      });\n\n      TagNavHelpers.onTagDragAdd(movedTagId, toListId, event.newIndex, tagIds);\n    },\n\n    // Tag removed from list becuase it was dragged to a different list\n    onRemove(event) {\n      const movedTagId = event.item.dataset.id;\n      const foundTag = _.find(instance.data.tags, (tag) => {\n        return tag._id === movedTagId;\n      });\n\n      TagNavHelpers.onTagRemove(foundTag, instance.data.parentTag);\n    }\n  });\n});\n\nTemplate.tagNav.onDestroyed(function () {\n  // $(window).off(\"resize\", this.onWindowResize);\n});\n\n\nTemplate.tagNav.helpers({\n  EditButton() {\n    const instance = Template.instance();\n    const state = instance.state;\n    const isEditing = state.equals(\"isEditing\", true);\n\n    return {\n      component: IconButton,\n      bezelStyle: \"solid\",\n      primary: true,\n      icon: \"fa fa-pencil\",\n      onIcon: \"fa fa-check\",\n      toggle: true,\n      toggleOn: isEditing,\n      onClick() {\n        state.set(\"isEditing\", !isEditing);\n      }\n    };\n  },\n\n  OverlayComponent() {\n    const instance = Template.instance();\n    const isVisible = instance.state.get(NavbarStates.Visible);\n\n    return {\n      component: Overlay,\n      isVisible,\n      onClick() {\n        instance.closeNavbar();\n      }\n    };\n  },\n\n  navbarOrientation() {\n    return Template.instance().state.get(NavbarStates.Orientation);\n  },\n\n  navbarPosition() {\n    return Template.instance().state.get(NavbarStates.Position);\n  },\n\n  navbarAnchor() {\n    return Template.instance().state.get(NavbarStates.Anchor);\n  },\n\n  navbarVisibility() {\n    const isVisible = Template.instance().state.equals(NavbarStates.Visible, true);\n\n    if (isVisible) {\n      return \"open\";\n    }\n    return \"closed\";\n  },\n\n  navbarSelectedClassName(tag) {\n    const selectedTag = Template.instance().state.get(\"selectedTag\");\n\n    if (selectedTag) {\n      if (selectedTag._id === tag._id) {\n        return \"selected\";\n      }\n    }\n    return \"\";\n  },\n\n  hasDropdownClassName(tag) {\n    if (_.isArray(tag.relatedTagIds)) {\n      return \"has-dropdown\";\n    }\n    return null;\n  },\n\n  isEditing() {\n    return Template.instance().state.equals(\"isEditing\", true);\n  },\n\n  canEdit() {\n    return Template.instance().data.editable && Reaction.isPreview() === false;\n  },\n\n  handleMenuClose() {\n    const instance = Template.instance();\n\n    return () => {\n      instance.toggleNavbarVisibility();\n    };\n  },\n\n  tagTreeProps(parentTag) {\n    const instance = Template.instance();\n\n    return {\n      parentTag,\n      subTagGroups: TagHelpers.subTags(parentTag),\n      isEditing: instance.state.equals(\"isEditing\", true),\n      ...TagNavHelpers\n    };\n  },\n  tagProps(tag) {\n    const instance = Template.instance();\n    let isSelected = false;\n    if (instance.data.selectedTag && tag) {\n      isSelected = instance.data.selectedTag._id === tag._id;\n    }\n\n    return {\n      tag,\n      isEditing: instance.state.equals(\"isEditing\", true),\n      selectable: true,\n      isSelected,\n      className: \"js-tagNav-item\",\n      onTagSelect(selectedTag) {\n        if (JSON.stringify(selectedTag) === JSON.stringify(instance.state.get(\"selectedTag\"))) {\n          instance.state.set(\"selectedTag\", null);\n        } else {\n          instance.state.set(\"selectedTag\", selectedTag);\n        }\n      },\n      ...TagNavHelpers\n    };\n  },\n  blankTagProps() {\n    const instance = Template.instance();\n\n    return {\n      isEditing: instance.state.equals(\"isEditing\", true),\n      blank: true,\n      onTagCreate: TagNavHelpers.onTagCreate\n    };\n  }\n});\n\n\nTemplate.tagNav.events({\n  \"click .navbar-item .rui.tag.link\"(event, instance) {\n    if (TagNavHelpers.isMobile()) {\n      const tagId = event.target.dataset.id;\n      const tags = instance.data.tags;\n      const selectedTag = instance.state.get(\"selectedTag\");\n      const hasSubTags = TagNavHelpers.hasSubTags(tagId, tags);\n\n      if (hasSubTags === false) {\n        // click close button to make navbar left disappear\n        instance.closeNavbar();\n      } else {\n        event.preventDefault();\n      }\n\n      if (selectedTag && selectedTag._id === tagId) {\n        instance.state.set(\"selectedTag\", null);\n      } else if (hasSubTags) {\n        instance.state.set(\"selectedTag\", TagNavHelpers.tagById(tagId, tags));\n      }\n    }\n  },\n\n  \"click [data-event-action=close-tagnav-overlay]\"(event, instance) {\n    instance.closeNavbar();\n  },\n\n  \"mouseover .navbar-item, focus .navbar-item\"(event, instance) {\n    const tagId = event.currentTarget.dataset.id;\n    const tags = instance.data.tags;\n\n    if (TagNavHelpers.isMobile()) {\n      return;\n    }\n\n    // While in edit mode, don't trigger the hover hide/show menu\n    if (instance.state.equals(\"isEditing\", false)) {\n      // User mode\n      // Don't show dropdown if there are no subtags\n      if (TagNavHelpers.hasSubTags(tagId, tags) === false) {\n        instance.state.set(\"selectedTag\", null);\n        return;\n      }\n\n      // Otherwise, show the menu\n      // And Attach an event listener to the document body\n      // This will check to see if the dropdown should be closed if the user\n      // leaves the tag nav bar\n      instance.attachBodyListener();\n      instance.state.set(\"selectedTag\", TagNavHelpers.tagById(tagId, tags));\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui-tagnav/client/components/tagNav/tagNav.js.map","sourceFileName":"/imports/plugins/core/ui-tagnav/client/components/tagNav/tagNav.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"tagNav"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Sortable = void 0;\nmodule.importSync(\"sortablejs\", {\n  \"default\": function (v) {\n    Sortable = v;\n  }\n}, 0);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 1);\nvar ReactiveDict = void 0;\nmodule.importSync(\"meteor/reactive-dict\", {\n  ReactiveDict: function (v) {\n    ReactiveDict = v;\n  }\n}, 2);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 3);\nvar TagHelpers = void 0;\nmodule.importSync(\"/imports/plugins/core/ui-tagnav/client/helpers\", {\n  TagHelpers: function (v) {\n    TagHelpers = v;\n  }\n}, 4);\nvar IconButton = void 0,\n    Overlay = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  IconButton: function (v) {\n    IconButton = v;\n  },\n  Overlay: function (v) {\n    Overlay = v;\n  }\n}, 5);\nvar NavbarStates = {\n  Orientation: \"stateNavbarOrientation\",\n  Position: \"stateNavbarPosition\",\n  Anchor: \"stateNavbarAnchor\",\n  Visible: \"stateNavbarVisible\"\n};\nvar NavbarOrientation = {\n  Vertical: \"vertical\",\n  Horizontal: \"horizontal\"\n};\nvar NavbarVisibility = {\n  Shown: \"shown\",\n  Hidden: \"hidden\"\n};\nvar NavbarPosition = {\n  Static: \"static\",\n  Fixed: \"fixed\"\n};\nvar NavbarAnchor = {\n  Top: \"top\",\n  Right: \"right\",\n  Bottom: \"bottom\",\n  Left: \"left\",\n  None: \"inline\"\n};\nvar TagNavHelpers = {\n  onTagCreate: function (tagName, parentTag) {\n    TagHelpers.createTag(tagName, undefined, parentTag);\n  },\n  onTagRemove: function (tag, parentTag) {\n    TagHelpers.removeTag(tag, parentTag);\n  },\n  onTagSort: function (tagIds, parentTag) {\n    TagHelpers.sortTags(tagIds, parentTag);\n  },\n  onTagDragAdd: function (movedTagId, toListId, toIndex, ofList) {\n    TagHelpers.moveTagToNewParent(movedTagId, toListId, toIndex, ofList);\n  },\n  onTagUpdate: function (tagId, tagName) {\n    TagHelpers.updateTag(tagId, tagName);\n  },\n  isMobile: function () {\n    return window.matchMedia(\"(max-width: 991px)\").matches;\n  },\n  tagById: function (tagId, tags) {\n    return _.find(tags, function (tag) {\n      return tag._id === tagId;\n    });\n  },\n  hasSubTags: function (tagId, tags) {\n    var foundTag = this.tagById(tagId, tags);\n\n    if (foundTag) {\n      if (_.isArray(foundTag.relatedTagIds) && foundTag.relatedTagIds.length) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n};\nTemplate.tagNav.onCreated(function () {\n  var _state$setDefault,\n      _this = this;\n\n  this.state = new ReactiveDict();\n  this.state.setDefault((_state$setDefault = {\n    attachedBodyListener: false,\n    isEditing: false,\n    selectedTag: null\n  }, _state$setDefault[NavbarStates.Visible] = false, _state$setDefault));\n\n  this.moveItem = function (array, fromIndex, toIndex) {\n    array.splice(toIndex, 0, array.splice(fromIndex, 1)[0]);\n    return array;\n  };\n\n  this.toggleNavbarVisibility = function () {\n    var isVisible = _this.state.get(NavbarStates.Visible);\n\n    _this.state.set(NavbarStates.Visible, !isVisible);\n  };\n\n  this.closeNavbar = function () {\n    _this.state.set(NavbarStates.Visible, false);\n  };\n\n  this.data.onToggleMenu(this.toggleNavbarVisibility);\n\n  if (this.data.name) {\n    document.body.addEventListener(this.data.name + \"_toggleMenuVisibility\", this.toggleNavbarVisibility);\n  }\n\n  this.attachBodyListener = function () {\n    document.body.addEventListener(\"mouseover\", _this.closeDropdown);\n\n    _this.state.set(\"attachedBodyListener\", true);\n  };\n\n  this.detachhBodyListener = function () {\n    document.body.removeEventListener(\"mouseover\", _this.closeDropdown);\n\n    _this.state.set(\"attachedBodyListener\", false);\n  };\n\n  this.closeDropdown = function (event) {\n    if ($(event.target).closest(\".navbar-item\").length === 0) {\n      _this.closeDropdownTimeout = setTimeout(function () {\n        _this.state.set(\"selectedTag\", null);\n\n        _this.detachhBodyListener();\n      }, 500);\n    } else {\n      if (_this.closeDropdownTimeout) {\n        clearTimeout(_this.closeDropdownTimeout);\n      }\n    }\n  };\n\n  this.state.set(NavbarStates.Visibility, NavbarVisibility.Hidden);\n\n  this.onWindowResize = function () {\n    if (window.matchMedia(\"(max-width: 991px)\").matches) {\n      _this.state.set(NavbarStates.Orientation, NavbarOrientation.Vertical);\n\n      _this.state.set(NavbarStates.Position, NavbarPosition.Fixed);\n\n      _this.state.set(NavbarStates.Anchor, NavbarAnchor.Left);\n    } else {\n      _this.state.set(NavbarStates.Orientation, NavbarOrientation.Horizontal);\n\n      _this.state.set(NavbarStates.Position, NavbarPosition.Static);\n\n      _this.state.set(NavbarStates.Anchor, NavbarAnchor.None);\n\n      _this.state.set(NavbarStates.Visible, false);\n    }\n  };\n});\nTemplate.tagNav.onRendered(function () {\n  var instance = Template.instance();\n  var list = instance.$(\".navbar-items\")[0];\n  $(window).on(\"resize\", instance.onWindowResize).trigger(\"resize\");\n  instance._sortable = Sortable.create(list, {\n    group: \"tags\",\n    handle: \".js-tagNav-item\",\n    onSort: function (event) {\n      var tagIds = instance.data.tags.map(function (item) {\n        if (item) {\n          return item._id;\n        }\n\n        return null;\n      });\n      var newTagsOrder = instance.moveItem(tagIds, event.oldIndex, event.newIndex);\n\n      if (newTagsOrder) {\n        TagNavHelpers.onTagSort(newTagsOrder, instance.data.parentTag);\n      }\n    },\n    // On add from another list\n    onAdd: function (event) {\n      var toListId = event.to.dataset.id;\n      var movedTagId = event.item.dataset.id;\n      var tagIds = instance.data.tags.map(function (item) {\n        if (item) {\n          return item._id;\n        }\n\n        return null;\n      });\n      TagNavHelpers.onTagDragAdd(movedTagId, toListId, event.newIndex, tagIds);\n    },\n    // Tag removed from list becuase it was dragged to a different list\n    onRemove: function (event) {\n      var movedTagId = event.item.dataset.id;\n\n      var foundTag = _.find(instance.data.tags, function (tag) {\n        return tag._id === movedTagId;\n      });\n\n      TagNavHelpers.onTagRemove(foundTag, instance.data.parentTag);\n    }\n  });\n});\nTemplate.tagNav.onDestroyed(function () {// $(window).off(\"resize\", this.onWindowResize);\n});\nTemplate.tagNav.helpers({\n  EditButton: function () {\n    var instance = Template.instance();\n    var state = instance.state;\n    var isEditing = state.equals(\"isEditing\", true);\n    return {\n      component: IconButton,\n      bezelStyle: \"solid\",\n      primary: true,\n      icon: \"fa fa-pencil\",\n      onIcon: \"fa fa-check\",\n      toggle: true,\n      toggleOn: isEditing,\n      onClick: function () {\n        state.set(\"isEditing\", !isEditing);\n      }\n    };\n  },\n  OverlayComponent: function () {\n    var instance = Template.instance();\n    var isVisible = instance.state.get(NavbarStates.Visible);\n    return {\n      component: Overlay,\n      isVisible: isVisible,\n      onClick: function () {\n        instance.closeNavbar();\n      }\n    };\n  },\n  navbarOrientation: function () {\n    return Template.instance().state.get(NavbarStates.Orientation);\n  },\n  navbarPosition: function () {\n    return Template.instance().state.get(NavbarStates.Position);\n  },\n  navbarAnchor: function () {\n    return Template.instance().state.get(NavbarStates.Anchor);\n  },\n  navbarVisibility: function () {\n    var isVisible = Template.instance().state.equals(NavbarStates.Visible, true);\n\n    if (isVisible) {\n      return \"open\";\n    }\n\n    return \"closed\";\n  },\n  navbarSelectedClassName: function (tag) {\n    var selectedTag = Template.instance().state.get(\"selectedTag\");\n\n    if (selectedTag) {\n      if (selectedTag._id === tag._id) {\n        return \"selected\";\n      }\n    }\n\n    return \"\";\n  },\n  hasDropdownClassName: function (tag) {\n    if (_.isArray(tag.relatedTagIds)) {\n      return \"has-dropdown\";\n    }\n\n    return null;\n  },\n  isEditing: function () {\n    return Template.instance().state.equals(\"isEditing\", true);\n  },\n  canEdit: function () {\n    return Template.instance().data.editable && Reaction.isPreview() === false;\n  },\n  handleMenuClose: function () {\n    var instance = Template.instance();\n    return function () {\n      instance.toggleNavbarVisibility();\n    };\n  },\n  tagTreeProps: function (parentTag) {\n    var instance = Template.instance();\n    return (0, _extends3.default)({\n      parentTag: parentTag,\n      subTagGroups: TagHelpers.subTags(parentTag),\n      isEditing: instance.state.equals(\"isEditing\", true)\n    }, TagNavHelpers);\n  },\n  tagProps: function (tag) {\n    var instance = Template.instance();\n    var isSelected = false;\n\n    if (instance.data.selectedTag && tag) {\n      isSelected = instance.data.selectedTag._id === tag._id;\n    }\n\n    return (0, _extends3.default)({\n      tag: tag,\n      isEditing: instance.state.equals(\"isEditing\", true),\n      selectable: true,\n      isSelected: isSelected,\n      className: \"js-tagNav-item\",\n      onTagSelect: function (selectedTag) {\n        if (JSON.stringify(selectedTag) === JSON.stringify(instance.state.get(\"selectedTag\"))) {\n          instance.state.set(\"selectedTag\", null);\n        } else {\n          instance.state.set(\"selectedTag\", selectedTag);\n        }\n      }\n    }, TagNavHelpers);\n  },\n  blankTagProps: function () {\n    var instance = Template.instance();\n    return {\n      isEditing: instance.state.equals(\"isEditing\", true),\n      blank: true,\n      onTagCreate: TagNavHelpers.onTagCreate\n    };\n  }\n});\nTemplate.tagNav.events({\n  \"click .navbar-item .rui.tag.link\": function (event, instance) {\n    if (TagNavHelpers.isMobile()) {\n      var tagId = event.target.dataset.id;\n      var tags = instance.data.tags;\n      var selectedTag = instance.state.get(\"selectedTag\");\n      var hasSubTags = TagNavHelpers.hasSubTags(tagId, tags);\n\n      if (hasSubTags === false) {\n        // click close button to make navbar left disappear\n        instance.closeNavbar();\n      } else {\n        event.preventDefault();\n      }\n\n      if (selectedTag && selectedTag._id === tagId) {\n        instance.state.set(\"selectedTag\", null);\n      } else if (hasSubTags) {\n        instance.state.set(\"selectedTag\", TagNavHelpers.tagById(tagId, tags));\n      }\n    }\n  },\n  \"click [data-event-action=close-tagnav-overlay]\": function (event, instance) {\n    instance.closeNavbar();\n  },\n  \"mouseover .navbar-item, focus .navbar-item\": function (event, instance) {\n    var tagId = event.currentTarget.dataset.id;\n    var tags = instance.data.tags;\n\n    if (TagNavHelpers.isMobile()) {\n      return;\n    } // While in edit mode, don't trigger the hover hide/show menu\n\n\n    if (instance.state.equals(\"isEditing\", false)) {\n      // User mode\n      // Don't show dropdown if there are no subtags\n      if (TagNavHelpers.hasSubTags(tagId, tags) === false) {\n        instance.state.set(\"selectedTag\", null);\n        return;\n      } // Otherwise, show the menu\n      // And Attach an event listener to the document body\n      // This will check to see if the dropdown should be closed if the user\n      // leaves the tag nav bar\n\n\n      instance.attachBodyListener();\n      instance.state.set(\"selectedTag\", TagNavHelpers.tagById(tagId, tags));\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/ui-tagnav/client/components/tagNav/tagNav.js"],"names":["Sortable","Template","ReactiveDict","Reaction","TagHelpers","IconButton","Overlay","NavbarStates","Orientation","Position","Anchor","Visible","NavbarOrientation","Vertical","Horizontal","NavbarVisibility","Shown","Hidden","NavbarPosition","Static","Fixed","NavbarAnchor","Top","Right","Bottom","Left","None","TagNavHelpers","onTagCreate","tagName","parentTag","createTag","undefined","onTagRemove","tag","removeTag","onTagSort","tagIds","sortTags","onTagDragAdd","movedTagId","toListId","toIndex","ofList","moveTagToNewParent","onTagUpdate","tagId","updateTag","isMobile","window","matchMedia","matches","tagById","tags","_","find","_id","hasSubTags","foundTag","isArray","relatedTagIds","length","tagNav","onCreated","state","setDefault","attachedBodyListener","isEditing","selectedTag","moveItem","array","fromIndex","splice","toggleNavbarVisibility","isVisible","get","set","closeNavbar","data","onToggleMenu","name","document","body","addEventListener","attachBodyListener","closeDropdown","detachhBodyListener","removeEventListener","event","$","target","closest","closeDropdownTimeout","setTimeout","clearTimeout","Visibility","onWindowResize","onRendered","instance","list","on","trigger","_sortable","create","group","handle","onSort","map","item","newTagsOrder","oldIndex","newIndex","onAdd","to","dataset","id","onRemove","onDestroyed","helpers","EditButton","equals","component","bezelStyle","primary","icon","onIcon","toggle","toggleOn","onClick","OverlayComponent","navbarOrientation","navbarPosition","navbarAnchor","navbarVisibility","navbarSelectedClassName","hasDropdownClassName","canEdit","editable","isPreview","handleMenuClose","tagTreeProps","subTagGroups","subTags","tagProps","isSelected","selectable","className","onTagSelect","JSON","stringify","blankTagProps","blank","events","preventDefault","currentTarget"],"mappings":";;;;;;AAAA,IAAO;AAAP,OAAqB,WAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAgB,AACzB,AAAS,AAAoB,AAC7B,AAAS,AAAgB,AACzB,AAAS,AAAkB,AAC3B,AAAS,AAAY,AAAe,AAEpC,AAAM,AAAe;AACnB,IAAa;AACH,eAFS,AAGnB;AAAQ,YAHW,AAInB;UAJF,AAAqB,AAIV;WAGX,AAAM,AAAoB,AACxB,AAAU;AARS,AAEnB;AAOA,IAAY;YAGd;AAAM,cAAmB,AACvB,AAAO,AACP,AAAQ;AAPV,AAA0B;AAK1B,AAAyB;AAKnB,SAAiB,AACrB;UADF,AAAuB,AACb,AACR,AAAO;AAFT;AAKA,IAAM,AAAe;AACd,UADc,AAEnB;SAFmB,AAEZ,AACP,AAAQ,AACR,AAAM;AAHN;AAIA,IAAM;OAGR;AAAM,SAAgB,AACpB;UAAA,AAAY,AAAS,AAAW,AAC9B;QAAA,AAAW,AAAU,AAAS,AAAW,AAC1C;AAHmB,QAIpB,AAAY,AAAK,AAAW;AAZ9B,AAAqB;AAajB,IAAW;AALO;6CAOpB;AAAA,AAAU,AAAQ,AAAW,AAC3B;yBAAW,KAAX,AAAoB,WARF,AAQlB,AAA4B,AAC7B;;AACD;uBAAa,QAAb,AAAyB,WAAzB,AAAmC,AAAS,AAAQ,AAClD;eAAW,iBAAX,AAA8B,AAAY,AAAU,AAAS,AAC9D;AAZmB;iEAapB;AAAY,eAAZ,AAAmB,AAAS,kDAC1B;AAAA,AAAW,AAAU,AAAO,AAC7B;AAfmB;gCAgBpB;AAAW,AACT;AAAO,wBAjBW,AAiBlB,AAAO,AAAO,AAAW,AAAsB,AAChD;;AACD;qBAAA,AAAQ,OAAR,AAAe,MAAM,AACnB;aAAO,AAAE,KAAF,AAAO,gBAAM,AAAS;AAAR,aAAY,IAAJ,AAAY,QAAzC,AAAO,AACR;KADQ;AApBW;qCAsBpB;QAAA,AAAW,AAAO,WAAlB,KAAwB,eACtB,AAAM,AAAW,AAAK,AAAQ,AAAO;;kBAErC;AAAI,YAAJ,AAAc,kEACZ;AAAI,AAAE,eAAN,AAAI,AAAU,AAAS,AAAkB,AAAS,AAAc,AAAQ,AACtE;AAAA,AAAO,AACR;AACF;;;AACD,AAAO,AACR;AA1BC,AAAqB,AAAK,AAC3B;;AANH,AAAsB;;;mBAkCtB;OAAS,MAAT,AAAgB,AAAU,AAAY,AACpC;AAAA,AAAK,AAAQ,AAAI,0BAAjB,AAAa,AACb;AAAA,AAAK,AAAM,eAAX,AAAsB,AACpB;iBADoB,AACE,AACtB;uBAAW,aAFS,WAAA,AAGpB,AAAa,AACb,AAAC,AAAa,AAAU;;AAJ1B;wDAOA;AAAK,WAAL,AAAgB,AAAC,AAAO,AAAW,AAAY,AAC7C;AAAA,AAAM,AAAO,AAAS,AAAG,AAAM,AAAO,AAAW,AAAG,AACpD,AAAO,AACR;;AAHD;iDAKA;;AAAK,oBAAL,aAA8B,AAAM,UAClC;AAAA,AAAM,AAAY,AAAK,AAAM,AAAI,AAAa,AAC9C,AAAK,AAAM,AAAI,AAAa,AAAS,AAAC,AACvC;;AAHD;0CAKA;AAAA,AAAK,AAAc,AAAM,AACvB,AAAK,AAAM,AAAI,AAAa,AAAS,AACtC;;AAFD,8BAIA;;MAAK,KAAL,AAAU,WAAV,AAAuB,AAAK;kFAE5B;AAAA,AAAI,AAAK,AAAK,AAAM,AAClB,AAAS,AAAK,AAAkB,AAAE,AAAK,AAAK,AAAK,AAAwB,AAAK,AAC/E;;;sDAED;;AAAK,oBAAL,AAA0B,AAAM,wBAC9B;AAAA,AAAS,AAAK,AAAiB,AAAa,AAAK,AACjD,AAAK,AAAM,AAAI,AAAwB,AACxC;;AAHD;yDAKA;;AAAK,oBAAL,AAA2B,AAAM,wBAC/B;AAAA,AAAS,AAAK,AAAoB,AAAa,AAAK,AACpD,AAAK,AAAM,AAAI,AAAwB,AACxC;;AAHD;8DAKA;AAAK,YAAL,AAAqB,AAAC,AAAU,8CAC9B;AAAI,AAAE,cAAM,MAAR,IAAA,AAAgB,AAAQ,eAA5B,AAAI,AAAwC,AAAW,AAAG,AACxD;;AAAK,cAAL,AAA4B,AAAW,AAAM,AAC3C;SAAA,AAAK,AAAM,AAAI,AAAe,AAC9B;WAAA,AAAK,AACN;AAH2B,AAGzB,UAHH,AAA4B,4BAD9B,AAKC;AAAM,2BACL;AAAA,AAAI,AAAK,AAAsB,AAC7B;AAAA,AAAa,AAAK,AACnB;AACF,AACF;;AAXD,2DAaA,AAAK,AAAM,AAAI,AAAa,AAAY,AAAiB;;oCAGzD;AAAK,eAAL,AAAsB,WAAM,+BAC1B;AAAI,YAAO,UAAP,AAAkB,aAAlB,aAAJ,AAA4C,AAAS,kBACnD;;YAAA,AAAK,MAAL,AAAW,IAAI,aAAa,UAA5B,AAAyC,eAAzC,AAA2D,AAC3D;;YAAA,AAAK,MAAL,AAAW,IAAI,aAAa,QAA5B,AAAsC,aAAtC,AAAqD,AACrD;WAHF,AAGE,AAAK,AAAM,AAAI,AAAa,AAAQ,AAAa,AAClD;YAAM,sDACL;;YAAA,AAAK,MAAL,AAAW,IAAI,aAAa,UAA5B,AAAyC,eAAzC,AAA2D,AAC3D;;YAAA,AAAK,MAAL,AAAW,IAAI,aAAa,QAA5B,AAAsC,aAAtC,AAAqD,AACrD;;YAAA,AAAK,MAAL,AAAW,IAAI,aAAf,AAA4B,AAAQ,SAApC,AAAiD,AACjD;AAAA,AAAK,AAAM,AAAI,AAAa,AAAS,AACtC;AACF;AAlEH,AAuDE,AAYD;AAED,SAAA,AAAS,OAAT,AAAgB,WAAW,YAAM,AAC/B;MAAM,WAAW,SAAjB,AAAiB,AAAS,AAC1B;MAAM,OAAO,SAAA,AAAS,EAAT,AAAW,iBAAxB,AAAa,AAA4B,AAEzC,AAAE,AAAQ,AAAG,AAAU,AAAS,AAAgB,AAAQ,AAExD;IAAS,WAAT,AAAqB,UAAS,SAAT,AAAgB,AAAM,wBAAA,AACzC,AAAO,AACP;WAAQ;WACR;AAAO,YAAP,AAAc,AACZ;sBAAM,OAAS,AAAS,AAAK,AAAK,AAAI,AAAQ,AAC5C;UAAA,AAAI,AAAM,gDACR;YAAO,MAAP,AAAY,AACb;;AACD;;eAAA,AAAO,AACR;AALD,AAAe,AAOf,AAAM,AAAe,AAAS,AAAS,AAAQ,AAAM,AAAU,AAAM;yEAErE,AAAI,AAAc,AAChB;;UAAc,cAAd,AAAwB,AAAc,AAAS,AAAK,AACrD;4DAfsC,AAgBxC;;AAED,AACA;AAAA,AAAM,AAAO,AACX;qBAAM,OAAN,AAAiB,AAAM,AAAG,AAAQ,AAClC;UAAM,WAAa,MAAM,GAAN,AAAW,QAA9B,AAAmB,AAAmB,AACtC;UAAM,AAAS,aAAS,MAAT,AAAc,KAAd,AAAmB,QAAI,AAAQ,AAC5C;UAAA,AAAI,AAAM,gDACR;YAAO,MAAP,AAAY,AACb;;AACD;;eAAA,AAAO,AACR;AA3BsC,AAsBvC,AAAe,AAOf,AAAc,AAAa,AAAY,AAAU,AAAM,AAAU,AAClE;;AAED,AACA;AAAA,AAAS,AAAO,AACd;AAAM,+BAAN,AAAmB,AAAM,AAAK,AAAQ;0CACtC;;UAAM,aAAW,AAAE,KAAK,SAAA,AAAS,KAAhB,AAAqB,MAAO,UAAD,AAAS,KACnD;eAAO,IAAA,AAAI,QAAX,AAAmB,AACpB;AAFD,AAAiB,AAIjB,OAJiB;;oBAIjB,AAAc,YAAd,AAA0B,UAAU,SAAA,AAAS,KAA7C,AAAkD,AACnD;AAxCwC;GAAA;AAN7C,AAME,AAAqB,AA0CtB;AAED,SAAA,AAAS,OAAT,AAAgB,YAAY,YAA5B,AAAwC,AACtC,AACD,CAGD;AAAA,AAAS,AAAO,AAAQ,AACtB,AAAa,AACX,AAAM,AAAW,AAAS;AAC1B,SAAM,OAAQ;AACR,0BAAN,AAAkB,AAAM,AAAO,AAAa,AAE5C;QAAO,oBACL;QAAW,iBADN,AAEL;QAAY,YAFP,0BAAA,AAGL,AAAS,AACT;;AACQ,iBALH,AAML;AAAQ,kBANH,AAOL;eAPK,AAOK;YACV;cAAU,AACR;cAAA,AAAM,AAAI,AAAa,AAAC,AACzB;;2BAVH,AAAO;gCANa,AAkBrB;AAED;AAdS,AAIC,AACN;AASe,AACjB,AAAM,AAAW,AAAS,AAC1B;AAAM,gCAAN,AAAkB,AAAS,AAAM,AAAI,AAAa,AAElD;QAAO,oBACL;QAAW,YADN,gCAAA,AAEL;;AACU,iBACR;AAAA,AAAS,AACV;;iBALH,AAAO;AAxBa,AA+BrB;AAJG;AAMJ,AAAoB,AAClB;AAAO,AAAS,iCAlCI,AAkCpB,AAAO,AAAoB,AAAM,AAAI,AAAa,AACnD;;AAED,AAAiB,AACf;AAAO,8BAtCa,AAsCpB,AAAO,AAAS,AAAW,AAAM,AAAI,AAAa,AACnD;;AAED,AAAe,AACb;AAAO,4BA1Ca,AA0CpB,AAAO,AAAS,AAAW,AAAM,AAAI,AAAa,AACnD;;AAED,AAAmB,AACjB;AAAM,gCAAN,AAAkB,AAAS,AAAW,AAAM,AAAO,AAAa,AAAS;2EAEzE,AAAI,AAAW,AACb;;QAAO,WAAP,AACD;;AACD;;WAAA,AAAO,AACR;AApDqB,AAsDtB;qCAAA,AAAwB,KAAK,AAC3B;QAAM,cAAc,SAAA,AAAS,WAAT,AAAoB,MAApB,AAA0B,IAA9C,AAAoB,AAA8B,AAElD;;QAAA,AAAI,aAAa,AACf;UAAI,YAAA,AAAY,QAAQ,IAAxB,AAA4B,KAAK,AAC/B;eAAA,AAAO,AACR;AACF;;;WACD;AA9DoB,AA8DpB,AAAO,AACR;uCAED;sBAAA,AAAqB,AAAK,gBACxB;AAAI,AAAE,aAAN,AAAI,AAAU,AAAI,AAAgB,AAChC;AAAA,AAAO,AACR;;;AACD,AAAO,AACR;AAtEqB;yDAwEtB;AAAY,AACV,AAAO,AAAS,AAAW,AAAM,AAAO,AAAa,AACtD;AA1EqB;yEA4EtB;AAAU,AACR,AAAO,AAAS,AAAW,AAAK,AAAY,AAAS,AAAgB,AACtE;AA9EqB;4BAgFtB,AAAkB,AAChB;AAAM,uBAAN,AAAiB,AAAS,AAE1B;AAAO,eAAM,AACX;AAAA,AAAS,AACV;AArFmB,AAmFpB,AAGD;qCAED;QAAa,WAAb,AAAwB,SACtB,AAAM,AAAW,AAAS,AAE1B;AAAO,AACL;AADK,AAEL;oBAAc,WAAA,AAAW,QAFpB,AAES,AAAmB,AACjC;iBAAW,SAAA,AAAS,MAAT,AAAe,OAAf,AAAsB,aAH5B,AAGM,AAAmC,AAC9C;OAJF,AAAO,AAIF,AAEN;AAjGqB;2BAkGtB;QAAA,AAAS,AAAK,oBACZ;QAAM,aAAN,AAAiB,AAAS,AAC1B;;QAAI,SAAa,KAAjB;yDACA;AAAA,AAAI,AAAS,AAAK,AAAe,AAAK,AACpC,AAAa,AAAS,AAAK,AAAY,AAAQ,AAAI,AACpD;;;AAED;AAAO,oDACL;AADK,kBAEL;AAFK,AAEM,AAAS,AAAM,AAAO,AAAa,AAC9C;iBAHK,AAGO,AACZ;AAJK,0CAKL;iBAAW,UALN;4CAML;eAAA,AAAY,AAAa,AACvB;AAAI,AAAK,yBAAL,AAAe,IAAf,eAAJ,AAAoC,AAAK,AAAU,AAAS,AAAM,AAAI,AAAiB,AACrF;AAAA,AAAS,AAAM,AAAI,AAAe,AACnC;AAFD,AAEO,AACL;OAAA,AAAS,AAAM,AAAI,AAAe,AACnC,AACF;AAZI;6BAaL;AAAG,4BAtHe,AAyGpB,AAAO,AAeR;;oDACD;aAAgB,AACd;AAAM,mBAAW,AAAS,cAA1B,AAAiB,AAEjB,AAAO,AACL;;AADF,AAAO,AACM,AAAS,AAAM,AAAO,AAAa,AAC9C,AAAO,AACP,AAAa,AAAc;AA5H7B,AAAuB,AACvB;AA6HD;iEAjIH,AAAwB;kCAqIxB;AAAS,UAAT,AAAgB,QAAhB,AAAuB,qBACrB;+BAAA,AAAmC,AAAO,AAAU,AAClD;AAAI,UAAc,cAAlB,AAAI,AAA0B,mBAC5B;UAAM,AAAQ,aAAA,AAAM,AAAO,cAA3B,AAAc,AAAqB,kBACnC,AAAM,AAAO,AAAS,AAAK,AAC3B;;UAAM,eAAc,OAApB,AAAoB,AAAS,AAAM,AAAI,AACvC;AAAA,AAAM,AAAa,AAAc,AAAW,AAAO;iBAEnD;AAAI,aAAJ,AAAmB,AAAO,AACxB;cACA;AAFF,AAEE,AAAS,AACV,AAAM,AACL;;UAAM,eAAN,2BACD;;6BAED;AAAI,uBAAe,IAAA,AAAY,eAA/B,AAAuC,AAAO,6BAC5C;AAAA,AAAS,AAAM,AAAI,AAAe,AACnC;AAFD,AAEO,AAAI,AAAY,AACrB;AAAA,AAAS,AAAM,AAAI,AAAe,AAAc,AAAQ,AAAO,AAChE,AACF;+EApBkB,AAqBpB;;AAED,AAAiD,AAAO,AAAU,AAChE;AAAA,AAAS;;6BAGX,AAA6C,AAAO,AAAU,AAC5D;;QAAM,AAAQ,cAAM,YAApB,AAAc,AAAoB,AAAQ,AAC1C;AAAA,AAAM,AAAO,AAAS,AAAK;AAE3B,AAAI,AAAc,AAAY,AAC5B,KAhCiB,AAyBpB,CAQE;;;AAN2D,AAQ5D;;AACA;AAAI,UAAA,AAAS,AAAM,cAAf,AAAsB,WAAtB,OAAJ,AAAI,AAAmC,AAAQ,iBAC7C;0CACA;AACA;AAAA,AAAI,AAAc,AAAW,AAAO,AAAU,AAAO,AACnD,AAAS,AAAM,AAAI,AAAe,AAClC,QACD;AAN4C,AAQ7C,AACA;AACA;AACA;;;;;AACA;AAhDN,AAAuB,AAgDjB,AAAS,AACT,AAAS,AAAM,AAAI,AAAe,AAAc,AAAQ,AAAO,AAChE,AACF","file":"/imports/plugins/core/ui-tagnav/client/components/tagNav/tagNav.js.map","sourcesContent":["import Sortable from \"sortablejs\";\nimport { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { Reaction } from \"/client/api\";\nimport { TagHelpers } from \"/imports/plugins/core/ui-tagnav/client/helpers\";\nimport { IconButton, Overlay } from \"/imports/plugins/core/ui/client/components\";\n\nconst NavbarStates = {\n  Orientation: \"stateNavbarOrientation\",\n  Position: \"stateNavbarPosition\",\n  Anchor: \"stateNavbarAnchor\",\n  Visible: \"stateNavbarVisible\"\n};\n\nconst NavbarOrientation = {\n  Vertical: \"vertical\",\n  Horizontal: \"horizontal\"\n};\n\nconst NavbarVisibility = {\n  Shown: \"shown\",\n  Hidden: \"hidden\"\n};\n\nconst NavbarPosition = {\n  Static: \"static\",\n  Fixed: \"fixed\"\n};\n\nconst NavbarAnchor = {\n  Top: \"top\",\n  Right: \"right\",\n  Bottom: \"bottom\",\n  Left: \"left\",\n  None: \"inline\"\n};\n\nconst TagNavHelpers = {\n  onTagCreate(tagName, parentTag) {\n    TagHelpers.createTag(tagName, undefined, parentTag);\n  },\n  onTagRemove(tag, parentTag) {\n    TagHelpers.removeTag(tag, parentTag);\n  },\n  onTagSort(tagIds, parentTag) {\n    TagHelpers.sortTags(tagIds, parentTag);\n  },\n  onTagDragAdd(movedTagId, toListId, toIndex, ofList) {\n    TagHelpers.moveTagToNewParent(movedTagId, toListId, toIndex, ofList);\n  },\n  onTagUpdate(tagId, tagName) {\n    TagHelpers.updateTag(tagId, tagName);\n  },\n  isMobile() {\n    return window.matchMedia(\"(max-width: 991px)\").matches;\n  },\n  tagById(tagId, tags) {\n    return _.find(tags, (tag) => tag._id === tagId);\n  },\n  hasSubTags(tagId, tags) {\n    const foundTag = this.tagById(tagId, tags);\n\n    if (foundTag) {\n      if (_.isArray(foundTag.relatedTagIds) && foundTag.relatedTagIds.length) {\n        return true;\n      }\n    }\n    return false;\n  }\n};\n\nTemplate.tagNav.onCreated(function () {\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    attachedBodyListener: false,\n    isEditing: false,\n    selectedTag: null,\n    [NavbarStates.Visible]: false\n  });\n\n  this.moveItem = (array, fromIndex, toIndex) => {\n    array.splice(toIndex, 0, array.splice(fromIndex, 1)[0]);\n    return array;\n  };\n\n  this.toggleNavbarVisibility = () => {\n    const isVisible = this.state.get(NavbarStates.Visible);\n    this.state.set(NavbarStates.Visible, !isVisible);\n  };\n\n  this.closeNavbar = () => {\n    this.state.set(NavbarStates.Visible, false);\n  };\n\n  this.data.onToggleMenu(this.toggleNavbarVisibility);\n\n  if (this.data.name) {\n    document.body.addEventListener(`${this.data.name}_toggleMenuVisibility`, this.toggleNavbarVisibility);\n  }\n\n  this.attachBodyListener = () => {\n    document.body.addEventListener(\"mouseover\", this.closeDropdown);\n    this.state.set(\"attachedBodyListener\", true);\n  };\n\n  this.detachhBodyListener = () => {\n    document.body.removeEventListener(\"mouseover\", this.closeDropdown);\n    this.state.set(\"attachedBodyListener\", false);\n  };\n\n  this.closeDropdown = (event) => {\n    if ($(event.target).closest(\".navbar-item\").length === 0) {\n      this.closeDropdownTimeout = setTimeout(() => {\n        this.state.set(\"selectedTag\", null);\n        this.detachhBodyListener();\n      }, 500);\n    } else {\n      if (this.closeDropdownTimeout) {\n        clearTimeout(this.closeDropdownTimeout);\n      }\n    }\n  };\n\n  this.state.set(NavbarStates.Visibility, NavbarVisibility.Hidden);\n\n\n  this.onWindowResize = () => {\n    if (window.matchMedia(\"(max-width: 991px)\").matches) {\n      this.state.set(NavbarStates.Orientation, NavbarOrientation.Vertical);\n      this.state.set(NavbarStates.Position, NavbarPosition.Fixed);\n      this.state.set(NavbarStates.Anchor, NavbarAnchor.Left);\n    } else {\n      this.state.set(NavbarStates.Orientation, NavbarOrientation.Horizontal);\n      this.state.set(NavbarStates.Position, NavbarPosition.Static);\n      this.state.set(NavbarStates.Anchor, NavbarAnchor.None);\n      this.state.set(NavbarStates.Visible, false);\n    }\n  };\n});\n\nTemplate.tagNav.onRendered(() => {\n  const instance = Template.instance();\n  const list = instance.$(\".navbar-items\")[0];\n\n  $(window).on(\"resize\", instance.onWindowResize).trigger(\"resize\");\n\n  instance._sortable = Sortable.create(list, {\n    group: \"tags\",\n    handle: \".js-tagNav-item\",\n    onSort(event) {\n      const tagIds = instance.data.tags.map(item => {\n        if (item) {\n          return item._id;\n        }\n        return null;\n      });\n\n      const newTagsOrder = instance.moveItem(tagIds, event.oldIndex, event.newIndex);\n\n      if (newTagsOrder) {\n        TagNavHelpers.onTagSort(newTagsOrder, instance.data.parentTag);\n      }\n    },\n\n    // On add from another list\n    onAdd(event) {\n      const toListId = event.to.dataset.id;\n      const movedTagId = event.item.dataset.id;\n      const tagIds = instance.data.tags.map(item => {\n        if (item) {\n          return item._id;\n        }\n        return null;\n      });\n\n      TagNavHelpers.onTagDragAdd(movedTagId, toListId, event.newIndex, tagIds);\n    },\n\n    // Tag removed from list becuase it was dragged to a different list\n    onRemove(event) {\n      const movedTagId = event.item.dataset.id;\n      const foundTag = _.find(instance.data.tags, (tag) => {\n        return tag._id === movedTagId;\n      });\n\n      TagNavHelpers.onTagRemove(foundTag, instance.data.parentTag);\n    }\n  });\n});\n\nTemplate.tagNav.onDestroyed(function () {\n  // $(window).off(\"resize\", this.onWindowResize);\n});\n\n\nTemplate.tagNav.helpers({\n  EditButton() {\n    const instance = Template.instance();\n    const state = instance.state;\n    const isEditing = state.equals(\"isEditing\", true);\n\n    return {\n      component: IconButton,\n      bezelStyle: \"solid\",\n      primary: true,\n      icon: \"fa fa-pencil\",\n      onIcon: \"fa fa-check\",\n      toggle: true,\n      toggleOn: isEditing,\n      onClick() {\n        state.set(\"isEditing\", !isEditing);\n      }\n    };\n  },\n\n  OverlayComponent() {\n    const instance = Template.instance();\n    const isVisible = instance.state.get(NavbarStates.Visible);\n\n    return {\n      component: Overlay,\n      isVisible,\n      onClick() {\n        instance.closeNavbar();\n      }\n    };\n  },\n\n  navbarOrientation() {\n    return Template.instance().state.get(NavbarStates.Orientation);\n  },\n\n  navbarPosition() {\n    return Template.instance().state.get(NavbarStates.Position);\n  },\n\n  navbarAnchor() {\n    return Template.instance().state.get(NavbarStates.Anchor);\n  },\n\n  navbarVisibility() {\n    const isVisible = Template.instance().state.equals(NavbarStates.Visible, true);\n\n    if (isVisible) {\n      return \"open\";\n    }\n    return \"closed\";\n  },\n\n  navbarSelectedClassName(tag) {\n    const selectedTag = Template.instance().state.get(\"selectedTag\");\n\n    if (selectedTag) {\n      if (selectedTag._id === tag._id) {\n        return \"selected\";\n      }\n    }\n    return \"\";\n  },\n\n  hasDropdownClassName(tag) {\n    if (_.isArray(tag.relatedTagIds)) {\n      return \"has-dropdown\";\n    }\n    return null;\n  },\n\n  isEditing() {\n    return Template.instance().state.equals(\"isEditing\", true);\n  },\n\n  canEdit() {\n    return Template.instance().data.editable && Reaction.isPreview() === false;\n  },\n\n  handleMenuClose() {\n    const instance = Template.instance();\n\n    return () => {\n      instance.toggleNavbarVisibility();\n    };\n  },\n\n  tagTreeProps(parentTag) {\n    const instance = Template.instance();\n\n    return {\n      parentTag,\n      subTagGroups: TagHelpers.subTags(parentTag),\n      isEditing: instance.state.equals(\"isEditing\", true),\n      ...TagNavHelpers\n    };\n  },\n  tagProps(tag) {\n    const instance = Template.instance();\n    let isSelected = false;\n    if (instance.data.selectedTag && tag) {\n      isSelected = instance.data.selectedTag._id === tag._id;\n    }\n\n    return {\n      tag,\n      isEditing: instance.state.equals(\"isEditing\", true),\n      selectable: true,\n      isSelected,\n      className: \"js-tagNav-item\",\n      onTagSelect(selectedTag) {\n        if (JSON.stringify(selectedTag) === JSON.stringify(instance.state.get(\"selectedTag\"))) {\n          instance.state.set(\"selectedTag\", null);\n        } else {\n          instance.state.set(\"selectedTag\", selectedTag);\n        }\n      },\n      ...TagNavHelpers\n    };\n  },\n  blankTagProps() {\n    const instance = Template.instance();\n\n    return {\n      isEditing: instance.state.equals(\"isEditing\", true),\n      blank: true,\n      onTagCreate: TagNavHelpers.onTagCreate\n    };\n  }\n});\n\n\nTemplate.tagNav.events({\n  \"click .navbar-item .rui.tag.link\"(event, instance) {\n    if (TagNavHelpers.isMobile()) {\n      const tagId = event.target.dataset.id;\n      const tags = instance.data.tags;\n      const selectedTag = instance.state.get(\"selectedTag\");\n      const hasSubTags = TagNavHelpers.hasSubTags(tagId, tags);\n\n      if (hasSubTags === false) {\n        // click close button to make navbar left disappear\n        instance.closeNavbar();\n      } else {\n        event.preventDefault();\n      }\n\n      if (selectedTag && selectedTag._id === tagId) {\n        instance.state.set(\"selectedTag\", null);\n      } else if (hasSubTags) {\n        instance.state.set(\"selectedTag\", TagNavHelpers.tagById(tagId, tags));\n      }\n    }\n  },\n\n  \"click [data-event-action=close-tagnav-overlay]\"(event, instance) {\n    instance.closeNavbar();\n  },\n\n  \"mouseover .navbar-item, focus .navbar-item\"(event, instance) {\n    const tagId = event.currentTarget.dataset.id;\n    const tags = instance.data.tags;\n\n    if (TagNavHelpers.isMobile()) {\n      return;\n    }\n\n    // While in edit mode, don't trigger the hover hide/show menu\n    if (instance.state.equals(\"isEditing\", false)) {\n      // User mode\n      // Don't show dropdown if there are no subtags\n      if (TagNavHelpers.hasSubTags(tagId, tags) === false) {\n        instance.state.set(\"selectedTag\", null);\n        return;\n      }\n\n      // Otherwise, show the menu\n      // And Attach an event listener to the document body\n      // This will check to see if the dropdown should be closed if the user\n      // leaves the tag nav bar\n      instance.attachBodyListener();\n      instance.state.set(\"selectedTag\", TagNavHelpers.tagById(tagId, tags));\n    }\n  }\n});\n"]},"hash":"b9259f444810d268dbd0200ef5d894ba4a096b81"}
