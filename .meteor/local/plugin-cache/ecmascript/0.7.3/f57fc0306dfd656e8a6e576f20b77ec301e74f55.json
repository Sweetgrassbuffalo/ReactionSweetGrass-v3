{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"i18next","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"i18next"}]},{"source":"lodash/orderBy","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"orderBy"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/reactive-dict","imported":["ReactiveDict"],"specifiers":[{"kind":"named","imported":"ReactiveDict","local":"ReactiveDict"}]},{"source":"/imports/plugins/core/router/lib","imported":["Router"],"specifiers":[{"kind":"named","imported":"Router","local":"Router"}]},{"source":"/lib/api","imported":["getCurrentTag","getShopName"],"specifiers":[{"kind":"named","imported":"getCurrentTag","local":"getCurrentTag"},{"kind":"named","imported":"getShopName","local":"getShopName"}]},{"source":"/lib/collections","imported":["Products","Revisions"],"specifiers":[{"kind":"named","imported":"Products","local":"Products"},{"kind":"named","imported":"Revisions","local":"Revisions"}]},{"source":"./catalog","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Catalog"}]},{"source":"/lib/api/router/metadata","imported":["MetaData"],"specifiers":[{"kind":"named","imported":"MetaData","local":"MetaData"}]}],"exports":{"exported":["applyProductRevision","product"],"specifiers":[{"kind":"local","local":"applyProductRevision","exported":"applyProductRevision"},{"kind":"local","local":"product","exported":"product"}]}}},"options":{"filename":"/lib/api/products.js","filenameRelative":"/lib/api/products.js","inputSourceMap":{"version":3,"sources":["/lib/api/products.js"],"names":["i18next","orderBy","Meteor","ReactiveDict","Router","getCurrentTag","getShopName","Products","Revisions","Catalog","MetaData","ReactionProduct","applyProductRevision","product","__revisions","length","cleanProduct","Object","assign","revisedProduct","revision","parentDocument","documentData","__published","__draft","sortProducts","products","tag","sorted","positions","position","createdAt","setCurrentVariant","variantId","set","selectedVariantId","currentId","setProduct","currentProductId","currentVariantId","productId","getParam","findOne","$or","handle","toLowerCase","_id","variants","getTopVariants","Array","isArray","init","current","selectedProductId","get","id","getVariants","selectedVariant","selectedProduct","undefined","checkChildVariants","parentVariantId","childVariants","checkInventoryVariants","inventoryVariants","getVariantPriceRange","getProductPriceRange","getVariantQuantity","doc","type","getTag","getProductsByTag","hashtags","newRelatedTags","relatedTag","relatedTags","selector","indexOf","push","$in","cursor","find","publishProduct","productOrArray","_","call","error","result","Alerts","add","placement","Error","alertSettings","autoHide","dismissable","t","title","toggleVisibility","cloneProduct","count","go","archiveProduct","productIds","map","confirmTitle","alert","showCancelButton","confirmButtonText","isConfirm","toast","isAncestorDeleted","includeSelf","ancestors","archivedCount","$nin"],"mappings":";;AAAA,OAAO;AAAa;;;AAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAO,A,AAAa,AACpB,AAAS,AAAc,AACvB,AAAS,AAAoB,AAC7B,AAAS,AAAc,AACvB,AAAS,AAAe,AAAmB,AAC3C,AAAS,AAAU,AAAiB,AACpC,AAAO,AAAa,AACpB,AAAS,AAAgB,AAEzB,AACA;AAEA;;AAQA,AAAM,AAAkB,AAAI,AAAa,AAEzC,AAAO,AAAS,AAAqB,AAAS,AAC5C,AAAI,AAAS;;;;;;;GACX,IAAI,AAAQ,kBAAR,IAAuB,AAAQ,aAAnC,AAA2B,AAAoB,AAAQ,AACrD,AAAM,AAAe,AAAO,AAAO,AAAI,AACvC;;AAAO,SAAa,qBAApB,SACA;MAAI,SAHiD,AAGrD,AACA;;AACK,UAAL,AAAW,eAAY,OAAQ,WAA/B,AAA4C,AAC1C;AAAI,aAAC,AAAS,aAAd,AAA8B,AAC5B;UAAA,AAAiB,AAAQ,AAAY,AAAG,AACzC,yBACF;;AAToD,AAWrD;;;;;;;;;;;;;;;kDACA;AAAA,AAAI,AAAC,AAAgB,AACnB;AAAA,AAAiB,AAClB,OATD,CAUA;;;WAAO,AAAO,gBAAP,AAAc,AACnB,AACA,AACE;AAAa,yBADf,AAEE;AAFF,AAEW,AAAQ,AAAY;;AAJjC,AAAO,2BAOR;AACD,AAAO,qBACR;qCAED,AAAO,AACR;AAJG;;;WAMJ;AAAA,AAAgB,AAAe,AAAC,AAAU,AAAQ,AAChD,AAAI,AAAS,AAEb;;SAAS,AAAQ,AACf,AACC;AAAD,AAAa,AACX,AAAO,AAAQ,AAAa,AAAQ,AAAU,AAAQ,AAAQ,AAAU,AAAK;;AAHxE,AAIN,AACD,wDACC;MAAD,AAAa,SACX,AAAO,AAAQ,AAAa,AAAQ,AAAU,AAAQ,AAAQ,AAAU,AAAK,AAC9E;AARM,AASP,mBACA,UAVF,AAAS,AAaT;YAAA,AAAO,S,AAhBT,AAiBC,AAED;;;;;AAKA,KAAA,AAAgB,AAAoB,AAAC,AAAc,AACjD;AAAA,AAAI,AAAc,AAAM,AACtB,AAAgB,AAAI,AAAa,AACjC,AAAgB,AAAI,AAAa,AAAgB,AAClD;;AACD,AAAI,AAAC,AAAW,GACd,AACD,AACD,AAAM,AAAY,AAAgB;;;;;;AAClC,AAAI,gBAAJ,AAAkB,AAAW,yCAC3B;0BACD;;qDACD;AAZF,AAYE,AAAgB,AAAI,AAAa,AAClC;;AAED,A;;;;;;;;;;;GASA,AAAgB,AAAa,AAAC,AAAkB,AAAqB,AACnE,AAAI,AAAY,AAAoB,AAAO,AAAS,AACpD,AAAI,AAAY,AAAoB,AAAO,AAAS,AAEpD,AACA,AAAM,AAAU,AAAS,AAAQ,AAC/B,AAAK,AACH,AAAE,AAAQ,AAAU,AAAiB,AACrC;;;;;;;;;;AAAE,AAAQ;AAFP,MAEoB,gDACvB;sDAAA,AAAE,AAAK,cAHJ,AAGgB;;;AAJvB;AAQY,cAAW,UAAvB,AAA+B;;;;OAE/B;AAAI;WAAJ,AAAa;MACX,AACA,AACA,AAAI,AAAC,AAAW,AACd;AANJ;AARgB,AAAiB;AAcvB,cAAW,mBAAjB,AAAiB,AAAgB,AAAe,AAChD,AAAY,AAAM,AAAQ,AAAa,AAAS,AAC9C,AAAS,AAAG,AAAO,AACtB;;AAPU,MAQX;;AACA;oBAAA,AAAgB,AAAI,AAAa,AACjC;UAAgB,WAAhB,AAAoB,AAAa,gBAAjC,eAzBiE,AA0BlE,AAED;;AACA,MAAA,AAAS,AAAK,AAAO,AAErB;;;AAAO,wBAAqB,aA/B9B,AA+BS,AACR,A,AADC,AAGF;;GA1BM;;;uBA+BN;SAAgB,qBAAhB,AAAoC,AAAM,AAAgB,AAAI,AAE9D,A;GAKA,AAAgB,AAAoB,AAAM,AACxC,AAAI,AAAK,AAAgB,AAAI;;;;;;;6BAC7B,AAAI,AAAO,AAAM;GACf,AAAO,AACR,AACD,AAAM,AAAW,AAAgB;;;;;;AAEjC,AAAI,AAAE,gBAAN,AAAI,AAAE,AAAS,AAAS,AAAI;WAC1B,AAAO,oBACR;;;WAED;AAXwC,AAWxC,AAAK,AAAS,AAAG,AACjB;;iCAZF,AAaE,AAAO,AACR;;A,AAED;;;;uBARI,CAaJ;;SAAA,AAAgB,AAAkB,AAAY,AAC5C;AAAA,AAAM,AAAK,AAAgB,GAC3B,AAAI,AAAO,AAAO,AAAU,AAC1B,AAAO,AAAqB,AAAS,AAAQ,AAC9C,AACD,AAAO;;;;;;AALT,AAMC,A,AAED;;;;;;;SAKA;AAAA,AAAgB,AAAkB,AAAY,AAC5C,AAAM,AAAK,AAAgB,GAC3B,AAAI,AAAO,AAAO,AAAU,AAC1B,AAAO,AAAqB,AAAS,AAAQ,AAC9C;;;;;;AACD,AAAO,gBAAP,8BALF,AAMC;A,AAED;;;;;;;G,AAMA,AAAgB,AAAqB,AAAU,AAAiB,AAC9D,AAAM,AAAgB,AAAgB,AAAY,AAClD,AAAO,AAAc,AAAS,AAAc,AAAS,AACtD,AAED;;;;;;;;;;GAQA,AAAgB,AAAyB,AAAU,AACjD,AAAM,AAAoB,AAAgB,AAAY,AAAiB,AACvE,AAAO,AAAkB,AAAS,AAAkB,AAAS,A,AAFK,AAGnE,AAED;;;;;;;;;;;;G,AAQA,AAAgB,AAAuB,AAAM,AAC3C,AAAqB,AAAM,AAAgB,AAAkB,AAE/D;;;;;;;;;;8EASA,AAAgB,AAAuB,AAAM,AAC3C,A,AAAqB,AAAM,AAAgB,AAE7C;GAQA,A,AAAA,AAAgB,AAAqB,AAAO,AAAQ,AAAmB,AAEvE;;;;;;;;;;;;GAQA,A,AAAgB,AAAc,AAAC,AAAI,AAAS,AAC1C,AAAO,AAAQ,AAAY,AAAM,AAAgB,AAAqB,AACvE,AAED;;;;;;;;;;;GAMA,AAAgB,AAAiB,AAAM,A,AAAvC,AACE,AAAO,AAAQ,AAAe,AAAM,AAAgB,AACrD,AAED;;;;;;;;;;;GAMA,AAAgB,A,AAAhB,AAAyB,AAAM,AAC7B,AAAO,AAAmB,AAAc,AACzC,AAED;;;;;;;;;GAMA,AAAgB,AAAmB,AAAU,AAAK,AAChD,AAAI,AACJ,AAAI,AACJ,AAAI,AACJ,AAAI,AACJ,AAAM,AAAW;;;;;;;qCAEjB;AAAI,SAAJ,AAAS,iCACP;AAAA,AAAW,AACX,AAAc,AAAC,GACf,AAAO,AAAY,AAAQ,AACzB,AAAiB,AACjB,AAAK,AAAc,AAAa,AAC9B,AAAI,AAAS,AAAQ,AAAW,AAAS,AAAC,AAAG;;;;;;;AAC3C,gBAAA,AAAS,AAAK,mBAAd,AAAyB,eAC1B;MACF;;MACD;MAAA,AAAc,AACf;iBACD;;WAAA,AAAS,AAAW,AAClB;AAAK,eADa;AAApB,mBAGD;;;uBACD;;AAAM,4BAAS,AAAS,AAAK;AAA7B,AAAe,AACf;;AADe;;;;;;;AACR,YAAP,yCACD,A,AAzBD,AA2BA;;;;;;;;;WAMA,AAAgB,AAAiB,AAAU,AAAgB,AACzD;;AADyD,AACzD,AAAM,AAAW,AAAC,AAAE,AAAQ,AAAkB,AAAC,AAAkB,AACjE,AACA,AACA;;6BACA;;AACA,AAAK,AAAM,AAAW,AAAU,GAC9B,AAAO,AAAK,AAA2B,AAAQ,AAAK,AAAC,AAAO,AAAW,AAAG,AACxE,AAAI,AAAO,AACT,AAAO,AAAI,AAAO,AAAU,AAC1B,AAAW,AACX,AAAI,AAAQ;;;;;;;AAFd,AAA4B;MAItB,AAAI,cAAO,QAAX,AAAiB,mBAAvB,AAAM,AAA6C,kBACpD,6CACD;AAAM,AAAgB,AACpB;AADoB,AACT,AACX;;AAJA;gBAEoB,AAGV;AACV;iBAJF,AAAsB,AAIP;;qBAEf;AAAI,cAAJ,AAAY,QACV,AAAO,AAAI,AAAQ,AAAE,AAAuC,AAAE;;kBAAS,OAAQ,kCAAnB;AAA5D,AAAW,AAA8E,AAAW,AACrG;;AAFD,UAEO;AACL,AAAO,mBAAI,AAAQ,AAAE,AAAsC,AAAE;YAAS,QAAX,AAAmB;AAA9E,AAAW,AAA6E,kBAAxF,AAAmG,AACpG;qBAlBH,AAmBC,AACF;AAHK;;kBAxBR,AA4BC,AAED,A;;;;;;;;;;;;AAbY;AACJ;;;;;;;;;;;QAHoB,AAER;;;;AAmBpB,AAAgB,AAAmB,AAAU,AAAgB,GAC3D,AAAM,AAAW,AAAC,AAAE,AAAQ,AAAkB,AAAC,AAAkB,AACjE,AAAK,AAAM,AAAW,AAAU,AAC9B,AAAO,AAAK,AAA6B,AAAQ,AAAK,AAAC,AAAO,AAAW,AAAE,AACzE,AAAI,AAAO;;;;;;;AACT,AAAO,gBAAP,AAAW,AAAO,mBAAU;kBACf,UADe,qCAE1B;;AADA;AADF;AAIA;UAAM,OAAN,AAAM,AAAI,AAAO,AAAM,AAA4B,AACpD;;qBACD;AAAM,sBAAgB,AACpB,AAAW,AACX;;AAAI,kBAFgB,AAER,yCACZ;AAHoB,AAGV,AACV;;UAAa;;oBAEf;AAAA,AAAI,kBAAQ,AACV;AAAA,AAAO,AAAI,qBAAA,AAAQ,AAAE,AAAuC,AAAE,AAAS,AAAQ;AAPjF,AAAsB;;AAOT,UAAX,AAAyF,QAD3F,AACE,AAAoG,AACrG;AAAM;;uBACL;aAAA,AAAO,AAAI,AAAQ,AAAE,AAAsC,AAAE;2BAAiB;;SAAR,cAAX;AAA3D,AAAW,AAA6E,AAAW,AACpG;AACF;;;;AAjB+B;;;;;;;;;;;QAEtB,AAAQ;;;AAJlB,AAoBD;AAvBH,A,AAwBC,AAGD,GAQA,AAAgB,AAAe,AAAU,AAAgB;;;;;;;;;AACvD,AAAM,gBAAW,AAAC,AAAM,eAAN,AAAc,UAAf,AAAC,AAAgC,AAAC,gBAAnD,AAAiB,AAAiC,AAAmB,AAErE;MAAO,AAAO,YAAP,AAAY,cAAZ,AAAqC,mBAArC,AAA+C,AAAU,kBAAV,AAAiB,AAAQ,AAC7E,AAAI,AAAO,AACT;gBAAA,AAAW,KAAX,AAAkB,AAAU;eAAA,AAAa;AAAzC;mBACA;;YAAM,IAAI,OAAJ,AAAW,MAAX,AAAiB,yBAAvB,AAAM,AAA0C,AACjD;;;gBACD;AAAI,UAAJ,AAAY,uBACV;AAAI,6BAAJ,AAAwB,AAAG;;SAAvB,AAAS;AACX,AAAO,AAAI,qBAAA,AAAQ,AAAE,AAA6B,AAAE;cAAS,YAAlD,AAAuC,AAAW,AAAS,AAAG;AAAzE,AAAmF,oBAAnF,AAA8F,AAC5F;AAAW,uBADiF,AAE5F,AAAI,AAAS,AAAG,AAChB;AAHF;aAA8F,AAGlF,AACV;;;iBAJF,AAA8F;SAI/E;AAEV,qBACL;AAAO,cAAP,AAAW,SAAQ,GAAR,AAAU,AAAoC,AAAE;AAAS,oBAAX,AAAW,AAAQ,AAAE,AAAsC;AAAO,uBAA3H,AAAW,AAA8C,AACvD,AAAW,AACT,AAAW,AACX;AAXN,AAOC;AAEc,AAEL,AAAS,AAAG,AAChB;AAHS,AAGC,AACV,KAjBwB,CAaf,AAII;AALjB,AAQD;;;wCAtB0E,AAuB5E;AACD;;AACA;AACA;AAAA,AAAI,AAAC,AAAM,AAAQ,AAAiB,AAClC,GAzBO;AAyBP,AAAO,AAAG,AAAW,AACnB,AAAQ,AAAO,GA/BvB,AAGE,AA2BI,AAAqB,A,AA3BlB,AA8BJ,AACF,AACF,AAED;;;;;;;;;;;;;;MAMA,uBAAA,AAAgB,AAAiB,AAAU,AAAgB,AACzD;AAAA,AAAM,AAAW,AAAC,AAAE,AAAQ,AAAkB,AAAC,AAAkB;AACjE;AAAA,AAAM,AAAa,AAAE,AAAI,AAAU,AAAW,AAAO,AAAY,AAAW,AAAU,AAAQ;;6BAC9F;AAAA,AAAI,mBAHqD,AAIzD,UACA;SACA;6BACA;AACA;;AAAI;WAAJ,AACE,AAAe,AAAQ,AAAE,AAC1B;AAAM,UACL;AAAe,sBAAf,AAAe,AAAQ,AAAE,AAC1B;;AAJD,AAAI,AAAS,AAAW,AAAG,AACzB,0BAKF;QAAA,AAAO,AAAM,WACX;AAAO,kBADI,gEAEX;AAAM,YAFK,AAGX;;mBAHW,AAGO,AAClB;kBAAmB,oBAJrB,AAAa,AAKT,IAAD,AAAe,+BAChB,AAAI,0CAAJ,AAAe,UACb;AAAO,iBAAP,AAAY,gBAAZ,AAAuC,AAAY,AAAU;AAAV,AAAiB,qBAAQ;cAC1E;AAAI,gBAAJ;AACA;;YAAA,AAAI,AAAO,QACT;iBAAQ,GAAR,AAAQ,AAAS,AAAW,AAC1B,AAAS,AAAG,AAAS,AAAQ,AAAE,AAC/B,AAAQ,AAAE,AACZ;;cAAA,AAAO,SAAM,AAAQ,AAAE,cAAV,AAA+C,AAAE;oBAAS,+BAA1D,AAA+C;AAA5D,AAAiF,mBAAjF;;gBACA;AAAM,iBAAN,AAAM,AAAI,AAAO,AAAM,AAAqB,AAAO,AACpD;;;;;gBACD;AAAA,AAAI,AAAQ,AACV;AAAA,AAAO,AAAG;AACV;AAAA,AAAI,AAAS,AAAW,AAAG,AACzB;AAAA,AAAQ,AAAS,AAAG,AAAS,AAAQ,AAAE,AACvC;AAAA,AAAO,AAAM,AAAQ,AAAE,AAA+B,AAAE,AAAS;;AAAjE,AAAa,AAAyC,gBAAtD,AAA2E;MAF7E,AAGO,AACL,kDAAA,AAAQ,AAAQ,AAAE,AAClB,AAAO,AAAM,AAAQ,AAAE,AAAsC,AAAE,AAAS,AAAO;;mBAAlB,AAAyB;AAAtF,AAAa,eAA+E,KAA5F,QACD;AACF,AACF,GALI,CAdL,AAoBD;AACF;;;AA5BD;;;;8BA+BF;AAAgB;AACR,YAAN,AAAmB,AACjB,AAAG,AAAQ,AAAU,CAGvB,AAAI,AAAa,AACf;AANJ,AAAoC,AAAU,AAAS,AAAa,AAClE;AA9CF,AA2CC,KAEmE,AAMhE,AAAW,AAAK,AAAQ,AACzB,AAED,AACA;;;;AACA,AAAM,AAAgB,AAAU,AAAK,AACnC;;SAAc,AAAE;AADmB,AACrB,AAAO,AACrB;;yBA1eJ,kBA6dA,AAWE,AAAsB,AAAe,AAET,AAC1B,AAAmB,AACjB,AAAM,AACJ,AAGH,AAEH,AAAI,AAAgB,AAAG,AACrB,AAAO,AACR,AAED,AAAO,AACR,AAED,AAAe","file":"/lib/api/products.js.map","sourcesContent":["import i18next from \"i18next\";\nimport orderBy from \"lodash/orderBy\";\nimport { Meteor } from \"meteor/meteor\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { Router } from \"/imports/plugins/core/router/lib\";\nimport { getCurrentTag, getShopName } from \"/lib/api\";\nimport { Products, Revisions } from \"/lib/collections\";\nimport Catalog from \"./catalog\";\nimport { MetaData } from \"/lib/api/router/metadata\";\n\n// ReactionProduct is only intended to be used on the client, but it's placed\n// in common code because of it is imported by the Products schema\n\n/**\n *  currentProduct\n *  @summary Reactive current product dependency, ensuring reactive products, without session\n *  @todo this is a messy class implementation, normalize it.\n *  @description\n *  products:\n\n */\nconst ReactionProduct = new ReactiveDict(\"currentProduct\");\n\nexport function applyProductRevision(product) {\n  if (product) {\n    if (product.__revisions && product.__revisions.length) {\n      const cleanProduct = Object.assign({}, product);\n      delete cleanProduct.__revisions;\n      let revisedProduct;\n      // check for product revisions and set that as the current product\n      for (const revision of product.__revisions) {\n        if (!revision.parentDocument) {\n          revisedProduct = product.__revisions[0].documentData;\n        }\n      }\n\n      // if there are no revision to product (image and/or tag only) just set the original product as the product\n      if (!revisedProduct) {\n        revisedProduct = cleanProduct;\n      }\n      return Object.assign({},\n        revisedProduct,\n        {\n          __published: cleanProduct,\n          __draft: product.__revisions[0]\n        }\n      );\n    }\n    return product;\n  }\n\n  return null;\n}\n\nReactionProduct.sortProducts = (products, tag) => {\n  let sorted = [];\n\n  sorted = orderBy(products,\n    // Sort by postion for tag\n    (product) => {\n      return product.positions && product.positions[tag] && product.positions[tag].position;\n    },\n    // Then by creation date for tag\n    (product) => {\n      return product.positions && product.positions[tag] && product.positions[tag].createdAt;\n    },\n    // Finally sort by creation date\n    \"createdAt\"\n  );\n\n  return sorted;\n};\n\n/**\n * setCurrentVariant\n * @param {String} variantId - set current variantId\n * @return {undefined}\n */\nReactionProduct.setCurrentVariant = (variantId) => {\n  if (variantId === null) {\n    ReactionProduct.set(\"variantId\", null);\n    ReactionProduct.set(\"variantId\", ReactionProduct.selectedVariantId());\n  }\n  if (!variantId) {\n    return;\n  }\n  const currentId = ReactionProduct.selectedVariantId();\n  if (currentId === variantId) {\n    return;\n  }\n  ReactionProduct.set(\"variantId\", variantId);\n};\n\n/**\n * ReactionProduct.setProduct\n * this will be deprecated in favor of template.instance data.\n *\n * @summary method to set default/parameterized product variant\n * @param {String} currentProductId - set current productId\n * @param {String} currentVariantId - set current variantId\n * @return {Object} product object\n */\nReactionProduct.setProduct = (currentProductId, currentVariantId) => {\n  let productId = currentProductId || Router.getParam(\"handle\");\n  let variantId = currentVariantId || Router.getParam(\"variantId\");\n\n  // Find the current product\n  const product = Products.findOne({\n    $or: [\n      { handle: productId.toLowerCase() }, // Try the handle (slug) lowercased\n      { handle: productId }, // Otherwise try the handle (slug) untouched\n      { _id: productId } // Last attempt, try the product id\n    ]\n  });\n\n  productId = product && product._id;\n\n  if (product) {\n    // set the default variant\n    // as the default.\n    if (!variantId) {\n      const variants = ReactionProduct.getTopVariants(productId);\n      variantId = Array.isArray(variants) && variants.length &&\n        variants[0]._id || null;\n    }\n    // set in our reactive dictionary\n    ReactionProduct.set(\"productId\", productId);\n    ReactionProduct.set(\"variantId\", variantId);\n  }\n\n  // Update the meta data when a product is selected\n  MetaData.init(Router.current());\n\n  return applyProductRevision(product);\n};\n\n/**\n * selectedProductId\n * @summary get the currently active/requested product\n * @return {String} currently selected product id\n */\nReactionProduct.selectedProductId = () => ReactionProduct.get(\"productId\");\n\n/**\n * selectedVariantId\n * @summary get the currently active/requested variant\n * @return {String} currently selected variant id\n */\nReactionProduct.selectedVariantId = () => {\n  let id = ReactionProduct.get(\"variantId\");\n  if (id !== null) {\n    return id;\n  }\n  const variants = ReactionProduct.getVariants();\n\n  if (!(variants.length > 0)) {\n    return [];\n  }\n\n  id = variants[0]._id;\n  // ReactionProduct.set(\"variantId\", id);\n  return id;\n};\n\n/**\n * selectedVariant\n * @summary get the currently active/requested variant object\n * @return {Object} currently selected variant object\n */\nReactionProduct.selectedVariant = function () {\n  const id = ReactionProduct.selectedVariantId();\n  if (typeof id === \"string\") {\n    return applyProductRevision(Products.findOne(id));\n  }\n  return [];\n};\n\n/**\n * selectedProduct\n * @summary get the currently active/requested product object\n * @return {Object|undefined} currently selected product cursor\n */\nReactionProduct.selectedProduct = function () {\n  const id = ReactionProduct.selectedProductId();\n  if (typeof id === \"string\") {\n    return applyProductRevision(Products.findOne(id));\n  }\n  return undefined;\n};\n\n/**\n * checkChildVariants\n * @summary return number of child variants for a parent\n * @param {String} parentVariantId - parentVariantId\n * @return {Number} count of childVariants for this parentVariantId\n */\nReactionProduct.checkChildVariants = function (parentVariantId) {\n  const childVariants = ReactionProduct.getVariants(parentVariantId);\n  return childVariants.length ? childVariants.length : 0;\n};\n\n/**\n * checkInventoryVariants\n * @summary return number of inventory variants for a parent\n * @param {String} parentVariantId - parentVariantId\n * @todo could be combined with checkChildVariants in one method\n * @todo inventoryVariants are deprecated. remove this.\n * @return {Number} count of inventory variants for this parentVariantId\n */\nReactionProduct.checkInventoryVariants = function (parentVariantId) {\n  const inventoryVariants = ReactionProduct.getVariants(parentVariantId, \"inventory\");\n  return inventoryVariants.length ? inventoryVariants.length : 0;\n};\n\n/**\n * getVariantPriceRange\n * @summary get price range of a variant if it has child options.\n * if no child options, return main price value\n * @todo remove string return and replace with object\n * @param {String} [id] - current variant _Id\n * @return {String} formatted price or price range\n */\nReactionProduct.getVariantPriceRange = id => Catalog.\n  getVariantPriceRange(id || ReactionProduct.selectedVariant()._id);\n\n/**\n * getProductPriceRange\n * @summary get price range of a product\n * if no only one price available, return it\n * otherwise return a string range\n * @todo remove string return and replace with object\n * @param {String} [id] - current product _id\n * @return {String} formatted price or price range\n */\nReactionProduct.getProductPriceRange = id => Catalog.\n  getProductPriceRange(id || ReactionProduct.selectedProductId());\n\n/**\n * getVariantQuantity\n * @description middleware method which calls the same named common method.\n * @todo maybe we could remove this after 1.3. But for now I like how it looks.\n * @param {Object} doc - variant object\n * @return {Number} summary of options quantity or top-level variant\n * inventoryQuantity\n */\nReactionProduct.getVariantQuantity = doc => Catalog.getVariantQuantity(doc);\n\n/**\n * @method getVariants\n * @description Get all parent variants\n * @summary could be useful for products and for top level variants\n * @param {String} [id] - product _id\n * @param {String} [type] - type of variant\n * @return {Array} Parent variants or empty array\n */\nReactionProduct.getVariants = (id, type) => {\n  return Catalog.getVariants(id || ReactionProduct.selectedProductId(), type);\n};\n\n/**\n * @method getTopVariants\n * @description Get only product top level variants\n * @param {String} [id] - product _id\n * @return {Array} Product top level variants or empty array\n */\nReactionProduct.getTopVariants = id => {\n  return Catalog.getTopVariants(id || ReactionProduct.selectedProductId());\n};\n\n/**\n * getTag\n * @summary This needed for naming `positions` object. Method could return `tag`\n * route name or shop name as default name.\n * @return {String} tag name or shop name\n */\nReactionProduct.getTag = () => {\n  return getCurrentTag() || getShopName().toLowerCase();\n};\n\n/**\n * getProductsByTag\n * @summary method to return tag specific product\n * @param {String} tag - tag string\n * @return {Object} - return products collection cursor filtered by tag\n */\nReactionProduct.getProductsByTag = function (tag) {\n  let hashtags;\n  let newRelatedTags;\n  let relatedTag;\n  let relatedTags;\n  const selector = {};\n\n  if (tag) {\n    hashtags = [];\n    relatedTags = [tag];\n    while (relatedTags.length) {\n      newRelatedTags = [];\n      for (relatedTag of relatedTags) {\n        if (hashtags.indexOf(relatedTag._id) === -1) {\n          hashtags.push(relatedTag._id);\n        }\n      }\n      relatedTags = newRelatedTags;\n    }\n    selector.hashtags = {\n      $in: hashtags\n    };\n  }\n  const cursor = Products.find(selector);\n  return cursor;\n};\n\n/**\n * publishProduct\n * @summary product publishing and alert\n * @param {Object} productOrArray - product Object\n * @returns {undefined} - returns nothing, and alerts, happen here\n */\nReactionProduct.publishProduct = function (productOrArray) {\n  const products = !_.isArray(productOrArray) ? [productOrArray] : productOrArray;\n  /* eslint no-loop-func: 1 */\n  //\n  // TODO review process for publishing arrays of product\n  //\n  for (const product of products) {\n    Meteor.call(\"products/publishProduct\", product._id, (error, result) => {  // eslint-disable-line no-loop-func\n      if (error) {\n        Alerts.add(error, \"danger\", {\n          placement: \"productGridItem\",\n          id: product._id\n        });\n        throw new Meteor.Error(\"error publishing product\", error);\n      }\n      const alertSettings = {\n        placement: \"productGridItem\",\n        id: product._id,\n        autoHide: true,\n        dismissable: false\n      };\n      if (result) {\n        Alerts.add(i18next.t(\"productDetail.publishProductVisible\", { product: product.title }), \"success\", alertSettings);\n      } else {\n        Alerts.add(i18next.t(\"productDetail.publishProductHidden\", { product: product.title }), \"warning\", alertSettings);\n      }\n    });\n  }\n};\n\n/**\n * publishProduct\n * @summary product publishing and alert\n * @param {Object} productOrArray - product Object\n * @returns {undefined} - returns nothing, and alerts, happen here\n */\nReactionProduct.toggleVisibility = function (productOrArray) {\n  const products = !_.isArray(productOrArray) ? [productOrArray] : productOrArray;\n  for (const product of products) {\n    Meteor.call(\"products/toggleVisibility\", product._id, (error, result) => { // eslint-disable-line no-loop-func\n      if (error) {\n        Alerts.add(error, \"danger\", {\n          placement: \"productGridItem\",\n          id: product._id\n        });\n        throw new Meteor.Error(\"error publishing product\", error);\n      }\n      const alertSettings = {\n        placement: \"productGridItem\",\n        id: product._id,\n        autoHide: true,\n        dismissable: false\n      };\n      if (result) {\n        Alerts.add(i18next.t(\"productDetail.publishProductVisible\", { product: product.title }), \"success\", alertSettings);\n      } else {\n        Alerts.add(i18next.t(\"productDetail.publishProductHidden\", { product: product.title }), \"warning\", alertSettings);\n      }\n    });\n  }\n};\n\n\n/**\n * cloneProduct\n * @summary product cloning and alert\n * @param {Object|Array} productOrArray - if this method calls from productGrid\n * it receives and array with product _id or _ids, but if it calls from PDP, when\n * it receive a `Object` with _id. It needed to determine the source of call.\n * @returns {undefined} - returns nothing, and alerts, happen here\n */\nReactionProduct.cloneProduct = function (productOrArray) {\n  const products = !Array.isArray(productOrArray) ? [productOrArray] : productOrArray;\n\n  return Meteor.call(\"products/cloneProduct\", products, function (error, result) {\n    if (error) {\n      Alerts.add(error, \"danger\", { placement: \"productGridItem\" });\n      throw new Meteor.Error(\"error cloning product\", error);\n    }\n    if (result) {\n      if (products.length === 1) {\n        Alerts.add(i18next.t(\"productDetail.clonedAlert\", { product: products[0].title }), \"success\", {\n          placement: \"productGridItem\",\n          id: products[0]._id,\n          autoHide: true,\n          dismissable: false\n        });\n      } else {\n        Alerts.add(i18next.t(\"productDetail.clonedAlert_plural\", { product: i18next.t(\"productDetail.theSelectedProducts\"), count: 0 }),\n          \"success\", {\n            placement: \"productGridItem\",\n            id: products[0]._id,\n            autoHide: true,\n            dismissable: false\n          }\n        );\n      }\n    }\n    // this statement allow us to redirect to a new clone PDP if clone action\n    // was fired within PDP, not within productGrid.\n    if (!Array.isArray(productOrArray)) {\n      Router.go(\"product\", {\n        handle: result[0]\n      });\n    }\n  });\n};\n\n/**\n * archiveProduct\n * @summary confirm to archive product\n * @param {Object} productOrArray - product Object\n * @returns {undefined} - returns nothing, and alerts, happen here\n */\nReactionProduct.archiveProduct = function (productOrArray) {\n  const products = !_.isArray(productOrArray) ? [productOrArray] : productOrArray;\n  const productIds = _.map(products, product => typeof product === \"string\" ? product : product._id);\n  let confirmTitle;\n  // we have to use so difficult logic with `length` check because of some\n  // languages, which have different phrase forms for each of cases.\n  // we are using i18next `plural` functionality here.\n  // @see: http://i18next.com/translate/pluralSimple\n  if (products.length === 1) {\n    confirmTitle = i18next.t(\"productDetailEdit.archiveThisProduct\");\n  } else {\n    confirmTitle = i18next.t(\"productDetailEdit.archiveSelectedProducts\");\n  }\n\n  Alerts.alert({\n    title: confirmTitle,\n    type: \"warning\",\n    showCancelButton: true,\n    confirmButtonText: \"Archive\"\n  }, (isConfirm) => {\n    if (isConfirm) {\n      Meteor.call(\"products/archiveProduct\", productIds, function (error, result) {\n        let title;\n        if (error) {\n          title = products.length === 1 ?\n            products[0].title || i18next.t(\"productDetail.archiveErrorTheProduct\") :\n            i18next.t(\"productDetail.theSelectedProducts\");\n          Alerts.toast(i18next.t(\"productDetail.productArchiveError\", { product: title }), \"error\");\n          throw new Meteor.Error(\"Error archiving \" + title, error);\n        }\n        if (result) {\n          Router.go(\"/\");\n          if (products.length === 1) {\n            title = products[0].title || i18next.t(\"productDetail.theProduct\");\n            Alerts.toast(i18next.t(\"productDetail.archivedAlert\", { product: title }), \"info\");\n          } else {\n            title = i18next.t(\"productDetail.theSelectedProducts\");\n            Alerts.toast(i18next.t(\"productDetail.archivedAlert_plural\", { product: title, count: 0 }), \"info\");\n          }\n        }\n      });\n    }\n  });\n};\n\nReactionProduct.isAncestorDeleted = function (product, includeSelf) {\n  const productIds = [\n    ...product.ancestors // Avoid mutations\n  ];\n\n  if (includeSelf) {\n    productIds.push(product._id);\n  }\n\n  // Verify there are no deleted ancestors,\n  // Variants cannot be restored if their parent product / variant is deleted\n  const archivedCount = Revisions.find({\n    \"documentId\": { $in: productIds },\n    \"documentData.isDeleted\": true,\n    \"workflow.status\": {\n      $nin: [\n        \"revision/published\"\n      ]\n    }\n  }).count();\n\n  if (archivedCount > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default ReactionProduct;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/api/products.js.map","sourceFileName":"/lib/api/products.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"products"},"ignored":false,"code":"function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nmodule.export({\n  applyProductRevision: function () {\n    return applyProductRevision;\n  }\n});\nvar i18next = void 0;\nmodule.importSync(\"i18next\", {\n  \"default\": function (v) {\n    i18next = v;\n  }\n}, 0);\nvar orderBy = void 0;\nmodule.importSync(\"lodash/orderBy\", {\n  \"default\": function (v) {\n    orderBy = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar ReactiveDict = void 0;\nmodule.importSync(\"meteor/reactive-dict\", {\n  ReactiveDict: function (v) {\n    ReactiveDict = v;\n  }\n}, 3);\nvar Router = void 0;\nmodule.importSync(\"/imports/plugins/core/router/lib\", {\n  Router: function (v) {\n    Router = v;\n  }\n}, 4);\nvar getCurrentTag = void 0,\n    getShopName = void 0;\nmodule.importSync(\"/lib/api\", {\n  getCurrentTag: function (v) {\n    getCurrentTag = v;\n  },\n  getShopName: function (v) {\n    getShopName = v;\n  }\n}, 5);\nvar Products = void 0,\n    Revisions = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Products: function (v) {\n    Products = v;\n  },\n  Revisions: function (v) {\n    Revisions = v;\n  }\n}, 6);\nvar Catalog = void 0;\nmodule.importSync(\"./catalog\", {\n  \"default\": function (v) {\n    Catalog = v;\n  }\n}, 7);\nvar MetaData = void 0;\nmodule.importSync(\"/lib/api/router/metadata\", {\n  MetaData: function (v) {\n    MetaData = v;\n  }\n}, 8);\n// ReactionProduct is only intended to be used on the client, but it's placed\n// in common code because of it is imported by the Products schema\n/**\n *  currentProduct\n *  @summary Reactive current product dependency, ensuring reactive products, without session\n *  @todo this is a messy class implementation, normalize it.\n *  @description\n *  products:\n\n */var ReactionProduct = new ReactiveDict(\"currentProduct\");\n\nfunction applyProductRevision(product) {\n  if (product) {\n    if (product.__revisions && product.__revisions.length) {\n      var cleanProduct = Object.assign({}, product);\n      delete cleanProduct.__revisions;\n      var revisedProduct = void 0; // check for product revisions and set that as the current product\n\n      for (var _iterator = product.__revisions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var revision = _ref;\n\n        if (!revision.parentDocument) {\n          revisedProduct = product.__revisions[0].documentData;\n        }\n      } // if there are no revision to product (image and/or tag only) just set the original product as the product\n\n\n      if (!revisedProduct) {\n        revisedProduct = cleanProduct;\n      }\n\n      return Object.assign({}, revisedProduct, {\n        __published: cleanProduct,\n        __draft: product.__revisions[0]\n      });\n    }\n\n    return product;\n  }\n\n  return null;\n}\n\nReactionProduct.sortProducts = function (products, tag) {\n  var sorted = [];\n  sorted = orderBy(products, // Sort by postion for tag\n  function (product) {\n    return product.positions && product.positions[tag] && product.positions[tag].position;\n  }, // Then by creation date for tag\n  function (product) {\n    return product.positions && product.positions[tag] && product.positions[tag].createdAt;\n  }, // Finally sort by creation date\n  \"createdAt\");\n  return sorted;\n}; /**\n    * setCurrentVariant\n    * @param {String} variantId - set current variantId\n    * @return {undefined}\n    */\n\nReactionProduct.setCurrentVariant = function (variantId) {\n  if (variantId === null) {\n    ReactionProduct.set(\"variantId\", null);\n    ReactionProduct.set(\"variantId\", ReactionProduct.selectedVariantId());\n  }\n\n  if (!variantId) {\n    return;\n  }\n\n  var currentId = ReactionProduct.selectedVariantId();\n\n  if (currentId === variantId) {\n    return;\n  }\n\n  ReactionProduct.set(\"variantId\", variantId);\n}; /**\n    * ReactionProduct.setProduct\n    * this will be deprecated in favor of template.instance data.\n    *\n    * @summary method to set default/parameterized product variant\n    * @param {String} currentProductId - set current productId\n    * @param {String} currentVariantId - set current variantId\n    * @return {Object} product object\n    */\n\nReactionProduct.setProduct = function (currentProductId, currentVariantId) {\n  var productId = currentProductId || Router.getParam(\"handle\");\n  var variantId = currentVariantId || Router.getParam(\"variantId\"); // Find the current product\n\n  var product = Products.findOne({\n    $or: [{\n      handle: productId.toLowerCase()\n    }, // Try the handle (slug) lowercased\n    {\n      handle: productId\n    }, // Otherwise try the handle (slug) untouched\n    {\n      _id: productId\n    } // Last attempt, try the product id\n    ]\n  });\n  productId = product && product._id;\n\n  if (product) {\n    // set the default variant\n    // as the default.\n    if (!variantId) {\n      var variants = ReactionProduct.getTopVariants(productId);\n      variantId = Array.isArray(variants) && variants.length && variants[0]._id || null;\n    } // set in our reactive dictionary\n\n\n    ReactionProduct.set(\"productId\", productId);\n    ReactionProduct.set(\"variantId\", variantId);\n  } // Update the meta data when a product is selected\n\n\n  MetaData.init(Router.current());\n  return applyProductRevision(product);\n}; /**\n    * selectedProductId\n    * @summary get the currently active/requested product\n    * @return {String} currently selected product id\n    */\n\nReactionProduct.selectedProductId = function () {\n  return ReactionProduct.get(\"productId\");\n}; /**\n    * selectedVariantId\n    * @summary get the currently active/requested variant\n    * @return {String} currently selected variant id\n    */\n\nReactionProduct.selectedVariantId = function () {\n  var id = ReactionProduct.get(\"variantId\");\n\n  if (id !== null) {\n    return id;\n  }\n\n  var variants = ReactionProduct.getVariants();\n\n  if (!(variants.length > 0)) {\n    return [];\n  }\n\n  id = variants[0]._id; // ReactionProduct.set(\"variantId\", id);\n\n  return id;\n}; /**\n    * selectedVariant\n    * @summary get the currently active/requested variant object\n    * @return {Object} currently selected variant object\n    */\n\nReactionProduct.selectedVariant = function () {\n  var id = ReactionProduct.selectedVariantId();\n\n  if (typeof id === \"string\") {\n    return applyProductRevision(Products.findOne(id));\n  }\n\n  return [];\n}; /**\n    * selectedProduct\n    * @summary get the currently active/requested product object\n    * @return {Object|undefined} currently selected product cursor\n    */\n\nReactionProduct.selectedProduct = function () {\n  var id = ReactionProduct.selectedProductId();\n\n  if (typeof id === \"string\") {\n    return applyProductRevision(Products.findOne(id));\n  }\n\n  return undefined;\n}; /**\n    * checkChildVariants\n    * @summary return number of child variants for a parent\n    * @param {String} parentVariantId - parentVariantId\n    * @return {Number} count of childVariants for this parentVariantId\n    */\n\nReactionProduct.checkChildVariants = function (parentVariantId) {\n  var childVariants = ReactionProduct.getVariants(parentVariantId);\n  return childVariants.length ? childVariants.length : 0;\n}; /**\n    * checkInventoryVariants\n    * @summary return number of inventory variants for a parent\n    * @param {String} parentVariantId - parentVariantId\n    * @todo could be combined with checkChildVariants in one method\n    * @todo inventoryVariants are deprecated. remove this.\n    * @return {Number} count of inventory variants for this parentVariantId\n    */\n\nReactionProduct.checkInventoryVariants = function (parentVariantId) {\n  var inventoryVariants = ReactionProduct.getVariants(parentVariantId, \"inventory\");\n  return inventoryVariants.length ? inventoryVariants.length : 0;\n}; /**\n    * getVariantPriceRange\n    * @summary get price range of a variant if it has child options.\n    * if no child options, return main price value\n    * @todo remove string return and replace with object\n    * @param {String} [id] - current variant _Id\n    * @return {String} formatted price or price range\n    */\n\nReactionProduct.getVariantPriceRange = function (id) {\n  return Catalog.getVariantPriceRange(id || ReactionProduct.selectedVariant()._id);\n}; /**\n    * getProductPriceRange\n    * @summary get price range of a product\n    * if no only one price available, return it\n    * otherwise return a string range\n    * @todo remove string return and replace with object\n    * @param {String} [id] - current product _id\n    * @return {String} formatted price or price range\n    */\n\nReactionProduct.getProductPriceRange = function (id) {\n  return Catalog.getProductPriceRange(id || ReactionProduct.selectedProductId());\n}; /**\n    * getVariantQuantity\n    * @description middleware method which calls the same named common method.\n    * @todo maybe we could remove this after 1.3. But for now I like how it looks.\n    * @param {Object} doc - variant object\n    * @return {Number} summary of options quantity or top-level variant\n    * inventoryQuantity\n    */\n\nReactionProduct.getVariantQuantity = function (doc) {\n  return Catalog.getVariantQuantity(doc);\n}; /**\n    * @method getVariants\n    * @description Get all parent variants\n    * @summary could be useful for products and for top level variants\n    * @param {String} [id] - product _id\n    * @param {String} [type] - type of variant\n    * @return {Array} Parent variants or empty array\n    */\n\nReactionProduct.getVariants = function (id, type) {\n  return Catalog.getVariants(id || ReactionProduct.selectedProductId(), type);\n}; /**\n    * @method getTopVariants\n    * @description Get only product top level variants\n    * @param {String} [id] - product _id\n    * @return {Array} Product top level variants or empty array\n    */\n\nReactionProduct.getTopVariants = function (id) {\n  return Catalog.getTopVariants(id || ReactionProduct.selectedProductId());\n}; /**\n    * getTag\n    * @summary This needed for naming `positions` object. Method could return `tag`\n    * route name or shop name as default name.\n    * @return {String} tag name or shop name\n    */\n\nReactionProduct.getTag = function () {\n  return getCurrentTag() || getShopName().toLowerCase();\n}; /**\n    * getProductsByTag\n    * @summary method to return tag specific product\n    * @param {String} tag - tag string\n    * @return {Object} - return products collection cursor filtered by tag\n    */\n\nReactionProduct.getProductsByTag = function (tag) {\n  var hashtags = void 0;\n  var newRelatedTags = void 0;\n  var relatedTag = void 0;\n  var relatedTags = void 0;\n  var selector = {};\n\n  if (tag) {\n    hashtags = [];\n    relatedTags = [tag];\n\n    while (relatedTags.length) {\n      newRelatedTags = [];\n\n      for (var _iterator2 = relatedTags, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          relatedTag = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          relatedTag = _i2.value;\n        }\n\n        if (hashtags.indexOf(relatedTag._id) === -1) {\n          hashtags.push(relatedTag._id);\n        }\n      }\n\n      relatedTags = newRelatedTags;\n    }\n\n    selector.hashtags = {\n      $in: hashtags\n    };\n  }\n\n  var cursor = Products.find(selector);\n  return cursor;\n}; /**\n    * publishProduct\n    * @summary product publishing and alert\n    * @param {Object} productOrArray - product Object\n    * @returns {undefined} - returns nothing, and alerts, happen here\n    */\n\nReactionProduct.publishProduct = function (productOrArray) {\n  var products = !_.isArray(productOrArray) ? [productOrArray] : productOrArray; /* eslint no-loop-func: 1 */ //\n  // TODO review process for publishing arrays of product\n  //\n\n  var _loop = function (product) {\n    Meteor.call(\"products/publishProduct\", product._id, function (error, result) {\n      // eslint-disable-line no-loop-func\n      if (error) {\n        Alerts.add(error, \"danger\", {\n          placement: \"productGridItem\",\n          id: product._id\n        });\n        throw new Meteor.Error(\"error publishing product\", error);\n      }\n\n      var alertSettings = {\n        placement: \"productGridItem\",\n        id: product._id,\n        autoHide: true,\n        dismissable: false\n      };\n\n      if (result) {\n        Alerts.add(i18next.t(\"productDetail.publishProductVisible\", {\n          product: product.title\n        }), \"success\", alertSettings);\n      } else {\n        Alerts.add(i18next.t(\"productDetail.publishProductHidden\", {\n          product: product.title\n        }), \"warning\", alertSettings);\n      }\n    });\n  };\n\n  for (var _iterator3 = products, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n    var _ref2;\n\n    if (_isArray3) {\n      if (_i3 >= _iterator3.length) break;\n      _ref2 = _iterator3[_i3++];\n    } else {\n      _i3 = _iterator3.next();\n      if (_i3.done) break;\n      _ref2 = _i3.value;\n    }\n\n    var product = _ref2;\n\n    _loop(product);\n  }\n}; /**\n    * publishProduct\n    * @summary product publishing and alert\n    * @param {Object} productOrArray - product Object\n    * @returns {undefined} - returns nothing, and alerts, happen here\n    */\n\nReactionProduct.toggleVisibility = function (productOrArray) {\n  var products = !_.isArray(productOrArray) ? [productOrArray] : productOrArray;\n\n  var _loop2 = function (product) {\n    Meteor.call(\"products/toggleVisibility\", product._id, function (error, result) {\n      // eslint-disable-line no-loop-func\n      if (error) {\n        Alerts.add(error, \"danger\", {\n          placement: \"productGridItem\",\n          id: product._id\n        });\n        throw new Meteor.Error(\"error publishing product\", error);\n      }\n\n      var alertSettings = {\n        placement: \"productGridItem\",\n        id: product._id,\n        autoHide: true,\n        dismissable: false\n      };\n\n      if (result) {\n        Alerts.add(i18next.t(\"productDetail.publishProductVisible\", {\n          product: product.title\n        }), \"success\", alertSettings);\n      } else {\n        Alerts.add(i18next.t(\"productDetail.publishProductHidden\", {\n          product: product.title\n        }), \"warning\", alertSettings);\n      }\n    });\n  };\n\n  for (var _iterator4 = products, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n    var _ref3;\n\n    if (_isArray4) {\n      if (_i4 >= _iterator4.length) break;\n      _ref3 = _iterator4[_i4++];\n    } else {\n      _i4 = _iterator4.next();\n      if (_i4.done) break;\n      _ref3 = _i4.value;\n    }\n\n    var product = _ref3;\n\n    _loop2(product);\n  }\n}; /**\n    * cloneProduct\n    * @summary product cloning and alert\n    * @param {Object|Array} productOrArray - if this method calls from productGrid\n    * it receives and array with product _id or _ids, but if it calls from PDP, when\n    * it receive a `Object` with _id. It needed to determine the source of call.\n    * @returns {undefined} - returns nothing, and alerts, happen here\n    */\n\nReactionProduct.cloneProduct = function (productOrArray) {\n  var products = !Array.isArray(productOrArray) ? [productOrArray] : productOrArray;\n  return Meteor.call(\"products/cloneProduct\", products, function (error, result) {\n    if (error) {\n      Alerts.add(error, \"danger\", {\n        placement: \"productGridItem\"\n      });\n      throw new Meteor.Error(\"error cloning product\", error);\n    }\n\n    if (result) {\n      if (products.length === 1) {\n        Alerts.add(i18next.t(\"productDetail.clonedAlert\", {\n          product: products[0].title\n        }), \"success\", {\n          placement: \"productGridItem\",\n          id: products[0]._id,\n          autoHide: true,\n          dismissable: false\n        });\n      } else {\n        Alerts.add(i18next.t(\"productDetail.clonedAlert_plural\", {\n          product: i18next.t(\"productDetail.theSelectedProducts\"),\n          count: 0\n        }), \"success\", {\n          placement: \"productGridItem\",\n          id: products[0]._id,\n          autoHide: true,\n          dismissable: false\n        });\n      }\n    } // this statement allow us to redirect to a new clone PDP if clone action\n    // was fired within PDP, not within productGrid.\n\n\n    if (!Array.isArray(productOrArray)) {\n      Router.go(\"product\", {\n        handle: result[0]\n      });\n    }\n  });\n}; /**\n    * archiveProduct\n    * @summary confirm to archive product\n    * @param {Object} productOrArray - product Object\n    * @returns {undefined} - returns nothing, and alerts, happen here\n    */\n\nReactionProduct.archiveProduct = function (productOrArray) {\n  var products = !_.isArray(productOrArray) ? [productOrArray] : productOrArray;\n\n  var productIds = _.map(products, function (product) {\n    return typeof product === \"string\" ? product : product._id;\n  });\n\n  var confirmTitle = void 0; // we have to use so difficult logic with `length` check because of some\n  // languages, which have different phrase forms for each of cases.\n  // we are using i18next `plural` functionality here.\n  // @see: http://i18next.com/translate/pluralSimple\n\n  if (products.length === 1) {\n    confirmTitle = i18next.t(\"productDetailEdit.archiveThisProduct\");\n  } else {\n    confirmTitle = i18next.t(\"productDetailEdit.archiveSelectedProducts\");\n  }\n\n  Alerts.alert({\n    title: confirmTitle,\n    type: \"warning\",\n    showCancelButton: true,\n    confirmButtonText: \"Archive\"\n  }, function (isConfirm) {\n    if (isConfirm) {\n      Meteor.call(\"products/archiveProduct\", productIds, function (error, result) {\n        var title = void 0;\n\n        if (error) {\n          title = products.length === 1 ? products[0].title || i18next.t(\"productDetail.archiveErrorTheProduct\") : i18next.t(\"productDetail.theSelectedProducts\");\n          Alerts.toast(i18next.t(\"productDetail.productArchiveError\", {\n            product: title\n          }), \"error\");\n          throw new Meteor.Error(\"Error archiving \" + title, error);\n        }\n\n        if (result) {\n          Router.go(\"/\");\n\n          if (products.length === 1) {\n            title = products[0].title || i18next.t(\"productDetail.theProduct\");\n            Alerts.toast(i18next.t(\"productDetail.archivedAlert\", {\n              product: title\n            }), \"info\");\n          } else {\n            title = i18next.t(\"productDetail.theSelectedProducts\");\n            Alerts.toast(i18next.t(\"productDetail.archivedAlert_plural\", {\n              product: title,\n              count: 0\n            }), \"info\");\n          }\n        }\n      });\n    }\n  });\n};\n\nReactionProduct.isAncestorDeleted = function (product, includeSelf) {\n  var productIds = [].concat(_toConsumableArray(product.ancestors));\n\n  if (includeSelf) {\n    productIds.push(product._id);\n  } // Verify there are no deleted ancestors,\n  // Variants cannot be restored if their parent product / variant is deleted\n\n\n  var archivedCount = Revisions.find({\n    \"documentId\": {\n      $in: productIds\n    },\n    \"documentData.isDeleted\": true,\n    \"workflow.status\": {\n      $nin: [\"revision/published\"]\n    }\n  }).count();\n\n  if (archivedCount > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.export(\"default\", exports.default = ReactionProduct);","map":{"version":3,"sources":["/lib/api/products.js"],"names":["i18next","orderBy","Meteor","ReactiveDict","Router","getCurrentTag","getShopName","Products","Revisions","Catalog","MetaData","ReactionProduct","applyProductRevision","product","__revisions","length","cleanProduct","Object","assign","revisedProduct","revision","parentDocument","documentData","__published","__draft","sortProducts","products","tag","sorted","positions","position","createdAt","setCurrentVariant","variantId","set","selectedVariantId","currentId","setProduct","currentProductId","currentVariantId","productId","getParam","findOne","$or","handle","toLowerCase","_id","variants","getTopVariants","Array","isArray","init","current","selectedProductId","get","id","getVariants","selectedVariant","selectedProduct","undefined","checkChildVariants","parentVariantId","childVariants","checkInventoryVariants","inventoryVariants","getVariantPriceRange","getProductPriceRange","getVariantQuantity","doc","type","getTag","getProductsByTag","hashtags","newRelatedTags","relatedTag","relatedTags","selector","indexOf","push","$in","cursor","find","publishProduct","productOrArray","_","call","error","result","Alerts","add","placement","Error","alertSettings","autoHide","dismissable","t","title","toggleVisibility","cloneProduct","count","go","archiveProduct","productIds","map","confirmTitle","alert","showCancelButton","confirmButtonText","isConfirm","toast","isAncestorDeleted","includeSelf","ancestors","archivedCount","$nin"],"mappings":"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","file":"/lib/api/products.js.map","sourcesContent":["import i18next from \"i18next\";\nimport orderBy from \"lodash/orderBy\";\nimport { Meteor } from \"meteor/meteor\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { Router } from \"/imports/plugins/core/router/lib\";\nimport { getCurrentTag, getShopName } from \"/lib/api\";\nimport { Products, Revisions } from \"/lib/collections\";\nimport Catalog from \"./catalog\";\nimport { MetaData } from \"/lib/api/router/metadata\";\n\n// ReactionProduct is only intended to be used on the client, but it's placed\n// in common code because of it is imported by the Products schema\n\n/**\n *  currentProduct\n *  @summary Reactive current product dependency, ensuring reactive products, without session\n *  @todo this is a messy class implementation, normalize it.\n *  @description\n *  products:\n\n */\nconst ReactionProduct = new ReactiveDict(\"currentProduct\");\n\nexport function applyProductRevision(product) {\n  if (product) {\n    if (product.__revisions && product.__revisions.length) {\n      const cleanProduct = Object.assign({}, product);\n      delete cleanProduct.__revisions;\n      let revisedProduct;\n      // check for product revisions and set that as the current product\n      for (const revision of product.__revisions) {\n        if (!revision.parentDocument) {\n          revisedProduct = product.__revisions[0].documentData;\n        }\n      }\n\n      // if there are no revision to product (image and/or tag only) just set the original product as the product\n      if (!revisedProduct) {\n        revisedProduct = cleanProduct;\n      }\n      return Object.assign({},\n        revisedProduct,\n        {\n          __published: cleanProduct,\n          __draft: product.__revisions[0]\n        }\n      );\n    }\n    return product;\n  }\n\n  return null;\n}\n\nReactionProduct.sortProducts = (products, tag) => {\n  let sorted = [];\n\n  sorted = orderBy(products,\n    // Sort by postion for tag\n    (product) => {\n      return product.positions && product.positions[tag] && product.positions[tag].position;\n    },\n    // Then by creation date for tag\n    (product) => {\n      return product.positions && product.positions[tag] && product.positions[tag].createdAt;\n    },\n    // Finally sort by creation date\n    \"createdAt\"\n  );\n\n  return sorted;\n};\n\n/**\n * setCurrentVariant\n * @param {String} variantId - set current variantId\n * @return {undefined}\n */\nReactionProduct.setCurrentVariant = (variantId) => {\n  if (variantId === null) {\n    ReactionProduct.set(\"variantId\", null);\n    ReactionProduct.set(\"variantId\", ReactionProduct.selectedVariantId());\n  }\n  if (!variantId) {\n    return;\n  }\n  const currentId = ReactionProduct.selectedVariantId();\n  if (currentId === variantId) {\n    return;\n  }\n  ReactionProduct.set(\"variantId\", variantId);\n};\n\n/**\n * ReactionProduct.setProduct\n * this will be deprecated in favor of template.instance data.\n *\n * @summary method to set default/parameterized product variant\n * @param {String} currentProductId - set current productId\n * @param {String} currentVariantId - set current variantId\n * @return {Object} product object\n */\nReactionProduct.setProduct = (currentProductId, currentVariantId) => {\n  let productId = currentProductId || Router.getParam(\"handle\");\n  let variantId = currentVariantId || Router.getParam(\"variantId\");\n\n  // Find the current product\n  const product = Products.findOne({\n    $or: [\n      { handle: productId.toLowerCase() }, // Try the handle (slug) lowercased\n      { handle: productId }, // Otherwise try the handle (slug) untouched\n      { _id: productId } // Last attempt, try the product id\n    ]\n  });\n\n  productId = product && product._id;\n\n  if (product) {\n    // set the default variant\n    // as the default.\n    if (!variantId) {\n      const variants = ReactionProduct.getTopVariants(productId);\n      variantId = Array.isArray(variants) && variants.length &&\n        variants[0]._id || null;\n    }\n    // set in our reactive dictionary\n    ReactionProduct.set(\"productId\", productId);\n    ReactionProduct.set(\"variantId\", variantId);\n  }\n\n  // Update the meta data when a product is selected\n  MetaData.init(Router.current());\n\n  return applyProductRevision(product);\n};\n\n/**\n * selectedProductId\n * @summary get the currently active/requested product\n * @return {String} currently selected product id\n */\nReactionProduct.selectedProductId = () => ReactionProduct.get(\"productId\");\n\n/**\n * selectedVariantId\n * @summary get the currently active/requested variant\n * @return {String} currently selected variant id\n */\nReactionProduct.selectedVariantId = () => {\n  let id = ReactionProduct.get(\"variantId\");\n  if (id !== null) {\n    return id;\n  }\n  const variants = ReactionProduct.getVariants();\n\n  if (!(variants.length > 0)) {\n    return [];\n  }\n\n  id = variants[0]._id;\n  // ReactionProduct.set(\"variantId\", id);\n  return id;\n};\n\n/**\n * selectedVariant\n * @summary get the currently active/requested variant object\n * @return {Object} currently selected variant object\n */\nReactionProduct.selectedVariant = function () {\n  const id = ReactionProduct.selectedVariantId();\n  if (typeof id === \"string\") {\n    return applyProductRevision(Products.findOne(id));\n  }\n  return [];\n};\n\n/**\n * selectedProduct\n * @summary get the currently active/requested product object\n * @return {Object|undefined} currently selected product cursor\n */\nReactionProduct.selectedProduct = function () {\n  const id = ReactionProduct.selectedProductId();\n  if (typeof id === \"string\") {\n    return applyProductRevision(Products.findOne(id));\n  }\n  return undefined;\n};\n\n/**\n * checkChildVariants\n * @summary return number of child variants for a parent\n * @param {String} parentVariantId - parentVariantId\n * @return {Number} count of childVariants for this parentVariantId\n */\nReactionProduct.checkChildVariants = function (parentVariantId) {\n  const childVariants = ReactionProduct.getVariants(parentVariantId);\n  return childVariants.length ? childVariants.length : 0;\n};\n\n/**\n * checkInventoryVariants\n * @summary return number of inventory variants for a parent\n * @param {String} parentVariantId - parentVariantId\n * @todo could be combined with checkChildVariants in one method\n * @todo inventoryVariants are deprecated. remove this.\n * @return {Number} count of inventory variants for this parentVariantId\n */\nReactionProduct.checkInventoryVariants = function (parentVariantId) {\n  const inventoryVariants = ReactionProduct.getVariants(parentVariantId, \"inventory\");\n  return inventoryVariants.length ? inventoryVariants.length : 0;\n};\n\n/**\n * getVariantPriceRange\n * @summary get price range of a variant if it has child options.\n * if no child options, return main price value\n * @todo remove string return and replace with object\n * @param {String} [id] - current variant _Id\n * @return {String} formatted price or price range\n */\nReactionProduct.getVariantPriceRange = id => Catalog.\n  getVariantPriceRange(id || ReactionProduct.selectedVariant()._id);\n\n/**\n * getProductPriceRange\n * @summary get price range of a product\n * if no only one price available, return it\n * otherwise return a string range\n * @todo remove string return and replace with object\n * @param {String} [id] - current product _id\n * @return {String} formatted price or price range\n */\nReactionProduct.getProductPriceRange = id => Catalog.\n  getProductPriceRange(id || ReactionProduct.selectedProductId());\n\n/**\n * getVariantQuantity\n * @description middleware method which calls the same named common method.\n * @todo maybe we could remove this after 1.3. But for now I like how it looks.\n * @param {Object} doc - variant object\n * @return {Number} summary of options quantity or top-level variant\n * inventoryQuantity\n */\nReactionProduct.getVariantQuantity = doc => Catalog.getVariantQuantity(doc);\n\n/**\n * @method getVariants\n * @description Get all parent variants\n * @summary could be useful for products and for top level variants\n * @param {String} [id] - product _id\n * @param {String} [type] - type of variant\n * @return {Array} Parent variants or empty array\n */\nReactionProduct.getVariants = (id, type) => {\n  return Catalog.getVariants(id || ReactionProduct.selectedProductId(), type);\n};\n\n/**\n * @method getTopVariants\n * @description Get only product top level variants\n * @param {String} [id] - product _id\n * @return {Array} Product top level variants or empty array\n */\nReactionProduct.getTopVariants = id => {\n  return Catalog.getTopVariants(id || ReactionProduct.selectedProductId());\n};\n\n/**\n * getTag\n * @summary This needed for naming `positions` object. Method could return `tag`\n * route name or shop name as default name.\n * @return {String} tag name or shop name\n */\nReactionProduct.getTag = () => {\n  return getCurrentTag() || getShopName().toLowerCase();\n};\n\n/**\n * getProductsByTag\n * @summary method to return tag specific product\n * @param {String} tag - tag string\n * @return {Object} - return products collection cursor filtered by tag\n */\nReactionProduct.getProductsByTag = function (tag) {\n  let hashtags;\n  let newRelatedTags;\n  let relatedTag;\n  let relatedTags;\n  const selector = {};\n\n  if (tag) {\n    hashtags = [];\n    relatedTags = [tag];\n    while (relatedTags.length) {\n      newRelatedTags = [];\n      for (relatedTag of relatedTags) {\n        if (hashtags.indexOf(relatedTag._id) === -1) {\n          hashtags.push(relatedTag._id);\n        }\n      }\n      relatedTags = newRelatedTags;\n    }\n    selector.hashtags = {\n      $in: hashtags\n    };\n  }\n  const cursor = Products.find(selector);\n  return cursor;\n};\n\n/**\n * publishProduct\n * @summary product publishing and alert\n * @param {Object} productOrArray - product Object\n * @returns {undefined} - returns nothing, and alerts, happen here\n */\nReactionProduct.publishProduct = function (productOrArray) {\n  const products = !_.isArray(productOrArray) ? [productOrArray] : productOrArray;\n  /* eslint no-loop-func: 1 */\n  //\n  // TODO review process for publishing arrays of product\n  //\n  for (const product of products) {\n    Meteor.call(\"products/publishProduct\", product._id, (error, result) => {  // eslint-disable-line no-loop-func\n      if (error) {\n        Alerts.add(error, \"danger\", {\n          placement: \"productGridItem\",\n          id: product._id\n        });\n        throw new Meteor.Error(\"error publishing product\", error);\n      }\n      const alertSettings = {\n        placement: \"productGridItem\",\n        id: product._id,\n        autoHide: true,\n        dismissable: false\n      };\n      if (result) {\n        Alerts.add(i18next.t(\"productDetail.publishProductVisible\", { product: product.title }), \"success\", alertSettings);\n      } else {\n        Alerts.add(i18next.t(\"productDetail.publishProductHidden\", { product: product.title }), \"warning\", alertSettings);\n      }\n    });\n  }\n};\n\n/**\n * publishProduct\n * @summary product publishing and alert\n * @param {Object} productOrArray - product Object\n * @returns {undefined} - returns nothing, and alerts, happen here\n */\nReactionProduct.toggleVisibility = function (productOrArray) {\n  const products = !_.isArray(productOrArray) ? [productOrArray] : productOrArray;\n  for (const product of products) {\n    Meteor.call(\"products/toggleVisibility\", product._id, (error, result) => { // eslint-disable-line no-loop-func\n      if (error) {\n        Alerts.add(error, \"danger\", {\n          placement: \"productGridItem\",\n          id: product._id\n        });\n        throw new Meteor.Error(\"error publishing product\", error);\n      }\n      const alertSettings = {\n        placement: \"productGridItem\",\n        id: product._id,\n        autoHide: true,\n        dismissable: false\n      };\n      if (result) {\n        Alerts.add(i18next.t(\"productDetail.publishProductVisible\", { product: product.title }), \"success\", alertSettings);\n      } else {\n        Alerts.add(i18next.t(\"productDetail.publishProductHidden\", { product: product.title }), \"warning\", alertSettings);\n      }\n    });\n  }\n};\n\n\n/**\n * cloneProduct\n * @summary product cloning and alert\n * @param {Object|Array} productOrArray - if this method calls from productGrid\n * it receives and array with product _id or _ids, but if it calls from PDP, when\n * it receive a `Object` with _id. It needed to determine the source of call.\n * @returns {undefined} - returns nothing, and alerts, happen here\n */\nReactionProduct.cloneProduct = function (productOrArray) {\n  const products = !Array.isArray(productOrArray) ? [productOrArray] : productOrArray;\n\n  return Meteor.call(\"products/cloneProduct\", products, function (error, result) {\n    if (error) {\n      Alerts.add(error, \"danger\", { placement: \"productGridItem\" });\n      throw new Meteor.Error(\"error cloning product\", error);\n    }\n    if (result) {\n      if (products.length === 1) {\n        Alerts.add(i18next.t(\"productDetail.clonedAlert\", { product: products[0].title }), \"success\", {\n          placement: \"productGridItem\",\n          id: products[0]._id,\n          autoHide: true,\n          dismissable: false\n        });\n      } else {\n        Alerts.add(i18next.t(\"productDetail.clonedAlert_plural\", { product: i18next.t(\"productDetail.theSelectedProducts\"), count: 0 }),\n          \"success\", {\n            placement: \"productGridItem\",\n            id: products[0]._id,\n            autoHide: true,\n            dismissable: false\n          }\n        );\n      }\n    }\n    // this statement allow us to redirect to a new clone PDP if clone action\n    // was fired within PDP, not within productGrid.\n    if (!Array.isArray(productOrArray)) {\n      Router.go(\"product\", {\n        handle: result[0]\n      });\n    }\n  });\n};\n\n/**\n * archiveProduct\n * @summary confirm to archive product\n * @param {Object} productOrArray - product Object\n * @returns {undefined} - returns nothing, and alerts, happen here\n */\nReactionProduct.archiveProduct = function (productOrArray) {\n  const products = !_.isArray(productOrArray) ? [productOrArray] : productOrArray;\n  const productIds = _.map(products, product => typeof product === \"string\" ? product : product._id);\n  let confirmTitle;\n  // we have to use so difficult logic with `length` check because of some\n  // languages, which have different phrase forms for each of cases.\n  // we are using i18next `plural` functionality here.\n  // @see: http://i18next.com/translate/pluralSimple\n  if (products.length === 1) {\n    confirmTitle = i18next.t(\"productDetailEdit.archiveThisProduct\");\n  } else {\n    confirmTitle = i18next.t(\"productDetailEdit.archiveSelectedProducts\");\n  }\n\n  Alerts.alert({\n    title: confirmTitle,\n    type: \"warning\",\n    showCancelButton: true,\n    confirmButtonText: \"Archive\"\n  }, (isConfirm) => {\n    if (isConfirm) {\n      Meteor.call(\"products/archiveProduct\", productIds, function (error, result) {\n        let title;\n        if (error) {\n          title = products.length === 1 ?\n            products[0].title || i18next.t(\"productDetail.archiveErrorTheProduct\") :\n            i18next.t(\"productDetail.theSelectedProducts\");\n          Alerts.toast(i18next.t(\"productDetail.productArchiveError\", { product: title }), \"error\");\n          throw new Meteor.Error(\"Error archiving \" + title, error);\n        }\n        if (result) {\n          Router.go(\"/\");\n          if (products.length === 1) {\n            title = products[0].title || i18next.t(\"productDetail.theProduct\");\n            Alerts.toast(i18next.t(\"productDetail.archivedAlert\", { product: title }), \"info\");\n          } else {\n            title = i18next.t(\"productDetail.theSelectedProducts\");\n            Alerts.toast(i18next.t(\"productDetail.archivedAlert_plural\", { product: title, count: 0 }), \"info\");\n          }\n        }\n      });\n    }\n  });\n};\n\nReactionProduct.isAncestorDeleted = function (product, includeSelf) {\n  const productIds = [\n    ...product.ancestors // Avoid mutations\n  ];\n\n  if (includeSelf) {\n    productIds.push(product._id);\n  }\n\n  // Verify there are no deleted ancestors,\n  // Variants cannot be restored if their parent product / variant is deleted\n  const archivedCount = Revisions.find({\n    \"documentId\": { $in: productIds },\n    \"documentData.isDeleted\": true,\n    \"workflow.status\": {\n      $nin: [\n        \"revision/published\"\n      ]\n    }\n  }).count();\n\n  if (archivedCount > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default ReactionProduct;\n"]},"hash":"f57fc0306dfd656e8a6e576f20b77ec301e74f55"}
