{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":["Media"],"specifiers":[{"kind":"local","local":"Media","exported":"Media"}]}}},"options":{"filename":"/lib/collections/collectionFS.js","filenameRelative":"/lib/collections/collectionFS.js","inputSourceMap":{"version":3,"sources":["/lib/collections/collectionFS.js"],"names":["FS","HTTP","setBaseUrl","setHeadersForGet","Media","Collection","stores","Store","GridFS","chunkSize","transformWrite","fileObj","readStream","writeStream","gm","isAvailable","name","resize","stream","pipe","gravity","extent","filter","allow","contentTypes"],"mappings":"AAAA;;WAGA,AAAG,AAAK,AAAW;;;;;GACnB,GAAA,AAAG,KAAK,WAAR,AAAyB,AACvB,AAAC,AAAiB,AAGpB,A;2EAMA,AAAO,AAAM,AAAQ,AAAI,AAAG,AAAW,AAAS,AAC9C,AAAQ,AACN,AAAI,AAAG,AAAM,AAAO,AAAS,AAC3B,AAAW,AAAI,AAAO,AACpB,AAAI,AAAG,AAAM,AAAO,AAAS,AAC/B,AAAW,AAAI,AAAO,AACtB,AAAgB,AAAU,AAAS,AAAY,AAAa,AAC1D;;;;;AAAI,IAAG,YAAa;kBAGb;eACM,IAAX,AAAgB,OAAhB,AACD;AADC,GAJF,CACE,AAAG,AAAY,AAAQ,AAAM,AAAO,AAAQ,AAAQ,AACjD,AAAK,AACT;0BATC,AAGF,AAA6B;AAU7B,AAAI,AAAG,AAAM,oBAAb,AAAoB,UAApB,AAA8B,kCAChC;aAAW,AAAI,AAAO,aADU,AAEhC;WAAgB,YAAU,QAAV,MAAmB,OAAnB,AAA+B,gBAA/B,AAA4C,AAC1D,AAAI,SAAG,KAAP,AAAoB,AAClB;AAAG,aADL,AACE,AAAe,AAAQ,AAAM,AAAO,AAAO,AAAO,AAAS,AACzD,AACH;AAAM,wBACL;AAAA,AAAW,AAAK,AACjB;AACF;AAVA;AAWC,AAAI,AAAG,eAAH,AAAS,IAAb,AAAoB,OAApB,AAA6B,AAC/B;AAAW,AAAI,oBADgB,AACpB,AAAW,4CACtB;aAAgB,aAAA,AAAU,AAAS,AAAY,AAAa,AAC1D;AAAI,WAAJ,AAAO,YAAa,4CAClB,AAAG,KADL,AACE,AAAe,AAAO,AAAO,AAAQ,AAAK,AAAQ,AAC/C,AAAO,AAAO,AAAO,AAAO,AAAO,AAAK,AAC5C;AAAM,aACL;AAAW,mBAAX,AAAgB,KAAhB,AACD;AACF;AAhCG,AAuBF,AAA6B,AAU7B;AAjCE,AAaF,AAA8B,UAoBvB,GAAH,AAAS,MAAb,AAAoB;AACX,eAAI,IAAJ,AAAW,OADa,AAEnC;AAAgB,oBAAU,UAAV,AAAmB,SAAnB,AAA+B,YAA/B,AAA4C,aAC1D;AAAI,UAAG,GAAP,AAAoB,aAClB;AAAG,WAAH,AAAe,YAAf,AAAsB,OAAtB,AAA6B,OAAQ,QAArC,AAA0C,KAA1C,AAAkD,QADpD,AACE,AACG,AAAO,AAAO,AAAO,AAAO,AAAO,AAAK,AAC5C,UAAM,wCACL;aAAA,AAAW,AAAK,AACjB;wBACF;AA3CyC,AACtC,AAiCF,AAAiC;AAYvC;AAZM,AAAiC,AACnC,GADM;AAaD,0BACL;AAAc,AAAC,oBAAD,4CADT;0BADD;0DA9CH,AAAc,AAA2B;;;;;AA+C5C,GADM;;;;;;AAtCA,CADF","file":"/lib/collections/collectionFS.js.map","sourcesContent":["/**\n * core collectionsFS configurations\n */\nFS.HTTP.setBaseUrl(\"/assets\");\nFS.HTTP.setHeadersForGet([\n  [\"Cache-Control\", \"public, max-age=31536000\"]\n]);\n\n/**\n * Define CollectionFS collection\n * See: https://github.com/CollectionFS/Meteor-CollectionFS\n * chunkSize: 1024*1024*2; <- CFS default // 256k is default GridFS chunk size, but performs terribly\n */\n\nexport const Media = new FS.Collection(\"Media\", {\n  stores: [\n    new FS.Store.GridFS(\"image\", {\n      chunkSize: 1 * 1024 * 1024\n    }), new FS.Store.GridFS(\"large\", {\n      chunkSize: 1 * 1024 * 1024,\n      transformWrite: function (fileObj, readStream, writeStream) {\n        if (gm.isAvailable) {\n          gm(readStream, fileObj.name).resize(\"1000\", \"1000\").stream()\n            .pipe(writeStream);\n        } else {\n          readStream.pipe(writeStream);\n        }\n      }\n    }), new FS.Store.GridFS(\"medium\", {\n      chunkSize: 1 * 1024 * 1024,\n      transformWrite: function (fileObj, readStream, writeStream) {\n        if (gm.isAvailable) {\n          gm(readStream, fileObj.name).resize(\"600\", \"600\").stream().pipe(\n            writeStream);\n        } else {\n          readStream.pipe(writeStream);\n        }\n      }\n    }), new FS.Store.GridFS(\"small\", {\n      chunkSize: 1 * 1024 * 1024,\n      transformWrite: function (fileObj, readStream, writeStream) {\n        if (gm.isAvailable) {\n          gm(readStream).resize(\"235\", \"235\" + \"^\").gravity(\"Center\")\n            .extent(\"235\", \"235\").stream(\"PNG\").pipe(writeStream);\n        } else {\n          readStream.pipe(writeStream);\n        }\n      }\n    }), new FS.Store.GridFS(\"thumbnail\", {\n      chunkSize: 1 * 1024 * 1024,\n      transformWrite: function (fileObj, readStream, writeStream) {\n        if (gm.isAvailable) {\n          gm(readStream).resize(\"100\", \"100\" + \"^\").gravity(\"Center\")\n            .extent(\"100\", \"100\").stream(\"PNG\").pipe(writeStream);\n        } else {\n          readStream.pipe(writeStream);\n        }\n      }\n    })\n  ],\n  filter: {\n    allow: {\n      contentTypes: [\"image/*\"]\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/collections/collectionFS.js.map","sourceFileName":"/lib/collections/collectionFS.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"collectionFS"},"ignored":false,"code":"module.export({\n  Media: function () {\n    return Media;\n  }\n});\n/**\n * core collectionsFS configurations\n */FS.HTTP.setBaseUrl(\"/assets\");\nFS.HTTP.setHeadersForGet([[\"Cache-Control\", \"public, max-age=31536000\"]]); /**\n                                                                            * Define CollectionFS collection\n                                                                            * See: https://github.com/CollectionFS/Meteor-CollectionFS\n                                                                            * chunkSize: 1024*1024*2; <- CFS default // 256k is default GridFS chunk size, but performs terribly\n                                                                            */\nvar Media = new FS.Collection(\"Media\", {\n  stores: [new FS.Store.GridFS(\"image\", {\n    chunkSize: 1 * 1024 * 1024\n  }), new FS.Store.GridFS(\"large\", {\n    chunkSize: 1 * 1024 * 1024,\n    transformWrite: function (fileObj, readStream, writeStream) {\n      if (gm.isAvailable) {\n        gm(readStream, fileObj.name).resize(\"1000\", \"1000\").stream().pipe(writeStream);\n      } else {\n        readStream.pipe(writeStream);\n      }\n    }\n  }), new FS.Store.GridFS(\"medium\", {\n    chunkSize: 1 * 1024 * 1024,\n    transformWrite: function (fileObj, readStream, writeStream) {\n      if (gm.isAvailable) {\n        gm(readStream, fileObj.name).resize(\"600\", \"600\").stream().pipe(writeStream);\n      } else {\n        readStream.pipe(writeStream);\n      }\n    }\n  }), new FS.Store.GridFS(\"small\", {\n    chunkSize: 1 * 1024 * 1024,\n    transformWrite: function (fileObj, readStream, writeStream) {\n      if (gm.isAvailable) {\n        gm(readStream).resize(\"235\", \"235\" + \"^\").gravity(\"Center\").extent(\"235\", \"235\").stream(\"PNG\").pipe(writeStream);\n      } else {\n        readStream.pipe(writeStream);\n      }\n    }\n  }), new FS.Store.GridFS(\"thumbnail\", {\n    chunkSize: 1 * 1024 * 1024,\n    transformWrite: function (fileObj, readStream, writeStream) {\n      if (gm.isAvailable) {\n        gm(readStream).resize(\"100\", \"100\" + \"^\").gravity(\"Center\").extent(\"100\", \"100\").stream(\"PNG\").pipe(writeStream);\n      } else {\n        readStream.pipe(writeStream);\n      }\n    }\n  })],\n  filter: {\n    allow: {\n      contentTypes: [\"image/*\"]\n    }\n  }\n});","map":{"version":3,"sources":["/lib/collections/collectionFS.js"],"names":["FS","HTTP","setBaseUrl","setHeadersForGet","Media","Collection","stores","Store","GridFS","chunkSize","transformWrite","fileObj","readStream","writeStream","gm","isAvailable","name","resize","stream","pipe","gravity","extent","filter","allow","contentTypes"],"mappings":"AAAA;;WAGA,AAAG,AAAK,AAAW;;;;;GACnB,GAAA,AAAG,KAAK,WAAR,AAAyB,AACvB,AAAC,AAAiB,AAGpB,A;2EAMA,AAAO,AAAM,AAAQ,AAAI,AAAG,AAAW,AAAS,AAC9C,AAAQ,AACN,AAAI,AAAG,AAAM,AAAO,AAAS,AAC3B,AAAW,AAAI,AAAO,AACpB,AAAI,AAAG,AAAM,AAAO,AAAS,AAC/B,AAAW,AAAI,AAAO,AACtB,AAAgB,AAAU,AAAS,AAAY,AAAa,AAC1D;;;;;AAAI,IAAG,YAAa;kBAGb;eACM,IAAX,AAAgB,OAAhB,AACD;AADC,GAJF,CACE,AAAG,AAAY,AAAQ,AAAM,AAAO,AAAQ,AAAQ,AACjD,AAAK,AACT;0BATC,AAGF,AAA6B;AAU7B,AAAI,AAAG,AAAM,oBAAb,AAAoB,UAApB,AAA8B,kCAChC;aAAW,AAAI,AAAO,aADU,AAEhC;WAAgB,YAAU,QAAV,MAAmB,OAAnB,AAA+B,gBAA/B,AAA4C,AAC1D,AAAI,SAAG,KAAP,AAAoB,AAClB;AAAG,aADL,AACE,AAAe,AAAQ,AAAM,AAAO,AAAO,AAAO,AAAS,AACzD,AACH;AAAM,wBACL;AAAA,AAAW,AAAK,AACjB;AACF;AAVA;AAWC,AAAI,AAAG,eAAH,AAAS,IAAb,AAAoB,OAApB,AAA6B,AAC/B;AAAW,AAAI,oBADgB,AACpB,AAAW,4CACtB;aAAgB,aAAA,AAAU,AAAS,AAAY,AAAa,AAC1D;AAAI,WAAJ,AAAO,YAAa,4CAClB,AAAG,KADL,AACE,AAAe,AAAO,AAAO,AAAQ,AAAK,AAAQ,AAC/C,AAAO,AAAO,AAAO,AAAO,AAAO,AAAK,AAC5C;AAAM,aACL;AAAW,mBAAX,AAAgB,KAAhB,AACD;AACF;AAhCG,AAuBF,AAA6B,AAU7B;AAjCE,AAaF,AAA8B,UAoBvB,GAAH,AAAS,MAAb,AAAoB;AACX,eAAI,IAAJ,AAAW,OADa,AAEnC;AAAgB,oBAAU,UAAV,AAAmB,SAAnB,AAA+B,YAA/B,AAA4C,aAC1D;AAAI,UAAG,GAAP,AAAoB,aAClB;AAAG,WAAH,AAAe,YAAf,AAAsB,OAAtB,AAA6B,OAAQ,QAArC,AAA0C,KAA1C,AAAkD,QADpD,AACE,AACG,AAAO,AAAO,AAAO,AAAO,AAAO,AAAK,AAC5C,UAAM,wCACL;aAAA,AAAW,AAAK,AACjB;wBACF;AA3CyC,AACtC,AAiCF,AAAiC;AAYvC;AAZM,AAAiC,AACnC,GADM;AAaD,0BACL;AAAc,AAAC,oBAAD,4CADT;0BADD;0DA9CH,AAAc,AAA2B;;;;;AA+C5C,GADM;;;;;;AAtCA,CADF","file":"/lib/collections/collectionFS.js.map","sourcesContent":["/**\n * core collectionsFS configurations\n */\nFS.HTTP.setBaseUrl(\"/assets\");\nFS.HTTP.setHeadersForGet([\n  [\"Cache-Control\", \"public, max-age=31536000\"]\n]);\n\n/**\n * Define CollectionFS collection\n * See: https://github.com/CollectionFS/Meteor-CollectionFS\n * chunkSize: 1024*1024*2; <- CFS default // 256k is default GridFS chunk size, but performs terribly\n */\n\nexport const Media = new FS.Collection(\"Media\", {\n  stores: [\n    new FS.Store.GridFS(\"image\", {\n      chunkSize: 1 * 1024 * 1024\n    }), new FS.Store.GridFS(\"large\", {\n      chunkSize: 1 * 1024 * 1024,\n      transformWrite: function (fileObj, readStream, writeStream) {\n        if (gm.isAvailable) {\n          gm(readStream, fileObj.name).resize(\"1000\", \"1000\").stream()\n            .pipe(writeStream);\n        } else {\n          readStream.pipe(writeStream);\n        }\n      }\n    }), new FS.Store.GridFS(\"medium\", {\n      chunkSize: 1 * 1024 * 1024,\n      transformWrite: function (fileObj, readStream, writeStream) {\n        if (gm.isAvailable) {\n          gm(readStream, fileObj.name).resize(\"600\", \"600\").stream().pipe(\n            writeStream);\n        } else {\n          readStream.pipe(writeStream);\n        }\n      }\n    }), new FS.Store.GridFS(\"small\", {\n      chunkSize: 1 * 1024 * 1024,\n      transformWrite: function (fileObj, readStream, writeStream) {\n        if (gm.isAvailable) {\n          gm(readStream).resize(\"235\", \"235\" + \"^\").gravity(\"Center\")\n            .extent(\"235\", \"235\").stream(\"PNG\").pipe(writeStream);\n        } else {\n          readStream.pipe(writeStream);\n        }\n      }\n    }), new FS.Store.GridFS(\"thumbnail\", {\n      chunkSize: 1 * 1024 * 1024,\n      transformWrite: function (fileObj, readStream, writeStream) {\n        if (gm.isAvailable) {\n          gm(readStream).resize(\"100\", \"100\" + \"^\").gravity(\"Center\")\n            .extent(\"100\", \"100\").stream(\"PNG\").pipe(writeStream);\n        } else {\n          readStream.pipe(writeStream);\n        }\n      }\n    })\n  ],\n  filter: {\n    allow: {\n      contentTypes: [\"image/*\"]\n    }\n  }\n});\n"]},"hash":"12d7aa28e119a9fe31d01b47efa9ace9bcc1ef38"}
