{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/methods/core/workflows/orders.js","filenameRelative":"/server/methods/core/workflows/orders.js","inputSourceMap":{"version":3,"sources":["/server/methods/core/workflows/orders.js"],"names":["Meteor","Reaction","methods","options","check","Match","OrderHookOptions","userId","hasPermission","order","result","_","every","items","item","includes","workflow"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;GACA,AAAS,AAAT,AAAyB,AAAzB,A,AAGA;AAOA,AAAO,AAAP,AAAe,AACb;;;;;;;AAOA,AAAkD,AAAU,AAAV,AAAmB,AACnE,AAAM,AAAN,AAAe,AAAM,AAAN,AAAf,AACA,AAAM,AAAS,AAAQ,AAAvB,AAEA,AAAO,AAAS,AAAT,AAAuB,AAAC,AAAD,AAAvB,AAA6C,AAA7C,AAAP,AACD;;;;;;KAbY,qEAeb;;;;;AAOA,AAAiD,AAAU,AAAV,AAAmB,AAClE,AAAM,AAAN,AAAe,AAAM,AAAN,AAAf,AAEA,AAAM,AAAQ,AAAQ,AAAtB,AAEA,AAAM,AAAS,AAAE,AAAF,AAAQ,AAAM,AAAd,AAAsB,AAAD,AAAU,AAC5C,AAAO,AAAE,AAAF,AAAW,AAAK,AAAL,AAAc,AAAzB,AAAmC,AAAnC,AAAP,AACD,AAFc,AAAf;;;;;;yEAIA;UAAO,AAAP,eACD,AAhCY,AAAf","file":"/server/methods/core/workflows/orders.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Reaction } from \"/server/api\";\n\n\n/**\n *  Step 4 of the \"workflow/pushOrderWorkflow\" flow\n *\tThe following methods are called from Orders.before.update hook.\n *\n *\t@see packages/reaction-schema/common/hooks/orders.js\n *\t@see packages/reaction-core/common/methods/workflow.js\n */\nMeteor.methods({\n  /**\n   * workflow/coreOrderWorkflow/coreOrderProcessing\n   * Workflow method that checks permissions for a given user to allow them to\n   * move an order into the processing phase.\n   * @param  {Object} options An object containing arbitary data\n   * @return {Boolean} true to allow action, false to cancel execution of hook\n   */\n  \"workflow/coreOrderWorkflow/coreOrderProcessing\": function (options) {\n    check(options, Match.OrderHookOptions());\n    const userId = options.userId;\n\n    return Reaction.hasPermission([\"dashboard/orders\"], userId);\n  },\n\n  /**\n   * workflow/coreOrderWorkflow/coreOrderCompleted\n   * Workflow method that performs verios check to determine if an order may be\n   * moved into the completed phase.\n   * @param  {Object} options An object containing arbitary data\n   * @return {Boolean} true to allow action, false to cancel execution of hook\n   */\n  \"workflow/coreOrderWorkflow/coreOrderCompleted\": function (options) {\n    check(options, Match.OrderHookOptions());\n\n    const order = options.order;\n\n    const result = _.every(order.items, (item) => {\n      return _.includes(item.workflow.workflow, \"coreOrderItemWorkflow/completed\");\n    });\n\n    return result;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/methods/core/workflows/orders.js.map","sourceFileName":"/server/methods/core/workflows/orders.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"orders"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 1);\n/**\n *  Step 4 of the \"workflow/pushOrderWorkflow\" flow\n *\tThe following methods are called from Orders.before.update hook.\n *\n *\t@see packages/reaction-schema/common/hooks/orders.js\n *\t@see packages/reaction-core/common/methods/workflow.js\n */Meteor.methods({\n  /**\n   * workflow/coreOrderWorkflow/coreOrderProcessing\n   * Workflow method that checks permissions for a given user to allow them to\n   * move an order into the processing phase.\n   * @param  {Object} options An object containing arbitary data\n   * @return {Boolean} true to allow action, false to cancel execution of hook\n   */\"workflow/coreOrderWorkflow/coreOrderProcessing\": function (options) {\n    check(options, Match.OrderHookOptions());\n    var userId = options.userId;\n    return Reaction.hasPermission([\"dashboard/orders\"], userId);\n  },\n  /**\n   * workflow/coreOrderWorkflow/coreOrderCompleted\n   * Workflow method that performs verios check to determine if an order may be\n   * moved into the completed phase.\n   * @param  {Object} options An object containing arbitary data\n   * @return {Boolean} true to allow action, false to cancel execution of hook\n   */\"workflow/coreOrderWorkflow/coreOrderCompleted\": function (options) {\n    check(options, Match.OrderHookOptions());\n    var order = options.order;\n\n    var result = _.every(order.items, function (item) {\n      return _.includes(item.workflow.workflow, \"coreOrderItemWorkflow/completed\");\n    });\n\n    return result;\n  }\n});","map":{"version":3,"sources":["/server/methods/core/workflows/orders.js"],"names":["Meteor","Reaction","methods","options","check","Match","OrderHookOptions","userId","hasPermission","order","result","_","every","items","item","includes","workflow"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;GACA,AAAS,AAAT,AAAyB,AAAzB,A,AAGA;AAOA,AAAO,AAAP,AAAe,AACb;;;;;;;AAOA,AAAkD,AAAU,AAAV,AAAmB,AACnE,AAAM,AAAN,AAAe,AAAM,AAAN,AAAf,AACA,AAAM,AAAS,AAAQ,AAAvB,AAEA,AAAO,AAAS,AAAT,AAAuB,AAAC,AAAD,AAAvB,AAA6C,AAA7C,AAAP,AACD;;;;;;KAbY,qEAeb;;;;;AAOA,AAAiD,AAAU,AAAV,AAAmB,AAClE,AAAM,AAAN,AAAe,AAAM,AAAN,AAAf,AAEA,AAAM,AAAQ,AAAQ,AAAtB,AAEA,AAAM,AAAS,AAAE,AAAF,AAAQ,AAAM,AAAd,AAAsB,AAAD,AAAU,AAC5C,AAAO,AAAE,AAAF,AAAW,AAAK,AAAL,AAAc,AAAzB,AAAmC,AAAnC,AAAP,AACD,AAFc,AAAf;;;;;;yEAIA;UAAO,AAAP,eACD,AAhCY,AAAf","file":"/server/methods/core/workflows/orders.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Reaction } from \"/server/api\";\n\n\n/**\n *  Step 4 of the \"workflow/pushOrderWorkflow\" flow\n *\tThe following methods are called from Orders.before.update hook.\n *\n *\t@see packages/reaction-schema/common/hooks/orders.js\n *\t@see packages/reaction-core/common/methods/workflow.js\n */\nMeteor.methods({\n  /**\n   * workflow/coreOrderWorkflow/coreOrderProcessing\n   * Workflow method that checks permissions for a given user to allow them to\n   * move an order into the processing phase.\n   * @param  {Object} options An object containing arbitary data\n   * @return {Boolean} true to allow action, false to cancel execution of hook\n   */\n  \"workflow/coreOrderWorkflow/coreOrderProcessing\": function (options) {\n    check(options, Match.OrderHookOptions());\n    const userId = options.userId;\n\n    return Reaction.hasPermission([\"dashboard/orders\"], userId);\n  },\n\n  /**\n   * workflow/coreOrderWorkflow/coreOrderCompleted\n   * Workflow method that performs verios check to determine if an order may be\n   * moved into the completed phase.\n   * @param  {Object} options An object containing arbitary data\n   * @return {Boolean} true to allow action, false to cancel execution of hook\n   */\n  \"workflow/coreOrderWorkflow/coreOrderCompleted\": function (options) {\n    check(options, Match.OrderHookOptions());\n\n    const order = options.order;\n\n    const result = _.every(order.items, (item) => {\n      return _.includes(item.workflow.workflow, \"coreOrderItemWorkflow/completed\");\n    });\n\n    return result;\n  }\n});\n"]},"hash":"8524264d6769069d2a7df6edf289e780069e4da7"}
