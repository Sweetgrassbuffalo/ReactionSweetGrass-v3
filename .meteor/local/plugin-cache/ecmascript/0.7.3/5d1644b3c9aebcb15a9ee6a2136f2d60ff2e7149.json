{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/client/modules/logger","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Logger"}]},{"source":"/lib/collections","imported":["Cart","Shops","Packages"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Shops","local":"Shops"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/imports/plugins/included/payments-paypal/lib/collections/schemas","imported":["PaypalPayment"],"specifiers":[{"kind":"named","imported":"PaypalPayment","local":"PaypalPayment"}]},{"source":"/client/api","imported":["Reaction","i18next"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/imports/plugins/included/payments-paypal/lib/api","imported":["PayPal"],"specifiers":[{"kind":"named","imported":"PayPal","local":"PayPal"}]},{"source":"./payflowForm.html","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/payments-paypal/client/templates/checkout/payflow/payflowForm.js","filenameRelative":"/imports/plugins/included/payments-paypal/client/templates/checkout/payflow/payflowForm.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-paypal/client/templates/checkout/payflow/payflowForm.js"],"names":["Meteor","Template","Logger","Cart","Shops","Packages","PaypalPayment","Reaction","i18next","PayPal","uiEnd","template","buttonText","$","removeAttr","text","addClass","paymentAlert","errorMessage","removeClass","hidePaymentAlert","getError","error","detailSubpart","response","undefined","handlePaypalSubmitError","results","singleError","serverError","errors","length","i","len","thisError","formattedError","issue","field","split","pop","replace","push","t","fatal","paypalPayflowForm","helpers","AutoForm","addHooks","onSubmit","doc","payerNamePieces","payerName","form","first_name","last_name","number","cardNumber","expire_month","expireMonth","expire_year","expireYear","cvv2","cvv","type","getCardType","storedCard","charAt","toUpperCase","slice","authorize","total","findOne","cartTotal","currency","transaction","submitting","saved","normalizedStatus","state","normalizedMode","intent","transactionId","id","authId","transactions","related_resources","authorization","subscribe","packageData","name","shopId","getShopId","paymentMethod","processor","paymentPackageId","_id","paymentSettingsKey","registry","settingsKey","method","metadata","authorizationId","amount","Number","status","mode","createdAt","Date","create_time","updatedAt","update_time","call","beginSubmit","attr","endSubmit"],"mappings":"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","file":"/imports/plugins/included/payments-paypal/client/templates/checkout/payflow/payflowForm.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport Logger from \"/client/modules/logger\";\nimport { Cart, Shops, Packages } from \"/lib/collections\";\nimport { PaypalPayment } from \"/imports/plugins/included/payments-paypal/lib/collections/schemas\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { PayPal } from \"/imports/plugins/included/payments-paypal/lib/api\";\nimport \"./payflowForm.html\";\n\n\nfunction uiEnd(template, buttonText) {\n  template.$(\".cart-checkout-step *\").removeAttr(\"disabled\");\n  template.$(\"#btn-complete-order\").text(buttonText);\n  return template.$(\"#btn-processing\").addClass(\"hidden\");\n}\n\nfunction paymentAlert(errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n}\n\nfunction hidePaymentAlert() {\n  return $(\".alert\").addClass(\"hidden\").text(\"\");\n}\n\nfunction getError(error, detailSubpart) {\n  if (error) {\n    if (error.response) {\n      return error.response[detailSubpart];\n    }\n  }\n  return undefined;\n}\n\nfunction handlePaypalSubmitError(error) {\n  const results = [];\n  const singleError = getError(error, \"error_description\");\n  const serverError = getError(error, \"message\");\n  const errors = getError(error, \"response\") || [];\n  if (singleError) {\n    return paymentAlert(\"Oops! \" + singleError);\n  } else if (errors.length) {\n    for (let i = 0, len = errors.length; i < len; i++) {\n      const thisError = errors[i];\n      const formattedError = \"Oops! \" + thisError.issue + \": \" + thisError.field.split(/[. ]+/).pop().replace(/_/g, \" \");\n      results.push(paymentAlert(formattedError));\n    }\n    return results;\n  } else if (serverError) {\n    // Alerts.toast(i18next.t(\"checkout.unknownError\", { err: serverError }), \"error\");\n    return paymentAlert(i18next.t(\"checkout.paymentMethod.unknownError\"));\n  }\n  Logger.fatal(\"An unknown error has occurred while processing a Paypal payment\");\n  return paymentAlert(i18next.t(\"checkout.paymentMethod.unknownError\"));\n}\n\n//\n// paypal payflow form helpers\n//\nTemplate.paypalPayflowForm.helpers({\n  PaypalPayment: function () {\n    return PaypalPayment;\n  }\n});\n\n//\n// autoform handling\n//\nAutoForm.addHooks(\"paypal-payment-form\", {\n  onSubmit: function (doc) {\n    hidePaymentAlert();\n    const template = this.template;\n    const payerNamePieces = doc.payerName.split(\" \");\n    const form = {\n      first_name: payerNamePieces[0],\n      last_name: payerNamePieces[1],\n      number: doc.cardNumber,\n      expire_month: doc.expireMonth,\n      expire_year: doc.expireYear,\n      cvv2: doc.cvv,\n      type: Reaction.getCardType(doc.cardNumber)\n    };\n    const storedCard = form.type.charAt(0).toUpperCase() + form.type.slice(1) + \" \" + doc.cardNumber.slice(-4);\n    PayPal.authorize(form, {\n      total: Cart.findOne().cartTotal(),\n      currency: Shops.findOne().currency\n    }, function (error, transaction) {\n      submitting = false; // todo: check scope\n      if (error) {\n        handlePaypalSubmitError(error);\n        uiEnd(template, i18next.t(\"checkout.paymentMethod.resubmit\"));\n      } else {\n        if (transaction.saved === true) {\n          const normalizedStatus = (function () {\n            switch (transaction.response.state) {\n              case \"created\":\n                return \"created\";\n              case \"approved\":\n                return \"created\";\n              case \"failed\":\n                return \"failed\";\n              case \"canceled\":\n                return \"canceled\";\n              case \"expired\":\n                return \"expired\";\n              case \"pending\":\n                return \"pending\";\n              default:\n                return \"failed\";\n            }\n          })();\n\n          const normalizedMode = (function () {\n            switch (transaction.response.intent) {\n              case \"sale\":\n                return \"capture\";\n              case \"authorize\":\n                return \"authorize\";\n              case \"order\":\n                return \"capture\";\n              default:\n                return \"capture\";\n            }\n          })();\n\n          // just auth, not transaction\n          const transactionId = transaction.response.id;\n          // when auth and transaction\n          let authId;\n          if (typeof transaction.response.transactions[0].related_resources[0] === \"object\") {\n            authId = transaction.response.transactions[0].related_resources[0].authorization.id;\n          }\n          Meteor.subscribe(\"Packages\");\n          const packageData = Packages.findOne({\n            name: \"reaction-paypal\",\n            shopId: Reaction.getShopId()\n          });\n\n          const paymentMethod = {\n            processor: \"PayflowPro\",\n            paymentPackageId: packageData._id,\n            paymentSettingsKey: packageData.registry[0].settingsKey,\n            storedCard: storedCard,\n            method: \"credit\",\n            authorization: authId,\n            transactionId: transactionId,\n            metadata: {\n              transactionId: transactionId,\n              authorizationId: authId\n            },\n            amount: Number(transaction.response.transactions[0].amount.total),\n            status: normalizedStatus,\n            mode: normalizedMode,\n            createdAt: new Date(transaction.response.create_time),\n            updatedAt: new Date(transaction.response.update_time),\n            transactions: []\n          };\n          paymentMethod.transactions.push(transaction.response);\n          Meteor.call(\"cart/submitPayment\", paymentMethod);\n        } else {\n          handlePaypalSubmitError(transaction.error);\n          uiEnd(template, i18next.t(\"checkout.paymentMethod.resubmit\"));\n        }\n      }\n    });\n    return false;\n  },\n  beginSubmit: function () {\n    this.template.$(\".cart-checkout-step *\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(i18next.t(\"checkout.paymentMethod.submitting\"));\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit: function () {\n    if (!submitting) {\n      return uiEnd(this.template, i18next.t(\"checkout.completeYourOrder\"));\n    }\n    return undefined;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-paypal/client/templates/checkout/payflow/payflowForm.js.map","sourceFileName":"/imports/plugins/included/payments-paypal/client/templates/checkout/payflow/payflowForm.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"payflowForm"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 1);\nvar Logger = void 0;\nmodule.importSync(\"/client/modules/logger\", {\n  \"default\": function (v) {\n    Logger = v;\n  }\n}, 2);\nvar Cart = void 0,\n    Shops = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  },\n  Shops: function (v) {\n    Shops = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 3);\nvar PaypalPayment = void 0;\nmodule.importSync(\"/imports/plugins/included/payments-paypal/lib/collections/schemas\", {\n  PaypalPayment: function (v) {\n    PaypalPayment = v;\n  }\n}, 4);\nvar Reaction = void 0,\n    i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 5);\nvar PayPal = void 0;\nmodule.importSync(\"/imports/plugins/included/payments-paypal/lib/api\", {\n  PayPal: function (v) {\n    PayPal = v;\n  }\n}, 6);\nmodule.importSync(\"./payflowForm.html\");\n\nfunction uiEnd(template, buttonText) {\n  template.$(\".cart-checkout-step *\").removeAttr(\"disabled\");\n  template.$(\"#btn-complete-order\").text(buttonText);\n  return template.$(\"#btn-processing\").addClass(\"hidden\");\n}\n\nfunction paymentAlert(errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n}\n\nfunction hidePaymentAlert() {\n  return $(\".alert\").addClass(\"hidden\").text(\"\");\n}\n\nfunction getError(error, detailSubpart) {\n  if (error) {\n    if (error.response) {\n      return error.response[detailSubpart];\n    }\n  }\n\n  return undefined;\n}\n\nfunction handlePaypalSubmitError(error) {\n  var results = [];\n  var singleError = getError(error, \"error_description\");\n  var serverError = getError(error, \"message\");\n  var errors = getError(error, \"response\") || [];\n\n  if (singleError) {\n    return paymentAlert(\"Oops! \" + singleError);\n  } else if (errors.length) {\n    for (var i = 0, len = errors.length; i < len; i++) {\n      var thisError = errors[i];\n      var formattedError = \"Oops! \" + thisError.issue + \": \" + thisError.field.split(/[. ]+/).pop().replace(/_/g, \" \");\n      results.push(paymentAlert(formattedError));\n    }\n\n    return results;\n  } else if (serverError) {\n    // Alerts.toast(i18next.t(\"checkout.unknownError\", { err: serverError }), \"error\");\n    return paymentAlert(i18next.t(\"checkout.paymentMethod.unknownError\"));\n  }\n\n  Logger.fatal(\"An unknown error has occurred while processing a Paypal payment\");\n  return paymentAlert(i18next.t(\"checkout.paymentMethod.unknownError\"));\n} //\n// paypal payflow form helpers\n//\n\n\nTemplate.paypalPayflowForm.helpers({\n  PaypalPayment: function () {\n    return PaypalPayment;\n  }\n}); //\n// autoform handling\n//\n\nAutoForm.addHooks(\"paypal-payment-form\", {\n  onSubmit: function (doc) {\n    hidePaymentAlert();\n    var template = this.template;\n    var payerNamePieces = doc.payerName.split(\" \");\n    var form = {\n      first_name: payerNamePieces[0],\n      last_name: payerNamePieces[1],\n      number: doc.cardNumber,\n      expire_month: doc.expireMonth,\n      expire_year: doc.expireYear,\n      cvv2: doc.cvv,\n      type: Reaction.getCardType(doc.cardNumber)\n    };\n    var storedCard = form.type.charAt(0).toUpperCase() + form.type.slice(1) + \" \" + doc.cardNumber.slice(-4);\n    PayPal.authorize(form, {\n      total: Cart.findOne().cartTotal(),\n      currency: Shops.findOne().currency\n    }, function (error, transaction) {\n      submitting = false; // todo: check scope\n\n      if (error) {\n        handlePaypalSubmitError(error);\n        uiEnd(template, i18next.t(\"checkout.paymentMethod.resubmit\"));\n      } else {\n        if (transaction.saved === true) {\n          var normalizedStatus = function () {\n            switch (transaction.response.state) {\n              case \"created\":\n                return \"created\";\n\n              case \"approved\":\n                return \"created\";\n\n              case \"failed\":\n                return \"failed\";\n\n              case \"canceled\":\n                return \"canceled\";\n\n              case \"expired\":\n                return \"expired\";\n\n              case \"pending\":\n                return \"pending\";\n\n              default:\n                return \"failed\";\n            }\n          }();\n\n          var normalizedMode = function () {\n            switch (transaction.response.intent) {\n              case \"sale\":\n                return \"capture\";\n\n              case \"authorize\":\n                return \"authorize\";\n\n              case \"order\":\n                return \"capture\";\n\n              default:\n                return \"capture\";\n            }\n          }(); // just auth, not transaction\n\n\n          var transactionId = transaction.response.id; // when auth and transaction\n\n          var authId = void 0;\n\n          if ((0, _typeof3.default)(transaction.response.transactions[0].related_resources[0]) === \"object\") {\n            authId = transaction.response.transactions[0].related_resources[0].authorization.id;\n          }\n\n          Meteor.subscribe(\"Packages\");\n          var packageData = Packages.findOne({\n            name: \"reaction-paypal\",\n            shopId: Reaction.getShopId()\n          });\n          var paymentMethod = {\n            processor: \"PayflowPro\",\n            paymentPackageId: packageData._id,\n            paymentSettingsKey: packageData.registry[0].settingsKey,\n            storedCard: storedCard,\n            method: \"credit\",\n            authorization: authId,\n            transactionId: transactionId,\n            metadata: {\n              transactionId: transactionId,\n              authorizationId: authId\n            },\n            amount: Number(transaction.response.transactions[0].amount.total),\n            status: normalizedStatus,\n            mode: normalizedMode,\n            createdAt: new Date(transaction.response.create_time),\n            updatedAt: new Date(transaction.response.update_time),\n            transactions: []\n          };\n          paymentMethod.transactions.push(transaction.response);\n          Meteor.call(\"cart/submitPayment\", paymentMethod);\n        } else {\n          handlePaypalSubmitError(transaction.error);\n          uiEnd(template, i18next.t(\"checkout.paymentMethod.resubmit\"));\n        }\n      }\n    });\n    return false;\n  },\n  beginSubmit: function () {\n    this.template.$(\".cart-checkout-step *\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(i18next.t(\"checkout.paymentMethod.submitting\"));\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit: function () {\n    if (!submitting) {\n      return uiEnd(this.template, i18next.t(\"checkout.completeYourOrder\"));\n    }\n\n    return undefined;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/payments-paypal/client/templates/checkout/payflow/payflowForm.js"],"names":["Meteor","Template","Logger","Cart","Shops","Packages","PaypalPayment","Reaction","i18next","PayPal","uiEnd","template","buttonText","$","removeAttr","text","addClass","paymentAlert","errorMessage","removeClass","hidePaymentAlert","getError","error","detailSubpart","response","undefined","handlePaypalSubmitError","results","singleError","serverError","errors","length","i","len","thisError","formattedError","issue","field","split","pop","replace","push","t","fatal","paypalPayflowForm","helpers","AutoForm","addHooks","onSubmit","doc","payerNamePieces","payerName","form","first_name","last_name","number","cardNumber","expire_month","expireMonth","expire_year","expireYear","cvv2","cvv","type","getCardType","storedCard","charAt","toUpperCase","slice","authorize","total","findOne","cartTotal","currency","transaction","submitting","saved","normalizedStatus","state","normalizedMode","intent","transactionId","id","authId","transactions","related_resources","authorization","subscribe","packageData","name","shopId","getShopId","paymentMethod","processor","paymentPackageId","_id","paymentSettingsKey","registry","settingsKey","method","metadata","authorizationId","amount","Number","status","mode","createdAt","Date","create_time","updatedAt","update_time","call","beginSubmit","attr","endSubmit"],"mappings":"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","file":"/imports/plugins/included/payments-paypal/client/templates/checkout/payflow/payflowForm.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport Logger from \"/client/modules/logger\";\nimport { Cart, Shops, Packages } from \"/lib/collections\";\nimport { PaypalPayment } from \"/imports/plugins/included/payments-paypal/lib/collections/schemas\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { PayPal } from \"/imports/plugins/included/payments-paypal/lib/api\";\nimport \"./payflowForm.html\";\n\n\nfunction uiEnd(template, buttonText) {\n  template.$(\".cart-checkout-step *\").removeAttr(\"disabled\");\n  template.$(\"#btn-complete-order\").text(buttonText);\n  return template.$(\"#btn-processing\").addClass(\"hidden\");\n}\n\nfunction paymentAlert(errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n}\n\nfunction hidePaymentAlert() {\n  return $(\".alert\").addClass(\"hidden\").text(\"\");\n}\n\nfunction getError(error, detailSubpart) {\n  if (error) {\n    if (error.response) {\n      return error.response[detailSubpart];\n    }\n  }\n  return undefined;\n}\n\nfunction handlePaypalSubmitError(error) {\n  const results = [];\n  const singleError = getError(error, \"error_description\");\n  const serverError = getError(error, \"message\");\n  const errors = getError(error, \"response\") || [];\n  if (singleError) {\n    return paymentAlert(\"Oops! \" + singleError);\n  } else if (errors.length) {\n    for (let i = 0, len = errors.length; i < len; i++) {\n      const thisError = errors[i];\n      const formattedError = \"Oops! \" + thisError.issue + \": \" + thisError.field.split(/[. ]+/).pop().replace(/_/g, \" \");\n      results.push(paymentAlert(formattedError));\n    }\n    return results;\n  } else if (serverError) {\n    // Alerts.toast(i18next.t(\"checkout.unknownError\", { err: serverError }), \"error\");\n    return paymentAlert(i18next.t(\"checkout.paymentMethod.unknownError\"));\n  }\n  Logger.fatal(\"An unknown error has occurred while processing a Paypal payment\");\n  return paymentAlert(i18next.t(\"checkout.paymentMethod.unknownError\"));\n}\n\n//\n// paypal payflow form helpers\n//\nTemplate.paypalPayflowForm.helpers({\n  PaypalPayment: function () {\n    return PaypalPayment;\n  }\n});\n\n//\n// autoform handling\n//\nAutoForm.addHooks(\"paypal-payment-form\", {\n  onSubmit: function (doc) {\n    hidePaymentAlert();\n    const template = this.template;\n    const payerNamePieces = doc.payerName.split(\" \");\n    const form = {\n      first_name: payerNamePieces[0],\n      last_name: payerNamePieces[1],\n      number: doc.cardNumber,\n      expire_month: doc.expireMonth,\n      expire_year: doc.expireYear,\n      cvv2: doc.cvv,\n      type: Reaction.getCardType(doc.cardNumber)\n    };\n    const storedCard = form.type.charAt(0).toUpperCase() + form.type.slice(1) + \" \" + doc.cardNumber.slice(-4);\n    PayPal.authorize(form, {\n      total: Cart.findOne().cartTotal(),\n      currency: Shops.findOne().currency\n    }, function (error, transaction) {\n      submitting = false; // todo: check scope\n      if (error) {\n        handlePaypalSubmitError(error);\n        uiEnd(template, i18next.t(\"checkout.paymentMethod.resubmit\"));\n      } else {\n        if (transaction.saved === true) {\n          const normalizedStatus = (function () {\n            switch (transaction.response.state) {\n              case \"created\":\n                return \"created\";\n              case \"approved\":\n                return \"created\";\n              case \"failed\":\n                return \"failed\";\n              case \"canceled\":\n                return \"canceled\";\n              case \"expired\":\n                return \"expired\";\n              case \"pending\":\n                return \"pending\";\n              default:\n                return \"failed\";\n            }\n          })();\n\n          const normalizedMode = (function () {\n            switch (transaction.response.intent) {\n              case \"sale\":\n                return \"capture\";\n              case \"authorize\":\n                return \"authorize\";\n              case \"order\":\n                return \"capture\";\n              default:\n                return \"capture\";\n            }\n          })();\n\n          // just auth, not transaction\n          const transactionId = transaction.response.id;\n          // when auth and transaction\n          let authId;\n          if (typeof transaction.response.transactions[0].related_resources[0] === \"object\") {\n            authId = transaction.response.transactions[0].related_resources[0].authorization.id;\n          }\n          Meteor.subscribe(\"Packages\");\n          const packageData = Packages.findOne({\n            name: \"reaction-paypal\",\n            shopId: Reaction.getShopId()\n          });\n\n          const paymentMethod = {\n            processor: \"PayflowPro\",\n            paymentPackageId: packageData._id,\n            paymentSettingsKey: packageData.registry[0].settingsKey,\n            storedCard: storedCard,\n            method: \"credit\",\n            authorization: authId,\n            transactionId: transactionId,\n            metadata: {\n              transactionId: transactionId,\n              authorizationId: authId\n            },\n            amount: Number(transaction.response.transactions[0].amount.total),\n            status: normalizedStatus,\n            mode: normalizedMode,\n            createdAt: new Date(transaction.response.create_time),\n            updatedAt: new Date(transaction.response.update_time),\n            transactions: []\n          };\n          paymentMethod.transactions.push(transaction.response);\n          Meteor.call(\"cart/submitPayment\", paymentMethod);\n        } else {\n          handlePaypalSubmitError(transaction.error);\n          uiEnd(template, i18next.t(\"checkout.paymentMethod.resubmit\"));\n        }\n      }\n    });\n    return false;\n  },\n  beginSubmit: function () {\n    this.template.$(\".cart-checkout-step *\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(i18next.t(\"checkout.paymentMethod.submitting\"));\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit: function () {\n    if (!submitting) {\n      return uiEnd(this.template, i18next.t(\"checkout.completeYourOrder\"));\n    }\n    return undefined;\n  }\n});\n"]},"hash":"5d1644b3c9aebcb15a9ee6a2136f2d60ff2e7149"}
