{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./workflow","imported":["Workflow"],"specifiers":[{"kind":"named","imported":"Workflow","local":"Workflow"}]}],"exports":{"exported":["Revisions"],"specifiers":[{"kind":"local","local":"Revisions","exported":"Revisions"}]}}},"options":{"filename":"/lib/collections/schemas/revisions.js","filenameRelative":"/lib/collections/schemas/revisions.js","inputSourceMap":{"version":3,"sources":["/lib/collections/schemas/revisions.js"],"names":["Workflow","Revisions","SimpleSchema","_id","type","String","label","workflow","optional","documentId","documentType","defaultValue","allowedValues","parentDocument","documentData","blackbox","changeType","diff","Object","createdAt","Date","autoValue","isInsert","isUpsert","$setOnInsert","updatedAt","publishAt"],"mappings":"AAAA,OAAS;AAAT;AAAyB,WAAzB;;;;;;;;GAGA,AAAO,AAAM,AAAY,AAAI,AAAa,AACxC,AAAK,AACH;AAAM,IADH;;UAKL;WACA,AACA,AACA;AATwC,AACnC,AAEI;AAQT;AAAU,AACR;AADQ,AACF,AACN;AAbsC,AAW9B,AAEE,AAGZ;;UAAY,AACJ,AACN;AAAO,cAlB+B,AAgB5B,AAKZ,AAAc,AACZ;AANU,AACV;AAKM;UADM,AAEL,AACP;WAxBsC,AAqB1B,AAGE,AACd,AAAe,AAAC,AAAW,AAAS,AAGtC;AAPc,AAEZ;;UAKc,AACR,AACN;WA9BsC,AA4BxB,AAEJ;kBAGZ;AAAc,wCAAA,AACZ,AAAM,AACN,AAAU;AAPI,AACd;AA7BsC;UAsC5B,AACV;AAAM,cADI,AAEV,AAAU,AACV,AAAe,AAAC,AAAU,AAAU;AAHtC;AAtCwC;AA4ClC,UACJ;AAAM,AAAC,cADH,AACE,AACN,AAAU,AACV,AAAU;AAHZ;AA5CwC;UAkD7B,AACT;AAAM,cADG,AAET;AAAW,oBAAY,oBACrB,AAAI,AAAK,AAAU,AACjB,AAAO,AAAI,AACZ;AALL;AAGI;WAGS,AACL;cADK,AACS,AAAI;AADpB,cANK,AASN,AACF;AALQ,AAAI,AAAK,AAAU,AACxB;AAxDkC;UA+D7B,AACT;AADS,AACH,2BACN;eAAW,UAAY,AACrB;AAAO,eAAI,IAHJ,AAGP,AAAO,AACR;gCACD;AAAU;4BAGZ,AAAW,AACT;AAxEsC,AA+D7B;AAQA,AACH,AACN;AAzEG,AAAkB,AAAiB,AAuE7B,AAEC;AAVZ;;;;;;;;;;;;AA5DE","file":"/lib/collections/schemas/revisions.js.map","sourcesContent":["import { Workflow } from \"./workflow\";\n\n\nexport const Revisions = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Revision Id\"\n  },\n\n  // status: {\n  //   type: String,\n  //   label: \"Revision Status\"\n  // },\n\n  workflow: {\n    type: Workflow,\n    optional: false\n  },\n\n  documentId: {\n    type: String,\n    label: \"Reference Document Id\"\n  },\n\n  documentType: {\n    type: String,\n    label: \"Document Type\",\n    defaultValue: \"product\",\n    allowedValues: [\"product\", \"image\", \"tag\"]\n  },\n\n  parentDocument: {\n    type: String,\n    optional: true\n  },\n\n  documentData: {\n    type: \"object\",\n    blackbox: true\n  },\n\n  changeType: {\n    type: String,\n    optional: true,\n    allowedValues: [\"insert\", \"update\", \"remove\"]\n  },\n\n  diff: {\n    type: [Object],\n    blackbox: true,\n    optional: true\n  },\n\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    }\n  },\n\n  updatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date;\n    },\n    optional: true\n  },\n\n  publishAt: {\n    type: Date,\n    optional: true\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/collections/schemas/revisions.js.map","sourceFileName":"/lib/collections/schemas/revisions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"revisions"},"ignored":false,"code":"module.export({\n  Revisions: function () {\n    return Revisions;\n  }\n});\nvar Workflow = void 0;\nmodule.importSync(\"./workflow\", {\n  Workflow: function (v) {\n    Workflow = v;\n  }\n}, 0);\nvar Revisions = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Revision Id\"\n  },\n  // status: {\n  //   type: String,\n  //   label: \"Revision Status\"\n  // },\n  workflow: {\n    type: Workflow,\n    optional: false\n  },\n  documentId: {\n    type: String,\n    label: \"Reference Document Id\"\n  },\n  documentType: {\n    type: String,\n    label: \"Document Type\",\n    defaultValue: \"product\",\n    allowedValues: [\"product\", \"image\", \"tag\"]\n  },\n  parentDocument: {\n    type: String,\n    optional: true\n  },\n  documentData: {\n    type: \"object\",\n    blackbox: true\n  },\n  changeType: {\n    type: String,\n    optional: true,\n    allowedValues: [\"insert\", \"update\", \"remove\"]\n  },\n  diff: {\n    type: [Object],\n    blackbox: true,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date();\n    },\n    optional: true\n  },\n  publishAt: {\n    type: Date,\n    optional: true\n  }\n});","map":{"version":3,"sources":["/lib/collections/schemas/revisions.js"],"names":["Workflow","Revisions","SimpleSchema","_id","type","String","label","workflow","optional","documentId","documentType","defaultValue","allowedValues","parentDocument","documentData","blackbox","changeType","diff","Object","createdAt","Date","autoValue","isInsert","isUpsert","$setOnInsert","updatedAt","publishAt"],"mappings":"AAAA,OAAS;AAAT;AAAyB,WAAzB;;;;;;;;GAGA,AAAO,AAAM,AAAY,AAAI,AAAa,AACxC,AAAK,AACH;AAAM,IADH;;UAKL;WACA,AACA,AACA;AATwC,AACnC,AAEI;AAQT;AAAU,AACR;AADQ,AACF,AACN;AAbsC,AAW9B,AAEE,AAGZ;;UAAY,AACJ,AACN;AAAO,cAlB+B,AAgB5B,AAKZ,AAAc,AACZ;AANU,AACV;AAKM;UADM,AAEL,AACP;WAxBsC,AAqB1B,AAGE,AACd,AAAe,AAAC,AAAW,AAAS,AAGtC;AAPc,AAEZ;;UAKc,AACR,AACN;WA9BsC,AA4BxB,AAEJ;kBAGZ;AAAc,wCAAA,AACZ,AAAM,AACN,AAAU;AAPI,AACd;AA7BsC;UAsC5B,AACV;AAAM,cADI,AAEV,AAAU,AACV,AAAe,AAAC,AAAU,AAAU;AAHtC;AAtCwC;AA4ClC,UACJ;AAAM,AAAC,cADH,AACE,AACN,AAAU,AACV,AAAU;AAHZ;AA5CwC;UAkD7B,AACT;AAAM,cADG,AAET;AAAW,oBAAY,oBACrB,AAAI,AAAK,AAAU,AACjB,AAAO,AAAI,AACZ;AALL;AAGI;WAGS,AACL;cADK,AACS,AAAI;AADpB,cANK,AASN,AACF;AALQ,AAAI,AAAK,AAAU,AACxB;AAxDkC;UA+D7B,AACT;AADS,AACH,2BACN;eAAW,UAAY,AACrB;AAAO,eAAI,IAHJ,AAGP,AAAO,AACR;gCACD;AAAU;4BAGZ,AAAW,AACT;AAxEsC,AA+D7B;AAQA,AACH,AACN;AAzEG,AAAkB,AAAiB,AAuE7B,AAEC;AAVZ;;;;;;;;;;;;AA5DE","file":"/lib/collections/schemas/revisions.js.map","sourcesContent":["import { Workflow } from \"./workflow\";\n\n\nexport const Revisions = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Revision Id\"\n  },\n\n  // status: {\n  //   type: String,\n  //   label: \"Revision Status\"\n  // },\n\n  workflow: {\n    type: Workflow,\n    optional: false\n  },\n\n  documentId: {\n    type: String,\n    label: \"Reference Document Id\"\n  },\n\n  documentType: {\n    type: String,\n    label: \"Document Type\",\n    defaultValue: \"product\",\n    allowedValues: [\"product\", \"image\", \"tag\"]\n  },\n\n  parentDocument: {\n    type: String,\n    optional: true\n  },\n\n  documentData: {\n    type: \"object\",\n    blackbox: true\n  },\n\n  changeType: {\n    type: String,\n    optional: true,\n    allowedValues: [\"insert\", \"update\", \"remove\"]\n  },\n\n  diff: {\n    type: [Object],\n    blackbox: true,\n    optional: true\n  },\n\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    }\n  },\n\n  updatedAt: {\n    type: Date,\n    autoValue: function () {\n      return new Date;\n    },\n    optional: true\n  },\n\n  publishAt: {\n    type: Date,\n    optional: true\n  }\n});\n"]},"hash":"f54ca0b91de2298f15d396560c9251ac83e05301"}
