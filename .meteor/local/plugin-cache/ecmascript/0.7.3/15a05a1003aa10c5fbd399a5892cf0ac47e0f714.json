{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/aldeed:template-extension/lib/template-instance-set.js","filenameRelative":"/packages/aldeed:template-extension/lib/template-instance-set.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/aldeed:template-extension/lib/template-instance-set.js.map","sourceFileName":"/packages/aldeed:template-extension/lib/template-instance-set.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"template-instance-set"},"ignored":false,"code":"// Allow easy setting of template instance's parent (or ancestor) field\nBlaze.TemplateInstance.prototype.set = function () {\n  function set(fieldName, value) {\n    var template = this;\n\n    while (template) {\n      if (fieldName in template) {\n        var previousValue = template[fieldName];\n\n        if (Package['reactive-var'] && previousValue instanceof Package['reactive-var'].ReactiveVar) {\n          template[fieldName].set(value);\n        } else {\n          template[fieldName] = value;\n        }\n\n        return previousValue;\n      }\n\n      template = template.parent(1, true);\n    }\n  }\n\n  return set;\n}();","map":{"version":3,"sources":["/packages/aldeed:template-extension/lib/template-instance-set.js"],"names":["Blaze","TemplateInstance","prototype","set","fieldName","value","template","previousValue","Package","ReactiveVar","parent"],"mappings":"AAAA;AAEAA,MAAMC,gBAAN,CAAuBC,SAAvB,CAAiCC,GAAjC;AAAuC,WAASA,GAAT,CAAaC,SAAb,EAAwBC,KAAxB,EAA+B;AACpE,QAAIC,WAAW,IAAf;;AAEA,WAAOA,QAAP,EAAiB;AACf,UAAIF,aAAaE,QAAjB,EAA2B;AACzB,YAAIC,gBAAgBD,SAASF,SAAT,CAApB;;AACA,YAAII,QAAQ,cAAR,KAA2BD,yBAAyBC,QAAQ,cAAR,EAAwBC,WAAhF,EAA6F;AAC3FH,mBAASF,SAAT,EAAoBD,GAApB,CAAwBE,KAAxB;AACD,SAFD,MAEO;AACLC,mBAASF,SAAT,IAAsBC,KAAtB;AACD;;AACD,eAAOE,aAAP;AACD;;AACDD,iBAAWA,SAASI,MAAT,CAAgB,CAAhB,EAAmB,IAAnB,CAAX;AACD;AACF;;AAfD,SAAgDP,GAAhD;AAAA","file":"/packages/aldeed:template-extension/lib/template-instance-set.js.map","sourcesContent":["// Allow easy setting of template instance's parent (or ancestor) field\n\nBlaze.TemplateInstance.prototype.set = function set(fieldName, value) {\n  var template = this;\n\n  while (template) {\n    if (fieldName in template) {\n      var previousValue = template[fieldName];\n      if (Package['reactive-var'] && previousValue instanceof Package['reactive-var'].ReactiveVar) {\n        template[fieldName].set(value);\n      } else {\n        template[fieldName] = value;\n      }\n      return previousValue;\n    }\n    template = template.parent(1, true);\n  }\n};\n"]},"hash":"15a05a1003aa10c5fbd399a5892cf0ac47e0f714"}
