{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"lodash/isEqual","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_isEqual"}]},{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"react-router","imported":["matchPath"],"specifiers":[{"kind":"named","imported":"matchPath","local":"matchPath"}]},{"source":"react-router-dom","imported":["Router"],"specifiers":[{"kind":"named","imported":"Router","local":"ReactRouter"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"path-to-regexp","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"pathToRegexp"}]},{"source":"query-parse","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"queryParse"}]},{"source":"meteor/session","imported":["Session"],"specifiers":[{"kind":"named","imported":"Session","local":"Session"}]},{"source":"meteor/tracker","imported":["Tracker"],"specifiers":[{"kind":"named","imported":"Tracker","local":"Tracker"}]},{"source":"/imports/plugins/core/router/client/app","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"App"}]},{"source":"../lib","imported":["Router"],"specifiers":[{"kind":"named","imported":"Router","local":"Router"}]},{"source":"/lib/api/router/metadata","imported":["MetaData"],"specifiers":[{"kind":"named","imported":"MetaData","local":"MetaData"}]},{"source":"/imports/plugins/core/ui/client/providers","imported":["TranslationProvider"],"specifiers":[{"kind":"named","imported":"TranslationProvider","local":"TranslationProvider"}]}],"exports":{"exported":["getRootNode","initBrowserRouter"],"specifiers":[{"kind":"local","local":"getRootNode","exported":"getRootNode"},{"kind":"local","local":"initBrowserRouter","exported":"initBrowserRouter"}]}}},"options":{"filename":"/imports/plugins/core/router/client/browserRouter.js","filenameRelative":"/imports/plugins/core/router/client/browserRouter.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/router/client/browserRouter.js"],"names":["React","Component","PropTypes","ReactDOM","matchPath","Router","ReactRouter","Reaction","pathToRegexp","queryParse","Session","Tracker","App","MetaData","TranslationProvider","history","BrowserRouter","propTypes","children","node","object","store","contextTypes","componentWillMount","unsubscribeFromHistory","listen","handleLocationChange","location","componentWillUnmount","foundPaths","routes","filter","pathObject","pathname","path","route","exact","length","replace","undefined","foundPath","params","keys","re","values","exec","forEach","key","index","name","search","startsWith","substr","routeData","fullPath","query","toObject","payload","previousRoute","current","routesAreSame","paramsAreSame","queryParamsAreSame","routesDiffer","Hooks","run","setCurrentRoute","render","props","getRootNode","rootNode","document","getElementById","rootNodeHtml","body","getElementsByTagName","insertAdjacentHTML","initBrowserRouter","initPackageRoutes","reactionContext","indexRoute","get","onEnter","init","autorun","ready","reactComponents"],"mappings":"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","file":"/imports/plugins/core/router/client/browserRouter.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { matchPath } from \"react-router\";\nimport { Router as ReactRouter } from \"react-router-dom\";\nimport { Reaction } from \"/client/api\";\nimport pathToRegexp from \"path-to-regexp\";\nimport { isEqual } from \"lodash\";\nimport queryParse from \"query-parse\";\nimport { Session } from \"meteor/session\";\nimport { Tracker } from \"meteor/tracker\";\nimport App from \"/imports/plugins/core/router/client/app\";\nimport { Router } from \"../lib\";\nimport { MetaData } from \"/lib/api/router/metadata\";\nimport { TranslationProvider } from \"/imports/plugins/core/ui/client/providers\";\n\nconst history = Router.history;\n\nclass BrowserRouter extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    history: PropTypes.object,\n    store: PropTypes.object\n  }\n\n  static contextTypes = {\n    store: PropTypes.object\n  }\n\n  componentWillMount() {\n    this.unsubscribeFromHistory = history.listen(this.handleLocationChange);\n    this.handleLocationChange(history.location);\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribeFromHistory) this.unsubscribeFromHistory();\n  }\n\n  handleLocationChange = location => {\n    // Find all matching paths\n    const foundPaths = Router.routes.filter((pathObject) => {\n      return matchPath(location.pathname, {\n        path: pathObject.route,\n        exact: true\n      });\n    });\n\n    // If no matching pathis, redirect to the not found page\n    if (foundPaths.length === 0 && location.pathname !== \"not-found\") {\n      Router.replace(\"not-found\");\n      return undefined;\n    }\n\n    // If we have a found path, take the first match\n    const foundPath = foundPaths.length && foundPaths[0];\n    const params = {};\n\n    // Process the params from the found path definiton\n    if (foundPath) {\n      const keys = [];\n      const re = pathToRegexp(foundPath.route, keys); // Create parser with route regex\n      const values = re.exec(location.pathname); // Process values\n\n      // Create params object\n      keys.forEach((key, index) => {\n        params[key.name] = values[index + 1];\n      });\n    }\n\n    // Get serach (query) string from current location\n    let search = location.search;\n\n    // Remove the ? if it exists at the beginning\n    if (typeof search === \"string\" && search.startsWith(\"?\")) {\n      search = search.substr(1);\n    }\n\n    // Create objext of all necessary data for the current route\n    const routeData = {\n      route: {\n        ...foundPath,\n        name: foundPath.name,\n        path: location.pathname,\n        fullPath: `${location.pathname}${location.search}`\n      },\n      params,\n      query: queryParse.toObject(search), // Parse query string into object\n      payload: location\n    };\n\n    // Get the previousroute, which is the currentRoute just before it changes\n    const previousRoute = Router.current();\n\n    // If it seems like we've moved to a differen route, then run the onExit\n    // hooks for the previousRoute\n    const routesAreSame = isEqual(previousRoute.route, routeData.route);\n    const paramsAreSame = isEqual(previousRoute.params, routeData.params);\n    const queryParamsAreSame = isEqual(previousRoute.query, routeData.query);\n\n    const routesDiffer = routesAreSame && paramsAreSame && queryParamsAreSame;\n\n    if (routesDiffer === false) {\n      // Run on enter hooks\n      Router.Hooks.run(\"onExit\", \"GLOBAL\", routeData);\n      Router.Hooks.run(\"onExit\", previousRoute.name, previousRoute);\n\n      // Set current route reactive-var\n      Router.setCurrentRoute(routeData);\n\n      // Run on enter hooks for the new route\n      Router.Hooks.run(\"onEnter\", \"GLOBAL\", routeData);\n      Router.Hooks.run(\"onEnter\", routeData.name, routeData);\n    }\n  }\n\n  render() {\n    return (\n      <ReactRouter {...this.props} />\n    );\n  }\n}\n\nexport function getRootNode() {\n  let rootNode = document.getElementById(\"react-root\");\n\n  if (rootNode) {\n    return rootNode;\n  }\n  const rootNodeHtml = \"<div id='react-root'></div>\";\n  const body = document.getElementsByTagName(\"body\")[0];\n\n  body.insertAdjacentHTML(\"beforeend\", rootNodeHtml);\n  rootNode = document.getElementById(\"react-root\");\n\n  return rootNode;\n}\n\nexport function initBrowserRouter() {\n  Router.initPackageRoutes({\n    reactionContext: Reaction,\n    indexRoute: Session.get(\"INDEX_OPTIONS\") || {}\n  });\n\n  Router.Hooks.onEnter(MetaData.init);\n\n  Tracker.autorun(() => {\n    if (Router.ready()) {\n      ReactDOM.render((\n        <BrowserRouter history={history}>\n          <TranslationProvider>\n            <App children={Router.reactComponents} />\n          </TranslationProvider>\n        </BrowserRouter>\n      ), getRootNode());\n    }\n  });\n}\n\nexport default BrowserRouter;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/router/client/browserRouter.js.map","sourceFileName":"/imports/plugins/core/router/client/browserRouter.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"browserRouter"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  getRootNode: function () {\n    return getRootNode;\n  },\n  initBrowserRouter: function () {\n    return initBrowserRouter;\n  }\n});\n\nvar _isEqual = void 0;\n\nmodule.importSync(\"lodash/isEqual\", {\n  \"default\": function (v) {\n    _isEqual = v;\n  }\n}, 0);\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 1);\nvar ReactDOM = void 0;\nmodule.importSync(\"react-dom\", {\n  \"default\": function (v) {\n    ReactDOM = v;\n  }\n}, 2);\nvar matchPath = void 0;\nmodule.importSync(\"react-router\", {\n  matchPath: function (v) {\n    matchPath = v;\n  }\n}, 3);\nvar ReactRouter = void 0;\nmodule.importSync(\"react-router-dom\", {\n  Router: function (v) {\n    ReactRouter = v;\n  }\n}, 4);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 5);\nvar pathToRegexp = void 0;\nmodule.importSync(\"path-to-regexp\", {\n  \"default\": function (v) {\n    pathToRegexp = v;\n  }\n}, 6);\nvar queryParse = void 0;\nmodule.importSync(\"query-parse\", {\n  \"default\": function (v) {\n    queryParse = v;\n  }\n}, 7);\nvar Session = void 0;\nmodule.importSync(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 8);\nvar Tracker = void 0;\nmodule.importSync(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 9);\nvar App = void 0;\nmodule.importSync(\"/imports/plugins/core/router/client/app\", {\n  \"default\": function (v) {\n    App = v;\n  }\n}, 10);\nvar Router = void 0;\nmodule.importSync(\"../lib\", {\n  Router: function (v) {\n    Router = v;\n  }\n}, 11);\nvar MetaData = void 0;\nmodule.importSync(\"/lib/api/router/metadata\", {\n  MetaData: function (v) {\n    MetaData = v;\n  }\n}, 12);\nvar TranslationProvider = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/providers\", {\n  TranslationProvider: function (v) {\n    TranslationProvider = v;\n  }\n}, 13);\nvar history = Router.history;\n\nvar BrowserRouter = function (_Component) {\n  (0, _inherits3.default)(BrowserRouter, _Component);\n\n  function BrowserRouter() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, BrowserRouter);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleLocationChange = function (location) {\n      // Find all matching paths\n      var foundPaths = Router.routes.filter(function (pathObject) {\n        return matchPath(location.pathname, {\n          path: pathObject.route,\n          exact: true\n        });\n      }); // If no matching pathis, redirect to the not found page\n\n      if (foundPaths.length === 0 && location.pathname !== \"not-found\") {\n        Router.replace(\"not-found\");\n        return undefined;\n      } // If we have a found path, take the first match\n\n\n      var foundPath = foundPaths.length && foundPaths[0];\n      var params = {}; // Process the params from the found path definiton\n\n      if (foundPath) {\n        var keys = [];\n        var re = pathToRegexp(foundPath.route, keys); // Create parser with route regex\n\n        var values = re.exec(location.pathname); // Process values\n        // Create params object\n\n        keys.forEach(function (key, index) {\n          params[key.name] = values[index + 1];\n        });\n      } // Get serach (query) string from current location\n\n\n      var search = location.search; // Remove the ? if it exists at the beginning\n\n      if (typeof search === \"string\" && search.startsWith(\"?\")) {\n        search = search.substr(1);\n      } // Create objext of all necessary data for the current route\n\n\n      var routeData = {\n        route: (0, _extends3.default)({}, foundPath, {\n          name: foundPath.name,\n          path: location.pathname,\n          fullPath: \"\" + location.pathname + location.search\n        }),\n        params: params,\n        query: queryParse.toObject(search),\n        // Parse query string into object\n        payload: location\n      }; // Get the previousroute, which is the currentRoute just before it changes\n\n      var previousRoute = Router.current(); // If it seems like we've moved to a differen route, then run the onExit\n      // hooks for the previousRoute\n\n      var routesAreSame = _isEqual(previousRoute.route, routeData.route);\n\n      var paramsAreSame = _isEqual(previousRoute.params, routeData.params);\n\n      var queryParamsAreSame = _isEqual(previousRoute.query, routeData.query);\n\n      var routesDiffer = routesAreSame && paramsAreSame && queryParamsAreSame;\n\n      if (routesDiffer === false) {\n        // Run on enter hooks\n        Router.Hooks.run(\"onExit\", \"GLOBAL\", routeData);\n        Router.Hooks.run(\"onExit\", previousRoute.name, previousRoute); // Set current route reactive-var\n\n        Router.setCurrentRoute(routeData); // Run on enter hooks for the new route\n\n        Router.Hooks.run(\"onEnter\", \"GLOBAL\", routeData);\n        Router.Hooks.run(\"onEnter\", routeData.name, routeData);\n      }\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  BrowserRouter.prototype.componentWillMount = function () {\n    function componentWillMount() {\n      this.unsubscribeFromHistory = history.listen(this.handleLocationChange);\n      this.handleLocationChange(history.location);\n    }\n\n    return componentWillMount;\n  }();\n\n  BrowserRouter.prototype.componentWillUnmount = function () {\n    function componentWillUnmount() {\n      if (this.unsubscribeFromHistory) this.unsubscribeFromHistory();\n    }\n\n    return componentWillUnmount;\n  }();\n\n  BrowserRouter.prototype.render = function () {\n    function render() {\n      return React.createElement(ReactRouter, this.props);\n    }\n\n    return render;\n  }();\n\n  return BrowserRouter;\n}(Component);\n\nBrowserRouter.propTypes = {\n  children: PropTypes.node,\n  history: PropTypes.object,\n  store: PropTypes.object\n};\nBrowserRouter.contextTypes = {\n  store: PropTypes.object\n};\n\nfunction getRootNode() {\n  var rootNode = document.getElementById(\"react-root\");\n\n  if (rootNode) {\n    return rootNode;\n  }\n\n  var rootNodeHtml = \"<div id='react-root'></div>\";\n  var body = document.getElementsByTagName(\"body\")[0];\n  body.insertAdjacentHTML(\"beforeend\", rootNodeHtml);\n  rootNode = document.getElementById(\"react-root\");\n  return rootNode;\n}\n\nfunction initBrowserRouter() {\n  Router.initPackageRoutes({\n    reactionContext: Reaction,\n    indexRoute: Session.get(\"INDEX_OPTIONS\") || {}\n  });\n  Router.Hooks.onEnter(MetaData.init);\n  Tracker.autorun(function () {\n    if (Router.ready()) {\n      ReactDOM.render(React.createElement(\n        BrowserRouter,\n        {\n          history: history\n        },\n        React.createElement(\n          TranslationProvider,\n          null,\n          React.createElement(App, {\n            children: Router.reactComponents\n          })\n        )\n      ), getRootNode());\n    }\n  });\n}\n\nmodule.export(\"default\", exports.default = BrowserRouter);","map":{"version":3,"sources":["/imports/plugins/core/router/client/browserRouter.js"],"names":["React","Component","PropTypes","ReactDOM","matchPath","Router","ReactRouter","Reaction","pathToRegexp","queryParse","Session","Tracker","App","MetaData","TranslationProvider","history","BrowserRouter","propTypes","children","node","object","store","contextTypes","componentWillMount","unsubscribeFromHistory","listen","handleLocationChange","location","componentWillUnmount","foundPaths","routes","filter","pathObject","pathname","path","route","exact","length","replace","undefined","foundPath","params","keys","re","values","exec","forEach","key","index","name","search","startsWith","substr","routeData","fullPath","query","toObject","payload","previousRoute","current","routesAreSame","paramsAreSame","queryParamsAreSame","routesDiffer","Hooks","run","setCurrentRoute","render","props","getRootNode","rootNode","document","getElementById","rootNodeHtml","body","getElementsByTagName","insertAdjacentHTML","initBrowserRouter","initPackageRoutes","reactionContext","indexRoute","get","onEnter","init","autorun","ready","reactComponents"],"mappings":"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","file":"/imports/plugins/core/router/client/browserRouter.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { matchPath } from \"react-router\";\nimport { Router as ReactRouter } from \"react-router-dom\";\nimport { Reaction } from \"/client/api\";\nimport pathToRegexp from \"path-to-regexp\";\nimport { isEqual } from \"lodash\";\nimport queryParse from \"query-parse\";\nimport { Session } from \"meteor/session\";\nimport { Tracker } from \"meteor/tracker\";\nimport App from \"/imports/plugins/core/router/client/app\";\nimport { Router } from \"../lib\";\nimport { MetaData } from \"/lib/api/router/metadata\";\nimport { TranslationProvider } from \"/imports/plugins/core/ui/client/providers\";\n\nconst history = Router.history;\n\nclass BrowserRouter extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    history: PropTypes.object,\n    store: PropTypes.object\n  }\n\n  static contextTypes = {\n    store: PropTypes.object\n  }\n\n  componentWillMount() {\n    this.unsubscribeFromHistory = history.listen(this.handleLocationChange);\n    this.handleLocationChange(history.location);\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribeFromHistory) this.unsubscribeFromHistory();\n  }\n\n  handleLocationChange = location => {\n    // Find all matching paths\n    const foundPaths = Router.routes.filter((pathObject) => {\n      return matchPath(location.pathname, {\n        path: pathObject.route,\n        exact: true\n      });\n    });\n\n    // If no matching pathis, redirect to the not found page\n    if (foundPaths.length === 0 && location.pathname !== \"not-found\") {\n      Router.replace(\"not-found\");\n      return undefined;\n    }\n\n    // If we have a found path, take the first match\n    const foundPath = foundPaths.length && foundPaths[0];\n    const params = {};\n\n    // Process the params from the found path definiton\n    if (foundPath) {\n      const keys = [];\n      const re = pathToRegexp(foundPath.route, keys); // Create parser with route regex\n      const values = re.exec(location.pathname); // Process values\n\n      // Create params object\n      keys.forEach((key, index) => {\n        params[key.name] = values[index + 1];\n      });\n    }\n\n    // Get serach (query) string from current location\n    let search = location.search;\n\n    // Remove the ? if it exists at the beginning\n    if (typeof search === \"string\" && search.startsWith(\"?\")) {\n      search = search.substr(1);\n    }\n\n    // Create objext of all necessary data for the current route\n    const routeData = {\n      route: {\n        ...foundPath,\n        name: foundPath.name,\n        path: location.pathname,\n        fullPath: `${location.pathname}${location.search}`\n      },\n      params,\n      query: queryParse.toObject(search), // Parse query string into object\n      payload: location\n    };\n\n    // Get the previousroute, which is the currentRoute just before it changes\n    const previousRoute = Router.current();\n\n    // If it seems like we've moved to a differen route, then run the onExit\n    // hooks for the previousRoute\n    const routesAreSame = isEqual(previousRoute.route, routeData.route);\n    const paramsAreSame = isEqual(previousRoute.params, routeData.params);\n    const queryParamsAreSame = isEqual(previousRoute.query, routeData.query);\n\n    const routesDiffer = routesAreSame && paramsAreSame && queryParamsAreSame;\n\n    if (routesDiffer === false) {\n      // Run on enter hooks\n      Router.Hooks.run(\"onExit\", \"GLOBAL\", routeData);\n      Router.Hooks.run(\"onExit\", previousRoute.name, previousRoute);\n\n      // Set current route reactive-var\n      Router.setCurrentRoute(routeData);\n\n      // Run on enter hooks for the new route\n      Router.Hooks.run(\"onEnter\", \"GLOBAL\", routeData);\n      Router.Hooks.run(\"onEnter\", routeData.name, routeData);\n    }\n  }\n\n  render() {\n    return (\n      <ReactRouter {...this.props} />\n    );\n  }\n}\n\nexport function getRootNode() {\n  let rootNode = document.getElementById(\"react-root\");\n\n  if (rootNode) {\n    return rootNode;\n  }\n  const rootNodeHtml = \"<div id='react-root'></div>\";\n  const body = document.getElementsByTagName(\"body\")[0];\n\n  body.insertAdjacentHTML(\"beforeend\", rootNodeHtml);\n  rootNode = document.getElementById(\"react-root\");\n\n  return rootNode;\n}\n\nexport function initBrowserRouter() {\n  Router.initPackageRoutes({\n    reactionContext: Reaction,\n    indexRoute: Session.get(\"INDEX_OPTIONS\") || {}\n  });\n\n  Router.Hooks.onEnter(MetaData.init);\n\n  Tracker.autorun(() => {\n    if (Router.ready()) {\n      ReactDOM.render((\n        <BrowserRouter history={history}>\n          <TranslationProvider>\n            <App children={Router.reactComponents} />\n          </TranslationProvider>\n        </BrowserRouter>\n      ), getRootNode());\n    }\n  });\n}\n\nexport default BrowserRouter;\n"]},"hash":"810b9bbb402158c5cdd2c860d3706d968537e9a8"}
