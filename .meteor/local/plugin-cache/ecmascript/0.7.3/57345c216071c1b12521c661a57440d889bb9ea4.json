{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"paypal-rest-sdk","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PayFlow"}]},{"source":"moment","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"moment"}]},{"source":"accounting-js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"accounting"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"/lib/collections","imported":["Shops"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"}]},{"source":"../../lib/api","imported":["PayPal"],"specifiers":[{"kind":"named","imported":"PayPal","local":"PayPal"}]}],"exports":{"exported":["PayflowproApi"],"specifiers":[{"kind":"local","local":"PayflowproApi","exported":"PayflowproApi"}]}}},"options":{"filename":"/imports/plugins/included/payments-paypal/server/methods/payflowproApi.js","filenameRelative":"/imports/plugins/included/payments-paypal/server/methods/payflowproApi.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-paypal/server/methods/payflowproApi.js"],"names":["PayFlow","moment","accounting","Meteor","Reaction","Logger","Shops","PayPal","PayflowproApi","apiCall","paymentSubmit","paymentSubmitDetails","configure","payflowAccountOptions","paymentObj","intent","transactionType","payer","funding_instruments","push","parseCardData","cardData","transactions","parsePaymentData","paymentData","wrappedFunc","wrapAsync","payment","create","result","saved","response","error","warn","captureCharge","paymentCaptureDetails","shop","findOne","getShopId","authorization","capture","wrappedFuncVoid","void","captureTotal","Math","round","parseFloat","amount","captureDetails","currency","total","is_final_capture","capturedAmount","toFixed","authorizationId","metadata","parentPaymentId","parent_payment","captureId","id","rawTransaction","createRefund","refundDetails","refund","debug","type","created","create_time","listRefunds","refundListDetails","listPayments","get","authId","transactionId","transaction","resource","related_resources","_","isObject","state","unix","abs","raw"],"mappings":"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","file":"/imports/plugins/included/payments-paypal/server/methods/payflowproApi.js.map","sourcesContent":["import PayFlow from \"paypal-rest-sdk\"; // PayFlow is PayPal PayFlow lib\nimport moment from \"moment\";\nimport accounting from \"accounting-js\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { Shops } from \"/lib/collections\";\nimport { PayPal } from \"../../lib/api\"; // PayPal is the reaction api\n\nexport const PayflowproApi = {};\nPayflowproApi.apiCall = {};\n\n\nPayflowproApi.apiCall.paymentSubmit = function (paymentSubmitDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  const paymentObj = PayPal.paymentObj();\n  paymentObj.intent = paymentSubmitDetails.transactionType;\n  paymentObj.payer.funding_instruments.push(PayPal.parseCardData(paymentSubmitDetails.cardData));\n  paymentObj.transactions.push(PayPal.parsePaymentData(paymentSubmitDetails.paymentData));\n  const wrappedFunc = Meteor.wrapAsync(PayFlow.payment.create, PayFlow.payment);\n  let result;\n  try {\n    result = {\n      saved: true,\n      response: wrappedFunc(paymentObj)\n    };\n  } catch (error) {\n    Logger.warn(error);\n    result = {\n      saved: false,\n      error: error\n    };\n  }\n  return result;\n};\n\n\nPayflowproApi.apiCall.captureCharge = function (paymentCaptureDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  let result;\n  // TODO: This should be changed to some ReactionCore method\n  const shop = Shops.findOne(Reaction.getShopId());\n  const wrappedFunc = Meteor.wrapAsync(PayFlow.authorization.capture, PayFlow.authorization);\n  const wrappedFuncVoid = Meteor.wrapAsync(PayFlow.authorization.void, PayFlow.authorization);\n  const captureTotal = Math.round(parseFloat(paymentCaptureDetails.amount) * 100) / 100;\n  const captureDetails = {\n    amount: {\n      currency: shop.currency,\n      total: captureTotal\n    },\n    is_final_capture: true // eslint-disable-line camelcase\n  };\n  const capturedAmount = accounting.toFixed(captureDetails.amount.total, 2);\n\n  if (capturedAmount === accounting.toFixed(0, 2)) {\n    try {\n      const response = wrappedFuncVoid(paymentCaptureDetails.authorizationId, captureDetails);\n\n      result = {\n        saved: true,\n        metadata: {\n          parentPaymentId: response.parent_payment,\n          captureId: response.id\n        },\n        rawTransaction: response\n      };\n    } catch (error) {\n      Logger.warn(error);\n      result = {\n        saved: false,\n        error: error\n      };\n    }\n    return result;\n  }\n  try {\n    const response = wrappedFunc(paymentCaptureDetails.authorizationId, captureDetails);\n\n    result = {\n      saved: true,\n      metadata: {\n        parentPaymentId: response.parent_payment,\n        captureId: response.id\n      },\n      rawTransaction: response\n    };\n  } catch (error) {\n    Logger.warn(error);\n    result = {\n      saved: false,\n      error: error\n    };\n  }\n  return result;\n};\n\n\nPayflowproApi.apiCall.createRefund = function (refundDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  const createRefund = Meteor.wrapAsync(PayFlow.capture.refund, PayFlow.capture);\n  let result;\n\n  try {\n    Logger.debug(\"payflowpro/refund/create: paymentMethod.metadata.captureId\", refundDetails.captureId);\n    const response = createRefund(refundDetails.captureId, {\n      amount: {\n        total: refundDetails.amount,\n        currency: \"USD\"\n      }\n    });\n\n    result = {\n      saved: true,\n      type: \"refund\",\n      created: response.create_time,\n      amount: response.amount.total,\n      currency: response.amount.currency,\n      rawTransaction: response\n    };\n  } catch (error) {\n    result = {\n      saved: false,\n      error: error\n    };\n  }\n  return result;\n};\n\n\nPayflowproApi.apiCall.listRefunds = function (refundListDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  const listPayments = Meteor.wrapAsync(PayFlow.payment.get, PayFlow.payment);\n  let result = [];\n  // todo: review parentPaymentId vs authorizationId, are they both correct?\n  // added authorizationId without fully understanding the intent of parentPaymentId\n  // let authId = paymentMethod.metadata.parentPaymentId || paymentMethod.metadata.authorizationId;\n  const authId = refundListDetails.transactionId;\n\n  if (authId) {\n    Logger.debug(\"payflowpro/refund/list: paymentMethod.metadata.parentPaymentId\", authId);\n    try {\n      const response = listPayments(authId);\n\n      for (const transaction of response.transactions) {\n        for (const resource of transaction.related_resources) {\n          if (_.isObject(resource.refund)) {\n            if (resource.refund.state === \"completed\") {\n              result.push({\n                type: \"refund\",\n                created: moment(resource.refund.create_time).unix() * 1000,\n                amount: Math.abs(resource.refund.amount.total),\n                currency: resource.refund.amount.currency,\n                raw: response\n              });\n            }\n          }\n        }\n      }\n    } catch (error) {\n      Logger.warn(\"Failed payflowpro/refund/list\", error);\n      result = {\n        error: error\n      };\n    }\n  }\n  return result;\n};\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-paypal/server/methods/payflowproApi.js.map","sourceFileName":"/imports/plugins/included/payments-paypal/server/methods/payflowproApi.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"payflowproApi"},"ignored":false,"code":"module.export({\n  PayflowproApi: function () {\n    return PayflowproApi;\n  }\n});\nvar PayFlow = void 0;\nmodule.importSync(\"paypal-rest-sdk\", {\n  \"default\": function (v) {\n    PayFlow = v;\n  }\n}, 0);\nvar moment = void 0;\nmodule.importSync(\"moment\", {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 1);\nvar accounting = void 0;\nmodule.importSync(\"accounting-js\", {\n  \"default\": function (v) {\n    accounting = v;\n  }\n}, 2);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 3);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 4);\nvar Shops = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  }\n}, 5);\nvar PayPal = void 0;\nmodule.importSync(\"../../lib/api\", {\n  PayPal: function (v) {\n    PayPal = v;\n  }\n}, 6);\nvar PayflowproApi = {};\nPayflowproApi.apiCall = {};\n\nPayflowproApi.apiCall.paymentSubmit = function (paymentSubmitDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n  var paymentObj = PayPal.paymentObj();\n  paymentObj.intent = paymentSubmitDetails.transactionType;\n  paymentObj.payer.funding_instruments.push(PayPal.parseCardData(paymentSubmitDetails.cardData));\n  paymentObj.transactions.push(PayPal.parsePaymentData(paymentSubmitDetails.paymentData));\n  var wrappedFunc = Meteor.wrapAsync(PayFlow.payment.create, PayFlow.payment);\n  var result = void 0;\n\n  try {\n    result = {\n      saved: true,\n      response: wrappedFunc(paymentObj)\n    };\n  } catch (error) {\n    Logger.warn(error);\n    result = {\n      saved: false,\n      error: error\n    };\n  }\n\n  return result;\n};\n\nPayflowproApi.apiCall.captureCharge = function (paymentCaptureDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n  var result = void 0; // TODO: This should be changed to some ReactionCore method\n\n  var shop = Shops.findOne(Reaction.getShopId());\n  var wrappedFunc = Meteor.wrapAsync(PayFlow.authorization.capture, PayFlow.authorization);\n  var wrappedFuncVoid = Meteor.wrapAsync(PayFlow.authorization.void, PayFlow.authorization);\n  var captureTotal = Math.round(parseFloat(paymentCaptureDetails.amount) * 100) / 100;\n  var captureDetails = {\n    amount: {\n      currency: shop.currency,\n      total: captureTotal\n    },\n    is_final_capture: true // eslint-disable-line camelcase\n\n  };\n  var capturedAmount = accounting.toFixed(captureDetails.amount.total, 2);\n\n  if (capturedAmount === accounting.toFixed(0, 2)) {\n    try {\n      var response = wrappedFuncVoid(paymentCaptureDetails.authorizationId, captureDetails);\n      result = {\n        saved: true,\n        metadata: {\n          parentPaymentId: response.parent_payment,\n          captureId: response.id\n        },\n        rawTransaction: response\n      };\n    } catch (error) {\n      Logger.warn(error);\n      result = {\n        saved: false,\n        error: error\n      };\n    }\n\n    return result;\n  }\n\n  try {\n    var _response = wrappedFunc(paymentCaptureDetails.authorizationId, captureDetails);\n\n    result = {\n      saved: true,\n      metadata: {\n        parentPaymentId: _response.parent_payment,\n        captureId: _response.id\n      },\n      rawTransaction: _response\n    };\n  } catch (error) {\n    Logger.warn(error);\n    result = {\n      saved: false,\n      error: error\n    };\n  }\n\n  return result;\n};\n\nPayflowproApi.apiCall.createRefund = function (refundDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n  var createRefund = Meteor.wrapAsync(PayFlow.capture.refund, PayFlow.capture);\n  var result = void 0;\n\n  try {\n    Logger.debug(\"payflowpro/refund/create: paymentMethod.metadata.captureId\", refundDetails.captureId);\n    var response = createRefund(refundDetails.captureId, {\n      amount: {\n        total: refundDetails.amount,\n        currency: \"USD\"\n      }\n    });\n    result = {\n      saved: true,\n      type: \"refund\",\n      created: response.create_time,\n      amount: response.amount.total,\n      currency: response.amount.currency,\n      rawTransaction: response\n    };\n  } catch (error) {\n    result = {\n      saved: false,\n      error: error\n    };\n  }\n\n  return result;\n};\n\nPayflowproApi.apiCall.listRefunds = function (refundListDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n  var listPayments = Meteor.wrapAsync(PayFlow.payment.get, PayFlow.payment);\n  var result = []; // todo: review parentPaymentId vs authorizationId, are they both correct?\n  // added authorizationId without fully understanding the intent of parentPaymentId\n  // let authId = paymentMethod.metadata.parentPaymentId || paymentMethod.metadata.authorizationId;\n\n  var authId = refundListDetails.transactionId;\n\n  if (authId) {\n    Logger.debug(\"payflowpro/refund/list: paymentMethod.metadata.parentPaymentId\", authId);\n\n    try {\n      var response = listPayments(authId);\n\n      for (var _iterator = response.transactions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var transaction = _ref;\n\n        for (var _iterator2 = transaction.related_resources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n          var _ref2;\n\n          if (_isArray2) {\n            if (_i2 >= _iterator2.length) break;\n            _ref2 = _iterator2[_i2++];\n          } else {\n            _i2 = _iterator2.next();\n            if (_i2.done) break;\n            _ref2 = _i2.value;\n          }\n\n          var resource = _ref2;\n\n          if (_.isObject(resource.refund)) {\n            if (resource.refund.state === \"completed\") {\n              result.push({\n                type: \"refund\",\n                created: moment(resource.refund.create_time).unix() * 1000,\n                amount: Math.abs(resource.refund.amount.total),\n                currency: resource.refund.amount.currency,\n                raw: response\n              });\n            }\n          }\n        }\n      }\n    } catch (error) {\n      Logger.warn(\"Failed payflowpro/refund/list\", error);\n      result = {\n        error: error\n      };\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/imports/plugins/included/payments-paypal/server/methods/payflowproApi.js"],"names":["PayFlow","moment","accounting","Meteor","Reaction","Logger","Shops","PayPal","PayflowproApi","apiCall","paymentSubmit","paymentSubmitDetails","configure","payflowAccountOptions","paymentObj","intent","transactionType","payer","funding_instruments","push","parseCardData","cardData","transactions","parsePaymentData","paymentData","wrappedFunc","wrapAsync","payment","create","result","saved","response","error","warn","captureCharge","paymentCaptureDetails","shop","findOne","getShopId","authorization","capture","wrappedFuncVoid","void","captureTotal","Math","round","parseFloat","amount","captureDetails","currency","total","is_final_capture","capturedAmount","toFixed","authorizationId","metadata","parentPaymentId","parent_payment","captureId","id","rawTransaction","createRefund","refundDetails","refund","debug","type","created","create_time","listRefunds","refundListDetails","listPayments","get","authId","transactionId","transaction","resource","related_resources","_","isObject","state","unix","abs","raw"],"mappings":"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","file":"/imports/plugins/included/payments-paypal/server/methods/payflowproApi.js.map","sourcesContent":["import PayFlow from \"paypal-rest-sdk\"; // PayFlow is PayPal PayFlow lib\nimport moment from \"moment\";\nimport accounting from \"accounting-js\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { Shops } from \"/lib/collections\";\nimport { PayPal } from \"../../lib/api\"; // PayPal is the reaction api\n\nexport const PayflowproApi = {};\nPayflowproApi.apiCall = {};\n\n\nPayflowproApi.apiCall.paymentSubmit = function (paymentSubmitDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  const paymentObj = PayPal.paymentObj();\n  paymentObj.intent = paymentSubmitDetails.transactionType;\n  paymentObj.payer.funding_instruments.push(PayPal.parseCardData(paymentSubmitDetails.cardData));\n  paymentObj.transactions.push(PayPal.parsePaymentData(paymentSubmitDetails.paymentData));\n  const wrappedFunc = Meteor.wrapAsync(PayFlow.payment.create, PayFlow.payment);\n  let result;\n  try {\n    result = {\n      saved: true,\n      response: wrappedFunc(paymentObj)\n    };\n  } catch (error) {\n    Logger.warn(error);\n    result = {\n      saved: false,\n      error: error\n    };\n  }\n  return result;\n};\n\n\nPayflowproApi.apiCall.captureCharge = function (paymentCaptureDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  let result;\n  // TODO: This should be changed to some ReactionCore method\n  const shop = Shops.findOne(Reaction.getShopId());\n  const wrappedFunc = Meteor.wrapAsync(PayFlow.authorization.capture, PayFlow.authorization);\n  const wrappedFuncVoid = Meteor.wrapAsync(PayFlow.authorization.void, PayFlow.authorization);\n  const captureTotal = Math.round(parseFloat(paymentCaptureDetails.amount) * 100) / 100;\n  const captureDetails = {\n    amount: {\n      currency: shop.currency,\n      total: captureTotal\n    },\n    is_final_capture: true // eslint-disable-line camelcase\n  };\n  const capturedAmount = accounting.toFixed(captureDetails.amount.total, 2);\n\n  if (capturedAmount === accounting.toFixed(0, 2)) {\n    try {\n      const response = wrappedFuncVoid(paymentCaptureDetails.authorizationId, captureDetails);\n\n      result = {\n        saved: true,\n        metadata: {\n          parentPaymentId: response.parent_payment,\n          captureId: response.id\n        },\n        rawTransaction: response\n      };\n    } catch (error) {\n      Logger.warn(error);\n      result = {\n        saved: false,\n        error: error\n      };\n    }\n    return result;\n  }\n  try {\n    const response = wrappedFunc(paymentCaptureDetails.authorizationId, captureDetails);\n\n    result = {\n      saved: true,\n      metadata: {\n        parentPaymentId: response.parent_payment,\n        captureId: response.id\n      },\n      rawTransaction: response\n    };\n  } catch (error) {\n    Logger.warn(error);\n    result = {\n      saved: false,\n      error: error\n    };\n  }\n  return result;\n};\n\n\nPayflowproApi.apiCall.createRefund = function (refundDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  const createRefund = Meteor.wrapAsync(PayFlow.capture.refund, PayFlow.capture);\n  let result;\n\n  try {\n    Logger.debug(\"payflowpro/refund/create: paymentMethod.metadata.captureId\", refundDetails.captureId);\n    const response = createRefund(refundDetails.captureId, {\n      amount: {\n        total: refundDetails.amount,\n        currency: \"USD\"\n      }\n    });\n\n    result = {\n      saved: true,\n      type: \"refund\",\n      created: response.create_time,\n      amount: response.amount.total,\n      currency: response.amount.currency,\n      rawTransaction: response\n    };\n  } catch (error) {\n    result = {\n      saved: false,\n      error: error\n    };\n  }\n  return result;\n};\n\n\nPayflowproApi.apiCall.listRefunds = function (refundListDetails) {\n  PayFlow.configure(PayPal.payflowAccountOptions());\n\n  const listPayments = Meteor.wrapAsync(PayFlow.payment.get, PayFlow.payment);\n  let result = [];\n  // todo: review parentPaymentId vs authorizationId, are they both correct?\n  // added authorizationId without fully understanding the intent of parentPaymentId\n  // let authId = paymentMethod.metadata.parentPaymentId || paymentMethod.metadata.authorizationId;\n  const authId = refundListDetails.transactionId;\n\n  if (authId) {\n    Logger.debug(\"payflowpro/refund/list: paymentMethod.metadata.parentPaymentId\", authId);\n    try {\n      const response = listPayments(authId);\n\n      for (const transaction of response.transactions) {\n        for (const resource of transaction.related_resources) {\n          if (_.isObject(resource.refund)) {\n            if (resource.refund.state === \"completed\") {\n              result.push({\n                type: \"refund\",\n                created: moment(resource.refund.create_time).unix() * 1000,\n                amount: Math.abs(resource.refund.amount.total),\n                currency: resource.refund.amount.currency,\n                raw: response\n              });\n            }\n          }\n        }\n      }\n    } catch (error) {\n      Logger.warn(\"Failed payflowpro/refund/list\", error);\n      result = {\n        error: error\n      };\n    }\n  }\n  return result;\n};\n"]},"hash":"57345c216071c1b12521c661a57440d889bb9ea4"}
