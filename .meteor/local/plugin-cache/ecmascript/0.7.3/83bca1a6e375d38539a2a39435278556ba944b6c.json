{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"accounting-js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"accounting"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"meteor/promise","imported":["Promise"],"specifiers":[{"kind":"named","imported":"Promise","local":"Promise"}]},{"source":"@reactioncommerce/authorize-net","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"AuthNetAPI"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"/lib/collections","imported":["Packages"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/lib/collections/schemas","imported":["PaymentMethod"],"specifiers":[{"kind":"named","imported":"PaymentMethod","local":"PaymentMethod"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/payments-authnet/server/methods/authnet.js","filenameRelative":"/imports/plugins/included/payments-authnet/server/methods/authnet.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-authnet/server/methods/authnet.js"],"names":["accounting","Meteor","check","Match","Promise","AuthNetAPI","Reaction","Logger","Packages","PaymentMethod","getAccountOptions","settings","findOne","name","shopId","getShopId","enabled","ref","authnet","options","login","getSettings","tran_key","Error","valueName","undefined","methods","authnetSubmit","transactionType","cardInfo","paymentInfo","String","cardNumber","ValidCardNumber","expirationYear","ValidExpireYear","expirationMonth","ValidExpireMonth","cvv2","ValidCVV","total","currency","order","amount","creditCard","creditCardNumber","authnetService","getAuthnetService","authnetTransactionFunc","authResult","call","error","fatal","result","await","paymentMethod","Schemas","transactionId","roundedAmount","parseFloat","toFixed","capturedAmount","captureResult","voidTransaction","responseCode","saved","response","priorAuthCaptureTransaction","Number","arguments","Any","accountOptions","mode","API_LOGIN_ID","TRANSACTION_KEY","testMode","transId","service","body","refTransId","transactionRequest","sendTransactionRequest","trans","Where","x","test"],"mappings":"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","file":"/imports/plugins/included/payments-authnet/server/methods/authnet.js.map","sourcesContent":["/* eslint camelcase: 0 */\n/* eslint quote-props: 0 */\n// meteor modules\nimport accounting from \"accounting-js\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Promise } from \"meteor/promise\";\n\nimport AuthNetAPI from \"@reactioncommerce/authorize-net\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { Packages } from \"/lib/collections\";\nimport { PaymentMethod } from \"/lib/collections/schemas\";\n\nfunction getAccountOptions() {\n  const settings = Packages.findOne({\n    name: \"reaction-auth-net\",\n    shopId: Reaction.getShopId(),\n    enabled: true\n  }).settings;\n  const ref = Meteor.settings.authnet;\n  const options = {\n    login: getSettings(settings, ref, \"api_id\"),\n    tran_key: getSettings(settings, ref, \"transaction_key\")\n  };\n\n  if (!options.login) {\n    throw new Meteor.Error(\"invalid-credentials\", \"Invalid Authnet Credentials\");\n  }\n  return options;\n}\n\nfunction getSettings(settings, ref, valueName) {\n  if (settings !== null) {\n    return settings[valueName];\n  } else if (ref !== null) {\n    return ref[valueName];\n  }\n  return undefined;\n}\n\nMeteor.methods({\n  authnetSubmit: function (transactionType = \"authorizeTransaction\", cardInfo, paymentInfo) {\n    check(transactionType, String);\n    check(cardInfo, {\n      cardNumber: ValidCardNumber,\n      expirationYear: ValidExpireYear,\n      expirationMonth: ValidExpireMonth,\n      cvv2: ValidCVV\n    });\n    check(paymentInfo, {\n      total: String,\n      currency: String\n    });\n\n    const order = {\n      amount: paymentInfo.total\n    };\n    const creditCard = {\n      creditCardNumber: cardInfo.cardNumber,\n      cvv2: cardInfo.cvv2,\n      expirationYear: cardInfo.expirationYear,\n      expirationMonth: cardInfo.expirationMonth\n    };\n    const authnetService = getAuthnetService(getAccountOptions());\n    const authnetTransactionFunc = authnetService[transactionType];\n    let authResult;\n    if (authnetTransactionFunc) {\n      try {\n        authResult = authnetTransactionFunc.call(authnetService,\n          order,\n          creditCard\n        );\n      } catch (error) {\n        Logger.fatal(error);\n      }\n    } else {\n      throw new Meteor.Error(\"403\", \"Invalid Transaction Type\");\n    }\n\n    const result =  Promise.await(authResult);\n    return result;\n  },\n\n  \"authnet/payment/capture\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    const {\n      transactionId,\n      amount\n    } = paymentMethod;\n\n    const authnetService = getAuthnetService(getAccountOptions());\n    const roundedAmount = parseFloat(amount.toFixed(2));\n    const capturedAmount = accounting.toFixed(amount, 2);\n    let result;\n    if (capturedAmount === accounting.toFixed(0, 2)) {\n      try {\n        const captureResult = voidTransaction(transactionId,\n          authnetService\n        );\n        if (captureResult.responseCode[0] === \"1\") {\n          result = {\n            saved: true,\n            response: captureResult\n          };\n        } else {\n          result = {\n            saved: false,\n            error: captureResult\n          };\n        }\n      } catch (error) {\n        Logger.fatal(error);\n        result = {\n          saved: false,\n          error: error\n        };\n      }\n      return result;\n    }\n    try {\n      const captureResult = priorAuthCaptureTransaction(transactionId,\n        roundedAmount,\n        authnetService\n      );\n      if (captureResult.responseCode[0] === \"1\") {\n        result = {\n          saved: true,\n          response: captureResult\n        };\n      } else {\n        result = {\n          saved: false,\n          error: captureResult\n        };\n      }\n    } catch (error) {\n      Logger.fatal(error);\n      result = {\n        saved: false,\n        error: error\n      };\n    }\n    return result;\n  },\n\n  \"authnet/refund/create\": function (paymentMethod, amount) {\n    check(paymentMethod, PaymentMethod);\n    check(amount, Number);\n    const result = {\n      saved: false,\n      error: \"Reaction does not yet support direct refund processing from Authorize.net. \" +\n      \"Please visit their web portal to perform this action. https://account.authorize.net/\"\n    };\n\n    return result;\n  },\n  \"authnet/refund/list\": function () {\n    check(arguments, [Match.Any]);\n    Meteor.Error(\"Not Implemented\", \"Authorize.net does not yet support retrieving a list of refunds.\");\n  }\n});\n\nfunction getAuthnetService(accountOptions) {\n  const {\n    login,\n    tran_key,\n    mode\n    } = accountOptions;\n\n  return new AuthNetAPI({\n    API_LOGIN_ID: login,\n    TRANSACTION_KEY: tran_key,\n    testMode: !mode\n  });\n}\n\nfunction priorAuthCaptureTransaction(transId, amount, service) {\n  const body = {\n    transactionType: \"priorAuthCaptureTransaction\",\n    amount: amount,\n    refTransId: transId\n  };\n  // This call returns a Promise to the cb so we need to use Promise.await\n  const transactionRequest = service.sendTransactionRequest.call(service, body, function (trans) {\n    return trans;\n  });\n  return Promise.await(transactionRequest);\n}\n\nfunction voidTransaction(transId, service) {\n  const body = {\n    transactionType: \"voidTransaction\",\n    refTransId: transId\n  };\n  // This call returns a Promise to the cb so we need to use Promise.await\n  const transactionRequest = service.sendTransactionRequest.call(service, body, function (trans) {\n    return trans;\n  });\n  return Promise.await(transactionRequest);\n}\n\nValidCardNumber = Match.Where(function (x) {\n  return /^[0-9]{14,16}$/.test(x);\n});\n\nValidExpireMonth = Match.Where(function (x) {\n  return /^[0-9]{1,2}$/.test(x);\n});\n\nValidExpireYear = Match.Where(function (x) {\n  return /^[0-9]{4}$/.test(x);\n});\n\nValidCVV = Match.Where(function (x) {\n  return /^[0-9]{3,4}$/.test(x);\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-authnet/server/methods/authnet.js.map","sourceFileName":"/imports/plugins/included/payments-authnet/server/methods/authnet.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"authnet"},"ignored":false,"code":"var accounting = void 0;\nmodule.importSync(\"accounting-js\", {\n  \"default\": function (v) {\n    accounting = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 2);\nvar Promise = void 0;\nmodule.importSync(\"meteor/promise\", {\n  Promise: function (v) {\n    Promise = v;\n  }\n}, 3);\nvar AuthNetAPI = void 0;\nmodule.importSync(\"@reactioncommerce/authorize-net\", {\n  \"default\": function (v) {\n    AuthNetAPI = v;\n  }\n}, 4);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 5);\nvar Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 6);\nvar PaymentMethod = void 0;\nmodule.importSync(\"/lib/collections/schemas\", {\n  PaymentMethod: function (v) {\n    PaymentMethod = v;\n  }\n}, 7);\n\nfunction getAccountOptions() {\n  var settings = Packages.findOne({\n    name: \"reaction-auth-net\",\n    shopId: Reaction.getShopId(),\n    enabled: true\n  }).settings;\n  var ref = Meteor.settings.authnet;\n  var options = {\n    login: getSettings(settings, ref, \"api_id\"),\n    tran_key: getSettings(settings, ref, \"transaction_key\")\n  };\n\n  if (!options.login) {\n    throw new Meteor.Error(\"invalid-credentials\", \"Invalid Authnet Credentials\");\n  }\n\n  return options;\n}\n\nfunction getSettings(settings, ref, valueName) {\n  if (settings !== null) {\n    return settings[valueName];\n  } else if (ref !== null) {\n    return ref[valueName];\n  }\n\n  return undefined;\n}\n\nMeteor.methods({\n  authnetSubmit: function () {\n    var transactionType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"authorizeTransaction\";\n    var cardInfo = arguments[1];\n    var paymentInfo = arguments[2];\n    check(transactionType, String);\n    check(cardInfo, {\n      cardNumber: ValidCardNumber,\n      expirationYear: ValidExpireYear,\n      expirationMonth: ValidExpireMonth,\n      cvv2: ValidCVV\n    });\n    check(paymentInfo, {\n      total: String,\n      currency: String\n    });\n    var order = {\n      amount: paymentInfo.total\n    };\n    var creditCard = {\n      creditCardNumber: cardInfo.cardNumber,\n      cvv2: cardInfo.cvv2,\n      expirationYear: cardInfo.expirationYear,\n      expirationMonth: cardInfo.expirationMonth\n    };\n    var authnetService = getAuthnetService(getAccountOptions());\n    var authnetTransactionFunc = authnetService[transactionType];\n    var authResult = void 0;\n\n    if (authnetTransactionFunc) {\n      try {\n        authResult = authnetTransactionFunc.call(authnetService, order, creditCard);\n      } catch (error) {\n        Logger.fatal(error);\n      }\n    } else {\n      throw new Meteor.Error(\"403\", \"Invalid Transaction Type\");\n    }\n\n    var result = Promise.await(authResult);\n    return result;\n  },\n  \"authnet/payment/capture\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    var transactionId = paymentMethod.transactionId,\n        amount = paymentMethod.amount;\n    var authnetService = getAuthnetService(getAccountOptions());\n    var roundedAmount = parseFloat(amount.toFixed(2));\n    var capturedAmount = accounting.toFixed(amount, 2);\n    var result = void 0;\n\n    if (capturedAmount === accounting.toFixed(0, 2)) {\n      try {\n        var captureResult = voidTransaction(transactionId, authnetService);\n\n        if (captureResult.responseCode[0] === \"1\") {\n          result = {\n            saved: true,\n            response: captureResult\n          };\n        } else {\n          result = {\n            saved: false,\n            error: captureResult\n          };\n        }\n      } catch (error) {\n        Logger.fatal(error);\n        result = {\n          saved: false,\n          error: error\n        };\n      }\n\n      return result;\n    }\n\n    try {\n      var _captureResult = priorAuthCaptureTransaction(transactionId, roundedAmount, authnetService);\n\n      if (_captureResult.responseCode[0] === \"1\") {\n        result = {\n          saved: true,\n          response: _captureResult\n        };\n      } else {\n        result = {\n          saved: false,\n          error: _captureResult\n        };\n      }\n    } catch (error) {\n      Logger.fatal(error);\n      result = {\n        saved: false,\n        error: error\n      };\n    }\n\n    return result;\n  },\n  \"authnet/refund/create\": function (paymentMethod, amount) {\n    check(paymentMethod, PaymentMethod);\n    check(amount, Number);\n    var result = {\n      saved: false,\n      error: \"Reaction does not yet support direct refund processing from Authorize.net. \" + \"Please visit their web portal to perform this action. https://account.authorize.net/\"\n    };\n    return result;\n  },\n  \"authnet/refund/list\": function () {\n    check(arguments, [Match.Any]);\n    Meteor.Error(\"Not Implemented\", \"Authorize.net does not yet support retrieving a list of refunds.\");\n  }\n});\n\nfunction getAuthnetService(accountOptions) {\n  var login = accountOptions.login,\n      tran_key = accountOptions.tran_key,\n      mode = accountOptions.mode;\n  return new AuthNetAPI({\n    API_LOGIN_ID: login,\n    TRANSACTION_KEY: tran_key,\n    testMode: !mode\n  });\n}\n\nfunction priorAuthCaptureTransaction(transId, amount, service) {\n  var body = {\n    transactionType: \"priorAuthCaptureTransaction\",\n    amount: amount,\n    refTransId: transId\n  }; // This call returns a Promise to the cb so we need to use Promise.await\n\n  var transactionRequest = service.sendTransactionRequest.call(service, body, function (trans) {\n    return trans;\n  });\n  return Promise.await(transactionRequest);\n}\n\nfunction voidTransaction(transId, service) {\n  var body = {\n    transactionType: \"voidTransaction\",\n    refTransId: transId\n  }; // This call returns a Promise to the cb so we need to use Promise.await\n\n  var transactionRequest = service.sendTransactionRequest.call(service, body, function (trans) {\n    return trans;\n  });\n  return Promise.await(transactionRequest);\n}\n\nValidCardNumber = Match.Where(function (x) {\n  return (/^[0-9]{14,16}$/.test(x)\n  );\n});\nValidExpireMonth = Match.Where(function (x) {\n  return (/^[0-9]{1,2}$/.test(x)\n  );\n});\nValidExpireYear = Match.Where(function (x) {\n  return (/^[0-9]{4}$/.test(x)\n  );\n});\nValidCVV = Match.Where(function (x) {\n  return (/^[0-9]{3,4}$/.test(x)\n  );\n});","map":{"version":3,"sources":["/imports/plugins/included/payments-authnet/server/methods/authnet.js"],"names":["accounting","Meteor","check","Match","Promise","AuthNetAPI","Reaction","Logger","Packages","PaymentMethod","getAccountOptions","settings","findOne","name","shopId","getShopId","enabled","ref","authnet","options","login","getSettings","tran_key","Error","valueName","undefined","methods","authnetSubmit","transactionType","cardInfo","paymentInfo","String","cardNumber","ValidCardNumber","expirationYear","ValidExpireYear","expirationMonth","ValidExpireMonth","cvv2","ValidCVV","total","currency","order","amount","creditCard","creditCardNumber","authnetService","getAuthnetService","authnetTransactionFunc","authResult","call","error","fatal","result","await","paymentMethod","Schemas","transactionId","roundedAmount","parseFloat","toFixed","capturedAmount","captureResult","voidTransaction","responseCode","saved","response","priorAuthCaptureTransaction","Number","arguments","Any","accountOptions","mode","API_LOGIN_ID","TRANSACTION_KEY","testMode","transId","service","body","refTransId","transactionRequest","sendTransactionRequest","trans","Where","x","test"],"mappings":"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","file":"/imports/plugins/included/payments-authnet/server/methods/authnet.js.map","sourcesContent":["/* eslint camelcase: 0 */\n/* eslint quote-props: 0 */\n// meteor modules\nimport accounting from \"accounting-js\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Promise } from \"meteor/promise\";\n\nimport AuthNetAPI from \"@reactioncommerce/authorize-net\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { Packages } from \"/lib/collections\";\nimport { PaymentMethod } from \"/lib/collections/schemas\";\n\nfunction getAccountOptions() {\n  const settings = Packages.findOne({\n    name: \"reaction-auth-net\",\n    shopId: Reaction.getShopId(),\n    enabled: true\n  }).settings;\n  const ref = Meteor.settings.authnet;\n  const options = {\n    login: getSettings(settings, ref, \"api_id\"),\n    tran_key: getSettings(settings, ref, \"transaction_key\")\n  };\n\n  if (!options.login) {\n    throw new Meteor.Error(\"invalid-credentials\", \"Invalid Authnet Credentials\");\n  }\n  return options;\n}\n\nfunction getSettings(settings, ref, valueName) {\n  if (settings !== null) {\n    return settings[valueName];\n  } else if (ref !== null) {\n    return ref[valueName];\n  }\n  return undefined;\n}\n\nMeteor.methods({\n  authnetSubmit: function (transactionType = \"authorizeTransaction\", cardInfo, paymentInfo) {\n    check(transactionType, String);\n    check(cardInfo, {\n      cardNumber: ValidCardNumber,\n      expirationYear: ValidExpireYear,\n      expirationMonth: ValidExpireMonth,\n      cvv2: ValidCVV\n    });\n    check(paymentInfo, {\n      total: String,\n      currency: String\n    });\n\n    const order = {\n      amount: paymentInfo.total\n    };\n    const creditCard = {\n      creditCardNumber: cardInfo.cardNumber,\n      cvv2: cardInfo.cvv2,\n      expirationYear: cardInfo.expirationYear,\n      expirationMonth: cardInfo.expirationMonth\n    };\n    const authnetService = getAuthnetService(getAccountOptions());\n    const authnetTransactionFunc = authnetService[transactionType];\n    let authResult;\n    if (authnetTransactionFunc) {\n      try {\n        authResult = authnetTransactionFunc.call(authnetService,\n          order,\n          creditCard\n        );\n      } catch (error) {\n        Logger.fatal(error);\n      }\n    } else {\n      throw new Meteor.Error(\"403\", \"Invalid Transaction Type\");\n    }\n\n    const result =  Promise.await(authResult);\n    return result;\n  },\n\n  \"authnet/payment/capture\": function (paymentMethod) {\n    check(paymentMethod, Reaction.Schemas.PaymentMethod);\n    const {\n      transactionId,\n      amount\n    } = paymentMethod;\n\n    const authnetService = getAuthnetService(getAccountOptions());\n    const roundedAmount = parseFloat(amount.toFixed(2));\n    const capturedAmount = accounting.toFixed(amount, 2);\n    let result;\n    if (capturedAmount === accounting.toFixed(0, 2)) {\n      try {\n        const captureResult = voidTransaction(transactionId,\n          authnetService\n        );\n        if (captureResult.responseCode[0] === \"1\") {\n          result = {\n            saved: true,\n            response: captureResult\n          };\n        } else {\n          result = {\n            saved: false,\n            error: captureResult\n          };\n        }\n      } catch (error) {\n        Logger.fatal(error);\n        result = {\n          saved: false,\n          error: error\n        };\n      }\n      return result;\n    }\n    try {\n      const captureResult = priorAuthCaptureTransaction(transactionId,\n        roundedAmount,\n        authnetService\n      );\n      if (captureResult.responseCode[0] === \"1\") {\n        result = {\n          saved: true,\n          response: captureResult\n        };\n      } else {\n        result = {\n          saved: false,\n          error: captureResult\n        };\n      }\n    } catch (error) {\n      Logger.fatal(error);\n      result = {\n        saved: false,\n        error: error\n      };\n    }\n    return result;\n  },\n\n  \"authnet/refund/create\": function (paymentMethod, amount) {\n    check(paymentMethod, PaymentMethod);\n    check(amount, Number);\n    const result = {\n      saved: false,\n      error: \"Reaction does not yet support direct refund processing from Authorize.net. \" +\n      \"Please visit their web portal to perform this action. https://account.authorize.net/\"\n    };\n\n    return result;\n  },\n  \"authnet/refund/list\": function () {\n    check(arguments, [Match.Any]);\n    Meteor.Error(\"Not Implemented\", \"Authorize.net does not yet support retrieving a list of refunds.\");\n  }\n});\n\nfunction getAuthnetService(accountOptions) {\n  const {\n    login,\n    tran_key,\n    mode\n    } = accountOptions;\n\n  return new AuthNetAPI({\n    API_LOGIN_ID: login,\n    TRANSACTION_KEY: tran_key,\n    testMode: !mode\n  });\n}\n\nfunction priorAuthCaptureTransaction(transId, amount, service) {\n  const body = {\n    transactionType: \"priorAuthCaptureTransaction\",\n    amount: amount,\n    refTransId: transId\n  };\n  // This call returns a Promise to the cb so we need to use Promise.await\n  const transactionRequest = service.sendTransactionRequest.call(service, body, function (trans) {\n    return trans;\n  });\n  return Promise.await(transactionRequest);\n}\n\nfunction voidTransaction(transId, service) {\n  const body = {\n    transactionType: \"voidTransaction\",\n    refTransId: transId\n  };\n  // This call returns a Promise to the cb so we need to use Promise.await\n  const transactionRequest = service.sendTransactionRequest.call(service, body, function (trans) {\n    return trans;\n  });\n  return Promise.await(transactionRequest);\n}\n\nValidCardNumber = Match.Where(function (x) {\n  return /^[0-9]{14,16}$/.test(x);\n});\n\nValidExpireMonth = Match.Where(function (x) {\n  return /^[0-9]{1,2}$/.test(x);\n});\n\nValidExpireYear = Match.Where(function (x) {\n  return /^[0-9]{4}$/.test(x);\n});\n\nValidCVV = Match.Where(function (x) {\n  return /^[0-9]{3,4}$/.test(x);\n});\n"]},"hash":"83bca1a6e375d38539a2a39435278556ba944b6c"}
