{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/inRange","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_inRange"}]},{"source":"lodash/get","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_get"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/reactive-dict","imported":["ReactiveDict"],"specifiers":[{"kind":"named","imported":"ReactiveDict","local":"ReactiveDict"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/aldeed:autoform","imported":["AutoForm"],"specifiers":[{"kind":"named","imported":"AutoForm","local":"AutoForm"}]},{"source":"/client/collections","imported":["Countries"],"specifiers":[{"kind":"named","imported":"Countries","local":"Countries"}]},{"source":"/client/api","imported":["Reaction","i18next"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/lib/collections","imported":["Packages","Logs"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"},{"kind":"named","imported":"Logs","local":"Logs"}]},{"source":"/lib/collections/schemas/logs","imported":["Logs"],"specifiers":[{"kind":"named","imported":"Logs","local":"LogSchema"}]},{"source":"../../lib/collections/schemas","imported":["AvalaraPackageConfig"],"specifiers":[{"kind":"named","imported":"AvalaraPackageConfig","local":"AvalaraPackageConfig"}]},{"source":"./avagriddle","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"LogGriddle"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["Loading"],"specifiers":[{"kind":"named","imported":"Loading","local":"Loading"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/taxes-avalara/client/settings/avalara.js","filenameRelative":"/imports/plugins/included/taxes-avalara/client/settings/avalara.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/client/settings/avalara.js"],"names":["Template","ReactiveDict","Meteor","AutoForm","Countries","Reaction","i18next","Packages","Logs","LogSchema","AvalaraPackageConfig","LogGriddle","Loading","getPackageData","findOne","name","shopId","getShopId","avalaraSettings","onCreated","autorun","subscribe","logType","state","setDefault","isEditing","editingId","countryDefaults","helpers","packageConfigSchema","packageData","logSchema","logCollection","countryOptions","find","value","$in","fetch","currentCountryList","getFieldValue","loggingEnabled","pkgData","settings","avalara","enableLogging","logGrid","fields","noDataMessage","t","instance","editRow","options","currentId","get","set","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","component","publication","collection","matchingResultsCount","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","subscriptionParams","logEntry","id","log","JSON","stringify","events","event","$","removeClass","currentTarget","addClass","formId","validateForm","preventDefault","stopPropagation","formData","getFormValues","call","error","result","message","Alerts","toast","statusCode","connectionValid","hooks","onSuccess","onError","operation"],"mappings":"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","file":"/imports/plugins/included/taxes-avalara/client/settings/avalara.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { Meteor } from \"meteor/meteor\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { Countries } from \"/client/collections\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { Packages, Logs } from \"/lib/collections\";\nimport { Logs as LogSchema } from \"/lib/collections/schemas/logs\";\nimport { AvalaraPackageConfig } from \"../../lib/collections/schemas\";\nimport LogGriddle from \"./avagriddle\";\nimport { Loading } from \"/imports/plugins/core/ui/client/components\";\n\n\nfunction getPackageData() {\n  return Packages.findOne({\n    name: \"taxes-avalara\",\n    shopId: Reaction.getShopId()\n  });\n}\n\n\nTemplate.avalaraSettings.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"Logs\", {\n      logType: \"avalara\"\n    });\n  });\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\n// Avalara supports only Canada and US for address validation\nconst countryDefaults = [\"US\", \"CA\"];\n\nTemplate.avalaraSettings.helpers({\n  packageConfigSchema() {\n    return AvalaraPackageConfig;\n  },\n  packageData() {\n    return getPackageData();\n  },\n  logSchema() {\n    return LogSchema;\n  },\n  logCollection() {\n    return Logs;\n  },\n  countryOptions() {\n    return Countries.find({ value: { $in: countryDefaults } }).fetch();\n  },\n  countryDefaults() {\n    return countryDefaults;\n  },\n  currentCountryList() {\n    return AutoForm.getFieldValue(\"settings.addressValidation.countryList\");\n  },\n  loggingEnabled() {\n    const pkgData = getPackageData();\n    return pkgData.settings.avalara.enableLogging;\n  },\n\n  logGrid() {\n    const fields = [\"date\", \"docType\"];\n    const noDataMessage = i18next.t(\"logGrid.noLogsFound\");\n    const instance = Template.instance();\n\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    // helper adds a class to every grid row\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"log-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    fields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`logGrid.columns.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // return template Grid\n    return {\n      component: LogGriddle,\n      publication: \"Logs\",\n      collection: Logs,\n      matchingResultsCount: \"logs-count\",\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      columns: fields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading,\n      subscriptionParams: { logType: \"avalara\" }\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n\n  logEntry() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const log = Logs.findOne(id) || {};\n    log.data = JSON.stringify(log.data, null, 4);\n    return log;\n  }\n\n\n});\n\nTemplate.avalaraSettings.events({\n  \"click .template-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".template-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  },\n  \"click [data-event-action=testCredentials]\": function (event) {\n    const formId = \"avalara-update-form\";\n    if (!AutoForm.validateForm(formId)) {\n      return null;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    const formData = AutoForm.getFormValues(formId);\n    const settings = _.get(formData, \"insertDoc.settings.avalara\");\n\n    Meteor.call(\"avalara/testCredentials\", settings, function (error, result) {\n      if (error && error.message) {\n        return Alerts.toast(`${i18next.t(\"settings.testCredentialsFailed\")} ${error.message}`, \"error\");\n      }\n      const statusCode = _.get(result, \"statusCode\");\n      const connectionValid = _.inRange(statusCode, 400);\n      if (connectionValid) {\n        return Alerts.toast(i18next.t(\"settings.testCredentialsSuccess\"), \"success\");\n      }\n      return Alerts.toast(i18next.t(\"settings.testCredentialsFailed\"), \"error\");\n    });\n  }\n});\n\nAutoForm.hooks({\n  \"avalara-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopTaxMethodsSaved\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.taxSettings.shopTaxMethodsFailed\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/taxes-avalara/client/settings/avalara.js.map","sourceFileName":"/imports/plugins/included/taxes-avalara/client/settings/avalara.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"avalara"},"ignored":false,"code":"var _inRange = void 0;\n\nmodule.importSync(\"lodash/inRange\", {\n  \"default\": function (v) {\n    _inRange = v;\n  }\n}, 0);\n\nvar _get = void 0;\n\nmodule.importSync(\"lodash/get\", {\n  \"default\": function (v) {\n    _get = v;\n  }\n}, 1);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 2);\nvar ReactiveDict = void 0;\nmodule.importSync(\"meteor/reactive-dict\", {\n  ReactiveDict: function (v) {\n    ReactiveDict = v;\n  }\n}, 3);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 4);\nvar AutoForm = void 0;\nmodule.importSync(\"meteor/aldeed:autoform\", {\n  AutoForm: function (v) {\n    AutoForm = v;\n  }\n}, 5);\nvar Countries = void 0;\nmodule.importSync(\"/client/collections\", {\n  Countries: function (v) {\n    Countries = v;\n  }\n}, 6);\nvar Reaction = void 0,\n    i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 7);\nvar Packages = void 0,\n    Logs = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  },\n  Logs: function (v) {\n    Logs = v;\n  }\n}, 8);\nvar LogSchema = void 0;\nmodule.importSync(\"/lib/collections/schemas/logs\", {\n  Logs: function (v) {\n    LogSchema = v;\n  }\n}, 9);\nvar AvalaraPackageConfig = void 0;\nmodule.importSync(\"../../lib/collections/schemas\", {\n  AvalaraPackageConfig: function (v) {\n    AvalaraPackageConfig = v;\n  }\n}, 10);\nvar LogGriddle = void 0;\nmodule.importSync(\"./avagriddle\", {\n  \"default\": function (v) {\n    LogGriddle = v;\n  }\n}, 11);\nvar Loading = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 12);\n\nfunction getPackageData() {\n  return Packages.findOne({\n    name: \"taxes-avalara\",\n    shopId: Reaction.getShopId()\n  });\n}\n\nTemplate.avalaraSettings.onCreated(function () {\n  var _this = this;\n\n  this.autorun(function () {\n    _this.subscribe(\"Logs\", {\n      logType: \"avalara\"\n    });\n  });\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n}); // Avalara supports only Canada and US for address validation\n\nvar countryDefaults = [\"US\", \"CA\"];\nTemplate.avalaraSettings.helpers({\n  packageConfigSchema: function () {\n    return AvalaraPackageConfig;\n  },\n  packageData: function () {\n    return getPackageData();\n  },\n  logSchema: function () {\n    return LogSchema;\n  },\n  logCollection: function () {\n    return Logs;\n  },\n  countryOptions: function () {\n    return Countries.find({\n      value: {\n        $in: countryDefaults\n      }\n    }).fetch();\n  },\n  countryDefaults: function () {\n    return countryDefaults;\n  },\n  currentCountryList: function () {\n    return AutoForm.getFieldValue(\"settings.addressValidation.countryList\");\n  },\n  loggingEnabled: function () {\n    var pkgData = getPackageData();\n    return pkgData.settings.avalara.enableLogging;\n  },\n  logGrid: function () {\n    var fields = [\"date\", \"docType\"];\n    var noDataMessage = i18next.t(\"logGrid.noLogsFound\");\n    var instance = Template.instance();\n\n    function editRow(options) {\n      var currentId = instance.state.get(\"editingId\");\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id); // toggle edit mode clicking on same row\n\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    } // helper adds a class to every grid row\n\n\n    var customRowMetaData = {\n      bodyCssClassName: function () {\n        return \"log-grid-row\";\n      }\n    }; // add i18n handling to headers\n\n    var customColumnMetadata = [];\n    fields.forEach(function (field) {\n      var columnMeta = {\n        columnName: field,\n        displayName: i18next.t(\"logGrid.columns.\" + field)\n      };\n      customColumnMetadata.push(columnMeta);\n    }); // return template Grid\n\n    return {\n      component: LogGriddle,\n      publication: \"Logs\",\n      collection: Logs,\n      matchingResultsCount: \"logs-count\",\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      columns: fields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading,\n      subscriptionParams: {\n        logType: \"avalara\"\n      }\n    };\n  },\n  instance: function () {\n    var instance = Template.instance();\n    return instance;\n  },\n  logEntry: function () {\n    var instance = Template.instance();\n    var id = instance.state.get(\"editingId\");\n    var log = Logs.findOne(id) || {};\n    log.data = JSON.stringify(log.data, null, 4);\n    return log;\n  }\n});\nTemplate.avalaraSettings.events({\n  \"click .template-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".template-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  },\n  \"click [data-event-action=testCredentials]\": function (event) {\n    var formId = \"avalara-update-form\";\n\n    if (!AutoForm.validateForm(formId)) {\n      return null;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    var formData = AutoForm.getFormValues(formId);\n\n    var settings = _get(formData, \"insertDoc.settings.avalara\");\n\n    Meteor.call(\"avalara/testCredentials\", settings, function (error, result) {\n      if (error && error.message) {\n        return Alerts.toast(i18next.t(\"settings.testCredentialsFailed\") + \" \" + error.message, \"error\");\n      }\n\n      var statusCode = _get(result, \"statusCode\");\n\n      var connectionValid = _inRange(statusCode, 400);\n\n      if (connectionValid) {\n        return Alerts.toast(i18next.t(\"settings.testCredentialsSuccess\"), \"success\");\n      }\n\n      return Alerts.toast(i18next.t(\"settings.testCredentialsFailed\"), \"error\");\n    });\n  }\n});\nAutoForm.hooks({\n  \"avalara-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopTaxMethodsSaved\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopTaxMethodsFailed\") + \" \" + error, \"error\");\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/client/settings/avalara.js"],"names":["Template","ReactiveDict","Meteor","AutoForm","Countries","Reaction","i18next","Packages","Logs","LogSchema","AvalaraPackageConfig","LogGriddle","Loading","getPackageData","findOne","name","shopId","getShopId","avalaraSettings","onCreated","autorun","subscribe","logType","state","setDefault","isEditing","editingId","countryDefaults","helpers","packageConfigSchema","packageData","logSchema","logCollection","countryOptions","find","value","$in","fetch","currentCountryList","getFieldValue","loggingEnabled","pkgData","settings","avalara","enableLogging","logGrid","fields","noDataMessage","t","instance","editRow","options","currentId","get","set","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","component","publication","collection","matchingResultsCount","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","subscriptionParams","logEntry","id","log","JSON","stringify","events","event","$","removeClass","currentTarget","addClass","formId","validateForm","preventDefault","stopPropagation","formData","getFormValues","call","error","result","message","Alerts","toast","statusCode","connectionValid","hooks","onSuccess","onError","operation"],"mappings":"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","file":"/imports/plugins/included/taxes-avalara/client/settings/avalara.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { Meteor } from \"meteor/meteor\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { Countries } from \"/client/collections\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { Packages, Logs } from \"/lib/collections\";\nimport { Logs as LogSchema } from \"/lib/collections/schemas/logs\";\nimport { AvalaraPackageConfig } from \"../../lib/collections/schemas\";\nimport LogGriddle from \"./avagriddle\";\nimport { Loading } from \"/imports/plugins/core/ui/client/components\";\n\n\nfunction getPackageData() {\n  return Packages.findOne({\n    name: \"taxes-avalara\",\n    shopId: Reaction.getShopId()\n  });\n}\n\n\nTemplate.avalaraSettings.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"Logs\", {\n      logType: \"avalara\"\n    });\n  });\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\n// Avalara supports only Canada and US for address validation\nconst countryDefaults = [\"US\", \"CA\"];\n\nTemplate.avalaraSettings.helpers({\n  packageConfigSchema() {\n    return AvalaraPackageConfig;\n  },\n  packageData() {\n    return getPackageData();\n  },\n  logSchema() {\n    return LogSchema;\n  },\n  logCollection() {\n    return Logs;\n  },\n  countryOptions() {\n    return Countries.find({ value: { $in: countryDefaults } }).fetch();\n  },\n  countryDefaults() {\n    return countryDefaults;\n  },\n  currentCountryList() {\n    return AutoForm.getFieldValue(\"settings.addressValidation.countryList\");\n  },\n  loggingEnabled() {\n    const pkgData = getPackageData();\n    return pkgData.settings.avalara.enableLogging;\n  },\n\n  logGrid() {\n    const fields = [\"date\", \"docType\"];\n    const noDataMessage = i18next.t(\"logGrid.noLogsFound\");\n    const instance = Template.instance();\n\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    // helper adds a class to every grid row\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"log-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    fields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`logGrid.columns.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // return template Grid\n    return {\n      component: LogGriddle,\n      publication: \"Logs\",\n      collection: Logs,\n      matchingResultsCount: \"logs-count\",\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      columns: fields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading,\n      subscriptionParams: { logType: \"avalara\" }\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n\n  logEntry() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const log = Logs.findOne(id) || {};\n    log.data = JSON.stringify(log.data, null, 4);\n    return log;\n  }\n\n\n});\n\nTemplate.avalaraSettings.events({\n  \"click .template-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".template-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  },\n  \"click [data-event-action=testCredentials]\": function (event) {\n    const formId = \"avalara-update-form\";\n    if (!AutoForm.validateForm(formId)) {\n      return null;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    const formData = AutoForm.getFormValues(formId);\n    const settings = _.get(formData, \"insertDoc.settings.avalara\");\n\n    Meteor.call(\"avalara/testCredentials\", settings, function (error, result) {\n      if (error && error.message) {\n        return Alerts.toast(`${i18next.t(\"settings.testCredentialsFailed\")} ${error.message}`, \"error\");\n      }\n      const statusCode = _.get(result, \"statusCode\");\n      const connectionValid = _.inRange(statusCode, 400);\n      if (connectionValid) {\n        return Alerts.toast(i18next.t(\"settings.testCredentialsSuccess\"), \"success\");\n      }\n      return Alerts.toast(i18next.t(\"settings.testCredentialsFailed\"), \"error\");\n    });\n  }\n});\n\nAutoForm.hooks({\n  \"avalara-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopTaxMethodsSaved\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.taxSettings.shopTaxMethodsFailed\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n"]},"hash":"6f19317834ce7537240ab43a491a7d219d6fff00"}
