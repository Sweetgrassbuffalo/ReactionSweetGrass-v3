{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":["ServerSessions"],"specifiers":[{"kind":"local","local":"ServerSessions","exported":"ServerSessions"}]}}},"options":{"filename":"/server/publications/collections/sessions.js","filenameRelative":"/server/publications/collections/sessions.js","inputSourceMap":{"version":3,"sources":["/server/publications/collections/sessions.js"],"names":["Mongo","Reaction","ServerSessions","Collection","Meteor","publish","sessionId","check","Match","OneOf","String","created","Date","getTime","newSessionId","insert","serverSession","find","count","_id"],"mappings":"AAAA,OAAS;AAAa;WAAtB;;AAAA;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAgB,AAEzB,AAOA,AAAO,AAAM,AAAiB,AAAI,AAAM,AAAW,AACnD,AAAK,AAAiB,AAEtB,AAAO,AAAQ,AAAY,AAAU,AAAW,AAC9C;AAAM,IAAN,AAAiB,AAAM,iBAAN,AAAY,IAAZ,AAAoB,MAArC,AAAiB;AACjB,KAAM,AAAU,iBAF8B,AAE9C,AAAgB,AAAI,AAAO,AAC3B,AAAI,AACJ;AACA;uCACA;AAAI,AAAC,MAAL,UAAgB,WACd;MAAe,AAAe,AAAO,AACnC,uBADmC,AAC1B;AADX,AAAe,AAGhB;;AAJD,OAIO,WACL;;;AAX4C,AAY7C,AACD,KAFE,AAAe;SAGjB;AAAM,mBAdwC,AAc9C,AAAsB,AAAe,AAAK,AAE1C;AACA,IAAA,AAAI,AAAc,AAAY,AAAG,AAC/B;;;MAAe,gBAAf,AAAsB,oBAAA,AACpB,AAAK,AACL,eAFoB,AAEX;;AAFX,mCAlB4C,AAsB7C;AAED;;eAxB8C,AAyB9C,AAAS,AAAY,AAErB;;AA3BF,AA4BE,AAAO,AAAe,AAAK,AAC5B","file":"/server/publications/collections/sessions.js.map","sourcesContent":["import { Mongo } from \"meteor/mongo\";\nimport { Reaction } from \"/server/api\";\n\n/**\n * Reaction Server / amplify permanent sessions\n * If no id is passed we create a new session\n * Load the session\n * If no session is loaded, creates a new one\n */\n\nexport const ServerSessions = new Mongo.Collection(\"Sessions\");\nthis.ServerSessions = ServerSessions;\n\nMeteor.publish(\"Sessions\", function (sessionId) {\n  check(sessionId, Match.OneOf(String, null));\n  const created = new Date().getTime();\n  let newSessionId;\n  // if we don\"t have a sessionId create a new session\n  // REALLY - we should always have a client sessionId\n  if (!sessionId) {\n    newSessionId = ServerSessions.insert({\n      created: created\n    });\n  } else {\n    newSessionId = sessionId;\n  }\n  // get the session from existing sessionId\n  const serverSession = ServerSessions.find(newSessionId);\n\n  // if not found, also create a new server session\n  if (serverSession.count() === 0) {\n    ServerSessions.insert({\n      _id: newSessionId,\n      created: created\n    });\n  }\n\n  // set global sessionId\n  Reaction.sessionId = newSessionId;\n\n  // return cursor\n  return ServerSessions.find(newSessionId);\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/publications/collections/sessions.js.map","sourceFileName":"/server/publications/collections/sessions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"sessions"},"ignored":false,"code":"module.export({\n  ServerSessions: function () {\n    return ServerSessions;\n  }\n});\nvar Mongo = void 0;\nmodule.importSync(\"meteor/mongo\", {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 1);\nvar ServerSessions = new Mongo.Collection(\"Sessions\");\nthis.ServerSessions = ServerSessions;\nMeteor.publish(\"Sessions\", function (sessionId) {\n  check(sessionId, Match.OneOf(String, null));\n  var created = new Date().getTime();\n  var newSessionId = void 0; // if we don\"t have a sessionId create a new session\n  // REALLY - we should always have a client sessionId\n\n  if (!sessionId) {\n    newSessionId = ServerSessions.insert({\n      created: created\n    });\n  } else {\n    newSessionId = sessionId;\n  } // get the session from existing sessionId\n\n\n  var serverSession = ServerSessions.find(newSessionId); // if not found, also create a new server session\n\n  if (serverSession.count() === 0) {\n    ServerSessions.insert({\n      _id: newSessionId,\n      created: created\n    });\n  } // set global sessionId\n\n\n  Reaction.sessionId = newSessionId; // return cursor\n\n  return ServerSessions.find(newSessionId);\n});","map":{"version":3,"sources":["/server/publications/collections/sessions.js"],"names":["Mongo","Reaction","ServerSessions","Collection","Meteor","publish","sessionId","check","Match","OneOf","String","created","Date","getTime","newSessionId","insert","serverSession","find","count","_id"],"mappings":"AAAA,OAAS;AAAa;WAAtB;;AAAA;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAgB,AAEzB,AAOA,AAAO,AAAM,AAAiB,AAAI,AAAM,AAAW,AACnD,AAAK,AAAiB,AAEtB,AAAO,AAAQ,AAAY,AAAU,AAAW,AAC9C;AAAM,IAAN,AAAiB,AAAM,iBAAN,AAAY,IAAZ,AAAoB,MAArC,AAAiB;AACjB,KAAM,AAAU,iBAF8B,AAE9C,AAAgB,AAAI,AAAO,AAC3B,AAAI,AACJ;AACA;uCACA;AAAI,AAAC,MAAL,UAAgB,WACd;MAAe,AAAe,AAAO,AACnC,uBADmC,AAC1B;AADX,AAAe,AAGhB;;AAJD,OAIO,WACL;;;AAX4C,AAY7C,AACD,KAFE,AAAe;SAGjB;AAAM,mBAdwC,AAc9C,AAAsB,AAAe,AAAK,AAE1C;AACA,IAAA,AAAI,AAAc,AAAY,AAAG,AAC/B;;;MAAe,gBAAf,AAAsB,oBAAA,AACpB,AAAK,AACL,eAFoB,AAEX;;AAFX,mCAlB4C,AAsB7C;AAED;;eAxB8C,AAyB9C,AAAS,AAAY,AAErB;;AA3BF,AA4BE,AAAO,AAAe,AAAK,AAC5B","file":"/server/publications/collections/sessions.js.map","sourcesContent":["import { Mongo } from \"meteor/mongo\";\nimport { Reaction } from \"/server/api\";\n\n/**\n * Reaction Server / amplify permanent sessions\n * If no id is passed we create a new session\n * Load the session\n * If no session is loaded, creates a new one\n */\n\nexport const ServerSessions = new Mongo.Collection(\"Sessions\");\nthis.ServerSessions = ServerSessions;\n\nMeteor.publish(\"Sessions\", function (sessionId) {\n  check(sessionId, Match.OneOf(String, null));\n  const created = new Date().getTime();\n  let newSessionId;\n  // if we don\"t have a sessionId create a new session\n  // REALLY - we should always have a client sessionId\n  if (!sessionId) {\n    newSessionId = ServerSessions.insert({\n      created: created\n    });\n  } else {\n    newSessionId = sessionId;\n  }\n  // get the session from existing sessionId\n  const serverSession = ServerSessions.find(newSessionId);\n\n  // if not found, also create a new server session\n  if (serverSession.count() === 0) {\n    ServerSessions.insert({\n      _id: newSessionId,\n      created: created\n    });\n  }\n\n  // set global sessionId\n  Reaction.sessionId = newSessionId;\n\n  // return cursor\n  return ServerSessions.find(newSessionId);\n});\n"]},"hash":"ddde3ca4e2d7628bcdb2b9e10ffe4f2a1f6ce235"}
