{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./braintreeApi","imported":["BraintreeApi"],"specifiers":[{"kind":"named","imported":"BraintreeApi","local":"BraintreeApi"}]},{"source":"/server/api","imported":["Logger"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"/lib/collections/schemas","imported":["PaymentMethod"],"specifiers":[{"kind":"named","imported":"PaymentMethod","local":"PaymentMethod"}]}],"exports":{"exported":["paymentSubmit","transactionType","cardData","paymentData","paymentCapture","paymentMethod","createRefund","paymentMethod","amount","listRefunds","paymentMethod"],"specifiers":[{"kind":"local","local":"paymentSubmit","exported":"paymentSubmit"},{"kind":"local","local":"transactionType","exported":"transactionType"},{"kind":"local","local":"cardData","exported":"cardData"},{"kind":"local","local":"paymentData","exported":"paymentData"},{"kind":"local","local":"paymentCapture","exported":"paymentCapture"},{"kind":"local","local":"paymentMethod","exported":"paymentMethod"},{"kind":"local","local":"createRefund","exported":"createRefund"},{"kind":"local","local":"paymentMethod","exported":"paymentMethod"},{"kind":"local","local":"amount","exported":"amount"},{"kind":"local","local":"listRefunds","exported":"listRefunds"},{"kind":"local","local":"paymentMethod","exported":"paymentMethod"}]}}},"options":{"filename":"/imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js","filenameRelative":"/imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js"],"names":["BraintreeApi","Logger","PaymentMethod","paymentSubmit","transactionType","cardData","paymentData","check","String","name","number","expirationMonth","expirationYear","cvv2","type","total","currency","paymentSubmitDetails","result","paymentSubmitResult","apiCall","debug","error","saved","message","fatal","paymentCapture","paymentMethod","paymentCaptureDetails","transactionId","amount","paymentCaptureResult","captureCharge","createRefund","Number","refundDetails","refundResult","listRefunds","Object","refundListDetails","refundListResult"],"mappings":"AAAA,OAAS;AAAT;AAA6B,WAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAc,AACvB,AAAS,AAAqB,AAE9B,AASA,AAAO,AAAS,AAAc,AAAiB,AAAU,AAAa,AACpE,AAAM,AAAiB,AACvB;;AAAM,SAAN,AAAgB,sDACd;QADc,AACR,iBACN;QAAQ;UAFM,AAGG,AACjB;YAJc,AAIE,AAChB;AALc,AAKR,qBACN;AAAM,oBANR,AAAgB;UAQhB;AAAM,UAAN,AAAmB,AACjB,AAAO,AACP;AAVc,AAGd;QAOU;WAGZ;AAAM,cAAuB,AAC3B,AAAiB,AACjB,AAAU,AACV;AARF,AAAmB;MAQJ;qBAGf;AAAA,AAAI;iBAEJ,AAAI,AACF,AAAM,AAAsB,AAAa,AAAQ,AAAc,AAC/D;AAVF,AAA6B;MAU3B,AAAO,AAAM,AACb,AAAS,AACV;;AAJD,AAIE,MAAA,AAAO,AAAO,AACd;QAAA,AAAO,AAAM,yDACb;WAAS,MACP;aADO,AACA,AACP;WAAQ,OAFD,AAE0B,AAAM,AAAQ;AAFjD,iBAIA;AAAO;;+CAGT,AAAO,AACR,A,AAGD;AAPI,AAAa,AACd;;;;;AAaH,AAAO,AAAS,AAAe,AAAe,AAC5C,AAAM,AAAe,AAErB,AAAM,AAAwB,AAC5B,AAAe,AAAc,AAC7B,AAAQ,AAAc,AAGxB,AAAI;;uCAEJ;AAAI,uBACF,AAAM,AAAuB,AAAa,AAAQ,AAAc,AAChE;MAAA,AAAO,AAAM;AACJ,iCAHX,AAGE,AACD;AAAC,AAAO,YAAP,AAAc,cACd,AAAO,AAAM,AACb,AAAS,AACP;AALF,AACA;MAGS,AACA,AACP,AAAQ,AAA0B,AAAM,AAAQ;;AAFlD,MAIA;QAAA,AAAO,AAAM,4CAAb,cACD;;aAED;IAAO,OAAP,O,AACD,AAGD;;;;;;;AAQA;;AAAO,SAAA,AAAS,AAAa,AAAe,AAAQ,AAClD;AAAA,AAAM,AAAe,AACrB,AAAM,AAAQ,AAEd,AAAM,AAAgB,AACpB,AAAe,AAAc,AAC7B,AAAQ,AAGV,AAAI,AAEJ,AAAI,AACF,AAAM,AAAe,AAAa,AAAQ,AAAa,AACvD,AAAO,AAAM,AACb;;AAAS,SAAT,oCACD;AAJD,AAIE,QAAA,AAAO,AAAO,eACd;QAAO,QAAP,AAAa,AACb,AAAS,AACP;MADO,AACA;AACC,iCAFD,AAEwB,AAAM,AAAQ;AAF/C,YAIA,AAAO,AAAM,AACd;AAHG;M,AAKJ,AAAO,AACR;;AAGD;;;;;;;AAOO,aAAA,AAAS,AAAY,AAAe,AACzC;AAAA,AAAM,AAAe,6CAErB,AAAM,AAAoB,AACxB;AAJJ;iBAG4B,AACT,AAAc;AAD/B,AAIA,AAAI;;SAEJ;AAAA,AAAI,AACF,AAAM,AAAmB,AAAa,AAAQ,AAAY,AAC1D,AAAO,AAAM,AACb,AAAS,AACV,AAAC,AAAO,AAAO,AACd,AAAO,AAAM,AACb,AAAS,AACP,AAAO,AACP,AAAQ,AAAuB,AAAM,AAAQ,AAE/C;;AAAO,SAAP,AAAa,2BAAb,AACD;uBAED;MAAA,AAAO;;AACR","file":"/imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js.map","sourcesContent":["import { BraintreeApi } from \"./braintreeApi\";\nimport { Logger } from \"/server/api\";\nimport { PaymentMethod } from \"/lib/collections/schemas\";\n\n/**\n * braintreeSubmit\n * Authorize, or authorize and capture payments from Braintree\n * https://developers.braintreepayments.com/reference/request/transaction/sale/node\n * @param {String} transactionType - either authorize or capture\n * @param {Object} cardData - Object containing everything about the Credit card to be submitted\n * @param {Object} paymentData - Object containing everything about the transaction to be settled\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function paymentSubmit(transactionType, cardData, paymentData) {\n  check(transactionType, String);\n  check(cardData, {\n    name: String,\n    number: String,\n    expirationMonth: String,\n    expirationYear: String,\n    cvv2: String,\n    type: String\n  });\n  check(paymentData, {\n    total: String,\n    currency: String\n  });\n\n  const paymentSubmitDetails = {\n    transactionType: transactionType,\n    cardData: cardData,\n    paymentData: paymentData\n  };\n\n  let result;\n\n  try {\n    const paymentSubmitResult = BraintreeApi.apiCall.paymentSubmit(paymentSubmitDetails);\n    Logger.debug(paymentSubmitResult);\n    result = paymentSubmitResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Submit Payment: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, payment was not submitted\");\n  }\n\n  return result;\n}\n\n\n/**\n * paymentCapture\n * Capture payments from Braintree\n * https://developers.braintreepayments.com/reference/request/transaction/submit-for-settlement/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function paymentCapture(paymentMethod) {\n  check(paymentMethod, PaymentMethod);\n\n  const paymentCaptureDetails = {\n    transactionId: paymentMethod.transactionId,\n    amount: paymentMethod.amount\n  };\n\n  let result;\n\n  try {\n    const paymentCaptureResult = BraintreeApi.apiCall.captureCharge(paymentCaptureDetails);\n    Logger.debug(paymentCaptureResult);\n    result = paymentCaptureResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Capture Payment: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, payment was not captured\");\n  }\n\n  return result;\n}\n\n\n/**\n * createRefund\n * Refund BrainTree payment\n * https://developers.braintreepayments.com/reference/request/transaction/refund/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @param {Number} amount - Amount to be refunded if not the entire amount\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function createRefund(paymentMethod, amount) {\n  check(paymentMethod, PaymentMethod);\n  check(amount, Number);\n\n  const refundDetails = {\n    transactionId: paymentMethod.transactionId,\n    amount: amount\n  };\n\n  let result;\n\n  try {\n    const refundResult = BraintreeApi.apiCall.createRefund(refundDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\n\n/**\n * listRefunds\n * List all refunds for a transaction\n * https://developers.braintreepayments.com/reference/request/transaction/find/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @return {Array} results - An array of refund objects for display in admin\n */\nexport function listRefunds(paymentMethod) {\n  check(paymentMethod, Object);\n\n  const refundListDetails = {\n    transactionId: paymentMethod.transactionId\n  };\n\n  let result;\n\n  try {\n    const refundListResult = BraintreeApi.apiCall.listRefunds(refundListDetails);\n    Logger.debug(refundListResult);\n    result = refundListResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot list refunds: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, refunds not listed\");\n  }\n\n  return result;\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js.map","sourceFileName":"/imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"braintreeMethods"},"ignored":false,"code":"module.export({\n  paymentSubmit: function () {\n    return paymentSubmit;\n  },\n  paymentCapture: function () {\n    return paymentCapture;\n  },\n  createRefund: function () {\n    return createRefund;\n  },\n  listRefunds: function () {\n    return listRefunds;\n  }\n});\nvar BraintreeApi = void 0;\nmodule.importSync(\"./braintreeApi\", {\n  BraintreeApi: function (v) {\n    BraintreeApi = v;\n  }\n}, 0);\nvar Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 1);\nvar PaymentMethod = void 0;\nmodule.importSync(\"/lib/collections/schemas\", {\n  PaymentMethod: function (v) {\n    PaymentMethod = v;\n  }\n}, 2);\n\nfunction paymentSubmit(transactionType, cardData, paymentData) {\n  check(transactionType, String);\n  check(cardData, {\n    name: String,\n    number: String,\n    expirationMonth: String,\n    expirationYear: String,\n    cvv2: String,\n    type: String\n  });\n  check(paymentData, {\n    total: String,\n    currency: String\n  });\n  var paymentSubmitDetails = {\n    transactionType: transactionType,\n    cardData: cardData,\n    paymentData: paymentData\n  };\n  var result = void 0;\n\n  try {\n    var paymentSubmitResult = BraintreeApi.apiCall.paymentSubmit(paymentSubmitDetails);\n    Logger.debug(paymentSubmitResult);\n    result = paymentSubmitResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: \"Cannot Submit Payment: \" + error.message\n    };\n    Logger.fatal(\"Braintree call failed, payment was not submitted\");\n  }\n\n  return result;\n}\n\nfunction paymentCapture(paymentMethod) {\n  check(paymentMethod, PaymentMethod);\n  var paymentCaptureDetails = {\n    transactionId: paymentMethod.transactionId,\n    amount: paymentMethod.amount\n  };\n  var result = void 0;\n\n  try {\n    var paymentCaptureResult = BraintreeApi.apiCall.captureCharge(paymentCaptureDetails);\n    Logger.debug(paymentCaptureResult);\n    result = paymentCaptureResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: \"Cannot Capture Payment: \" + error.message\n    };\n    Logger.fatal(\"Braintree call failed, payment was not captured\");\n  }\n\n  return result;\n}\n\nfunction createRefund(paymentMethod, amount) {\n  check(paymentMethod, PaymentMethod);\n  check(amount, Number);\n  var refundDetails = {\n    transactionId: paymentMethod.transactionId,\n    amount: amount\n  };\n  var result = void 0;\n\n  try {\n    var refundResult = BraintreeApi.apiCall.createRefund(refundDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: \"Cannot issue refund: \" + error.message\n    };\n    Logger.fatal(\"Braintree call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\nfunction listRefunds(paymentMethod) {\n  check(paymentMethod, Object);\n  var refundListDetails = {\n    transactionId: paymentMethod.transactionId\n  };\n  var result = void 0;\n\n  try {\n    var refundListResult = BraintreeApi.apiCall.listRefunds(refundListDetails);\n    Logger.debug(refundListResult);\n    result = refundListResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: \"Cannot list refunds: \" + error.message\n    };\n    Logger.fatal(\"Braintree call failed, refunds not listed\");\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js"],"names":["BraintreeApi","Logger","PaymentMethod","paymentSubmit","transactionType","cardData","paymentData","check","String","name","number","expirationMonth","expirationYear","cvv2","type","total","currency","paymentSubmitDetails","result","paymentSubmitResult","apiCall","debug","error","saved","message","fatal","paymentCapture","paymentMethod","paymentCaptureDetails","transactionId","amount","paymentCaptureResult","captureCharge","createRefund","Number","refundDetails","refundResult","listRefunds","Object","refundListDetails","refundListResult"],"mappings":"AAAA,OAAS;AAAT;AAA6B,WAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAc,AACvB,AAAS,AAAqB,AAE9B,AASA,AAAO,AAAS,AAAc,AAAiB,AAAU,AAAa,AACpE,AAAM,AAAiB,AACvB;;AAAM,SAAN,AAAgB,sDACd;QADc,AACR,iBACN;QAAQ;UAFM,AAGG,AACjB;YAJc,AAIE,AAChB;AALc,AAKR,qBACN;AAAM,oBANR,AAAgB;UAQhB;AAAM,UAAN,AAAmB,AACjB,AAAO,AACP;AAVc,AAGd;QAOU;WAGZ;AAAM,cAAuB,AAC3B,AAAiB,AACjB,AAAU,AACV;AARF,AAAmB;MAQJ;qBAGf;AAAA,AAAI;iBAEJ,AAAI,AACF,AAAM,AAAsB,AAAa,AAAQ,AAAc,AAC/D;AAVF,AAA6B;MAU3B,AAAO,AAAM,AACb,AAAS,AACV;;AAJD,AAIE,MAAA,AAAO,AAAO,AACd;QAAA,AAAO,AAAM,yDACb;WAAS,MACP;aADO,AACA,AACP;WAAQ,OAFD,AAE0B,AAAM,AAAQ;AAFjD,iBAIA;AAAO;;+CAGT,AAAO,AACR,A,AAGD;AAPI,AAAa,AACd;;;;;AAaH,AAAO,AAAS,AAAe,AAAe,AAC5C,AAAM,AAAe,AAErB,AAAM,AAAwB,AAC5B,AAAe,AAAc,AAC7B,AAAQ,AAAc,AAGxB,AAAI;;uCAEJ;AAAI,uBACF,AAAM,AAAuB,AAAa,AAAQ,AAAc,AAChE;MAAA,AAAO,AAAM;AACJ,iCAHX,AAGE,AACD;AAAC,AAAO,YAAP,AAAc,cACd,AAAO,AAAM,AACb,AAAS,AACP;AALF,AACA;MAGS,AACA,AACP,AAAQ,AAA0B,AAAM,AAAQ;;AAFlD,MAIA;QAAA,AAAO,AAAM,4CAAb,cACD;;aAED;IAAO,OAAP,O,AACD,AAGD;;;;;;;AAQA;;AAAO,SAAA,AAAS,AAAa,AAAe,AAAQ,AAClD;AAAA,AAAM,AAAe,AACrB,AAAM,AAAQ,AAEd,AAAM,AAAgB,AACpB,AAAe,AAAc,AAC7B,AAAQ,AAGV,AAAI,AAEJ,AAAI,AACF,AAAM,AAAe,AAAa,AAAQ,AAAa,AACvD,AAAO,AAAM,AACb;;AAAS,SAAT,oCACD;AAJD,AAIE,QAAA,AAAO,AAAO,eACd;QAAO,QAAP,AAAa,AACb,AAAS,AACP;MADO,AACA;AACC,iCAFD,AAEwB,AAAM,AAAQ;AAF/C,YAIA,AAAO,AAAM,AACd;AAHG;M,AAKJ,AAAO,AACR;;AAGD;;;;;;;AAOO,aAAA,AAAS,AAAY,AAAe,AACzC;AAAA,AAAM,AAAe,6CAErB,AAAM,AAAoB,AACxB;AAJJ;iBAG4B,AACT,AAAc;AAD/B,AAIA,AAAI;;SAEJ;AAAA,AAAI,AACF,AAAM,AAAmB,AAAa,AAAQ,AAAY,AAC1D,AAAO,AAAM,AACb,AAAS,AACV,AAAC,AAAO,AAAO,AACd,AAAO,AAAM,AACb,AAAS,AACP,AAAO,AACP,AAAQ,AAAuB,AAAM,AAAQ,AAE/C;;AAAO,SAAP,AAAa,2BAAb,AACD;uBAED;MAAA,AAAO;;AACR","file":"/imports/plugins/included/payments-braintree/server/methods/braintreeMethods.js.map","sourcesContent":["import { BraintreeApi } from \"./braintreeApi\";\nimport { Logger } from \"/server/api\";\nimport { PaymentMethod } from \"/lib/collections/schemas\";\n\n/**\n * braintreeSubmit\n * Authorize, or authorize and capture payments from Braintree\n * https://developers.braintreepayments.com/reference/request/transaction/sale/node\n * @param {String} transactionType - either authorize or capture\n * @param {Object} cardData - Object containing everything about the Credit card to be submitted\n * @param {Object} paymentData - Object containing everything about the transaction to be settled\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function paymentSubmit(transactionType, cardData, paymentData) {\n  check(transactionType, String);\n  check(cardData, {\n    name: String,\n    number: String,\n    expirationMonth: String,\n    expirationYear: String,\n    cvv2: String,\n    type: String\n  });\n  check(paymentData, {\n    total: String,\n    currency: String\n  });\n\n  const paymentSubmitDetails = {\n    transactionType: transactionType,\n    cardData: cardData,\n    paymentData: paymentData\n  };\n\n  let result;\n\n  try {\n    const paymentSubmitResult = BraintreeApi.apiCall.paymentSubmit(paymentSubmitDetails);\n    Logger.debug(paymentSubmitResult);\n    result = paymentSubmitResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Submit Payment: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, payment was not submitted\");\n  }\n\n  return result;\n}\n\n\n/**\n * paymentCapture\n * Capture payments from Braintree\n * https://developers.braintreepayments.com/reference/request/transaction/submit-for-settlement/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function paymentCapture(paymentMethod) {\n  check(paymentMethod, PaymentMethod);\n\n  const paymentCaptureDetails = {\n    transactionId: paymentMethod.transactionId,\n    amount: paymentMethod.amount\n  };\n\n  let result;\n\n  try {\n    const paymentCaptureResult = BraintreeApi.apiCall.captureCharge(paymentCaptureDetails);\n    Logger.debug(paymentCaptureResult);\n    result = paymentCaptureResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot Capture Payment: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, payment was not captured\");\n  }\n\n  return result;\n}\n\n\n/**\n * createRefund\n * Refund BrainTree payment\n * https://developers.braintreepayments.com/reference/request/transaction/refund/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @param {Number} amount - Amount to be refunded if not the entire amount\n * @return {Object} results - Object containing the results of the transaction\n */\nexport function createRefund(paymentMethod, amount) {\n  check(paymentMethod, PaymentMethod);\n  check(amount, Number);\n\n  const refundDetails = {\n    transactionId: paymentMethod.transactionId,\n    amount: amount\n  };\n\n  let result;\n\n  try {\n    const refundResult = BraintreeApi.apiCall.createRefund(refundDetails);\n    Logger.debug(refundResult);\n    result = refundResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot issue refund: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, refund was not issued\");\n  }\n\n  return result;\n}\n\n\n/**\n * listRefunds\n * List all refunds for a transaction\n * https://developers.braintreepayments.com/reference/request/transaction/find/node\n * @param {Object} paymentMethod - Object containing everything about the transaction to be settled\n * @return {Array} results - An array of refund objects for display in admin\n */\nexport function listRefunds(paymentMethod) {\n  check(paymentMethod, Object);\n\n  const refundListDetails = {\n    transactionId: paymentMethod.transactionId\n  };\n\n  let result;\n\n  try {\n    const refundListResult = BraintreeApi.apiCall.listRefunds(refundListDetails);\n    Logger.debug(refundListResult);\n    result = refundListResult;\n  } catch (error) {\n    Logger.error(error);\n    result = {\n      saved: false,\n      error: `Cannot list refunds: ${error.message}`\n    };\n    Logger.fatal(\"Braintree call failed, refunds not listed\");\n  }\n\n  return result;\n}\n"]},"hash":"b7b4e761ae7738092f859b8737193197776d5937"}
