{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/max","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_max"}]},{"source":"lodash/min","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_min"}]},{"source":"lodash/includes","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_includes"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/session","imported":["Session"],"specifiers":[{"kind":"named","imported":"Session","local":"Session"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/tracker","imported":["Tracker"],"specifiers":[{"kind":"named","imported":"Tracker","local":"Tracker"}]},{"source":"meteor/jquery","imported":["$"],"specifiers":[{"kind":"named","imported":"$","local":"$"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/client/modules/logger","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Logger"}]},{"source":"/lib/api","imported":["ReactionProduct"],"specifiers":[{"kind":"named","imported":"ReactionProduct","local":"ReactionProduct"}]},{"source":"/lib/collections","imported":["Media"],"specifiers":[{"kind":"named","imported":"Media","local":"Media"}]},{"source":"/imports/plugins/core/revisions/lib/api","imported":["isRevisionControlEnabled"],"specifiers":[{"kind":"named","imported":"isRevisionControlEnabled","local":"isRevisionControlEnabled"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/product-variant/client/templates/products/productGrid/item.js","filenameRelative":"/imports/plugins/included/product-variant/client/templates/products/productGrid/item.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/product-variant/client/templates/products/productGrid/item.js"],"names":["Meteor","Session","Template","Tracker","$","Reaction","Logger","ReactionProduct","Media","isRevisionControlEnabled","productGridItems","onRendered","on","event","isPreview","target","closest","length","selectedProducts","get","Array","isArray","set","setActionView","label","i18nKeyLabel","template","type","data","onDestroyed","off","helpers","pdpPath","instance","product","handle","__published","Router","pathFor","hash","controlProps","onEditButtonClick","$checkbox","_id","prop","trigger","onPublishButtonClick","call","isVisible","publishProduct","media","findOne","sort","FS","File","additionalMedia","mediaArray","find","$gt","limit","count","weightClass","tag","getTag","positions","weight","isSelected","isMediumWeight","isLargeWeight","shouldShowAdditionalImages","events","go","hasPermission","preventDefault","metaKey","ctrlKey","shiftKey","$items","$activeItems","selected","indexes","index","parents","i","archiveProduct","position","updatedAt","Date","error","warn","Error","flush"],"mappings":"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","file":"/imports/plugins/included/product-variant/client/templates/products/productGrid/item.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Session } from \"meteor/session\";\nimport { Template } from \"meteor/templating\";\nimport { Tracker } from \"meteor/tracker\";\nimport { $ } from \"meteor/jquery\";\nimport { Reaction } from \"/client/api\";\nimport Logger from \"/client/modules/logger\";\nimport { ReactionProduct } from \"/lib/api\";\nimport { Media } from \"/lib/collections\";\nimport { isRevisionControlEnabled } from \"/imports/plugins/core/revisions/lib/api\";\n\n\nTemplate.productGridItems.onRendered(function () {\n  $(\".page > main\").on(\"click\", function (event) {\n    // Do nothing if we are in preview mode\n    if (Reaction.isPreview() === false) {\n      // Don't trigger the clear selectiion if we're clicking on a grid item.\n      if ($(event.target).closest(\".product-grid-item\").length === 0) {\n        const selectedProducts = Session.get(\"productGrid/selectedProducts\");\n\n        // Do we have any selected products?\n        // If we do then lets reset the Grid Settings ActionView\n        if (Array.isArray(selectedProducts) && selectedProducts.length) {\n          // Reset sessions ver of selected products\n          Session.set(\"productGrid/selectedProducts\", []);\n\n          // Reset the action view of selected products\n          Reaction.setActionView({\n            label: \"Grid Settings\",\n            i18nKeyLabel: \"gridSettingsPanel.title\",\n            template: \"productSettings\",\n            type: \"product\",\n            data: {}\n          });\n        }\n      }\n    }\n  });\n});\n\nTemplate.productGridItems.onDestroyed(function () {\n  $(\".page > main\").off(\"click\");\n});\n\n/**\n * productGridItems helpers\n */\n\nTemplate.productGridItems.helpers({\n  pdpPath() {\n    const instance = Template.instance();\n    const product = instance.data;\n\n    if (product) {\n      let handle = product.handle;\n\n      if (product.__published) {\n        handle = product.__published.handle;\n      }\n\n      return Reaction.Router.pathFor(\"product\", {\n        hash: {\n          handle\n        }\n      });\n    }\n\n    return \"/\";\n  },\n\n  controlProps() {\n    const instance = Template.instance();\n\n    return {\n      product: instance.data,\n      onEditButtonClick() {\n        const data = instance.data;\n\n        const $checkbox = instance.$(`input[type=checkbox][value=${data._id}]`);\n\n        Session.set(\"productGrid/selectedProducts\", []);\n        $checkbox.prop(\"checked\", true).trigger(\"change\");\n      },\n      onPublishButtonClick() {\n        if (isRevisionControlEnabled()) {\n          Meteor.call(\"products/updateProductField\", instance.data._id, \"isVisible\", !instance.data.isVisible);\n        } else {\n          ReactionProduct.publishProduct(instance.data);\n        }\n      }\n    };\n  },\n  media: function () {\n    const media = Media.findOne({\n      \"metadata.productId\": this._id,\n      \"metadata.toGrid\": 1\n    }, {\n      sort: { \"metadata.priority\": 1, \"uploadedAt\": 1 }\n    });\n\n    return media instanceof FS.File ? media : false;\n  },\n  additionalMedia: function () {\n    const mediaArray = Media.find({\n      \"metadata.productId\": this._id,\n      \"metadata.priority\": {\n        $gt: 0\n      },\n      \"metadata.toGrid\": 1\n    }, { limit: 3 });\n\n    if (mediaArray.count() > 1) {\n      return mediaArray;\n    }\n\n    return false;\n  },\n  weightClass: function () {\n    const tag = ReactionProduct.getTag();\n    const positions = this.positions && this.positions[tag] || {};\n    const weight = positions.weight || 0;\n    switch (weight) {\n      case 1:\n        return \"product-medium\";\n      case 2:\n        return \"product-large\";\n      default:\n        return \"product-small\";\n    }\n  },\n  isSelected: function () {\n    if (Reaction.isPreview() === false) {\n      return _.includes(Session.get(\"productGrid/selectedProducts\"), this._id) ? \"active\" : \"\";\n    }\n    return false;\n  },\n  isMediumWeight: function () {\n    const tag = ReactionProduct.getTag();\n    const positions = this.positions && this.positions[tag] || {};\n    const weight = positions.weight || 0;\n\n    return weight === 1;\n  },\n  isLargeWeight: function () {\n    const tag = ReactionProduct.getTag();\n    const positions = this.positions && this.positions[tag] || {};\n    const weight = positions.weight || 0;\n\n    return weight === 3;\n  },\n  // TODO is it used?\n  shouldShowAdditionalImages: function () {\n    if (this.isMediumWeight && this.mediaArray) {\n      return true;\n    }\n    return false;\n  },\n  // this is needed to get `pinned` from the item template\n  positions() {\n    const tag = ReactionProduct.getTag();\n    return this.positions && this.positions[tag] || {};\n  }\n});\n\n/**\n * productGridItems events\n */\n\nTemplate.productGridItems.events({\n  \"dblclick [data-event-action=productClick]\": function (event, template) {\n    const instance = template;\n    const product = instance.data;\n    const handle = product.__published && product.__published.handle || product.handle;\n\n    Reaction.Router.go(\"product\", {\n      handle: handle\n    });\n\n    Reaction.setActionView({\n      i18nKeyLabel: \"productDetailEdit.productSettings\",\n      label: \"Product Settings\",\n      template: \"ProductAdmin\"\n    });\n  },\n  \"click [data-event-action=productClick]\": function (event, template) {\n    if (Reaction.hasPermission(\"createProduct\") && Reaction.isPreview() === false) {\n      event.preventDefault();\n\n      const isSelected = $(event.target).closest(\"li.product-grid-item.active\").length;\n\n      if (isSelected) {\n        // If product is already selected, and you are single clicking WITH command key, things whould happen\n        if (event.metaKey || event.ctrlKey || event.shiftKey) {\n          let $checkbox = template.$(`input[type=checkbox][value=${this._id}]`);\n          const $items = $(\"li.product-grid-item\");\n          const $activeItems = $(\"li.product-grid-item.active\");\n          const selected = $activeItems.length;\n\n          if (event.shiftKey && selected > 0) {\n            const indexes = [\n              $items.index($checkbox.parents(\"li.product-grid-item\")),\n              $items.index($activeItems.get(0)),\n              $items.index($activeItems.get(selected - 1))\n            ];\n            for (let i = _.min(indexes); i <= _.max(indexes); i++) {\n              $checkbox = $(\"input[type=checkbox]\", $items.get(i));\n              if ($checkbox.prop(\"checked\") === false) {\n                $checkbox.prop(\"checked\", true).trigger(\"change\");\n              }\n            }\n          } else {\n            $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\")).trigger(\"change\");\n          }\n        }\n      } else {\n        if (event.metaKey || event.ctrlKey || event.shiftKey) {\n          let $checkbox = template.$(`input[type=checkbox][value=${this._id}]`);\n          const $items = $(\"li.product-grid-item\");\n          const $activeItems = $(\"li.product-grid-item.active\");\n          const selected = $activeItems.length;\n\n          if (event.shiftKey && selected > 0) {\n            const indexes = [\n              $items.index($checkbox.parents(\"li.product-grid-item\")),\n              $items.index($activeItems.get(0)),\n              $items.index($activeItems.get(selected - 1))\n            ];\n            for (let i = _.min(indexes); i <= _.max(indexes); i++) {\n              $checkbox = $(\"input[type=checkbox]\", $items.get(i));\n              if ($checkbox.prop(\"checked\") === false) {\n                $checkbox.prop(\"checked\", true).trigger(\"change\");\n              }\n            }\n          } else {\n            $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\")).trigger(\"change\");\n          }\n        } else {\n          const $checkbox = template.$(`input[type=checkbox][value=${this._id}]`);\n\n          Session.set(\"productGrid/selectedProducts\", []);\n          $checkbox.prop(\"checked\", true).trigger(\"change\");\n        }\n      }\n    } else {\n      event.preventDefault();\n\n      const instance = template;\n      const product = instance.data;\n      const handle = product.__published && product.__published.handle || product.handle;\n\n      Reaction.Router.go(\"product\", {\n        handle: handle\n      });\n    }\n  },\n  \"click [data-event-action=selectSingleProduct]\": function (event, template) {\n    event.preventDefault();\n    const { data } = Template.instance();\n\n    const $checkbox = template.$(`input[type=checkbox][value=${data._id}]`);\n\n    Session.set(\"productGrid/selectedProducts\", []);\n    $checkbox.prop(\"checked\", true).trigger(\"change\");\n  },\n  \"click .publish-product\"(event, instance) {\n    ReactionProduct.publishProduct(instance.data);\n  },\n  \"click .delete-product\": function (event) {\n    event.preventDefault();\n    ReactionProduct.archiveProduct(this);\n  },\n  \"click .update-product-weight\": function (event) {\n    event.preventDefault();\n\n    const tag = ReactionProduct.getTag();\n    const positions = this.positions && this.positions[tag] || {};\n    let weight = positions.weight || 0;\n\n    if (weight < 2) {\n      weight++;\n    } else {\n      weight = 0;\n    }\n\n    const position = {\n      weight: weight,\n      updatedAt: new Date()\n    };\n    Meteor.call(\"products/updateProductPosition\", this._id, position, tag, error => {\n      if (error) {\n        Logger.warn(error);\n        throw new Meteor.Error(403, error);\n      }\n    });\n    return Tracker.flush();\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/product-variant/client/templates/products/productGrid/item.js.map","sourceFileName":"/imports/plugins/included/product-variant/client/templates/products/productGrid/item.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"item"},"ignored":false,"code":"var _max = void 0;\n\nmodule.importSync(\"lodash/max\", {\n  \"default\": function (v) {\n    _max = v;\n  }\n}, 0);\n\nvar _min = void 0;\n\nmodule.importSync(\"lodash/min\", {\n  \"default\": function (v) {\n    _min = v;\n  }\n}, 1);\n\nvar _includes = void 0;\n\nmodule.importSync(\"lodash/includes\", {\n  \"default\": function (v) {\n    _includes = v;\n  }\n}, 2);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 3);\nvar Session = void 0;\nmodule.importSync(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 4);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 5);\nvar Tracker = void 0;\nmodule.importSync(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 6);\nvar $ = void 0;\nmodule.importSync(\"meteor/jquery\", {\n  $: function (v) {\n    $ = v;\n  }\n}, 7);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 8);\nvar Logger = void 0;\nmodule.importSync(\"/client/modules/logger\", {\n  \"default\": function (v) {\n    Logger = v;\n  }\n}, 9);\nvar ReactionProduct = void 0;\nmodule.importSync(\"/lib/api\", {\n  ReactionProduct: function (v) {\n    ReactionProduct = v;\n  }\n}, 10);\nvar Media = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Media: function (v) {\n    Media = v;\n  }\n}, 11);\nvar isRevisionControlEnabled = void 0;\nmodule.importSync(\"/imports/plugins/core/revisions/lib/api\", {\n  isRevisionControlEnabled: function (v) {\n    isRevisionControlEnabled = v;\n  }\n}, 12);\nTemplate.productGridItems.onRendered(function () {\n  $(\".page > main\").on(\"click\", function (event) {\n    // Do nothing if we are in preview mode\n    if (Reaction.isPreview() === false) {\n      // Don't trigger the clear selectiion if we're clicking on a grid item.\n      if ($(event.target).closest(\".product-grid-item\").length === 0) {\n        var selectedProducts = Session.get(\"productGrid/selectedProducts\"); // Do we have any selected products?\n        // If we do then lets reset the Grid Settings ActionView\n\n        if (Array.isArray(selectedProducts) && selectedProducts.length) {\n          // Reset sessions ver of selected products\n          Session.set(\"productGrid/selectedProducts\", []); // Reset the action view of selected products\n\n          Reaction.setActionView({\n            label: \"Grid Settings\",\n            i18nKeyLabel: \"gridSettingsPanel.title\",\n            template: \"productSettings\",\n            type: \"product\",\n            data: {}\n          });\n        }\n      }\n    }\n  });\n});\nTemplate.productGridItems.onDestroyed(function () {\n  $(\".page > main\").off(\"click\");\n}); /**\n     * productGridItems helpers\n     */\nTemplate.productGridItems.helpers({\n  pdpPath: function () {\n    var instance = Template.instance();\n    var product = instance.data;\n\n    if (product) {\n      var handle = product.handle;\n\n      if (product.__published) {\n        handle = product.__published.handle;\n      }\n\n      return Reaction.Router.pathFor(\"product\", {\n        hash: {\n          handle: handle\n        }\n      });\n    }\n\n    return \"/\";\n  },\n  controlProps: function () {\n    var instance = Template.instance();\n    return {\n      product: instance.data,\n      onEditButtonClick: function () {\n        var data = instance.data;\n        var $checkbox = instance.$(\"input[type=checkbox][value=\" + data._id + \"]\");\n        Session.set(\"productGrid/selectedProducts\", []);\n        $checkbox.prop(\"checked\", true).trigger(\"change\");\n      },\n      onPublishButtonClick: function () {\n        if (isRevisionControlEnabled()) {\n          Meteor.call(\"products/updateProductField\", instance.data._id, \"isVisible\", !instance.data.isVisible);\n        } else {\n          ReactionProduct.publishProduct(instance.data);\n        }\n      }\n    };\n  },\n  media: function () {\n    var media = Media.findOne({\n      \"metadata.productId\": this._id,\n      \"metadata.toGrid\": 1\n    }, {\n      sort: {\n        \"metadata.priority\": 1,\n        \"uploadedAt\": 1\n      }\n    });\n    return media instanceof FS.File ? media : false;\n  },\n  additionalMedia: function () {\n    var mediaArray = Media.find({\n      \"metadata.productId\": this._id,\n      \"metadata.priority\": {\n        $gt: 0\n      },\n      \"metadata.toGrid\": 1\n    }, {\n      limit: 3\n    });\n\n    if (mediaArray.count() > 1) {\n      return mediaArray;\n    }\n\n    return false;\n  },\n  weightClass: function () {\n    var tag = ReactionProduct.getTag();\n    var positions = this.positions && this.positions[tag] || {};\n    var weight = positions.weight || 0;\n\n    switch (weight) {\n      case 1:\n        return \"product-medium\";\n\n      case 2:\n        return \"product-large\";\n\n      default:\n        return \"product-small\";\n    }\n  },\n  isSelected: function () {\n    if (Reaction.isPreview() === false) {\n      return _includes(Session.get(\"productGrid/selectedProducts\"), this._id) ? \"active\" : \"\";\n    }\n\n    return false;\n  },\n  isMediumWeight: function () {\n    var tag = ReactionProduct.getTag();\n    var positions = this.positions && this.positions[tag] || {};\n    var weight = positions.weight || 0;\n    return weight === 1;\n  },\n  isLargeWeight: function () {\n    var tag = ReactionProduct.getTag();\n    var positions = this.positions && this.positions[tag] || {};\n    var weight = positions.weight || 0;\n    return weight === 3;\n  },\n  // TODO is it used?\n  shouldShowAdditionalImages: function () {\n    if (this.isMediumWeight && this.mediaArray) {\n      return true;\n    }\n\n    return false;\n  },\n  // this is needed to get `pinned` from the item template\n  positions: function () {\n    var tag = ReactionProduct.getTag();\n    return this.positions && this.positions[tag] || {};\n  }\n}); /**\n     * productGridItems events\n     */\nTemplate.productGridItems.events({\n  \"dblclick [data-event-action=productClick]\": function (event, template) {\n    var instance = template;\n    var product = instance.data;\n    var handle = product.__published && product.__published.handle || product.handle;\n    Reaction.Router.go(\"product\", {\n      handle: handle\n    });\n    Reaction.setActionView({\n      i18nKeyLabel: \"productDetailEdit.productSettings\",\n      label: \"Product Settings\",\n      template: \"ProductAdmin\"\n    });\n  },\n  \"click [data-event-action=productClick]\": function (event, template) {\n    if (Reaction.hasPermission(\"createProduct\") && Reaction.isPreview() === false) {\n      event.preventDefault();\n      var isSelected = $(event.target).closest(\"li.product-grid-item.active\").length;\n\n      if (isSelected) {\n        // If product is already selected, and you are single clicking WITH command key, things whould happen\n        if (event.metaKey || event.ctrlKey || event.shiftKey) {\n          var $checkbox = template.$(\"input[type=checkbox][value=\" + this._id + \"]\");\n          var $items = $(\"li.product-grid-item\");\n          var $activeItems = $(\"li.product-grid-item.active\");\n          var selected = $activeItems.length;\n\n          if (event.shiftKey && selected > 0) {\n            var indexes = [$items.index($checkbox.parents(\"li.product-grid-item\")), $items.index($activeItems.get(0)), $items.index($activeItems.get(selected - 1))];\n\n            for (var i = _min(indexes); i <= _max(indexes); i++) {\n              $checkbox = $(\"input[type=checkbox]\", $items.get(i));\n\n              if ($checkbox.prop(\"checked\") === false) {\n                $checkbox.prop(\"checked\", true).trigger(\"change\");\n              }\n            }\n          } else {\n            $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\")).trigger(\"change\");\n          }\n        }\n      } else {\n        if (event.metaKey || event.ctrlKey || event.shiftKey) {\n          var _$checkbox = template.$(\"input[type=checkbox][value=\" + this._id + \"]\");\n\n          var _$items = $(\"li.product-grid-item\");\n\n          var _$activeItems = $(\"li.product-grid-item.active\");\n\n          var _selected = _$activeItems.length;\n\n          if (event.shiftKey && _selected > 0) {\n            var _indexes = [_$items.index(_$checkbox.parents(\"li.product-grid-item\")), _$items.index(_$activeItems.get(0)), _$items.index(_$activeItems.get(_selected - 1))];\n\n            for (var _i = _min(_indexes); _i <= _max(_indexes); _i++) {\n              _$checkbox = $(\"input[type=checkbox]\", _$items.get(_i));\n\n              if (_$checkbox.prop(\"checked\") === false) {\n                _$checkbox.prop(\"checked\", true).trigger(\"change\");\n              }\n            }\n          } else {\n            _$checkbox.prop(\"checked\", !_$checkbox.prop(\"checked\")).trigger(\"change\");\n          }\n        } else {\n          var _$checkbox2 = template.$(\"input[type=checkbox][value=\" + this._id + \"]\");\n\n          Session.set(\"productGrid/selectedProducts\", []);\n\n          _$checkbox2.prop(\"checked\", true).trigger(\"change\");\n        }\n      }\n    } else {\n      event.preventDefault();\n      var instance = template;\n      var product = instance.data;\n      var handle = product.__published && product.__published.handle || product.handle;\n      Reaction.Router.go(\"product\", {\n        handle: handle\n      });\n    }\n  },\n  \"click [data-event-action=selectSingleProduct]\": function (event, template) {\n    event.preventDefault();\n\n    var _Template$instance = Template.instance(),\n        data = _Template$instance.data;\n\n    var $checkbox = template.$(\"input[type=checkbox][value=\" + data._id + \"]\");\n    Session.set(\"productGrid/selectedProducts\", []);\n    $checkbox.prop(\"checked\", true).trigger(\"change\");\n  },\n  \"click .publish-product\": function (event, instance) {\n    ReactionProduct.publishProduct(instance.data);\n  },\n  \"click .delete-product\": function (event) {\n    event.preventDefault();\n    ReactionProduct.archiveProduct(this);\n  },\n  \"click .update-product-weight\": function (event) {\n    event.preventDefault();\n    var tag = ReactionProduct.getTag();\n    var positions = this.positions && this.positions[tag] || {};\n    var weight = positions.weight || 0;\n\n    if (weight < 2) {\n      weight++;\n    } else {\n      weight = 0;\n    }\n\n    var position = {\n      weight: weight,\n      updatedAt: new Date()\n    };\n    Meteor.call(\"products/updateProductPosition\", this._id, position, tag, function (error) {\n      if (error) {\n        Logger.warn(error);\n        throw new Meteor.Error(403, error);\n      }\n    });\n    return Tracker.flush();\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/product-variant/client/templates/products/productGrid/item.js"],"names":["Meteor","Session","Template","Tracker","$","Reaction","Logger","ReactionProduct","Media","isRevisionControlEnabled","productGridItems","onRendered","on","event","isPreview","target","closest","length","selectedProducts","get","Array","isArray","set","setActionView","label","i18nKeyLabel","template","type","data","onDestroyed","off","helpers","pdpPath","instance","product","handle","__published","Router","pathFor","hash","controlProps","onEditButtonClick","$checkbox","_id","prop","trigger","onPublishButtonClick","call","isVisible","publishProduct","media","findOne","sort","FS","File","additionalMedia","mediaArray","find","$gt","limit","count","weightClass","tag","getTag","positions","weight","isSelected","isMediumWeight","isLargeWeight","shouldShowAdditionalImages","events","go","hasPermission","preventDefault","metaKey","ctrlKey","shiftKey","$items","$activeItems","selected","indexes","index","parents","i","archiveProduct","position","updatedAt","Date","error","warn","Error","flush"],"mappings":"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","file":"/imports/plugins/included/product-variant/client/templates/products/productGrid/item.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Session } from \"meteor/session\";\nimport { Template } from \"meteor/templating\";\nimport { Tracker } from \"meteor/tracker\";\nimport { $ } from \"meteor/jquery\";\nimport { Reaction } from \"/client/api\";\nimport Logger from \"/client/modules/logger\";\nimport { ReactionProduct } from \"/lib/api\";\nimport { Media } from \"/lib/collections\";\nimport { isRevisionControlEnabled } from \"/imports/plugins/core/revisions/lib/api\";\n\n\nTemplate.productGridItems.onRendered(function () {\n  $(\".page > main\").on(\"click\", function (event) {\n    // Do nothing if we are in preview mode\n    if (Reaction.isPreview() === false) {\n      // Don't trigger the clear selectiion if we're clicking on a grid item.\n      if ($(event.target).closest(\".product-grid-item\").length === 0) {\n        const selectedProducts = Session.get(\"productGrid/selectedProducts\");\n\n        // Do we have any selected products?\n        // If we do then lets reset the Grid Settings ActionView\n        if (Array.isArray(selectedProducts) && selectedProducts.length) {\n          // Reset sessions ver of selected products\n          Session.set(\"productGrid/selectedProducts\", []);\n\n          // Reset the action view of selected products\n          Reaction.setActionView({\n            label: \"Grid Settings\",\n            i18nKeyLabel: \"gridSettingsPanel.title\",\n            template: \"productSettings\",\n            type: \"product\",\n            data: {}\n          });\n        }\n      }\n    }\n  });\n});\n\nTemplate.productGridItems.onDestroyed(function () {\n  $(\".page > main\").off(\"click\");\n});\n\n/**\n * productGridItems helpers\n */\n\nTemplate.productGridItems.helpers({\n  pdpPath() {\n    const instance = Template.instance();\n    const product = instance.data;\n\n    if (product) {\n      let handle = product.handle;\n\n      if (product.__published) {\n        handle = product.__published.handle;\n      }\n\n      return Reaction.Router.pathFor(\"product\", {\n        hash: {\n          handle\n        }\n      });\n    }\n\n    return \"/\";\n  },\n\n  controlProps() {\n    const instance = Template.instance();\n\n    return {\n      product: instance.data,\n      onEditButtonClick() {\n        const data = instance.data;\n\n        const $checkbox = instance.$(`input[type=checkbox][value=${data._id}]`);\n\n        Session.set(\"productGrid/selectedProducts\", []);\n        $checkbox.prop(\"checked\", true).trigger(\"change\");\n      },\n      onPublishButtonClick() {\n        if (isRevisionControlEnabled()) {\n          Meteor.call(\"products/updateProductField\", instance.data._id, \"isVisible\", !instance.data.isVisible);\n        } else {\n          ReactionProduct.publishProduct(instance.data);\n        }\n      }\n    };\n  },\n  media: function () {\n    const media = Media.findOne({\n      \"metadata.productId\": this._id,\n      \"metadata.toGrid\": 1\n    }, {\n      sort: { \"metadata.priority\": 1, \"uploadedAt\": 1 }\n    });\n\n    return media instanceof FS.File ? media : false;\n  },\n  additionalMedia: function () {\n    const mediaArray = Media.find({\n      \"metadata.productId\": this._id,\n      \"metadata.priority\": {\n        $gt: 0\n      },\n      \"metadata.toGrid\": 1\n    }, { limit: 3 });\n\n    if (mediaArray.count() > 1) {\n      return mediaArray;\n    }\n\n    return false;\n  },\n  weightClass: function () {\n    const tag = ReactionProduct.getTag();\n    const positions = this.positions && this.positions[tag] || {};\n    const weight = positions.weight || 0;\n    switch (weight) {\n      case 1:\n        return \"product-medium\";\n      case 2:\n        return \"product-large\";\n      default:\n        return \"product-small\";\n    }\n  },\n  isSelected: function () {\n    if (Reaction.isPreview() === false) {\n      return _.includes(Session.get(\"productGrid/selectedProducts\"), this._id) ? \"active\" : \"\";\n    }\n    return false;\n  },\n  isMediumWeight: function () {\n    const tag = ReactionProduct.getTag();\n    const positions = this.positions && this.positions[tag] || {};\n    const weight = positions.weight || 0;\n\n    return weight === 1;\n  },\n  isLargeWeight: function () {\n    const tag = ReactionProduct.getTag();\n    const positions = this.positions && this.positions[tag] || {};\n    const weight = positions.weight || 0;\n\n    return weight === 3;\n  },\n  // TODO is it used?\n  shouldShowAdditionalImages: function () {\n    if (this.isMediumWeight && this.mediaArray) {\n      return true;\n    }\n    return false;\n  },\n  // this is needed to get `pinned` from the item template\n  positions() {\n    const tag = ReactionProduct.getTag();\n    return this.positions && this.positions[tag] || {};\n  }\n});\n\n/**\n * productGridItems events\n */\n\nTemplate.productGridItems.events({\n  \"dblclick [data-event-action=productClick]\": function (event, template) {\n    const instance = template;\n    const product = instance.data;\n    const handle = product.__published && product.__published.handle || product.handle;\n\n    Reaction.Router.go(\"product\", {\n      handle: handle\n    });\n\n    Reaction.setActionView({\n      i18nKeyLabel: \"productDetailEdit.productSettings\",\n      label: \"Product Settings\",\n      template: \"ProductAdmin\"\n    });\n  },\n  \"click [data-event-action=productClick]\": function (event, template) {\n    if (Reaction.hasPermission(\"createProduct\") && Reaction.isPreview() === false) {\n      event.preventDefault();\n\n      const isSelected = $(event.target).closest(\"li.product-grid-item.active\").length;\n\n      if (isSelected) {\n        // If product is already selected, and you are single clicking WITH command key, things whould happen\n        if (event.metaKey || event.ctrlKey || event.shiftKey) {\n          let $checkbox = template.$(`input[type=checkbox][value=${this._id}]`);\n          const $items = $(\"li.product-grid-item\");\n          const $activeItems = $(\"li.product-grid-item.active\");\n          const selected = $activeItems.length;\n\n          if (event.shiftKey && selected > 0) {\n            const indexes = [\n              $items.index($checkbox.parents(\"li.product-grid-item\")),\n              $items.index($activeItems.get(0)),\n              $items.index($activeItems.get(selected - 1))\n            ];\n            for (let i = _.min(indexes); i <= _.max(indexes); i++) {\n              $checkbox = $(\"input[type=checkbox]\", $items.get(i));\n              if ($checkbox.prop(\"checked\") === false) {\n                $checkbox.prop(\"checked\", true).trigger(\"change\");\n              }\n            }\n          } else {\n            $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\")).trigger(\"change\");\n          }\n        }\n      } else {\n        if (event.metaKey || event.ctrlKey || event.shiftKey) {\n          let $checkbox = template.$(`input[type=checkbox][value=${this._id}]`);\n          const $items = $(\"li.product-grid-item\");\n          const $activeItems = $(\"li.product-grid-item.active\");\n          const selected = $activeItems.length;\n\n          if (event.shiftKey && selected > 0) {\n            const indexes = [\n              $items.index($checkbox.parents(\"li.product-grid-item\")),\n              $items.index($activeItems.get(0)),\n              $items.index($activeItems.get(selected - 1))\n            ];\n            for (let i = _.min(indexes); i <= _.max(indexes); i++) {\n              $checkbox = $(\"input[type=checkbox]\", $items.get(i));\n              if ($checkbox.prop(\"checked\") === false) {\n                $checkbox.prop(\"checked\", true).trigger(\"change\");\n              }\n            }\n          } else {\n            $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\")).trigger(\"change\");\n          }\n        } else {\n          const $checkbox = template.$(`input[type=checkbox][value=${this._id}]`);\n\n          Session.set(\"productGrid/selectedProducts\", []);\n          $checkbox.prop(\"checked\", true).trigger(\"change\");\n        }\n      }\n    } else {\n      event.preventDefault();\n\n      const instance = template;\n      const product = instance.data;\n      const handle = product.__published && product.__published.handle || product.handle;\n\n      Reaction.Router.go(\"product\", {\n        handle: handle\n      });\n    }\n  },\n  \"click [data-event-action=selectSingleProduct]\": function (event, template) {\n    event.preventDefault();\n    const { data } = Template.instance();\n\n    const $checkbox = template.$(`input[type=checkbox][value=${data._id}]`);\n\n    Session.set(\"productGrid/selectedProducts\", []);\n    $checkbox.prop(\"checked\", true).trigger(\"change\");\n  },\n  \"click .publish-product\"(event, instance) {\n    ReactionProduct.publishProduct(instance.data);\n  },\n  \"click .delete-product\": function (event) {\n    event.preventDefault();\n    ReactionProduct.archiveProduct(this);\n  },\n  \"click .update-product-weight\": function (event) {\n    event.preventDefault();\n\n    const tag = ReactionProduct.getTag();\n    const positions = this.positions && this.positions[tag] || {};\n    let weight = positions.weight || 0;\n\n    if (weight < 2) {\n      weight++;\n    } else {\n      weight = 0;\n    }\n\n    const position = {\n      weight: weight,\n      updatedAt: new Date()\n    };\n    Meteor.call(\"products/updateProductPosition\", this._id, position, tag, error => {\n      if (error) {\n        Logger.warn(error);\n        throw new Meteor.Error(403, error);\n      }\n    });\n    return Tracker.flush();\n  }\n});\n"]},"hash":"b1dd4b16430c08f699fb33bb9082d797cdce32c3"}
