{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"/lib/collections","imported":["Shops"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"}]},{"source":"/server/api","imported":["Logger"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":["addRolesToDefaultRoleSet","options"],"specifiers":[{"kind":"local","local":"addRolesToDefaultRoleSet","exported":"addRolesToDefaultRoleSet"},{"kind":"local","local":"options","exported":"options"}]}}},"options":{"filename":"/server/api/core/addDefaultRoles.js","filenameRelative":"/server/api/core/addDefaultRoles.js","inputSourceMap":{"version":3,"sources":["/server/api/core/addDefaultRoles.js"],"names":["check","Match","Shops","Logger","addRolesToDefaultRoleSet","options","allShops","roles","shops","roleSets","String","Maybe","Boolean","query","update","_id","$in","forEach","roleSet","$each","debug","$addToSet","multi"],"mappings":"AAAA,OAAS;AAAT,AAAgB,AAAa;AAA7B;;AAAA;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAc,AAGvB,AAWA,AAAO,AAAS,AAAyB,A,AAAlC,AAA4C,AAAE,AAAU,AAAO,AAAO,AAAI;;AAA9B,AAAqC;AAAI;;;;;;QAAU,AAAC,gBAAhG,AAA4C,AAAmD;AAAoB,sCACxH;QAAM,QAAN,AAAc,OAAO,AAAC,MAAtB,AAAqB,OACrB;QAAM,QAAN,AAAc,UAAU,MAAA,AAAM,MAAM,CAApC,AAAwB,AACxB,AAAM,AAAQ,AAAO,AAAM,AAAM,AAAC,AAClC,AAAM;MAAQ;MAAd,AAAwB,QAAxB,AAEA;MAF8B;MAAN,AAAY,AAAC;MAE/B,QAAE;MAAF,SAAA,AAAY,AAAO;;OAAnB,UAA0B;AAA1B;AAAuC,UAA7C;AACM,WAAN,AAAc,SACd,AAAM,AAAS;AADf;AAGA,AAAI,AAAC,AAAU,AACb;;sCACA;AAAA,AAAM,AAAM,AACV;WAAK,AAAS;aADJ;;AAAZ,AAGD;;gBAED;WAAA,AAAS,AAAQ,AAAC,AAAY,mDAC5B;SACA;WAAA,AAAO,AAAW,gFAAE;AAApB,AAAkB,AAAS,AAC5B;;AAHD;;;;;AAKA,AAAI,AAAU,AACZ,AAAO,AAAO,AAAe,AAAM,AAAgB,AAAS,AAC7D,AAAM,AACL,AAAO,AAAO,AAAgB,AAAM,AAAgB,AAAS,AAAc,AAAM,AAClF,AAED,AAAO,AAAM,AAAO,AAAO,AAAE,AAAW,AAAU,AAAE,AAAO,AAC5D","file":"/server/api/core/addDefaultRoles.js.map","sourcesContent":["import { check, Match } from \"meteor/check\";\nimport { Shops } from \"/lib/collections\";\nimport { Logger } from \"/server/api\";\n\n\n/**\n * Add roles to the Shops.defaultRoles array\n * Options:\n * allShops: add supplied roles to all shops, defaults to false\n * roles: Array of roles to add to default roles set\n * shops: Array of shopIds that should be added to set\n * roleSets: Rolesets to add roles to, Options: [\"defaultRoles\", \"defaultVisitorRole\", \"defaultSellerRoles\"]\n * TODO: Review and eliminate rolesets other than \"default\"\n * @param {Object} options - See above for details\n * @returns {Number} result of Shops.update method (number of documents updated)\n */\nexport function addRolesToDefaultRoleSet(options = { allShops: false, roles: [], shops: [], roleSets: [\"defaultRoles\"] }) {\n  check(options.roles, [String]);\n  check(options.allShops, Match.Maybe(Boolean));\n  check(options.shops, Match.Maybe([String]));\n  check(options.roleSets, Match.Maybe([String]));\n\n  const { allShops, roles, shops, roleSets } = options;\n  const query = {};\n  const update = {};\n\n  if (!allShops) {\n    // if we're not updating all shops, we should only update the shops passed in.\n    query._id = {\n      $in: shops || []\n    };\n  }\n\n  roleSets.forEach((roleSet) => {\n    // We should add each role to each roleSet passed in.\n    update[roleSet] = { $each: roles };\n  });\n\n  if (allShops) {\n    Logger.debug(`Adding roles ${roles} to roleSets  ${roleSets} for all shops`);\n  } else {\n    Logger.debug(`Adding roles: ${roles} to roleSets: ${roleSets} for shops: ${shops}`);\n  }\n\n  return Shops.update(query, { $addToSet: update }, { multi: true });\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/api/core/addDefaultRoles.js.map","sourceFileName":"/server/api/core/addDefaultRoles.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"addDefaultRoles"},"ignored":false,"code":"module.export({\n  addRolesToDefaultRoleSet: function () {\n    return addRolesToDefaultRoleSet;\n  }\n});\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 0);\nvar Shops = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  }\n}, 1);\nvar Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 2);\n\nfunction addRolesToDefaultRoleSet() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    allShops: false,\n    roles: [],\n    shops: [],\n    roleSets: [\"defaultRoles\"]\n  };\n  check(options.roles, [String]);\n  check(options.allShops, Match.Maybe(Boolean));\n  check(options.shops, Match.Maybe([String]));\n  check(options.roleSets, Match.Maybe([String]));\n  var allShops = options.allShops,\n      roles = options.roles,\n      shops = options.shops,\n      roleSets = options.roleSets;\n  var query = {};\n  var update = {};\n\n  if (!allShops) {\n    // if we're not updating all shops, we should only update the shops passed in.\n    query._id = {\n      $in: shops || []\n    };\n  }\n\n  roleSets.forEach(function (roleSet) {\n    // We should add each role to each roleSet passed in.\n    update[roleSet] = {\n      $each: roles\n    };\n  });\n\n  if (allShops) {\n    Logger.debug(\"Adding roles \" + roles + \" to roleSets  \" + roleSets + \" for all shops\");\n  } else {\n    Logger.debug(\"Adding roles: \" + roles + \" to roleSets: \" + roleSets + \" for shops: \" + shops);\n  }\n\n  return Shops.update(query, {\n    $addToSet: update\n  }, {\n    multi: true\n  });\n}","map":{"version":3,"sources":["/server/api/core/addDefaultRoles.js"],"names":["check","Match","Shops","Logger","addRolesToDefaultRoleSet","options","allShops","roles","shops","roleSets","String","Maybe","Boolean","query","update","_id","$in","forEach","roleSet","$each","debug","$addToSet","multi"],"mappings":"AAAA,OAAS;AAAT,AAAgB,AAAa;AAA7B;;AAAA;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAc,AAGvB,AAWA,AAAO,AAAS,AAAyB,A,AAAlC,AAA4C,AAAE,AAAU,AAAO,AAAO,AAAI;;AAA9B,AAAqC;AAAI;;;;;;QAAU,AAAC,gBAAhG,AAA4C,AAAmD;AAAoB,sCACxH;QAAM,QAAN,AAAc,OAAO,AAAC,MAAtB,AAAqB,OACrB;QAAM,QAAN,AAAc,UAAU,MAAA,AAAM,MAAM,CAApC,AAAwB,AACxB,AAAM,AAAQ,AAAO,AAAM,AAAM,AAAC,AAClC,AAAM;MAAQ;MAAd,AAAwB,QAAxB,AAEA;MAF8B;MAAN,AAAY,AAAC;MAE/B,QAAE;MAAF,SAAA,AAAY,AAAO;;OAAnB,UAA0B;AAA1B;AAAuC,UAA7C;AACM,WAAN,AAAc,SACd,AAAM,AAAS;AADf;AAGA,AAAI,AAAC,AAAU,AACb;;sCACA;AAAA,AAAM,AAAM,AACV;WAAK,AAAS;aADJ;;AAAZ,AAGD;;gBAED;WAAA,AAAS,AAAQ,AAAC,AAAY,mDAC5B;SACA;WAAA,AAAO,AAAW,gFAAE;AAApB,AAAkB,AAAS,AAC5B;;AAHD;;;;;AAKA,AAAI,AAAU,AACZ,AAAO,AAAO,AAAe,AAAM,AAAgB,AAAS,AAC7D,AAAM,AACL,AAAO,AAAO,AAAgB,AAAM,AAAgB,AAAS,AAAc,AAAM,AAClF,AAED,AAAO,AAAM,AAAO,AAAO,AAAE,AAAW,AAAU,AAAE,AAAO,AAC5D","file":"/server/api/core/addDefaultRoles.js.map","sourcesContent":["import { check, Match } from \"meteor/check\";\nimport { Shops } from \"/lib/collections\";\nimport { Logger } from \"/server/api\";\n\n\n/**\n * Add roles to the Shops.defaultRoles array\n * Options:\n * allShops: add supplied roles to all shops, defaults to false\n * roles: Array of roles to add to default roles set\n * shops: Array of shopIds that should be added to set\n * roleSets: Rolesets to add roles to, Options: [\"defaultRoles\", \"defaultVisitorRole\", \"defaultSellerRoles\"]\n * TODO: Review and eliminate rolesets other than \"default\"\n * @param {Object} options - See above for details\n * @returns {Number} result of Shops.update method (number of documents updated)\n */\nexport function addRolesToDefaultRoleSet(options = { allShops: false, roles: [], shops: [], roleSets: [\"defaultRoles\"] }) {\n  check(options.roles, [String]);\n  check(options.allShops, Match.Maybe(Boolean));\n  check(options.shops, Match.Maybe([String]));\n  check(options.roleSets, Match.Maybe([String]));\n\n  const { allShops, roles, shops, roleSets } = options;\n  const query = {};\n  const update = {};\n\n  if (!allShops) {\n    // if we're not updating all shops, we should only update the shops passed in.\n    query._id = {\n      $in: shops || []\n    };\n  }\n\n  roleSets.forEach((roleSet) => {\n    // We should add each role to each roleSet passed in.\n    update[roleSet] = { $each: roles };\n  });\n\n  if (allShops) {\n    Logger.debug(`Adding roles ${roles} to roleSets  ${roleSets} for all shops`);\n  } else {\n    Logger.debug(`Adding roles: ${roles} to roleSets: ${roleSets} for shops: ${shops}`);\n  }\n\n  return Shops.update(query, { $addToSet: update }, { multi: true });\n}\n"]},"hash":"c6e61a000e37b996b678153bfdadfeb03ff5d6fd"}
