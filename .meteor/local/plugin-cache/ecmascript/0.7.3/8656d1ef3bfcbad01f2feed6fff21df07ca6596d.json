{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/collections","imported":["Cart"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/checkout/client/helpers/cart.js","filenameRelative":"/imports/plugins/core/checkout/client/helpers/cart.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/checkout/client/helpers/cart.js"],"names":["Cart","Template","registerHelper","cartHelpers","showCartIconWarning","showLowInventoryWarning","item","storedCart","findOne","items","variants","inventoryPolicy","lowInventoryWarningThreshold","inventoryQuantity","showItemLowInventoryWarning","variant","cart","billing","address","fullName","name","replace","length"],"mappings":"AAAA;AAAA,AAAS,OAAY,WAArB;;;;;;;;;;GACyB,A,AAAzB,AAAS,AAET;AAKA;;;IAWA,AAAS,AAAe,AAAQ,AAAY,AAC1C,AAAM,AAAc,AAClB;;;;;;;;;;;AAIA;AACE,AAAI,AAAK,AAA2B,AAClC,AAAO,AACR,AACD;;;OAAA,AAAO,iCATS,AAUjB;;eACD;;;;;AAIA,AAA0B,AACxB,AAAI,AACJ,AAAM,AAAa,AAAK,AACxB,AACA;;;;UACA,AAAI,AAAc,AAAW,AAAO,AAClC;UAAA,AAAK,AAAQ,kBAAb,AAAwB,AAAO,AAC7B,UAFJ,CAEI,AAAI,AAAK,AAAY,AAAK,AAAS,AACjC,AAAK,AAAS,AAA8B,AAC5C;AAAA,AAAO,AAAK,AAAS,AACnB,AAAK,AAAS,AACjB;;0CACF;;AACF;;;;;;;;;4GACD;AAAA,AAAO,iCA7BS,AA8BjB;AACD;;;;;;AAKA,AAA4B,AAAS,AACnC,AAAI,AAAW,AAAQ,AACrB,AAAQ,AAA8B,AACtC,AAAO,AAAQ,AACb,AAAQ,AACX,AACD;;;;OAAA,AAAO,gDACR;sFA3CH,AAAoB;uBA6CpB,AAAO,6BA9CT,AA8CE,AACD,A,AAED;;;;;AA3C0B,AACpB;SA+CN;AAAA,AAAS,AAAe,AAAiB,AAAY,AACnD,AAAM,AAAO,AAAK,IAClB,AAAI,AAAQ,AAAK,AAAW,AAAK,AAAQ,AAAM,AAAK,AAAQ,AAAG,AAAW,AAAK,AAAQ,AAAG,AAAQ,AAAU,AAC1G,AAAM,AAAO,AAAK,AAAQ,AAAG,AAAQ,AACrC,AAAI,AAAK,AAAQ,AAAc,AAAI,AAAW,AAAG,AAAO,AACzD;;;;;AALH,AAMC","file":"/imports/plugins/core/checkout/client/helpers/cart.js.map","sourcesContent":["import { Cart } from \"/lib/collections\";\nimport { Template } from \"meteor/templating\";\n\n/*\n * Template helpers for cart\n *\n */\n\n/**\n * cart template helper\n * @description\n * methods to return cart calculated values\n * cartCount, cartSubTotal, cartShipping, cartTaxes, cartTotal\n * are calculated by a transformation on the collection\n * and are available to use in template as cart.xxx\n * in template: {{cart.cartCount}}\n * in code: Cart.findOne().cartTotal()\n * @return {Object} returns inventory helpers\n */\nTemplate.registerHelper(\"cart\", function () {\n  const cartHelpers = {\n    /**\n     * showCartIconWarning\n     * @return {Boolean} return true if low inventory on any item in cart\n     */\n    showCartIconWarning() {\n      if (this.showLowInventoryWarning()) {\n        return true;\n      }\n      return false;\n    },\n    /**\n     * showLowInventoryWarning\n     * @return {Boolean} return true if low inventory on any item in cart\n     */\n    showLowInventoryWarning() {\n      let item;\n      const storedCart = Cart.findOne();\n      // we're not being picky here - first thing in cart\n      // that is low will trigger a inventory warning\n      if (storedCart && storedCart.items) {\n        for (item of storedCart.items) {\n          if (item.variants && item.variants.inventoryPolicy &&\n            item.variants.lowInventoryWarningThreshold) {\n            return item.variants.inventoryQuantity <=\n              item.variants.lowInventoryWarningThreshold;\n          }\n        }\n      }\n      return false;\n    },\n    /**\n     * showLowInventoryWarning\n     * @param {Object} variant - variant object to check inventory levels on\n     * @return {Boolean} return true if low inventory on variant\n     */\n    showItemLowInventoryWarning(variant) {\n      if (variant && variant.inventoryPolicy &&\n        variant.lowInventoryWarningThreshold) {\n        return variant.inventoryQuantity <=\n          variant.lowInventoryWarningThreshold;\n      }\n      return false;\n    }\n  };\n  return cartHelpers;\n});\n\n/**\n * cartPayerName\n * @summary gets current cart billing address / payment name\n * @return {String} returns cart.billing[0].fullName\n */\nTemplate.registerHelper(\"cartPayerName\", function () {\n  const cart = Cart.findOne();\n  if (cart && cart.billing && cart.billing[0] && cart.billing[0].address && cart.billing[0].address.fullName) {\n    const name = cart.billing[0].address.fullName;\n    if (name.replace(/[a-zA-Z ]*/, \"\").length === 0) return name;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/checkout/client/helpers/cart.js.map","sourceFileName":"/imports/plugins/core/checkout/client/helpers/cart.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"cart"},"ignored":false,"code":"var Cart = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  }\n}, 0);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 1);\n/*\n * Template helpers for cart\n *\n */ /**\n     * cart template helper\n     * @description\n     * methods to return cart calculated values\n     * cartCount, cartSubTotal, cartShipping, cartTaxes, cartTotal\n     * are calculated by a transformation on the collection\n     * and are available to use in template as cart.xxx\n     * in template: {{cart.cartCount}}\n     * in code: Cart.findOne().cartTotal()\n     * @return {Object} returns inventory helpers\n     */Template.registerHelper(\"cart\", function () {\n  var cartHelpers = {\n    /**\n     * showCartIconWarning\n     * @return {Boolean} return true if low inventory on any item in cart\n     */showCartIconWarning: function () {\n      if (this.showLowInventoryWarning()) {\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     * showLowInventoryWarning\n     * @return {Boolean} return true if low inventory on any item in cart\n     */showLowInventoryWarning: function () {\n      var item = void 0;\n      var storedCart = Cart.findOne(); // we're not being picky here - first thing in cart\n      // that is low will trigger a inventory warning\n\n      if (storedCart && storedCart.items) {\n        for (var _iterator = storedCart.items, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            item = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            item = _i.value;\n          }\n\n          if (item.variants && item.variants.inventoryPolicy && item.variants.lowInventoryWarningThreshold) {\n            return item.variants.inventoryQuantity <= item.variants.lowInventoryWarningThreshold;\n          }\n        }\n      }\n\n      return false;\n    },\n    /**\n     * showLowInventoryWarning\n     * @param {Object} variant - variant object to check inventory levels on\n     * @return {Boolean} return true if low inventory on variant\n     */showItemLowInventoryWarning: function (variant) {\n      if (variant && variant.inventoryPolicy && variant.lowInventoryWarningThreshold) {\n        return variant.inventoryQuantity <= variant.lowInventoryWarningThreshold;\n      }\n\n      return false;\n    }\n  };\n  return cartHelpers;\n}); /**\n     * cartPayerName\n     * @summary gets current cart billing address / payment name\n     * @return {String} returns cart.billing[0].fullName\n     */\nTemplate.registerHelper(\"cartPayerName\", function () {\n  var cart = Cart.findOne();\n\n  if (cart && cart.billing && cart.billing[0] && cart.billing[0].address && cart.billing[0].address.fullName) {\n    var name = cart.billing[0].address.fullName;\n    if (name.replace(/[a-zA-Z ]*/, \"\").length === 0) return name;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/checkout/client/helpers/cart.js"],"names":["Cart","Template","registerHelper","cartHelpers","showCartIconWarning","showLowInventoryWarning","item","storedCart","findOne","items","variants","inventoryPolicy","lowInventoryWarningThreshold","inventoryQuantity","showItemLowInventoryWarning","variant","cart","billing","address","fullName","name","replace","length"],"mappings":"AAAA;AAAA,AAAS,OAAY,WAArB;;;;;;;;;;GACyB,A,AAAzB,AAAS,AAET;AAKA;;;IAWA,AAAS,AAAe,AAAQ,AAAY,AAC1C,AAAM,AAAc,AAClB;;;;;;;;;;;AAIA;AACE,AAAI,AAAK,AAA2B,AAClC,AAAO,AACR,AACD;;;OAAA,AAAO,iCATS,AAUjB;;eACD;;;;;AAIA,AAA0B,AACxB,AAAI,AACJ,AAAM,AAAa,AAAK,AACxB,AACA;;;;UACA,AAAI,AAAc,AAAW,AAAO,AAClC;UAAA,AAAK,AAAQ,kBAAb,AAAwB,AAAO,AAC7B,UAFJ,CAEI,AAAI,AAAK,AAAY,AAAK,AAAS,AACjC,AAAK,AAAS,AAA8B,AAC5C;AAAA,AAAO,AAAK,AAAS,AACnB,AAAK,AAAS,AACjB;;0CACF;;AACF;;;;;;;;;4GACD;AAAA,AAAO,iCA7BS,AA8BjB;AACD;;;;;;AAKA,AAA4B,AAAS,AACnC,AAAI,AAAW,AAAQ,AACrB,AAAQ,AAA8B,AACtC,AAAO,AAAQ,AACb,AAAQ,AACX,AACD;;;;OAAA,AAAO,gDACR;sFA3CH,AAAoB;uBA6CpB,AAAO,6BA9CT,AA8CE,AACD,A,AAED;;;;;AA3C0B,AACpB;SA+CN;AAAA,AAAS,AAAe,AAAiB,AAAY,AACnD,AAAM,AAAO,AAAK,IAClB,AAAI,AAAQ,AAAK,AAAW,AAAK,AAAQ,AAAM,AAAK,AAAQ,AAAG,AAAW,AAAK,AAAQ,AAAG,AAAQ,AAAU,AAC1G,AAAM,AAAO,AAAK,AAAQ,AAAG,AAAQ,AACrC,AAAI,AAAK,AAAQ,AAAc,AAAI,AAAW,AAAG,AAAO,AACzD;;;;;AALH,AAMC","file":"/imports/plugins/core/checkout/client/helpers/cart.js.map","sourcesContent":["import { Cart } from \"/lib/collections\";\nimport { Template } from \"meteor/templating\";\n\n/*\n * Template helpers for cart\n *\n */\n\n/**\n * cart template helper\n * @description\n * methods to return cart calculated values\n * cartCount, cartSubTotal, cartShipping, cartTaxes, cartTotal\n * are calculated by a transformation on the collection\n * and are available to use in template as cart.xxx\n * in template: {{cart.cartCount}}\n * in code: Cart.findOne().cartTotal()\n * @return {Object} returns inventory helpers\n */\nTemplate.registerHelper(\"cart\", function () {\n  const cartHelpers = {\n    /**\n     * showCartIconWarning\n     * @return {Boolean} return true if low inventory on any item in cart\n     */\n    showCartIconWarning() {\n      if (this.showLowInventoryWarning()) {\n        return true;\n      }\n      return false;\n    },\n    /**\n     * showLowInventoryWarning\n     * @return {Boolean} return true if low inventory on any item in cart\n     */\n    showLowInventoryWarning() {\n      let item;\n      const storedCart = Cart.findOne();\n      // we're not being picky here - first thing in cart\n      // that is low will trigger a inventory warning\n      if (storedCart && storedCart.items) {\n        for (item of storedCart.items) {\n          if (item.variants && item.variants.inventoryPolicy &&\n            item.variants.lowInventoryWarningThreshold) {\n            return item.variants.inventoryQuantity <=\n              item.variants.lowInventoryWarningThreshold;\n          }\n        }\n      }\n      return false;\n    },\n    /**\n     * showLowInventoryWarning\n     * @param {Object} variant - variant object to check inventory levels on\n     * @return {Boolean} return true if low inventory on variant\n     */\n    showItemLowInventoryWarning(variant) {\n      if (variant && variant.inventoryPolicy &&\n        variant.lowInventoryWarningThreshold) {\n        return variant.inventoryQuantity <=\n          variant.lowInventoryWarningThreshold;\n      }\n      return false;\n    }\n  };\n  return cartHelpers;\n});\n\n/**\n * cartPayerName\n * @summary gets current cart billing address / payment name\n * @return {String} returns cart.billing[0].fullName\n */\nTemplate.registerHelper(\"cartPayerName\", function () {\n  const cart = Cart.findOne();\n  if (cart && cart.billing && cart.billing[0] && cart.billing[0].address && cart.billing[0].address.fullName) {\n    const name = cart.billing[0].address.fullName;\n    if (name.replace(/[a-zA-Z ]*/, \"\").length === 0) return name;\n  }\n});\n"]},"hash":"8656d1ef3bfcbad01f2feed6fff21df07ca6596d"}
