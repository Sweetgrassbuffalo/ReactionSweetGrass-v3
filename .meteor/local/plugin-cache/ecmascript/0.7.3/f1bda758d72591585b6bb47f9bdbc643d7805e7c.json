{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/reactive-dict","imported":["ReactiveDict"],"specifiers":[{"kind":"named","imported":"ReactiveDict","local":"ReactiveDict"}]},{"source":"meteor/aldeed:autoform","imported":["AutoForm"],"specifiers":[{"kind":"named","imported":"AutoForm","local":"AutoForm"}]},{"source":"/lib/collections","imported":["Shipping"],"specifiers":[{"kind":"named","imported":"Shipping","local":"Shipping"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/imports/plugins/core/ui-grid/client/griddle","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"MeteorGriddle"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["IconButton","Loading"],"specifiers":[{"kind":"named","imported":"IconButton","local":"IconButton"},{"kind":"named","imported":"Loading","local":"Loading"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/shipping-rates/client/templates/settings/rates.js","filenameRelative":"/imports/plugins/included/shipping-rates/client/templates/settings/rates.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/shipping-rates/client/templates/settings/rates.js"],"names":["Template","ReactiveDict","AutoForm","Shipping","i18next","MeteorGriddle","IconButton","Loading","shippingRatesSettings","onCreated","autorun","subscribe","state","setDefault","isEditing","editingId","helpers","editButton","instance","equals","get","component","icon","onIcon","toggle","toggleOn","style","position","top","right","onClick","$","removeClass","set","shippingGrid","filteredFields","noDataMessage","t","editRow","options","currentId","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","transform","results","result","method","provider","name","methods","publication","collection","matchingResultsCount","showFilter","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","shippingRate","id","providerRates","findOne","rate","events","confirmTitle","confirmButtonText","Alerts","alert","title","type","showCancelButton","isConfirm","Meteor","call","event","currentTarget","addClass","hooks","onSuccess","toast","onError","operation","error"],"mappings":"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","file":"/imports/plugins/included/shipping-rates/client/templates/settings/rates.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { Shipping } from \"/lib/collections\";\nimport { i18next } from \"/client/api\";\nimport MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport { IconButton, Loading } from \"/imports/plugins/core/ui/client/components\";\n\nTemplate.shippingRatesSettings.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"Shipping\");\n  });\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\nTemplate.shippingRatesSettings.helpers({\n  editButton() {\n    const instance = Template.instance();\n    const state = instance.state;\n    const isEditing = state.equals(\"isEditing\", true);\n    let editingId = state.get(\"editingId\");\n    // toggle edit state\n    if (!isEditing) {\n      editingId = null;\n    }\n    // return icon\n    return {\n      component: IconButton,\n      icon: \"fa fa-plus\",\n      onIcon: \"fa fa-pencil\",\n      toggle: true,\n      toggleOn: isEditing,\n      style: {\n        position: \"relative\",\n        top: \"-25px\",\n        right: \"8px\"\n      },\n      onClick() {\n        // remove active rows from grid\n        $(\".shipping-grid-row\").removeClass(\"active\");\n        return state.set({\n          isEditing: !isEditing,\n          editingId: editingId\n        });\n      }\n    };\n  },\n  shippingGrid() {\n    const filteredFields = [\"name\", \"group\", \"label\", \"rate\"];\n    const noDataMessage = i18next.t(\"admin.shippingSettings.noRatesFound\");\n    const instance = Template.instance();\n\n    // griddle helper to select row\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n      // isEditing is shipping rate object\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    // add shipping-grid-row class\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"shipping-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`admin.shippingGrid.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // filter and extract shipping methods\n    // from flat rate shipping provider\n    function transform(results) {\n      const result = [];\n      for (method of results) {\n        if (method.provider && method.provider.name === \"flatRates\") {\n          result.push(method.methods);\n        }\n      }\n      return result[0];\n    }\n\n    // return shipping Grid\n    return {\n      component: MeteorGriddle,\n      publication: \"Shipping\",\n      transform: transform,\n      collection: Shipping,\n      matchingResultsCount: \"shipping-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n\n  shippingRate() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const providerRates = Shipping.findOne({ \"provider.name\": \"flatRates\" }) || {};\n    let rate = {};\n    if (providerRates && providerRates.methods) {\n      if (id) {\n        for (method of providerRates.methods) {\n          if (method._id === id) {\n            rate = method;\n          }\n        }\n      } else {\n        // a little trick to provide _id for insert\n        rate._id = providerRates._id;\n      }\n    }\n    return rate;\n  }\n});\n\n//\n// on submit lets clear the form state\n//\nTemplate.shippingRatesSettings.events({\n  \"submit #shipping-rates-update-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"submit #shipping-rates-insert-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .shipping-grid-row .active\": function () {\n    instance = Template.instance();\n    // remove active rows from grid\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n    // ugly hack\n    $(\".shipping-grid-row\").removeClass(\"active\");\n  },\n  \"click .delete\": function () {\n    const confirmTitle = i18next.t(\"admin.shippingSettings.confirmRateDelete\");\n    const confirmButtonText = i18next.t(\"app.delete\");\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    // confirm delete\n    Alerts.alert({\n      title: confirmTitle,\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: confirmButtonText\n    }, (isConfirm) => {\n      if (isConfirm) {\n        if (id) {\n          Meteor.call(\"shipping/rates/delete\", id);\n          instance.state.set({\n            isEditing: false,\n            editingId: null\n          });\n        }\n      }\n    });\n  },\n  \"click .shipping-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".shipping-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n});\n\n//\n// Hooks for update and insert forms\n//\nAutoForm.hooks({\n  \"shipping-rates-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.rateSaved\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.shippingSettings.rateFailed\")} ${error}`, \"error\"\n      );\n    }\n  },\n  \"shipping-rates-insert-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.rateSaved\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.shippingSettings.rateFailed\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/shipping-rates/client/templates/settings/rates.js.map","sourceFileName":"/imports/plugins/included/shipping-rates/client/templates/settings/rates.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"rates"},"ignored":false,"code":"var Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 0);\nvar ReactiveDict = void 0;\nmodule.importSync(\"meteor/reactive-dict\", {\n  ReactiveDict: function (v) {\n    ReactiveDict = v;\n  }\n}, 1);\nvar AutoForm = void 0;\nmodule.importSync(\"meteor/aldeed:autoform\", {\n  AutoForm: function (v) {\n    AutoForm = v;\n  }\n}, 2);\nvar Shipping = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shipping: function (v) {\n    Shipping = v;\n  }\n}, 3);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 4);\nvar MeteorGriddle = void 0;\nmodule.importSync(\"/imports/plugins/core/ui-grid/client/griddle\", {\n  \"default\": function (v) {\n    MeteorGriddle = v;\n  }\n}, 5);\nvar IconButton = void 0,\n    Loading = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  IconButton: function (v) {\n    IconButton = v;\n  },\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 6);\nTemplate.shippingRatesSettings.onCreated(function () {\n  var _this = this;\n\n  this.autorun(function () {\n    _this.subscribe(\"Shipping\");\n  });\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\nTemplate.shippingRatesSettings.helpers({\n  editButton: function () {\n    var instance = Template.instance();\n    var state = instance.state;\n    var isEditing = state.equals(\"isEditing\", true);\n    var editingId = state.get(\"editingId\"); // toggle edit state\n\n    if (!isEditing) {\n      editingId = null;\n    } // return icon\n\n\n    return {\n      component: IconButton,\n      icon: \"fa fa-plus\",\n      onIcon: \"fa fa-pencil\",\n      toggle: true,\n      toggleOn: isEditing,\n      style: {\n        position: \"relative\",\n        top: \"-25px\",\n        right: \"8px\"\n      },\n      onClick: function () {\n        // remove active rows from grid\n        $(\".shipping-grid-row\").removeClass(\"active\");\n        return state.set({\n          isEditing: !isEditing,\n          editingId: editingId\n        });\n      }\n    };\n  },\n  shippingGrid: function () {\n    var filteredFields = [\"name\", \"group\", \"label\", \"rate\"];\n    var noDataMessage = i18next.t(\"admin.shippingSettings.noRatesFound\");\n    var instance = Template.instance(); // griddle helper to select row\n\n    function editRow(options) {\n      var currentId = instance.state.get(\"editingId\"); // isEditing is shipping rate object\n\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id); // toggle edit mode clicking on same row\n\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    } // add shipping-grid-row class\n\n\n    var customRowMetaData = {\n      bodyCssClassName: function () {\n        return \"shipping-grid-row\";\n      }\n    }; // add i18n handling to headers\n\n    var customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      var columnMeta = {\n        columnName: field,\n        displayName: i18next.t(\"admin.shippingGrid.\" + field)\n      };\n      customColumnMetadata.push(columnMeta);\n    }); // filter and extract shipping methods\n    // from flat rate shipping provider\n\n    function transform(results) {\n      var result = [];\n\n      for (var _iterator = results, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          method = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          method = _i.value;\n        }\n\n        if (method.provider && method.provider.name === \"flatRates\") {\n          result.push(method.methods);\n        }\n      }\n\n      return result[0];\n    } // return shipping Grid\n\n\n    return {\n      component: MeteorGriddle,\n      publication: \"Shipping\",\n      transform: transform,\n      collection: Shipping,\n      matchingResultsCount: \"shipping-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n  instance: function () {\n    var instance = Template.instance();\n    return instance;\n  },\n  shippingRate: function () {\n    var instance = Template.instance();\n    var id = instance.state.get(\"editingId\");\n    var providerRates = Shipping.findOne({\n      \"provider.name\": \"flatRates\"\n    }) || {};\n    var rate = {};\n\n    if (providerRates && providerRates.methods) {\n      if (id) {\n        for (var _iterator2 = providerRates.methods, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n          if (_isArray2) {\n            if (_i2 >= _iterator2.length) break;\n            method = _iterator2[_i2++];\n          } else {\n            _i2 = _iterator2.next();\n            if (_i2.done) break;\n            method = _i2.value;\n          }\n\n          if (method._id === id) {\n            rate = method;\n          }\n        }\n      } else {\n        // a little trick to provide _id for insert\n        rate._id = providerRates._id;\n      }\n    }\n\n    return rate;\n  }\n}); //\n// on submit lets clear the form state\n//\n\nTemplate.shippingRatesSettings.events({\n  \"submit #shipping-rates-update-form\": function () {\n    var instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"submit #shipping-rates-insert-form\": function () {\n    var instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .shipping-grid-row .active\": function () {\n    instance = Template.instance(); // remove active rows from grid\n\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    }); // ugly hack\n\n    $(\".shipping-grid-row\").removeClass(\"active\");\n  },\n  \"click .delete\": function () {\n    var confirmTitle = i18next.t(\"admin.shippingSettings.confirmRateDelete\");\n    var confirmButtonText = i18next.t(\"app.delete\");\n    var instance = Template.instance();\n    var id = instance.state.get(\"editingId\"); // confirm delete\n\n    Alerts.alert({\n      title: confirmTitle,\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: confirmButtonText\n    }, function (isConfirm) {\n      if (isConfirm) {\n        if (id) {\n          Meteor.call(\"shipping/rates/delete\", id);\n          instance.state.set({\n            isEditing: false,\n            editingId: null\n          });\n        }\n      }\n    });\n  },\n  \"click .shipping-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".shipping-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n}); //\n// Hooks for update and insert forms\n//\n\nAutoForm.hooks({\n  \"shipping-rates-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.rateSaved\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.rateFailed\") + \" \" + error, \"error\");\n    }\n  },\n  \"shipping-rates-insert-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.rateSaved\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.rateFailed\") + \" \" + error, \"error\");\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/shipping-rates/client/templates/settings/rates.js"],"names":["Template","ReactiveDict","AutoForm","Shipping","i18next","MeteorGriddle","IconButton","Loading","shippingRatesSettings","onCreated","autorun","subscribe","state","setDefault","isEditing","editingId","helpers","editButton","instance","equals","get","component","icon","onIcon","toggle","toggleOn","style","position","top","right","onClick","$","removeClass","set","shippingGrid","filteredFields","noDataMessage","t","editRow","options","currentId","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","transform","results","result","method","provider","name","methods","publication","collection","matchingResultsCount","showFilter","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","shippingRate","id","providerRates","findOne","rate","events","confirmTitle","confirmButtonText","Alerts","alert","title","type","showCancelButton","isConfirm","Meteor","call","event","currentTarget","addClass","hooks","onSuccess","toast","onError","operation","error"],"mappings":"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","file":"/imports/plugins/included/shipping-rates/client/templates/settings/rates.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { Shipping } from \"/lib/collections\";\nimport { i18next } from \"/client/api\";\nimport MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport { IconButton, Loading } from \"/imports/plugins/core/ui/client/components\";\n\nTemplate.shippingRatesSettings.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"Shipping\");\n  });\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\nTemplate.shippingRatesSettings.helpers({\n  editButton() {\n    const instance = Template.instance();\n    const state = instance.state;\n    const isEditing = state.equals(\"isEditing\", true);\n    let editingId = state.get(\"editingId\");\n    // toggle edit state\n    if (!isEditing) {\n      editingId = null;\n    }\n    // return icon\n    return {\n      component: IconButton,\n      icon: \"fa fa-plus\",\n      onIcon: \"fa fa-pencil\",\n      toggle: true,\n      toggleOn: isEditing,\n      style: {\n        position: \"relative\",\n        top: \"-25px\",\n        right: \"8px\"\n      },\n      onClick() {\n        // remove active rows from grid\n        $(\".shipping-grid-row\").removeClass(\"active\");\n        return state.set({\n          isEditing: !isEditing,\n          editingId: editingId\n        });\n      }\n    };\n  },\n  shippingGrid() {\n    const filteredFields = [\"name\", \"group\", \"label\", \"rate\"];\n    const noDataMessage = i18next.t(\"admin.shippingSettings.noRatesFound\");\n    const instance = Template.instance();\n\n    // griddle helper to select row\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n      // isEditing is shipping rate object\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    // add shipping-grid-row class\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"shipping-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`admin.shippingGrid.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // filter and extract shipping methods\n    // from flat rate shipping provider\n    function transform(results) {\n      const result = [];\n      for (method of results) {\n        if (method.provider && method.provider.name === \"flatRates\") {\n          result.push(method.methods);\n        }\n      }\n      return result[0];\n    }\n\n    // return shipping Grid\n    return {\n      component: MeteorGriddle,\n      publication: \"Shipping\",\n      transform: transform,\n      collection: Shipping,\n      matchingResultsCount: \"shipping-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n\n  shippingRate() {\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const providerRates = Shipping.findOne({ \"provider.name\": \"flatRates\" }) || {};\n    let rate = {};\n    if (providerRates && providerRates.methods) {\n      if (id) {\n        for (method of providerRates.methods) {\n          if (method._id === id) {\n            rate = method;\n          }\n        }\n      } else {\n        // a little trick to provide _id for insert\n        rate._id = providerRates._id;\n      }\n    }\n    return rate;\n  }\n});\n\n//\n// on submit lets clear the form state\n//\nTemplate.shippingRatesSettings.events({\n  \"submit #shipping-rates-update-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"submit #shipping-rates-insert-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .shipping-grid-row .active\": function () {\n    instance = Template.instance();\n    // remove active rows from grid\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n    // ugly hack\n    $(\".shipping-grid-row\").removeClass(\"active\");\n  },\n  \"click .delete\": function () {\n    const confirmTitle = i18next.t(\"admin.shippingSettings.confirmRateDelete\");\n    const confirmButtonText = i18next.t(\"app.delete\");\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    // confirm delete\n    Alerts.alert({\n      title: confirmTitle,\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: confirmButtonText\n    }, (isConfirm) => {\n      if (isConfirm) {\n        if (id) {\n          Meteor.call(\"shipping/rates/delete\", id);\n          instance.state.set({\n            isEditing: false,\n            editingId: null\n          });\n        }\n      }\n    });\n  },\n  \"click .shipping-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".shipping-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n});\n\n//\n// Hooks for update and insert forms\n//\nAutoForm.hooks({\n  \"shipping-rates-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.rateSaved\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.shippingSettings.rateFailed\")} ${error}`, \"error\"\n      );\n    }\n  },\n  \"shipping-rates-insert-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.shippingSettings.rateSaved\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.shippingSettings.rateFailed\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n"]},"hash":"f1bda758d72591585b6bb47f9bdbc643d7805e7c"}
