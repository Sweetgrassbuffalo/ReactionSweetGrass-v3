{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"i18next","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"i18next"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/tracker","imported":["Tracker"],"specifiers":[{"kind":"named","imported":"Tracker","local":"Tracker"}]},{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/lib/collections","imported":["Shops","Packages"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"},{"kind":"named","imported":"Packages","local":"Packages"}]}],"exports":{"exported":["getBrowserLanguage","getLabelsFor","schema","name","getMessagesFor","i18nextDep","localeDep","currencyDep","packageNamespaces"],"specifiers":[{"kind":"local","local":"getBrowserLanguage","exported":"getBrowserLanguage"},{"kind":"local","local":"getLabelsFor","exported":"getLabelsFor"},{"kind":"local","local":"schema","exported":"schema"},{"kind":"local","local":"name","exported":"name"},{"kind":"local","local":"getMessagesFor","exported":"getMessagesFor"},{"kind":"local","local":"i18nextDep","exported":"i18nextDep"},{"kind":"local","local":"localeDep","exported":"localeDep"},{"kind":"local","local":"currencyDep","exported":"currencyDep"},{"kind":"local","local":"packageNamespaces","exported":"packageNamespaces"}]}}},"options":{"filename":"/client/modules/i18n/main.js","filenameRelative":"/client/modules/i18n/main.js","inputSourceMap":{"version":3,"sources":["/client/modules/i18n/main.js"],"names":["i18next","Meteor","Tracker","SimpleSchema","Reaction","Shops","Packages","getBrowserLanguage","navigator","languages","indexOf","split","language","browserLanguage","getLabelsFor","schema","name","labels","fieldName","_schemaKeys","i18nKey","charAt","toLowerCase","slice","join","t","RegExp","test","getMessagesFor","messages","message","_globalMessages","hasOwnProperty","call","i18nextDep","Dependency","localeDep","currencyDep","packageNamespaces","startup","autorun","c","Subscriptions","ready","packages","find","fields","fetch","pkg","push","error","result","locale","moment","currencyEnabled","currency","enabled","user","profile","localStorage","setItem","localStorageCurrency","getItem","primaryCurrency","shop","findOne","getShopId","Locale","set","changed","stop"],"mappings":"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","file":"/client/modules/i18n/main.js.map","sourcesContent":["import i18next from \"i18next\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Tracker } from \"meteor/tracker\";\nimport { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { Reaction } from \"/client/api\";\nimport { Shops, Packages } from \"/lib/collections\";\n\n//\n// Reaction i18n Translations, RTL and Currency Exchange Support\n//\n\n/**\n * getBrowserLanguage\n * @summary detects device default language\n * @return {String} language code\n */\nexport function getBrowserLanguage() {\n  if (typeof navigator.languages !== \"undefined\") {\n    if (~navigator.languages[0].indexOf(\"-\")) {\n      return navigator.languages[0].split(\"-\")[0];\n    } else if (~navigator.languages[0].indexOf(\"_\")) {\n      return navigator.languages[0].split(\"_\")[0];\n    }\n    return navigator.languages[0];\n  }\n  return navigator.language || navigator.browserLanguage;\n}\n\n/**\n * getLabelsFor\n * get Labels for simple.schema keys\n * @param  {Object} schema - schema\n * @param  {String} name - name\n * @return {Object} return schema label object\n */\nexport function getLabelsFor(schema, name) {\n  const labels = {};\n  // loop through all the rendered form fields and generate i18n keys\n  for (const fieldName of schema._schemaKeys) {\n    const i18nKey = name.charAt(0).toLowerCase() + name.slice(1) + \".\" +\n      fieldName\n      .split(\".$\").join(\"\");\n    // translate autoform label\n    const t = i18next.t(i18nKey);\n    if (new RegExp(\"string\").test(t) !== true && t !== i18nKey) {\n      if (t) {\n        labels[fieldName] = t;\n      }\n    }\n  }\n  return labels;\n}\n\n/**\n * getMessagesFor\n * get i18n messages for autoform messages\n * currently using a globalMessage namespace only*\n * (1) Use schema-specific message for specific key\n * (2) Use schema-specific message for generic key\n * (3) Use schema-specific message for type\n * @todo implement messaging hierarchy from simple-schema\n * @return {Object} returns i18n translated message for schema labels\n */\nexport function getMessagesFor() {\n  const messages = {};\n  for (const message in SimpleSchema._globalMessages) {\n    if ({}.hasOwnProperty.call(SimpleSchema._globalMessages, message)) {\n      const i18nKey = `globalMessages.${message}`;\n      const t = i18next.t(i18nKey);\n      if (new RegExp(\"string\").test(t) !== true && t !== i18nKey) {\n        messages[message] = t;\n      }\n    }\n  }\n  return messages;\n}\n\n/**\n *  set language and autorun on change of language\n *  initialize i18n and load data resources for the current language and fallback \"EN\"\n *\n */\nexport const i18nextDep = new Tracker.Dependency();\nexport const localeDep = new Tracker.Dependency();\nexport const currencyDep = new Tracker.Dependency();\nexport const packageNamespaces = [];\n\nMeteor.startup(() => {\n  Tracker.autorun(function (c) {\n    // setting local and active packageNamespaces\n    // packageNamespaces are used to determine i18n namespace\n    if (Reaction.Subscriptions.Shops.ready()) {\n      // every package gets a namespace, fetch them and export\n      const packages = Packages.find({}, {\n        fields: {\n          name: 1\n        }\n      }).fetch();\n      for (const pkg of packages) {\n        packageNamespaces.push(pkg.name);\n      }\n\n      // use i18n detected language to getLocale info\n      Meteor.call(\"shop/getLocale\", (error, result) => {\n        if (result) {\n          const locale = result;\n          locale.language = getBrowserLanguage();\n          moment.locale(locale.language);\n          // flag in case the locale currency isn't enabled\n          locale.currencyEnabled = locale.currency.enabled;\n          const user = Meteor.user();\n          if (user && user.profile && user.profile.currency) {\n            localStorage.setItem(\"currency\", user.profile.currency);\n          } else {\n            const localStorageCurrency = localStorage.getItem(\"currency\");\n            if (!localStorageCurrency) {\n              if (locale.currencyEnabled) {\n                // in case of multiple locale currencies\n                const primaryCurrency = locale.locale.currency.split(\",\")[0];\n                localStorage.setItem(\"currency\", primaryCurrency);\n              } else {\n                const shop = Shops.findOne(Reaction.getShopId(), {\n                  fields: {\n                    currency: 1\n                  }\n                });\n                localStorage.setItem(\"currency\", shop.currency);\n              }\n            }\n          }\n          Reaction.Locale.set(locale);\n          localeDep.changed();\n\n          // Stop the tracker\n          c.stop();\n        }\n      });\n    }\n  });\n});\n\nexport default i18next;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/i18n/main.js.map","sourceFileName":"/client/modules/i18n/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"main"},"ignored":false,"code":"module.export({\n  getBrowserLanguage: function () {\n    return getBrowserLanguage;\n  },\n  getLabelsFor: function () {\n    return getLabelsFor;\n  },\n  getMessagesFor: function () {\n    return getMessagesFor;\n  },\n  i18nextDep: function () {\n    return i18nextDep;\n  },\n  localeDep: function () {\n    return localeDep;\n  },\n  currencyDep: function () {\n    return currencyDep;\n  },\n  packageNamespaces: function () {\n    return packageNamespaces;\n  }\n});\nvar i18next = void 0;\nmodule.importSync(\"i18next\", {\n  \"default\": function (v) {\n    i18next = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Tracker = void 0;\nmodule.importSync(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 2);\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 3);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 4);\nvar Shops = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 5);\n\nfunction getBrowserLanguage() {\n  if (typeof navigator.languages !== \"undefined\") {\n    if (~navigator.languages[0].indexOf(\"-\")) {\n      return navigator.languages[0].split(\"-\")[0];\n    } else if (~navigator.languages[0].indexOf(\"_\")) {\n      return navigator.languages[0].split(\"_\")[0];\n    }\n\n    return navigator.languages[0];\n  }\n\n  return navigator.language || navigator.browserLanguage;\n}\n\nfunction getLabelsFor(schema, name) {\n  var labels = {}; // loop through all the rendered form fields and generate i18n keys\n\n  for (var _iterator = schema._schemaKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var fieldName = _ref;\n    var i18nKey = name.charAt(0).toLowerCase() + name.slice(1) + \".\" + fieldName.split(\".$\").join(\"\"); // translate autoform label\n\n    var t = i18next.t(i18nKey);\n\n    if (new RegExp(\"string\").test(t) !== true && t !== i18nKey) {\n      if (t) {\n        labels[fieldName] = t;\n      }\n    }\n  }\n\n  return labels;\n}\n\nfunction getMessagesFor() {\n  var messages = {};\n\n  for (var message in meteorBabelHelpers.sanitizeForInObject(SimpleSchema._globalMessages)) {\n    if ({}.hasOwnProperty.call(SimpleSchema._globalMessages, message)) {\n      var i18nKey = \"globalMessages.\" + message;\n      var t = i18next.t(i18nKey);\n\n      if (new RegExp(\"string\").test(t) !== true && t !== i18nKey) {\n        messages[message] = t;\n      }\n    }\n  }\n\n  return messages;\n}\n\nvar i18nextDep = new Tracker.Dependency();\nvar localeDep = new Tracker.Dependency();\nvar currencyDep = new Tracker.Dependency();\nvar packageNamespaces = [];\nMeteor.startup(function () {\n  Tracker.autorun(function (c) {\n    // setting local and active packageNamespaces\n    // packageNamespaces are used to determine i18n namespace\n    if (Reaction.Subscriptions.Shops.ready()) {\n      // every package gets a namespace, fetch them and export\n      var packages = Packages.find({}, {\n        fields: {\n          name: 1\n        }\n      }).fetch();\n\n      for (var _iterator2 = packages, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var pkg = _ref2;\n        packageNamespaces.push(pkg.name);\n      } // use i18n detected language to getLocale info\n\n\n      Meteor.call(\"shop/getLocale\", function (error, result) {\n        if (result) {\n          var locale = result;\n          locale.language = getBrowserLanguage();\n          moment.locale(locale.language); // flag in case the locale currency isn't enabled\n\n          locale.currencyEnabled = locale.currency.enabled;\n          var user = Meteor.user();\n\n          if (user && user.profile && user.profile.currency) {\n            localStorage.setItem(\"currency\", user.profile.currency);\n          } else {\n            var localStorageCurrency = localStorage.getItem(\"currency\");\n\n            if (!localStorageCurrency) {\n              if (locale.currencyEnabled) {\n                // in case of multiple locale currencies\n                var primaryCurrency = locale.locale.currency.split(\",\")[0];\n                localStorage.setItem(\"currency\", primaryCurrency);\n              } else {\n                var shop = Shops.findOne(Reaction.getShopId(), {\n                  fields: {\n                    currency: 1\n                  }\n                });\n                localStorage.setItem(\"currency\", shop.currency);\n              }\n            }\n          }\n\n          Reaction.Locale.set(locale);\n          localeDep.changed(); // Stop the tracker\n\n          c.stop();\n        }\n      });\n    }\n  });\n});\nmodule.export(\"default\", exports.default = i18next);","map":{"version":3,"sources":["/client/modules/i18n/main.js"],"names":["i18next","Meteor","Tracker","SimpleSchema","Reaction","Shops","Packages","getBrowserLanguage","navigator","languages","indexOf","split","language","browserLanguage","getLabelsFor","schema","name","labels","fieldName","_schemaKeys","i18nKey","charAt","toLowerCase","slice","join","t","RegExp","test","getMessagesFor","messages","message","_globalMessages","hasOwnProperty","call","i18nextDep","Dependency","localeDep","currencyDep","packageNamespaces","startup","autorun","c","Subscriptions","ready","packages","find","fields","fetch","pkg","push","error","result","locale","moment","currencyEnabled","currency","enabled","user","profile","localStorage","setItem","localStorageCurrency","getItem","primaryCurrency","shop","findOne","getShopId","Locale","set","changed","stop"],"mappings":"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","file":"/client/modules/i18n/main.js.map","sourcesContent":["import i18next from \"i18next\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Tracker } from \"meteor/tracker\";\nimport { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { Reaction } from \"/client/api\";\nimport { Shops, Packages } from \"/lib/collections\";\n\n//\n// Reaction i18n Translations, RTL and Currency Exchange Support\n//\n\n/**\n * getBrowserLanguage\n * @summary detects device default language\n * @return {String} language code\n */\nexport function getBrowserLanguage() {\n  if (typeof navigator.languages !== \"undefined\") {\n    if (~navigator.languages[0].indexOf(\"-\")) {\n      return navigator.languages[0].split(\"-\")[0];\n    } else if (~navigator.languages[0].indexOf(\"_\")) {\n      return navigator.languages[0].split(\"_\")[0];\n    }\n    return navigator.languages[0];\n  }\n  return navigator.language || navigator.browserLanguage;\n}\n\n/**\n * getLabelsFor\n * get Labels for simple.schema keys\n * @param  {Object} schema - schema\n * @param  {String} name - name\n * @return {Object} return schema label object\n */\nexport function getLabelsFor(schema, name) {\n  const labels = {};\n  // loop through all the rendered form fields and generate i18n keys\n  for (const fieldName of schema._schemaKeys) {\n    const i18nKey = name.charAt(0).toLowerCase() + name.slice(1) + \".\" +\n      fieldName\n      .split(\".$\").join(\"\");\n    // translate autoform label\n    const t = i18next.t(i18nKey);\n    if (new RegExp(\"string\").test(t) !== true && t !== i18nKey) {\n      if (t) {\n        labels[fieldName] = t;\n      }\n    }\n  }\n  return labels;\n}\n\n/**\n * getMessagesFor\n * get i18n messages for autoform messages\n * currently using a globalMessage namespace only*\n * (1) Use schema-specific message for specific key\n * (2) Use schema-specific message for generic key\n * (3) Use schema-specific message for type\n * @todo implement messaging hierarchy from simple-schema\n * @return {Object} returns i18n translated message for schema labels\n */\nexport function getMessagesFor() {\n  const messages = {};\n  for (const message in SimpleSchema._globalMessages) {\n    if ({}.hasOwnProperty.call(SimpleSchema._globalMessages, message)) {\n      const i18nKey = `globalMessages.${message}`;\n      const t = i18next.t(i18nKey);\n      if (new RegExp(\"string\").test(t) !== true && t !== i18nKey) {\n        messages[message] = t;\n      }\n    }\n  }\n  return messages;\n}\n\n/**\n *  set language and autorun on change of language\n *  initialize i18n and load data resources for the current language and fallback \"EN\"\n *\n */\nexport const i18nextDep = new Tracker.Dependency();\nexport const localeDep = new Tracker.Dependency();\nexport const currencyDep = new Tracker.Dependency();\nexport const packageNamespaces = [];\n\nMeteor.startup(() => {\n  Tracker.autorun(function (c) {\n    // setting local and active packageNamespaces\n    // packageNamespaces are used to determine i18n namespace\n    if (Reaction.Subscriptions.Shops.ready()) {\n      // every package gets a namespace, fetch them and export\n      const packages = Packages.find({}, {\n        fields: {\n          name: 1\n        }\n      }).fetch();\n      for (const pkg of packages) {\n        packageNamespaces.push(pkg.name);\n      }\n\n      // use i18n detected language to getLocale info\n      Meteor.call(\"shop/getLocale\", (error, result) => {\n        if (result) {\n          const locale = result;\n          locale.language = getBrowserLanguage();\n          moment.locale(locale.language);\n          // flag in case the locale currency isn't enabled\n          locale.currencyEnabled = locale.currency.enabled;\n          const user = Meteor.user();\n          if (user && user.profile && user.profile.currency) {\n            localStorage.setItem(\"currency\", user.profile.currency);\n          } else {\n            const localStorageCurrency = localStorage.getItem(\"currency\");\n            if (!localStorageCurrency) {\n              if (locale.currencyEnabled) {\n                // in case of multiple locale currencies\n                const primaryCurrency = locale.locale.currency.split(\",\")[0];\n                localStorage.setItem(\"currency\", primaryCurrency);\n              } else {\n                const shop = Shops.findOne(Reaction.getShopId(), {\n                  fields: {\n                    currency: 1\n                  }\n                });\n                localStorage.setItem(\"currency\", shop.currency);\n              }\n            }\n          }\n          Reaction.Locale.set(locale);\n          localeDep.changed();\n\n          // Stop the tracker\n          c.stop();\n        }\n      });\n    }\n  });\n});\n\nexport default i18next;\n"]},"hash":"be189824e819ef67872a6beb5010b44a8451bc7b"}
