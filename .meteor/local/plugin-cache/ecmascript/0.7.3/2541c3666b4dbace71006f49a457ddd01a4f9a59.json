{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/blaze","imported":["Blaze"],"specifiers":[{"kind":"named","imported":"Blaze","local":"Blaze"}]},{"source":"meteor/reactive-var","imported":["ReactiveVar"],"specifiers":[{"kind":"named","imported":"ReactiveVar","local":"ReactiveVar"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/gadicc:blaze-react-component","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"BlazeComponent"}]},{"source":"prop-types","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PropTypes"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/layout/lib/blazeLayout.js","filenameRelative":"/imports/plugins/core/layout/lib/blazeLayout.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/layout/lib/blazeLayout.js"],"names":["ReactDOM","Blaze","ReactiveVar","Template","BlazeComponent","PropTypes","BlazeLayout","propTypes","blazeLayout","any","componentDidUpdate","prevProps","blazeTemplate","props","remove","_blazeView","renderBlazeView","_blazeData","_","omit","template","tArg","Error","JSON","stringify","renderWithData","get","findDOMNode","_blazeRef","shouldComponentUpdate","nextProps","componentWillReceiveProps","set"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;OAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACrB,AAAS,AAAa,AACtB,AAAS,AAAmB,AAC5B,AAAS,AAAgB,AACzB,AAAO,AAAoB,AAC3B,AAAO,AAAe,AAEtB;;;;;;;;;;;gCAKE,AAAmB,WAAW,AAC5B;UAAI,UAAA,AAAU,kBAAkB,KAAA,AAAK,MAArC,AAA2C,eAAe,AACxD;cAAA,AAAM,OAAO,KAAb,AAAkB,AAClB;aAAA,AAAK,AACN;AACF;AAED;;;;;;;AAAkB,AAChB;;WAAA,AAAK,aAAa,IAAA,AAAI,YAAY,EAAA,AAAE,KAAK,KAAP,AAAY,OAA9C,AAAkB,AAAgB,AAAmB,AAErD,AAAI,AACJ;UAAA,AAAM,AAAO,AAAK,AAAM;4BAExB,AAAI,AAAO,AAAS,AAAU,AAC5B;;iBAAW,SAAX,AAAW,AAAS;4BACpB;;YAAI,CAAJ,AAAK,UAAU,AACb;gBAAM,IAAA,AAAI,MAAO,mBAAjB,AAAM,AAAU,AAAgB,AAAK,AACjC,AACA,AACL,0CANH,AAOC,AAAM,iEAAA,AAAI,AAAgB,AAAM,AAAU,AACzC;AAAA,AAAW,AACZ;AAFM,iDAGL;AAAM,AAAI,mBAAV,AAAM,AAAU,AACZ,AACA,AAA2B,AAAO,AAAO,AACzC,AAAK,AAAU,AACpB;OALM;wBAOP,AAAK,0DAAL,AAAkB,AAAM,AACtB,AACA,AAAM,AAAK,AAAW,AACtB,AAAS,AAAY,AAAK,AAE7B,2LAED;AAAA,AAAsB,AAAW,AAC/B,AACA;;WAAO,AAAU,mBAAjB,AAAO,AAA4B,AAAK,AAAM,AAC/C;iCAED;8BAA0B,KAA1B,AAAqC,AACnC,AAAK,AAAW,AAAI,AAAE,AAAK,AAAW,AACvC;AAhDsC;;;;;;;AAmDzC;aAAe,UAAf;;;;;;;;;;;;;;;EAnDA,AAA0B,AAAe,AACvC;;AADF,AAAM,YACJ,AAAO;eACQ,UADf,AAAmB,AACM,AAGzB;AAJmB,AACjB;OATG,OAAP,mBAAA","file":"/imports/plugins/core/layout/lib/blazeLayout.js.map","sourcesContent":["import ReactDOM from \"react-dom\";\nimport { Blaze } from \"meteor/blaze\";\nimport { ReactiveVar } from \"meteor/reactive-var\";\nimport { Template } from \"meteor/templating\";\nimport BlazeComponent from \"meteor/gadicc:blaze-react-component\";\nimport PropTypes from \"prop-types\";\n\nclass BlazeLayout extends BlazeComponent {\n  static propTypes = {\n    blazeLayout: PropTypes.any\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.blazeTemplate !== this.props.blazeTemplate) {\n      Blaze.remove(this._blazeView);\n      this.renderBlazeView();\n    }\n  }\n\n  renderBlazeView() {\n    this._blazeData = new ReactiveVar(_.omit(this.props, \"blazeTemplate\"));\n\n    let template;\n    const tArg = this.props.blazeTemplate;\n\n    if (typeof tArg === \"string\") {\n      template = Template[tArg];\n      if (!template) {\n        throw new Error(`No Template[\"${tArg}\"] exists.  If this template `\n          + \"originates in your app, make sure you have the `templating` \"\n          + \"package installed (and not, for e.g. `static-html`)\");\n      }\n    } else if (tArg instanceof Blaze.Template) {\n      template = tArg;\n    } else {\n      throw new Error(\"Invalid blazeTemplate= argument specified.  Expected \"\n        + \"the string name of an existing Template, or the template \"\n        + \"itself, instead got ''\" + typeof tArg + \": \"\n        + JSON.stringify(tArg));\n    }\n\n    this._blazeView = Blaze.renderWithData(\n      template,\n      () => this._blazeData.get(),\n      ReactDOM.findDOMNode(this._blazeRef)\n    );\n  }\n\n  shouldComponentUpdate(nextProps) {\n    // Never call render() for props except template again; Blaze will do what's necessary.\n    return nextProps.blazeTemplate !== this.props.blazeTemplate;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this._blazeData.set(_.omit(nextProps, \"blazeTemplate\"));\n  }\n}\n\nexport default BlazeLayout;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/layout/lib/blazeLayout.js.map","sourceFileName":"/imports/plugins/core/layout/lib/blazeLayout.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"blazeLayout"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar ReactDOM = void 0;\nmodule.importSync(\"react-dom\", {\n  \"default\": function (v) {\n    ReactDOM = v;\n  }\n}, 0);\nvar Blaze = void 0;\nmodule.importSync(\"meteor/blaze\", {\n  Blaze: function (v) {\n    Blaze = v;\n  }\n}, 1);\nvar ReactiveVar = void 0;\nmodule.importSync(\"meteor/reactive-var\", {\n  ReactiveVar: function (v) {\n    ReactiveVar = v;\n  }\n}, 2);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 3);\nvar BlazeComponent = void 0;\nmodule.importSync(\"meteor/gadicc:blaze-react-component\", {\n  \"default\": function (v) {\n    BlazeComponent = v;\n  }\n}, 4);\nvar PropTypes = void 0;\nmodule.importSync(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 5);\n\nvar BlazeLayout = function (_BlazeComponent) {\n  (0, _inherits3.default)(BlazeLayout, _BlazeComponent);\n\n  function BlazeLayout() {\n    (0, _classCallCheck3.default)(this, BlazeLayout);\n    return (0, _possibleConstructorReturn3.default)(this, _BlazeComponent.apply(this, arguments));\n  }\n\n  BlazeLayout.prototype.componentDidUpdate = function () {\n    function componentDidUpdate(prevProps) {\n      if (prevProps.blazeTemplate !== this.props.blazeTemplate) {\n        Blaze.remove(this._blazeView);\n        this.renderBlazeView();\n      }\n    }\n\n    return componentDidUpdate;\n  }();\n\n  BlazeLayout.prototype.renderBlazeView = function () {\n    function renderBlazeView() {\n      var _this2 = this;\n\n      this._blazeData = new ReactiveVar(_.omit(this.props, \"blazeTemplate\"));\n      var template = void 0;\n      var tArg = this.props.blazeTemplate;\n\n      if (typeof tArg === \"string\") {\n        template = Template[tArg];\n\n        if (!template) {\n          throw new Error(\"No Template[\\\"\" + tArg + \"\\\"] exists.  If this template \" + \"originates in your app, make sure you have the `templating` \" + \"package installed (and not, for e.g. `static-html`)\");\n        }\n      } else if (tArg instanceof Blaze.Template) {\n        template = tArg;\n      } else {\n        throw new Error(\"Invalid blazeTemplate= argument specified.  Expected \" + \"the string name of an existing Template, or the template \" + \"itself, instead got ''\" + (typeof tArg === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(tArg)) + \": \" + JSON.stringify(tArg));\n      }\n\n      this._blazeView = Blaze.renderWithData(template, function () {\n        return _this2._blazeData.get();\n      }, ReactDOM.findDOMNode(this._blazeRef));\n    }\n\n    return renderBlazeView;\n  }();\n\n  BlazeLayout.prototype.shouldComponentUpdate = function () {\n    function shouldComponentUpdate(nextProps) {\n      // Never call render() for props except template again; Blaze will do what's necessary.\n      return nextProps.blazeTemplate !== this.props.blazeTemplate;\n    }\n\n    return shouldComponentUpdate;\n  }();\n\n  BlazeLayout.prototype.componentWillReceiveProps = function () {\n    function componentWillReceiveProps(nextProps) {\n      this._blazeData.set(_.omit(nextProps, \"blazeTemplate\"));\n    }\n\n    return componentWillReceiveProps;\n  }();\n\n  return BlazeLayout;\n}(BlazeComponent);\n\nBlazeLayout.propTypes = {\n  blazeLayout: PropTypes.any\n};\nmodule.export(\"default\", exports.default = BlazeLayout);","map":{"version":3,"sources":["/imports/plugins/core/layout/lib/blazeLayout.js"],"names":["ReactDOM","Blaze","ReactiveVar","Template","BlazeComponent","PropTypes","BlazeLayout","propTypes","blazeLayout","any","componentDidUpdate","prevProps","blazeTemplate","props","remove","_blazeView","renderBlazeView","_blazeData","_","omit","template","tArg","Error","JSON","stringify","renderWithData","get","findDOMNode","_blazeRef","shouldComponentUpdate","nextProps","componentWillReceiveProps","set"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;OAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACrB,AAAS,AAAa,AACtB,AAAS,AAAmB,AAC5B,AAAS,AAAgB,AACzB,AAAO,AAAoB,AAC3B,AAAO,AAAe,AAEtB;;;;;;;;;;;gCAKE,AAAmB,WAAW,AAC5B;UAAI,UAAA,AAAU,kBAAkB,KAAA,AAAK,MAArC,AAA2C,eAAe,AACxD;cAAA,AAAM,OAAO,KAAb,AAAkB,AAClB;aAAA,AAAK,AACN;AACF;AAED;;;;;;;AAAkB,AAChB;;WAAA,AAAK,aAAa,IAAA,AAAI,YAAY,EAAA,AAAE,KAAK,KAAP,AAAY,OAA9C,AAAkB,AAAgB,AAAmB,AAErD,AAAI,AACJ;UAAA,AAAM,AAAO,AAAK,AAAM;4BAExB,AAAI,AAAO,AAAS,AAAU,AAC5B;;iBAAW,SAAX,AAAW,AAAS;4BACpB;;YAAI,CAAJ,AAAK,UAAU,AACb;gBAAM,IAAA,AAAI,MAAO,mBAAjB,AAAM,AAAU,AAAgB,AAAK,AACjC,AACA,AACL,0CANH,AAOC,AAAM,iEAAA,AAAI,AAAgB,AAAM,AAAU,AACzC;AAAA,AAAW,AACZ;AAFM,iDAGL;AAAM,AAAI,mBAAV,AAAM,AAAU,AACZ,AACA,AAA2B,AAAO,AAAO,AACzC,AAAK,AAAU,AACpB;OALM;wBAOP,AAAK,0DAAL,AAAkB,AAAM,AACtB,AACA,AAAM,AAAK,AAAW,AACtB,AAAS,AAAY,AAAK,AAE7B,2LAED;AAAA,AAAsB,AAAW,AAC/B,AACA;;WAAO,AAAU,mBAAjB,AAAO,AAA4B,AAAK,AAAM,AAC/C;iCAED;8BAA0B,KAA1B,AAAqC,AACnC,AAAK,AAAW,AAAI,AAAE,AAAK,AAAW,AACvC;AAhDsC;;;;;;;AAmDzC;aAAe,UAAf;;;;;;;;;;;;;;;EAnDA,AAA0B,AAAe,AACvC;;AADF,AAAM,YACJ,AAAO;eACQ,UADf,AAAmB,AACM,AAGzB;AAJmB,AACjB;OATG,OAAP,mBAAA","file":"/imports/plugins/core/layout/lib/blazeLayout.js.map","sourcesContent":["import ReactDOM from \"react-dom\";\nimport { Blaze } from \"meteor/blaze\";\nimport { ReactiveVar } from \"meteor/reactive-var\";\nimport { Template } from \"meteor/templating\";\nimport BlazeComponent from \"meteor/gadicc:blaze-react-component\";\nimport PropTypes from \"prop-types\";\n\nclass BlazeLayout extends BlazeComponent {\n  static propTypes = {\n    blazeLayout: PropTypes.any\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.blazeTemplate !== this.props.blazeTemplate) {\n      Blaze.remove(this._blazeView);\n      this.renderBlazeView();\n    }\n  }\n\n  renderBlazeView() {\n    this._blazeData = new ReactiveVar(_.omit(this.props, \"blazeTemplate\"));\n\n    let template;\n    const tArg = this.props.blazeTemplate;\n\n    if (typeof tArg === \"string\") {\n      template = Template[tArg];\n      if (!template) {\n        throw new Error(`No Template[\"${tArg}\"] exists.  If this template `\n          + \"originates in your app, make sure you have the `templating` \"\n          + \"package installed (and not, for e.g. `static-html`)\");\n      }\n    } else if (tArg instanceof Blaze.Template) {\n      template = tArg;\n    } else {\n      throw new Error(\"Invalid blazeTemplate= argument specified.  Expected \"\n        + \"the string name of an existing Template, or the template \"\n        + \"itself, instead got ''\" + typeof tArg + \": \"\n        + JSON.stringify(tArg));\n    }\n\n    this._blazeView = Blaze.renderWithData(\n      template,\n      () => this._blazeData.get(),\n      ReactDOM.findDOMNode(this._blazeRef)\n    );\n  }\n\n  shouldComponentUpdate(nextProps) {\n    // Never call render() for props except template again; Blaze will do what's necessary.\n    return nextProps.blazeTemplate !== this.props.blazeTemplate;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this._blazeData.set(_.omit(nextProps, \"blazeTemplate\"));\n  }\n}\n\nexport default BlazeLayout;\n"]},"hash":"2541c3666b4dbace71006f49a457ddd01a4f9a59"}
