{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"fs","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"fs"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/lib/collections","imported":["Assets"],"specifiers":[{"kind":"named","imported":"Assets","local":"Assets"}]},{"source":"/server/api","imported":["Hooks","Logger","Reaction"],"specifiers":[{"kind":"named","imported":"Hooks","local":"Hooks"},{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":["loadTranslation","source","loadTranslations","sources","loadCoreTranslations"],"specifiers":[{"kind":"local","local":"loadTranslation","exported":"loadTranslation"},{"kind":"local","local":"source","exported":"source"},{"kind":"local","local":"loadTranslations","exported":"loadTranslations"},{"kind":"local","local":"sources","exported":"sources"},{"kind":"local","local":"loadCoreTranslations","exported":"loadCoreTranslations"}]}}},"options":{"filename":"/server/startup/i18n.js","filenameRelative":"/server/startup/i18n.js","inputSourceMap":{"version":3,"sources":["/server/startup/i18n.js"],"names":["fs","Meteor","Assets","Hooks","Logger","Reaction","directoryExists","dirPath","statSync","isDirectory","err","loadTranslation","source","content","JSON","parse","json","stringify","update","type","name","i18n","ns","$set","upsert","debug","e","loadTranslations","sources","forEach","loadCoreTranslations","meteorPath","realpathSync","process","cwd","i18nFolder","readdir","bindEnvironment","files","Error","file","indexOf","readFileSync","find","t","Import","translation","Events","add"],"mappings":";;;;;;AAAA,OAAA,AAAO;AAAP,AAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACf,AAAS,A,AAAT,AAAuB,AACvB,AAAS,AAAc,AACvB,AAAS,AAAO,AAAQ,AAAgB,AAExC;;AACA,AAAS,AAAgB,AAAS;AAChC,AAAI,kCACF;MADF,AACE,AAAO,AAAG,AAAS,AAAS,AAC7B;AAAC,WAAO,GAAP,AAAY,kBACZ;WAAO,KAAP,AACD;WACF,A,AAED;;EAQA,AAAO,AAAS,AAAgB,AAAQ,AACtC,AAAI,AACF,AAAM,AAAU,AAAO,AAAW,AAAW,AAAK,AAAM,AAAU,AAClE;;;;;;;;AAAM,SAAO,AAAO,gBAAW,QAA/B,AAAa,AAA6B,AAAK,AAAU,AAAU,AAEnE;MAAA,AAAO,AAAO,AACZ;QADY,AACN,4DACN;QAAM,OAAA,AAAQ,AAAG,QAFL,8GAAA,AAGZ,AAAI,AAAQ,AAAG;AAHjB,AAIG;YACK,AACJ;YAAS,WADL;qBALR,AAIG;AACD;;iBATJ,AAgBE,AAAO,AAAM,AAAmC,AAAQ,AAAG,AAC5D,AAAC;AAbA,AAQG,AACO;AADP,AACD;AAKK,cAAP,AACD,AACD;AAHE,AAAO,AAAG,AACV;AAEK,WAAP,oD,AACD,AAED;;;;;;A,AAMA,AAAO,AAAS,AAAiB,AAAS,AACxC,AAAQ,AAAQ,AAAU,AAAQ,AAChC,AAAgB,AACjB,AACF,AAGD;;;;;;AAQA,AAAO,AAAS,AAAuB,AACrC,AAAM,AAAa,AAAG,AAAa,AAAQ,AAAQ,AACnD,AAAM,AAAc,AAAE,AAAW,AAEjC,AAAI,AAAgB,AAAa,AAC/B,AAAG,AAAQ,AAAY,AAAO,AAAgB,AAAU,AAAK,AAAO,AAClE,AAAI,AAAK,AAAM,AAAI,AAAO,AAAM,AAAqC,AACrE,AAAK,AAAM,AAAQ,AAAO,AACxB,AAAI,AAAC,AAAK,AAAQ,AAAS,AACzB;;SAAA,AAAO,AAAO,uBAAd,AAA4C,AAAK,AACjD;MAAM,aAAO,GAAG,aAAH,AAAgB,QAAa,QAA1C,AAAa,AAAmC,AAChD;MAAM,aAAN,AAAgB,AAAK,AAAM,AAE3B,AAAO,AAAO,AACZ;;MAAM,gBADM,aAEZ;eAAM,AAAQ;eACV,MAAQ,IAAR,AAAW,kDAHH;;AAAd,AAIG;AACD;;;;;;;;;;;;;kBAAM,iBACJ;iBAAS,uCADL;wDADL;AAJH,AAQG,mCAAA,AACD,AAAQ;AATV;kBAR8D,AAoBjE,AAED;6BACA;2BACA;AALG;;uBAOH;;AADA;AACoB,oBAApB,AAAY,AAAkB,AAAQ,AAAC,AAAM,AAC3C;AADF,AAAO,AAAK,AAAE;AACZ,AAAO,AAAO,AAAY,AAAE,AAAK,AAAqB,AAAE,AAAG;AAC3D,AAAI,AAAE,AAAS,AACb,OAlBE,CAkBF,AAAS,AAAO,AAAQ,AAAE,AAAS,AAAC,AAAS,AAAS,AAAO,AAC9D;AAFD,AAEO,AACL;AAAA,AAAO,AAAO,AAAmC,AAAE,AAAK,AAAK,AAAE,AAAG,AACnE;AACF;;;AAPD;;8BA1BF,AAAuB,AAkCtB;uEACF;;uBACF;uEAED;eAAe,AAAY,AACzB;;AAGA;AAAA,AAAM,AAAO,AAAI,AAAc,AAAM,AACnC;AACD,KApCqB,AAEN,AAAW;AAgC3B,AAGD","file":"/server/startup/i18n.js.map","sourcesContent":["import fs from \"fs\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Assets } from \"/lib/collections\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\n\n// taken from here: http://stackoverflow.com/a/32749571\nfunction directoryExists(dirPath) {\n  try {\n    return fs.statSync(dirPath).isDirectory();\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * load a single translation object as an Asset\n * loadTranslation should generally be used\n * before startup, to ensure that Assets load.\n * @param  {Object} source a json i18next object\n * @return {Boolean} false if assets weren't loaded\n */\n\nexport function loadTranslation(source) {\n  try {\n    const content = typeof source === \"string\" ? JSON.parse(source) : source;\n    const json = typeof source === \"object\" ? JSON.stringify(source) : source;\n\n    Assets.update({\n      type: \"i18n\",\n      name: content[0].i18n,\n      ns: content[0].ns\n    }, {\n      $set: {\n        content: json\n      }\n    }, {\n      upsert: true\n    });\n\n    Logger.debug(\"Translation assets updated for \", content[0].ns);\n  } catch (e) {\n    return false;\n  }\n  return false;\n}\n\n/**\n * load an array of translation objects\n * and import using loadTranslation\n * @param  {Object} sources array of i18next translations\n * @return {Boolean} false if assets weren't loaded\n */\nexport function loadTranslations(sources) {\n  sources.forEach(function (source) {\n    loadTranslation(source);\n  });\n}\n\n\n/**\n * loadCoreTranslations imports i18n json\n * files from private/data/i18n\n * into the Assets collection\n * Assets collection is processed with Reaction.Import\n * after all assets have been loaded.\n */\n\nexport function loadCoreTranslations() {\n  const meteorPath = fs.realpathSync(process.cwd() + \"/../\");\n  const i18nFolder = `${meteorPath}/server/assets/app/data/i18n/`;\n\n  if (directoryExists(i18nFolder)) {\n    fs.readdir(i18nFolder, Meteor.bindEnvironment(function (err, files) {\n      if (err) throw new Meteor.Error(\"No translations found for import.\", err);\n      for (const file of files) {\n        if (~file.indexOf(\"json\")) {\n          Logger.debug(`Importing Translations from ${file}`);\n          const json = fs.readFileSync(i18nFolder + file, \"utf8\");\n          const content = JSON.parse(json);\n\n          Assets.update({\n            type: \"i18n\",\n            name: content[0].i18n,\n            ns: content[0].ns\n          }, {\n            $set: {\n              content: json\n            }\n          }, {\n            upsert: true\n          });\n        }\n      }\n\n      // purposely broad results here\n      // we will be processing assets\n      // inserted using loadTranslation\n      // as well.\n      Assets.find({ type: \"i18n\" }).forEach((t) => {\n        Logger.debug(`Importing ${t.name} translation for \\\"${t.ns}\\\"`);\n        if (t.content) {\n          Reaction.Import.process(t.content, [\"i18n\"], Reaction.Import.translation);\n        } else {\n          Logger.debug(`No translation content found for ${t.name} - ${t.ns} asset`);\n        }\n      });\n    }));\n  }\n}\n\nexport default function () {\n  /**\n   * Hook to setup core i18n imports during Reaction init\n   */\n  Hooks.Events.add(\"onCoreInit\", () => {\n    loadCoreTranslations();\n  });\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/startup/i18n.js.map","sourceFileName":"/server/startup/i18n.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"i18n"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  loadTranslation: function () {\n    return loadTranslation;\n  },\n  loadTranslations: function () {\n    return loadTranslations;\n  },\n  loadCoreTranslations: function () {\n    return loadCoreTranslations;\n  }\n});\nvar fs = void 0;\nmodule.importSync(\"fs\", {\n  \"default\": function (v) {\n    fs = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Assets = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Assets: function (v) {\n    Assets = v;\n  }\n}, 2);\nvar Hooks = void 0,\n    Logger = void 0,\n    Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Hooks: function (v) {\n    Hooks = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 3);\n\n// taken from here: http://stackoverflow.com/a/32749571\nfunction directoryExists(dirPath) {\n  try {\n    return fs.statSync(dirPath).isDirectory();\n  } catch (err) {\n    return false;\n  }\n} /**\n   * load a single translation object as an Asset\n   * loadTranslation should generally be used\n   * before startup, to ensure that Assets load.\n   * @param  {Object} source a json i18next object\n   * @return {Boolean} false if assets weren't loaded\n   */\n\nfunction loadTranslation(source) {\n  try {\n    var content = typeof source === \"string\" ? JSON.parse(source) : source;\n    var json = (typeof source === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(source)) === \"object\" ? JSON.stringify(source) : source;\n    Assets.update({\n      type: \"i18n\",\n      name: content[0].i18n,\n      ns: content[0].ns\n    }, {\n      $set: {\n        content: json\n      }\n    }, {\n      upsert: true\n    });\n    Logger.debug(\"Translation assets updated for \", content[0].ns);\n  } catch (e) {\n    return false;\n  }\n\n  return false;\n}\n\nfunction loadTranslations(sources) {\n  sources.forEach(function (source) {\n    loadTranslation(source);\n  });\n}\n\nfunction loadCoreTranslations() {\n  var meteorPath = fs.realpathSync(process.cwd() + \"/../\");\n  var i18nFolder = meteorPath + \"/server/assets/app/data/i18n/\";\n\n  if (directoryExists(i18nFolder)) {\n    fs.readdir(i18nFolder, Meteor.bindEnvironment(function (err, files) {\n      if (err) throw new Meteor.Error(\"No translations found for import.\", err);\n\n      for (var _iterator = files, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var file = _ref;\n\n        if (~file.indexOf(\"json\")) {\n          Logger.debug(\"Importing Translations from \" + file);\n          var json = fs.readFileSync(i18nFolder + file, \"utf8\");\n          var content = JSON.parse(json);\n          Assets.update({\n            type: \"i18n\",\n            name: content[0].i18n,\n            ns: content[0].ns\n          }, {\n            $set: {\n              content: json\n            }\n          }, {\n            upsert: true\n          });\n        }\n      } // purposely broad results here\n      // we will be processing assets\n      // inserted using loadTranslation\n      // as well.\n\n\n      Assets.find({\n        type: \"i18n\"\n      }).forEach(function (t) {\n        Logger.debug(\"Importing \" + t.name + \" translation for \\\"\" + t.ns + \"\\\"\");\n\n        if (t.content) {\n          Reaction.Import.process(t.content, [\"i18n\"], Reaction.Import.translation);\n        } else {\n          Logger.debug(\"No translation content found for \" + t.name + \" - \" + t.ns + \" asset\");\n        }\n      });\n    }));\n  }\n}\n\nmodule.export(\"default\", exports.default = function () {\n  /**\n   * Hook to setup core i18n imports during Reaction init\n   */Hooks.Events.add(\"onCoreInit\", function () {\n    loadCoreTranslations();\n  });\n});","map":{"version":3,"sources":["/server/startup/i18n.js"],"names":["fs","Meteor","Assets","Hooks","Logger","Reaction","directoryExists","dirPath","statSync","isDirectory","err","loadTranslation","source","content","JSON","parse","json","stringify","update","type","name","i18n","ns","$set","upsert","debug","e","loadTranslations","sources","forEach","loadCoreTranslations","meteorPath","realpathSync","process","cwd","i18nFolder","readdir","bindEnvironment","files","Error","file","indexOf","readFileSync","find","t","Import","translation","Events","add"],"mappings":";;;;;;AAAA,OAAA,AAAO;AAAP,AAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACf,AAAS,A,AAAT,AAAuB,AACvB,AAAS,AAAc,AACvB,AAAS,AAAO,AAAQ,AAAgB,AAExC;;AACA,AAAS,AAAgB,AAAS;AAChC,AAAI,kCACF;MADF,AACE,AAAO,AAAG,AAAS,AAAS,AAC7B;AAAC,WAAO,GAAP,AAAY,kBACZ;WAAO,KAAP,AACD;WACF,A,AAED;;EAQA,AAAO,AAAS,AAAgB,AAAQ,AACtC,AAAI,AACF,AAAM,AAAU,AAAO,AAAW,AAAW,AAAK,AAAM,AAAU,AAClE;;;;;;;;AAAM,SAAO,AAAO,gBAAW,QAA/B,AAAa,AAA6B,AAAK,AAAU,AAAU,AAEnE;MAAA,AAAO,AAAO,AACZ;QADY,AACN,4DACN;QAAM,OAAA,AAAQ,AAAG,QAFL,8GAAA,AAGZ,AAAI,AAAQ,AAAG;AAHjB,AAIG;YACK,AACJ;YAAS,WADL;qBALR,AAIG;AACD;;iBATJ,AAgBE,AAAO,AAAM,AAAmC,AAAQ,AAAG,AAC5D,AAAC;AAbA,AAQG,AACO;AADP,AACD;AAKK,cAAP,AACD,AACD;AAHE,AAAO,AAAG,AACV;AAEK,WAAP,oD,AACD,AAED;;;;;;A,AAMA,AAAO,AAAS,AAAiB,AAAS,AACxC,AAAQ,AAAQ,AAAU,AAAQ,AAChC,AAAgB,AACjB,AACF,AAGD;;;;;;AAQA,AAAO,AAAS,AAAuB,AACrC,AAAM,AAAa,AAAG,AAAa,AAAQ,AAAQ,AACnD,AAAM,AAAc,AAAE,AAAW,AAEjC,AAAI,AAAgB,AAAa,AAC/B,AAAG,AAAQ,AAAY,AAAO,AAAgB,AAAU,AAAK,AAAO,AAClE,AAAI,AAAK,AAAM,AAAI,AAAO,AAAM,AAAqC,AACrE,AAAK,AAAM,AAAQ,AAAO,AACxB,AAAI,AAAC,AAAK,AAAQ,AAAS,AACzB;;SAAA,AAAO,AAAO,uBAAd,AAA4C,AAAK,AACjD;MAAM,aAAO,GAAG,aAAH,AAAgB,QAAa,QAA1C,AAAa,AAAmC,AAChD;MAAM,aAAN,AAAgB,AAAK,AAAM,AAE3B,AAAO,AAAO,AACZ;;MAAM,gBADM,aAEZ;eAAM,AAAQ;eACV,MAAQ,IAAR,AAAW,kDAHH;;AAAd,AAIG;AACD;;;;;;;;;;;;;kBAAM,iBACJ;iBAAS,uCADL;wDADL;AAJH,AAQG,mCAAA,AACD,AAAQ;AATV;kBAR8D,AAoBjE,AAED;6BACA;2BACA;AALG;;uBAOH;;AADA;AACoB,oBAApB,AAAY,AAAkB,AAAQ,AAAC,AAAM,AAC3C;AADF,AAAO,AAAK,AAAE;AACZ,AAAO,AAAO,AAAY,AAAE,AAAK,AAAqB,AAAE,AAAG;AAC3D,AAAI,AAAE,AAAS,AACb,OAlBE,CAkBF,AAAS,AAAO,AAAQ,AAAE,AAAS,AAAC,AAAS,AAAS,AAAO,AAC9D;AAFD,AAEO,AACL;AAAA,AAAO,AAAO,AAAmC,AAAE,AAAK,AAAK,AAAE,AAAG,AACnE;AACF;;;AAPD;;8BA1BF,AAAuB,AAkCtB;uEACF;;uBACF;uEAED;eAAe,AAAY,AACzB;;AAGA;AAAA,AAAM,AAAO,AAAI,AAAc,AAAM,AACnC;AACD,KApCqB,AAEN,AAAW;AAgC3B,AAGD","file":"/server/startup/i18n.js.map","sourcesContent":["import fs from \"fs\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Assets } from \"/lib/collections\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\n\n// taken from here: http://stackoverflow.com/a/32749571\nfunction directoryExists(dirPath) {\n  try {\n    return fs.statSync(dirPath).isDirectory();\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * load a single translation object as an Asset\n * loadTranslation should generally be used\n * before startup, to ensure that Assets load.\n * @param  {Object} source a json i18next object\n * @return {Boolean} false if assets weren't loaded\n */\n\nexport function loadTranslation(source) {\n  try {\n    const content = typeof source === \"string\" ? JSON.parse(source) : source;\n    const json = typeof source === \"object\" ? JSON.stringify(source) : source;\n\n    Assets.update({\n      type: \"i18n\",\n      name: content[0].i18n,\n      ns: content[0].ns\n    }, {\n      $set: {\n        content: json\n      }\n    }, {\n      upsert: true\n    });\n\n    Logger.debug(\"Translation assets updated for \", content[0].ns);\n  } catch (e) {\n    return false;\n  }\n  return false;\n}\n\n/**\n * load an array of translation objects\n * and import using loadTranslation\n * @param  {Object} sources array of i18next translations\n * @return {Boolean} false if assets weren't loaded\n */\nexport function loadTranslations(sources) {\n  sources.forEach(function (source) {\n    loadTranslation(source);\n  });\n}\n\n\n/**\n * loadCoreTranslations imports i18n json\n * files from private/data/i18n\n * into the Assets collection\n * Assets collection is processed with Reaction.Import\n * after all assets have been loaded.\n */\n\nexport function loadCoreTranslations() {\n  const meteorPath = fs.realpathSync(process.cwd() + \"/../\");\n  const i18nFolder = `${meteorPath}/server/assets/app/data/i18n/`;\n\n  if (directoryExists(i18nFolder)) {\n    fs.readdir(i18nFolder, Meteor.bindEnvironment(function (err, files) {\n      if (err) throw new Meteor.Error(\"No translations found for import.\", err);\n      for (const file of files) {\n        if (~file.indexOf(\"json\")) {\n          Logger.debug(`Importing Translations from ${file}`);\n          const json = fs.readFileSync(i18nFolder + file, \"utf8\");\n          const content = JSON.parse(json);\n\n          Assets.update({\n            type: \"i18n\",\n            name: content[0].i18n,\n            ns: content[0].ns\n          }, {\n            $set: {\n              content: json\n            }\n          }, {\n            upsert: true\n          });\n        }\n      }\n\n      // purposely broad results here\n      // we will be processing assets\n      // inserted using loadTranslation\n      // as well.\n      Assets.find({ type: \"i18n\" }).forEach((t) => {\n        Logger.debug(`Importing ${t.name} translation for \\\"${t.ns}\\\"`);\n        if (t.content) {\n          Reaction.Import.process(t.content, [\"i18n\"], Reaction.Import.translation);\n        } else {\n          Logger.debug(`No translation content found for ${t.name} - ${t.ns} asset`);\n        }\n      });\n    }));\n  }\n}\n\nexport default function () {\n  /**\n   * Hook to setup core i18n imports during Reaction init\n   */\n  Hooks.Events.add(\"onCoreInit\", () => {\n    loadCoreTranslations();\n  });\n}\n"]},"hash":"3c17690aeb8ec6281f6ca18fbb7cb0fb580991eb"}
