{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"lodash/filter","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_filter"}]},{"source":"lodash/includes","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_includes"}]},{"source":"lodash/split","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_split"}]},{"source":"lodash/get","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_get"}]},{"source":"accounting-js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"accounting"}]},{"source":"os","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"os"}]},{"source":"moment","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"moment"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/http","imported":["HTTP"],"specifiers":[{"kind":"named","imported":"HTTP","local":"HTTP"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"/lib/collections","imported":["Packages","Shops","Accounts"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"},{"kind":"named","imported":"Shops","local":"Shops"},{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"/imports/plugins/core/taxes/lib/collections","imported":["TaxCodes"],"specifiers":[{"kind":"named","imported":"TaxCodes","local":"TaxCodes"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"./avalogger","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Avalogger"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/taxes-avalara/server/methods/taxCalc.js","filenameRelative":"/imports/plugins/included/taxes-avalara/server/methods/taxCalc.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/server/methods/taxCalc.js"],"names":["accounting","os","moment","Meteor","HTTP","check","Packages","Shops","Accounts","TaxCodes","Reaction","Logger","Avalogger","countriesWithRegions","requiredFields","taxCalc","getPackageData","pkgData","findOne","name","shopId","getShopId","enabled","getUrl","packageData","productionMode","settings","avalara","baseUrl","checkConfiguration","isValid","field","msg","warn","error","Error","getAuthData","username","password","auth","getTaxSettings","userId","_id","avaGet","requestUrl","options","testCredentials","logObject","undefined","appVersion","getAppVersion","meteorVersion","release","machineName","hostname","avaClient","headers","timeout","requestTimeout","allOptions","Object","assign","enableLogging","request","result","get","duration","data","info","avaPost","post","getEntityCodes","code","calcTaxable","cart","subTotal","item","items","variants","taxable","price","quantity","validateAddress","address","countryList","addressValidation","country","validatedAddress","errors","messages","addressToValidate","line1","address1","city","postalCode","postal","region","line2","address2","content","JSON","parse","message","push","summary","details","validatedAddresses","length","resultAddress","addresss2","credentials","companyCode","statusCode","find","count","call","res","Array","isArray","forEach","err","getTaxCodes","cartToSalesOrder","shippingTaxCode","company","companyShipping","addressBook","o","isShippingDefault","currencyCode","currency","cartShipping","cartDate","createdAt","format","lineItems","map","number","itemCode","productId","amount","description","taxDescription","title","taxCode","salesOrder","type","customerCode","date","addresses","ShipFrom","ShipTo","shipping","lines","discount","toFixed","line","discounted","estimateCart","callback","Schemas","Cart","Function","orderToSalesInvoice","order","documentType","commitDocuments","orderShipping","orderDate","salesInvoice","commit","recordOrder","reportRefund","refundAmount","Number","returnAmount","refundDate","refundReference","cartId","returnInvoice","taxDate","methods"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAO,AAAgB,AACvB,AAAO,AAAQ,AACf,AAAO,AAAY,AACnB,AAAS,AAAc,AACvB,AAAS,AAAY,AACrB,AAAS,AAAa,AACtB,AAAS,AAAU,AAAO,AAAgB,AAC1C,AAAS,AAAgB;AACzB,IAAA,AAAS,AAAU,wBAAc,YAAjC;AACA,IAAA,AAAO,AAAe,kBAAtB;AAEA,IAAM,UAAN,AAA6B,AAAC,AAAM,AAAM,AAAM,AAChD,AAAM,AAAiB,AAAC,AAAY,AAAY,AAAc,AAAe;;AAC7E,AAAM,QAAN,AAAgB;;AAER,UAAR,AAAyB,AAAY,AACnC;AAAM,YAAU,SAAA,AAAS,AAAQ,AAC/B;AAAM,aADyB,AAE/B,AAAQ,AAAS,AACjB;AAJJ;SACmC,AAGtB;AAHX,AAAgB,AAKhB,AAAO,G,AANT,AAOC,AAED,AAEA;;;;;;AAIA,SAAA,AAAS;MACD,cAAc,QAApB,AAAoB,AAAQ,AAC5B,AAAM;AAFU,AAChB,4CACQ;MAAF;;MAAqB,CAAY,gBAAvC,AAA2B,AAAqB,AAChD;AAAA,AAAI;SACJ;AAAI,AAAC,cAAL,AAAqB,AACnB;AAAA,AAAU,AACX;;AAFD,SAEO,AACL;AAAA,AAAU,AACX,EACM,AACR,A,AADC,AAGF;;;;;;;;;;uDAKA;;AAAS,uBAAT,AAA4B;AAA5B,AAA0C,AAAQ,AAAkB,AAClE;;;;;;;;;;;;;AAAI,SAAU,SAAd;gEACA;AAAM,kBAAN,AAAiB,AAAM,AAAa,AAAoB;;eACxD;;AAAK,AAAM,gBAAX,AAAoB,AAAgB,AAClC;AAAA,AAAI,AAAC,AAAS,AAAQ,AACpB;AAAA,AAAM,AAAO,AAA6C,AAAM,AAChE;;OAAO,SAAP,AAAY,AACZ;cAAU,OAAV,AAAgB,MAAE;AAAF,AAAS;;AAAzB,SACA;AAAA,AAAU,AACX,EACF,AACD,AAAI,AAAC,AAAS,AACZ,AAAM,AAAI,AAAO,AAAM,AACxB;;;;;;;AACD;;MAAA,AAAO;;;A,AACR,AAED;;;;;AAKA,AAAS,AAAY,AAAc,AAAQ,AAAkB,EAC3D,AAAI,AAAmB,AAAc,AACnC,AAAM,AAAW,AAAM,AAAa,AAAoB,AACxD,AAAM,AAAE;;;;;;AAAU,gCAAZ;AAAyB;;GAA/B,GACA;AAAA,AAAM,AAAQ,AAAE,AAAS,AAAG,AAAS,AACrC,AAAO,EACR,AACF,A,AAED;;;;;;;;AAKA,SAAS,OAAT,AAAwB;AACtB,MADF,AAAgC;;MACvB,AAAM,YAAA,AAAS,AAAQ,AAAE;MAAK,kBAArC,AAAO,AAAM,AAAiB,AAAkB,A,AACjD;;AAED;;;;;;;;kDAOA;;MAAA,AAAS,AAAO,iBAAhB,AAA4B,AAAU,AAAI,AAAkB,AAAM,AAChE;MAAA,AAAM,AAAY,mFAClB;MAAM;;AAEN,AAAI,AAAiB,0BACnB;AAAI,AAAC,uBAAL,AAAK,AAAmB,AAAU,AAChC,AAAO,AACR,AACF;AAJD;AAFA,AAAgB,AAAQ;;;yDAQxB;;MAAM,oBAAsB,WAA5B,AAAmB;;GAAA;;8CACnB;AAAM,wBAAN,AAAsB,AAAQ,AAAO,AAAS,AAAK;AACnD,AAAM,AAAc,AAAG,AACvB;;MAAA,AAAM,AAAa,AAAY,AAAW,AAAiB,AAAc,AAAI,AAAY,AACzF;AAAM,kBAAU,gBACd;WAAS,OACP;aADO,AACa,AACpB;WAAiB,gEAFV;iBADX,AAAgB;sBAMhB;AAAM,cAAO,MAAb,AAAa,AAAQ,AAAQ,AAC7B;AAAM,AAAU,AAAE,AAAS,AAAQ,AAAW,AAAQ,AAAS,AAAQ;;AAAvE,8CACA;AAAM,cAAa,WAAO,KAAP,AAAc,QAAd,AAAkB,AAAS,AAAS,AAAE;8BAAtC,AAAoC;AAAvD,AAAmB,AAA8C;AACjE,AAAI,AAAQ,AAAS,AAAQ,AAAe,AAC1C;;SAAA,AAAU,AAAU,AACrB;AAED,AAAI,EAAJ,AACE,AAAS,AAAK,AAAI,AAAY,AAC/B,AAAC,AAAO,AAAO,AACd,AAAS,AACT,AAAO,AAAO,AAAuD,AAAW,AAChF,AAAO,AAAM,AACb,AAAU,AAAQ;;;;;;;AAClB,SAAU,QAAV,AAAgB,YAAhB,SACD;;wBAED;AAAI,MAAQ,aAAR,AAAiB,SAArB,AAAI,AAAyB,AAAe,AAC1C;;MAAA,AAAU,gBAAW,AAAM,OAAN,AAAc,qBAAnC,AAAqB,AACrB;;MAAA,AAAU,cAAS,GAAnB,AAA0B,AAC1B;MAAA,AAAU,AAAK,mFAChB;;;AAED,AAAO,0BAIT,A,AAHC;;AADC;;;;;;;;;;8CAUF;AAAS,cAAT,AAAiB,UAAjB,AAA6B,AAAS,AACpC;AAAA,AAAM,AAAY,AAClB,AAAM,AAAU,AAAQ,AACxB;;MAAA,AAAM,AAAa,AAAS,AAC5B;;MAAA,AAAM,AAAgB,AAAQ,AAAO,AAAS,AAAK;mCACnD;IAAM,cAAN,AAAoB,AAAG,AACvB;AAAM,WAAa,AAAY,AAAW,kDAA1C,AAA2D,AAAc,AAAI,AAAY,AACzF;AAAM,iBAAU,AACd;AAAS,sBACP,OADO,AACa,AACpB;;oBAFO,AAEU;aAHL;AAAhB,AAMA,AAAM,AAAO,AAAE;;MAAM,wCAArB,AAAa;sCACb;AAAM,cAAU,gBAAE;AAAS,mBAAX,AAAW,AAAQ,AAAS,AAAQ;AAApD,AACA,AAAM,AAAa,AAAO,AAAO,AAAI,AAAS,AAAS,AAAM;;SAC7D;AAAA,AAAI,AAAQ,AAAS,AAAQ,AAAe,AAC1C,AAAU,AAAU,EACrB,AAED,AAAI;;;;;AAEJ,AAAI,qCACF;MAAS,AAAK,AAAK,sBADrB,AACE,AAAS,AAAsB,AAChC;AAAC,QAAA,AAAO,AAAO,UACd;QAAA,AAAO,AAAO,aAAd,AAAuD,AAAW,AAClE;;QAAA,AAAO,AAAM,UAAb,OAFc,AAGd,AAAU,AAAQ,AAClB;;iDACA;YAAU,IAAV,AAAgB,aAAhB,AACA;AAAA,AAAS,AACV;;uCAED;AAAA,AAAI,AAAQ,AAAS,AAAQ,AAAe,AAC1C;;YAAU,OAAV,MAAqB,AAAM,AAAQ,qBAAnC,AAAqB,AACrB;AAAA,AAAU,AAAS,AAAO,AAC1B,AAAU,AAAK,GAChB;AAED,AAAO,AACR,A,AAED;;;;;;sCAIA;MAAQ,WAAR,AAAyB,AAAY,AACnC;;AAAI,6BAAJ,AAA0B;AACxB;;;;;;;;;;;;;QAAM,KAAU,SAAhB,SACA;AAAM,kBAAc,KAAE,SAAQ,aAA9B,AACA;AAAA,AAAM,AAAS,AAAO;AAEtB;;AAAI,SAAJ,AAAc,AAAO,AAAS,AAAa,AACzC;AAAA,AAAM,AAAI,AAAO,AAAM,AACxB,GAED,AAAO,AAAM,AAAQ,AAAc,AACpC,AACD,AAAM,AAAI,AAAO,AAAM,AAAqB;;;;;;A,AAZ9C,AAaC,AAED;;;AAEA;;gDAKA;AAAA,AAAQ,AAAc,AAAU,AAAM,AACpC;AAAA,AAAI,AAAW;;;cACf;;AAAA,AAAK,AAAM,AAAQ,AAAK,AAAO,AAC7B,AAAI,AAAK,AAAS,AAAS,AACzB;;MAAA,AAAa,AAAK,AAAS,AAAQ,AAAK,AACzC;6BACF;;;;AACM,WAAP,QAPF,AAQC,AAED,A;;;;AAHE;;wDAQF;AAAA,AAAQ,AAAkB,AAAU,AAAS,AAC3C;AAAA,AAAM,AAAS,sBAAf,iBAEA;AAAA,AAAM,AAAc,AAAQ,AAC5B;;MAAM,eAAE;sCAAF;AAAN,AAAwB,AAAY,AAAS;;gBAE7C;AAAI,AAAC,MAAW,aAAhB,AAAK,AAAwB,AAAQ,AAAU,AAC7C;;UACA;;MACA,AAAO,AAAE;;MAAF,AAAoB,AAAS;cAAQ,kBAArC;IAAP,cACD;;AAED;;MAAA,AAAI,6BACJ;AAAI,uBAbuC,AAa3C,AAAuB,AAAI;AAC3B;;MAAM,UAAN,AAAe,AACf;AAAM,0BAAqB;AACzB;;;;;;;;;;;;AAAO;AADkB;yBAEzB;AADe;AADU,AAEnB,AAAQ,AACd;AAHyB,AAGb,AAAQ,AACpB,AAAS,AAAQ;;AAJnB;uDAOA;AAAI,AAAW;8BAEb;YAAkB,cAAlB,AAA2B,AAAQ,AACpC;;4BACD;AAAI,AAAQ,eAAZ,AAAmB,cACjB,AAAkB,AAAQ,AAAQ,AACnC;AAND,AAAI,AAAiC,AAAQ,AAAU,AACrD;;;iDAMF;AAAA,AAAM,AAAU,AAChB;AAAA,AAAM,AAAc,AAAE,AAAQ,AAC9B;;AAAM;AAAS,AAAQ;AAAR,AAAoB,AAAE;;AAArC,AAAe,AAAoB,AAAQ,GAC3C,AAAI,AAEJ,AAAI,AACF,AAAU,AAAK,AAAM,AAAO,AAC7B,AAAC,AAAO,AAAO,AACd,AAAU,AAAO;;;;;;;AAClB;;qBACD,AAAI,AAAW,AAAQ,AAAU,AAC/B;MAAW,UAAX,AAAmB,AACpB;;wDACD;AAAI,MAAJ,AAAc;;;KACZ,AAAK,AAAM,AAAW,AAAU,AAC9B;;MAAO,UAAP,AAAY,6BAAE;cAAS,OAAQ,MAAnB,AAA4B;AAAxC,AAAY,AAAqC,AAAQ,AAC1D;;iCACF;;+DAED,AAAI;YAAU,OAAd,AAAI,AAAiB,AAAQ,AAAO,AAAK,AAAmB,AAAW,AAAG,AACxE;AAAM,sBAAgB,wEAAA,AAAO,AAAK,UAAlC,AAAsB,AAA+B,AACrD;mBAAmB,oCACjB;AAAU,iBADO,AACO,AACxB;AAAM,wBAFW,AAEG;AACpB;;AAHiB,AAGT,AAAc,AACtB;AAAQ,0BAAc,MAJL,cAKjB;cAAS,QAAc,gBALzB,AAAmB;;uBAOnB,AAAI,AAAO;AAAP,AAAY,0BAAZ,AAAoB,OAAxB,AAA+B,8CAC7B;AAAA,AAAiB,AAAY,AAAc,AAC5C;AACF;;AACD;AAAO,AAAE;AAAF,AAAoB;AA7D7B,AA6DE,AAAO,AACR;;A,AAED;;;;;;;;AAMA,QAAQ,cAAR,AAA0B,YAAA,AAAU,AAAa,AAAkB,AAAO,AACxE;MAAA,AAAM,AAAa,sBAEnB;AAAM,QAAU,UAAhB,AACA;AAAM,QAAQ,AAAE,aAAhB,AAA4B,AAAS,AAAG,AAAY,AAAS,AAC7D;;AAAM,mBAAc,AAAE,OAAtB,AAA8B,AAAY,AAAY,AAAY,AAClE;;AAAM,gBAAS,AAAO,UAAP,AAAmB,cAAE;AAAF,AAAQ;;YAAS,aAAY,qBAA7B;AAAlC,AAAe,AAAkE,GAEjF,AAAI,AAAU,AAAO,AAAS,AAAa,AACzC,AAAM,AAAI,AAAO,AAAM,AACxB,AAED,AAAI,AAAO,AAAe,AAAK;;;;;;AAC7B,AAAI,SAAA,AAAS,AAAK,iBAAd,AAAkB;MACpB,AAAO,UAAK,QAAZ,AAAmC,AAAC,AAAO,AAAQ,AACjD;AAFJ,AAAkC,AAAG,AACnC,+CAEI;MADF,AAAI,AAAO;;MACL,UAAO,MAAP,AAAiB,QAArB,SAA+B,AAC7B;;MAAA,AAAO,AAAK,0BAAZ,QAAA,AAAgC,AAAY,uBAA5C;;KACD;;MAFD,AAEO,uBACL;MAAO,eAAP,AAAY,KAAZ,AAAgC,AAAY,AAAE;wCAAF;MAA5C,YACD;;kBACF;AAND,AAMO,qBAAW,oBAAA,AAAM,AAAQ,MAAzB,AAAW,AAAoB,AACpC;UAAI,KAAJ,AAAY,SAAU,SAAV,AAAgB,AAC1B;;kBACE,AAAI,KAAK,AACP;oBAAM,KAAN,AAAM,AAAI,AAAO,AAAM,AAAwC,AAChE;yBACF;AAJD,6CAKD;AAND,mDAOD;iCAfH,AAgBC,AACF;AARO,AAAO,AAAK,AAAwB,AAAS,AAAa,AAAM,AAAiB,AAAC,AAAQ,AACxF;AAQX;KAXgB;;sBAajB;AAAO;gBAAP,AAAO,AAAc,AAAO;kBAC7B,AAED,A,AArCA;;;;iBAyCA;AAPW;AAOX,AAAQ,AAAc,AAAY,AAChC;AAAA,AAAI,AAAsB,AACxB,AAAM,AAAU,AAChB;;MAAM;AACA,iBAAN,AAAe,AAAO,AACtB;UAAA,AAAO,AAAM,AAAQ,AAAc,AACpC;;UACD;AAAM,AAAI,kB,AAPZ,AAOE,AAAM,AAAW,AAAM,AAAqB,AAC7C,AAED;;;;;;gCAKA;AAAS,iBAAT,AAA0B,AAAM,gBAC9B;AAAM,AAAU,oBAAQ,gBAAxB,AAAgB,AAChB,AAAM,AAAE;;;wCAAF,AAAmC;AAAQ,oBAAR,AAAiB,SAA1D,uBACA;AAAM,cAAU,KAAM,YAAN,AAAc,QAA9B,AAAgB,AAAc,AAAS;yCACvC;AAAM,sBAAkB,YAAS,QAAQ,WAAzC,AAAwB,AAA8B,AAAC,AAAM,AAAE,AAAmB,AAClF,AAAM,AAAe,AAAQ,AAC7B;AAJM,AAAe;;AAIf,WAAN,AAAqB,AAAK,AAC1B,AAAM,AAAW,AAAO,AAAK,AAAW,AACxC,AAAI,AAAY;AApBd,AAAoB,AAAE,AAAQ,AAC9B,KAoBF;AAAA,AAAI,AAAK,AAAO,AACd;;WAAY,AAAK,UAAL,AAAW,AAAI,AAAC,AAAS,AACnC;AAAI,eAAA,AAAK,AAAS,WAAlB,AAA2B,kCACzB;;;AACE;;;;;;;;;;;UADK;;eAAA,AACG,AAAK,yBACb;aAAU,AAAK,aAFV,AAGL;AAHK,AAGK,AAAK,AACf;AAJK,AAIG,AAAK,AAAS,AAAQ,AAAK,AACnC;AALK,AAKQ,AAAK,AAAkB,AAAK,AACzC;;SANK,AAMI,AAAK,AAAS;AANzB,AAQD,EAVH,AAAY,AAWX,AACD,AAAI,AAAc,AAChB,AAAU,AAAK,AACb,AAAQ,AACR,AAAU;;;;;;;AACV,QAHa,AAGH,yCACV;cAAQ,SAJK,QAKb;kBALa,AAKA,AACb,AAAS;;MANX,yDAQD;mFACF;;qBAED;;AAAM;YACJ;KADiB;;WACJ,kBADI,AAEjB;AAFiB,AAEX,AACN;AAHiB,AAGH,AAAK,AACnB,AAAM,GAJW,AAKjB,AAAc,AACd,AAAW,AACT,AAAU,AACR,AAAO,AAAgB,AACvB,AAAO,AAAgB;;;;;;AACvB,SAAM,oBAHE,AAGc;MAHd,AAIA,AAAgB,AACxB;MAAS,kBALD,AAKiB,AACzB;AAFA,gDAJQ;MAMI;MAAgB;;;MAPrB,iBAST;AAAQ,mBACN;SADM,AACC,AAAK,AAAS,AAAG,AAAQ,AAChC;AAAO,mBAFD,AAEC,AAAK,AAAS,AAAG,AAAQ,AAAY,AAC5C;AAHM,AAGA,AAAK,AAAS,AAAG,AAAQ,AAC/B;;MAAQ,UAAK,MAAL,AAAc,QAAd,AAAiB,SAJnB,AAI2B,AACjC;;MAAS,AAAK,0BAAL,AAAyB,QAAzB,AAAoC;;GAApC,AAAc,AAAG,EALpB;;6BATC;AANM,4BAuBjB;MAAO,oCAvBU;AAlCW,AAkC9B,AA0BA,kDACA;;;AACS,gBAAT,KAAoB,AAClB;AAAW,uBAAX,AAAsB,AAAW,AAAQ,AAAK,AAAU;uBACxD;AAAK,AAAM,gBAAX,KAAmB,SAAW,QAA9B,AAAqC,KACnC;AAAI,AAAK,qBAAL,KAAJ,AAAsB,AAAY,uBAChC;AAAK,sBAAL,AAAkB,SACnB,AACF;AANH,AAAI;AAOH;;;qBACD;AAAO;;;;;;eAST;A,AATE,AACD,AAED;AAMA,AAAQ,AAAe,AAAU,AAAM,AAAU,AAC/C,AAAM,AAAM,AAAS,AAAQ,AAC7B;;MAAA,AAAM,AAAU;iBAEhB;AAAI,UAAJ,AAAI,AAAK,AAAS,AAAK,AAAY,AAAK,AAAS,AAAG,AAAS,AAC3D;AAAM,YAAN,AAAmB,AAAO,AAAO,AAAI,AAAiB,AAAO,AAAe,AAAK,AACjF;UAAM,MAAN,AAAgB,AAChB;AAAM,kBAAc,MAApB,AAAsB,AAAQ,AAC9B;UAAM,AAAS,AAAQ,AAAY,AAAE;AAAM,kBAAR;AAAnC,AAAe;AACR;+BATX,AAWC,AAED,A;;;;;oCAKA;AATI,AAAO,AAAS,AAAO,AACxB;AAQM;eACP,0BACA;AAAM,eAAU,MAAQ,YAAR,QAAhB,YACA;AAAM,wCAAE;AAAF,0CAAe;iBAAf,qCAAN,AAAM,AAAgC,AAAoB,AAAQ,AAAS;AAH7E,AAA6B,AAAO,AAClC,AAAI;AAVF;WAaF,AAAI,AAAiB,AACnB,AAAe,AAChB;AAtBD;;AAoBA,MAEO,gBACL;iBAAe,WAAf,mCACD;;;;;;;;;;;;;;;;wCACD;AAAM,aAAU,AAAM,aAAtB,AAAgB,AAAc,AAAS;AACvC;AAAA,AAAM,AAAkB,AAAS,AAAQ,AAAa,AAAC,AAAM,AAAE,AAAmB;AAClF;;AAAM,SAAN,AAAqB,AAAQ,AAC7B;AAAA,AAAM,AAAgB,AAAM,AAC5B,AAAM,AAAY,AAAO,AAAM,AAAW,EAC1C,AAAM,AAAY,AAAM,AAAM,AAAI,AAAC,AAAS,AAC1C,AAAI,AAAK,AAAS,AAAS,AACzB,AAAO,AACL,AAAQ,AAAK,AACb,AAAU,AAAK,AACf,AAAU,AAAK;;;;;;;AACf,QAAQ,AAAK,cAAL,AAAc,UAAd,AAAsB,OAAK;kBAJ9B,AAKQ,AAAK,AAAkB,AAAK,AACzC,UANK,AAKL,CALK,AAMI,AAAK,AAAS;;MANzB,sDAQD;wFAVe,AAWjB;AAXD;qBAYA;;AAAI,QAAJ,AAAmB,AACjB;UAAA,AAAU,AAAK;cACb;;;aAAQ,SADK,SAEb;aAAU,OAFG,AAGb;aAHa,AAGH,MACV;aAAQ,MAJK,AAKb;AALa,AAKA,AACb;AANa,AAMJ;AANX,AAQD,GAED,AAAM,AAAe,AACnB,AAAa,AACb,AAAM,AACN,AAAQ,AACR,AAAM,AAAM,AACZ,AAAc,AAAM;;;;;;;;AACpB,QANmB,AAMb;QACQ,cAPK,AAQnB;QAAW,UACT;MAAU,kBACR;AAHJ,MAGW,cAAgB,QADf,SAER;MAAO,gBAAgB,QAFf,SAGR;;MAAM;;GAHE,AAGc,EACtB;;MAAQ,uBAJA,AAIgB,AACxB;MAAS,UALD,AAKiB,AACzB;MAAY,aANJ,AAMoB;AAPrB,qCAST;MAAQ,oCACN;MAAO,aAAA,AAAM,SADP,AACC,AAAe,AAAG,AAAQ,AACjC;MAAO,AAAM,kBAAN,AAAe,AAAG,MAAlB,AAA0B,eAF3B,AAEC,AAAsC,AAC7C;MAAM,AAAM;YAHN,AAIE,AAAM,AAAS,AAAG,AAAQ,AAClC;cALM,AAKG,AAAM,AAAS,AAAG,AAAQ,AAAW;YAdvC;AARQ,iBAAA,AAyBnB,AAAO;AARG,AAGA,AAAe,AAAG,AAAQ,AAChC;AArBN;iBA4BA;AAAI,UAAJ,AAAU,AAAW,AACnB;UAAA,AAAa,AAAW,AAAW,AAAQ,AAAM,AAAU;YAC3D;AAAK,AAAM,kBAAX,AAAmB,MAAnB,AAAgC,AAAO,AACrC;AAAI,aAAJ,AAAI,AAAK,AAAa,AAAY,AAChC;UAAA,AAAK,AAAa,AACnB;kBACF;;;+BAEH;AAAO,eAAP,gBACD,A,AAED;;;;;;;yCAMA;AAAQ,eAAR,MAAsB,SAAU,GAAV,AAAiB,QAAjB,AAA2B,YAC/C;AAAM,cAAN,AAAgB,MAD+B,AAC/C,SACA;0CACA,AAAI;AAAS,iBAAM,MAAf,SAA2B,GAAM,QAAN,AAAe,AAAG,WAAjD,AAA0D,AACxD,AAAM,AAAa,AAAO,AAAO,AAAI,AAAoB,AAAQ,AAAe,AAAM,AACtF,AAAM,AAAU,AAChB;;AAhBD;AAgBO,YAAN,AAAoB,AAAE,AAAQ,AAC9B,AAAI,AACF,AAAM,AAAS,AAAQ,AAAY,AAAE;;MAAM;UAAR;;AAAnC,AAAe,yBACf;AAFF,AAEE,AAAO,AAAS,AAAO,AACxB,AAAC,AAAO,AAAO,AACd,AAAO;;2CAAP,AAAa,AACb,AAAO,AAAM;AACd;uCAbL,AAeC;AAED,A;;oCAOA,AAAQ,AAAe,AAAU,AAAO,AAAc,AAAU,AAC9D,AAAM,AAAc,AACpB,AAAM,AAAU,AAChB,AAAM,AAAU,AAAQ,AACxB,AAAM,AAAE,AAAgB,AAAQ,AAAS,AACzC,AAAM,AAAU,AAAM,AAAQ,AAAS,AACvC,AAAM,AAAkB,AAAS,AAAQ,AAAa,AAAC,AAAM,AAAE,AAAmB,AAClF,AAAM,AAAe,AAAQ,AAC7B,AAAM,AAAU,AAChB,AAAM,AAAc,AAAE,AAAQ,AAC9B,AAAM,AAAe,AAAe,AAAC,AACrC,AAAM,AAAY,AAAO,AAAM,AAAW,AAC1C,AAAM,AAAa,AAAS,AAC5B,AAAM,AAAmB,AAAE,AAAM,AAAO,AAAG,AAAW,AACtD,AAAO,AAAY,AACjB,AAAQ,AACR,AAAU,AACV,AAAQ,AACR,AAAa,AAEf,AAAM,AAAgB,AACpB,AAAa,AACb,AAAM,AACN,AAAM,AACN,AAAQ,AACR,AAAc,AAAM,AACpB,AAAS,AACT,AAAM,AACN,AAAc,AACd,AAAW,AACT,AAAU,AACR,AAAO,AAAgB,AACvB,AAAO,AAAgB,AACvB,AAAM,AAAgB,AACtB,AAAQ,AAAgB,AACxB,AAAS,AAAgB,AACzB,AAAY,AAAgB,AAE9B,AAAQ,AACN,AAAO,AAAM,AAAS,AAAG,AAAQ,AACjC,AAAO,AAAM,AAAS,AAAG,AAAQ,AAAY,AAC7C,AAAM,AAAM,AAAS,AAAG,AAAQ,AAChC,AAAQ,AAAM,AAAS,AAAG,AAAQ,AAClC,AAAS,AAAM,AAAS,AAAG,AAAQ,AAAW,AAGlD,AAAO,AAAC,AAIV,AAAM,AAAS,AAAQ,AAAY,AAAE,AAAM,AAC3C,AAAO,AAAS,AAAO,AACxB,AAED,AAAe,AAEf,AAAO,AAAQ,AACb,AAA6B,AAAQ,AACrC,AAAuB,AAAQ,AAC/B,AAA2B,AAAQ,AACnC,AAA0B,AAAQ;AAtEjC","file":"/imports/plugins/included/taxes-avalara/server/methods/taxCalc.js.map","sourcesContent":["import _ from \"lodash\";\nimport accounting from \"accounting-js\";\nimport os from \"os\";\nimport moment from \"moment\";\nimport { Meteor } from \"meteor/meteor\";\nimport { HTTP } from \"meteor/http\";\nimport { check } from \"meteor/check\";\nimport { Packages, Shops, Accounts } from \"/lib/collections\";\nimport { TaxCodes } from \"/imports/plugins/core/taxes/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\nimport Avalogger from \"./avalogger\";\n\nconst countriesWithRegions = [\"US\", \"CA\", \"DE\", \"AU\"];\nconst requiredFields = [\"username\", \"password\", \"apiLoginId\", \"companyCode\", \"shippingTaxCode\"];\nconst taxCalc = {};\n\ntaxCalc.getPackageData = function () {\n  const pkgData = Packages.findOne({\n    name: \"taxes-avalara\",\n    shopId: Reaction.getShopId(),\n    enabled: true\n  });\n  return pkgData;\n};\n\n// Private methods\n\n/**\n * @summary Get the root URL for REST calls\n * @returns {String} Base url\n */\nfunction getUrl() {\n  const packageData = taxCalc.getPackageData();\n  const { productionMode } = packageData.settings.avalara;\n  let baseUrl;\n  if (!productionMode) {\n    baseUrl = \"https://sandbox-rest.avatax.com/api/v2/\";\n  } else {\n    baseUrl = \"https://rest.avatax.com\";\n  }\n  return baseUrl;\n}\n\n/**\n * @summary Verify that we have all required configuration data before attempting to use the API\n * @param {Object} packageData - Package data retrieved from the database\n * @returns {boolean} - isValid Is the current configuration valid\n */\nfunction checkConfiguration(packageData = taxCalc.getPackageData()) {\n  let isValid = true;\n  const settings = _.get(packageData, \"settings.avalara\", {});\n  for (const field of requiredFields) {\n    if (!settings[field]) {\n      const msg = `The Avalara package cannot function unless ${field} is configured`;\n      Logger.warn(msg);\n      Avalogger.error({ error: msg });\n      isValid = false;\n    }\n  }\n  if (!isValid) {\n    throw new Meteor.Error(\"The Avalara package is not configured correctly. Cannot continue\");\n  }\n  return isValid;\n}\n\n/**\n * @summary Get the auth info to authenticate to REST API\n * @param {Object} packageData - Optionally pass in packageData if we already have it\n * @returns {String} Username/Password string\n */\nfunction getAuthData(packageData = taxCalc.getPackageData()) {\n  if (checkConfiguration(packageData)) {\n    const settings = _.get(packageData, \"settings.avalara\", {});\n    const { username, password } = settings;\n    const auth = `${username}:${password}`;\n    return auth;\n  }\n}\n\n/**\n * @summary Get exempt tax settings to pass to REST API\n * @param {String} userId id of user to find settings\n * @returns {Object} containing exemptCode and customerUsageType\n */\nfunction getTaxSettings(userId) {\n  return _.get(Accounts.findOne({ _id: userId }), \"taxSettings\");\n}\n\n/**\n * @summary function to get HTTP data and pass in extra Avalara-specific headers\n * @param {String} requestUrl - The URL to make the request to\n * @param {Object} options - An object of other options\n * @param {Boolean} testCredentials - determines skipping of configuration check\n * @returns {Object} Response from call\n */\nfunction avaGet(requestUrl, options = {}, testCredentials = true) {\n  const logObject = {};\n  const pkgData = taxCalc.getPackageData();\n\n  if (testCredentials) {\n    if (!checkConfiguration(pkgData)) {\n      return undefined;\n    }\n  }\n\n  const appVersion = Reaction.getAppVersion();\n  const meteorVersion = _.split(Meteor.release, \"@\")[1];\n  const machineName = os.hostname();\n  const avaClient = `Reaction; ${appVersion}; Meteor HTTP; ${meteorVersion}; ${machineName}`;\n  const headers = {\n    headers: {\n      \"X-Avalara-Client\": avaClient,\n      \"X-Avalara-UID\": \"a0o33000004K8g3\"\n    }\n  };\n  const auth = options.auth || getAuthData();\n  const timeout = { timeout: options.timeout || pkgData.settings.avalara.requestTimeout };\n  const allOptions = Object.assign({}, options, headers, { auth }, timeout);\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.request = allOptions;\n  }\n\n  try {\n    result = HTTP.get(requestUrl, allOptions);\n  } catch (error) {\n    result = error;\n    Logger.error(`Encountered error while calling Avalara API endpoint ${requestUrl}`);\n    Logger.error(error);\n    logObject.error = error;\n    Avalogger.error(logObject);\n  }\n\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.duration = _.get(result, \"headers.serverDuration\");\n    logObject.result = result.data;\n    Avalogger.info(logObject);\n  }\n\n  return result;\n}\n\n\n/**\n * @summary to POST HTTP data and pass in extra Avalara-specific headers\n * @param {String} requestUrl - The URL to make the request to\n * @param {Object} options - An object of others options, usually data\n * @returns {Object} Response from call\n */\nfunction avaPost(requestUrl, options) {\n  const logObject = {};\n  const pkgData = taxCalc.getPackageData();\n  const appVersion = Reaction.getAppVersion();\n  const meteorVersion = _.split(Meteor.release, \"@\")[1];\n  const machineName = os.hostname();\n  const avaClient = `Reaction; ${appVersion}; Meteor HTTP; ${meteorVersion}; ${machineName}`;\n  const headers = {\n    headers: {\n      \"X-Avalara-Client\": avaClient,\n      \"X-Avalara-UID\": \"a0o33000004K8g3\"\n    }\n  };\n  const auth = { auth: getAuthData() };\n  const timeout = { timeout: pkgData.settings.avalara.requestTimeout };\n  const allOptions = Object.assign({}, options, headers, auth, timeout);\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.request = allOptions;\n  }\n\n  let result;\n\n  try {\n    result = HTTP.post(requestUrl, allOptions);\n  } catch (error) {\n    Logger.error(`Encountered error while calling API at ${requestUrl}`);\n    Logger.error(error);\n    logObject.error = error;\n    // whether logging is enabled or not we log out errors\n    Avalogger.error(logObject);\n    result = {};\n  }\n\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.duration = _.get(result, \"headers.serverDuration\");\n    logObject.result = result.data;\n    Avalogger.info(logObject);\n  }\n\n  return result;\n}\n\n/**\n * @summary Gets the full list of Avalara-supported entity use codes.\n * @returns {Object[]} API response\n */\ntaxCalc.getEntityCodes = function () {\n  if (checkConfiguration()) {\n    const baseUrl = getUrl();\n    const requestUrl = `${baseUrl}definitions/entityusecodes`;\n    const result = avaGet(requestUrl);\n\n    if (result && result.code === \"ETIMEDOUT\") {\n      throw new Meteor.Error(\"Request timed out while populating entity codes.\");\n    }\n\n    return _.get(result, \"data.value\", []);\n  }\n  throw new Meteor.Error(\"bad-configuration\", \"Avalara package is enabled, but is not properly configured\");\n};\n\n// API Methods\n\n/**\n * @summary Calculate the taxable subtotal for a cart\n * @param {Cart} cart - Cart to calculate subtotal for\n * @returns {Number} Taxable subtotal\n */\ntaxCalc.calcTaxable = function (cart) {\n  let subTotal = 0;\n  for (const item of cart.items) {\n    if (item.variants.taxable) {\n      subTotal += (item.variants.price * item.quantity);\n    }\n  }\n  return subTotal;\n};\n\n/**\n * @summary Validate a particular address\n * @param {Object} address Address to validate\n * @returns {Object} The validated result\n */\ntaxCalc.validateAddress = function (address) {\n  check(address, Object);\n\n  const packageData = taxCalc.getPackageData();\n  const { countryList } = packageData.settings.addressValidation;\n\n  if (!_.includes(countryList, address.country)) {\n    // if this is a country selected for validation, proceed\n    // else use current address as response\n    return { validatedAddress: address, errors: [] };\n  }\n\n  let messages;\n  let validatedAddress = \"\"; // set default as falsy value\n  const errors = [];\n  const addressToValidate  = {\n    line1: address.address1,\n    city: address.city,\n    postalCode: address.postal,\n    country: address.country\n  };\n\n  if (_.includes(countriesWithRegions, address.country)) {\n    // if this is a country with regions, pass in region\n    addressToValidate.region = address.region;\n  }\n  if (address.line2) {\n    addressToValidate.line2 = address.address2;\n  }\n  const baseUrl = getUrl();\n  const requestUrl = `${baseUrl}addresses/resolve`;\n  const result = avaPost(requestUrl, { data: addressToValidate });\n  let content;\n\n  try {\n    content = JSON.parse(result.content);\n  } catch (error) {\n    content = result.content;\n  }\n  if (content && content.messages) {\n    messages = content.messages;\n  }\n  if (messages) {\n    for (const message of messages) {\n      errors.push({ summary: message.summary, details: message.details });\n    }\n  }\n\n  if (result && result.data && result.data.validatedAddresses.length !== 0) {\n    const resultAddress = result.data.validatedAddresses[0];\n    validatedAddress = {\n      address1: resultAddress.line1,\n      city: resultAddress.city,\n      region: resultAddress.region,\n      postal: resultAddress.postalCode,\n      country: resultAddress.country\n    };\n    if (result.data.address.line2) {\n      validatedAddress.addresss2 = resultAddress.line2;\n    }\n  }\n  return { validatedAddress, errors };\n};\n\n/**\n * @summary Tests supplied Avalara credentials by calling company endpoint\n * @param {Object} credentials callback Callback function for asynchronous execution\n * @param {Boolean} testCredentials To be set as false so avaGet skips config check\n * @returns {Object} Object containing \"statusCode\" on success, empty response on error\n */\ntaxCalc.testCredentials = function (credentials, testCredentials = false) {\n  check(credentials, Object);\n\n  const baseUrl = getUrl();\n  const auth = `${credentials.username}:${credentials.password}`;\n  const requestUrl = `${baseUrl}companies/${credentials.companyCode}/transactions`;\n  const result = avaGet(requestUrl, { auth, timeout: credentials.requestTimeout }, testCredentials);\n\n  if (result && result.code === \"ETIMEDOUT\") {\n    throw new Meteor.Error(\"Request Timed out. Increase your timeout settings\");\n  }\n\n  if (result.statusCode === 200) {\n    if (TaxCodes.find({}).count() === 0) {\n      Meteor.call(\"avalara/getTaxCodes\", (error, res) => {\n        if (error) {\n          if (typeof error === \"object\") {\n            Meteor.call(\"logging/logError\", \"avalara\",  error);\n          } else {\n            Meteor.call(\"logging/logError\", \"avalara\",  { error });\n          }\n        } else if (res && Array.isArray(res)) {\n          res.forEach(function (code) {\n            Meteor.call(\"taxes/insertTaxCodes\", Reaction.getShopId(), code, \"taxes-avalara\", (err) => {\n              if (err) {\n                throw new Meteor.Error(\"Error populating TaxCodes collection\", err);\n              }\n            });\n          });\n        }\n      });\n    }\n  }\n\n  return { statusCode: result.statusCode };\n};\n\n/**\n * @summary get Avalara Tax Codes\n * @returns {Array} An array of Tax code objects\n */\ntaxCalc.getTaxCodes = function () {\n  if (checkConfiguration()) {\n    const baseUrl = getUrl();\n    const requestUrl = `${baseUrl}definitions/taxcodes`;\n    const result = avaGet(requestUrl);\n    return _.get(result, \"data.value\", []);\n  }\n  throw new Meteor.Error(\"bad-configuration\", \"Avalara Tax package is enabled but not properly configured\");\n};\n\n/**\n * @summary Translate RC cart into format for submission\n * @param {Object} cart RC cart to send for tax estimate\n * @returns {Object} SalesOrder in Avalara format\n */\nfunction cartToSalesOrder(cart) {\n  const pkgData = taxCalc.getPackageData();\n  const { companyCode, shippingTaxCode } = pkgData.settings.avalara;\n  const company = Shops.findOne(Reaction.getShopId());\n  const companyShipping = _.filter(company.addressBook, (o) => o.isShippingDefault)[0];\n  const currencyCode = company.currency;\n  const cartShipping = cart.cartShipping();\n  const cartDate = moment(cart.createdAt).format();\n  let lineItems = [];\n  if (cart.items) {\n    lineItems = cart.items.map((item) => {\n      if (item.variants.taxable) {\n        return {\n          number: item._id,\n          itemCode: item.productId,\n          quantity: item.quantity,\n          amount: item.variants.price * item.quantity,\n          description: item.taxDescription || item.title,\n          taxCode: item.variants.taxCode\n        };\n      }\n    });\n    if (cartShipping) {\n      lineItems.push({\n        number: \"shipping\",\n        itemCode: \"shipping\",\n        quantity: 1,\n        amount: cartShipping,\n        description: \"Shipping\",\n        taxCode: shippingTaxCode\n      });\n    }\n  }\n\n  const salesOrder = {\n    companyCode: companyCode,\n    type: \"SalesOrder\",\n    customerCode: cart.userId,\n    date: cartDate,\n    currencyCode: currencyCode,\n    addresses: {\n      ShipFrom: {\n        line1: companyShipping.address1,\n        line2: companyShipping.address2,\n        city: companyShipping.city,\n        region: companyShipping.region,\n        country: companyShipping.country,\n        postalCode: companyShipping.postal\n      },\n      ShipTo: {\n        line1: cart.shipping[0].address.address1,\n        line2: cart.shipping[0].address.address2 || \"\",\n        city: cart.shipping[0].address.city,\n        region: cart.shipping[0].address.region,\n        country: cart.shipping[0].address.country || \"US\"\n      }\n    },\n    lines: lineItems\n  };\n\n  // current \"coupon code\" discount are based at the cart level, and every iten has it's\n  // discounted property set to true.\n  if (cart.discount)  {\n    salesOrder.discount = accounting.toFixed(cart.discount, 2);\n    for (const line of salesOrder.lines) {\n      if (line.itemCode !== \"shipping\") {\n        line.discounted = true;\n      }\n    }\n  }\n  return salesOrder;\n}\n\n/**\n * @summary Submit cart for tax calculation\n * @param {Cart} cart Cart object for estimation\n * @param {Function} callback callback when using async version\n * @returns {Object} result Result of SalesOrder call\n */\ntaxCalc.estimateCart = function (cart, callback) {\n  check(cart, Reaction.Schemas.Cart);\n  check(callback, Function);\n\n  if (cart.items && cart.shipping && cart.shipping[0].address) {\n    const salesOrder = Object.assign({}, cartToSalesOrder(cart), getTaxSettings(cart.userId));\n    const baseUrl = getUrl();\n    const requestUrl = `${baseUrl}transactions/create`;\n    const result = avaPost(requestUrl, { data: salesOrder });\n    return callback(result.data);\n  }\n};\n\n/**\n * @summary Translate RC order into format for final submission\n * @param {Object} order RC order to send for tax reporting\n * @returns {Object} SalesOrder in Avalara format\n */\nfunction orderToSalesInvoice(order) {\n  let documentType;\n  const pkgData = taxCalc.getPackageData();\n  const { companyCode, shippingTaxCode, commitDocuments } = pkgData.settings.avalara;\n  if (commitDocuments) {\n    documentType = \"SalesInvoice\";\n  } else {\n    documentType = \"SalesOrder\";\n  }\n  const company = Shops.findOne(Reaction.getShopId());\n  const companyShipping = _.filter(company.addressBook, (o) => o.isShippingDefault)[0];\n  const currencyCode = company.currency;\n  const orderShipping = order.orderShipping();\n  const orderDate = moment(order.createdAt).format();\n  const lineItems = order.items.map((item) => {\n    if (item.variants.taxable) {\n      return {\n        number: item._id,\n        itemCode: item.productId,\n        quantity: item.quantity,\n        amount: item.variants.price * item.quantity,\n        description: item.taxDescription || item.title,\n        taxCode: item.variants.taxCode\n      };\n    }\n  });\n  if (orderShipping) {\n    lineItems.push({\n      number: \"shipping\",\n      itemCode: \"shipping\",\n      quantity: 1,\n      amount: orderShipping,\n      description: \"Shipping\",\n      taxCode: shippingTaxCode\n    });\n  }\n\n  const salesInvoice = {\n    companyCode: companyCode,\n    type: documentType,\n    commit: commitDocuments,\n    code: order._id,\n    customerCode: order.userId,\n    date: orderDate,\n    currencyCode: currencyCode,\n    addresses: {\n      ShipFrom: {\n        line1: companyShipping.address1,\n        line2: companyShipping.address2,\n        city: companyShipping.city,\n        region: companyShipping.region,\n        country: companyShipping.country,\n        postalCode: companyShipping.postal\n      },\n      ShipTo: {\n        line1: order.shipping[0].address.address1,\n        line2: order.shipping[0].address.address2 || \"\",\n        city: order.shipping[0].address.city,\n        region: order.shipping[0].address.region,\n        country: order.shipping[0].address.country || \"US\"\n      }\n    },\n    lines: lineItems\n  };\n\n  if (order.discount)  {\n    salesInvoice.discount = accounting.toFixed(order.discount, 2);\n    for (const line of salesInvoice.lines) {\n      if (line.itemCode !== \"shipping\") {\n        line.discounted = true;\n      }\n    }\n  }\n  return salesInvoice;\n}\n\n/**\n * @summary Submit order for tax reporting\n * @param {Order} order Order object for submission\n * @param {Function} callback callback when using async version\n * @returns {Object} result Result of SalesInvoice call\n */\ntaxCalc.recordOrder = function (order, callback) {\n  check(callback, Function);\n  // unlike the other functions, we expect this to always be called asynchronously\n  if (order && order.shipping && order.shipping[0].address) {\n    const salesOrder = Object.assign({}, orderToSalesInvoice(order), getTaxSettings(order.userId));\n    const baseUrl = getUrl();\n    const requestUrl = `${baseUrl}transactions/create`;\n    try {\n      const result = avaPost(requestUrl, { data: salesOrder });\n      return callback(result.data);\n    } catch (error) {\n      Logger.error(\"Encountered error while recording order to Avalara\");\n      Logger.error(error);\n    }\n  }\n};\n\n/**\n * @summary Report refund to Avalara\n * @param {Order} order - The original order the refund was against\n * @param {Number} refundAmount - Amount to be refunded\n * @param {Function} callback - Callback\n * @returns {Object} Results from transaction call\n */\ntaxCalc.reportRefund = function (order, refundAmount, callback) {\n  check(refundAmount, Number);\n  check(callback, Function);\n  const pkgData = taxCalc.getPackageData();\n  const { companyCode } = pkgData.settings.avalara;\n  const company = Shops.findOne(Reaction.getShopId());\n  const companyShipping = _.filter(company.addressBook, (o) => o.isShippingDefault)[0];\n  const currencyCode = company.currency;\n  const baseUrl = getUrl();\n  const requestUrl = `${baseUrl}transactions/create`;\n  const returnAmount = refundAmount * -1;\n  const orderDate = moment(order.createdAt).format();\n  const refundDate = moment().format();\n  const refundReference = `${order.cartId}:${refundDate}`;\n  const  lineItems = {\n    number: \"01\",\n    quantity: 1,\n    amount: returnAmount,\n    description: \"refund\"\n  };\n  const returnInvoice = {\n    companyCode: companyCode,\n    type: \"ReturnInvoice\",\n    code: refundReference,\n    commit: true,\n    customerCode: order._id,\n    taxDate: orderDate,\n    date: refundDate,\n    currencyCode: currencyCode,\n    addresses: {\n      ShipFrom: {\n        line1: companyShipping.address1,\n        line2: companyShipping.address2,\n        city: companyShipping.city,\n        region: companyShipping.region,\n        country: companyShipping.country,\n        postalCode: companyShipping.postal\n      },\n      ShipTo: {\n        line1: order.shipping[0].address.address1,\n        line2: order.shipping[0].address.address2 || \"\",\n        city: order.shipping[0].address.city,\n        region: order.shipping[0].address.region,\n        country: order.shipping[0].address.country || \"US\"\n      }\n    },\n    lines: [lineItems]\n  };\n\n\n  const result = avaPost(requestUrl, { data: returnInvoice });\n  return callback(result.data);\n};\n\nexport default taxCalc;\n\nMeteor.methods({\n  \"avalara/addressValidation\": taxCalc.validateAddress,\n  \"avalara/getTaxCodes\": taxCalc.getTaxCodes,\n  \"avalara/testCredentials\": taxCalc.testCredentials,\n  \"avalara/getEntityCodes\": taxCalc.getEntityCodes\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/taxes-avalara/server/methods/taxCalc.js.map","sourceFileName":"/imports/plugins/included/taxes-avalara/server/methods/taxCalc.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"taxCalc"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _filter = void 0;\n\nmodule.importSync(\"lodash/filter\", {\n  \"default\": function (v) {\n    _filter = v;\n  }\n}, 0);\n\nvar _includes = void 0;\n\nmodule.importSync(\"lodash/includes\", {\n  \"default\": function (v) {\n    _includes = v;\n  }\n}, 1);\n\nvar _split = void 0;\n\nmodule.importSync(\"lodash/split\", {\n  \"default\": function (v) {\n    _split = v;\n  }\n}, 2);\n\nvar _get = void 0;\n\nmodule.importSync(\"lodash/get\", {\n  \"default\": function (v) {\n    _get = v;\n  }\n}, 3);\nvar accounting = void 0;\nmodule.importSync(\"accounting-js\", {\n  \"default\": function (v) {\n    accounting = v;\n  }\n}, 4);\nvar os = void 0;\nmodule.importSync(\"os\", {\n  \"default\": function (v) {\n    os = v;\n  }\n}, 5);\nvar moment = void 0;\nmodule.importSync(\"moment\", {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 6);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 7);\nvar HTTP = void 0;\nmodule.importSync(\"meteor/http\", {\n  HTTP: function (v) {\n    HTTP = v;\n  }\n}, 8);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 9);\nvar Packages = void 0,\n    Shops = void 0,\n    Accounts = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  },\n  Shops: function (v) {\n    Shops = v;\n  },\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 10);\nvar TaxCodes = void 0;\nmodule.importSync(\"/imports/plugins/core/taxes/lib/collections\", {\n  TaxCodes: function (v) {\n    TaxCodes = v;\n  }\n}, 11);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 12);\nvar Avalogger = void 0;\nmodule.importSync(\"./avalogger\", {\n  \"default\": function (v) {\n    Avalogger = v;\n  }\n}, 13);\nvar countriesWithRegions = [\"US\", \"CA\", \"DE\", \"AU\"];\nvar requiredFields = [\"username\", \"password\", \"apiLoginId\", \"companyCode\", \"shippingTaxCode\"];\nvar taxCalc = {};\n\ntaxCalc.getPackageData = function () {\n  var pkgData = Packages.findOne({\n    name: \"taxes-avalara\",\n    shopId: Reaction.getShopId(),\n    enabled: true\n  });\n  return pkgData;\n}; // Private methods\n/**\n * @summary Get the root URL for REST calls\n * @returns {String} Base url\n */\n\nfunction getUrl() {\n  var packageData = taxCalc.getPackageData();\n  var productionMode = packageData.settings.avalara.productionMode;\n  var baseUrl = void 0;\n\n  if (!productionMode) {\n    baseUrl = \"https://sandbox-rest.avatax.com/api/v2/\";\n  } else {\n    baseUrl = \"https://rest.avatax.com\";\n  }\n\n  return baseUrl;\n} /**\n   * @summary Verify that we have all required configuration data before attempting to use the API\n   * @param {Object} packageData - Package data retrieved from the database\n   * @returns {boolean} - isValid Is the current configuration valid\n   */\n\nfunction checkConfiguration() {\n  var packageData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : taxCalc.getPackageData();\n  var isValid = true;\n\n  var settings = _get(packageData, \"settings.avalara\", {});\n\n  for (var _iterator = requiredFields, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var field = _ref;\n\n    if (!settings[field]) {\n      var msg = \"The Avalara package cannot function unless \" + field + \" is configured\";\n      Logger.warn(msg);\n      Avalogger.error({\n        error: msg\n      });\n      isValid = false;\n    }\n  }\n\n  if (!isValid) {\n    throw new Meteor.Error(\"The Avalara package is not configured correctly. Cannot continue\");\n  }\n\n  return isValid;\n} /**\n   * @summary Get the auth info to authenticate to REST API\n   * @param {Object} packageData - Optionally pass in packageData if we already have it\n   * @returns {String} Username/Password string\n   */\n\nfunction getAuthData() {\n  var packageData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : taxCalc.getPackageData();\n\n  if (checkConfiguration(packageData)) {\n    var settings = _get(packageData, \"settings.avalara\", {});\n\n    var username = settings.username,\n        password = settings.password;\n    var auth = username + \":\" + password;\n    return auth;\n  }\n} /**\n   * @summary Get exempt tax settings to pass to REST API\n   * @param {String} userId id of user to find settings\n   * @returns {Object} containing exemptCode and customerUsageType\n   */\n\nfunction getTaxSettings(userId) {\n  return _get(Accounts.findOne({\n    _id: userId\n  }), \"taxSettings\");\n} /**\n   * @summary function to get HTTP data and pass in extra Avalara-specific headers\n   * @param {String} requestUrl - The URL to make the request to\n   * @param {Object} options - An object of other options\n   * @param {Boolean} testCredentials - determines skipping of configuration check\n   * @returns {Object} Response from call\n   */\n\nfunction avaGet(requestUrl) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var testCredentials = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var logObject = {};\n  var pkgData = taxCalc.getPackageData();\n\n  if (testCredentials) {\n    if (!checkConfiguration(pkgData)) {\n      return undefined;\n    }\n  }\n\n  var appVersion = Reaction.getAppVersion();\n\n  var meteorVersion = _split(Meteor.release, \"@\")[1];\n\n  var machineName = os.hostname();\n  var avaClient = \"Reaction; \" + appVersion + \"; Meteor HTTP; \" + meteorVersion + \"; \" + machineName;\n  var headers = {\n    headers: {\n      \"X-Avalara-Client\": avaClient,\n      \"X-Avalara-UID\": \"a0o33000004K8g3\"\n    }\n  };\n  var auth = options.auth || getAuthData();\n  var timeout = {\n    timeout: options.timeout || pkgData.settings.avalara.requestTimeout\n  };\n  var allOptions = Object.assign({}, options, headers, {\n    auth: auth\n  }, timeout);\n\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.request = allOptions;\n  }\n\n  try {\n    result = HTTP.get(requestUrl, allOptions);\n  } catch (error) {\n    result = error;\n    Logger.error(\"Encountered error while calling Avalara API endpoint \" + requestUrl);\n    Logger.error(error);\n    logObject.error = error;\n    Avalogger.error(logObject);\n  }\n\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.duration = _get(result, \"headers.serverDuration\");\n    logObject.result = result.data;\n    Avalogger.info(logObject);\n  }\n\n  return result;\n} /**\n   * @summary to POST HTTP data and pass in extra Avalara-specific headers\n   * @param {String} requestUrl - The URL to make the request to\n   * @param {Object} options - An object of others options, usually data\n   * @returns {Object} Response from call\n   */\n\nfunction avaPost(requestUrl, options) {\n  var logObject = {};\n  var pkgData = taxCalc.getPackageData();\n  var appVersion = Reaction.getAppVersion();\n\n  var meteorVersion = _split(Meteor.release, \"@\")[1];\n\n  var machineName = os.hostname();\n  var avaClient = \"Reaction; \" + appVersion + \"; Meteor HTTP; \" + meteorVersion + \"; \" + machineName;\n  var headers = {\n    headers: {\n      \"X-Avalara-Client\": avaClient,\n      \"X-Avalara-UID\": \"a0o33000004K8g3\"\n    }\n  };\n  var auth = {\n    auth: getAuthData()\n  };\n  var timeout = {\n    timeout: pkgData.settings.avalara.requestTimeout\n  };\n  var allOptions = Object.assign({}, options, headers, auth, timeout);\n\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.request = allOptions;\n  }\n\n  var result = void 0;\n\n  try {\n    result = HTTP.post(requestUrl, allOptions);\n  } catch (error) {\n    Logger.error(\"Encountered error while calling API at \" + requestUrl);\n    Logger.error(error);\n    logObject.error = error; // whether logging is enabled or not we log out errors\n\n    Avalogger.error(logObject);\n    result = {};\n  }\n\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.duration = _get(result, \"headers.serverDuration\");\n    logObject.result = result.data;\n    Avalogger.info(logObject);\n  }\n\n  return result;\n} /**\n   * @summary Gets the full list of Avalara-supported entity use codes.\n   * @returns {Object[]} API response\n   */\n\ntaxCalc.getEntityCodes = function () {\n  if (checkConfiguration()) {\n    var baseUrl = getUrl();\n    var requestUrl = baseUrl + \"definitions/entityusecodes\";\n\n    var _result = avaGet(requestUrl);\n\n    if (_result && _result.code === \"ETIMEDOUT\") {\n      throw new Meteor.Error(\"Request timed out while populating entity codes.\");\n    }\n\n    return _get(_result, \"data.value\", []);\n  }\n\n  throw new Meteor.Error(\"bad-configuration\", \"Avalara package is enabled, but is not properly configured\");\n}; // API Methods\n/**\n * @summary Calculate the taxable subtotal for a cart\n * @param {Cart} cart - Cart to calculate subtotal for\n * @returns {Number} Taxable subtotal\n */\n\ntaxCalc.calcTaxable = function (cart) {\n  var subTotal = 0;\n\n  for (var _iterator2 = cart.items, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _ref2;\n\n    if (_isArray2) {\n      if (_i2 >= _iterator2.length) break;\n      _ref2 = _iterator2[_i2++];\n    } else {\n      _i2 = _iterator2.next();\n      if (_i2.done) break;\n      _ref2 = _i2.value;\n    }\n\n    var item = _ref2;\n\n    if (item.variants.taxable) {\n      subTotal += item.variants.price * item.quantity;\n    }\n  }\n\n  return subTotal;\n}; /**\n    * @summary Validate a particular address\n    * @param {Object} address Address to validate\n    * @returns {Object} The validated result\n    */\n\ntaxCalc.validateAddress = function (address) {\n  check(address, Object);\n  var packageData = taxCalc.getPackageData();\n  var countryList = packageData.settings.addressValidation.countryList;\n\n  if (!_includes(countryList, address.country)) {\n    // if this is a country selected for validation, proceed\n    // else use current address as response\n    return {\n      validatedAddress: address,\n      errors: []\n    };\n  }\n\n  var messages = void 0;\n  var validatedAddress = \"\"; // set default as falsy value\n\n  var errors = [];\n  var addressToValidate = {\n    line1: address.address1,\n    city: address.city,\n    postalCode: address.postal,\n    country: address.country\n  };\n\n  if (_includes(countriesWithRegions, address.country)) {\n    // if this is a country with regions, pass in region\n    addressToValidate.region = address.region;\n  }\n\n  if (address.line2) {\n    addressToValidate.line2 = address.address2;\n  }\n\n  var baseUrl = getUrl();\n  var requestUrl = baseUrl + \"addresses/resolve\";\n  var result = avaPost(requestUrl, {\n    data: addressToValidate\n  });\n  var content = void 0;\n\n  try {\n    content = JSON.parse(result.content);\n  } catch (error) {\n    content = result.content;\n  }\n\n  if (content && content.messages) {\n    messages = content.messages;\n  }\n\n  if (messages) {\n    for (var _iterator3 = messages, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var message = _ref3;\n      errors.push({\n        summary: message.summary,\n        details: message.details\n      });\n    }\n  }\n\n  if (result && result.data && result.data.validatedAddresses.length !== 0) {\n    var resultAddress = result.data.validatedAddresses[0];\n    validatedAddress = {\n      address1: resultAddress.line1,\n      city: resultAddress.city,\n      region: resultAddress.region,\n      postal: resultAddress.postalCode,\n      country: resultAddress.country\n    };\n\n    if (result.data.address.line2) {\n      validatedAddress.addresss2 = resultAddress.line2;\n    }\n  }\n\n  return {\n    validatedAddress: validatedAddress,\n    errors: errors\n  };\n}; /**\n    * @summary Tests supplied Avalara credentials by calling company endpoint\n    * @param {Object} credentials callback Callback function for asynchronous execution\n    * @param {Boolean} testCredentials To be set as false so avaGet skips config check\n    * @returns {Object} Object containing \"statusCode\" on success, empty response on error\n    */\n\ntaxCalc.testCredentials = function (credentials) {\n  var testCredentials = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  check(credentials, Object);\n  var baseUrl = getUrl();\n  var auth = credentials.username + \":\" + credentials.password;\n  var requestUrl = baseUrl + \"companies/\" + credentials.companyCode + \"/transactions\";\n  var result = avaGet(requestUrl, {\n    auth: auth,\n    timeout: credentials.requestTimeout\n  }, testCredentials);\n\n  if (result && result.code === \"ETIMEDOUT\") {\n    throw new Meteor.Error(\"Request Timed out. Increase your timeout settings\");\n  }\n\n  if (result.statusCode === 200) {\n    if (TaxCodes.find({}).count() === 0) {\n      Meteor.call(\"avalara/getTaxCodes\", function (error, res) {\n        if (error) {\n          if ((typeof error === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(error)) === \"object\") {\n            Meteor.call(\"logging/logError\", \"avalara\", error);\n          } else {\n            Meteor.call(\"logging/logError\", \"avalara\", {\n              error: error\n            });\n          }\n        } else if (res && Array.isArray(res)) {\n          res.forEach(function (code) {\n            Meteor.call(\"taxes/insertTaxCodes\", Reaction.getShopId(), code, \"taxes-avalara\", function (err) {\n              if (err) {\n                throw new Meteor.Error(\"Error populating TaxCodes collection\", err);\n              }\n            });\n          });\n        }\n      });\n    }\n  }\n\n  return {\n    statusCode: result.statusCode\n  };\n}; /**\n    * @summary get Avalara Tax Codes\n    * @returns {Array} An array of Tax code objects\n    */\n\ntaxCalc.getTaxCodes = function () {\n  if (checkConfiguration()) {\n    var baseUrl = getUrl();\n    var requestUrl = baseUrl + \"definitions/taxcodes\";\n\n    var _result2 = avaGet(requestUrl);\n\n    return _get(_result2, \"data.value\", []);\n  }\n\n  throw new Meteor.Error(\"bad-configuration\", \"Avalara Tax package is enabled but not properly configured\");\n}; /**\n    * @summary Translate RC cart into format for submission\n    * @param {Object} cart RC cart to send for tax estimate\n    * @returns {Object} SalesOrder in Avalara format\n    */\n\nfunction cartToSalesOrder(cart) {\n  var pkgData = taxCalc.getPackageData();\n  var _pkgData$settings$ava = pkgData.settings.avalara,\n      companyCode = _pkgData$settings$ava.companyCode,\n      shippingTaxCode = _pkgData$settings$ava.shippingTaxCode;\n  var company = Shops.findOne(Reaction.getShopId());\n\n  var companyShipping = _filter(company.addressBook, function (o) {\n    return o.isShippingDefault;\n  })[0];\n\n  var currencyCode = company.currency;\n  var cartShipping = cart.cartShipping();\n  var cartDate = moment(cart.createdAt).format();\n  var lineItems = [];\n\n  if (cart.items) {\n    lineItems = cart.items.map(function (item) {\n      if (item.variants.taxable) {\n        return {\n          number: item._id,\n          itemCode: item.productId,\n          quantity: item.quantity,\n          amount: item.variants.price * item.quantity,\n          description: item.taxDescription || item.title,\n          taxCode: item.variants.taxCode\n        };\n      }\n    });\n\n    if (cartShipping) {\n      lineItems.push({\n        number: \"shipping\",\n        itemCode: \"shipping\",\n        quantity: 1,\n        amount: cartShipping,\n        description: \"Shipping\",\n        taxCode: shippingTaxCode\n      });\n    }\n  }\n\n  var salesOrder = {\n    companyCode: companyCode,\n    type: \"SalesOrder\",\n    customerCode: cart.userId,\n    date: cartDate,\n    currencyCode: currencyCode,\n    addresses: {\n      ShipFrom: {\n        line1: companyShipping.address1,\n        line2: companyShipping.address2,\n        city: companyShipping.city,\n        region: companyShipping.region,\n        country: companyShipping.country,\n        postalCode: companyShipping.postal\n      },\n      ShipTo: {\n        line1: cart.shipping[0].address.address1,\n        line2: cart.shipping[0].address.address2 || \"\",\n        city: cart.shipping[0].address.city,\n        region: cart.shipping[0].address.region,\n        country: cart.shipping[0].address.country || \"US\"\n      }\n    },\n    lines: lineItems\n  }; // current \"coupon code\" discount are based at the cart level, and every iten has it's\n  // discounted property set to true.\n\n  if (cart.discount) {\n    salesOrder.discount = accounting.toFixed(cart.discount, 2);\n\n    for (var _iterator4 = salesOrder.lines, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n      var _ref4;\n\n      if (_isArray4) {\n        if (_i4 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i4++];\n      } else {\n        _i4 = _iterator4.next();\n        if (_i4.done) break;\n        _ref4 = _i4.value;\n      }\n\n      var line = _ref4;\n\n      if (line.itemCode !== \"shipping\") {\n        line.discounted = true;\n      }\n    }\n  }\n\n  return salesOrder;\n} /**\n   * @summary Submit cart for tax calculation\n   * @param {Cart} cart Cart object for estimation\n   * @param {Function} callback callback when using async version\n   * @returns {Object} result Result of SalesOrder call\n   */\n\ntaxCalc.estimateCart = function (cart, callback) {\n  check(cart, Reaction.Schemas.Cart);\n  check(callback, Function);\n\n  if (cart.items && cart.shipping && cart.shipping[0].address) {\n    var salesOrder = Object.assign({}, cartToSalesOrder(cart), getTaxSettings(cart.userId));\n    var baseUrl = getUrl();\n    var requestUrl = baseUrl + \"transactions/create\";\n\n    var _result3 = avaPost(requestUrl, {\n      data: salesOrder\n    });\n\n    return callback(_result3.data);\n  }\n}; /**\n    * @summary Translate RC order into format for final submission\n    * @param {Object} order RC order to send for tax reporting\n    * @returns {Object} SalesOrder in Avalara format\n    */\n\nfunction orderToSalesInvoice(order) {\n  var documentType = void 0;\n  var pkgData = taxCalc.getPackageData();\n  var _pkgData$settings$ava2 = pkgData.settings.avalara,\n      companyCode = _pkgData$settings$ava2.companyCode,\n      shippingTaxCode = _pkgData$settings$ava2.shippingTaxCode,\n      commitDocuments = _pkgData$settings$ava2.commitDocuments;\n\n  if (commitDocuments) {\n    documentType = \"SalesInvoice\";\n  } else {\n    documentType = \"SalesOrder\";\n  }\n\n  var company = Shops.findOne(Reaction.getShopId());\n\n  var companyShipping = _filter(company.addressBook, function (o) {\n    return o.isShippingDefault;\n  })[0];\n\n  var currencyCode = company.currency;\n  var orderShipping = order.orderShipping();\n  var orderDate = moment(order.createdAt).format();\n  var lineItems = order.items.map(function (item) {\n    if (item.variants.taxable) {\n      return {\n        number: item._id,\n        itemCode: item.productId,\n        quantity: item.quantity,\n        amount: item.variants.price * item.quantity,\n        description: item.taxDescription || item.title,\n        taxCode: item.variants.taxCode\n      };\n    }\n  });\n\n  if (orderShipping) {\n    lineItems.push({\n      number: \"shipping\",\n      itemCode: \"shipping\",\n      quantity: 1,\n      amount: orderShipping,\n      description: \"Shipping\",\n      taxCode: shippingTaxCode\n    });\n  }\n\n  var salesInvoice = {\n    companyCode: companyCode,\n    type: documentType,\n    commit: commitDocuments,\n    code: order._id,\n    customerCode: order.userId,\n    date: orderDate,\n    currencyCode: currencyCode,\n    addresses: {\n      ShipFrom: {\n        line1: companyShipping.address1,\n        line2: companyShipping.address2,\n        city: companyShipping.city,\n        region: companyShipping.region,\n        country: companyShipping.country,\n        postalCode: companyShipping.postal\n      },\n      ShipTo: {\n        line1: order.shipping[0].address.address1,\n        line2: order.shipping[0].address.address2 || \"\",\n        city: order.shipping[0].address.city,\n        region: order.shipping[0].address.region,\n        country: order.shipping[0].address.country || \"US\"\n      }\n    },\n    lines: lineItems\n  };\n\n  if (order.discount) {\n    salesInvoice.discount = accounting.toFixed(order.discount, 2);\n\n    for (var _iterator5 = salesInvoice.lines, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n      var _ref5;\n\n      if (_isArray5) {\n        if (_i5 >= _iterator5.length) break;\n        _ref5 = _iterator5[_i5++];\n      } else {\n        _i5 = _iterator5.next();\n        if (_i5.done) break;\n        _ref5 = _i5.value;\n      }\n\n      var line = _ref5;\n\n      if (line.itemCode !== \"shipping\") {\n        line.discounted = true;\n      }\n    }\n  }\n\n  return salesInvoice;\n} /**\n   * @summary Submit order for tax reporting\n   * @param {Order} order Order object for submission\n   * @param {Function} callback callback when using async version\n   * @returns {Object} result Result of SalesInvoice call\n   */\n\ntaxCalc.recordOrder = function (order, callback) {\n  check(callback, Function); // unlike the other functions, we expect this to always be called asynchronously\n\n  if (order && order.shipping && order.shipping[0].address) {\n    var salesOrder = Object.assign({}, orderToSalesInvoice(order), getTaxSettings(order.userId));\n    var baseUrl = getUrl();\n    var requestUrl = baseUrl + \"transactions/create\";\n\n    try {\n      var _result4 = avaPost(requestUrl, {\n        data: salesOrder\n      });\n\n      return callback(_result4.data);\n    } catch (error) {\n      Logger.error(\"Encountered error while recording order to Avalara\");\n      Logger.error(error);\n    }\n  }\n}; /**\n    * @summary Report refund to Avalara\n    * @param {Order} order - The original order the refund was against\n    * @param {Number} refundAmount - Amount to be refunded\n    * @param {Function} callback - Callback\n    * @returns {Object} Results from transaction call\n    */\n\ntaxCalc.reportRefund = function (order, refundAmount, callback) {\n  check(refundAmount, Number);\n  check(callback, Function);\n  var pkgData = taxCalc.getPackageData();\n  var companyCode = pkgData.settings.avalara.companyCode;\n  var company = Shops.findOne(Reaction.getShopId());\n\n  var companyShipping = _filter(company.addressBook, function (o) {\n    return o.isShippingDefault;\n  })[0];\n\n  var currencyCode = company.currency;\n  var baseUrl = getUrl();\n  var requestUrl = baseUrl + \"transactions/create\";\n  var returnAmount = refundAmount * -1;\n  var orderDate = moment(order.createdAt).format();\n  var refundDate = moment().format();\n  var refundReference = order.cartId + \":\" + refundDate;\n  var lineItems = {\n    number: \"01\",\n    quantity: 1,\n    amount: returnAmount,\n    description: \"refund\"\n  };\n  var returnInvoice = {\n    companyCode: companyCode,\n    type: \"ReturnInvoice\",\n    code: refundReference,\n    commit: true,\n    customerCode: order._id,\n    taxDate: orderDate,\n    date: refundDate,\n    currencyCode: currencyCode,\n    addresses: {\n      ShipFrom: {\n        line1: companyShipping.address1,\n        line2: companyShipping.address2,\n        city: companyShipping.city,\n        region: companyShipping.region,\n        country: companyShipping.country,\n        postalCode: companyShipping.postal\n      },\n      ShipTo: {\n        line1: order.shipping[0].address.address1,\n        line2: order.shipping[0].address.address2 || \"\",\n        city: order.shipping[0].address.city,\n        region: order.shipping[0].address.region,\n        country: order.shipping[0].address.country || \"US\"\n      }\n    },\n    lines: [lineItems]\n  };\n  var result = avaPost(requestUrl, {\n    data: returnInvoice\n  });\n  return callback(result.data);\n};\n\nmodule.export(\"default\", exports.default = taxCalc);\nMeteor.methods({\n  \"avalara/addressValidation\": taxCalc.validateAddress,\n  \"avalara/getTaxCodes\": taxCalc.getTaxCodes,\n  \"avalara/testCredentials\": taxCalc.testCredentials,\n  \"avalara/getEntityCodes\": taxCalc.getEntityCodes\n});","map":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/server/methods/taxCalc.js"],"names":["accounting","os","moment","Meteor","HTTP","check","Packages","Shops","Accounts","TaxCodes","Reaction","Logger","Avalogger","countriesWithRegions","requiredFields","taxCalc","getPackageData","pkgData","findOne","name","shopId","getShopId","enabled","getUrl","packageData","productionMode","settings","avalara","baseUrl","checkConfiguration","isValid","field","msg","warn","error","Error","getAuthData","username","password","auth","getTaxSettings","userId","_id","avaGet","requestUrl","options","testCredentials","logObject","undefined","appVersion","getAppVersion","meteorVersion","release","machineName","hostname","avaClient","headers","timeout","requestTimeout","allOptions","Object","assign","enableLogging","request","result","get","duration","data","info","avaPost","post","getEntityCodes","code","calcTaxable","cart","subTotal","item","items","variants","taxable","price","quantity","validateAddress","address","countryList","addressValidation","country","validatedAddress","errors","messages","addressToValidate","line1","address1","city","postalCode","postal","region","line2","address2","content","JSON","parse","message","push","summary","details","validatedAddresses","length","resultAddress","addresss2","credentials","companyCode","statusCode","find","count","call","res","Array","isArray","forEach","err","getTaxCodes","cartToSalesOrder","shippingTaxCode","company","companyShipping","addressBook","o","isShippingDefault","currencyCode","currency","cartShipping","cartDate","createdAt","format","lineItems","map","number","itemCode","productId","amount","description","taxDescription","title","taxCode","salesOrder","type","customerCode","date","addresses","ShipFrom","ShipTo","shipping","lines","discount","toFixed","line","discounted","estimateCart","callback","Schemas","Cart","Function","orderToSalesInvoice","order","documentType","commitDocuments","orderShipping","orderDate","salesInvoice","commit","recordOrder","reportRefund","refundAmount","Number","returnAmount","refundDate","refundReference","cartId","returnInvoice","taxDate","methods"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAO,AAAgB,AACvB,AAAO,AAAQ,AACf,AAAO,AAAY,AACnB,AAAS,AAAc,AACvB,AAAS,AAAY,AACrB,AAAS,AAAa,AACtB,AAAS,AAAU,AAAO,AAAgB,AAC1C,AAAS,AAAgB;AACzB,IAAA,AAAS,AAAU,wBAAc,YAAjC;AACA,IAAA,AAAO,AAAe,kBAAtB;AAEA,IAAM,UAAN,AAA6B,AAAC,AAAM,AAAM,AAAM,AAChD,AAAM,AAAiB,AAAC,AAAY,AAAY,AAAc,AAAe;;AAC7E,AAAM,QAAN,AAAgB;;AAER,UAAR,AAAyB,AAAY,AACnC;AAAM,YAAU,SAAA,AAAS,AAAQ,AAC/B;AAAM,aADyB,AAE/B,AAAQ,AAAS,AACjB;AAJJ;SACmC,AAGtB;AAHX,AAAgB,AAKhB,AAAO,G,AANT,AAOC,AAED,AAEA;;;;;;AAIA,SAAA,AAAS;MACD,cAAc,QAApB,AAAoB,AAAQ,AAC5B,AAAM;AAFU,AAChB,4CACQ;MAAF;;MAAqB,CAAY,gBAAvC,AAA2B,AAAqB,AAChD;AAAA,AAAI;SACJ;AAAI,AAAC,cAAL,AAAqB,AACnB;AAAA,AAAU,AACX;;AAFD,SAEO,AACL;AAAA,AAAU,AACX,EACM,AACR,A,AADC,AAGF;;;;;;;;;;uDAKA;;AAAS,uBAAT,AAA4B;AAA5B,AAA0C,AAAQ,AAAkB,AAClE;;;;;;;;;;;;;AAAI,SAAU,SAAd;gEACA;AAAM,kBAAN,AAAiB,AAAM,AAAa,AAAoB;;eACxD;;AAAK,AAAM,gBAAX,AAAoB,AAAgB,AAClC;AAAA,AAAI,AAAC,AAAS,AAAQ,AACpB;AAAA,AAAM,AAAO,AAA6C,AAAM,AAChE;;OAAO,SAAP,AAAY,AACZ;cAAU,OAAV,AAAgB,MAAE;AAAF,AAAS;;AAAzB,SACA;AAAA,AAAU,AACX,EACF,AACD,AAAI,AAAC,AAAS,AACZ,AAAM,AAAI,AAAO,AAAM,AACxB;;;;;;;AACD;;MAAA,AAAO;;;A,AACR,AAED;;;;;AAKA,AAAS,AAAY,AAAc,AAAQ,AAAkB,EAC3D,AAAI,AAAmB,AAAc,AACnC,AAAM,AAAW,AAAM,AAAa,AAAoB,AACxD,AAAM,AAAE;;;;;;AAAU,gCAAZ;AAAyB;;GAA/B,GACA;AAAA,AAAM,AAAQ,AAAE,AAAS,AAAG,AAAS,AACrC,AAAO,EACR,AACF,A,AAED;;;;;;;;AAKA,SAAS,OAAT,AAAwB;AACtB,MADF,AAAgC;;MACvB,AAAM,YAAA,AAAS,AAAQ,AAAE;MAAK,kBAArC,AAAO,AAAM,AAAiB,AAAkB,A,AACjD;;AAED;;;;;;;;kDAOA;;MAAA,AAAS,AAAO,iBAAhB,AAA4B,AAAU,AAAI,AAAkB,AAAM,AAChE;MAAA,AAAM,AAAY,mFAClB;MAAM;;AAEN,AAAI,AAAiB,0BACnB;AAAI,AAAC,uBAAL,AAAK,AAAmB,AAAU,AAChC,AAAO,AACR,AACF;AAJD;AAFA,AAAgB,AAAQ;;;yDAQxB;;MAAM,oBAAsB,WAA5B,AAAmB;;GAAA;;8CACnB;AAAM,wBAAN,AAAsB,AAAQ,AAAO,AAAS,AAAK;AACnD,AAAM,AAAc,AAAG,AACvB;;MAAA,AAAM,AAAa,AAAY,AAAW,AAAiB,AAAc,AAAI,AAAY,AACzF;AAAM,kBAAU,gBACd;WAAS,OACP;aADO,AACa,AACpB;WAAiB,gEAFV;iBADX,AAAgB;sBAMhB;AAAM,cAAO,MAAb,AAAa,AAAQ,AAAQ,AAC7B;AAAM,AAAU,AAAE,AAAS,AAAQ,AAAW,AAAQ,AAAS,AAAQ;;AAAvE,8CACA;AAAM,cAAa,WAAO,KAAP,AAAc,QAAd,AAAkB,AAAS,AAAS,AAAE;8BAAtC,AAAoC;AAAvD,AAAmB,AAA8C;AACjE,AAAI,AAAQ,AAAS,AAAQ,AAAe,AAC1C;;SAAA,AAAU,AAAU,AACrB;AAED,AAAI,EAAJ,AACE,AAAS,AAAK,AAAI,AAAY,AAC/B,AAAC,AAAO,AAAO,AACd,AAAS,AACT,AAAO,AAAO,AAAuD,AAAW,AAChF,AAAO,AAAM,AACb,AAAU,AAAQ;;;;;;;AAClB,SAAU,QAAV,AAAgB,YAAhB,SACD;;wBAED;AAAI,MAAQ,aAAR,AAAiB,SAArB,AAAI,AAAyB,AAAe,AAC1C;;MAAA,AAAU,gBAAW,AAAM,OAAN,AAAc,qBAAnC,AAAqB,AACrB;;MAAA,AAAU,cAAS,GAAnB,AAA0B,AAC1B;MAAA,AAAU,AAAK,mFAChB;;;AAED,AAAO,0BAIT,A,AAHC;;AADC;;;;;;;;;;8CAUF;AAAS,cAAT,AAAiB,UAAjB,AAA6B,AAAS,AACpC;AAAA,AAAM,AAAY,AAClB,AAAM,AAAU,AAAQ,AACxB;;MAAA,AAAM,AAAa,AAAS,AAC5B;;MAAA,AAAM,AAAgB,AAAQ,AAAO,AAAS,AAAK;mCACnD;IAAM,cAAN,AAAoB,AAAG,AACvB;AAAM,WAAa,AAAY,AAAW,kDAA1C,AAA2D,AAAc,AAAI,AAAY,AACzF;AAAM,iBAAU,AACd;AAAS,sBACP,OADO,AACa,AACpB;;oBAFO,AAEU;aAHL;AAAhB,AAMA,AAAM,AAAO,AAAE;;MAAM,wCAArB,AAAa;sCACb;AAAM,cAAU,gBAAE;AAAS,mBAAX,AAAW,AAAQ,AAAS,AAAQ;AAApD,AACA,AAAM,AAAa,AAAO,AAAO,AAAI,AAAS,AAAS,AAAM;;SAC7D;AAAA,AAAI,AAAQ,AAAS,AAAQ,AAAe,AAC1C,AAAU,AAAU,EACrB,AAED,AAAI;;;;;AAEJ,AAAI,qCACF;MAAS,AAAK,AAAK,sBADrB,AACE,AAAS,AAAsB,AAChC;AAAC,QAAA,AAAO,AAAO,UACd;QAAA,AAAO,AAAO,aAAd,AAAuD,AAAW,AAClE;;QAAA,AAAO,AAAM,UAAb,OAFc,AAGd,AAAU,AAAQ,AAClB;;iDACA;YAAU,IAAV,AAAgB,aAAhB,AACA;AAAA,AAAS,AACV;;uCAED;AAAA,AAAI,AAAQ,AAAS,AAAQ,AAAe,AAC1C;;YAAU,OAAV,MAAqB,AAAM,AAAQ,qBAAnC,AAAqB,AACrB;AAAA,AAAU,AAAS,AAAO,AAC1B,AAAU,AAAK,GAChB;AAED,AAAO,AACR,A,AAED;;;;;;sCAIA;MAAQ,WAAR,AAAyB,AAAY,AACnC;;AAAI,6BAAJ,AAA0B;AACxB;;;;;;;;;;;;;QAAM,KAAU,SAAhB,SACA;AAAM,kBAAc,KAAE,SAAQ,aAA9B,AACA;AAAA,AAAM,AAAS,AAAO;AAEtB;;AAAI,SAAJ,AAAc,AAAO,AAAS,AAAa,AACzC;AAAA,AAAM,AAAI,AAAO,AAAM,AACxB,GAED,AAAO,AAAM,AAAQ,AAAc,AACpC,AACD,AAAM,AAAI,AAAO,AAAM,AAAqB;;;;;;A,AAZ9C,AAaC,AAED;;;AAEA;;gDAKA;AAAA,AAAQ,AAAc,AAAU,AAAM,AACpC;AAAA,AAAI,AAAW;;;cACf;;AAAA,AAAK,AAAM,AAAQ,AAAK,AAAO,AAC7B,AAAI,AAAK,AAAS,AAAS,AACzB;;MAAA,AAAa,AAAK,AAAS,AAAQ,AAAK,AACzC;6BACF;;;;AACM,WAAP,QAPF,AAQC,AAED,A;;;;AAHE;;wDAQF;AAAA,AAAQ,AAAkB,AAAU,AAAS,AAC3C;AAAA,AAAM,AAAS,sBAAf,iBAEA;AAAA,AAAM,AAAc,AAAQ,AAC5B;;MAAM,eAAE;sCAAF;AAAN,AAAwB,AAAY,AAAS;;gBAE7C;AAAI,AAAC,MAAW,aAAhB,AAAK,AAAwB,AAAQ,AAAU,AAC7C;;UACA;;MACA,AAAO,AAAE;;MAAF,AAAoB,AAAS;cAAQ,kBAArC;IAAP,cACD;;AAED;;MAAA,AAAI,6BACJ;AAAI,uBAbuC,AAa3C,AAAuB,AAAI;AAC3B;;MAAM,UAAN,AAAe,AACf;AAAM,0BAAqB;AACzB;;;;;;;;;;;;AAAO;AADkB;yBAEzB;AADe;AADU,AAEnB,AAAQ,AACd;AAHyB,AAGb,AAAQ,AACpB,AAAS,AAAQ;;AAJnB;uDAOA;AAAI,AAAW;8BAEb;YAAkB,cAAlB,AAA2B,AAAQ,AACpC;;4BACD;AAAI,AAAQ,eAAZ,AAAmB,cACjB,AAAkB,AAAQ,AAAQ,AACnC;AAND,AAAI,AAAiC,AAAQ,AAAU,AACrD;;;iDAMF;AAAA,AAAM,AAAU,AAChB;AAAA,AAAM,AAAc,AAAE,AAAQ,AAC9B;;AAAM;AAAS,AAAQ;AAAR,AAAoB,AAAE;;AAArC,AAAe,AAAoB,AAAQ,GAC3C,AAAI,AAEJ,AAAI,AACF,AAAU,AAAK,AAAM,AAAO,AAC7B,AAAC,AAAO,AAAO,AACd,AAAU,AAAO;;;;;;;AAClB;;qBACD,AAAI,AAAW,AAAQ,AAAU,AAC/B;MAAW,UAAX,AAAmB,AACpB;;wDACD;AAAI,MAAJ,AAAc;;;KACZ,AAAK,AAAM,AAAW,AAAU,AAC9B;;MAAO,UAAP,AAAY,6BAAE;cAAS,OAAQ,MAAnB,AAA4B;AAAxC,AAAY,AAAqC,AAAQ,AAC1D;;iCACF;;+DAED,AAAI;YAAU,OAAd,AAAI,AAAiB,AAAQ,AAAO,AAAK,AAAmB,AAAW,AAAG,AACxE;AAAM,sBAAgB,wEAAA,AAAO,AAAK,UAAlC,AAAsB,AAA+B,AACrD;mBAAmB,oCACjB;AAAU,iBADO,AACO,AACxB;AAAM,wBAFW,AAEG;AACpB;;AAHiB,AAGT,AAAc,AACtB;AAAQ,0BAAc,MAJL,cAKjB;cAAS,QAAc,gBALzB,AAAmB;;uBAOnB,AAAI,AAAO;AAAP,AAAY,0BAAZ,AAAoB,OAAxB,AAA+B,8CAC7B;AAAA,AAAiB,AAAY,AAAc,AAC5C;AACF;;AACD;AAAO,AAAE;AAAF,AAAoB;AA7D7B,AA6DE,AAAO,AACR;;A,AAED;;;;;;;;AAMA,QAAQ,cAAR,AAA0B,YAAA,AAAU,AAAa,AAAkB,AAAO,AACxE;MAAA,AAAM,AAAa,sBAEnB;AAAM,QAAU,UAAhB,AACA;AAAM,QAAQ,AAAE,aAAhB,AAA4B,AAAS,AAAG,AAAY,AAAS,AAC7D;;AAAM,mBAAc,AAAE,OAAtB,AAA8B,AAAY,AAAY,AAAY,AAClE;;AAAM,gBAAS,AAAO,UAAP,AAAmB,cAAE;AAAF,AAAQ;;YAAS,aAAY,qBAA7B;AAAlC,AAAe,AAAkE,GAEjF,AAAI,AAAU,AAAO,AAAS,AAAa,AACzC,AAAM,AAAI,AAAO,AAAM,AACxB,AAED,AAAI,AAAO,AAAe,AAAK;;;;;;AAC7B,AAAI,SAAA,AAAS,AAAK,iBAAd,AAAkB;MACpB,AAAO,UAAK,QAAZ,AAAmC,AAAC,AAAO,AAAQ,AACjD;AAFJ,AAAkC,AAAG,AACnC,+CAEI;MADF,AAAI,AAAO;;MACL,UAAO,MAAP,AAAiB,QAArB,SAA+B,AAC7B;;MAAA,AAAO,AAAK,0BAAZ,QAAA,AAAgC,AAAY,uBAA5C;;KACD;;MAFD,AAEO,uBACL;MAAO,eAAP,AAAY,KAAZ,AAAgC,AAAY,AAAE;wCAAF;MAA5C,YACD;;kBACF;AAND,AAMO,qBAAW,oBAAA,AAAM,AAAQ,MAAzB,AAAW,AAAoB,AACpC;UAAI,KAAJ,AAAY,SAAU,SAAV,AAAgB,AAC1B;;kBACE,AAAI,KAAK,AACP;oBAAM,KAAN,AAAM,AAAI,AAAO,AAAM,AAAwC,AAChE;yBACF;AAJD,6CAKD;AAND,mDAOD;iCAfH,AAgBC,AACF;AARO,AAAO,AAAK,AAAwB,AAAS,AAAa,AAAM,AAAiB,AAAC,AAAQ,AACxF;AAQX;KAXgB;;sBAajB;AAAO;gBAAP,AAAO,AAAc,AAAO;kBAC7B,AAED,A,AArCA;;;;iBAyCA;AAPW;AAOX,AAAQ,AAAc,AAAY,AAChC;AAAA,AAAI,AAAsB,AACxB,AAAM,AAAU,AAChB;;MAAM;AACA,iBAAN,AAAe,AAAO,AACtB;UAAA,AAAO,AAAM,AAAQ,AAAc,AACpC;;UACD;AAAM,AAAI,kB,AAPZ,AAOE,AAAM,AAAW,AAAM,AAAqB,AAC7C,AAED;;;;;;gCAKA;AAAS,iBAAT,AAA0B,AAAM,gBAC9B;AAAM,AAAU,oBAAQ,gBAAxB,AAAgB,AAChB,AAAM,AAAE;;;wCAAF,AAAmC;AAAQ,oBAAR,AAAiB,SAA1D,uBACA;AAAM,cAAU,KAAM,YAAN,AAAc,QAA9B,AAAgB,AAAc,AAAS;yCACvC;AAAM,sBAAkB,YAAS,QAAQ,WAAzC,AAAwB,AAA8B,AAAC,AAAM,AAAE,AAAmB,AAClF,AAAM,AAAe,AAAQ,AAC7B;AAJM,AAAe;;AAIf,WAAN,AAAqB,AAAK,AAC1B,AAAM,AAAW,AAAO,AAAK,AAAW,AACxC,AAAI,AAAY;AApBd,AAAoB,AAAE,AAAQ,AAC9B,KAoBF;AAAA,AAAI,AAAK,AAAO,AACd;;WAAY,AAAK,UAAL,AAAW,AAAI,AAAC,AAAS,AACnC;AAAI,eAAA,AAAK,AAAS,WAAlB,AAA2B,kCACzB;;;AACE;;;;;;;;;;;UADK;;eAAA,AACG,AAAK,yBACb;aAAU,AAAK,aAFV,AAGL;AAHK,AAGK,AAAK,AACf;AAJK,AAIG,AAAK,AAAS,AAAQ,AAAK,AACnC;AALK,AAKQ,AAAK,AAAkB,AAAK,AACzC;;SANK,AAMI,AAAK,AAAS;AANzB,AAQD,EAVH,AAAY,AAWX,AACD,AAAI,AAAc,AAChB,AAAU,AAAK,AACb,AAAQ,AACR,AAAU;;;;;;;AACV,QAHa,AAGH,yCACV;cAAQ,SAJK,QAKb;kBALa,AAKA,AACb,AAAS;;MANX,yDAQD;mFACF;;qBAED;;AAAM;YACJ;KADiB;;WACJ,kBADI,AAEjB;AAFiB,AAEX,AACN;AAHiB,AAGH,AAAK,AACnB,AAAM,GAJW,AAKjB,AAAc,AACd,AAAW,AACT,AAAU,AACR,AAAO,AAAgB,AACvB,AAAO,AAAgB;;;;;;AACvB,SAAM,oBAHE,AAGc;MAHd,AAIA,AAAgB,AACxB;MAAS,kBALD,AAKiB,AACzB;AAFA,gDAJQ;MAMI;MAAgB;;;MAPrB,iBAST;AAAQ,mBACN;SADM,AACC,AAAK,AAAS,AAAG,AAAQ,AAChC;AAAO,mBAFD,AAEC,AAAK,AAAS,AAAG,AAAQ,AAAY,AAC5C;AAHM,AAGA,AAAK,AAAS,AAAG,AAAQ,AAC/B;;MAAQ,UAAK,MAAL,AAAc,QAAd,AAAiB,SAJnB,AAI2B,AACjC;;MAAS,AAAK,0BAAL,AAAyB,QAAzB,AAAoC;;GAApC,AAAc,AAAG,EALpB;;6BATC;AANM,4BAuBjB;MAAO,oCAvBU;AAlCW,AAkC9B,AA0BA,kDACA;;;AACS,gBAAT,KAAoB,AAClB;AAAW,uBAAX,AAAsB,AAAW,AAAQ,AAAK,AAAU;uBACxD;AAAK,AAAM,gBAAX,KAAmB,SAAW,QAA9B,AAAqC,KACnC;AAAI,AAAK,qBAAL,KAAJ,AAAsB,AAAY,uBAChC;AAAK,sBAAL,AAAkB,SACnB,AACF;AANH,AAAI;AAOH;;;qBACD;AAAO;;;;;;eAST;A,AATE,AACD,AAED;AAMA,AAAQ,AAAe,AAAU,AAAM,AAAU,AAC/C,AAAM,AAAM,AAAS,AAAQ,AAC7B;;MAAA,AAAM,AAAU;iBAEhB;AAAI,UAAJ,AAAI,AAAK,AAAS,AAAK,AAAY,AAAK,AAAS,AAAG,AAAS,AAC3D;AAAM,YAAN,AAAmB,AAAO,AAAO,AAAI,AAAiB,AAAO,AAAe,AAAK,AACjF;UAAM,MAAN,AAAgB,AAChB;AAAM,kBAAc,MAApB,AAAsB,AAAQ,AAC9B;UAAM,AAAS,AAAQ,AAAY,AAAE;AAAM,kBAAR;AAAnC,AAAe;AACR;+BATX,AAWC,AAED,A;;;;;oCAKA;AATI,AAAO,AAAS,AAAO,AACxB;AAQM;eACP,0BACA;AAAM,eAAU,MAAQ,YAAR,QAAhB,YACA;AAAM,wCAAE;AAAF,0CAAe;iBAAf,qCAAN,AAAM,AAAgC,AAAoB,AAAQ,AAAS;AAH7E,AAA6B,AAAO,AAClC,AAAI;AAVF;WAaF,AAAI,AAAiB,AACnB,AAAe,AAChB;AAtBD;;AAoBA,MAEO,gBACL;iBAAe,WAAf,mCACD;;;;;;;;;;;;;;;;wCACD;AAAM,aAAU,AAAM,aAAtB,AAAgB,AAAc,AAAS;AACvC;AAAA,AAAM,AAAkB,AAAS,AAAQ,AAAa,AAAC,AAAM,AAAE,AAAmB;AAClF;;AAAM,SAAN,AAAqB,AAAQ,AAC7B;AAAA,AAAM,AAAgB,AAAM,AAC5B,AAAM,AAAY,AAAO,AAAM,AAAW,EAC1C,AAAM,AAAY,AAAM,AAAM,AAAI,AAAC,AAAS,AAC1C,AAAI,AAAK,AAAS,AAAS,AACzB,AAAO,AACL,AAAQ,AAAK,AACb,AAAU,AAAK,AACf,AAAU,AAAK;;;;;;;AACf,QAAQ,AAAK,cAAL,AAAc,UAAd,AAAsB,OAAK;kBAJ9B,AAKQ,AAAK,AAAkB,AAAK,AACzC,UANK,AAKL,CALK,AAMI,AAAK,AAAS;;MANzB,sDAQD;wFAVe,AAWjB;AAXD;qBAYA;;AAAI,QAAJ,AAAmB,AACjB;UAAA,AAAU,AAAK;cACb;;;aAAQ,SADK,SAEb;aAAU,OAFG,AAGb;aAHa,AAGH,MACV;aAAQ,MAJK,AAKb;AALa,AAKA,AACb;AANa,AAMJ;AANX,AAQD,GAED,AAAM,AAAe,AACnB,AAAa,AACb,AAAM,AACN,AAAQ,AACR,AAAM,AAAM,AACZ,AAAc,AAAM;;;;;;;;AACpB,QANmB,AAMb;QACQ,cAPK,AAQnB;QAAW,UACT;MAAU,kBACR;AAHJ,MAGW,cAAgB,QADf,SAER;MAAO,gBAAgB,QAFf,SAGR;;MAAM;;GAHE,AAGc,EACtB;;MAAQ,uBAJA,AAIgB,AACxB;MAAS,UALD,AAKiB,AACzB;MAAY,aANJ,AAMoB;AAPrB,qCAST;MAAQ,oCACN;MAAO,aAAA,AAAM,SADP,AACC,AAAe,AAAG,AAAQ,AACjC;MAAO,AAAM,kBAAN,AAAe,AAAG,MAAlB,AAA0B,eAF3B,AAEC,AAAsC,AAC7C;MAAM,AAAM;YAHN,AAIE,AAAM,AAAS,AAAG,AAAQ,AAClC;cALM,AAKG,AAAM,AAAS,AAAG,AAAQ,AAAW;YAdvC;AARQ,iBAAA,AAyBnB,AAAO;AARG,AAGA,AAAe,AAAG,AAAQ,AAChC;AArBN;iBA4BA;AAAI,UAAJ,AAAU,AAAW,AACnB;UAAA,AAAa,AAAW,AAAW,AAAQ,AAAM,AAAU;YAC3D;AAAK,AAAM,kBAAX,AAAmB,MAAnB,AAAgC,AAAO,AACrC;AAAI,aAAJ,AAAI,AAAK,AAAa,AAAY,AAChC;UAAA,AAAK,AAAa,AACnB;kBACF;;;+BAEH;AAAO,eAAP,gBACD,A,AAED;;;;;;;yCAMA;AAAQ,eAAR,MAAsB,SAAU,GAAV,AAAiB,QAAjB,AAA2B,YAC/C;AAAM,cAAN,AAAgB,MAD+B,AAC/C,SACA;0CACA,AAAI;AAAS,iBAAM,MAAf,SAA2B,GAAM,QAAN,AAAe,AAAG,WAAjD,AAA0D,AACxD,AAAM,AAAa,AAAO,AAAO,AAAI,AAAoB,AAAQ,AAAe,AAAM,AACtF,AAAM,AAAU,AAChB;;AAhBD;AAgBO,YAAN,AAAoB,AAAE,AAAQ,AAC9B,AAAI,AACF,AAAM,AAAS,AAAQ,AAAY,AAAE;;MAAM;UAAR;;AAAnC,AAAe,yBACf;AAFF,AAEE,AAAO,AAAS,AAAO,AACxB,AAAC,AAAO,AAAO,AACd,AAAO;;2CAAP,AAAa,AACb,AAAO,AAAM;AACd;uCAbL,AAeC;AAED,A;;oCAOA,AAAQ,AAAe,AAAU,AAAO,AAAc,AAAU,AAC9D,AAAM,AAAc,AACpB,AAAM,AAAU,AAChB,AAAM,AAAU,AAAQ,AACxB,AAAM,AAAE,AAAgB,AAAQ,AAAS,AACzC,AAAM,AAAU,AAAM,AAAQ,AAAS,AACvC,AAAM,AAAkB,AAAS,AAAQ,AAAa,AAAC,AAAM,AAAE,AAAmB,AAClF,AAAM,AAAe,AAAQ,AAC7B,AAAM,AAAU,AAChB,AAAM,AAAc,AAAE,AAAQ,AAC9B,AAAM,AAAe,AAAe,AAAC,AACrC,AAAM,AAAY,AAAO,AAAM,AAAW,AAC1C,AAAM,AAAa,AAAS,AAC5B,AAAM,AAAmB,AAAE,AAAM,AAAO,AAAG,AAAW,AACtD,AAAO,AAAY,AACjB,AAAQ,AACR,AAAU,AACV,AAAQ,AACR,AAAa,AAEf,AAAM,AAAgB,AACpB,AAAa,AACb,AAAM,AACN,AAAM,AACN,AAAQ,AACR,AAAc,AAAM,AACpB,AAAS,AACT,AAAM,AACN,AAAc,AACd,AAAW,AACT,AAAU,AACR,AAAO,AAAgB,AACvB,AAAO,AAAgB,AACvB,AAAM,AAAgB,AACtB,AAAQ,AAAgB,AACxB,AAAS,AAAgB,AACzB,AAAY,AAAgB,AAE9B,AAAQ,AACN,AAAO,AAAM,AAAS,AAAG,AAAQ,AACjC,AAAO,AAAM,AAAS,AAAG,AAAQ,AAAY,AAC7C,AAAM,AAAM,AAAS,AAAG,AAAQ,AAChC,AAAQ,AAAM,AAAS,AAAG,AAAQ,AAClC,AAAS,AAAM,AAAS,AAAG,AAAQ,AAAW,AAGlD,AAAO,AAAC,AAIV,AAAM,AAAS,AAAQ,AAAY,AAAE,AAAM,AAC3C,AAAO,AAAS,AAAO,AACxB,AAED,AAAe,AAEf,AAAO,AAAQ,AACb,AAA6B,AAAQ,AACrC,AAAuB,AAAQ,AAC/B,AAA2B,AAAQ,AACnC,AAA0B,AAAQ;AAtEjC","file":"/imports/plugins/included/taxes-avalara/server/methods/taxCalc.js.map","sourcesContent":["import _ from \"lodash\";\nimport accounting from \"accounting-js\";\nimport os from \"os\";\nimport moment from \"moment\";\nimport { Meteor } from \"meteor/meteor\";\nimport { HTTP } from \"meteor/http\";\nimport { check } from \"meteor/check\";\nimport { Packages, Shops, Accounts } from \"/lib/collections\";\nimport { TaxCodes } from \"/imports/plugins/core/taxes/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\nimport Avalogger from \"./avalogger\";\n\nconst countriesWithRegions = [\"US\", \"CA\", \"DE\", \"AU\"];\nconst requiredFields = [\"username\", \"password\", \"apiLoginId\", \"companyCode\", \"shippingTaxCode\"];\nconst taxCalc = {};\n\ntaxCalc.getPackageData = function () {\n  const pkgData = Packages.findOne({\n    name: \"taxes-avalara\",\n    shopId: Reaction.getShopId(),\n    enabled: true\n  });\n  return pkgData;\n};\n\n// Private methods\n\n/**\n * @summary Get the root URL for REST calls\n * @returns {String} Base url\n */\nfunction getUrl() {\n  const packageData = taxCalc.getPackageData();\n  const { productionMode } = packageData.settings.avalara;\n  let baseUrl;\n  if (!productionMode) {\n    baseUrl = \"https://sandbox-rest.avatax.com/api/v2/\";\n  } else {\n    baseUrl = \"https://rest.avatax.com\";\n  }\n  return baseUrl;\n}\n\n/**\n * @summary Verify that we have all required configuration data before attempting to use the API\n * @param {Object} packageData - Package data retrieved from the database\n * @returns {boolean} - isValid Is the current configuration valid\n */\nfunction checkConfiguration(packageData = taxCalc.getPackageData()) {\n  let isValid = true;\n  const settings = _.get(packageData, \"settings.avalara\", {});\n  for (const field of requiredFields) {\n    if (!settings[field]) {\n      const msg = `The Avalara package cannot function unless ${field} is configured`;\n      Logger.warn(msg);\n      Avalogger.error({ error: msg });\n      isValid = false;\n    }\n  }\n  if (!isValid) {\n    throw new Meteor.Error(\"The Avalara package is not configured correctly. Cannot continue\");\n  }\n  return isValid;\n}\n\n/**\n * @summary Get the auth info to authenticate to REST API\n * @param {Object} packageData - Optionally pass in packageData if we already have it\n * @returns {String} Username/Password string\n */\nfunction getAuthData(packageData = taxCalc.getPackageData()) {\n  if (checkConfiguration(packageData)) {\n    const settings = _.get(packageData, \"settings.avalara\", {});\n    const { username, password } = settings;\n    const auth = `${username}:${password}`;\n    return auth;\n  }\n}\n\n/**\n * @summary Get exempt tax settings to pass to REST API\n * @param {String} userId id of user to find settings\n * @returns {Object} containing exemptCode and customerUsageType\n */\nfunction getTaxSettings(userId) {\n  return _.get(Accounts.findOne({ _id: userId }), \"taxSettings\");\n}\n\n/**\n * @summary function to get HTTP data and pass in extra Avalara-specific headers\n * @param {String} requestUrl - The URL to make the request to\n * @param {Object} options - An object of other options\n * @param {Boolean} testCredentials - determines skipping of configuration check\n * @returns {Object} Response from call\n */\nfunction avaGet(requestUrl, options = {}, testCredentials = true) {\n  const logObject = {};\n  const pkgData = taxCalc.getPackageData();\n\n  if (testCredentials) {\n    if (!checkConfiguration(pkgData)) {\n      return undefined;\n    }\n  }\n\n  const appVersion = Reaction.getAppVersion();\n  const meteorVersion = _.split(Meteor.release, \"@\")[1];\n  const machineName = os.hostname();\n  const avaClient = `Reaction; ${appVersion}; Meteor HTTP; ${meteorVersion}; ${machineName}`;\n  const headers = {\n    headers: {\n      \"X-Avalara-Client\": avaClient,\n      \"X-Avalara-UID\": \"a0o33000004K8g3\"\n    }\n  };\n  const auth = options.auth || getAuthData();\n  const timeout = { timeout: options.timeout || pkgData.settings.avalara.requestTimeout };\n  const allOptions = Object.assign({}, options, headers, { auth }, timeout);\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.request = allOptions;\n  }\n\n  try {\n    result = HTTP.get(requestUrl, allOptions);\n  } catch (error) {\n    result = error;\n    Logger.error(`Encountered error while calling Avalara API endpoint ${requestUrl}`);\n    Logger.error(error);\n    logObject.error = error;\n    Avalogger.error(logObject);\n  }\n\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.duration = _.get(result, \"headers.serverDuration\");\n    logObject.result = result.data;\n    Avalogger.info(logObject);\n  }\n\n  return result;\n}\n\n\n/**\n * @summary to POST HTTP data and pass in extra Avalara-specific headers\n * @param {String} requestUrl - The URL to make the request to\n * @param {Object} options - An object of others options, usually data\n * @returns {Object} Response from call\n */\nfunction avaPost(requestUrl, options) {\n  const logObject = {};\n  const pkgData = taxCalc.getPackageData();\n  const appVersion = Reaction.getAppVersion();\n  const meteorVersion = _.split(Meteor.release, \"@\")[1];\n  const machineName = os.hostname();\n  const avaClient = `Reaction; ${appVersion}; Meteor HTTP; ${meteorVersion}; ${machineName}`;\n  const headers = {\n    headers: {\n      \"X-Avalara-Client\": avaClient,\n      \"X-Avalara-UID\": \"a0o33000004K8g3\"\n    }\n  };\n  const auth = { auth: getAuthData() };\n  const timeout = { timeout: pkgData.settings.avalara.requestTimeout };\n  const allOptions = Object.assign({}, options, headers, auth, timeout);\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.request = allOptions;\n  }\n\n  let result;\n\n  try {\n    result = HTTP.post(requestUrl, allOptions);\n  } catch (error) {\n    Logger.error(`Encountered error while calling API at ${requestUrl}`);\n    Logger.error(error);\n    logObject.error = error;\n    // whether logging is enabled or not we log out errors\n    Avalogger.error(logObject);\n    result = {};\n  }\n\n  if (pkgData.settings.avalara.enableLogging) {\n    logObject.duration = _.get(result, \"headers.serverDuration\");\n    logObject.result = result.data;\n    Avalogger.info(logObject);\n  }\n\n  return result;\n}\n\n/**\n * @summary Gets the full list of Avalara-supported entity use codes.\n * @returns {Object[]} API response\n */\ntaxCalc.getEntityCodes = function () {\n  if (checkConfiguration()) {\n    const baseUrl = getUrl();\n    const requestUrl = `${baseUrl}definitions/entityusecodes`;\n    const result = avaGet(requestUrl);\n\n    if (result && result.code === \"ETIMEDOUT\") {\n      throw new Meteor.Error(\"Request timed out while populating entity codes.\");\n    }\n\n    return _.get(result, \"data.value\", []);\n  }\n  throw new Meteor.Error(\"bad-configuration\", \"Avalara package is enabled, but is not properly configured\");\n};\n\n// API Methods\n\n/**\n * @summary Calculate the taxable subtotal for a cart\n * @param {Cart} cart - Cart to calculate subtotal for\n * @returns {Number} Taxable subtotal\n */\ntaxCalc.calcTaxable = function (cart) {\n  let subTotal = 0;\n  for (const item of cart.items) {\n    if (item.variants.taxable) {\n      subTotal += (item.variants.price * item.quantity);\n    }\n  }\n  return subTotal;\n};\n\n/**\n * @summary Validate a particular address\n * @param {Object} address Address to validate\n * @returns {Object} The validated result\n */\ntaxCalc.validateAddress = function (address) {\n  check(address, Object);\n\n  const packageData = taxCalc.getPackageData();\n  const { countryList } = packageData.settings.addressValidation;\n\n  if (!_.includes(countryList, address.country)) {\n    // if this is a country selected for validation, proceed\n    // else use current address as response\n    return { validatedAddress: address, errors: [] };\n  }\n\n  let messages;\n  let validatedAddress = \"\"; // set default as falsy value\n  const errors = [];\n  const addressToValidate  = {\n    line1: address.address1,\n    city: address.city,\n    postalCode: address.postal,\n    country: address.country\n  };\n\n  if (_.includes(countriesWithRegions, address.country)) {\n    // if this is a country with regions, pass in region\n    addressToValidate.region = address.region;\n  }\n  if (address.line2) {\n    addressToValidate.line2 = address.address2;\n  }\n  const baseUrl = getUrl();\n  const requestUrl = `${baseUrl}addresses/resolve`;\n  const result = avaPost(requestUrl, { data: addressToValidate });\n  let content;\n\n  try {\n    content = JSON.parse(result.content);\n  } catch (error) {\n    content = result.content;\n  }\n  if (content && content.messages) {\n    messages = content.messages;\n  }\n  if (messages) {\n    for (const message of messages) {\n      errors.push({ summary: message.summary, details: message.details });\n    }\n  }\n\n  if (result && result.data && result.data.validatedAddresses.length !== 0) {\n    const resultAddress = result.data.validatedAddresses[0];\n    validatedAddress = {\n      address1: resultAddress.line1,\n      city: resultAddress.city,\n      region: resultAddress.region,\n      postal: resultAddress.postalCode,\n      country: resultAddress.country\n    };\n    if (result.data.address.line2) {\n      validatedAddress.addresss2 = resultAddress.line2;\n    }\n  }\n  return { validatedAddress, errors };\n};\n\n/**\n * @summary Tests supplied Avalara credentials by calling company endpoint\n * @param {Object} credentials callback Callback function for asynchronous execution\n * @param {Boolean} testCredentials To be set as false so avaGet skips config check\n * @returns {Object} Object containing \"statusCode\" on success, empty response on error\n */\ntaxCalc.testCredentials = function (credentials, testCredentials = false) {\n  check(credentials, Object);\n\n  const baseUrl = getUrl();\n  const auth = `${credentials.username}:${credentials.password}`;\n  const requestUrl = `${baseUrl}companies/${credentials.companyCode}/transactions`;\n  const result = avaGet(requestUrl, { auth, timeout: credentials.requestTimeout }, testCredentials);\n\n  if (result && result.code === \"ETIMEDOUT\") {\n    throw new Meteor.Error(\"Request Timed out. Increase your timeout settings\");\n  }\n\n  if (result.statusCode === 200) {\n    if (TaxCodes.find({}).count() === 0) {\n      Meteor.call(\"avalara/getTaxCodes\", (error, res) => {\n        if (error) {\n          if (typeof error === \"object\") {\n            Meteor.call(\"logging/logError\", \"avalara\",  error);\n          } else {\n            Meteor.call(\"logging/logError\", \"avalara\",  { error });\n          }\n        } else if (res && Array.isArray(res)) {\n          res.forEach(function (code) {\n            Meteor.call(\"taxes/insertTaxCodes\", Reaction.getShopId(), code, \"taxes-avalara\", (err) => {\n              if (err) {\n                throw new Meteor.Error(\"Error populating TaxCodes collection\", err);\n              }\n            });\n          });\n        }\n      });\n    }\n  }\n\n  return { statusCode: result.statusCode };\n};\n\n/**\n * @summary get Avalara Tax Codes\n * @returns {Array} An array of Tax code objects\n */\ntaxCalc.getTaxCodes = function () {\n  if (checkConfiguration()) {\n    const baseUrl = getUrl();\n    const requestUrl = `${baseUrl}definitions/taxcodes`;\n    const result = avaGet(requestUrl);\n    return _.get(result, \"data.value\", []);\n  }\n  throw new Meteor.Error(\"bad-configuration\", \"Avalara Tax package is enabled but not properly configured\");\n};\n\n/**\n * @summary Translate RC cart into format for submission\n * @param {Object} cart RC cart to send for tax estimate\n * @returns {Object} SalesOrder in Avalara format\n */\nfunction cartToSalesOrder(cart) {\n  const pkgData = taxCalc.getPackageData();\n  const { companyCode, shippingTaxCode } = pkgData.settings.avalara;\n  const company = Shops.findOne(Reaction.getShopId());\n  const companyShipping = _.filter(company.addressBook, (o) => o.isShippingDefault)[0];\n  const currencyCode = company.currency;\n  const cartShipping = cart.cartShipping();\n  const cartDate = moment(cart.createdAt).format();\n  let lineItems = [];\n  if (cart.items) {\n    lineItems = cart.items.map((item) => {\n      if (item.variants.taxable) {\n        return {\n          number: item._id,\n          itemCode: item.productId,\n          quantity: item.quantity,\n          amount: item.variants.price * item.quantity,\n          description: item.taxDescription || item.title,\n          taxCode: item.variants.taxCode\n        };\n      }\n    });\n    if (cartShipping) {\n      lineItems.push({\n        number: \"shipping\",\n        itemCode: \"shipping\",\n        quantity: 1,\n        amount: cartShipping,\n        description: \"Shipping\",\n        taxCode: shippingTaxCode\n      });\n    }\n  }\n\n  const salesOrder = {\n    companyCode: companyCode,\n    type: \"SalesOrder\",\n    customerCode: cart.userId,\n    date: cartDate,\n    currencyCode: currencyCode,\n    addresses: {\n      ShipFrom: {\n        line1: companyShipping.address1,\n        line2: companyShipping.address2,\n        city: companyShipping.city,\n        region: companyShipping.region,\n        country: companyShipping.country,\n        postalCode: companyShipping.postal\n      },\n      ShipTo: {\n        line1: cart.shipping[0].address.address1,\n        line2: cart.shipping[0].address.address2 || \"\",\n        city: cart.shipping[0].address.city,\n        region: cart.shipping[0].address.region,\n        country: cart.shipping[0].address.country || \"US\"\n      }\n    },\n    lines: lineItems\n  };\n\n  // current \"coupon code\" discount are based at the cart level, and every iten has it's\n  // discounted property set to true.\n  if (cart.discount)  {\n    salesOrder.discount = accounting.toFixed(cart.discount, 2);\n    for (const line of salesOrder.lines) {\n      if (line.itemCode !== \"shipping\") {\n        line.discounted = true;\n      }\n    }\n  }\n  return salesOrder;\n}\n\n/**\n * @summary Submit cart for tax calculation\n * @param {Cart} cart Cart object for estimation\n * @param {Function} callback callback when using async version\n * @returns {Object} result Result of SalesOrder call\n */\ntaxCalc.estimateCart = function (cart, callback) {\n  check(cart, Reaction.Schemas.Cart);\n  check(callback, Function);\n\n  if (cart.items && cart.shipping && cart.shipping[0].address) {\n    const salesOrder = Object.assign({}, cartToSalesOrder(cart), getTaxSettings(cart.userId));\n    const baseUrl = getUrl();\n    const requestUrl = `${baseUrl}transactions/create`;\n    const result = avaPost(requestUrl, { data: salesOrder });\n    return callback(result.data);\n  }\n};\n\n/**\n * @summary Translate RC order into format for final submission\n * @param {Object} order RC order to send for tax reporting\n * @returns {Object} SalesOrder in Avalara format\n */\nfunction orderToSalesInvoice(order) {\n  let documentType;\n  const pkgData = taxCalc.getPackageData();\n  const { companyCode, shippingTaxCode, commitDocuments } = pkgData.settings.avalara;\n  if (commitDocuments) {\n    documentType = \"SalesInvoice\";\n  } else {\n    documentType = \"SalesOrder\";\n  }\n  const company = Shops.findOne(Reaction.getShopId());\n  const companyShipping = _.filter(company.addressBook, (o) => o.isShippingDefault)[0];\n  const currencyCode = company.currency;\n  const orderShipping = order.orderShipping();\n  const orderDate = moment(order.createdAt).format();\n  const lineItems = order.items.map((item) => {\n    if (item.variants.taxable) {\n      return {\n        number: item._id,\n        itemCode: item.productId,\n        quantity: item.quantity,\n        amount: item.variants.price * item.quantity,\n        description: item.taxDescription || item.title,\n        taxCode: item.variants.taxCode\n      };\n    }\n  });\n  if (orderShipping) {\n    lineItems.push({\n      number: \"shipping\",\n      itemCode: \"shipping\",\n      quantity: 1,\n      amount: orderShipping,\n      description: \"Shipping\",\n      taxCode: shippingTaxCode\n    });\n  }\n\n  const salesInvoice = {\n    companyCode: companyCode,\n    type: documentType,\n    commit: commitDocuments,\n    code: order._id,\n    customerCode: order.userId,\n    date: orderDate,\n    currencyCode: currencyCode,\n    addresses: {\n      ShipFrom: {\n        line1: companyShipping.address1,\n        line2: companyShipping.address2,\n        city: companyShipping.city,\n        region: companyShipping.region,\n        country: companyShipping.country,\n        postalCode: companyShipping.postal\n      },\n      ShipTo: {\n        line1: order.shipping[0].address.address1,\n        line2: order.shipping[0].address.address2 || \"\",\n        city: order.shipping[0].address.city,\n        region: order.shipping[0].address.region,\n        country: order.shipping[0].address.country || \"US\"\n      }\n    },\n    lines: lineItems\n  };\n\n  if (order.discount)  {\n    salesInvoice.discount = accounting.toFixed(order.discount, 2);\n    for (const line of salesInvoice.lines) {\n      if (line.itemCode !== \"shipping\") {\n        line.discounted = true;\n      }\n    }\n  }\n  return salesInvoice;\n}\n\n/**\n * @summary Submit order for tax reporting\n * @param {Order} order Order object for submission\n * @param {Function} callback callback when using async version\n * @returns {Object} result Result of SalesInvoice call\n */\ntaxCalc.recordOrder = function (order, callback) {\n  check(callback, Function);\n  // unlike the other functions, we expect this to always be called asynchronously\n  if (order && order.shipping && order.shipping[0].address) {\n    const salesOrder = Object.assign({}, orderToSalesInvoice(order), getTaxSettings(order.userId));\n    const baseUrl = getUrl();\n    const requestUrl = `${baseUrl}transactions/create`;\n    try {\n      const result = avaPost(requestUrl, { data: salesOrder });\n      return callback(result.data);\n    } catch (error) {\n      Logger.error(\"Encountered error while recording order to Avalara\");\n      Logger.error(error);\n    }\n  }\n};\n\n/**\n * @summary Report refund to Avalara\n * @param {Order} order - The original order the refund was against\n * @param {Number} refundAmount - Amount to be refunded\n * @param {Function} callback - Callback\n * @returns {Object} Results from transaction call\n */\ntaxCalc.reportRefund = function (order, refundAmount, callback) {\n  check(refundAmount, Number);\n  check(callback, Function);\n  const pkgData = taxCalc.getPackageData();\n  const { companyCode } = pkgData.settings.avalara;\n  const company = Shops.findOne(Reaction.getShopId());\n  const companyShipping = _.filter(company.addressBook, (o) => o.isShippingDefault)[0];\n  const currencyCode = company.currency;\n  const baseUrl = getUrl();\n  const requestUrl = `${baseUrl}transactions/create`;\n  const returnAmount = refundAmount * -1;\n  const orderDate = moment(order.createdAt).format();\n  const refundDate = moment().format();\n  const refundReference = `${order.cartId}:${refundDate}`;\n  const  lineItems = {\n    number: \"01\",\n    quantity: 1,\n    amount: returnAmount,\n    description: \"refund\"\n  };\n  const returnInvoice = {\n    companyCode: companyCode,\n    type: \"ReturnInvoice\",\n    code: refundReference,\n    commit: true,\n    customerCode: order._id,\n    taxDate: orderDate,\n    date: refundDate,\n    currencyCode: currencyCode,\n    addresses: {\n      ShipFrom: {\n        line1: companyShipping.address1,\n        line2: companyShipping.address2,\n        city: companyShipping.city,\n        region: companyShipping.region,\n        country: companyShipping.country,\n        postalCode: companyShipping.postal\n      },\n      ShipTo: {\n        line1: order.shipping[0].address.address1,\n        line2: order.shipping[0].address.address2 || \"\",\n        city: order.shipping[0].address.city,\n        region: order.shipping[0].address.region,\n        country: order.shipping[0].address.country || \"US\"\n      }\n    },\n    lines: [lineItems]\n  };\n\n\n  const result = avaPost(requestUrl, { data: returnInvoice });\n  return callback(result.data);\n};\n\nexport default taxCalc;\n\nMeteor.methods({\n  \"avalara/addressValidation\": taxCalc.validateAddress,\n  \"avalara/getTaxCodes\": taxCalc.getTaxCodes,\n  \"avalara/testCredentials\": taxCalc.testCredentials,\n  \"avalara/getEntityCodes\": taxCalc.getEntityCodes\n});\n"]},"hash":"f5ac9fe11a6994489808789ab9492a4f535c619e"}
