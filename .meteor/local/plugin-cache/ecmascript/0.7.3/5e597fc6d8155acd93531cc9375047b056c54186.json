{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/client/modules/core/helpers/globals","imported":["getCardType"],"specifiers":[{"kind":"named","imported":"getCardType","local":"getCardType"}]},{"source":"/lib/collections","imported":["Cart","Shops","Packages"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Shops","local":"Shops"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"../api/braintree","imported":["Braintree"],"specifiers":[{"kind":"named","imported":"Braintree","local":"Braintree"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"../../lib/collections/schemas","imported":["BraintreePayment"],"specifiers":[{"kind":"named","imported":"BraintreePayment","local":"BraintreePayment"}]},{"source":"./braintree.html","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/payments-braintree/client/checkout/braintree.js","filenameRelative":"/imports/plugins/included/payments-braintree/client/checkout/braintree.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-braintree/client/checkout/braintree.js"],"names":["Meteor","Template","getCardType","Cart","Shops","Packages","Braintree","Reaction","BraintreePayment","braintreePaymentForm","helpers","uiEnd","template","buttonText","$","removeAttr","text","addClass","paymentAlert","errorMessage","removeClass","hidePaymentAlert","handleBraintreeSubmitError","error","serverError","message","submitting","submitToBrainTree","doc","cardData","name","payerName","number","cardNumber","expirationMonth","expireMonth","expirationYear","expireYear","cvv2","cvv","type","cartTotal","findOne","currencyCode","currency","authorize","total","results","paymentMethod","saved","normalizedStatus","normalizeState","response","transaction","status","normalizedMode","normalizeMode","subscribe","packageData","shopId","getShopId","storedCard","creditCard","cardType","toUpperCase","last4","processor","paymentPackageId","_id","paymentSettingsKey","registry","settingsKey","method","transactionId","id","amount","parseFloat","mode","createdAt","Date","updatedAt","transactions","push","call","AutoForm","addHooks","onSubmit","beginSubmit","attr","endSubmit","normalizedStates","authorization_expired","authorized","authorizing","settlement_pending","settlement_confirmed","settlement_declined","failed","gateway_rejected","processor_declined","settled","settling","submitted_for_settlement","voided","default","stateString","normalizedState","normalizedModes","modeString"],"mappings":"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","file":"/imports/plugins/included/payments-braintree/client/checkout/braintree.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { getCardType } from \"/client/modules/core/helpers/globals\";\nimport { Cart, Shops, Packages } from \"/lib/collections\";\nimport { Braintree } from \"../api/braintree\";\nimport { Reaction } from \"/client/api\";\nimport { BraintreePayment } from \"../../lib/collections/schemas\";\n\nimport \"./braintree.html\";\n\nTemplate.braintreePaymentForm.helpers({\n  BraintreePayment() {\n    return BraintreePayment;\n  }\n});\n\n\nuiEnd = function (template, buttonText) {\n  template.$(\":input\").removeAttr(\"disabled\");\n  template.$(\"#btn-complete-order\").text(buttonText);\n  return template.$(\"#btn-processing\").addClass(\"hidden\");\n};\n\npaymentAlert = function (errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n};\n\nhidePaymentAlert = function () {\n  return $(\".alert\").addClass(\"hidden\").text(\"\");\n};\n\nhandleBraintreeSubmitError = function (error) {\n  const serverError = error !== null ? error.message : void 0;\n  if (serverError) {\n    return paymentAlert(\"Server Error \" + serverError);\n  } else if (error) {\n    return paymentAlert(\"Oops! Credit card is invalid. Please check your information and try again.\");\n  }\n};\n\nlet submitting = false;\n\nsubmitToBrainTree = function (doc, template) {\n  submitting = true;\n  hidePaymentAlert();\n  const cardData = {\n    name: doc.payerName,\n    number: doc.cardNumber,\n    expirationMonth: doc.expireMonth,\n    expirationYear: doc.expireYear,\n    cvv2: doc.cvv,\n    type: getCardType(doc.cardNumber)\n  };\n  const cartTotal = Cart.findOne().cartTotal();\n  const currencyCode = Shops.findOne().currency;\n\n  Braintree.authorize(cardData, {\n    total: cartTotal,\n    currency: currencyCode\n  }, function (error, results) {\n    let paymentMethod;\n    submitting = false;\n    if (error) {\n      handleBraintreeSubmitError(error);\n      uiEnd(template, \"Resubmit payment\");\n    } else {\n      if (results.saved === true) {\n        const normalizedStatus = normalizeState(results.response.transaction.status);\n        const normalizedMode = normalizeMode(results.response.transaction.status);\n        Meteor.subscribe(\"Packages\");\n        const packageData = Packages.findOne({\n          name: \"reaction-braintree\",\n          shopId: Reaction.getShopId()\n        });\n\n        const storedCard = results.response.transaction.creditCard.cardType.toUpperCase() + \" \" + results.response.transaction.creditCard.last4;\n        paymentMethod = {\n          processor: \"Braintree\",\n          storedCard: storedCard,\n          paymentPackageId: packageData._id,\n          paymentSettingsKey: packageData.registry[0].settingsKey,\n          method: \"credit\",\n          transactionId: results.response.transaction.id,\n          amount: parseFloat(results.response.transaction.amount),\n          status: normalizedStatus,\n          mode: normalizedMode,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          transactions: []\n        };\n        paymentMethod.transactions.push(results.response);\n        Meteor.call(\"cart/submitPayment\", paymentMethod);\n      } else {\n        handleBraintreeSubmitError(results.response.message);\n        uiEnd(template, \"Resubmit payment\");\n      }\n    }\n  });\n};\n\nAutoForm.addHooks(\"braintree-payment-form\", {\n  onSubmit: function (doc) {\n    submitToBrainTree(doc, this.template);\n    return false;\n  },\n  beginSubmit: function () {\n    this.template.$(\":input\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(\"Submitting \");\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit: function () {\n    if (!submitting) {\n      return uiEnd(this.template, \"Complete your order\");\n    }\n  }\n});\n\nconst normalizedStates = {\n  authorization_expired: \"expired\",\n  authorized: \"created\",\n  authorizing: \"pending\",\n  settlement_pending: \"pending\",\n  settlement_confirmed: \"settled\",\n  settlement_declined: \"failed\",\n  failed: \"failed\",\n  gateway_rejected: \"failed\",\n  processor_declined: \"failed\",\n  settled: \"settled\",\n  settling: \"pending\",\n  submitted_for_settlement: \"pending\",\n  voided: \"voided\",\n  default: \"failed\"\n};\n\nnormalizeState = function (stateString) {\n  let normalizedState = normalizedStates[stateString];\n  if (typeof normalizedState === \"undefined\") {\n    normalizedState = normalizedStates.default;\n  }\n  return normalizedState;\n};\n\nconst normalizedModes = {\n  settled: \"capture\",\n  settling: \"capture\",\n  submitted_for_settlement: \"capture\",\n  settlement_confirmed: \"capture\",\n  authorized: \"authorize\",\n  authorizing: \"authorize\",\n  default: \"capture\"\n};\n\nnormalizeMode = function (modeString) {\n  let normalizedMode = normalizedModes[modeString];\n  if (typeof normalizedMode === \"undefined\") {\n    normalizedMode = normalizedModes.default;\n  }\n  return normalizedMode;\n};\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-braintree/client/checkout/braintree.js.map","sourceFileName":"/imports/plugins/included/payments-braintree/client/checkout/braintree.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"braintree"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 1);\nvar getCardType = void 0;\nmodule.importSync(\"/client/modules/core/helpers/globals\", {\n  getCardType: function (v) {\n    getCardType = v;\n  }\n}, 2);\nvar Cart = void 0,\n    Shops = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  },\n  Shops: function (v) {\n    Shops = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 3);\nvar Braintree = void 0;\nmodule.importSync(\"../api/braintree\", {\n  Braintree: function (v) {\n    Braintree = v;\n  }\n}, 4);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 5);\nvar BraintreePayment = void 0;\nmodule.importSync(\"../../lib/collections/schemas\", {\n  BraintreePayment: function (v) {\n    BraintreePayment = v;\n  }\n}, 6);\nmodule.importSync(\"./braintree.html\");\nTemplate.braintreePaymentForm.helpers({\n  BraintreePayment: function () {\n    return BraintreePayment;\n  }\n});\n\nuiEnd = function (template, buttonText) {\n  template.$(\":input\").removeAttr(\"disabled\");\n  template.$(\"#btn-complete-order\").text(buttonText);\n  return template.$(\"#btn-processing\").addClass(\"hidden\");\n};\n\npaymentAlert = function (errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n};\n\nhidePaymentAlert = function () {\n  return $(\".alert\").addClass(\"hidden\").text(\"\");\n};\n\nhandleBraintreeSubmitError = function (error) {\n  var serverError = error !== null ? error.message : void 0;\n\n  if (serverError) {\n    return paymentAlert(\"Server Error \" + serverError);\n  } else if (error) {\n    return paymentAlert(\"Oops! Credit card is invalid. Please check your information and try again.\");\n  }\n};\n\nvar submitting = false;\n\nsubmitToBrainTree = function (doc, template) {\n  submitting = true;\n  hidePaymentAlert();\n  var cardData = {\n    name: doc.payerName,\n    number: doc.cardNumber,\n    expirationMonth: doc.expireMonth,\n    expirationYear: doc.expireYear,\n    cvv2: doc.cvv,\n    type: getCardType(doc.cardNumber)\n  };\n  var cartTotal = Cart.findOne().cartTotal();\n  var currencyCode = Shops.findOne().currency;\n  Braintree.authorize(cardData, {\n    total: cartTotal,\n    currency: currencyCode\n  }, function (error, results) {\n    var paymentMethod = void 0;\n    submitting = false;\n\n    if (error) {\n      handleBraintreeSubmitError(error);\n      uiEnd(template, \"Resubmit payment\");\n    } else {\n      if (results.saved === true) {\n        var normalizedStatus = normalizeState(results.response.transaction.status);\n        var normalizedMode = normalizeMode(results.response.transaction.status);\n        Meteor.subscribe(\"Packages\");\n        var packageData = Packages.findOne({\n          name: \"reaction-braintree\",\n          shopId: Reaction.getShopId()\n        });\n        var storedCard = results.response.transaction.creditCard.cardType.toUpperCase() + \" \" + results.response.transaction.creditCard.last4;\n        paymentMethod = {\n          processor: \"Braintree\",\n          storedCard: storedCard,\n          paymentPackageId: packageData._id,\n          paymentSettingsKey: packageData.registry[0].settingsKey,\n          method: \"credit\",\n          transactionId: results.response.transaction.id,\n          amount: parseFloat(results.response.transaction.amount),\n          status: normalizedStatus,\n          mode: normalizedMode,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          transactions: []\n        };\n        paymentMethod.transactions.push(results.response);\n        Meteor.call(\"cart/submitPayment\", paymentMethod);\n      } else {\n        handleBraintreeSubmitError(results.response.message);\n        uiEnd(template, \"Resubmit payment\");\n      }\n    }\n  });\n};\n\nAutoForm.addHooks(\"braintree-payment-form\", {\n  onSubmit: function (doc) {\n    submitToBrainTree(doc, this.template);\n    return false;\n  },\n  beginSubmit: function () {\n    this.template.$(\":input\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(\"Submitting \");\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit: function () {\n    if (!submitting) {\n      return uiEnd(this.template, \"Complete your order\");\n    }\n  }\n});\nvar normalizedStates = {\n  authorization_expired: \"expired\",\n  authorized: \"created\",\n  authorizing: \"pending\",\n  settlement_pending: \"pending\",\n  settlement_confirmed: \"settled\",\n  settlement_declined: \"failed\",\n  failed: \"failed\",\n  gateway_rejected: \"failed\",\n  processor_declined: \"failed\",\n  settled: \"settled\",\n  settling: \"pending\",\n  submitted_for_settlement: \"pending\",\n  voided: \"voided\",\n  \"default\": \"failed\"\n};\n\nnormalizeState = function (stateString) {\n  var normalizedState = normalizedStates[stateString];\n\n  if (typeof normalizedState === \"undefined\") {\n    normalizedState = normalizedStates.default;\n  }\n\n  return normalizedState;\n};\n\nvar normalizedModes = {\n  settled: \"capture\",\n  settling: \"capture\",\n  submitted_for_settlement: \"capture\",\n  settlement_confirmed: \"capture\",\n  authorized: \"authorize\",\n  authorizing: \"authorize\",\n  \"default\": \"capture\"\n};\n\nnormalizeMode = function (modeString) {\n  var normalizedMode = normalizedModes[modeString];\n\n  if (typeof normalizedMode === \"undefined\") {\n    normalizedMode = normalizedModes.default;\n  }\n\n  return normalizedMode;\n};","map":{"version":3,"sources":["/imports/plugins/included/payments-braintree/client/checkout/braintree.js"],"names":["Meteor","Template","getCardType","Cart","Shops","Packages","Braintree","Reaction","BraintreePayment","braintreePaymentForm","helpers","uiEnd","template","buttonText","$","removeAttr","text","addClass","paymentAlert","errorMessage","removeClass","hidePaymentAlert","handleBraintreeSubmitError","error","serverError","message","submitting","submitToBrainTree","doc","cardData","name","payerName","number","cardNumber","expirationMonth","expireMonth","expirationYear","expireYear","cvv2","cvv","type","cartTotal","findOne","currencyCode","currency","authorize","total","results","paymentMethod","saved","normalizedStatus","normalizeState","response","transaction","status","normalizedMode","normalizeMode","subscribe","packageData","shopId","getShopId","storedCard","creditCard","cardType","toUpperCase","last4","processor","paymentPackageId","_id","paymentSettingsKey","registry","settingsKey","method","transactionId","id","amount","parseFloat","mode","createdAt","Date","updatedAt","transactions","push","call","AutoForm","addHooks","onSubmit","beginSubmit","attr","endSubmit","normalizedStates","authorization_expired","authorized","authorizing","settlement_pending","settlement_confirmed","settlement_declined","failed","gateway_rejected","processor_declined","settled","settling","submitted_for_settlement","voided","default","stateString","normalizedState","normalizedModes","modeString"],"mappings":"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","file":"/imports/plugins/included/payments-braintree/client/checkout/braintree.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { getCardType } from \"/client/modules/core/helpers/globals\";\nimport { Cart, Shops, Packages } from \"/lib/collections\";\nimport { Braintree } from \"../api/braintree\";\nimport { Reaction } from \"/client/api\";\nimport { BraintreePayment } from \"../../lib/collections/schemas\";\n\nimport \"./braintree.html\";\n\nTemplate.braintreePaymentForm.helpers({\n  BraintreePayment() {\n    return BraintreePayment;\n  }\n});\n\n\nuiEnd = function (template, buttonText) {\n  template.$(\":input\").removeAttr(\"disabled\");\n  template.$(\"#btn-complete-order\").text(buttonText);\n  return template.$(\"#btn-processing\").addClass(\"hidden\");\n};\n\npaymentAlert = function (errorMessage) {\n  return $(\".alert\").removeClass(\"hidden\").text(errorMessage);\n};\n\nhidePaymentAlert = function () {\n  return $(\".alert\").addClass(\"hidden\").text(\"\");\n};\n\nhandleBraintreeSubmitError = function (error) {\n  const serverError = error !== null ? error.message : void 0;\n  if (serverError) {\n    return paymentAlert(\"Server Error \" + serverError);\n  } else if (error) {\n    return paymentAlert(\"Oops! Credit card is invalid. Please check your information and try again.\");\n  }\n};\n\nlet submitting = false;\n\nsubmitToBrainTree = function (doc, template) {\n  submitting = true;\n  hidePaymentAlert();\n  const cardData = {\n    name: doc.payerName,\n    number: doc.cardNumber,\n    expirationMonth: doc.expireMonth,\n    expirationYear: doc.expireYear,\n    cvv2: doc.cvv,\n    type: getCardType(doc.cardNumber)\n  };\n  const cartTotal = Cart.findOne().cartTotal();\n  const currencyCode = Shops.findOne().currency;\n\n  Braintree.authorize(cardData, {\n    total: cartTotal,\n    currency: currencyCode\n  }, function (error, results) {\n    let paymentMethod;\n    submitting = false;\n    if (error) {\n      handleBraintreeSubmitError(error);\n      uiEnd(template, \"Resubmit payment\");\n    } else {\n      if (results.saved === true) {\n        const normalizedStatus = normalizeState(results.response.transaction.status);\n        const normalizedMode = normalizeMode(results.response.transaction.status);\n        Meteor.subscribe(\"Packages\");\n        const packageData = Packages.findOne({\n          name: \"reaction-braintree\",\n          shopId: Reaction.getShopId()\n        });\n\n        const storedCard = results.response.transaction.creditCard.cardType.toUpperCase() + \" \" + results.response.transaction.creditCard.last4;\n        paymentMethod = {\n          processor: \"Braintree\",\n          storedCard: storedCard,\n          paymentPackageId: packageData._id,\n          paymentSettingsKey: packageData.registry[0].settingsKey,\n          method: \"credit\",\n          transactionId: results.response.transaction.id,\n          amount: parseFloat(results.response.transaction.amount),\n          status: normalizedStatus,\n          mode: normalizedMode,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          transactions: []\n        };\n        paymentMethod.transactions.push(results.response);\n        Meteor.call(\"cart/submitPayment\", paymentMethod);\n      } else {\n        handleBraintreeSubmitError(results.response.message);\n        uiEnd(template, \"Resubmit payment\");\n      }\n    }\n  });\n};\n\nAutoForm.addHooks(\"braintree-payment-form\", {\n  onSubmit: function (doc) {\n    submitToBrainTree(doc, this.template);\n    return false;\n  },\n  beginSubmit: function () {\n    this.template.$(\":input\").attr(\"disabled\", true);\n    this.template.$(\"#btn-complete-order\").text(\"Submitting \");\n    return this.template.$(\"#btn-processing\").removeClass(\"hidden\");\n  },\n  endSubmit: function () {\n    if (!submitting) {\n      return uiEnd(this.template, \"Complete your order\");\n    }\n  }\n});\n\nconst normalizedStates = {\n  authorization_expired: \"expired\",\n  authorized: \"created\",\n  authorizing: \"pending\",\n  settlement_pending: \"pending\",\n  settlement_confirmed: \"settled\",\n  settlement_declined: \"failed\",\n  failed: \"failed\",\n  gateway_rejected: \"failed\",\n  processor_declined: \"failed\",\n  settled: \"settled\",\n  settling: \"pending\",\n  submitted_for_settlement: \"pending\",\n  voided: \"voided\",\n  default: \"failed\"\n};\n\nnormalizeState = function (stateString) {\n  let normalizedState = normalizedStates[stateString];\n  if (typeof normalizedState === \"undefined\") {\n    normalizedState = normalizedStates.default;\n  }\n  return normalizedState;\n};\n\nconst normalizedModes = {\n  settled: \"capture\",\n  settling: \"capture\",\n  submitted_for_settlement: \"capture\",\n  settlement_confirmed: \"capture\",\n  authorized: \"authorize\",\n  authorizing: \"authorize\",\n  default: \"capture\"\n};\n\nnormalizeMode = function (modeString) {\n  let normalizedMode = normalizedModes[modeString];\n  if (typeof normalizedMode === \"undefined\") {\n    normalizedMode = normalizedModes.default;\n  }\n  return normalizedMode;\n};\n"]},"hash":"5e597fc6d8155acd93531cc9375047b056c54186"}
