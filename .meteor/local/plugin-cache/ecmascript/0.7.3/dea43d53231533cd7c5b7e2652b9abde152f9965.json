{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes","Children"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"},{"kind":"named","imported":"Children","local":"Children"}]},{"source":"dnd-core","imported":["DragDropManager"],"specifiers":[{"kind":"named","imported":"DragDropManager","local":"DragDropManager"}]},{"source":"react-dnd-html5-backend","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"HTML5Backend"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui/client/providers/dragDropProvider.js","filenameRelative":"/imports/plugins/core/ui/client/providers/dragDropProvider.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/providers/dragDropProvider.js"],"names":["React","Component","PropTypes","Children","DragDropManager","HTML5Backend","defaultManager","DragDropProvider","getChildContext","dragDropManager","render","only","props","children","childContextTypes","object","isRequired","propTypes","node"],"mappings":";;;;;;;;;;;;;;AAAA;IAAA;;;OAAA,AAAsD,WAAtD,A,AAA+D;;;;;;;;;;;;;;;;;;;;;;;;;GAC/D,AAAS,AAAuB,AAChC,AAAO,AAAkB;AAEzB,IAAM,iBAAiB,IAAA,AAAI,gBAA3B,AAAuB,AAAoB,AAE3C,A,AACA,eACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,AAAM,AAAyB,AAAU,AACvC,AAAkB,AAChB;;IAAO;;;;;;;;;+BAAA,AACY;AADnB;yBAKF;AAFC;AAEQ,AACP,AACA;;;;;;sBAAA,AAAO,AAAS,AAAK,AAAK,AAAM,AACjC;;sCAVsC;AAazC,AAAiB,AAAoB;;;;;;EAV/B;;AAWJ,iBAAiB,AAAU,AAAO;oCAGpC,AAAiB,AAAY,AAC3B,AAAU,AAAU;AALtB,AAAqC;AAIrC,AAA6B;YAId,UAAf;AAAA;OA5CO,OAAS,WAAhB,AAA2B,QAA3B,AAAsC","file":"/imports/plugins/core/ui/client/providers/dragDropProvider.js.map","sourcesContent":["import React, { Component, PropTypes, Children } from \"react\"; // eslint-disable-line\nimport { DragDropManager } from \"dnd-core\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\n\nconst defaultManager = new DragDropManager(HTML5Backend);\n\n// /**\n//  * This is singleton used to initialize only once dnd in our app.\n//  * If you initialized dnd and then try to initialize another dnd\n//  * context the app will break.\n//  * Here is more info: https://github.com/gaearon/react-dnd/issues/186\n//  *\n//  * The solution is to call Dnd context from this singleton this way\n//  * all dnd contexts in the app are the same.\n//  */\n// export default function getDndContext() {\n//   if (defaultManager) return defaultManager;\n//\n//   defaultManager = new DragDropManager(HTML5Backend);\n//\n//   return defaultManager;\n// }\n\nclass DragDropProvider extends Component {\n  getChildContext() {\n    return {\n      dragDropManager: defaultManager\n    };\n  }\n\n  render() {\n    // `Children.only` enables us not to add a <div /> for nothing\n    return Children.only(this.props.children);\n  }\n}\n\nDragDropProvider.childContextTypes = {\n  dragDropManager: PropTypes.object.isRequired\n};\n\nDragDropProvider.propTypes = {\n  children: PropTypes.node\n};\n\nexport default DragDropProvider;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/providers/dragDropProvider.js.map","sourceFileName":"/imports/plugins/core/ui/client/providers/dragDropProvider.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"dragDropProvider"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0,\n    Children = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  },\n  Children: function (v) {\n    Children = v;\n  }\n}, 0);\nvar DragDropManager = void 0;\nmodule.importSync(\"dnd-core\", {\n  DragDropManager: function (v) {\n    DragDropManager = v;\n  }\n}, 1);\nvar HTML5Backend = void 0;\nmodule.importSync(\"react-dnd-html5-backend\", {\n  \"default\": function (v) {\n    HTML5Backend = v;\n  }\n}, 2);\nvar defaultManager = new DragDropManager(HTML5Backend); // /**\n//  * This is singleton used to initialize only once dnd in our app.\n//  * If you initialized dnd and then try to initialize another dnd\n//  * context the app will break.\n//  * Here is more info: https://github.com/gaearon/react-dnd/issues/186\n//  *\n//  * The solution is to call Dnd context from this singleton this way\n//  * all dnd contexts in the app are the same.\n//  */\n// export default function getDndContext() {\n//   if (defaultManager) return defaultManager;\n//\n//   defaultManager = new DragDropManager(HTML5Backend);\n//\n//   return defaultManager;\n// }\n\nvar DragDropProvider = function (_Component) {\n  (0, _inherits3.default)(DragDropProvider, _Component);\n\n  function DragDropProvider() {\n    (0, _classCallCheck3.default)(this, DragDropProvider);\n    return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));\n  }\n\n  DragDropProvider.prototype.getChildContext = function () {\n    function getChildContext() {\n      return {\n        dragDropManager: defaultManager\n      };\n    }\n\n    return getChildContext;\n  }();\n\n  DragDropProvider.prototype.render = function () {\n    function render() {\n      // `Children.only` enables us not to add a <div /> for nothing\n      return Children.only(this.props.children);\n    }\n\n    return render;\n  }();\n\n  return DragDropProvider;\n}(Component);\n\nDragDropProvider.childContextTypes = {\n  dragDropManager: PropTypes.object.isRequired\n};\nDragDropProvider.propTypes = {\n  children: PropTypes.node\n};\nmodule.export(\"default\", exports.default = DragDropProvider);","map":{"version":3,"sources":["/imports/plugins/core/ui/client/providers/dragDropProvider.js"],"names":["React","Component","PropTypes","Children","DragDropManager","HTML5Backend","defaultManager","DragDropProvider","getChildContext","dragDropManager","render","only","props","children","childContextTypes","object","isRequired","propTypes","node"],"mappings":";;;;;;;;;;;;;;AAAA;IAAA;;;OAAA,AAAsD,WAAtD,A,AAA+D;;;;;;;;;;;;;;;;;;;;;;;;;GAC/D,AAAS,AAAuB,AAChC,AAAO,AAAkB;AAEzB,IAAM,iBAAiB,IAAA,AAAI,gBAA3B,AAAuB,AAAoB,AAE3C,A,AACA,eACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,AAAM,AAAyB,AAAU,AACvC,AAAkB,AAChB;;IAAO;;;;;;;;;+BAAA,AACY;AADnB;yBAKF;AAFC;AAEQ,AACP,AACA;;;;;;sBAAA,AAAO,AAAS,AAAK,AAAK,AAAM,AACjC;;sCAVsC;AAazC,AAAiB,AAAoB;;;;;;EAV/B;;AAWJ,iBAAiB,AAAU,AAAO;oCAGpC,AAAiB,AAAY,AAC3B,AAAU,AAAU;AALtB,AAAqC;AAIrC,AAA6B;YAId,UAAf;AAAA;OA5CO,OAAS,WAAhB,AAA2B,QAA3B,AAAsC","file":"/imports/plugins/core/ui/client/providers/dragDropProvider.js.map","sourcesContent":["import React, { Component, PropTypes, Children } from \"react\"; // eslint-disable-line\nimport { DragDropManager } from \"dnd-core\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\n\nconst defaultManager = new DragDropManager(HTML5Backend);\n\n// /**\n//  * This is singleton used to initialize only once dnd in our app.\n//  * If you initialized dnd and then try to initialize another dnd\n//  * context the app will break.\n//  * Here is more info: https://github.com/gaearon/react-dnd/issues/186\n//  *\n//  * The solution is to call Dnd context from this singleton this way\n//  * all dnd contexts in the app are the same.\n//  */\n// export default function getDndContext() {\n//   if (defaultManager) return defaultManager;\n//\n//   defaultManager = new DragDropManager(HTML5Backend);\n//\n//   return defaultManager;\n// }\n\nclass DragDropProvider extends Component {\n  getChildContext() {\n    return {\n      dragDropManager: defaultManager\n    };\n  }\n\n  render() {\n    // `Children.only` enables us not to add a <div /> for nothing\n    return Children.only(this.props.children);\n  }\n}\n\nDragDropProvider.childContextTypes = {\n  dragDropManager: PropTypes.object.isRequired\n};\n\nDragDropProvider.propTypes = {\n  children: PropTypes.node\n};\n\nexport default DragDropProvider;\n"]},"hash":"dea43d53231533cd7c5b7e2652b9abde152f9965"}
