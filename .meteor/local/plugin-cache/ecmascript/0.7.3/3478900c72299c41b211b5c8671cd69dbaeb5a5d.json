{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/collections","imported":["Jobs","Packages"],"specifiers":[{"kind":"named","imported":"Jobs","local":"Jobs"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Hooks","Logger","Reaction"],"specifiers":[{"kind":"named","imported":"Hooks","local":"Hooks"},{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js","filenameRelative":"/imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js"],"names":["Jobs","Packages","Hooks","Logger","Reaction","getJobConfig","config","findOne","name","shopId","getShopId","settings","taxcloud","Events","add","refreshPeriod","taxCodeUrl","debug","Job","url","priority","retry","retries","wait","backoff","repeat","schedule","later","parse","text","save","cancelRepeats","processJobs","pollInterval","workTimeout","job","callback","Meteor","call","error","warn","message","done","repeatId","toString","success","Import","flush"],"mappings":"AAAA;IAAA,AAAS;AAAT,OAA+B,WAA/B;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAO,AAAQ,AAAgB,AAExC,AACA,A;;AACA;;AACA,AAAS,AAAe;AACtB,AAAM,SAAS,eAAA,AAAS,AAAQ,AAC9B;MAAM,kBADwB;UAAjB,AAAiB,AAEtB,AAAS;AAFnB,qBAIA,AAAO,AAAO,AAAS,AACxB,A;AAHG;AAKJ,yBACA;AACA;;AACA,AAAM,AAAO,AAAI,AAAiB,AAAM;;;AACtC,MAAM,WAAN,AAAe,6BACf;MAAM,SAAN,AAAsB,AAAO,AAAiB,AAC9C;MAAM,AAAa,gBAAO,OAAP,AAAqB,iBAHF,AAGtC,AAEA;wCACA,AAAI,AAAkB,AAAG,AACvB,yCAAA,AAAO,AAAO,AAAqD,AAAc,AACjF;;MAAA,AAAI,AAAI,AAAM,qBAAd,AAAsC,AAAE;WAAK,8DAAP;AAAtC,AACG,YADH,AACY,MADZ,AAEG,AAAM;WACL;OAAS,SADJ,AAEL,UAAM;AACG,eAHJ,AAGkB;YAL3B,AAES,AAKN;AAPH,AAOU,6BAPV,AAOU,AACN,AAAU,AAAK,AAAM,AAAM,AAAK;;AAN3B,AAGL,OALJ,AAUG,AAAK;sCAEJ,AACA;AAFA;AAIL;A,AAvBH,AAwBC,AAED;qBACA,AACA;AApBI,AAUQ,AAGW;AAQvB;AACA;AACA,AAAe,AAAY;AACzB,AAAK,AACH,AACA;AAAA,AACE,AAAc,AAAK;AAHvB,AAEE,AAEE,AAAa,AAAM,AAErB,AAAC,AAAK;;cAvDK,6BAuDX,AAAmB,YACjB;OAAA,AAAO,AAAK,AAAwB,AAAS,AAC3C,YAAA,AAAI,AAAO,AACT;AACS,kBAAP,AAAY,KAAZ,AAAkB,AAClB;AAAA,AAAI,iBAAK,MAAT,AAAe,AAAS,AAAE,AAAU;AAFtC,AAAI,AAAM,AAAU,AAAiB,AACnC,oBACA,UACD;AAHD,WAGO,8CACL;UAAA,AAAI,OAAJ,AAAS,AAAM,AAAY,AAAE;kBAAU,2BAAvC,AAA2B;4BAC5B;;sBANH,AAOC;;AAAM,eACL;;sBACA;;AAAA,AAAM,AAAU,AAChB;aAAA,AAAS,AAAO,AAChB;AAAA,AAAO,AAAM,AAEb;AAAI,YAAJ,AAAS,UAAS,AAAE;iBAAU,OAA9B,AAAkB;qBAdtB,AAeG,AACF;;oBACD;;AAxBJ,AAyBG;AAEJ","file":"/imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js.map","sourcesContent":["import { Jobs, Packages } from \"/lib/collections\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\n\n//\n// helper to fetch reaction-taxes config\n//\nfunction getJobConfig() {\n  const config = Packages.findOne({\n    name: \"taxes-taxcloud\",\n    shopId: Reaction.getShopId()\n  });\n  return config.settings.taxcloud;\n}\n\n//\n// add job hook for \"taxes/fetchTaxCloudTaxCodes\"\n//\nHooks.Events.add(\"afterCoreInit\", () => {\n  const config = getJobConfig();\n  const refreshPeriod = config.refreshPeriod || 0;\n  const taxCodeUrl = config.taxCodeUrl || \"https://taxcloud.net/tic/?format=json\";\n\n  // set 0 to disable fetchTIC\n  if (refreshPeriod !== 0) {\n    Logger.debug(`Adding taxcloud/getTaxCodes to JobControl. Refresh ${refreshPeriod}`);\n    new Job(Jobs, \"taxcloud/getTaxCodes\", { url: taxCodeUrl })\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\" // delay by twice as long for each subsequent retry\n      })\n      .repeat({\n        schedule: Jobs.later.parse.text(refreshPeriod)\n      })\n      .save({\n        // Cancel any jobs of the same type,\n        // but only if this job repeats forever.\n        cancelRepeats: true\n      });\n  }\n});\n\n//\n// index imports and\n// will trigger job to run\n// taxes/fetchTaxCloudTaxCodes\n//\nexport default function () {\n  Jobs.processJobs(\n    \"taxcloud/getTaxCodes\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Meteor.call(\"taxcloud/getTaxCodes\", error => {\n        if (error) {\n          if (error.error === \"notConfigured\") {\n            Logger.warn(error.message);\n            job.done(error.message, { repeatId: true });\n          } else {\n            job.done(error.toString(), { repeatId: true });\n          }\n        } else {\n          // we should always return \"completed\" job here, because errors are fine\n          const success = \"Latest TaxCloud TaxCodes were fetched successfully.\";\n          Reaction.Import.flush();\n          Logger.debug(success);\n\n          job.done(success, { repeatId: true });\n        }\n      });\n      callback();\n    }\n  );\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js.map","sourceFileName":"/imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"taxcodes"},"ignored":false,"code":"var Jobs = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Jobs: function (v) {\n    Jobs = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 0);\nvar Hooks = void 0,\n    Logger = void 0,\n    Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Hooks: function (v) {\n    Hooks = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 1);\n\n//\n// helper to fetch reaction-taxes config\n//\nfunction getJobConfig() {\n  var config = Packages.findOne({\n    name: \"taxes-taxcloud\",\n    shopId: Reaction.getShopId()\n  });\n  return config.settings.taxcloud;\n} //\n// add job hook for \"taxes/fetchTaxCloudTaxCodes\"\n//\n\n\nHooks.Events.add(\"afterCoreInit\", function () {\n  var config = getJobConfig();\n  var refreshPeriod = config.refreshPeriod || 0;\n  var taxCodeUrl = config.taxCodeUrl || \"https://taxcloud.net/tic/?format=json\"; // set 0 to disable fetchTIC\n\n  if (refreshPeriod !== 0) {\n    Logger.debug(\"Adding taxcloud/getTaxCodes to JobControl. Refresh \" + refreshPeriod);\n    new Job(Jobs, \"taxcloud/getTaxCodes\", {\n      url: taxCodeUrl\n    }).priority(\"normal\").retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\" // delay by twice as long for each subsequent retry\n\n    }).repeat({\n      schedule: Jobs.later.parse.text(refreshPeriod)\n    }).save({\n      // Cancel any jobs of the same type,\n      // but only if this job repeats forever.\n      cancelRepeats: true\n    });\n  }\n}); //\n// index imports and\n// will trigger job to run\n// taxes/fetchTaxCloudTaxCodes\n//\n\nmodule.export(\"default\", exports.default = function () {\n  Jobs.processJobs(\"taxcloud/getTaxCodes\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, function (job, callback) {\n    Meteor.call(\"taxcloud/getTaxCodes\", function (error) {\n      if (error) {\n        if (error.error === \"notConfigured\") {\n          Logger.warn(error.message);\n          job.done(error.message, {\n            repeatId: true\n          });\n        } else {\n          job.done(error.toString(), {\n            repeatId: true\n          });\n        }\n      } else {\n        // we should always return \"completed\" job here, because errors are fine\n        var success = \"Latest TaxCloud TaxCodes were fetched successfully.\";\n        Reaction.Import.flush();\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n      }\n    });\n    callback();\n  });\n});","map":{"version":3,"sources":["/imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js"],"names":["Jobs","Packages","Hooks","Logger","Reaction","getJobConfig","config","findOne","name","shopId","getShopId","settings","taxcloud","Events","add","refreshPeriod","taxCodeUrl","debug","Job","url","priority","retry","retries","wait","backoff","repeat","schedule","later","parse","text","save","cancelRepeats","processJobs","pollInterval","workTimeout","job","callback","Meteor","call","error","warn","message","done","repeatId","toString","success","Import","flush"],"mappings":"AAAA;IAAA,AAAS;AAAT,OAA+B,WAA/B;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAO,AAAQ,AAAgB,AAExC,AACA,A;;AACA;;AACA,AAAS,AAAe;AACtB,AAAM,SAAS,eAAA,AAAS,AAAQ,AAC9B;MAAM,kBADwB;UAAjB,AAAiB,AAEtB,AAAS;AAFnB,qBAIA,AAAO,AAAO,AAAS,AACxB,A;AAHG;AAKJ,yBACA;AACA;;AACA,AAAM,AAAO,AAAI,AAAiB,AAAM;;;AACtC,MAAM,WAAN,AAAe,6BACf;MAAM,SAAN,AAAsB,AAAO,AAAiB,AAC9C;MAAM,AAAa,gBAAO,OAAP,AAAqB,iBAHF,AAGtC,AAEA;wCACA,AAAI,AAAkB,AAAG,AACvB,yCAAA,AAAO,AAAO,AAAqD,AAAc,AACjF;;MAAA,AAAI,AAAI,AAAM,qBAAd,AAAsC,AAAE;WAAK,8DAAP;AAAtC,AACG,YADH,AACY,MADZ,AAEG,AAAM;WACL;OAAS,SADJ,AAEL,UAAM;AACG,eAHJ,AAGkB;YAL3B,AAES,AAKN;AAPH,AAOU,6BAPV,AAOU,AACN,AAAU,AAAK,AAAM,AAAM,AAAK;;AAN3B,AAGL,OALJ,AAUG,AAAK;sCAEJ,AACA;AAFA;AAIL;A,AAvBH,AAwBC,AAED;qBACA,AACA;AApBI,AAUQ,AAGW;AAQvB;AACA;AACA,AAAe,AAAY;AACzB,AAAK,AACH,AACA;AAAA,AACE,AAAc,AAAK;AAHvB,AAEE,AAEE,AAAa,AAAM,AAErB,AAAC,AAAK;;cAvDK,6BAuDX,AAAmB,YACjB;OAAA,AAAO,AAAK,AAAwB,AAAS,AAC3C,YAAA,AAAI,AAAO,AACT;AACS,kBAAP,AAAY,KAAZ,AAAkB,AAClB;AAAA,AAAI,iBAAK,MAAT,AAAe,AAAS,AAAE,AAAU;AAFtC,AAAI,AAAM,AAAU,AAAiB,AACnC,oBACA,UACD;AAHD,WAGO,8CACL;UAAA,AAAI,OAAJ,AAAS,AAAM,AAAY,AAAE;kBAAU,2BAAvC,AAA2B;4BAC5B;;sBANH,AAOC;;AAAM,eACL;;sBACA;;AAAA,AAAM,AAAU,AAChB;aAAA,AAAS,AAAO,AAChB;AAAA,AAAO,AAAM,AAEb;AAAI,YAAJ,AAAS,UAAS,AAAE;iBAAU,OAA9B,AAAkB;qBAdtB,AAeG,AACF;;oBACD;;AAxBJ,AAyBG;AAEJ","file":"/imports/plugins/included/taxes-taxcloud/server/jobs/taxcodes.js.map","sourcesContent":["import { Jobs, Packages } from \"/lib/collections\";\nimport { Hooks, Logger, Reaction } from \"/server/api\";\n\n//\n// helper to fetch reaction-taxes config\n//\nfunction getJobConfig() {\n  const config = Packages.findOne({\n    name: \"taxes-taxcloud\",\n    shopId: Reaction.getShopId()\n  });\n  return config.settings.taxcloud;\n}\n\n//\n// add job hook for \"taxes/fetchTaxCloudTaxCodes\"\n//\nHooks.Events.add(\"afterCoreInit\", () => {\n  const config = getJobConfig();\n  const refreshPeriod = config.refreshPeriod || 0;\n  const taxCodeUrl = config.taxCodeUrl || \"https://taxcloud.net/tic/?format=json\";\n\n  // set 0 to disable fetchTIC\n  if (refreshPeriod !== 0) {\n    Logger.debug(`Adding taxcloud/getTaxCodes to JobControl. Refresh ${refreshPeriod}`);\n    new Job(Jobs, \"taxcloud/getTaxCodes\", { url: taxCodeUrl })\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\" // delay by twice as long for each subsequent retry\n      })\n      .repeat({\n        schedule: Jobs.later.parse.text(refreshPeriod)\n      })\n      .save({\n        // Cancel any jobs of the same type,\n        // but only if this job repeats forever.\n        cancelRepeats: true\n      });\n  }\n});\n\n//\n// index imports and\n// will trigger job to run\n// taxes/fetchTaxCloudTaxCodes\n//\nexport default function () {\n  Jobs.processJobs(\n    \"taxcloud/getTaxCodes\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Meteor.call(\"taxcloud/getTaxCodes\", error => {\n        if (error) {\n          if (error.error === \"notConfigured\") {\n            Logger.warn(error.message);\n            job.done(error.message, { repeatId: true });\n          } else {\n            job.done(error.toString(), { repeatId: true });\n          }\n        } else {\n          // we should always return \"completed\" job here, because errors are fine\n          const success = \"Latest TaxCloud TaxCodes were fetched successfully.\";\n          Reaction.Import.flush();\n          Logger.debug(success);\n\n          job.done(success, { repeatId: true });\n        }\n      });\n      callback();\n    }\n  );\n}\n"]},"hash":"3478900c72299c41b211b5c8671cd69dbaeb5a5d"}
