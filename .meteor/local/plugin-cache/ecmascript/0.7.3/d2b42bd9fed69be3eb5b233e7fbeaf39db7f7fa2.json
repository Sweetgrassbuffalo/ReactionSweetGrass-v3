{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/alanning:roles","imported":["Roles"],"specifiers":[{"kind":"named","imported":"Roles","local":"Roles"}]},{"source":"/server/api","imported":["Logger"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":["assignOwnerRoles","shopId","pkgName","registry"],"specifiers":[{"kind":"local","local":"assignOwnerRoles","exported":"assignOwnerRoles"},{"kind":"local","local":"shopId","exported":"shopId"},{"kind":"local","local":"pkgName","exported":"pkgName"},{"kind":"local","local":"registry","exported":"registry"}]}}},"options":{"filename":"/server/api/core/assignRoles.js","filenameRelative":"/server/api/core/assignRoles.js","inputSourceMap":{"version":3,"sources":["/server/api/core/assignRoles.js"],"names":["Roles","Logger","getRouteName","packageName","registryItem","routeName","name","template","split","assignOwnerRoles","shopId","pkgName","registry","defaultRoles","globalRoles","roleName","push","permissions","permission","debug","defaultOwnerRoles","_","uniq","owners","shopOwners","getUsersInRole","fetch","warn","account","_id","addUsersToRoles","GLOBAL_GROUP"],"mappings":"AAAA,OAAS;AAAa;WAAtB;;AAAA;;;;;;;;;;;;GACA,AAAS,AAAc,A,AAAvB,AAEA;;AAWA,AAAS,AAAa,AAAa,AAAc;;;;;;;;;;GAC/C,AAAI,SAAJ;MACA;;MAAI,eAAJ,AAAmB;QACb,aAAJ,AAAiB,MAAM,AACrB;kBAAY,aAAZ,AAAyB,AAC1B;AAFD,eAEW,aAAJ,AAAiB,UAAU,AAChC;AAAa,kBAAE,AAAY,oBAAG,aAA9B,AAA2C,AAAS,AACrD;AAFM,KAAA,MAEA,AACL;AAAa,uBAAb,AAAe,AAAY,AAC5B;AAP8B,AAQ/B,KAR+B,AAC/B;;;qCAQA;WAAA,AAAY,AAAU,AAAM,AAAK,AACjC;AAAA,AAAO,AACR;;;A,AACD,AAAO,AACR,AAGD,EAcA,AAAO,AAAS,AAAiB,AAAQ,AAAS,AAAU,AAC1D;;;;;;;;;;;;;;AAAM,SAAe,AAAC,iBAAD,AAAU,QAAS,SAAnB,AAAoC;MACnD,AAAc,yBAApB;oBAEA,AAAI,AAAU,AACV;;gBACF;AAAA,AAAK,AAAM,AAAgB,AAAU,AACnC;;AACA;;;;;;;;;;;;AACA;AACA;AAAA,AAAM,AAAW,AAAa,AAAS;2CACvC;;UAAA,AAAI,UAAU,AACZ;qBAAA,AAAa,KAAb,AAAkB,AACnB;AAPkC,AASnC,AACA;AACA;;;UAAI,aAAJ,AAAiB,aAAa,AAC5B;AAAK,8BAAoB,aAAzB,AAAsC;AAAa,AACjD;;;;;;;;;;;cADF,AAAW;uBACT,AAAa,KAAK,WAAlB,AAA6B,AAC9B;AACF;AACF;AACF;AAnBD,SAmBO,AACL;WAAA,AAAO,AAAO,gCAAd,AAAqC,AAAQ,AAC9C;AAzByD,AA0B1D,GAzBA,AAAqB,AAA6C,AAClE;;;iCAyBA,eA3B0D,AA2B1D,AAAM,AAAoB,AAAE,AAAK,AACjC;;;;2DACA,SAAA,AAAM,AAAS,AACf;;OAAM,YA9BoD,AA8B1D,AAAmB,AAAM,AAAe,AAAmB,AAC3D;gBACA;AAAA,AAAI,AAAC,AAAY,AACf;AAAA,AAAO,AAAK,AACZ,IACD;;;AAnCyD,AAoC1D;;;;;;;;;;;;;;AACA,IAAA,AAAK,AAAM,AAAW,AAAY,AAChC;;;QAAA,AAAO,AAAK,gBAAZ,AAAoB,2BAtCoC,AAuCzD,AACD;;mDAxC0D,AAyC1D,AAAM,AAAgB,AAAQ,AAAmB,AAEjD;gDACA;AAAA,AAAM,AAAgB,AAAQ,AAAa,AAAM,AAEjD,AAAO,AAAO,AAA8B,AAAQ,AACrD","file":"/server/api/core/assignRoles.js.map","sourcesContent":["import { Roles } from \"meteor/alanning:roles\";\nimport { Logger } from \"/server/api\";\n\n/**\n * getRouteName\n * assemble route name to be standard\n * this is duplicate that exists in Reaction.Router\n * however this is to avoid a dependency in core\n * on the router\n * prefix/package name + registry name or route\n * @param  {[type]} packageName  [package name]\n * @param  {[type]} registryItem [registry object]\n * @return {String}              [route name]\n */\nfunction getRouteName(packageName, registryItem) {\n  let routeName;\n  if (packageName && registryItem) {\n    if (registryItem.name) {\n      routeName = registryItem.name;\n    } else if (registryItem.template) {\n      routeName = `${packageName}/${registryItem.template}`;\n    } else {\n      routeName = `${packageName}`;\n    }\n    // dont include params in the name\n    routeName = routeName.split(\":\")[0];\n    return routeName;\n  }\n  return null;\n}\n\n\n/**\n * assignOwnerRoles\n * populate roles with all the packages and their permissions\n * this is the main way that roles are inserted and created for\n * admin user.\n * we assign all package roles to each owner account for each shopId\n * we assign only basic GLOBAL_GROUP rights\n *\n * @param  {String} shopId - shopId\n * @param  {String} pkgName - Package name\n * @param  {String} registry - registry object\n * @return {undefined}\n */\n\nexport function assignOwnerRoles(shopId, pkgName, registry) {\n  const defaultRoles = [\"owner\", \"admin\", \"createProduct\", \"guest\", pkgName];\n  const globalRoles = defaultRoles;\n\n  if (registry) {\n      // for each registry item define and push roles\n    for (const registryItem of registry) {\n      // packages don't need to define specific permission routes.,\n      // the routeName will be used as default roleName for each route.\n      // todo: check dependency on this.\n      const roleName = getRouteName(pkgName, registryItem);\n      if (roleName) {\n        defaultRoles.push(roleName);\n      }\n\n      // Get all defined permissions, add them to an array\n      // define permissions if you need to check custom permission\n      if (registryItem.permissions) {\n        for (const permission of registryItem.permissions) {\n          defaultRoles.push(permission.permission);\n        }\n      }\n    }\n  } else {\n    Logger.debug(`No routes loaded for ${pkgName}`);\n  }\n  // only unique roles\n  const defaultOwnerRoles = _.uniq(defaultRoles);\n  // get existing shop owners to add new roles to\n  const owners = [];\n  const shopOwners = Roles.getUsersInRole(defaultOwnerRoles).fetch();\n  // just a nice warning. something is misconfigured.\n  if (!shopOwners) {\n    Logger.warn(\"Cannot assign roles without existing owner users.\");\n    return;\n  }\n  // assign this package permission to each existing owner.\n  for (const account of shopOwners) {\n    owners.push(account._id);\n  }\n  // we don't use accounts/addUserPermissions here because we may not yet have permissions\n  Roles.addUsersToRoles(owners, defaultOwnerRoles, shopId);\n\n  // the reaction owner has permissions to all sites by default\n  Roles.addUsersToRoles(owners, globalRoles, Roles.GLOBAL_GROUP);\n\n  Logger.debug(`Owner permissions added for ${pkgName}`);\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/api/core/assignRoles.js.map","sourceFileName":"/server/api/core/assignRoles.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"assignRoles"},"ignored":false,"code":"module.export({\n  assignOwnerRoles: function () {\n    return assignOwnerRoles;\n  }\n});\nvar Roles = void 0;\nmodule.importSync(\"meteor/alanning:roles\", {\n  Roles: function (v) {\n    Roles = v;\n  }\n}, 0);\nvar Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 1);\n\n/**\n * getRouteName\n * assemble route name to be standard\n * this is duplicate that exists in Reaction.Router\n * however this is to avoid a dependency in core\n * on the router\n * prefix/package name + registry name or route\n * @param  {[type]} packageName  [package name]\n * @param  {[type]} registryItem [registry object]\n * @return {String}              [route name]\n */function getRouteName(packageName, registryItem) {\n  var routeName = void 0;\n\n  if (packageName && registryItem) {\n    if (registryItem.name) {\n      routeName = registryItem.name;\n    } else if (registryItem.template) {\n      routeName = packageName + \"/\" + registryItem.template;\n    } else {\n      routeName = \"\" + packageName;\n    } // dont include params in the name\n\n\n    routeName = routeName.split(\":\")[0];\n    return routeName;\n  }\n\n  return null;\n} /**\n   * assignOwnerRoles\n   * populate roles with all the packages and their permissions\n   * this is the main way that roles are inserted and created for\n   * admin user.\n   * we assign all package roles to each owner account for each shopId\n   * we assign only basic GLOBAL_GROUP rights\n   *\n   * @param  {String} shopId - shopId\n   * @param  {String} pkgName - Package name\n   * @param  {String} registry - registry object\n   * @return {undefined}\n   */\n\nfunction assignOwnerRoles(shopId, pkgName, registry) {\n  var defaultRoles = [\"owner\", \"admin\", \"createProduct\", \"guest\", pkgName];\n  var globalRoles = defaultRoles;\n\n  if (registry) {\n    // for each registry item define and push roles\n    for (var _iterator = registry, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var registryItem = _ref;\n      // packages don't need to define specific permission routes.,\n      // the routeName will be used as default roleName for each route.\n      // todo: check dependency on this.\n      var roleName = getRouteName(pkgName, registryItem);\n\n      if (roleName) {\n        defaultRoles.push(roleName);\n      } // Get all defined permissions, add them to an array\n      // define permissions if you need to check custom permission\n\n\n      if (registryItem.permissions) {\n        for (var _iterator2 = registryItem.permissions, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n          var _ref2;\n\n          if (_isArray2) {\n            if (_i2 >= _iterator2.length) break;\n            _ref2 = _iterator2[_i2++];\n          } else {\n            _i2 = _iterator2.next();\n            if (_i2.done) break;\n            _ref2 = _i2.value;\n          }\n\n          var permission = _ref2;\n          defaultRoles.push(permission.permission);\n        }\n      }\n    }\n  } else {\n    Logger.debug(\"No routes loaded for \" + pkgName);\n  } // only unique roles\n\n\n  var defaultOwnerRoles = _.uniq(defaultRoles); // get existing shop owners to add new roles to\n\n\n  var owners = [];\n  var shopOwners = Roles.getUsersInRole(defaultOwnerRoles).fetch(); // just a nice warning. something is misconfigured.\n\n  if (!shopOwners) {\n    Logger.warn(\"Cannot assign roles without existing owner users.\");\n    return;\n  } // assign this package permission to each existing owner.\n\n\n  for (var _iterator3 = shopOwners, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n    var _ref3;\n\n    if (_isArray3) {\n      if (_i3 >= _iterator3.length) break;\n      _ref3 = _iterator3[_i3++];\n    } else {\n      _i3 = _iterator3.next();\n      if (_i3.done) break;\n      _ref3 = _i3.value;\n    }\n\n    var account = _ref3;\n    owners.push(account._id);\n  } // we don't use accounts/addUserPermissions here because we may not yet have permissions\n\n\n  Roles.addUsersToRoles(owners, defaultOwnerRoles, shopId); // the reaction owner has permissions to all sites by default\n\n  Roles.addUsersToRoles(owners, globalRoles, Roles.GLOBAL_GROUP);\n  Logger.debug(\"Owner permissions added for \" + pkgName);\n}","map":{"version":3,"sources":["/server/api/core/assignRoles.js"],"names":["Roles","Logger","getRouteName","packageName","registryItem","routeName","name","template","split","assignOwnerRoles","shopId","pkgName","registry","defaultRoles","globalRoles","roleName","push","permissions","permission","debug","defaultOwnerRoles","_","uniq","owners","shopOwners","getUsersInRole","fetch","warn","account","_id","addUsersToRoles","GLOBAL_GROUP"],"mappings":"AAAA,OAAS;AAAa;WAAtB;;AAAA;;;;;;;;;;;;GACA,AAAS,AAAc,A,AAAvB,AAEA;;AAWA,AAAS,AAAa,AAAa,AAAc;;;;;;;;;;GAC/C,AAAI,SAAJ;MACA;;MAAI,eAAJ,AAAmB;QACb,aAAJ,AAAiB,MAAM,AACrB;kBAAY,aAAZ,AAAyB,AAC1B;AAFD,eAEW,aAAJ,AAAiB,UAAU,AAChC;AAAa,kBAAE,AAAY,oBAAG,aAA9B,AAA2C,AAAS,AACrD;AAFM,KAAA,MAEA,AACL;AAAa,uBAAb,AAAe,AAAY,AAC5B;AAP8B,AAQ/B,KAR+B,AAC/B;;;qCAQA;WAAA,AAAY,AAAU,AAAM,AAAK,AACjC;AAAA,AAAO,AACR;;;A,AACD,AAAO,AACR,AAGD,EAcA,AAAO,AAAS,AAAiB,AAAQ,AAAS,AAAU,AAC1D;;;;;;;;;;;;;;AAAM,SAAe,AAAC,iBAAD,AAAU,QAAS,SAAnB,AAAoC;MACnD,AAAc,yBAApB;oBAEA,AAAI,AAAU,AACV;;gBACF;AAAA,AAAK,AAAM,AAAgB,AAAU,AACnC;;AACA;;;;;;;;;;;;AACA;AACA;AAAA,AAAM,AAAW,AAAa,AAAS;2CACvC;;UAAA,AAAI,UAAU,AACZ;qBAAA,AAAa,KAAb,AAAkB,AACnB;AAPkC,AASnC,AACA;AACA;;;UAAI,aAAJ,AAAiB,aAAa,AAC5B;AAAK,8BAAoB,aAAzB,AAAsC;AAAa,AACjD;;;;;;;;;;;cADF,AAAW;uBACT,AAAa,KAAK,WAAlB,AAA6B,AAC9B;AACF;AACF;AACF;AAnBD,SAmBO,AACL;WAAA,AAAO,AAAO,gCAAd,AAAqC,AAAQ,AAC9C;AAzByD,AA0B1D,GAzBA,AAAqB,AAA6C,AAClE;;;iCAyBA,eA3B0D,AA2B1D,AAAM,AAAoB,AAAE,AAAK,AACjC;;;;2DACA,SAAA,AAAM,AAAS,AACf;;OAAM,YA9BoD,AA8B1D,AAAmB,AAAM,AAAe,AAAmB,AAC3D;gBACA;AAAA,AAAI,AAAC,AAAY,AACf;AAAA,AAAO,AAAK,AACZ,IACD;;;AAnCyD,AAoC1D;;;;;;;;;;;;;;AACA,IAAA,AAAK,AAAM,AAAW,AAAY,AAChC;;;QAAA,AAAO,AAAK,gBAAZ,AAAoB,2BAtCoC,AAuCzD,AACD;;mDAxC0D,AAyC1D,AAAM,AAAgB,AAAQ,AAAmB,AAEjD;gDACA;AAAA,AAAM,AAAgB,AAAQ,AAAa,AAAM,AAEjD,AAAO,AAAO,AAA8B,AAAQ,AACrD","file":"/server/api/core/assignRoles.js.map","sourcesContent":["import { Roles } from \"meteor/alanning:roles\";\nimport { Logger } from \"/server/api\";\n\n/**\n * getRouteName\n * assemble route name to be standard\n * this is duplicate that exists in Reaction.Router\n * however this is to avoid a dependency in core\n * on the router\n * prefix/package name + registry name or route\n * @param  {[type]} packageName  [package name]\n * @param  {[type]} registryItem [registry object]\n * @return {String}              [route name]\n */\nfunction getRouteName(packageName, registryItem) {\n  let routeName;\n  if (packageName && registryItem) {\n    if (registryItem.name) {\n      routeName = registryItem.name;\n    } else if (registryItem.template) {\n      routeName = `${packageName}/${registryItem.template}`;\n    } else {\n      routeName = `${packageName}`;\n    }\n    // dont include params in the name\n    routeName = routeName.split(\":\")[0];\n    return routeName;\n  }\n  return null;\n}\n\n\n/**\n * assignOwnerRoles\n * populate roles with all the packages and their permissions\n * this is the main way that roles are inserted and created for\n * admin user.\n * we assign all package roles to each owner account for each shopId\n * we assign only basic GLOBAL_GROUP rights\n *\n * @param  {String} shopId - shopId\n * @param  {String} pkgName - Package name\n * @param  {String} registry - registry object\n * @return {undefined}\n */\n\nexport function assignOwnerRoles(shopId, pkgName, registry) {\n  const defaultRoles = [\"owner\", \"admin\", \"createProduct\", \"guest\", pkgName];\n  const globalRoles = defaultRoles;\n\n  if (registry) {\n      // for each registry item define and push roles\n    for (const registryItem of registry) {\n      // packages don't need to define specific permission routes.,\n      // the routeName will be used as default roleName for each route.\n      // todo: check dependency on this.\n      const roleName = getRouteName(pkgName, registryItem);\n      if (roleName) {\n        defaultRoles.push(roleName);\n      }\n\n      // Get all defined permissions, add them to an array\n      // define permissions if you need to check custom permission\n      if (registryItem.permissions) {\n        for (const permission of registryItem.permissions) {\n          defaultRoles.push(permission.permission);\n        }\n      }\n    }\n  } else {\n    Logger.debug(`No routes loaded for ${pkgName}`);\n  }\n  // only unique roles\n  const defaultOwnerRoles = _.uniq(defaultRoles);\n  // get existing shop owners to add new roles to\n  const owners = [];\n  const shopOwners = Roles.getUsersInRole(defaultOwnerRoles).fetch();\n  // just a nice warning. something is misconfigured.\n  if (!shopOwners) {\n    Logger.warn(\"Cannot assign roles without existing owner users.\");\n    return;\n  }\n  // assign this package permission to each existing owner.\n  for (const account of shopOwners) {\n    owners.push(account._id);\n  }\n  // we don't use accounts/addUserPermissions here because we may not yet have permissions\n  Roles.addUsersToRoles(owners, defaultOwnerRoles, shopId);\n\n  // the reaction owner has permissions to all sites by default\n  Roles.addUsersToRoles(owners, globalRoles, Roles.GLOBAL_GROUP);\n\n  Logger.debug(`Owner permissions added for ${pkgName}`);\n}\n"]},"hash":"d2b42bd9fed69be3eb5b233e7fbeaf39db7f7fa2"}
