{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/collections","imported":["Media"],"specifiers":[{"kind":"named","imported":"Media","local":"Media"}]},{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":["removeMedia","updateMediaPriorities"],"specifiers":[{"kind":"local","local":"removeMedia","exported":"removeMedia"},{"kind":"local","local":"updateMediaPriorities","exported":"updateMediaPriorities"}]}}},"options":{"filename":"/server/methods/media.js","filenameRelative":"/server/methods/media.js","inputSourceMap":{"version":3,"sources":["/server/methods/media.js"],"names":["Media","Reaction","removeMedia","ValidatedMethod","name","validate","SimpleSchema","mediaId","type","String","validator","run","hasPermission","Meteor","Error","remove","_id","updateMediaPriorities","sortedMedias","results","forEach","image","index","push","update","$set"],"mappings":"AAAA,OAAS;AAAa;WAAtB;;;;;AAAA;;;;;;;;;;;;GACyB,A,AAAzB,AAAS,AAET,AAOA,AAAO,AAAM,AAAc,AAAI,AAAgB,AAC7C,AAAM,AACN;AAAU,IAAI;QACH,AAAE;;;YADH,AAAiB;;AAChB,GAAQ,EAH0B,AAEnC,AAEP;;AACH;;AAAI,kDAAE;kCAAN,AAAI;AAAa,AACf;;AAAI,AAAC,iBAAS;WAAd,AAAK,AAAuB,AAAkB,AAC5C;;AAPC,AAAoB,A,AAAoB,AAOzC,AAAM,AAAI,AAAO,AAAM,AAAK,AAC7B,AACD,AAAO,AAAM,AAAO,AAAE,AAAK,AAC5B,AAGH;AAVI,CADQ,AAAiB;;;;;;;;;;;KAkB7B;AAAO;AAA8B,AAAI,AAAgB,AACvD,QADW;;QACL,UADiD,gCAEvD;YAAU,IAAI,OAAJ,MAAiB,KACzB;AAAc,AAAE;;QAAM,AAAC,AAAI,UAAJ,AAAiB,AAAE;iBAAS,gCAAE;cAAM;;+BAHN,AAE7C,AAAiB,AACX,AACb;AADqB,AAAC,AAAiB;AAAW;AAErD,AAAI,AAAE;WAAF;AALC,AAA8B,AAAoB,AAKvD,AAAsB,AACpB,AAAI,AAAC,AAAS,AAAc,AAAkB,AAC5C,AAAM,AAAI,AAAO,AAAM,AAAK,AAC7B,AACD,AAAM,AAAU,AAChB,AAAa,AAAQ,AAAC,AAAO,AAAU,AACrC,AAAQ,AAAK,AAAM,AAAO,AAAM,AAAS,AACvC,AAAM,AACJ,AAAqB,AAG1B,AAED,AAAO,AACR","file":"/server/methods/media.js.map","sourcesContent":["import { Media } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\n\n/**\n * removeMedia\n * @summary remove media from mongodb collection\n * @type {ValidatedMethod}\n * @param {String} mediaId - media _id\n * @return {Error|Undefined} object with error or nothing\n */\nexport const removeMedia = new ValidatedMethod({\n  name: \"removeMedia\",\n  validate: new SimpleSchema({\n    mediaId: { type: String }\n  }).validator(),\n  run({ mediaId }) {\n    if (!Reaction.hasPermission(\"createProduct\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    return Media.remove({ _id: mediaId });\n  }\n});\n\n/**\n * updateMediaPriorities\n * @summary sorting media by array indexes\n * @type {ValidatedMethod}\n * @param {Array} sortedMedias - array with images _ids\n * @return {Array} with results\n */\nexport const updateMediaPriorities = new ValidatedMethod({\n  name: \"updateMediaPriorities\",\n  validate: new SimpleSchema({\n    sortedMedias: { type: [new SimpleSchema({ mediaId: { type: String } })] }\n  }).validator(),\n  run({ sortedMedias }) {\n    if (!Reaction.hasPermission(\"createProduct\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    const results = [];\n    sortedMedias.forEach((image, index) => {\n      results.push(Media.update(image.mediaId, {\n        $set: {\n          \"metadata.priority\": index\n        }\n      }));\n    });\n\n    return results;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/methods/media.js.map","sourceFileName":"/server/methods/media.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"media"},"ignored":false,"code":"module.export({\n  removeMedia: function () {\n    return removeMedia;\n  },\n  updateMediaPriorities: function () {\n    return updateMediaPriorities;\n  }\n});\nvar Media = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Media: function (v) {\n    Media = v;\n  }\n}, 0);\nvar Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 1);\nvar removeMedia = new ValidatedMethod({\n  name: \"removeMedia\",\n  validate: new SimpleSchema({\n    mediaId: {\n      type: String\n    }\n  }).validator(),\n  run: function (_ref) {\n    var mediaId = _ref.mediaId;\n\n    if (!Reaction.hasPermission(\"createProduct\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    return Media.remove({\n      _id: mediaId\n    });\n  }\n});\nvar updateMediaPriorities = new ValidatedMethod({\n  name: \"updateMediaPriorities\",\n  validate: new SimpleSchema({\n    sortedMedias: {\n      type: [new SimpleSchema({\n        mediaId: {\n          type: String\n        }\n      })]\n    }\n  }).validator(),\n  run: function (_ref2) {\n    var sortedMedias = _ref2.sortedMedias;\n\n    if (!Reaction.hasPermission(\"createProduct\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    var results = [];\n    sortedMedias.forEach(function (image, index) {\n      results.push(Media.update(image.mediaId, {\n        $set: {\n          \"metadata.priority\": index\n        }\n      }));\n    });\n    return results;\n  }\n});","map":{"version":3,"sources":["/server/methods/media.js"],"names":["Media","Reaction","removeMedia","ValidatedMethod","name","validate","SimpleSchema","mediaId","type","String","validator","run","hasPermission","Meteor","Error","remove","_id","updateMediaPriorities","sortedMedias","results","forEach","image","index","push","update","$set"],"mappings":"AAAA,OAAS;AAAa;WAAtB;;;;;AAAA;;;;;;;;;;;;GACyB,A,AAAzB,AAAS,AAET,AAOA,AAAO,AAAM,AAAc,AAAI,AAAgB,AAC7C,AAAM,AACN;AAAU,IAAI;QACH,AAAE;;;YADH,AAAiB;;AAChB,GAAQ,EAH0B,AAEnC,AAEP;;AACH;;AAAI,kDAAE;kCAAN,AAAI;AAAa,AACf;;AAAI,AAAC,iBAAS;WAAd,AAAK,AAAuB,AAAkB,AAC5C;;AAPC,AAAoB,A,AAAoB,AAOzC,AAAM,AAAI,AAAO,AAAM,AAAK,AAC7B,AACD,AAAO,AAAM,AAAO,AAAE,AAAK,AAC5B,AAGH;AAVI,CADQ,AAAiB;;;;;;;;;;;KAkB7B;AAAO;AAA8B,AAAI,AAAgB,AACvD,QADW;;QACL,UADiD,gCAEvD;YAAU,IAAI,OAAJ,MAAiB,KACzB;AAAc,AAAE;;QAAM,AAAC,AAAI,UAAJ,AAAiB,AAAE;iBAAS,gCAAE;cAAM;;+BAHN,AAE7C,AAAiB,AACX,AACb;AADqB,AAAC,AAAiB;AAAW;AAErD,AAAI,AAAE;WAAF;AALC,AAA8B,AAAoB,AAKvD,AAAsB,AACpB,AAAI,AAAC,AAAS,AAAc,AAAkB,AAC5C,AAAM,AAAI,AAAO,AAAM,AAAK,AAC7B,AACD,AAAM,AAAU,AAChB,AAAa,AAAQ,AAAC,AAAO,AAAU,AACrC,AAAQ,AAAK,AAAM,AAAO,AAAM,AAAS,AACvC,AAAM,AACJ,AAAqB,AAG1B,AAED,AAAO,AACR","file":"/server/methods/media.js.map","sourcesContent":["import { Media } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\n\n/**\n * removeMedia\n * @summary remove media from mongodb collection\n * @type {ValidatedMethod}\n * @param {String} mediaId - media _id\n * @return {Error|Undefined} object with error or nothing\n */\nexport const removeMedia = new ValidatedMethod({\n  name: \"removeMedia\",\n  validate: new SimpleSchema({\n    mediaId: { type: String }\n  }).validator(),\n  run({ mediaId }) {\n    if (!Reaction.hasPermission(\"createProduct\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    return Media.remove({ _id: mediaId });\n  }\n});\n\n/**\n * updateMediaPriorities\n * @summary sorting media by array indexes\n * @type {ValidatedMethod}\n * @param {Array} sortedMedias - array with images _ids\n * @return {Array} with results\n */\nexport const updateMediaPriorities = new ValidatedMethod({\n  name: \"updateMediaPriorities\",\n  validate: new SimpleSchema({\n    sortedMedias: { type: [new SimpleSchema({ mediaId: { type: String } })] }\n  }).validator(),\n  run({ sortedMedias }) {\n    if (!Reaction.hasPermission(\"createProduct\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    const results = [];\n    sortedMedias.forEach((image, index) => {\n      results.push(Media.update(image.mediaId, {\n        $set: {\n          \"metadata.priority\": index\n        }\n      }));\n    });\n\n    return results;\n  }\n});\n"]},"hash":"ad10c4c5f47c00eb08b063945a0f60747cfe4048"}
