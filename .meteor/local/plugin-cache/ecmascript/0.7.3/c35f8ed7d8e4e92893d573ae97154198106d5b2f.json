{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"./helpers","imported":["shopIdAutoValue"],"specifiers":[{"kind":"named","imported":"shopIdAutoValue","local":"shopIdAutoValue"}]},{"source":"./address","imported":["Address"],"specifiers":[{"kind":"named","imported":"Address","local":"Address"}]},{"source":"./metafield","imported":["Metafield"],"specifiers":[{"kind":"named","imported":"Metafield","local":"Metafield"}]}],"exports":{"exported":["Profile","Email","Accounts"],"specifiers":[{"kind":"local","local":"Profile","exported":"Profile"},{"kind":"local","local":"Email","exported":"Email"},{"kind":"local","local":"Accounts","exported":"Accounts"}]}}},"options":{"filename":"/lib/collections/schemas/accounts.js","filenameRelative":"/lib/collections/schemas/accounts.js","inputSourceMap":{"version":3,"sources":["/lib/collections/schemas/accounts.js"],"names":["SimpleSchema","shopIdAutoValue","Address","Metafield","TaxSettings","exemptionNo","type","String","optional","customerUsageType","Profile","addressBook","name","picture","Email","provides","defaultValue","address","regEx","RegEx","verified","Boolean","Accounts","userId","Id","index","label","sessions","shopId","autoValue","emails","acceptsMarketing","state","taxSettings","note","profile","metafields","createdAt","Date","isInsert","isUpsert","$setOnInsert","updatedAt","isUpdate","$set"],"mappings":"AAAA,OAAS;AAAT;WAA6B;;;;;AAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;G,AACA,AAAS,AAAuB,AAChC,AAAS,AAAe,AACxB,AAAS,AAAiB,AAE1B;AAIA,AAAM,AAAc,AAAI,AAAa,AACnC,AAAa,AACX,AAAM;;OACI;AAHuB;UAKhB,AACjB;AAAM,cADW,AAEjB,AAAU;AAFZ;;UAMF;AAAO,AAAM,cAAU,AAAI,AAAa,AACtC,AAAa,AACX,AAAM,AAAC,AACP,AAAU;AAdd,AAAoB,AAAiB;AACtB,EAEX;;AAaI;UACE,CADF,AAEJ;cAPoC,AAKhC,AAEM,AAEZ;AAHE;;UAGO,AACD,AACN;cAXmB,AAAiB,AAS7B,AAEG;AAFH,AACP;AAVG;AAeA,UAAM,AAAQ,AAAI,AAAa,AACpC;AAAU,cAD0B,AAC1B,AACR,AAAM,AACN,AAAc,AACd,AAAU;AAJd;AAVE;;AAgBS;UAAA,AACD,AACN;AAAO,kBAR2B,AAM3B,AAEA,AAAa,AAAM;cAE5B,AAAU,AACR;AAJA;AAIM;UADE,AAEM,AACd;WAAU,mBAbO,AAAiB,AAU1B;AAAA,AAER;AAZG,AAiBP,A;;kBAIA;AAAO,AAAM,cAAW,AAAI,AAAa,AACvC,AAAQ,AACN,AAAM,AACN,AAAO,AAAa,AAAM,AAC1B,AAAO,AACP,AAAO,AAET,AAAU,AACR;;AAvBF;AAuBQ,AAAC,IADC,AACF;;UAR+B,AAO7B,AAGD;8BAET;AAAQ,WACN;AAAM,WADA,AAEN,AAAW,AACX;AARQ,AAEE,AACV;AAKO;WAf8B,AAY/B,AAIC;cAET;AAAQ,WAAA,AACN,AAAM,AAAC,AACP;AARM,AAGC,AAAa,AAAM,AAC1B;;UAMF;eAAkB,AAChB;AAAM,WADU,mBAEhB;WAFgB,AAEF,AACd,AAAU;AAzB2B,AAkB/B,AAEI;AApB2B;AA2BhC,WACL;AAAM,cADD,AAEL,AAAc,AACd;AAHF;AAGY;UAEZ;AAAa,kBACX;AAAM,cADK,AAEX,AAAU;AAlC2B,AA2BhC;AA3BgC;AAoCjC,UACJ;AADI,AACE,kBACN;cAtCqC,AAoCjC,AAEM,AAEZ;AAJA;AAIS;UAAA,AACD,AACN;cA1CqC,AAwC9B,AAEG,AAEZ;AAHE;;UAGU,AACJ,AAAC,AACP;cA9CqC,AA4C3B,AAEA,AAEZ;AAJY,AACV;;UAGS,AACH;cACN,AAAY,AACV;AAHO,AACT;AAEM;WACF,AAAO,AAAI,AACZ;AAFD,AAEO,cAAA,AAAI,AAAK,AAAU,AACxB,AAAO,AACL;AAJJ,AAAS,AAAU,AACjB;;AAEA,UAGD;2BACF;;mBA1DoC,AAgD5B;gCAYX;AAAW;AAAA,AACH,4BACN;AADA;AACY,AACV;AAAA,AAAI,AAAK,AAAU,AACjB,AAAO,AACL;AAXK,AACS,AAAI;;AASpB,UAGD;AAJD,AAIO,2BAAA,AAAI,AAAK,AAAU,AACxB;eAAO,UACL;;oBATG,AAWN,AACF;AAJG,AAAO,AACS,AAAI;;;AAId,4BAzEP,AAAiB,AAAiB,AA4D5B;AAaT;;;;AATW,AACC,AAAI;AAxDhB","file":"/lib/collections/schemas/accounts.js.map","sourcesContent":["import { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { shopIdAutoValue } from \"./helpers\";\nimport { Address } from \"./address\";\nimport { Metafield } from \"./metafield\";\n\n/**\n * Accounts Schemas\n */\n\nconst TaxSettings = new SimpleSchema({\n  exemptionNo: {\n    type: String,\n    optional: true\n  },\n  customerUsageType: {\n    type: String,\n    optional: true\n  }\n});\n\nexport const Profile = new SimpleSchema({\n  addressBook: {\n    type: [Address],\n    optional: true\n  },\n  name: {\n    type: String,\n    optional: true\n  },\n  picture: {\n    type: String,\n    optional: true\n  }\n});\n\nexport const Email = new SimpleSchema({\n  provides: {\n    type: String,\n    defaultValue: \"default\",\n    optional: true\n  },\n  address: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  verified: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  }\n});\n\n/**\n * Reaction Schemas Accounts\n */\n\nexport const Accounts = new SimpleSchema({\n  userId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1,\n    label: \"Accounts ShopId\"\n  },\n  sessions: {\n    type: [String],\n    optional: true,\n    index: 1\n  },\n  shopId: {\n    type: String,\n    autoValue: shopIdAutoValue,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1\n  },\n  emails: {\n    type: [Email],\n    optional: true\n  },\n  acceptsMarketing: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  state: {\n    type: String,\n    defaultValue: \"new\",\n    optional: true\n  },\n  taxSettings: {\n    type: TaxSettings,\n    optional: true\n  },\n  note: {\n    type: String,\n    optional: true\n  },\n  profile: {\n    type: Profile,\n    optional: true\n  },\n  metafields: {\n    type: [Metafield],\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue() {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    autoValue() {\n      if (this.isUpdate) {\n        return {\n          $set: new Date\n        };\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    },\n    optional: true\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/collections/schemas/accounts.js.map","sourceFileName":"/lib/collections/schemas/accounts.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"accounts"},"ignored":false,"code":"module.export({\n  Profile: function () {\n    return Profile;\n  },\n  Email: function () {\n    return Email;\n  },\n  Accounts: function () {\n    return Accounts;\n  }\n});\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar shopIdAutoValue = void 0;\nmodule.importSync(\"./helpers\", {\n  shopIdAutoValue: function (v) {\n    shopIdAutoValue = v;\n  }\n}, 1);\nvar Address = void 0;\nmodule.importSync(\"./address\", {\n  Address: function (v) {\n    Address = v;\n  }\n}, 2);\nvar Metafield = void 0;\nmodule.importSync(\"./metafield\", {\n  Metafield: function (v) {\n    Metafield = v;\n  }\n}, 3);\n/**\n * Accounts Schemas\n */var TaxSettings = new SimpleSchema({\n  exemptionNo: {\n    type: String,\n    optional: true\n  },\n  customerUsageType: {\n    type: String,\n    optional: true\n  }\n});\nvar Profile = new SimpleSchema({\n  addressBook: {\n    type: [Address],\n    optional: true\n  },\n  name: {\n    type: String,\n    optional: true\n  },\n  picture: {\n    type: String,\n    optional: true\n  }\n});\nvar Email = new SimpleSchema({\n  provides: {\n    type: String,\n    defaultValue: \"default\",\n    optional: true\n  },\n  address: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  verified: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  }\n});\nvar Accounts = new SimpleSchema({\n  userId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1,\n    label: \"Accounts ShopId\"\n  },\n  sessions: {\n    type: [String],\n    optional: true,\n    index: 1\n  },\n  shopId: {\n    type: String,\n    autoValue: shopIdAutoValue,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1\n  },\n  emails: {\n    type: [Email],\n    optional: true\n  },\n  acceptsMarketing: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  state: {\n    type: String,\n    defaultValue: \"new\",\n    optional: true\n  },\n  taxSettings: {\n    type: TaxSettings,\n    optional: true\n  },\n  note: {\n    type: String,\n    optional: true\n  },\n  profile: {\n    type: Profile,\n    optional: true\n  },\n  metafields: {\n    type: [Metafield],\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isUpdate) {\n        return {\n          $set: new Date()\n        };\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      }\n    },\n    optional: true\n  }\n});","map":{"version":3,"sources":["/lib/collections/schemas/accounts.js"],"names":["SimpleSchema","shopIdAutoValue","Address","Metafield","TaxSettings","exemptionNo","type","String","optional","customerUsageType","Profile","addressBook","name","picture","Email","provides","defaultValue","address","regEx","RegEx","verified","Boolean","Accounts","userId","Id","index","label","sessions","shopId","autoValue","emails","acceptsMarketing","state","taxSettings","note","profile","metafields","createdAt","Date","isInsert","isUpsert","$setOnInsert","updatedAt","isUpdate","$set"],"mappings":"AAAA,OAAS;AAAT;WAA6B;;;;;AAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;G,AACA,AAAS,AAAuB,AAChC,AAAS,AAAe,AACxB,AAAS,AAAiB,AAE1B;AAIA,AAAM,AAAc,AAAI,AAAa,AACnC,AAAa,AACX,AAAM;;OACI;AAHuB;UAKhB,AACjB;AAAM,cADW,AAEjB,AAAU;AAFZ;;UAMF;AAAO,AAAM,cAAU,AAAI,AAAa,AACtC,AAAa,AACX,AAAM,AAAC,AACP,AAAU;AAdd,AAAoB,AAAiB;AACtB,EAEX;;AAaI;UACE,CADF,AAEJ;cAPoC,AAKhC,AAEM,AAEZ;AAHE;;UAGO,AACD,AACN;cAXmB,AAAiB,AAS7B,AAEG;AAFH,AACP;AAVG;AAeA,UAAM,AAAQ,AAAI,AAAa,AACpC;AAAU,cAD0B,AAC1B,AACR,AAAM,AACN,AAAc,AACd,AAAU;AAJd;AAVE;;AAgBS;UAAA,AACD,AACN;AAAO,kBAR2B,AAM3B,AAEA,AAAa,AAAM;cAE5B,AAAU,AACR;AAJA;AAIM;UADE,AAEM,AACd;WAAU,mBAbO,AAAiB,AAU1B;AAAA,AAER;AAZG,AAiBP,A;;kBAIA;AAAO,AAAM,cAAW,AAAI,AAAa,AACvC,AAAQ,AACN,AAAM,AACN,AAAO,AAAa,AAAM,AAC1B,AAAO,AACP,AAAO,AAET,AAAU,AACR;;AAvBF;AAuBQ,AAAC,IADC,AACF;;UAR+B,AAO7B,AAGD;8BAET;AAAQ,WACN;AAAM,WADA,AAEN,AAAW,AACX;AARQ,AAEE,AACV;AAKO;WAf8B,AAY/B,AAIC;cAET;AAAQ,WAAA,AACN,AAAM,AAAC,AACP;AARM,AAGC,AAAa,AAAM,AAC1B;;UAMF;eAAkB,AAChB;AAAM,WADU,mBAEhB;WAFgB,AAEF,AACd,AAAU;AAzB2B,AAkB/B,AAEI;AApB2B;AA2BhC,WACL;AAAM,cADD,AAEL,AAAc,AACd;AAHF;AAGY;UAEZ;AAAa,kBACX;AAAM,cADK,AAEX,AAAU;AAlC2B,AA2BhC;AA3BgC;AAoCjC,UACJ;AADI,AACE,kBACN;cAtCqC,AAoCjC,AAEM,AAEZ;AAJA;AAIS;UAAA,AACD,AACN;cA1CqC,AAwC9B,AAEG,AAEZ;AAHE;;UAGU,AACJ,AAAC,AACP;cA9CqC,AA4C3B,AAEA,AAEZ;AAJY,AACV;;UAGS,AACH;cACN,AAAY,AACV;AAHO,AACT;AAEM;WACF,AAAO,AAAI,AACZ;AAFD,AAEO,cAAA,AAAI,AAAK,AAAU,AACxB,AAAO,AACL;AAJJ,AAAS,AAAU,AACjB;;AAEA,UAGD;2BACF;;mBA1DoC,AAgD5B;gCAYX;AAAW;AAAA,AACH,4BACN;AADA;AACY,AACV;AAAA,AAAI,AAAK,AAAU,AACjB,AAAO,AACL;AAXK,AACS,AAAI;;AASpB,UAGD;AAJD,AAIO,2BAAA,AAAI,AAAK,AAAU,AACxB;eAAO,UACL;;oBATG,AAWN,AACF;AAJG,AAAO,AACS,AAAI;;;AAId,4BAzEP,AAAiB,AAAiB,AA4D5B;AAaT;;;;AATW,AACC,AAAI;AAxDhB","file":"/lib/collections/schemas/accounts.js.map","sourcesContent":["import { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { shopIdAutoValue } from \"./helpers\";\nimport { Address } from \"./address\";\nimport { Metafield } from \"./metafield\";\n\n/**\n * Accounts Schemas\n */\n\nconst TaxSettings = new SimpleSchema({\n  exemptionNo: {\n    type: String,\n    optional: true\n  },\n  customerUsageType: {\n    type: String,\n    optional: true\n  }\n});\n\nexport const Profile = new SimpleSchema({\n  addressBook: {\n    type: [Address],\n    optional: true\n  },\n  name: {\n    type: String,\n    optional: true\n  },\n  picture: {\n    type: String,\n    optional: true\n  }\n});\n\nexport const Email = new SimpleSchema({\n  provides: {\n    type: String,\n    defaultValue: \"default\",\n    optional: true\n  },\n  address: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  verified: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  }\n});\n\n/**\n * Reaction Schemas Accounts\n */\n\nexport const Accounts = new SimpleSchema({\n  userId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1,\n    label: \"Accounts ShopId\"\n  },\n  sessions: {\n    type: [String],\n    optional: true,\n    index: 1\n  },\n  shopId: {\n    type: String,\n    autoValue: shopIdAutoValue,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1\n  },\n  emails: {\n    type: [Email],\n    optional: true\n  },\n  acceptsMarketing: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  state: {\n    type: String,\n    defaultValue: \"new\",\n    optional: true\n  },\n  taxSettings: {\n    type: TaxSettings,\n    optional: true\n  },\n  note: {\n    type: String,\n    optional: true\n  },\n  profile: {\n    type: Profile,\n    optional: true\n  },\n  metafields: {\n    type: [Metafield],\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue() {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    autoValue() {\n      if (this.isUpdate) {\n        return {\n          $set: new Date\n        };\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    },\n    optional: true\n  }\n});\n"]},"hash":"c35f8ed7d8e4e92893d573ae97154198106d5b2f"}
