{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/lib/collections","imported":["Packages"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"fibers/future","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Future"}]},{"source":"braintree","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Braintree"}]},{"source":"accounting-js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"accounting"}]}],"exports":{"exported":["BraintreeApi"],"specifiers":[{"kind":"local","local":"BraintreeApi","exported":"BraintreeApi"}]}}},"options":{"filename":"/imports/plugins/included/payments-braintree/server/methods/braintreeApi.js","filenameRelative":"/imports/plugins/included/payments-braintree/server/methods/braintreeApi.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-braintree/server/methods/braintreeApi.js"],"names":["Meteor","Packages","Reaction","Logger","Future","Braintree","accounting","BraintreeApi","apiCall","getPaymentObj","amount","options","submitForSettlement","parseCardData","data","cardholderName","name","number","expirationMonth","expirationYear","cvv","getSettings","settings","ref","valueName","undefined","getAccountOptions","environment","findOne","shopId","getShopId","enabled","mode","braintree","merchantId","publicKey","privateKey","Error","getGateway","accountOptions","Environment","Production","Sandbox","gateway","connect","getRefundDetails","refundId","check","String","braintreeFind","wrapAsync","transaction","find","findResults","paymentSubmit","paymentSubmitDetails","paymentObj","transactionType","creditCard","cardData","paymentData","total","fut","sale","bindEnvironment","error","result","return","saved","success","response","Events","warn","wait","captureCharge","paymentCaptureDetails","transactionId","toFixed","void","e","createRefund","refundDetails","refund","errors","errorCollections","validationErrors","base","code","message","fatal","listRefunds","refundListDetails","refundIds","length","push","type","parseFloat","created","moment","createdAt","unix","currency","currencyIsoCode","raw"],"mappings":"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","file":"/imports/plugins/included/payments-braintree/server/methods/braintreeApi.js.map","sourcesContent":["/* eslint camelcase: 0 */\n// meteor modules\nimport { Meteor } from \"meteor/meteor\";\n// reaction modules\nimport { Packages } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\nimport Future from \"fibers/future\";\nimport Braintree from \"braintree\";\nimport accounting from \"accounting-js\";\n\nexport const BraintreeApi = {};\nBraintreeApi.apiCall = {};\n\n\nfunction getPaymentObj() {\n  return {\n    amount: \"\",\n    options: { submitForSettlement: true }\n  };\n}\n\nfunction parseCardData(data) {\n  return {\n    cardholderName: data.name,\n    number: data.number,\n    expirationMonth: data.expirationMonth,\n    expirationYear: data.expirationYear,\n    cvv: data.cvv\n  };\n}\n\n\nfunction getSettings(settings, ref, valueName) {\n  if (settings !== null) {\n    return settings[valueName];\n  } else if (ref !== null) {\n    return ref[valueName];\n  }\n  return undefined;\n}\n\nfunction getAccountOptions() {\n  let environment;\n  const settings = Packages.findOne({\n    name: \"reaction-braintree\",\n    shopId: Reaction.getShopId(),\n    enabled: true\n  }).settings;\n  if (typeof settings !== \"undefined\" && settings !== null ? settings.mode : undefined === true) {\n    environment = \"production\";\n  } else {\n    environment = \"sandbox\";\n  }\n\n  const ref = Meteor.settings.braintree;\n  const options = {\n    environment: environment,\n    merchantId: getSettings(settings, ref, \"merchant_id\"),\n    publicKey: getSettings(settings, ref, \"public_key\"),\n    privateKey: getSettings(settings, ref, \"private_key\")\n  };\n  if (!options.merchantId) {\n    throw new Meteor.Error(\"invalid-credentials\", \"Invalid Braintree Credentials\");\n  }\n  return options;\n}\n\nfunction getGateway() {\n  const accountOptions = getAccountOptions();\n  if (accountOptions.environment === \"production\") {\n    accountOptions.environment = Braintree.Environment.Production;\n  } else {\n    accountOptions.environment = Braintree.Environment.Sandbox;\n  }\n  const gateway = Braintree.connect(accountOptions);\n  return gateway;\n}\n\ngetRefundDetails = function (refundId) {\n  check(refundId, String);\n  const gateway = getGateway();\n  const braintreeFind = Meteor.wrapAsync(gateway.transaction.find, gateway.transaction);\n  const findResults = braintreeFind(refundId);\n  return findResults;\n};\n\n\nBraintreeApi.apiCall.paymentSubmit = function (paymentSubmitDetails) {\n  const gateway = getGateway();\n  const paymentObj = getPaymentObj();\n  if (paymentSubmitDetails.transactionType === \"authorize\") {\n    paymentObj.options.submitForSettlement = false;\n  }\n  paymentObj.creditCard = parseCardData(paymentSubmitDetails.cardData);\n  paymentObj.amount = paymentSubmitDetails.paymentData.total;\n  const fut = new Future();\n  gateway.transaction.sale(paymentObj, Meteor.bindEnvironment(function (error, result) {\n    if (error) {\n      fut.return({\n        saved: false,\n        error: error\n      });\n    } else if (!result.success) {\n      fut.return({\n        saved: false,\n        response: result\n      });\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, function (error) {\n    Reaction.Events.warn(error);\n  }));\n\n  return fut.wait();\n};\n\n\nBraintreeApi.apiCall.captureCharge = function (paymentCaptureDetails) {\n  const transactionId = paymentCaptureDetails.transactionId;\n  const amount = accounting.toFixed(paymentCaptureDetails.amount, 2);\n  const gateway = getGateway();\n  const fut = new Future();\n\n  if (amount === accounting.toFixed(0, 2)) {\n    gateway.transaction.void(transactionId, function (error, result) {\n      if (error) {\n        fut.return({\n          saved: false,\n          error: error\n        });\n      } else {\n        fut.return({\n          saved: true,\n          response: result\n        });\n      }\n    }, function (e) {\n      Logger.warn(e);\n    });\n    return fut.wait();\n  }\n  gateway.transaction.submitForSettlement(transactionId, amount, Meteor.bindEnvironment(function (error, result) {\n    if (error) {\n      fut.return({\n        saved: false,\n        error: error\n      });\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, function (e) {\n    Logger.warn(e);\n  }));\n\n  return fut.wait();\n};\n\n\nBraintreeApi.apiCall.createRefund = function (refundDetails) {\n  const transactionId = refundDetails.transactionId;\n  const amount = refundDetails.amount;\n  const gateway = getGateway();\n  const fut = new Future();\n  gateway.transaction.refund(transactionId, amount, Meteor.bindEnvironment(function (error, result) {\n    if (error) {\n      fut.return({\n        saved: false,\n        error: error\n      });\n    } else if (!result.success) {\n      if (result.errors.errorCollections.transaction.validationErrors.base[0].code === \"91506\") {\n        fut.return({\n          saved: false,\n          error: \"Braintree does not allow refunds until transactions are settled. This can take up to 24 hours. Please try again later.\"\n        });\n      } else {\n        fut.return({\n          saved: false,\n          error: result.message\n        });\n      }\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, function (e) {\n    Logger.fatal(e);\n  }));\n  return fut.wait();\n};\n\n\nBraintreeApi.apiCall.listRefunds = function (refundListDetails) {\n  const transactionId = refundListDetails.transactionId;\n  const gateway = getGateway();\n  const braintreeFind = Meteor.wrapAsync(gateway.transaction.find, gateway.transaction);\n  const findResults = braintreeFind(transactionId);\n  const result = [];\n  if (findResults.refundIds.length > 0) {\n    for (const refund of findResults.refundIds) {\n      const refundDetails = getRefundDetails(refund);\n      result.push({\n        type: \"refund\",\n        amount: parseFloat(refundDetails.amount),\n        created: moment(refundDetails.createdAt).unix() * 1000,\n        currency: refundDetails.currencyIsoCode,\n        raw: refundDetails\n      });\n    }\n  }\n\n  return result;\n};\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-braintree/server/methods/braintreeApi.js.map","sourceFileName":"/imports/plugins/included/payments-braintree/server/methods/braintreeApi.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"braintreeApi"},"ignored":false,"code":"module.export({\n  BraintreeApi: function () {\n    return BraintreeApi;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 1);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 2);\nvar Future = void 0;\nmodule.importSync(\"fibers/future\", {\n  \"default\": function (v) {\n    Future = v;\n  }\n}, 3);\nvar Braintree = void 0;\nmodule.importSync(\"braintree\", {\n  \"default\": function (v) {\n    Braintree = v;\n  }\n}, 4);\nvar accounting = void 0;\nmodule.importSync(\"accounting-js\", {\n  \"default\": function (v) {\n    accounting = v;\n  }\n}, 5);\nvar BraintreeApi = {};\nBraintreeApi.apiCall = {};\n\nfunction getPaymentObj() {\n  return {\n    amount: \"\",\n    options: {\n      submitForSettlement: true\n    }\n  };\n}\n\nfunction parseCardData(data) {\n  return {\n    cardholderName: data.name,\n    number: data.number,\n    expirationMonth: data.expirationMonth,\n    expirationYear: data.expirationYear,\n    cvv: data.cvv\n  };\n}\n\nfunction getSettings(settings, ref, valueName) {\n  if (settings !== null) {\n    return settings[valueName];\n  } else if (ref !== null) {\n    return ref[valueName];\n  }\n\n  return undefined;\n}\n\nfunction getAccountOptions() {\n  var environment = void 0;\n  var settings = Packages.findOne({\n    name: \"reaction-braintree\",\n    shopId: Reaction.getShopId(),\n    enabled: true\n  }).settings;\n\n  if (typeof settings !== \"undefined\" && settings !== null ? settings.mode : undefined === true) {\n    environment = \"production\";\n  } else {\n    environment = \"sandbox\";\n  }\n\n  var ref = Meteor.settings.braintree;\n  var options = {\n    environment: environment,\n    merchantId: getSettings(settings, ref, \"merchant_id\"),\n    publicKey: getSettings(settings, ref, \"public_key\"),\n    privateKey: getSettings(settings, ref, \"private_key\")\n  };\n\n  if (!options.merchantId) {\n    throw new Meteor.Error(\"invalid-credentials\", \"Invalid Braintree Credentials\");\n  }\n\n  return options;\n}\n\nfunction getGateway() {\n  var accountOptions = getAccountOptions();\n\n  if (accountOptions.environment === \"production\") {\n    accountOptions.environment = Braintree.Environment.Production;\n  } else {\n    accountOptions.environment = Braintree.Environment.Sandbox;\n  }\n\n  var gateway = Braintree.connect(accountOptions);\n  return gateway;\n}\n\ngetRefundDetails = function (refundId) {\n  check(refundId, String);\n  var gateway = getGateway();\n  var braintreeFind = Meteor.wrapAsync(gateway.transaction.find, gateway.transaction);\n  var findResults = braintreeFind(refundId);\n  return findResults;\n};\n\nBraintreeApi.apiCall.paymentSubmit = function (paymentSubmitDetails) {\n  var gateway = getGateway();\n  var paymentObj = getPaymentObj();\n\n  if (paymentSubmitDetails.transactionType === \"authorize\") {\n    paymentObj.options.submitForSettlement = false;\n  }\n\n  paymentObj.creditCard = parseCardData(paymentSubmitDetails.cardData);\n  paymentObj.amount = paymentSubmitDetails.paymentData.total;\n  var fut = new Future();\n  gateway.transaction.sale(paymentObj, Meteor.bindEnvironment(function (error, result) {\n    if (error) {\n      fut.return({\n        saved: false,\n        error: error\n      });\n    } else if (!result.success) {\n      fut.return({\n        saved: false,\n        response: result\n      });\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, function (error) {\n    Reaction.Events.warn(error);\n  }));\n  return fut.wait();\n};\n\nBraintreeApi.apiCall.captureCharge = function (paymentCaptureDetails) {\n  var transactionId = paymentCaptureDetails.transactionId;\n  var amount = accounting.toFixed(paymentCaptureDetails.amount, 2);\n  var gateway = getGateway();\n  var fut = new Future();\n\n  if (amount === accounting.toFixed(0, 2)) {\n    gateway.transaction.void(transactionId, function (error, result) {\n      if (error) {\n        fut.return({\n          saved: false,\n          error: error\n        });\n      } else {\n        fut.return({\n          saved: true,\n          response: result\n        });\n      }\n    }, function (e) {\n      Logger.warn(e);\n    });\n    return fut.wait();\n  }\n\n  gateway.transaction.submitForSettlement(transactionId, amount, Meteor.bindEnvironment(function (error, result) {\n    if (error) {\n      fut.return({\n        saved: false,\n        error: error\n      });\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, function (e) {\n    Logger.warn(e);\n  }));\n  return fut.wait();\n};\n\nBraintreeApi.apiCall.createRefund = function (refundDetails) {\n  var transactionId = refundDetails.transactionId;\n  var amount = refundDetails.amount;\n  var gateway = getGateway();\n  var fut = new Future();\n  gateway.transaction.refund(transactionId, amount, Meteor.bindEnvironment(function (error, result) {\n    if (error) {\n      fut.return({\n        saved: false,\n        error: error\n      });\n    } else if (!result.success) {\n      if (result.errors.errorCollections.transaction.validationErrors.base[0].code === \"91506\") {\n        fut.return({\n          saved: false,\n          error: \"Braintree does not allow refunds until transactions are settled. This can take up to 24 hours. Please try again later.\"\n        });\n      } else {\n        fut.return({\n          saved: false,\n          error: result.message\n        });\n      }\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, function (e) {\n    Logger.fatal(e);\n  }));\n  return fut.wait();\n};\n\nBraintreeApi.apiCall.listRefunds = function (refundListDetails) {\n  var transactionId = refundListDetails.transactionId;\n  var gateway = getGateway();\n  var braintreeFind = Meteor.wrapAsync(gateway.transaction.find, gateway.transaction);\n  var findResults = braintreeFind(transactionId);\n  var result = [];\n\n  if (findResults.refundIds.length > 0) {\n    for (var _iterator = findResults.refundIds, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var refund = _ref;\n      var refundDetails = getRefundDetails(refund);\n      result.push({\n        type: \"refund\",\n        amount: parseFloat(refundDetails.amount),\n        created: moment(refundDetails.createdAt).unix() * 1000,\n        currency: refundDetails.currencyIsoCode,\n        raw: refundDetails\n      });\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/imports/plugins/included/payments-braintree/server/methods/braintreeApi.js"],"names":["Meteor","Packages","Reaction","Logger","Future","Braintree","accounting","BraintreeApi","apiCall","getPaymentObj","amount","options","submitForSettlement","parseCardData","data","cardholderName","name","number","expirationMonth","expirationYear","cvv","getSettings","settings","ref","valueName","undefined","getAccountOptions","environment","findOne","shopId","getShopId","enabled","mode","braintree","merchantId","publicKey","privateKey","Error","getGateway","accountOptions","Environment","Production","Sandbox","gateway","connect","getRefundDetails","refundId","check","String","braintreeFind","wrapAsync","transaction","find","findResults","paymentSubmit","paymentSubmitDetails","paymentObj","transactionType","creditCard","cardData","paymentData","total","fut","sale","bindEnvironment","error","result","return","saved","success","response","Events","warn","wait","captureCharge","paymentCaptureDetails","transactionId","toFixed","void","e","createRefund","refundDetails","refund","errors","errorCollections","validationErrors","base","code","message","fatal","listRefunds","refundListDetails","refundIds","length","push","type","parseFloat","created","moment","createdAt","unix","currency","currencyIsoCode","raw"],"mappings":"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","file":"/imports/plugins/included/payments-braintree/server/methods/braintreeApi.js.map","sourcesContent":["/* eslint camelcase: 0 */\n// meteor modules\nimport { Meteor } from \"meteor/meteor\";\n// reaction modules\nimport { Packages } from \"/lib/collections\";\nimport { Reaction, Logger } from \"/server/api\";\nimport Future from \"fibers/future\";\nimport Braintree from \"braintree\";\nimport accounting from \"accounting-js\";\n\nexport const BraintreeApi = {};\nBraintreeApi.apiCall = {};\n\n\nfunction getPaymentObj() {\n  return {\n    amount: \"\",\n    options: { submitForSettlement: true }\n  };\n}\n\nfunction parseCardData(data) {\n  return {\n    cardholderName: data.name,\n    number: data.number,\n    expirationMonth: data.expirationMonth,\n    expirationYear: data.expirationYear,\n    cvv: data.cvv\n  };\n}\n\n\nfunction getSettings(settings, ref, valueName) {\n  if (settings !== null) {\n    return settings[valueName];\n  } else if (ref !== null) {\n    return ref[valueName];\n  }\n  return undefined;\n}\n\nfunction getAccountOptions() {\n  let environment;\n  const settings = Packages.findOne({\n    name: \"reaction-braintree\",\n    shopId: Reaction.getShopId(),\n    enabled: true\n  }).settings;\n  if (typeof settings !== \"undefined\" && settings !== null ? settings.mode : undefined === true) {\n    environment = \"production\";\n  } else {\n    environment = \"sandbox\";\n  }\n\n  const ref = Meteor.settings.braintree;\n  const options = {\n    environment: environment,\n    merchantId: getSettings(settings, ref, \"merchant_id\"),\n    publicKey: getSettings(settings, ref, \"public_key\"),\n    privateKey: getSettings(settings, ref, \"private_key\")\n  };\n  if (!options.merchantId) {\n    throw new Meteor.Error(\"invalid-credentials\", \"Invalid Braintree Credentials\");\n  }\n  return options;\n}\n\nfunction getGateway() {\n  const accountOptions = getAccountOptions();\n  if (accountOptions.environment === \"production\") {\n    accountOptions.environment = Braintree.Environment.Production;\n  } else {\n    accountOptions.environment = Braintree.Environment.Sandbox;\n  }\n  const gateway = Braintree.connect(accountOptions);\n  return gateway;\n}\n\ngetRefundDetails = function (refundId) {\n  check(refundId, String);\n  const gateway = getGateway();\n  const braintreeFind = Meteor.wrapAsync(gateway.transaction.find, gateway.transaction);\n  const findResults = braintreeFind(refundId);\n  return findResults;\n};\n\n\nBraintreeApi.apiCall.paymentSubmit = function (paymentSubmitDetails) {\n  const gateway = getGateway();\n  const paymentObj = getPaymentObj();\n  if (paymentSubmitDetails.transactionType === \"authorize\") {\n    paymentObj.options.submitForSettlement = false;\n  }\n  paymentObj.creditCard = parseCardData(paymentSubmitDetails.cardData);\n  paymentObj.amount = paymentSubmitDetails.paymentData.total;\n  const fut = new Future();\n  gateway.transaction.sale(paymentObj, Meteor.bindEnvironment(function (error, result) {\n    if (error) {\n      fut.return({\n        saved: false,\n        error: error\n      });\n    } else if (!result.success) {\n      fut.return({\n        saved: false,\n        response: result\n      });\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, function (error) {\n    Reaction.Events.warn(error);\n  }));\n\n  return fut.wait();\n};\n\n\nBraintreeApi.apiCall.captureCharge = function (paymentCaptureDetails) {\n  const transactionId = paymentCaptureDetails.transactionId;\n  const amount = accounting.toFixed(paymentCaptureDetails.amount, 2);\n  const gateway = getGateway();\n  const fut = new Future();\n\n  if (amount === accounting.toFixed(0, 2)) {\n    gateway.transaction.void(transactionId, function (error, result) {\n      if (error) {\n        fut.return({\n          saved: false,\n          error: error\n        });\n      } else {\n        fut.return({\n          saved: true,\n          response: result\n        });\n      }\n    }, function (e) {\n      Logger.warn(e);\n    });\n    return fut.wait();\n  }\n  gateway.transaction.submitForSettlement(transactionId, amount, Meteor.bindEnvironment(function (error, result) {\n    if (error) {\n      fut.return({\n        saved: false,\n        error: error\n      });\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, function (e) {\n    Logger.warn(e);\n  }));\n\n  return fut.wait();\n};\n\n\nBraintreeApi.apiCall.createRefund = function (refundDetails) {\n  const transactionId = refundDetails.transactionId;\n  const amount = refundDetails.amount;\n  const gateway = getGateway();\n  const fut = new Future();\n  gateway.transaction.refund(transactionId, amount, Meteor.bindEnvironment(function (error, result) {\n    if (error) {\n      fut.return({\n        saved: false,\n        error: error\n      });\n    } else if (!result.success) {\n      if (result.errors.errorCollections.transaction.validationErrors.base[0].code === \"91506\") {\n        fut.return({\n          saved: false,\n          error: \"Braintree does not allow refunds until transactions are settled. This can take up to 24 hours. Please try again later.\"\n        });\n      } else {\n        fut.return({\n          saved: false,\n          error: result.message\n        });\n      }\n    } else {\n      fut.return({\n        saved: true,\n        response: result\n      });\n    }\n  }, function (e) {\n    Logger.fatal(e);\n  }));\n  return fut.wait();\n};\n\n\nBraintreeApi.apiCall.listRefunds = function (refundListDetails) {\n  const transactionId = refundListDetails.transactionId;\n  const gateway = getGateway();\n  const braintreeFind = Meteor.wrapAsync(gateway.transaction.find, gateway.transaction);\n  const findResults = braintreeFind(transactionId);\n  const result = [];\n  if (findResults.refundIds.length > 0) {\n    for (const refund of findResults.refundIds) {\n      const refundDetails = getRefundDetails(refund);\n      result.push({\n        type: \"refund\",\n        amount: parseFloat(refundDetails.amount),\n        created: moment(refundDetails.createdAt).unix() * 1000,\n        currency: refundDetails.currencyIsoCode,\n        raw: refundDetails\n      });\n    }\n  }\n\n  return result;\n};\n"]},"hash":"648805a28ce3f0a29b3630506ea4b6073f5ef20d"}
