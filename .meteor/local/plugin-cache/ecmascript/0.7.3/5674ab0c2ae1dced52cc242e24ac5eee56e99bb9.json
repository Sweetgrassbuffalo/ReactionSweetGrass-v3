{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/http","imported":["HTTP"],"specifiers":[{"kind":"named","imported":"HTTP","local":"HTTP"}]},{"source":"/server/api","imported":["Logger","MethodHooks"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"MethodHooks","local":"MethodHooks"}]},{"source":"/lib/collections","imported":["Shops","Cart","Packages"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"},{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Packages","local":"Packages"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js","filenameRelative":"/imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js"],"names":["Meteor","HTTP","Logger","MethodHooks","Shops","Cart","Packages","after","options","result","origin","cartId","arguments","cartToCalc","findOne","shopId","shop","pkg","name","enabled","settings","taxcloud","apiKey","apiLoginId","addressBook","shopAddress","Address1","address1","City","city","State","region","Zip5","postal","warn","shipping","items","shippingAddress","address","debug","url","cartItems","destination","index","variants","taxable","item","Index","ItemID","_id","TIC","Price","price","Qty","quantity","push","request","headers","data","customerID","userId","cartID","deliveredBySeller","post","error","response","taxRate","ResponseType","totalTax","CartItemsResponse","TaxAmount","cartSubTotal","call","errMsg","Messages","Message"],"mappings":"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","file":"/imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { HTTP } from \"meteor/http\";\nimport { Logger, MethodHooks } from \"/server/api\";\nimport { Shops, Cart, Packages } from \"/lib/collections\";\n\n//\n// this entire method will run after the core/taxes\n// plugin runs the taxes/calculate method\n// it overrwites any previous tax calculation\n// tax methods precendence is determined by\n// load order of plugins\n//\nMethodHooks.after(\"taxes/calculate\", function (options) {\n  const result = options.result || {};\n  let origin = {};\n\n  const cartId = options.arguments[0];\n  const cartToCalc = Cart.findOne(cartId);\n  if (cartToCalc) {\n    const shopId = cartToCalc.shopId;\n    const shop = Shops.findOne(shopId);\n    const pkg = Packages.findOne({\n      name: \"taxes-taxcloud\",\n      shopId: shopId,\n      enabled: true\n    });\n\n    // check if package is configured\n    if (shop && pkg && pkg.settings.taxcloud) {\n      const apiKey = pkg.settings.taxcloud.apiKey;\n      const apiLoginId = pkg.settings.taxcloud.apiLoginId;\n\n      // get shop address\n      // this will need some refactoring\n      // for multi-vendor/shop orders\n      if (shop.addressBook) {\n        const shopAddress = shop.addressBook[0];\n        origin =  {\n          Address1: shopAddress.address1,\n          City: shopAddress.city,\n          State: shopAddress.region,\n          Zip5: shopAddress.postal\n        };\n      }\n\n      // check if plugin is enabled and this calculation method is enabled\n      if (pkg && pkg.enabled === true && pkg.settings.taxcloud.enabled === true) {\n        if (!apiKey || !apiLoginId) {\n          Logger.warn(\"TaxCloud API Key is required.\");\n        }\n        if (typeof cartToCalc.shipping !== \"undefined\" && cartToCalc.items) {\n          const shippingAddress = cartToCalc.shipping[0].address;\n\n          if (shippingAddress) {\n            Logger.debug(\"TaxCloud triggered on taxes/calculate for cartId:\", cartId);\n            const url = \"https://api.taxcloud.net/1.0/TaxCloud/Lookup\";\n            const cartItems = [];\n            const destination = {\n              Address1: shippingAddress.address1,\n              City: shippingAddress.city,\n              State: shippingAddress.region,\n              Zip5: shippingAddress.postal\n            };\n\n            // format cart items to TaxCloud structure\n            let index = 0;\n            for (const items of cartToCalc.items) {\n              // only processs taxable products\n              if (items.variants.taxable === true) {\n                const item = {\n                  Index: index,\n                  ItemID: items.variants._id,\n                  TIC: \"00000\",\n                  Price: items.variants.price,\n                  Qty: items.quantity\n                };\n                index ++;\n                cartItems.push(item);\n              }\n            }\n\n            // request object\n            const request = {\n              headers: {\n                \"accept\": \"application/json\",\n                \"content-type\": \"application/json\"\n              },\n              data: {\n                apiKey: apiKey,\n                apiLoginId: apiLoginId,\n                customerID: cartToCalc.userId,\n                cartItems: cartItems,\n                origin: origin,\n                destination: destination,\n                cartID: cartId,\n                deliveredBySeller: false\n              }\n            };\n\n            HTTP.post(url, request, function (error, response) {\n              let taxRate = 0;\n              // ResponseType 3 is a successful call.\n              if (!error && response.data.ResponseType === 3) {\n                let totalTax = 0;\n                for (const item of response.data.CartItemsResponse) {\n                  totalTax += item.TaxAmount;\n                }\n                // don't run this calculation if there isn't tax.\n                if (totalTax > 0) {\n                  taxRate = (totalTax / cartToCalc.cartSubTotal());\n                }\n                // we should consider if we want percentage and dollar\n                // as this is assuming that subTotal actually contains everything\n                // taxable\n                Meteor.call(\"taxes/setRate\", cartId, taxRate, response.CartItemsResponse);\n              } else {\n                let errMsg = \"Unable to access service. Check credentials.\";\n                if (response && response.data.Messages[0].Message) {\n                  errMsg = response.data.Messages[0].Message;\n                }\n                Logger.warn(\"Error fetching tax rate from TaxCloud:\", errMsg);\n              }\n            });\n          }\n        }\n      }\n    }\n  }\n  // Default return value is the return value of previous call in method chain\n  // or an empty object if there's no result yet.\n  return result;\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js.map","sourceFileName":"/imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"hooks"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar HTTP = void 0;\nmodule.importSync(\"meteor/http\", {\n  HTTP: function (v) {\n    HTTP = v;\n  }\n}, 1);\nvar Logger = void 0,\n    MethodHooks = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  },\n  MethodHooks: function (v) {\n    MethodHooks = v;\n  }\n}, 2);\nvar Shops = void 0,\n    Cart = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  },\n  Cart: function (v) {\n    Cart = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 3);\n//\n// this entire method will run after the core/taxes\n// plugin runs the taxes/calculate method\n// it overrwites any previous tax calculation\n// tax methods precendence is determined by\n// load order of plugins\n//\nMethodHooks.after(\"taxes/calculate\", function (options) {\n  var result = options.result || {};\n  var origin = {};\n  var cartId = options.arguments[0];\n  var cartToCalc = Cart.findOne(cartId);\n\n  if (cartToCalc) {\n    var shopId = cartToCalc.shopId;\n    var shop = Shops.findOne(shopId);\n    var pkg = Packages.findOne({\n      name: \"taxes-taxcloud\",\n      shopId: shopId,\n      enabled: true\n    }); // check if package is configured\n\n    if (shop && pkg && pkg.settings.taxcloud) {\n      var apiKey = pkg.settings.taxcloud.apiKey;\n      var apiLoginId = pkg.settings.taxcloud.apiLoginId; // get shop address\n      // this will need some refactoring\n      // for multi-vendor/shop orders\n\n      if (shop.addressBook) {\n        var shopAddress = shop.addressBook[0];\n        origin = {\n          Address1: shopAddress.address1,\n          City: shopAddress.city,\n          State: shopAddress.region,\n          Zip5: shopAddress.postal\n        };\n      } // check if plugin is enabled and this calculation method is enabled\n\n\n      if (pkg && pkg.enabled === true && pkg.settings.taxcloud.enabled === true) {\n        if (!apiKey || !apiLoginId) {\n          Logger.warn(\"TaxCloud API Key is required.\");\n        }\n\n        if (typeof cartToCalc.shipping !== \"undefined\" && cartToCalc.items) {\n          var shippingAddress = cartToCalc.shipping[0].address;\n\n          if (shippingAddress) {\n            Logger.debug(\"TaxCloud triggered on taxes/calculate for cartId:\", cartId);\n            var url = \"https://api.taxcloud.net/1.0/TaxCloud/Lookup\";\n            var cartItems = [];\n            var destination = {\n              Address1: shippingAddress.address1,\n              City: shippingAddress.city,\n              State: shippingAddress.region,\n              Zip5: shippingAddress.postal\n            }; // format cart items to TaxCloud structure\n\n            var index = 0;\n\n            for (var _iterator = cartToCalc.items, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n              var _ref;\n\n              if (_isArray) {\n                if (_i >= _iterator.length) break;\n                _ref = _iterator[_i++];\n              } else {\n                _i = _iterator.next();\n                if (_i.done) break;\n                _ref = _i.value;\n              }\n\n              var items = _ref;\n\n              // only processs taxable products\n              if (items.variants.taxable === true) {\n                var item = {\n                  Index: index,\n                  ItemID: items.variants._id,\n                  TIC: \"00000\",\n                  Price: items.variants.price,\n                  Qty: items.quantity\n                };\n                index++;\n                cartItems.push(item);\n              }\n            } // request object\n\n\n            var request = {\n              headers: {\n                \"accept\": \"application/json\",\n                \"content-type\": \"application/json\"\n              },\n              data: {\n                apiKey: apiKey,\n                apiLoginId: apiLoginId,\n                customerID: cartToCalc.userId,\n                cartItems: cartItems,\n                origin: origin,\n                destination: destination,\n                cartID: cartId,\n                deliveredBySeller: false\n              }\n            };\n            HTTP.post(url, request, function (error, response) {\n              var taxRate = 0; // ResponseType 3 is a successful call.\n\n              if (!error && response.data.ResponseType === 3) {\n                var totalTax = 0;\n\n                for (var _iterator2 = response.data.CartItemsResponse, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n                  var _ref2;\n\n                  if (_isArray2) {\n                    if (_i2 >= _iterator2.length) break;\n                    _ref2 = _iterator2[_i2++];\n                  } else {\n                    _i2 = _iterator2.next();\n                    if (_i2.done) break;\n                    _ref2 = _i2.value;\n                  }\n\n                  var item = _ref2;\n                  totalTax += item.TaxAmount;\n                } // don't run this calculation if there isn't tax.\n\n\n                if (totalTax > 0) {\n                  taxRate = totalTax / cartToCalc.cartSubTotal();\n                } // we should consider if we want percentage and dollar\n                // as this is assuming that subTotal actually contains everything\n                // taxable\n\n\n                Meteor.call(\"taxes/setRate\", cartId, taxRate, response.CartItemsResponse);\n              } else {\n                var errMsg = \"Unable to access service. Check credentials.\";\n\n                if (response && response.data.Messages[0].Message) {\n                  errMsg = response.data.Messages[0].Message;\n                }\n\n                Logger.warn(\"Error fetching tax rate from TaxCloud:\", errMsg);\n              }\n            });\n          }\n        }\n      }\n    }\n  } // Default return value is the return value of previous call in method chain\n  // or an empty object if there's no result yet.\n\n\n  return result;\n});","map":{"version":3,"sources":["/imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js"],"names":["Meteor","HTTP","Logger","MethodHooks","Shops","Cart","Packages","after","options","result","origin","cartId","arguments","cartToCalc","findOne","shopId","shop","pkg","name","enabled","settings","taxcloud","apiKey","apiLoginId","addressBook","shopAddress","Address1","address1","City","city","State","region","Zip5","postal","warn","shipping","items","shippingAddress","address","debug","url","cartItems","destination","index","variants","taxable","item","Index","ItemID","_id","TIC","Price","price","Qty","quantity","push","request","headers","data","customerID","userId","cartID","deliveredBySeller","post","error","response","taxRate","ResponseType","totalTax","CartItemsResponse","TaxAmount","cartSubTotal","call","errMsg","Messages","Message"],"mappings":"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","file":"/imports/plugins/included/taxes-taxcloud/server/hooks/hooks.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { HTTP } from \"meteor/http\";\nimport { Logger, MethodHooks } from \"/server/api\";\nimport { Shops, Cart, Packages } from \"/lib/collections\";\n\n//\n// this entire method will run after the core/taxes\n// plugin runs the taxes/calculate method\n// it overrwites any previous tax calculation\n// tax methods precendence is determined by\n// load order of plugins\n//\nMethodHooks.after(\"taxes/calculate\", function (options) {\n  const result = options.result || {};\n  let origin = {};\n\n  const cartId = options.arguments[0];\n  const cartToCalc = Cart.findOne(cartId);\n  if (cartToCalc) {\n    const shopId = cartToCalc.shopId;\n    const shop = Shops.findOne(shopId);\n    const pkg = Packages.findOne({\n      name: \"taxes-taxcloud\",\n      shopId: shopId,\n      enabled: true\n    });\n\n    // check if package is configured\n    if (shop && pkg && pkg.settings.taxcloud) {\n      const apiKey = pkg.settings.taxcloud.apiKey;\n      const apiLoginId = pkg.settings.taxcloud.apiLoginId;\n\n      // get shop address\n      // this will need some refactoring\n      // for multi-vendor/shop orders\n      if (shop.addressBook) {\n        const shopAddress = shop.addressBook[0];\n        origin =  {\n          Address1: shopAddress.address1,\n          City: shopAddress.city,\n          State: shopAddress.region,\n          Zip5: shopAddress.postal\n        };\n      }\n\n      // check if plugin is enabled and this calculation method is enabled\n      if (pkg && pkg.enabled === true && pkg.settings.taxcloud.enabled === true) {\n        if (!apiKey || !apiLoginId) {\n          Logger.warn(\"TaxCloud API Key is required.\");\n        }\n        if (typeof cartToCalc.shipping !== \"undefined\" && cartToCalc.items) {\n          const shippingAddress = cartToCalc.shipping[0].address;\n\n          if (shippingAddress) {\n            Logger.debug(\"TaxCloud triggered on taxes/calculate for cartId:\", cartId);\n            const url = \"https://api.taxcloud.net/1.0/TaxCloud/Lookup\";\n            const cartItems = [];\n            const destination = {\n              Address1: shippingAddress.address1,\n              City: shippingAddress.city,\n              State: shippingAddress.region,\n              Zip5: shippingAddress.postal\n            };\n\n            // format cart items to TaxCloud structure\n            let index = 0;\n            for (const items of cartToCalc.items) {\n              // only processs taxable products\n              if (items.variants.taxable === true) {\n                const item = {\n                  Index: index,\n                  ItemID: items.variants._id,\n                  TIC: \"00000\",\n                  Price: items.variants.price,\n                  Qty: items.quantity\n                };\n                index ++;\n                cartItems.push(item);\n              }\n            }\n\n            // request object\n            const request = {\n              headers: {\n                \"accept\": \"application/json\",\n                \"content-type\": \"application/json\"\n              },\n              data: {\n                apiKey: apiKey,\n                apiLoginId: apiLoginId,\n                customerID: cartToCalc.userId,\n                cartItems: cartItems,\n                origin: origin,\n                destination: destination,\n                cartID: cartId,\n                deliveredBySeller: false\n              }\n            };\n\n            HTTP.post(url, request, function (error, response) {\n              let taxRate = 0;\n              // ResponseType 3 is a successful call.\n              if (!error && response.data.ResponseType === 3) {\n                let totalTax = 0;\n                for (const item of response.data.CartItemsResponse) {\n                  totalTax += item.TaxAmount;\n                }\n                // don't run this calculation if there isn't tax.\n                if (totalTax > 0) {\n                  taxRate = (totalTax / cartToCalc.cartSubTotal());\n                }\n                // we should consider if we want percentage and dollar\n                // as this is assuming that subTotal actually contains everything\n                // taxable\n                Meteor.call(\"taxes/setRate\", cartId, taxRate, response.CartItemsResponse);\n              } else {\n                let errMsg = \"Unable to access service. Check credentials.\";\n                if (response && response.data.Messages[0].Message) {\n                  errMsg = response.data.Messages[0].Message;\n                }\n                Logger.warn(\"Error fetching tax rate from TaxCloud:\", errMsg);\n              }\n            });\n          }\n        }\n      }\n    }\n  }\n  // Default return value is the return value of previous call in method chain\n  // or an empty object if there's no result yet.\n  return result;\n});\n"]},"hash":"5674ab0c2ae1dced52cc242e24ac5eee56e99bb9"}
