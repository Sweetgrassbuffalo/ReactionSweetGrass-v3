{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/client/modules/accounts/helpers","imported":["LoginFormSharedHelpers"],"specifiers":[{"kind":"named","imported":"LoginFormSharedHelpers","local":"LoginFormSharedHelpers"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/accounts/templates/signIn/signIn.js","filenameRelative":"/client/modules/accounts/templates/signIn/signIn.js","inputSourceMap":{"version":3,"sources":["/client/modules/accounts/templates/signIn/signIn.js"],"names":["LoginFormSharedHelpers","Meteor","Template","loginFormSignInView","onCreated","template","instance","uniqueId","Random","id","formMessages","ReactiveVar","helpers","events","event","preventDefault","usernameInput","$","passwordInput","username","val","trim","password","validatedEmail","LoginFormValidation","email","validatedPassword","validationLevel","templateInstance","errors","set","isEmptyObject","loginWithPassword","error","alerts"],"mappings":"AAAA,IAAS;AAAT,OAAuC,WAAvC;;;;;;;;;;;;;;;;G,AACA,AAAS,AAAc,AACvB,AAAS,AAAgB,AAEzB;AAGA,AAAS,AAAoB,AAAU,AAAM,AAC3C,AAAM,AAAW,AAAS;;YAE1B,AAAS,AAAW,oBAApB,AAAoB,AAAO,sBAC3B;MAAS,WAAT,AAAwB,SAJ1B,AAIE,A,AAAwB,AAAI,AAAY,AACzC,AAED;;0CAGA;A,AAAA,AAAS,AAAoB,AAAQ,AAErC,CATE,GAYF,AAAS,AAAoB,AAAO,AAElC;;;8DAMA,AAAe,AAAC,AAAO,AAAa;;;AAClC,SAAA,AAAM;AAGN,AAAM,AAAgB,AAAS,AAAE,AAEjC,AAAM,AAAW,AAAc,AAAM,AACrC,AAAM,AAAW,AAAc,AAAM,AAErC,AAAM,AAAiB,AAAoB,AAAM,AACjD,AAAM,AAAoB,AAAoB,AAAS,AAAU,AAAE,AAAiB;;;;;KAApF,AAA0B,0CAE1B;UAAA,AAAM,AAAmB,AAAS,AAClC,AAAM,AAAS,AAEf;QAAiB,gBAAjB,AAA8B,WAA9B,AAAkC;mCAElC,AAAI,AAAmB,AAAM,AAC3B;QAAA,AAAO,WAAQ,cAAf,MACD;uCAED;AAAI,yBAAJ,AAA0B,AAAM,0BAC9B;QAAA,AAAO,AAAW;uBACnB;KADC;oCAGF;AAAI,QAAE,SAAN,AAAI,AAAgB,AAAY,AAAO,AACrC,AAAiB,AAAa,AAAI,AAChC;AAAQ,sCAF2B,AACrC,AAAkC,AAIlC;;iCACA;qBACD;AAED;;QAAA,AAAO,AAAkB,4BAAzB,AAAmC,AAAU,AAAC,AAAU,AACtD;AAAI,aAAJ,AAAW,WACT;AACA,AAAiB,AAAa,AAAI,AAChC;;UAAQ,AAAC,cAAD;AADV;AAGK,AACL,gBAPJ,AAQG,AACF,AACF;AATG,AAKC,SAHmC,CA7C1C,AAAoC;;;;;;;;;;;;;;;AAWhC,AAAM,AAAgB,AAAS,AAAE,AACjC","file":"/client/modules/accounts/templates/signIn/signIn.js.map","sourcesContent":["import { LoginFormSharedHelpers } from \"/client/modules/accounts/helpers\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\n\n/**\n * onCreated: Login form sign in view\n */\nTemplate.loginFormSignInView.onCreated(() => {\n  const template = Template.instance();\n\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n});\n\n/**\n * Helpers: Login form sign in view\n */\nTemplate.loginFormSignInView.helpers(LoginFormSharedHelpers);\n\n/**\n * Events: Login form sign in view\n */\nTemplate.loginFormSignInView.events({\n\n  /**\n   * Submit sign in form\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\n  \"submit form\": (event, template) => {\n    event.preventDefault();\n\n    const usernameInput = template.$(\".login-input-email\");\n    const passwordInput = template.$(\".login-input-password\");\n\n    const username = usernameInput.val().trim();\n    const password = passwordInput.val().trim();\n\n    const validatedEmail = LoginFormValidation.email(username);\n    const validatedPassword = LoginFormValidation.password(password, { validationLevel: \"exists\" });\n\n    const templateInstance = Template.instance();\n    const errors = {};\n\n    templateInstance.formMessages.set({});\n\n    if (validatedEmail !== true) {\n      errors.email = validatedEmail;\n    }\n\n    if (validatedPassword !== true) {\n      errors.password = validatedPassword;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      });\n\n      // prevent password reset\n      return;\n    }\n\n    Meteor.loginWithPassword(username, password, (error) => {\n      if (error) {\n        // Show some error messages above the form fields\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {\n        // Close dropdown or navigate to page\n      }\n    });\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/accounts/templates/signIn/signIn.js.map","sourceFileName":"/client/modules/accounts/templates/signIn/signIn.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"signIn"},"ignored":false,"code":"var LoginFormSharedHelpers = void 0;\nmodule.importSync(\"/client/modules/accounts/helpers\", {\n  LoginFormSharedHelpers: function (v) {\n    LoginFormSharedHelpers = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 2);\n/**\n * onCreated: Login form sign in view\n */Template.loginFormSignInView.onCreated(function () {\n  var template = Template.instance();\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n}); /**\n     * Helpers: Login form sign in view\n     */\nTemplate.loginFormSignInView.helpers(LoginFormSharedHelpers); /**\n                                                               * Events: Login form sign in view\n                                                               */\nTemplate.loginFormSignInView.events({\n  /**\n   * Submit sign in form\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\"submit form\": function (event, template) {\n    event.preventDefault();\n    var usernameInput = template.$(\".login-input-email\");\n    var passwordInput = template.$(\".login-input-password\");\n    var username = usernameInput.val().trim();\n    var password = passwordInput.val().trim();\n    var validatedEmail = LoginFormValidation.email(username);\n    var validatedPassword = LoginFormValidation.password(password, {\n      validationLevel: \"exists\"\n    });\n    var templateInstance = Template.instance();\n    var errors = {};\n    templateInstance.formMessages.set({});\n\n    if (validatedEmail !== true) {\n      errors.email = validatedEmail;\n    }\n\n    if (validatedPassword !== true) {\n      errors.password = validatedPassword;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      }); // prevent password reset\n\n      return;\n    }\n\n    Meteor.loginWithPassword(username, password, function (error) {\n      if (error) {\n        // Show some error messages above the form fields\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {// Close dropdown or navigate to page\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/client/modules/accounts/templates/signIn/signIn.js"],"names":["LoginFormSharedHelpers","Meteor","Template","loginFormSignInView","onCreated","template","instance","uniqueId","Random","id","formMessages","ReactiveVar","helpers","events","event","preventDefault","usernameInput","$","passwordInput","username","val","trim","password","validatedEmail","LoginFormValidation","email","validatedPassword","validationLevel","templateInstance","errors","set","isEmptyObject","loginWithPassword","error","alerts"],"mappings":"AAAA,IAAS;AAAT,OAAuC,WAAvC;;;;;;;;;;;;;;;;G,AACA,AAAS,AAAc,AACvB,AAAS,AAAgB,AAEzB;AAGA,AAAS,AAAoB,AAAU,AAAM,AAC3C,AAAM,AAAW,AAAS;;YAE1B,AAAS,AAAW,oBAApB,AAAoB,AAAO,sBAC3B;MAAS,WAAT,AAAwB,SAJ1B,AAIE,A,AAAwB,AAAI,AAAY,AACzC,AAED;;0CAGA;A,AAAA,AAAS,AAAoB,AAAQ,AAErC,CATE,GAYF,AAAS,AAAoB,AAAO,AAElC;;;8DAMA,AAAe,AAAC,AAAO,AAAa;;;AAClC,SAAA,AAAM;AAGN,AAAM,AAAgB,AAAS,AAAE,AAEjC,AAAM,AAAW,AAAc,AAAM,AACrC,AAAM,AAAW,AAAc,AAAM,AAErC,AAAM,AAAiB,AAAoB,AAAM,AACjD,AAAM,AAAoB,AAAoB,AAAS,AAAU,AAAE,AAAiB;;;;;KAApF,AAA0B,0CAE1B;UAAA,AAAM,AAAmB,AAAS,AAClC,AAAM,AAAS,AAEf;QAAiB,gBAAjB,AAA8B,WAA9B,AAAkC;mCAElC,AAAI,AAAmB,AAAM,AAC3B;QAAA,AAAO,WAAQ,cAAf,MACD;uCAED;AAAI,yBAAJ,AAA0B,AAAM,0BAC9B;QAAA,AAAO,AAAW;uBACnB;KADC;oCAGF;AAAI,QAAE,SAAN,AAAI,AAAgB,AAAY,AAAO,AACrC,AAAiB,AAAa,AAAI,AAChC;AAAQ,sCAF2B,AACrC,AAAkC,AAIlC;;iCACA;qBACD;AAED;;QAAA,AAAO,AAAkB,4BAAzB,AAAmC,AAAU,AAAC,AAAU,AACtD;AAAI,aAAJ,AAAW,WACT;AACA,AAAiB,AAAa,AAAI,AAChC;;UAAQ,AAAC,cAAD;AADV;AAGK,AACL,gBAPJ,AAQG,AACF,AACF;AATG,AAKC,SAHmC,CA7C1C,AAAoC;;;;;;;;;;;;;;;AAWhC,AAAM,AAAgB,AAAS,AAAE,AACjC","file":"/client/modules/accounts/templates/signIn/signIn.js.map","sourcesContent":["import { LoginFormSharedHelpers } from \"/client/modules/accounts/helpers\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\n\n/**\n * onCreated: Login form sign in view\n */\nTemplate.loginFormSignInView.onCreated(() => {\n  const template = Template.instance();\n\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n});\n\n/**\n * Helpers: Login form sign in view\n */\nTemplate.loginFormSignInView.helpers(LoginFormSharedHelpers);\n\n/**\n * Events: Login form sign in view\n */\nTemplate.loginFormSignInView.events({\n\n  /**\n   * Submit sign in form\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\n  \"submit form\": (event, template) => {\n    event.preventDefault();\n\n    const usernameInput = template.$(\".login-input-email\");\n    const passwordInput = template.$(\".login-input-password\");\n\n    const username = usernameInput.val().trim();\n    const password = passwordInput.val().trim();\n\n    const validatedEmail = LoginFormValidation.email(username);\n    const validatedPassword = LoginFormValidation.password(password, { validationLevel: \"exists\" });\n\n    const templateInstance = Template.instance();\n    const errors = {};\n\n    templateInstance.formMessages.set({});\n\n    if (validatedEmail !== true) {\n      errors.email = validatedEmail;\n    }\n\n    if (validatedPassword !== true) {\n      errors.password = validatedPassword;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      });\n\n      // prevent password reset\n      return;\n    }\n\n    Meteor.loginWithPassword(username, password, (error) => {\n      if (error) {\n        // Show some error messages above the form fields\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {\n        // Close dropdown or navigate to page\n      }\n    });\n  }\n});\n"]},"hash":"2e911ebf59eb754761748f354f6ab3229c5669ac"}
