{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/lib/collections","imported":["*"],"specifiers":[{"kind":"namespace","local":"Collections"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/accounts/templates/profile/profile.js","filenameRelative":"/client/modules/accounts/templates/profile/profile.js","inputSourceMap":{"version":3,"sources":["/client/modules/accounts/templates/profile/profile.js"],"names":["Meteor","Template","Reaction","Collections","accountProfile","onCreated","template","instance","userHasPassword","ReactiveVar","call","error","result","set","hideActionView","helpers","get","userOrders","orderSub","subscribe","userId","ready","Orders","find","sort","createdAt","limit","account","Accounts","findOne","addressBookView","profile"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAgB,A,AACzB,AAAS,AAAgB,AACzB,AAAO,AAAK,AAAiB,AAE7B;AAGA,AAAS,AAAe,AAAU,AAAM,AACtC,AAAM,AAAW,AAAS;;YAEjB,eAAT,AAA2B;MAE3B,AAAO,AAAK,oBAAZ,AAA+C,AAAC,AAAO,AAAW,AAChE,AAAS,AAAgB,AAAI,AAC9B;AAPqC,AAKtC,AAGA,yCACA;SAAS,KAAT,4DATF,AAUC,A;AAED;KATE,AAA2B,AAAY,AAEvC,CAUF;;AAAS,WAAT,AAAwB,AAAQ,AAE9B;CAdA,GAkBA,AAAkB,AAChB,AAAO,AAAS,AAAW,AAAgB;;;AAPf,AAQ7B;AAMD,AAAa,AACX;;;KAAM,6BAAN,AAAiB,AAAO,AAAU,AAAiB,AAAO;+CAC1D;AAAA,AAAI,AAAS,AAAS,AACpB,AAAO,AAAY,AAAO,AAAK,AAC7B;AADK,AAAwB,AACrB,AAAO,AACd,AACD,AAAM,AACJ,AAAW,AAAC;;;KAFb,wBAID;QAAO,oDAJN;;AAFI,QAAP,kBAQD;;;AAzB2B,AA0B7B;;sBAMD;;eAhC8B,AAgCpB,AACR,AAAO,AAAY,AAAS,AAC7B;AAND;;AAQA;AAIA,AAAiB,AAAY,AAC3B,AAAM,AAAU,AAAY,AAAS;;;0BACrC;AAAI,WAAQ,YAAZ,AAAqB,SACnB;AAAA,AAAO,AACR;AA5CL,AAAgC,AA6C5B,AAAO,AACR;;;;;;;;;;;;AApCD","file":"/client/modules/accounts/templates/profile/profile.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Reaction } from \"/client/api\";\nimport * as Collections from \"/lib/collections\";\n\n/**\n * onCreated: Account Profile View\n */\nTemplate.accountProfile.onCreated(() => {\n  const template = Template.instance();\n\n  template.userHasPassword = ReactiveVar(false);\n\n  Meteor.call(\"accounts/currentUserHasPassword\", (error, result) => {\n    template.userHasPassword.set(result);\n  });\n  // hide actionView if open, doesn't relate to profile page\n  Reaction.hideActionView();\n});\n\n/**\n * Helpers: Account Profile View\n */\nTemplate.accountProfile.helpers({\n\n  /**\n   * User has password\n   * @return {Boolean} return true if the current user has a password, false otherwise\n   */\n  userHasPassword() {\n    return Template.instance().userHasPassword.get();\n  },\n\n  /**\n   * User's order history\n   * @return {Array|null} an array of available orders for the user\n   */\n  userOrders() {\n    const orderSub = Meteor.subscribe(\"AccountOrders\", Meteor.userId());\n    if (orderSub.ready()) {\n      return Collections.Orders.find({\n        userId: Meteor.userId()\n      }, {\n        sort: {\n          createdAt: -1\n        },\n        limit: 25\n      });\n    }\n  },\n\n  /**\n   * User's account profile\n   * @return {Object} account profile\n   */\n  account() {\n    return Collections.Accounts.findOne();\n  },\n\n  /**\n   * Returns the address book default view\n   * @return {String} \"addressBookGrid\" || \"addressBookAdd\"\n   */\n  addressBookView: function () {\n    const account = Collections.Accounts.findOne();\n    if (account.profile) {\n      return \"addressBookGrid\";\n    }\n    return \"addressBookAdd\";\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/accounts/templates/profile/profile.js.map","sourceFileName":"/client/modules/accounts/templates/profile/profile.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"profile"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 1);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 2);\nvar Collections = Object.create(null);\nmodule.importSync(\"/lib/collections\", {\n  \"*\": function (v, n) {\n    Collections[n] = v;\n  }\n}, 3);\n/**\n * onCreated: Account Profile View\n */Template.accountProfile.onCreated(function () {\n  var template = Template.instance();\n  template.userHasPassword = ReactiveVar(false);\n  Meteor.call(\"accounts/currentUserHasPassword\", function (error, result) {\n    template.userHasPassword.set(result);\n  }); // hide actionView if open, doesn't relate to profile page\n\n  Reaction.hideActionView();\n}); /**\n     * Helpers: Account Profile View\n     */\nTemplate.accountProfile.helpers({\n  /**\n   * User has password\n   * @return {Boolean} return true if the current user has a password, false otherwise\n   */userHasPassword: function () {\n    return Template.instance().userHasPassword.get();\n  },\n  /**\n   * User's order history\n   * @return {Array|null} an array of available orders for the user\n   */userOrders: function () {\n    var orderSub = Meteor.subscribe(\"AccountOrders\", Meteor.userId());\n\n    if (orderSub.ready()) {\n      return Collections.Orders.find({\n        userId: Meteor.userId()\n      }, {\n        sort: {\n          createdAt: -1\n        },\n        limit: 25\n      });\n    }\n  },\n  /**\n   * User's account profile\n   * @return {Object} account profile\n   */account: function () {\n    return Collections.Accounts.findOne();\n  },\n  /**\n   * Returns the address book default view\n   * @return {String} \"addressBookGrid\" || \"addressBookAdd\"\n   */addressBookView: function () {\n    var account = Collections.Accounts.findOne();\n\n    if (account.profile) {\n      return \"addressBookGrid\";\n    }\n\n    return \"addressBookAdd\";\n  }\n});","map":{"version":3,"sources":["/client/modules/accounts/templates/profile/profile.js"],"names":["Meteor","Template","Reaction","Collections","accountProfile","onCreated","template","instance","userHasPassword","ReactiveVar","call","error","result","set","hideActionView","helpers","get","userOrders","orderSub","subscribe","userId","ready","Orders","find","sort","createdAt","limit","account","Accounts","findOne","addressBookView","profile"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAgB,A,AACzB,AAAS,AAAgB,AACzB,AAAO,AAAK,AAAiB,AAE7B;AAGA,AAAS,AAAe,AAAU,AAAM,AACtC,AAAM,AAAW,AAAS;;YAEjB,eAAT,AAA2B;MAE3B,AAAO,AAAK,oBAAZ,AAA+C,AAAC,AAAO,AAAW,AAChE,AAAS,AAAgB,AAAI,AAC9B;AAPqC,AAKtC,AAGA,yCACA;SAAS,KAAT,4DATF,AAUC,A;AAED;KATE,AAA2B,AAAY,AAEvC,CAUF;;AAAS,WAAT,AAAwB,AAAQ,AAE9B;CAdA,GAkBA,AAAkB,AAChB,AAAO,AAAS,AAAW,AAAgB;;;AAPf,AAQ7B;AAMD,AAAa,AACX;;;KAAM,6BAAN,AAAiB,AAAO,AAAU,AAAiB,AAAO;+CAC1D;AAAA,AAAI,AAAS,AAAS,AACpB,AAAO,AAAY,AAAO,AAAK,AAC7B;AADK,AAAwB,AACrB,AAAO,AACd,AACD,AAAM,AACJ,AAAW,AAAC;;;KAFb,wBAID;QAAO,oDAJN;;AAFI,QAAP,kBAQD;;;AAzB2B,AA0B7B;;sBAMD;;eAhC8B,AAgCpB,AACR,AAAO,AAAY,AAAS,AAC7B;AAND;;AAQA;AAIA,AAAiB,AAAY,AAC3B,AAAM,AAAU,AAAY,AAAS;;;0BACrC;AAAI,WAAQ,YAAZ,AAAqB,SACnB;AAAA,AAAO,AACR;AA5CL,AAAgC,AA6C5B,AAAO,AACR;;;;;;;;;;;;AApCD","file":"/client/modules/accounts/templates/profile/profile.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Reaction } from \"/client/api\";\nimport * as Collections from \"/lib/collections\";\n\n/**\n * onCreated: Account Profile View\n */\nTemplate.accountProfile.onCreated(() => {\n  const template = Template.instance();\n\n  template.userHasPassword = ReactiveVar(false);\n\n  Meteor.call(\"accounts/currentUserHasPassword\", (error, result) => {\n    template.userHasPassword.set(result);\n  });\n  // hide actionView if open, doesn't relate to profile page\n  Reaction.hideActionView();\n});\n\n/**\n * Helpers: Account Profile View\n */\nTemplate.accountProfile.helpers({\n\n  /**\n   * User has password\n   * @return {Boolean} return true if the current user has a password, false otherwise\n   */\n  userHasPassword() {\n    return Template.instance().userHasPassword.get();\n  },\n\n  /**\n   * User's order history\n   * @return {Array|null} an array of available orders for the user\n   */\n  userOrders() {\n    const orderSub = Meteor.subscribe(\"AccountOrders\", Meteor.userId());\n    if (orderSub.ready()) {\n      return Collections.Orders.find({\n        userId: Meteor.userId()\n      }, {\n        sort: {\n          createdAt: -1\n        },\n        limit: 25\n      });\n    }\n  },\n\n  /**\n   * User's account profile\n   * @return {Object} account profile\n   */\n  account() {\n    return Collections.Accounts.findOne();\n  },\n\n  /**\n   * Returns the address book default view\n   * @return {String} \"addressBookGrid\" || \"addressBookAdd\"\n   */\n  addressBookView: function () {\n    const account = Collections.Accounts.findOne();\n    if (account.profile) {\n      return \"addressBookGrid\";\n    }\n    return \"addressBookAdd\";\n  }\n});\n"]},"hash":"4791cd538cd555056a16ef0f34d2ed6efc18159a"}
