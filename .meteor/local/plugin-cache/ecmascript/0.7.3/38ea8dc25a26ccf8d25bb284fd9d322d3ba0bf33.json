{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"sweetalert2","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Alert"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/sms/client/actions/settings.js","filenameRelative":"/imports/plugins/included/sms/client/actions/settings.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/sms/client/actions/settings.js"],"names":["Alert","i18next","saveSettings","settings","callback","apiKey","apiToken","smsProvider","smsPhone","t","save","Meteor","call","err","title","text","type","timer","catch"],"mappings":"AAAA;AAAA,OAAkB,WAAlB;;;;;;;;;;GACA,AAAS,AAAe,AAExB,AAAe,AAEb;OALK;AAWL,AAAa,AAAU,AAAU,AAC/B,AAAM,AAAE,AAAQ;;;;;KAAV;AAAoB,QAApB,SAAA,AAAiC;;;;;QAAa,CAApD;wEAEA;AAAI,AAAC,aAAL,AAAa,AACX;AAAA,AAAM,AAAQ,AAAE,AAAc,AAAQ,AAAE,AAA0B,AAClE;;SAAO,UAAP,AACD;;aACD;AAAA,AAAI,AAAC,AAAU,AACb;;SAAM,AAAQ,aAAd,AAAM,AAAU,AAAc,AAAQ,AAAE,AAA4B,AACpE;YAAO,UAAP,uDACD;;AACD;;QAAI,CAAC,UAAL,AAAkB,AAChB;YAAM,QAAA,AAAQ,EAAd,AAAM,AAAU,cAAc,QAAA,AAAQ,EAAE,4BAAxC,AAA8B,AAAyC,AACvE;aAAA,AAAO,AACR;AACD;;AAAI,AAAC,eAAL,AAAe,YACb;AAAM,kBAAN,AAAM,AAAQ,AAAE,AAAc,oBAAA,AAAQ,AAAE,yBAAxC,AAA8B,AAAsC,AACpE;YAAO,KAAP,AACD;+CAED,AAAM,2CAAO,AAAM,AACjB;AAAA,AAAO,AAAK,AAAoB,AAAU,AAAC,AAAQ,AACjD;;AAAI;iBACK,AAAM,UAAb,AAAO,AAAM,AAAQ,AAAE,AACtB,AACC,AACH;;gBACD;AAAO,iBAAM,AACX;AALA,SADF,AAAS;AAMA,iBADI,AACJ,AAAQ,AAAE,AACjB;;AAFW,AAEL,AAAQ,AAAE,AAChB;AAHW,AAGL,AACN;;AAJW,AAIJ;AAJF,WAAP,AAAO,AAKJ,AAAM,AAAM,AAChB;AAzCP,AAAe,AA4BX,AACE,AAaD,AACD,AACA,AAAO,AACR","file":"/imports/plugins/included/sms/client/actions/settings.js.map","sourcesContent":["import Alert from \"sweetalert2\";\nimport { i18next } from \"/client/api\";\n\nexport default {\n\n  /**\n   * Save email settings\n   * @param {Object} settings - object of mail provider settings\n   * @param {Function} callback - optional callback\n   * @return {Boolean} returns true if all fields provided and update method called\n   */\n  saveSettings(settings, callback) {\n    const { apiKey, apiToken, smsProvider, smsPhone } = settings;\n\n    if (!apiKey) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noApiKey\"), \"error\");\n      return callback();\n    }\n    if (!apiToken) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noApiToken\"), \"error\");\n      return callback();\n    }\n    if (!smsProvider) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noSmsProvider\"), \"error\");\n      return callback();\n    }\n    if (!smsPhone) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noSmsPhone\"), \"error\");\n      return callback();\n    }\n\n    const save = () => {\n      Meteor.call(\"sms/saveSettings\", settings, (err) => {\n        if (err) {\n          return Alert(i18next.t(\"app.error\"),\n           \"Your API credentials could not be saved\",\n            \"error\");\n        }\n        return Alert({\n          title: i18next.t(\"app.success\"),\n          text: i18next.t(\"admin.alerts.saveSuccess\"),\n          type: \"success\",\n          timer: 1700\n        }).catch(() => null);\n      });\n    };\n    save();\n    return callback();\n  }\n};\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/sms/client/actions/settings.js.map","sourceFileName":"/imports/plugins/included/sms/client/actions/settings.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"settings"},"ignored":false,"code":"var Alert = void 0;\nmodule.importSync(\"sweetalert2\", {\n  \"default\": function (v) {\n    Alert = v;\n  }\n}, 0);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 1);\nmodule.export(\"default\", exports.default = {\n  /**\n   * Save email settings\n   * @param {Object} settings - object of mail provider settings\n   * @param {Function} callback - optional callback\n   * @return {Boolean} returns true if all fields provided and update method called\n   */saveSettings: function (settings, callback) {\n    var apiKey = settings.apiKey,\n        apiToken = settings.apiToken,\n        smsProvider = settings.smsProvider,\n        smsPhone = settings.smsPhone;\n\n    if (!apiKey) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noApiKey\"), \"error\");\n      return callback();\n    }\n\n    if (!apiToken) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noApiToken\"), \"error\");\n      return callback();\n    }\n\n    if (!smsProvider) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noSmsProvider\"), \"error\");\n      return callback();\n    }\n\n    if (!smsPhone) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noSmsPhone\"), \"error\");\n      return callback();\n    }\n\n    var save = function () {\n      Meteor.call(\"sms/saveSettings\", settings, function (err) {\n        if (err) {\n          return Alert(i18next.t(\"app.error\"), \"Your API credentials could not be saved\", \"error\");\n        }\n\n        return Alert({\n          title: i18next.t(\"app.success\"),\n          text: i18next.t(\"admin.alerts.saveSuccess\"),\n          type: \"success\",\n          timer: 1700\n        }).catch(function () {\n          return null;\n        });\n      });\n    };\n\n    save();\n    return callback();\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/sms/client/actions/settings.js"],"names":["Alert","i18next","saveSettings","settings","callback","apiKey","apiToken","smsProvider","smsPhone","t","save","Meteor","call","err","title","text","type","timer","catch"],"mappings":"AAAA;AAAA,OAAkB,WAAlB;;;;;;;;;;GACA,AAAS,AAAe,AAExB,AAAe,AAEb;OALK;AAWL,AAAa,AAAU,AAAU,AAC/B,AAAM,AAAE,AAAQ;;;;;KAAV;AAAoB,QAApB,SAAA,AAAiC;;;;;QAAa,CAApD;wEAEA;AAAI,AAAC,aAAL,AAAa,AACX;AAAA,AAAM,AAAQ,AAAE,AAAc,AAAQ,AAAE,AAA0B,AAClE;;SAAO,UAAP,AACD;;aACD;AAAA,AAAI,AAAC,AAAU,AACb;;SAAM,AAAQ,aAAd,AAAM,AAAU,AAAc,AAAQ,AAAE,AAA4B,AACpE;YAAO,UAAP,uDACD;;AACD;;QAAI,CAAC,UAAL,AAAkB,AAChB;YAAM,QAAA,AAAQ,EAAd,AAAM,AAAU,cAAc,QAAA,AAAQ,EAAE,4BAAxC,AAA8B,AAAyC,AACvE;aAAA,AAAO,AACR;AACD;;AAAI,AAAC,eAAL,AAAe,YACb;AAAM,kBAAN,AAAM,AAAQ,AAAE,AAAc,oBAAA,AAAQ,AAAE,yBAAxC,AAA8B,AAAsC,AACpE;YAAO,KAAP,AACD;+CAED,AAAM,2CAAO,AAAM,AACjB;AAAA,AAAO,AAAK,AAAoB,AAAU,AAAC,AAAQ,AACjD;;AAAI;iBACK,AAAM,UAAb,AAAO,AAAM,AAAQ,AAAE,AACtB,AACC,AACH;;gBACD;AAAO,iBAAM,AACX;AALA,SADF,AAAS;AAMA,iBADI,AACJ,AAAQ,AAAE,AACjB;;AAFW,AAEL,AAAQ,AAAE,AAChB;AAHW,AAGL,AACN;;AAJW,AAIJ;AAJF,WAAP,AAAO,AAKJ,AAAM,AAAM,AAChB;AAzCP,AAAe,AA4BX,AACE,AAaD,AACD,AACA,AAAO,AACR","file":"/imports/plugins/included/sms/client/actions/settings.js.map","sourcesContent":["import Alert from \"sweetalert2\";\nimport { i18next } from \"/client/api\";\n\nexport default {\n\n  /**\n   * Save email settings\n   * @param {Object} settings - object of mail provider settings\n   * @param {Function} callback - optional callback\n   * @return {Boolean} returns true if all fields provided and update method called\n   */\n  saveSettings(settings, callback) {\n    const { apiKey, apiToken, smsProvider, smsPhone } = settings;\n\n    if (!apiKey) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noApiKey\"), \"error\");\n      return callback();\n    }\n    if (!apiToken) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noApiToken\"), \"error\");\n      return callback();\n    }\n    if (!smsProvider) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noSmsProvider\"), \"error\");\n      return callback();\n    }\n    if (!smsPhone) {\n      Alert(i18next.t(\"app.error\"), i18next.t(\"admin.alerts.noSmsPhone\"), \"error\");\n      return callback();\n    }\n\n    const save = () => {\n      Meteor.call(\"sms/saveSettings\", settings, (err) => {\n        if (err) {\n          return Alert(i18next.t(\"app.error\"),\n           \"Your API credentials could not be saved\",\n            \"error\");\n        }\n        return Alert({\n          title: i18next.t(\"app.success\"),\n          text: i18next.t(\"admin.alerts.saveSuccess\"),\n          type: \"success\",\n          timer: 1700\n        }).catch(() => null);\n      });\n    };\n    save();\n    return callback();\n  }\n};\n"]},"hash":"38ea8dc25a26ccf8d25bb284fd9d322d3ba0bf33"}
