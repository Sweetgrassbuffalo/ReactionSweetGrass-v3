{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/collections","imported":["Media","Revisions"],"specifiers":[{"kind":"named","imported":"Media","local":"Media"},{"kind":"named","imported":"Revisions","local":"Revisions"}]},{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/imports/plugins/core/revisions/lib/api/revisions","imported":["RevisionApi"],"specifiers":[{"kind":"named","imported":"RevisionApi","local":"RevisionApi"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/publications/collections/media.js","filenameRelative":"/server/publications/collections/media.js","inputSourceMap":{"version":3,"sources":["/server/publications/collections/media.js"],"names":["Media","Revisions","Reaction","RevisionApi","Meteor","publish","shops","check","Match","Optional","Array","selector","shopId","getShopId","ready","$in","hasPermission","userId","$nin","isRevisionControlEnabled","revisionHandle","find","observe","added","revision","media","findOne","documentId","_id","changed","removed","onStop","stop"],"mappings":"AAAA,IAAS;IAAT,AAAgB;AAAhB,OAAiC,WAAjC;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAgB,AACzB,AAAS,AAAmB,AAG5B,A;AAIA,AAAO,AAAQ,AAAS,AAAU,AAAO,AACvC,AAAM,AAAO,AAAM,AAAS,AAC5B,AAAI;;;UACE,QAAS,SAAS,UAAxB,AAAe;;;8BACf;MAAA,AAAI,AAAC,AAAQ,AACX;MAAO,AAAK,SAAZ,AAAO,SACR;;;gBACD;AAAA,AAAI,AAAQ,AACV;;cAAW,AACT;;yBAEH;AAHC,AAAW,AACU;AAGvB;;MAAA,AAAI,OAAO,AACT;;;aAAA,AAAW,AACU,AACZ,AAGV;AAJsB,AACjB;AAFO,AACT;AAdmC,AAoBvC,IACA;;;MAAI,CAAC,SAAA,AAAS,cAAc,CAAvB,AAAuB,AAAC,kBAAkB,KAA/C,AAAK,AAA+C,SAAS,AAC3D;aAAA,AAAS;WACF,CAAA,AAAC,MADR,AAAgC,AACzB,AAAO,AAEf;AAHiC,AAC9B;AAFJ,SAIO,AACL;AACA;aAAA,AAAS;YACD,CADR,AAAgC,AACxB,AAAC,AAEV;AAHiC,AAC9B;AAIJ;;MAAI,YAAJ,AAAI,AAAY,4BAA4B,AAC1C;QAAM,2BAAiB,AAAU;sBAAK,AACpB,AAChB;;eAAqB;AAAF;AAFiB,AACpC,KADqB,EAEM;iCAFN,AAAe,AAGnC;YAHoB,AAGZ,+BACT;;YAAQ,OAAD,AAAc,AACnB;AAAM,sBAAQ,AAAM,SAAN,MAAc,KAA5B,AAAc,AAAuB;;iDACrC;AAAA,AAAI,AAAO,AACT;AAAA,AAAK,AAAM,AAAS,AAAM,AAAK,AAC/B;eAAK,UAAL,AAAW,UAAX,AAAwB,AAAS,AAAK,AACvC;2CANM,AAOR;;0CACD;;cAAU,QAAD,AAAc,2BACrB;AAAA,AAAM,AAAQ,AAAM,AAAQ,AAAS,AACrC;AAAK,yBAAL,AAAa,UAAb,AAAsB,AAAM,AAAK,AACjC;YAAA,AAAK,AAAQ,UAXN,AAWP,AAA0B,AAAS,AAAK,AACzC;6CACD;;cAAU,OAAD,AAAc,AACrB;AAAI,kBAAJ,AAAc,4BACZ;;AAAM,kBAAQ,QAAA,AAAM,aAAQ,SAAS,KAArC,AAAc;AACd;AAAA,AAAI,AAAO,AACT;AAAA,AAAK,AAAQ,AAAS,AAAM,AAAK,AACjC,AAAK,AAAQ,AAAa,AAAS,AAAK,AACzC,AACF;AArBgB,AAAQ,AAAE;4BAsB5B;qBArBQ;AAHX,AAAuB,AA2BvB;AAAA,AAAK,AAAO,AAAM,AAChB,AAAe,AAChB;;AAFD;qBAKF;AAFC;AA/DH,AAiEE,AAAO,AAAM,AAAK,AAChB,AAAiB,AAEpB,CAjEC","file":"/server/publications/collections/media.js.map","sourcesContent":["import { Media, Revisions } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\nimport { RevisionApi } from \"/imports/plugins/core/revisions/lib/api/revisions\";\n\n\n/**\n * CollectionFS - Image/Video Publication\n * @params {Array} shops - array of current shop object\n */\nMeteor.publish(\"Media\", function (shops) {\n  check(shops, Match.Optional(Array));\n  let selector;\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n  if (shopId) {\n    selector = {\n      \"metadata.shopId\": shopId\n    };\n  }\n  if (shops) {\n    selector = {\n      \"metadata.shopId\": {\n        $in: shops\n      }\n    };\n  }\n\n  // Product editors can see both published and unpublished images\n  if (!Reaction.hasPermission([\"createProduct\"], this.userId)) {\n    selector[\"metadata.workflow\"] = {\n      $in: [null, \"published\"]\n    };\n  } else {\n    // but no one gets to see archived images\n    selector[\"metadata.workflow\"] = {\n      $nin: [\"archived\"]\n    };\n  }\n\n  if (RevisionApi.isRevisionControlEnabled()) {\n    const revisionHandle = Revisions.find({\n      \"documentType\": \"image\",\n      \"workflow.status\": { $nin: [ \"revision/published\"] }\n    }).observe({\n      added: (revision) => {\n        const media = Media.findOne(revision.documentId);\n        if (media) {\n          this.added(\"Media\", media._id, media);\n          this.added(\"Revisions\", revision._id, revision);\n        }\n      },\n      changed: (revision) => {\n        const media = Media.findOne(revision.documentId);\n        this.changed(\"Media\", media._id, media);\n        this.changed(\"Revisions\", revision._id, revision);\n      },\n      removed: (revision) => {\n        if (revision) {\n          const media = Media.findOne(revision.documentId);\n          if (media) {\n            this.removed(\"Media\", media._id, media);\n            this.removed(\"Revisions\", revision._id, revision);\n          }\n        }\n      }\n    });\n\n    this.onStop(() => {\n      revisionHandle.stop();\n    });\n  }\n\n  return Media.find({\n    \"metadata.type\": \"brandAsset\"\n  });\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/publications/collections/media.js.map","sourceFileName":"/server/publications/collections/media.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"media"},"ignored":false,"code":"var Media = void 0,\n    Revisions = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Media: function (v) {\n    Media = v;\n  },\n  Revisions: function (v) {\n    Revisions = v;\n  }\n}, 0);\nvar Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 1);\nvar RevisionApi = void 0;\nmodule.importSync(\"/imports/plugins/core/revisions/lib/api/revisions\", {\n  RevisionApi: function (v) {\n    RevisionApi = v;\n  }\n}, 2);\n/**\n * CollectionFS - Image/Video Publication\n * @params {Array} shops - array of current shop object\n */Meteor.publish(\"Media\", function (shops) {\n  var _this = this;\n\n  check(shops, Match.Optional(Array));\n  var selector = void 0;\n  var shopId = Reaction.getShopId();\n\n  if (!shopId) {\n    return this.ready();\n  }\n\n  if (shopId) {\n    selector = {\n      \"metadata.shopId\": shopId\n    };\n  }\n\n  if (shops) {\n    selector = {\n      \"metadata.shopId\": {\n        $in: shops\n      }\n    };\n  } // Product editors can see both published and unpublished images\n\n\n  if (!Reaction.hasPermission([\"createProduct\"], this.userId)) {\n    selector[\"metadata.workflow\"] = {\n      $in: [null, \"published\"]\n    };\n  } else {\n    // but no one gets to see archived images\n    selector[\"metadata.workflow\"] = {\n      $nin: [\"archived\"]\n    };\n  }\n\n  if (RevisionApi.isRevisionControlEnabled()) {\n    var revisionHandle = Revisions.find({\n      \"documentType\": \"image\",\n      \"workflow.status\": {\n        $nin: [\"revision/published\"]\n      }\n    }).observe({\n      added: function (revision) {\n        var media = Media.findOne(revision.documentId);\n\n        if (media) {\n          _this.added(\"Media\", media._id, media);\n\n          _this.added(\"Revisions\", revision._id, revision);\n        }\n      },\n      changed: function (revision) {\n        var media = Media.findOne(revision.documentId);\n\n        _this.changed(\"Media\", media._id, media);\n\n        _this.changed(\"Revisions\", revision._id, revision);\n      },\n      removed: function (revision) {\n        if (revision) {\n          var media = Media.findOne(revision.documentId);\n\n          if (media) {\n            _this.removed(\"Media\", media._id, media);\n\n            _this.removed(\"Revisions\", revision._id, revision);\n          }\n        }\n      }\n    });\n    this.onStop(function () {\n      revisionHandle.stop();\n    });\n  }\n\n  return Media.find({\n    \"metadata.type\": \"brandAsset\"\n  });\n});","map":{"version":3,"sources":["/server/publications/collections/media.js"],"names":["Media","Revisions","Reaction","RevisionApi","Meteor","publish","shops","check","Match","Optional","Array","selector","shopId","getShopId","ready","$in","hasPermission","userId","$nin","isRevisionControlEnabled","revisionHandle","find","observe","added","revision","media","findOne","documentId","_id","changed","removed","onStop","stop"],"mappings":"AAAA,IAAS;IAAT,AAAgB;AAAhB,OAAiC,WAAjC;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAgB,AACzB,AAAS,AAAmB,AAG5B,A;AAIA,AAAO,AAAQ,AAAS,AAAU,AAAO,AACvC,AAAM,AAAO,AAAM,AAAS,AAC5B,AAAI;;;UACE,QAAS,SAAS,UAAxB,AAAe;;;8BACf;MAAA,AAAI,AAAC,AAAQ,AACX;MAAO,AAAK,SAAZ,AAAO,SACR;;;gBACD;AAAA,AAAI,AAAQ,AACV;;cAAW,AACT;;yBAEH;AAHC,AAAW,AACU;AAGvB;;MAAA,AAAI,OAAO,AACT;;;aAAA,AAAW,AACU,AACZ,AAGV;AAJsB,AACjB;AAFO,AACT;AAdmC,AAoBvC,IACA;;;MAAI,CAAC,SAAA,AAAS,cAAc,CAAvB,AAAuB,AAAC,kBAAkB,KAA/C,AAAK,AAA+C,SAAS,AAC3D;aAAA,AAAS;WACF,CAAA,AAAC,MADR,AAAgC,AACzB,AAAO,AAEf;AAHiC,AAC9B;AAFJ,SAIO,AACL;AACA;aAAA,AAAS;YACD,CADR,AAAgC,AACxB,AAAC,AAEV;AAHiC,AAC9B;AAIJ;;MAAI,YAAJ,AAAI,AAAY,4BAA4B,AAC1C;QAAM,2BAAiB,AAAU;sBAAK,AACpB,AAChB;;eAAqB;AAAF;AAFiB,AACpC,KADqB,EAEM;iCAFN,AAAe,AAGnC;YAHoB,AAGZ,+BACT;;YAAQ,OAAD,AAAc,AACnB;AAAM,sBAAQ,AAAM,SAAN,MAAc,KAA5B,AAAc,AAAuB;;iDACrC;AAAA,AAAI,AAAO,AACT;AAAA,AAAK,AAAM,AAAS,AAAM,AAAK,AAC/B;eAAK,UAAL,AAAW,UAAX,AAAwB,AAAS,AAAK,AACvC;2CANM,AAOR;;0CACD;;cAAU,QAAD,AAAc,2BACrB;AAAA,AAAM,AAAQ,AAAM,AAAQ,AAAS,AACrC;AAAK,yBAAL,AAAa,UAAb,AAAsB,AAAM,AAAK,AACjC;YAAA,AAAK,AAAQ,UAXN,AAWP,AAA0B,AAAS,AAAK,AACzC;6CACD;;cAAU,OAAD,AAAc,AACrB;AAAI,kBAAJ,AAAc,4BACZ;;AAAM,kBAAQ,QAAA,AAAM,aAAQ,SAAS,KAArC,AAAc;AACd;AAAA,AAAI,AAAO,AACT;AAAA,AAAK,AAAQ,AAAS,AAAM,AAAK,AACjC,AAAK,AAAQ,AAAa,AAAS,AAAK,AACzC,AACF;AArBgB,AAAQ,AAAE;4BAsB5B;qBArBQ;AAHX,AAAuB,AA2BvB;AAAA,AAAK,AAAO,AAAM,AAChB,AAAe,AAChB;;AAFD;qBAKF;AAFC;AA/DH,AAiEE,AAAO,AAAM,AAAK,AAChB,AAAiB,AAEpB,CAjEC","file":"/server/publications/collections/media.js.map","sourcesContent":["import { Media, Revisions } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\nimport { RevisionApi } from \"/imports/plugins/core/revisions/lib/api/revisions\";\n\n\n/**\n * CollectionFS - Image/Video Publication\n * @params {Array} shops - array of current shop object\n */\nMeteor.publish(\"Media\", function (shops) {\n  check(shops, Match.Optional(Array));\n  let selector;\n  const shopId = Reaction.getShopId();\n  if (!shopId) {\n    return this.ready();\n  }\n  if (shopId) {\n    selector = {\n      \"metadata.shopId\": shopId\n    };\n  }\n  if (shops) {\n    selector = {\n      \"metadata.shopId\": {\n        $in: shops\n      }\n    };\n  }\n\n  // Product editors can see both published and unpublished images\n  if (!Reaction.hasPermission([\"createProduct\"], this.userId)) {\n    selector[\"metadata.workflow\"] = {\n      $in: [null, \"published\"]\n    };\n  } else {\n    // but no one gets to see archived images\n    selector[\"metadata.workflow\"] = {\n      $nin: [\"archived\"]\n    };\n  }\n\n  if (RevisionApi.isRevisionControlEnabled()) {\n    const revisionHandle = Revisions.find({\n      \"documentType\": \"image\",\n      \"workflow.status\": { $nin: [ \"revision/published\"] }\n    }).observe({\n      added: (revision) => {\n        const media = Media.findOne(revision.documentId);\n        if (media) {\n          this.added(\"Media\", media._id, media);\n          this.added(\"Revisions\", revision._id, revision);\n        }\n      },\n      changed: (revision) => {\n        const media = Media.findOne(revision.documentId);\n        this.changed(\"Media\", media._id, media);\n        this.changed(\"Revisions\", revision._id, revision);\n      },\n      removed: (revision) => {\n        if (revision) {\n          const media = Media.findOne(revision.documentId);\n          if (media) {\n            this.removed(\"Media\", media._id, media);\n            this.removed(\"Revisions\", revision._id, revision);\n          }\n        }\n      }\n    });\n\n    this.onStop(() => {\n      revisionHandle.stop();\n    });\n  }\n\n  return Media.find({\n    \"metadata.type\": \"brandAsset\"\n  });\n});\n"]},"hash":"756ed2ecaa8eec1b2eda1396ec6a6fb56eac3147"}
