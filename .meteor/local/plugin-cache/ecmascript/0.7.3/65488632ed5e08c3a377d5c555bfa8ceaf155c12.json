{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"moment","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"moment"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/lib/collections","imported":["Jobs","Logs"],"specifiers":[{"kind":"named","imported":"Jobs","local":"Jobs"},{"kind":"named","imported":"Logs","local":"Logs"}]},{"source":"/server/api","imported":["Hooks","Logger"],"specifiers":[{"kind":"named","imported":"Hooks","local":"Hooks"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"../methods/taxCalc","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"taxCalc"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/taxes-avalara/server/jobs/cleanup.js","filenameRelative":"/imports/plugins/included/taxes-avalara/server/jobs/cleanup.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/server/jobs/cleanup.js"],"names":["moment","Meteor","Jobs","Logs","Hooks","Logger","taxCalc","cleanupAvalaraJobs","callback","pkgData","getPackageData","settings","avalara","enabled","saveDuration","logRetentionDuration","olderThan","subtract","result","remove","date","$lt","debug","Events","add","isAppTest","type","Job","priority","retry","retries","wait","backoff","save","cancelRepeats","processJobs","pollInterval","workTimeout","job","error","done","toString","repeatId","success"],"mappings":"AAAA;AAAA,OAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACnB,A,AAAA,AAAS,AAAc,AACvB,AAAS,AAAM,AAAY,AAC3B,AAAS,AAAO,AAAc,AAC9B,AAAO,AAAa,AAGpB;;AAKA,AAAS,AAAmB,AAAU,AACpC,AAAM,AAAU,AAAQ;;;;yCACxB;AAAI,MAAW,UAAQ,QAAvB,AAAe,AAAiB,AAAQ,AAAS,AAC/C;;MAAM,mBAAe,AAAQ,SAAR,QAAA,AAAiB,AAAQ,SAA9C,AACA;QAAM,AAAY,eAAS,QAAT,AAAkB,iBAApC,AAAkB,AAAgC,AAClD;QAAM,AAAS,YAAA,AAAK,SAAO,uBACzB;QAAM;;aADR,AAAe,AAAY,AAK3B,AAAO,AAAO,AAAU,AAAO,AAChC;AALS,AACC;AAAL;;AAKN;;AACD;AAGD,AAAM,AAAO,AAAI,AAAiB,AAAM;;AACtC,MAAI,AAAC,OAAO,IAAZ,AAAuB,6BACrB;OAAO,OAAP,AAAa,WADQ,AACrB,AACA;iBACA,yDAAA,AAAK,AAAO,AAAE;;SAAM;YAAR;;AAAZ,+CACA,IAAA,AAAI,AAAI,SAAR,AAAc,AAA6B,AACxC,AAAS,AACT,AAAM,AACL;AACM,eAFD,AAGL;YALJ,AAES,AAGI,AAEV;AAPH,AAOQ,eAPR,AAOQ,AACJ,AAAe;AANV,AACI,AACT;qBATR,AAgBC,AAGD;AAJG;AAIY,AAAY,AACzB;AAAA,AAAK,AAAY,AACf,AACE,AAAc,AAAK,AACnB,AAAa,AAAM,AAErB,AAAC,AAAK;OArDH,kBAAP,kBAqDI,AAAmB,YACjB;OAAA,AAAO,AAAM,YAAb,AACA;AACE,AAAI,AAAO,uBACT;AAAA,AAAI,AAAK,iBAAM,MAAf,AAAS,AAAkB,AAAE,AAAU;AAFxB,AAAU,AAAO,AAClC,eACE,eACA;iBACD;AAHD,AAGO,wCACL;UAAM,OAAN,AAAgB,AAChB;YAAO,KAAP,AAAa,MAAb;oBACA;;AAAA,AAAI,AAAK,AAAS,AAAE;aAApB,AAAkB,AAAY;sBAC9B;qBACD;;oBATH,AAUC;;AAjBL,AAkBG;AAEJ","file":"/imports/plugins/included/taxes-avalara/server/jobs/cleanup.js.map","sourcesContent":["import moment from \"moment\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Jobs, Logs } from \"/lib/collections\";\nimport { Hooks, Logger } from \"/server/api\";\nimport taxCalc from \"../methods/taxCalc\";\n\n\n/**\n * @summary Remove logs older than the configured number of days\n * @param {Function} callback - function to call when process complete\n * @returns {Number} results of remmoval query\n */\nfunction cleanupAvalaraJobs(callback) {\n  const pkgData = taxCalc.getPackageData();\n  if (pkgData && pkgData.settings.avalara.enabled) {\n    const saveDuration = pkgData.settings.avalara.logRetentionDuration;\n    const olderThan = moment().subtract(saveDuration, \"days\");\n    const result = Logs.remove({\n      date: {\n        $lt: olderThan\n      }\n    });\n    Logger.debug(`Removed ${result} Avalara log records`);\n  }\n  callback();\n}\n\n\nHooks.Events.add(\"afterCoreInit\", () => {\n  if (!Meteor.isAppTest) {\n    Logger.debug(\"Adding Avalara log cleanup job and removing existing\");\n    // Renove all previous jobs\n    Jobs.remove({ type: \"logs/removeOldAvalaraLogs\" });\n    new Job(Jobs, \"logs/removeOldAvalaraLogs\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .save({\n        cancelRepeats: true\n      });\n  }\n});\n\n\nexport default function () {\n  Jobs.processJobs(\"logs/removeOldAvalaraLogs\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"Avalara log cleanup running\");\n      cleanupAvalaraJobs(function (error) {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"Avalara Log Cleanup ran successfully\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/taxes-avalara/server/jobs/cleanup.js.map","sourceFileName":"/imports/plugins/included/taxes-avalara/server/jobs/cleanup.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"cleanup"},"ignored":false,"code":"var moment = void 0;\nmodule.importSync(\"moment\", {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Jobs = void 0,\n    Logs = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Jobs: function (v) {\n    Jobs = v;\n  },\n  Logs: function (v) {\n    Logs = v;\n  }\n}, 2);\nvar Hooks = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Hooks: function (v) {\n    Hooks = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 3);\nvar taxCalc = void 0;\nmodule.importSync(\"../methods/taxCalc\", {\n  \"default\": function (v) {\n    taxCalc = v;\n  }\n}, 4);\n\n/**\n * @summary Remove logs older than the configured number of days\n * @param {Function} callback - function to call when process complete\n * @returns {Number} results of remmoval query\n */function cleanupAvalaraJobs(callback) {\n  var pkgData = taxCalc.getPackageData();\n\n  if (pkgData && pkgData.settings.avalara.enabled) {\n    var saveDuration = pkgData.settings.avalara.logRetentionDuration;\n    var olderThan = moment().subtract(saveDuration, \"days\");\n    var result = Logs.remove({\n      date: {\n        $lt: olderThan\n      }\n    });\n    Logger.debug(\"Removed \" + result + \" Avalara log records\");\n  }\n\n  callback();\n}\n\nHooks.Events.add(\"afterCoreInit\", function () {\n  if (!Meteor.isAppTest) {\n    Logger.debug(\"Adding Avalara log cleanup job and removing existing\"); // Renove all previous jobs\n\n    Jobs.remove({\n      type: \"logs/removeOldAvalaraLogs\"\n    });\n    new Job(Jobs, \"logs/removeOldAvalaraLogs\", {}).priority(\"normal\").retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\"\n    }).save({\n      cancelRepeats: true\n    });\n  }\n});\nmodule.export(\"default\", exports.default = function () {\n  Jobs.processJobs(\"logs/removeOldAvalaraLogs\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, function (job, callback) {\n    Logger.debug(\"Avalara log cleanup running\");\n    cleanupAvalaraJobs(function (error) {\n      if (error) {\n        job.done(error.toString(), {\n          repeatId: true\n        });\n        callback();\n      } else {\n        var success = \"Avalara Log Cleanup ran successfully\";\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n        callback();\n      }\n    });\n  });\n});","map":{"version":3,"sources":["/imports/plugins/included/taxes-avalara/server/jobs/cleanup.js"],"names":["moment","Meteor","Jobs","Logs","Hooks","Logger","taxCalc","cleanupAvalaraJobs","callback","pkgData","getPackageData","settings","avalara","enabled","saveDuration","logRetentionDuration","olderThan","subtract","result","remove","date","$lt","debug","Events","add","isAppTest","type","Job","priority","retry","retries","wait","backoff","save","cancelRepeats","processJobs","pollInterval","workTimeout","job","error","done","toString","repeatId","success"],"mappings":"AAAA;AAAA,OAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACnB,A,AAAA,AAAS,AAAc,AACvB,AAAS,AAAM,AAAY,AAC3B,AAAS,AAAO,AAAc,AAC9B,AAAO,AAAa,AAGpB;;AAKA,AAAS,AAAmB,AAAU,AACpC,AAAM,AAAU,AAAQ;;;;yCACxB;AAAI,MAAW,UAAQ,QAAvB,AAAe,AAAiB,AAAQ,AAAS,AAC/C;;MAAM,mBAAe,AAAQ,SAAR,QAAA,AAAiB,AAAQ,SAA9C,AACA;QAAM,AAAY,eAAS,QAAT,AAAkB,iBAApC,AAAkB,AAAgC,AAClD;QAAM,AAAS,YAAA,AAAK,SAAO,uBACzB;QAAM;;aADR,AAAe,AAAY,AAK3B,AAAO,AAAO,AAAU,AAAO,AAChC;AALS,AACC;AAAL;;AAKN;;AACD;AAGD,AAAM,AAAO,AAAI,AAAiB,AAAM;;AACtC,MAAI,AAAC,OAAO,IAAZ,AAAuB,6BACrB;OAAO,OAAP,AAAa,WADQ,AACrB,AACA;iBACA,yDAAA,AAAK,AAAO,AAAE;;SAAM;YAAR;;AAAZ,+CACA,IAAA,AAAI,AAAI,SAAR,AAAc,AAA6B,AACxC,AAAS,AACT,AAAM,AACL;AACM,eAFD,AAGL;YALJ,AAES,AAGI,AAEV;AAPH,AAOQ,eAPR,AAOQ,AACJ,AAAe;AANV,AACI,AACT;qBATR,AAgBC,AAGD;AAJG;AAIY,AAAY,AACzB;AAAA,AAAK,AAAY,AACf,AACE,AAAc,AAAK,AACnB,AAAa,AAAM,AAErB,AAAC,AAAK;OArDH,kBAAP,kBAqDI,AAAmB,YACjB;OAAA,AAAO,AAAM,YAAb,AACA;AACE,AAAI,AAAO,uBACT;AAAA,AAAI,AAAK,iBAAM,MAAf,AAAS,AAAkB,AAAE,AAAU;AAFxB,AAAU,AAAO,AAClC,eACE,eACA;iBACD;AAHD,AAGO,wCACL;UAAM,OAAN,AAAgB,AAChB;YAAO,KAAP,AAAa,MAAb;oBACA;;AAAA,AAAI,AAAK,AAAS,AAAE;aAApB,AAAkB,AAAY;sBAC9B;qBACD;;oBATH,AAUC;;AAjBL,AAkBG;AAEJ","file":"/imports/plugins/included/taxes-avalara/server/jobs/cleanup.js.map","sourcesContent":["import moment from \"moment\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Jobs, Logs } from \"/lib/collections\";\nimport { Hooks, Logger } from \"/server/api\";\nimport taxCalc from \"../methods/taxCalc\";\n\n\n/**\n * @summary Remove logs older than the configured number of days\n * @param {Function} callback - function to call when process complete\n * @returns {Number} results of remmoval query\n */\nfunction cleanupAvalaraJobs(callback) {\n  const pkgData = taxCalc.getPackageData();\n  if (pkgData && pkgData.settings.avalara.enabled) {\n    const saveDuration = pkgData.settings.avalara.logRetentionDuration;\n    const olderThan = moment().subtract(saveDuration, \"days\");\n    const result = Logs.remove({\n      date: {\n        $lt: olderThan\n      }\n    });\n    Logger.debug(`Removed ${result} Avalara log records`);\n  }\n  callback();\n}\n\n\nHooks.Events.add(\"afterCoreInit\", () => {\n  if (!Meteor.isAppTest) {\n    Logger.debug(\"Adding Avalara log cleanup job and removing existing\");\n    // Renove all previous jobs\n    Jobs.remove({ type: \"logs/removeOldAvalaraLogs\" });\n    new Job(Jobs, \"logs/removeOldAvalaraLogs\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .save({\n        cancelRepeats: true\n      });\n  }\n});\n\n\nexport default function () {\n  Jobs.processJobs(\"logs/removeOldAvalaraLogs\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"Avalara log cleanup running\");\n      cleanupAvalaraJobs(function (error) {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"Avalara Log Cleanup ran successfully\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n}\n"]},"hash":"65488632ed5e08c3a377d5c555bfa8ceaf155c12"}
