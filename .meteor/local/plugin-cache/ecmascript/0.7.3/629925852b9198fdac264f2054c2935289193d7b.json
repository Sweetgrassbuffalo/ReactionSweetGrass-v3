{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/server/api","imported":["Logger","MethodHooks","Reaction"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"MethodHooks","local":"MethodHooks"},{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/notifications/server/hooks/notification.js","filenameRelative":"/imports/plugins/included/notifications/server/hooks/notification.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/notifications/server/hooks/notification.js"],"names":["Meteor","Logger","MethodHooks","Reaction","getAdminUserId","admin","users","findOne","_id","sendNotificationToAdmin","adminId","type","prefix","getShopPrefix","url","sms","debug","call","after","options","userId","result"],"mappings":";;;;;;AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAQ,AAAa,AAAgB;;AAE9C,IAAM,iBAAiB,YAAM,AAC3B;AACA;AACA;MAAM,eAAQ,AAAO,MAAP,AAAa;8BAA3B,AAAc,AAAqB,AACP;AADO,AACjC,GADY;;yGAGd;AAAI,WAAS,MAAb,AAAa,AAAO,AAAU,AAAU,AACtC;AAAA,AAAO,AAAM,AACd;;;AACD,AAAO;;AATT,AAUC;aAED;AAAM,wBAA0B,AAAC,AAAY,AAC3C;MAAM,AAAO,MAAb,AACA;MAAM,MAAN,AAAe,AAAS,AACxB,MAAA,AAAM,AAAO,AAAE,AAAO,AACtB;;AAAM,SAAM,MAJ+B,AAI3C,AACA;8DACA;AAAA,AAAO,AAAM,AACb,AAAO,AAAO,AAAK,AAAqB,AAAS,AAAM,AAAK;;AAP9D,AAQC;sBAED;MAAY,OAAZ,AAAkB,AAAwB,AAAU,AAAS,AAC3D;MAAM,SAAS,AAAO,SAAtB,AAAe,AACf;MAAM,AAAO,MAAb,AACA;MAAM,MAAN,AAAe,AAAS,AACxB,AAAM,AAAO,AAAE,AAAO,AACtB,MAL2D,AAK3D,AAAM,AAAM,AAEZ;;kDACA;SAAO,KAAP,AAAc,6BAAgC,WARa,AAQ3D,AAAqD,AACrD,AAAO,AAAK,AAAqB,AAAQ,AAAM,AAAK,AAEpD,MACA;;MAAM,UAAN,AAAgB;;eAChB;AAAI,WAAJ,AAAa,wBACX;AAAA,AAAO,AAAwB,AAChC;;;AAfH,AAgBE,AAAO,AAAQ,AAChB","file":"/imports/plugins/included/notifications/server/hooks/notification.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Logger, MethodHooks, Reaction } from \"/server/api\";\n\nconst getAdminUserId = () => {\n  // TODO validate with multiple show owners\n  // switch to using getShopId for role lookup\n  const admin = Meteor.users.findOne({\n    \"roles.__global_roles__\": \"owner\"\n  });\n  if (admin && typeof admin === \"object\") {\n    return admin._id;\n  }\n  return false;\n};\n\nconst sendNotificationToAdmin = (adminId) => {\n  const type = \"forAdmin\";\n  const prefix = Reaction.getShopPrefix();\n  const url = `${prefix}/dashboard/orders`;\n  const sms = true;\n  // Sending notification to admin\n  Logger.debug(\"sending notification to admin\");\n  return Meteor.call(\"notification/send\", adminId, type, url, sms);\n};\n\nMethodHooks.after(\"cart/copyCartToOrder\", function (options) {\n  const userId = Meteor.userId();\n  const type = \"newOrder\";\n  const prefix = Reaction.getShopPrefix();\n  const url = `${prefix}/notifications`;\n  const sms = true;\n\n  // Send notification to user who made the order\n  Logger.debug(`sending notification to user: ${userId}`);\n  Meteor.call(\"notification/send\", userId, type, url, sms);\n\n  // Sending notification to admin\n  const adminId = getAdminUserId();\n  if (adminId) {\n    return sendNotificationToAdmin(adminId);\n  }\n  return options.result;\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/notifications/server/hooks/notification.js.map","sourceFileName":"/imports/plugins/included/notifications/server/hooks/notification.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"notification"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Logger = void 0,\n    MethodHooks = void 0,\n    Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  },\n  MethodHooks: function (v) {\n    MethodHooks = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 1);\n\nvar getAdminUserId = function () {\n  // TODO validate with multiple show owners\n  // switch to using getShopId for role lookup\n  var admin = Meteor.users.findOne({\n    \"roles.__global_roles__\": \"owner\"\n  });\n\n  if (admin && (typeof admin === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(admin)) === \"object\") {\n    return admin._id;\n  }\n\n  return false;\n};\n\nvar sendNotificationToAdmin = function (adminId) {\n  var type = \"forAdmin\";\n  var prefix = Reaction.getShopPrefix();\n  var url = prefix + \"/dashboard/orders\";\n  var sms = true; // Sending notification to admin\n\n  Logger.debug(\"sending notification to admin\");\n  return Meteor.call(\"notification/send\", adminId, type, url, sms);\n};\n\nMethodHooks.after(\"cart/copyCartToOrder\", function (options) {\n  var userId = Meteor.userId();\n  var type = \"newOrder\";\n  var prefix = Reaction.getShopPrefix();\n  var url = prefix + \"/notifications\";\n  var sms = true; // Send notification to user who made the order\n\n  Logger.debug(\"sending notification to user: \" + userId);\n  Meteor.call(\"notification/send\", userId, type, url, sms); // Sending notification to admin\n\n  var adminId = getAdminUserId();\n\n  if (adminId) {\n    return sendNotificationToAdmin(adminId);\n  }\n\n  return options.result;\n});","map":{"version":3,"sources":["/imports/plugins/included/notifications/server/hooks/notification.js"],"names":["Meteor","Logger","MethodHooks","Reaction","getAdminUserId","admin","users","findOne","_id","sendNotificationToAdmin","adminId","type","prefix","getShopPrefix","url","sms","debug","call","after","options","userId","result"],"mappings":";;;;;;AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAQ,AAAa,AAAgB;;AAE9C,IAAM,iBAAiB,YAAM,AAC3B;AACA;AACA;MAAM,eAAQ,AAAO,MAAP,AAAa;8BAA3B,AAAc,AAAqB,AACP;AADO,AACjC,GADY;;yGAGd;AAAI,WAAS,MAAb,AAAa,AAAO,AAAU,AAAU,AACtC;AAAA,AAAO,AAAM,AACd;;;AACD,AAAO;;AATT,AAUC;aAED;AAAM,wBAA0B,AAAC,AAAY,AAC3C;MAAM,AAAO,MAAb,AACA;MAAM,MAAN,AAAe,AAAS,AACxB,MAAA,AAAM,AAAO,AAAE,AAAO,AACtB;;AAAM,SAAM,MAJ+B,AAI3C,AACA;8DACA;AAAA,AAAO,AAAM,AACb,AAAO,AAAO,AAAK,AAAqB,AAAS,AAAM,AAAK;;AAP9D,AAQC;sBAED;MAAY,OAAZ,AAAkB,AAAwB,AAAU,AAAS,AAC3D;MAAM,SAAS,AAAO,SAAtB,AAAe,AACf;MAAM,AAAO,MAAb,AACA;MAAM,MAAN,AAAe,AAAS,AACxB,AAAM,AAAO,AAAE,AAAO,AACtB,MAL2D,AAK3D,AAAM,AAAM,AAEZ;;kDACA;SAAO,KAAP,AAAc,6BAAgC,WARa,AAQ3D,AAAqD,AACrD,AAAO,AAAK,AAAqB,AAAQ,AAAM,AAAK,AAEpD,MACA;;MAAM,UAAN,AAAgB;;eAChB;AAAI,WAAJ,AAAa,wBACX;AAAA,AAAO,AAAwB,AAChC;;;AAfH,AAgBE,AAAO,AAAQ,AAChB","file":"/imports/plugins/included/notifications/server/hooks/notification.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Logger, MethodHooks, Reaction } from \"/server/api\";\n\nconst getAdminUserId = () => {\n  // TODO validate with multiple show owners\n  // switch to using getShopId for role lookup\n  const admin = Meteor.users.findOne({\n    \"roles.__global_roles__\": \"owner\"\n  });\n  if (admin && typeof admin === \"object\") {\n    return admin._id;\n  }\n  return false;\n};\n\nconst sendNotificationToAdmin = (adminId) => {\n  const type = \"forAdmin\";\n  const prefix = Reaction.getShopPrefix();\n  const url = `${prefix}/dashboard/orders`;\n  const sms = true;\n  // Sending notification to admin\n  Logger.debug(\"sending notification to admin\");\n  return Meteor.call(\"notification/send\", adminId, type, url, sms);\n};\n\nMethodHooks.after(\"cart/copyCartToOrder\", function (options) {\n  const userId = Meteor.userId();\n  const type = \"newOrder\";\n  const prefix = Reaction.getShopPrefix();\n  const url = `${prefix}/notifications`;\n  const sms = true;\n\n  // Send notification to user who made the order\n  Logger.debug(`sending notification to user: ${userId}`);\n  Meteor.call(\"notification/send\", userId, type, url, sms);\n\n  // Sending notification to admin\n  const adminId = getAdminUserId();\n  if (adminId) {\n    return sendNotificationToAdmin(adminId);\n  }\n  return options.result;\n});\n"]},"hash":"629925852b9198fdac264f2054c2935289193d7b"}
