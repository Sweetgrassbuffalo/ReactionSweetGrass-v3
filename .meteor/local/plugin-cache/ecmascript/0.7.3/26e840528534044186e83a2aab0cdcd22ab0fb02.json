{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/find","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_find"}]},{"source":"lodash/extend","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_extend"}]},{"source":"lodash/map","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_map"}]},{"source":"lodash/isArray","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_isArray"}]},{"source":"lodash/filter","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_filter"}]},{"source":"lodash/sumBy","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_sumBy"}]},{"source":"lodash/each","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_each"}]},{"source":"lodash/includes","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_includes"}]},{"source":"accounting-js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"accounting"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"jquery","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"$"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/reactive-var","imported":["ReactiveVar"],"specifiers":[{"kind":"named","imported":"ReactiveVar","local":"ReactiveVar"}]},{"source":"/client/api","imported":["i18next","Logger","formatNumber","Reaction"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"},{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"formatNumber","local":"formatNumber"},{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["NumericInput"],"specifiers":[{"kind":"named","imported":"NumericInput","local":"NumericInput"}]},{"source":"/lib/collections","imported":["Orders","Shops","Packages"],"specifiers":[{"kind":"named","imported":"Orders","local":"Orders"},{"kind":"named","imported":"Shops","local":"Shops"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"../../../../ui/client/components/button","imported":["ButtonSelect"],"specifiers":[{"kind":"named","imported":"ButtonSelect","local":"ButtonSelect"}]},{"source":"/imports/plugins/core/discounts/client/components/list","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DiscountList"}]},{"source":"../../containers/invoiceContainer.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"InvoiceContainer"}]},{"source":"../../containers/lineItemsContainer.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"LineItemsContainer"}]},{"source":"../../containers/totalActionsContainer.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"TotalActionsContainer"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/orders/client/templates/workflow/shippingInvoice.js","filenameRelative":"/imports/plugins/core/orders/client/templates/workflow/shippingInvoice.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/orders/client/templates/workflow/shippingInvoice.js"],"names":["accounting","Meteor","$","Template","ReactiveVar","i18next","Logger","formatNumber","Reaction","NumericInput","Orders","Shops","Packages","ButtonSelect","DiscountList","InvoiceContainer","LineItemsContainer","TotalActionsContainer","orderCreditMethod","order","billing","filter","value","paymentMethod","method","coreOrderShippingInvoice","onCreated","state","ReactiveDict","refunds","refundAmount","setDefault","isCapturing","isRefunding","isFetching","autorun","currentData","findOne","orderId","shop","set","currencies","currency","call","error","result","warn","helpers","instance","get","attr","text","t","buttonSelectComponent","component","buttons","name","i18nKeyLabel","active","status","eventAction","bgColor","buttonType","_id","events","event","preventDefault","invoiceTotal","invoice","total","currencySymbol","symbol","subscribe","packageId","paymentPackageId","settingsKey","paymentSettingsKey","checkSupportedMethods","shopId","getShopId","settings","support","orderStatus","orderMode","mode","alertText","Alerts","alert","title","type","showCancelButton","showCloseButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","isConfirm","cancel","returnToStock","err","removeClass","message","orderTotal","toFixed","subtotal","shipping","taxes","discount","inline","placement","i18nKey","autoHide","amount","discounts","refund","refundTotal","item","parseFloat","adjustedTotal","processor","reason","toast","workflow","Router","setQueryParams","unformat","target","numericInputProps","fieldName","enabled","isApprovedAmount","numericType","disabled","isEditing","format","classNames","input","onChange","data","numberValue","refundInputProps","maxValue","Object","assign","totalItems","items","o","quantity","money","paymentPendingApproval","canMakeAdjustments","showAfterPaymentCaptured","paymentApproved","paymentCaptured","refundTransactions","transactions","transaction","reverse","Math","abs","capturedDisabled","isLoading","refundSubmitDisabled","shipment","fulfillment","enabledPaymentsArr","apps","Apps","provides","app","push","packageName","returnItems","shipmentMethod","undefined","slice","taxDetail","lineNumber"],"mappings":"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","file":"/imports/plugins/core/orders/client/templates/workflow/shippingInvoice.js.map","sourcesContent":["import accounting from \"accounting-js\";\nimport _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport $ from \"jquery\";\nimport { Template } from \"meteor/templating\";\nimport { ReactiveVar } from \"meteor/reactive-var\";\nimport { i18next, Logger, formatNumber, Reaction } from \"/client/api\";\nimport { NumericInput } from \"/imports/plugins/core/ui/client/components\";\nimport { Orders, Shops, Packages } from \"/lib/collections\";\nimport { ButtonSelect } from \"../../../../ui/client/components/button\";\nimport DiscountList from \"/imports/plugins/core/discounts/client/components/list\";\nimport InvoiceContainer from \"../../containers/invoiceContainer.js\";\nimport LineItemsContainer from \"../../containers/lineItemsContainer.js\";\nimport TotalActionsContainer from \"../../containers/totalActionsContainer.js\";\n\n\n// helper to return the order payment object\n// the first credit paymentMethod on the order\n// returns entire payment method\nfunction orderCreditMethod(order) {\n  return order.billing.filter(value => value.paymentMethod.method ===  \"credit\")[0];\n}\n\n//\n// core order shipping invoice templates\n//\nTemplate.coreOrderShippingInvoice.onCreated(function () {\n  this.state = new ReactiveDict();\n  this.refunds = new ReactiveVar([]);\n  this.refundAmount = new ReactiveVar(0.00);\n  this.state.setDefault({\n    isCapturing: false,\n    isRefunding: false,\n    isFetching: true\n  });\n\n  this.autorun(() => {\n    const currentData = Template.currentData();\n    const order = Orders.findOne(currentData.orderId);\n    const shop = Shops.findOne({});\n\n    this.state.set(\"order\", order);\n    this.state.set(\"currency\", shop.currencies[shop.currency]);\n\n    if (order) {\n      Meteor.call(\"orders/refunds/list\", order, (error, result) => {\n        if (error) Logger.warn(error);\n        this.refunds.set(result);\n        this.state.set(\"isFetching\", false);\n      });\n    }\n  });\n});\n\nTemplate.coreOrderShippingInvoice.helpers({\n  isCapturing() {\n    const instance = Template.instance();\n    if (instance.state.get(\"isCapturing\")) {\n      instance.$(\":input\").attr(\"disabled\", true);\n      instance.$(\"#btn-capture-payment\").text(\"Capturing\");\n      return true;\n    }\n    return false;\n  },\n  isRefunding() {\n    const instance = Template.instance();\n    if (instance.state.get(\"isRefunding\")) {\n      instance.$(\"#btn-refund-payment\").text(i18next.t(\"order.refunding\"));\n      return true;\n    }\n    return false;\n  },\n  isFetching() {\n    const instance = Template.instance();\n    if (instance.state.get(\"isFetching\")) {\n      return true;\n    }\n    return false;\n  },\n  DiscountList() {\n    return DiscountList;\n  },\n  InvoiceContainer() {\n    return InvoiceContainer;\n  },\n  buttonSelectComponent() {\n    return {\n      component: ButtonSelect,\n      buttons: [\n        {\n          name: \"Approve\",\n          i18nKeyLabel: \"order.approveInvoice\",\n          active: true,\n          status: \"info\",\n          eventAction: \"approveInvoice\",\n          bgColor: \"bg-info\",\n          buttonType: \"submit\"\n        }, {\n          name: \"Cancel\",\n          i18nKeyLabel: \"order.cancelInvoice\",\n          active: false,\n          status: \"danger\",\n          eventAction: \"cancelOrder\",\n          bgColor: \"bg-danger\",\n          buttonType: \"button\"\n        }\n      ]\n    };\n  },\n  LineItemsContainer() {\n    return LineItemsContainer;\n  },\n  TotalActionsContainer() {\n    return TotalActionsContainer;\n  },\n  orderId() {\n    const instance = Template.instance();\n    const state = instance.state;\n    const order = state.get(\"order\");\n    return order._id;\n  }\n});\n\n/**\n * coreOrderAdjustments events\n */\nTemplate.coreOrderShippingInvoice.events({\n  /**\n   * Click Start Cancel Order\n   * @param {Event} event - Event Object\n   * @param {Template} instance - Blaze Template\n   * @return {void}\n   */\n  \"click [data-event-action=cancelOrder]\": (event, instance) => {\n    event.preventDefault();\n    const order = instance.state.get(\"order\");\n    const invoiceTotal = order.billing[0].invoice.total;\n    const currencySymbol = instance.state.get(\"currency\").symbol;\n\n    Meteor.subscribe(\"Packages\");\n    const packageId = order.billing[0].paymentMethod.paymentPackageId;\n    const settingsKey = order.billing[0].paymentMethod.paymentSettingsKey;\n    // check if payment provider supports de-authorize\n    const checkSupportedMethods = Packages.findOne({\n      _id: packageId,\n      shopId: Reaction.getShopId()\n    }).settings[settingsKey].support;\n\n    const orderStatus = order.billing[0].paymentMethod.status;\n    const orderMode = order.billing[0].paymentMethod.mode;\n\n    let alertText;\n    if (_.includes(checkSupportedMethods, \"de-authorize\") ||\n      (orderStatus === \"completed\" && orderMode === \"capture\")) {\n      alertText = i18next.t(\"order.applyRefundDuringCancelOrder\", { currencySymbol, invoiceTotal });\n    }\n\n    Alerts.alert({\n      title: i18next.t(\"order.cancelOrder\"),\n      text: alertText,\n      type: \"warning\",\n      showCancelButton: true,\n      showCloseButton: true,\n      confirmButtonColor: \"#98afbc\",\n      cancelButtonColor: \"#98afbc\",\n      confirmButtonText: i18next.t(\"order.cancelOrderNoRestock\"),\n      cancelButtonText: i18next.t(\"order.cancelOrderThenRestock\")\n    }, (isConfirm, cancel)=> {\n      let returnToStock;\n      if (isConfirm) {\n        returnToStock = false;\n        return Meteor.call(\"orders/cancelOrder\", order, returnToStock, err => {\n          if (err) {\n            $(\".alert\").removeClass(\"hidden\").text(err.message);\n          }\n        });\n      }\n      if (cancel === \"cancel\") {\n        returnToStock = true;\n        return Meteor.call(\"orders/cancelOrder\", order, returnToStock, err => {\n          if (err) {\n            $(\".alert\").removeClass(\"hidden\").text(err.message);\n          }\n        });\n      }\n    });\n  },\n  /**\n   * Submit form\n   * @param  {Event} event - Event object\n   * @param  {Template} instance - Blaze Template\n   * @return {void}\n   */\n  \"submit form[name=capture]\": (event, instance) => {\n    event.preventDefault();\n    const state = instance.state;\n    const order = state.get(\"order\");\n\n    const paymentMethod = orderCreditMethod(order);\n    const orderTotal = accounting.toFixed(\n      paymentMethod.invoice.subtotal\n      + paymentMethod.invoice.shipping\n      + paymentMethod.invoice.taxes\n      , 2);\n\n    const discount = state.get(\"field-discount\") || order.discount;\n    // TODO: review Discount cannot be greater than original total price\n    // logic is probably not valid any more. Discounts aren't valid below 0 order.\n    if (discount > orderTotal) {\n      Alerts.inline(\"Discount cannot be greater than original total price\", \"error\", {\n        placement: \"coreOrderShippingInvoice\",\n        i18nKey: \"order.invalidDiscount\",\n        autoHide: 10000\n      });\n    } else if (orderTotal === accounting.toFixed(discount, 2)) {\n      Alerts.alert({\n        title: i18next.t(\"order.fullDiscountWarning\"),\n        showCancelButton: true,\n        confirmButtonText: i18next.t(\"order.applyDiscount\")\n      }, (isConfirm) => {\n        if (isConfirm) {\n          Meteor.call(\"orders/approvePayment\", order, (error) => {\n            if (error) {\n              Logger.warn(error);\n            }\n          });\n        }\n      });\n    } else {\n      Meteor.call(\"orders/approvePayment\", order, (error) => {\n        if (error) {\n          Logger.warn(error);\n          if (error.error === \"orders/approvePayment.discount-amount\") {\n            Alerts.inline(\"Discount cannot be greater than original total price\", \"error\", {\n              placement: \"coreOrderShippingInvoice\",\n              i18nKey: \"order.invalidDiscount\",\n              autoHide: 10000\n            });\n          }\n        }\n      });\n    }\n  },\n\n  /**\n   * Submit form\n   * @param  {Event} event - Event object\n   * @param  {Template} instance - Blaze Template\n   * @return {void}\n   */\n  \"click [data-event-action=applyRefund]\": (event, instance) => {\n    event.preventDefault();\n\n    const { state } = Template.instance();\n    const currencySymbol = state.get(\"currency\").symbol;\n    const order = instance.state.get(\"order\");\n    const paymentMethod = orderCreditMethod(order).paymentMethod;\n    const orderTotal = paymentMethod.amount;\n    const discounts = paymentMethod.discounts;\n    const refund = state.get(\"field-refund\") || 0;\n    const refunds = Template.instance().refunds.get();\n    let refundTotal = 0;\n    _.each(refunds, function (item) {\n      refundTotal += parseFloat(item.amount);\n    });\n\n    let adjustedTotal;\n\n    // TODO extract Stripe specific fullfilment payment handling out of core.\n    // Stripe counts discounts as refunds, so we need to re-add the discount to not \"double discount\" in the adjustedTotal\n    if (paymentMethod.processor === \"Stripe\") {\n      adjustedTotal = accounting.toFixed(orderTotal + discounts - refundTotal, 2);\n    } else {\n      adjustedTotal = accounting.toFixed(orderTotal - refundTotal, 2);\n    }\n\n    if (refund > adjustedTotal) {\n      Alerts.inline(\"Refund(s) total cannot be greater than adjusted total\", \"error\", {\n        placement: \"coreOrderRefund\",\n        i18nKey: \"order.invalidRefund\",\n        autoHide: 10000\n      });\n    } else {\n      Alerts.alert({\n        title: i18next.t(\"order.applyRefundToThisOrder\", { refund: refund, currencySymbol: currencySymbol }),\n        showCancelButton: true,\n        confirmButtonText: i18next.t(\"order.applyRefund\")\n      }, (isConfirm) => {\n        if (isConfirm) {\n          state.set(\"isRefunding\", true);\n          Meteor.call(\"orders/refunds/create\", order._id, paymentMethod, refund, (error, result) => {\n            if (error) {\n              Alerts.alert(error.reason);\n            }\n            if (result) {\n              Alerts.toast(i18next.t(\"mail.alerts.emailSent\"), \"success\");\n            }\n            $(\"#btn-refund-payment\").text(i18next.t(\"order.applyRefund\"));\n            state.set(\"field-refund\", 0);\n            state.set(\"isRefunding\", false);\n          });\n        }\n      });\n    }\n  },\n\n  \"click [data-event-action=makeAdjustments]\": (event, instance) => {\n    event.preventDefault();\n    Meteor.call(\"orders/makeAdjustmentsToInvoice\", instance.state.get(\"order\"));\n  },\n\n  \"click [data-event-action=capturePayment]\": (event, instance) => {\n    event.preventDefault();\n\n    instance.state.set(\"isCapturing\", true);\n\n    const order = instance.state.get(\"order\");\n    Meteor.call(\"orders/capturePayments\", order._id);\n\n    if (order.workflow.status === \"new\") {\n      Meteor.call(\"workflow/pushOrderWorkflow\", \"coreOrderWorkflow\", \"processing\", order);\n\n      Reaction.Router.setQueryParams({\n        filter: \"processing\",\n        _id: order._id\n      });\n    }\n  },\n\n  \"change input[name=refund_amount], keyup input[name=refund_amount]\": (event, instance) => {\n    instance.refundAmount.set(accounting.unformat(event.target.value));\n  }\n});\n\n\n/**\n * coreOrderShippingInvoice helpers\n */\nTemplate.coreOrderShippingInvoice.helpers({\n  NumericInput() {\n    return NumericInput;\n  },\n\n  numericInputProps(fieldName, value = 0, enabled = true) {\n    const { state } = Template.instance();\n    const order = state.get(\"order\");\n    const paymentMethod = orderCreditMethod(order);\n    const status = paymentMethod.status;\n    const isApprovedAmount = (status === \"approved\" || status === \"completed\");\n\n    return {\n      component: NumericInput,\n      numericType: \"currency\",\n      value: value,\n      disabled: !enabled,\n      isEditing: !isApprovedAmount, // Dont allow editing if its approved\n      format: state.get(\"currency\"),\n      classNames: {\n        input: { amount: true },\n        text: {\n          \"text-success\": status === \"completed\"\n        }\n      },\n      onChange(event, data) {\n        state.set(`field-${fieldName}`, data.numberValue);\n      }\n    };\n  },\n\n  refundInputProps() {\n    const { state } = Template.instance();\n    const order = state.get(\"order\");\n    const paymentMethod = orderCreditMethod(order).paymentMethod;\n    const refunds = Template.instance().refunds.get();\n\n    let refundTotal = 0;\n    _.each(refunds, function (item) {\n      refundTotal += parseFloat(item.amount);\n    });\n    const adjustedTotal = paymentMethod.amount - refundTotal;\n\n    return {\n      component: NumericInput,\n      numericType: \"currency\",\n      value: state.get(\"field-refund\") || 0,\n      maxValue: adjustedTotal,\n      format: state.get(\"currency\"),\n      classNames: {\n        input: { amount: true }\n      },\n      onChange(event, data) {\n        state.set(\"field-refund\", data.numberValue);\n      }\n    };\n  },\n\n  refundAmount() {\n    return Template.instance().refundAmount;\n  },\n\n  invoice() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n\n    const invoice = Object.assign({}, order.billing[0].invoice, {\n      totalItems: _.sumBy(order.items, (o) => o.quantity)\n    });\n    return invoice;\n  },\n\n  money(amount) {\n    return formatNumber(amount);\n  },\n\n  disabled() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const status = orderCreditMethod(order).paymentMethod.status;\n\n    if (status === \"approved\" || status === \"completed\") {\n      return \"disabled\";\n    }\n\n    return \"\";\n  },\n\n  paymentPendingApproval() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const status = orderCreditMethod(order).paymentMethod.status;\n\n    return status === \"created\" || status === \"adjustments\" || status === \"error\";\n  },\n\n  canMakeAdjustments() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const status = orderCreditMethod(order).paymentMethod.status;\n\n    if (status === \"approved\" || status === \"completed\") {\n      return false;\n    }\n    return true;\n  },\n\n  showAfterPaymentCaptured() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const orderStatus = orderCreditMethod(order).paymentMethod.status;\n    return orderStatus === \"completed\";\n  },\n\n  paymentApproved() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n\n    return order.billing[0].paymentMethod.status === \"approved\";\n  },\n\n  paymentCaptured() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const orderStatus = orderCreditMethod(order).paymentMethod.status;\n    const orderMode = orderCreditMethod(order).paymentMethod.mode;\n    return orderStatus === \"completed\" || (orderStatus === \"refunded\" && orderMode === \"capture\");\n  },\n\n  refundTransactions() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const transactions = orderCreditMethod(order).paymentMethod.transactions;\n\n    return _.filter(transactions, (transaction) => {\n      return transaction.type === \"refund\";\n    });\n  },\n\n  refunds() {\n    const refunds = Template.instance().refunds.get();\n    if (_.isArray(refunds)) {\n      return refunds.reverse();\n    }\n\n    return refunds;\n  },\n\n  /**\n   * Get the total after all refunds\n   * @return {Number} the amount after all refunds\n   */\n  adjustedTotal() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const paymentMethod = orderCreditMethod(order).paymentMethod;\n    const discounts = orderCreditMethod(order).invoice.discounts;\n    const refunds = Template.instance().refunds.get();\n    let refundTotal = 0;\n\n    _.each(refunds, function (item) {\n      refundTotal += parseFloat(item.amount);\n    });\n\n    if (paymentMethod.processor === \"Stripe\") {\n      return Math.abs(paymentMethod.amount + discounts - refundTotal);\n    }\n    return Math.abs(paymentMethod.amount - refundTotal);\n  },\n\n  capturedDisabled() {\n    const isLoading = Template.instance().state.get(\"isCapturing\");\n    if (isLoading) {\n      return \"disabled\";\n    }\n    return null;\n  },\n\n  refundSubmitDisabled() {\n    const amount = Template.instance().state.get(\"field-refund\") || 0;\n    const isLoading = Template.instance().state.get(\"isRefunding\");\n    if (amount === 0 || isLoading) {\n      return \"disabled\";\n    }\n\n    return null;\n  },\n\n  /**\n   * Order\n   * @summary find a single order using the order id spplied with the template\n   * data context\n   * @return {Object} A single order\n   */\n  order() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n\n    return order;\n  },\n\n  shipment() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n\n    const shipment = _.filter(order.shipping, { _id: currentData.fulfillment._id })[0];\n\n    return shipment;\n  },\n\n  discounts() {\n    const enabledPaymentsArr = [];\n    const apps = Reaction.Apps({\n      provides: \"paymentMethod\",\n      enabled: true\n    });\n    for (app of apps) {\n      if (app.enabled === true) enabledPaymentsArr.push(app);\n    }\n    let discount = false;\n\n    for (enabled of enabledPaymentsArr) {\n      if (enabled.packageName === \"discount-codes\") {\n        discount = true;\n        break;\n      }\n    }\n    return discount;\n  },\n\n  items() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const currentData = Template.currentData();\n    const shipment = currentData.fulfillment;\n\n    // returns order items with shipping detail\n    const returnItems = _.map(order.items, (item) => {\n      const shipping = shipment.shipmentMethod;\n      return _.extend(item, { shipping });\n    });\n\n    let items;\n\n\n    // if avalara tax has been enabled it adds a \"taxDetail\" field for every item\n    if (order.taxes !== undefined) {\n      const taxes = order.taxes.slice(0, -1);\n\n      items = _.map(returnItems, (item) => {\n        const taxDetail = _.find(taxes, {\n          lineNumber: item._id\n        });\n        return _.extend(item, { taxDetail });\n      });\n    } else {\n      items = returnItems;\n    }\n    return items;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/orders/client/templates/workflow/shippingInvoice.js.map","sourceFileName":"/imports/plugins/core/orders/client/templates/workflow/shippingInvoice.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"shippingInvoice"},"ignored":false,"code":"var _find = void 0;\n\nmodule.importSync(\"lodash/find\", {\n  \"default\": function (v) {\n    _find = v;\n  }\n}, 0);\n\nvar _extend = void 0;\n\nmodule.importSync(\"lodash/extend\", {\n  \"default\": function (v) {\n    _extend = v;\n  }\n}, 1);\n\nvar _map = void 0;\n\nmodule.importSync(\"lodash/map\", {\n  \"default\": function (v) {\n    _map = v;\n  }\n}, 2);\n\nvar _isArray = void 0;\n\nmodule.importSync(\"lodash/isArray\", {\n  \"default\": function (v) {\n    _isArray = v;\n  }\n}, 3);\n\nvar _filter = void 0;\n\nmodule.importSync(\"lodash/filter\", {\n  \"default\": function (v) {\n    _filter = v;\n  }\n}, 4);\n\nvar _sumBy = void 0;\n\nmodule.importSync(\"lodash/sumBy\", {\n  \"default\": function (v) {\n    _sumBy = v;\n  }\n}, 5);\n\nvar _each = void 0;\n\nmodule.importSync(\"lodash/each\", {\n  \"default\": function (v) {\n    _each = v;\n  }\n}, 6);\n\nvar _includes = void 0;\n\nmodule.importSync(\"lodash/includes\", {\n  \"default\": function (v) {\n    _includes = v;\n  }\n}, 7);\nvar accounting = void 0;\nmodule.importSync(\"accounting-js\", {\n  \"default\": function (v) {\n    accounting = v;\n  }\n}, 8);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 9);\nvar $ = void 0;\nmodule.importSync(\"jquery\", {\n  \"default\": function (v) {\n    $ = v;\n  }\n}, 10);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 11);\nvar ReactiveVar = void 0;\nmodule.importSync(\"meteor/reactive-var\", {\n  ReactiveVar: function (v) {\n    ReactiveVar = v;\n  }\n}, 12);\nvar i18next = void 0,\n    Logger = void 0,\n    formatNumber = void 0,\n    Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  },\n  formatNumber: function (v) {\n    formatNumber = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 13);\nvar NumericInput = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  NumericInput: function (v) {\n    NumericInput = v;\n  }\n}, 14);\nvar Orders = void 0,\n    Shops = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Orders: function (v) {\n    Orders = v;\n  },\n  Shops: function (v) {\n    Shops = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 15);\nvar ButtonSelect = void 0;\nmodule.importSync(\"../../../../ui/client/components/button\", {\n  ButtonSelect: function (v) {\n    ButtonSelect = v;\n  }\n}, 16);\nvar DiscountList = void 0;\nmodule.importSync(\"/imports/plugins/core/discounts/client/components/list\", {\n  \"default\": function (v) {\n    DiscountList = v;\n  }\n}, 17);\nvar InvoiceContainer = void 0;\nmodule.importSync(\"../../containers/invoiceContainer.js\", {\n  \"default\": function (v) {\n    InvoiceContainer = v;\n  }\n}, 18);\nvar LineItemsContainer = void 0;\nmodule.importSync(\"../../containers/lineItemsContainer.js\", {\n  \"default\": function (v) {\n    LineItemsContainer = v;\n  }\n}, 19);\nvar TotalActionsContainer = void 0;\nmodule.importSync(\"../../containers/totalActionsContainer.js\", {\n  \"default\": function (v) {\n    TotalActionsContainer = v;\n  }\n}, 20);\n\n// helper to return the order payment object\n// the first credit paymentMethod on the order\n// returns entire payment method\nfunction orderCreditMethod(order) {\n  return order.billing.filter(function (value) {\n    return value.paymentMethod.method === \"credit\";\n  })[0];\n} //\n// core order shipping invoice templates\n//\n\n\nTemplate.coreOrderShippingInvoice.onCreated(function () {\n  var _this = this;\n\n  this.state = new ReactiveDict();\n  this.refunds = new ReactiveVar([]);\n  this.refundAmount = new ReactiveVar(0.00);\n  this.state.setDefault({\n    isCapturing: false,\n    isRefunding: false,\n    isFetching: true\n  });\n  this.autorun(function () {\n    var currentData = Template.currentData();\n    var order = Orders.findOne(currentData.orderId);\n    var shop = Shops.findOne({});\n\n    _this.state.set(\"order\", order);\n\n    _this.state.set(\"currency\", shop.currencies[shop.currency]);\n\n    if (order) {\n      Meteor.call(\"orders/refunds/list\", order, function (error, result) {\n        if (error) Logger.warn(error);\n\n        _this.refunds.set(result);\n\n        _this.state.set(\"isFetching\", false);\n      });\n    }\n  });\n});\nTemplate.coreOrderShippingInvoice.helpers({\n  isCapturing: function () {\n    var instance = Template.instance();\n\n    if (instance.state.get(\"isCapturing\")) {\n      instance.$(\":input\").attr(\"disabled\", true);\n      instance.$(\"#btn-capture-payment\").text(\"Capturing\");\n      return true;\n    }\n\n    return false;\n  },\n  isRefunding: function () {\n    var instance = Template.instance();\n\n    if (instance.state.get(\"isRefunding\")) {\n      instance.$(\"#btn-refund-payment\").text(i18next.t(\"order.refunding\"));\n      return true;\n    }\n\n    return false;\n  },\n  isFetching: function () {\n    var instance = Template.instance();\n\n    if (instance.state.get(\"isFetching\")) {\n      return true;\n    }\n\n    return false;\n  },\n  DiscountList: function () {\n    return DiscountList;\n  },\n  InvoiceContainer: function () {\n    return InvoiceContainer;\n  },\n  buttonSelectComponent: function () {\n    return {\n      component: ButtonSelect,\n      buttons: [{\n        name: \"Approve\",\n        i18nKeyLabel: \"order.approveInvoice\",\n        active: true,\n        status: \"info\",\n        eventAction: \"approveInvoice\",\n        bgColor: \"bg-info\",\n        buttonType: \"submit\"\n      }, {\n        name: \"Cancel\",\n        i18nKeyLabel: \"order.cancelInvoice\",\n        active: false,\n        status: \"danger\",\n        eventAction: \"cancelOrder\",\n        bgColor: \"bg-danger\",\n        buttonType: \"button\"\n      }]\n    };\n  },\n  LineItemsContainer: function () {\n    return LineItemsContainer;\n  },\n  TotalActionsContainer: function () {\n    return TotalActionsContainer;\n  },\n  orderId: function () {\n    var instance = Template.instance();\n    var state = instance.state;\n    var order = state.get(\"order\");\n    return order._id;\n  }\n}); /**\n     * coreOrderAdjustments events\n     */\nTemplate.coreOrderShippingInvoice.events({\n  /**\n   * Click Start Cancel Order\n   * @param {Event} event - Event Object\n   * @param {Template} instance - Blaze Template\n   * @return {void}\n   */\"click [data-event-action=cancelOrder]\": function (event, instance) {\n    event.preventDefault();\n    var order = instance.state.get(\"order\");\n    var invoiceTotal = order.billing[0].invoice.total;\n    var currencySymbol = instance.state.get(\"currency\").symbol;\n    Meteor.subscribe(\"Packages\");\n    var packageId = order.billing[0].paymentMethod.paymentPackageId;\n    var settingsKey = order.billing[0].paymentMethod.paymentSettingsKey; // check if payment provider supports de-authorize\n\n    var checkSupportedMethods = Packages.findOne({\n      _id: packageId,\n      shopId: Reaction.getShopId()\n    }).settings[settingsKey].support;\n    var orderStatus = order.billing[0].paymentMethod.status;\n    var orderMode = order.billing[0].paymentMethod.mode;\n    var alertText = void 0;\n\n    if (_includes(checkSupportedMethods, \"de-authorize\") || orderStatus === \"completed\" && orderMode === \"capture\") {\n      alertText = i18next.t(\"order.applyRefundDuringCancelOrder\", {\n        currencySymbol: currencySymbol,\n        invoiceTotal: invoiceTotal\n      });\n    }\n\n    Alerts.alert({\n      title: i18next.t(\"order.cancelOrder\"),\n      text: alertText,\n      type: \"warning\",\n      showCancelButton: true,\n      showCloseButton: true,\n      confirmButtonColor: \"#98afbc\",\n      cancelButtonColor: \"#98afbc\",\n      confirmButtonText: i18next.t(\"order.cancelOrderNoRestock\"),\n      cancelButtonText: i18next.t(\"order.cancelOrderThenRestock\")\n    }, function (isConfirm, cancel) {\n      var returnToStock = void 0;\n\n      if (isConfirm) {\n        returnToStock = false;\n        return Meteor.call(\"orders/cancelOrder\", order, returnToStock, function (err) {\n          if (err) {\n            $(\".alert\").removeClass(\"hidden\").text(err.message);\n          }\n        });\n      }\n\n      if (cancel === \"cancel\") {\n        returnToStock = true;\n        return Meteor.call(\"orders/cancelOrder\", order, returnToStock, function (err) {\n          if (err) {\n            $(\".alert\").removeClass(\"hidden\").text(err.message);\n          }\n        });\n      }\n    });\n  },\n  /**\n   * Submit form\n   * @param  {Event} event - Event object\n   * @param  {Template} instance - Blaze Template\n   * @return {void}\n   */\"submit form[name=capture]\": function (event, instance) {\n    event.preventDefault();\n    var state = instance.state;\n    var order = state.get(\"order\");\n    var paymentMethod = orderCreditMethod(order);\n    var orderTotal = accounting.toFixed(paymentMethod.invoice.subtotal + paymentMethod.invoice.shipping + paymentMethod.invoice.taxes, 2);\n    var discount = state.get(\"field-discount\") || order.discount; // TODO: review Discount cannot be greater than original total price\n    // logic is probably not valid any more. Discounts aren't valid below 0 order.\n\n    if (discount > orderTotal) {\n      Alerts.inline(\"Discount cannot be greater than original total price\", \"error\", {\n        placement: \"coreOrderShippingInvoice\",\n        i18nKey: \"order.invalidDiscount\",\n        autoHide: 10000\n      });\n    } else if (orderTotal === accounting.toFixed(discount, 2)) {\n      Alerts.alert({\n        title: i18next.t(\"order.fullDiscountWarning\"),\n        showCancelButton: true,\n        confirmButtonText: i18next.t(\"order.applyDiscount\")\n      }, function (isConfirm) {\n        if (isConfirm) {\n          Meteor.call(\"orders/approvePayment\", order, function (error) {\n            if (error) {\n              Logger.warn(error);\n            }\n          });\n        }\n      });\n    } else {\n      Meteor.call(\"orders/approvePayment\", order, function (error) {\n        if (error) {\n          Logger.warn(error);\n\n          if (error.error === \"orders/approvePayment.discount-amount\") {\n            Alerts.inline(\"Discount cannot be greater than original total price\", \"error\", {\n              placement: \"coreOrderShippingInvoice\",\n              i18nKey: \"order.invalidDiscount\",\n              autoHide: 10000\n            });\n          }\n        }\n      });\n    }\n  },\n  /**\n   * Submit form\n   * @param  {Event} event - Event object\n   * @param  {Template} instance - Blaze Template\n   * @return {void}\n   */\"click [data-event-action=applyRefund]\": function (event, instance) {\n    event.preventDefault();\n\n    var _Template$instance = Template.instance(),\n        state = _Template$instance.state;\n\n    var currencySymbol = state.get(\"currency\").symbol;\n    var order = instance.state.get(\"order\");\n    var paymentMethod = orderCreditMethod(order).paymentMethod;\n    var orderTotal = paymentMethod.amount;\n    var discounts = paymentMethod.discounts;\n    var refund = state.get(\"field-refund\") || 0;\n    var refunds = Template.instance().refunds.get();\n    var refundTotal = 0;\n\n    _each(refunds, function (item) {\n      refundTotal += parseFloat(item.amount);\n    });\n\n    var adjustedTotal = void 0; // TODO extract Stripe specific fullfilment payment handling out of core.\n    // Stripe counts discounts as refunds, so we need to re-add the discount to not \"double discount\" in the adjustedTotal\n\n    if (paymentMethod.processor === \"Stripe\") {\n      adjustedTotal = accounting.toFixed(orderTotal + discounts - refundTotal, 2);\n    } else {\n      adjustedTotal = accounting.toFixed(orderTotal - refundTotal, 2);\n    }\n\n    if (refund > adjustedTotal) {\n      Alerts.inline(\"Refund(s) total cannot be greater than adjusted total\", \"error\", {\n        placement: \"coreOrderRefund\",\n        i18nKey: \"order.invalidRefund\",\n        autoHide: 10000\n      });\n    } else {\n      Alerts.alert({\n        title: i18next.t(\"order.applyRefundToThisOrder\", {\n          refund: refund,\n          currencySymbol: currencySymbol\n        }),\n        showCancelButton: true,\n        confirmButtonText: i18next.t(\"order.applyRefund\")\n      }, function (isConfirm) {\n        if (isConfirm) {\n          state.set(\"isRefunding\", true);\n          Meteor.call(\"orders/refunds/create\", order._id, paymentMethod, refund, function (error, result) {\n            if (error) {\n              Alerts.alert(error.reason);\n            }\n\n            if (result) {\n              Alerts.toast(i18next.t(\"mail.alerts.emailSent\"), \"success\");\n            }\n\n            $(\"#btn-refund-payment\").text(i18next.t(\"order.applyRefund\"));\n            state.set(\"field-refund\", 0);\n            state.set(\"isRefunding\", false);\n          });\n        }\n      });\n    }\n  },\n  \"click [data-event-action=makeAdjustments]\": function (event, instance) {\n    event.preventDefault();\n    Meteor.call(\"orders/makeAdjustmentsToInvoice\", instance.state.get(\"order\"));\n  },\n  \"click [data-event-action=capturePayment]\": function (event, instance) {\n    event.preventDefault();\n    instance.state.set(\"isCapturing\", true);\n    var order = instance.state.get(\"order\");\n    Meteor.call(\"orders/capturePayments\", order._id);\n\n    if (order.workflow.status === \"new\") {\n      Meteor.call(\"workflow/pushOrderWorkflow\", \"coreOrderWorkflow\", \"processing\", order);\n      Reaction.Router.setQueryParams({\n        filter: \"processing\",\n        _id: order._id\n      });\n    }\n  },\n  \"change input[name=refund_amount], keyup input[name=refund_amount]\": function (event, instance) {\n    instance.refundAmount.set(accounting.unformat(event.target.value));\n  }\n}); /**\n     * coreOrderShippingInvoice helpers\n     */\nTemplate.coreOrderShippingInvoice.helpers({\n  NumericInput: function () {\n    return NumericInput;\n  },\n  numericInputProps: function (fieldName) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var enabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    var _Template$instance2 = Template.instance(),\n        state = _Template$instance2.state;\n\n    var order = state.get(\"order\");\n    var paymentMethod = orderCreditMethod(order);\n    var status = paymentMethod.status;\n    var isApprovedAmount = status === \"approved\" || status === \"completed\";\n    return {\n      component: NumericInput,\n      numericType: \"currency\",\n      value: value,\n      disabled: !enabled,\n      isEditing: !isApprovedAmount,\n      // Dont allow editing if its approved\n      format: state.get(\"currency\"),\n      classNames: {\n        input: {\n          amount: true\n        },\n        text: {\n          \"text-success\": status === \"completed\"\n        }\n      },\n      onChange: function (event, data) {\n        state.set(\"field-\" + fieldName, data.numberValue);\n      }\n    };\n  },\n  refundInputProps: function () {\n    var _Template$instance3 = Template.instance(),\n        state = _Template$instance3.state;\n\n    var order = state.get(\"order\");\n    var paymentMethod = orderCreditMethod(order).paymentMethod;\n    var refunds = Template.instance().refunds.get();\n    var refundTotal = 0;\n\n    _each(refunds, function (item) {\n      refundTotal += parseFloat(item.amount);\n    });\n\n    var adjustedTotal = paymentMethod.amount - refundTotal;\n    return {\n      component: NumericInput,\n      numericType: \"currency\",\n      value: state.get(\"field-refund\") || 0,\n      maxValue: adjustedTotal,\n      format: state.get(\"currency\"),\n      classNames: {\n        input: {\n          amount: true\n        }\n      },\n      onChange: function (event, data) {\n        state.set(\"field-refund\", data.numberValue);\n      }\n    };\n  },\n  refundAmount: function () {\n    return Template.instance().refundAmount;\n  },\n  invoice: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n    var invoice = Object.assign({}, order.billing[0].invoice, {\n      totalItems: _sumBy(order.items, function (o) {\n        return o.quantity;\n      })\n    });\n    return invoice;\n  },\n  money: function (amount) {\n    return formatNumber(amount);\n  },\n  disabled: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n    var status = orderCreditMethod(order).paymentMethod.status;\n\n    if (status === \"approved\" || status === \"completed\") {\n      return \"disabled\";\n    }\n\n    return \"\";\n  },\n  paymentPendingApproval: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n    var status = orderCreditMethod(order).paymentMethod.status;\n    return status === \"created\" || status === \"adjustments\" || status === \"error\";\n  },\n  canMakeAdjustments: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n    var status = orderCreditMethod(order).paymentMethod.status;\n\n    if (status === \"approved\" || status === \"completed\") {\n      return false;\n    }\n\n    return true;\n  },\n  showAfterPaymentCaptured: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n    var orderStatus = orderCreditMethod(order).paymentMethod.status;\n    return orderStatus === \"completed\";\n  },\n  paymentApproved: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n    return order.billing[0].paymentMethod.status === \"approved\";\n  },\n  paymentCaptured: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n    var orderStatus = orderCreditMethod(order).paymentMethod.status;\n    var orderMode = orderCreditMethod(order).paymentMethod.mode;\n    return orderStatus === \"completed\" || orderStatus === \"refunded\" && orderMode === \"capture\";\n  },\n  refundTransactions: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n    var transactions = orderCreditMethod(order).paymentMethod.transactions;\n    return _filter(transactions, function (transaction) {\n      return transaction.type === \"refund\";\n    });\n  },\n  refunds: function () {\n    var refunds = Template.instance().refunds.get();\n\n    if (_isArray(refunds)) {\n      return refunds.reverse();\n    }\n\n    return refunds;\n  },\n  /**\n   * Get the total after all refunds\n   * @return {Number} the amount after all refunds\n   */adjustedTotal: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n    var paymentMethod = orderCreditMethod(order).paymentMethod;\n    var discounts = orderCreditMethod(order).invoice.discounts;\n    var refunds = Template.instance().refunds.get();\n    var refundTotal = 0;\n\n    _each(refunds, function (item) {\n      refundTotal += parseFloat(item.amount);\n    });\n\n    if (paymentMethod.processor === \"Stripe\") {\n      return Math.abs(paymentMethod.amount + discounts - refundTotal);\n    }\n\n    return Math.abs(paymentMethod.amount - refundTotal);\n  },\n  capturedDisabled: function () {\n    var isLoading = Template.instance().state.get(\"isCapturing\");\n\n    if (isLoading) {\n      return \"disabled\";\n    }\n\n    return null;\n  },\n  refundSubmitDisabled: function () {\n    var amount = Template.instance().state.get(\"field-refund\") || 0;\n    var isLoading = Template.instance().state.get(\"isRefunding\");\n\n    if (amount === 0 || isLoading) {\n      return \"disabled\";\n    }\n\n    return null;\n  },\n  /**\n   * Order\n   * @summary find a single order using the order id spplied with the template\n   * data context\n   * @return {Object} A single order\n   */order: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n    return order;\n  },\n  shipment: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n\n    var shipment = _filter(order.shipping, {\n      _id: currentData.fulfillment._id\n    })[0];\n\n    return shipment;\n  },\n  discounts: function () {\n    var enabledPaymentsArr = [];\n    var apps = Reaction.Apps({\n      provides: \"paymentMethod\",\n      enabled: true\n    });\n\n    for (var _iterator = apps, _isArray2 = Array.isArray(_iterator), _i = 0, _iterator = _isArray2 ? _iterator : _iterator[Symbol.iterator]();;) {\n      if (_isArray2) {\n        if (_i >= _iterator.length) break;\n        app = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        app = _i.value;\n      }\n\n      if (app.enabled === true) enabledPaymentsArr.push(app);\n    }\n\n    var discount = false;\n\n    for (var _iterator2 = enabledPaymentsArr, _isArray3 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray3 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      if (_isArray3) {\n        if (_i2 >= _iterator2.length) break;\n        enabled = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        enabled = _i2.value;\n      }\n\n      if (enabled.packageName === \"discount-codes\") {\n        discount = true;\n        break;\n      }\n    }\n\n    return discount;\n  },\n  items: function () {\n    var instance = Template.instance();\n    var order = instance.state.get(\"order\");\n    var currentData = Template.currentData();\n    var shipment = currentData.fulfillment; // returns order items with shipping detail\n\n    var returnItems = _map(order.items, function (item) {\n      var shipping = shipment.shipmentMethod;\n      return _extend(item, {\n        shipping: shipping\n      });\n    });\n\n    var items = void 0; // if avalara tax has been enabled it adds a \"taxDetail\" field for every item\n\n    if (order.taxes !== undefined) {\n      var taxes = order.taxes.slice(0, -1);\n      items = _map(returnItems, function (item) {\n        var taxDetail = _find(taxes, {\n          lineNumber: item._id\n        });\n\n        return _extend(item, {\n          taxDetail: taxDetail\n        });\n      });\n    } else {\n      items = returnItems;\n    }\n\n    return items;\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/orders/client/templates/workflow/shippingInvoice.js"],"names":["accounting","Meteor","$","Template","ReactiveVar","i18next","Logger","formatNumber","Reaction","NumericInput","Orders","Shops","Packages","ButtonSelect","DiscountList","InvoiceContainer","LineItemsContainer","TotalActionsContainer","orderCreditMethod","order","billing","filter","value","paymentMethod","method","coreOrderShippingInvoice","onCreated","state","ReactiveDict","refunds","refundAmount","setDefault","isCapturing","isRefunding","isFetching","autorun","currentData","findOne","orderId","shop","set","currencies","currency","call","error","result","warn","helpers","instance","get","attr","text","t","buttonSelectComponent","component","buttons","name","i18nKeyLabel","active","status","eventAction","bgColor","buttonType","_id","events","event","preventDefault","invoiceTotal","invoice","total","currencySymbol","symbol","subscribe","packageId","paymentPackageId","settingsKey","paymentSettingsKey","checkSupportedMethods","shopId","getShopId","settings","support","orderStatus","orderMode","mode","alertText","Alerts","alert","title","type","showCancelButton","showCloseButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","isConfirm","cancel","returnToStock","err","removeClass","message","orderTotal","toFixed","subtotal","shipping","taxes","discount","inline","placement","i18nKey","autoHide","amount","discounts","refund","refundTotal","item","parseFloat","adjustedTotal","processor","reason","toast","workflow","Router","setQueryParams","unformat","target","numericInputProps","fieldName","enabled","isApprovedAmount","numericType","disabled","isEditing","format","classNames","input","onChange","data","numberValue","refundInputProps","maxValue","Object","assign","totalItems","items","o","quantity","money","paymentPendingApproval","canMakeAdjustments","showAfterPaymentCaptured","paymentApproved","paymentCaptured","refundTransactions","transactions","transaction","reverse","Math","abs","capturedDisabled","isLoading","refundSubmitDisabled","shipment","fulfillment","enabledPaymentsArr","apps","Apps","provides","app","push","packageName","returnItems","shipmentMethod","undefined","slice","taxDetail","lineNumber"],"mappings":"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","file":"/imports/plugins/core/orders/client/templates/workflow/shippingInvoice.js.map","sourcesContent":["import accounting from \"accounting-js\";\nimport _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport $ from \"jquery\";\nimport { Template } from \"meteor/templating\";\nimport { ReactiveVar } from \"meteor/reactive-var\";\nimport { i18next, Logger, formatNumber, Reaction } from \"/client/api\";\nimport { NumericInput } from \"/imports/plugins/core/ui/client/components\";\nimport { Orders, Shops, Packages } from \"/lib/collections\";\nimport { ButtonSelect } from \"../../../../ui/client/components/button\";\nimport DiscountList from \"/imports/plugins/core/discounts/client/components/list\";\nimport InvoiceContainer from \"../../containers/invoiceContainer.js\";\nimport LineItemsContainer from \"../../containers/lineItemsContainer.js\";\nimport TotalActionsContainer from \"../../containers/totalActionsContainer.js\";\n\n\n// helper to return the order payment object\n// the first credit paymentMethod on the order\n// returns entire payment method\nfunction orderCreditMethod(order) {\n  return order.billing.filter(value => value.paymentMethod.method ===  \"credit\")[0];\n}\n\n//\n// core order shipping invoice templates\n//\nTemplate.coreOrderShippingInvoice.onCreated(function () {\n  this.state = new ReactiveDict();\n  this.refunds = new ReactiveVar([]);\n  this.refundAmount = new ReactiveVar(0.00);\n  this.state.setDefault({\n    isCapturing: false,\n    isRefunding: false,\n    isFetching: true\n  });\n\n  this.autorun(() => {\n    const currentData = Template.currentData();\n    const order = Orders.findOne(currentData.orderId);\n    const shop = Shops.findOne({});\n\n    this.state.set(\"order\", order);\n    this.state.set(\"currency\", shop.currencies[shop.currency]);\n\n    if (order) {\n      Meteor.call(\"orders/refunds/list\", order, (error, result) => {\n        if (error) Logger.warn(error);\n        this.refunds.set(result);\n        this.state.set(\"isFetching\", false);\n      });\n    }\n  });\n});\n\nTemplate.coreOrderShippingInvoice.helpers({\n  isCapturing() {\n    const instance = Template.instance();\n    if (instance.state.get(\"isCapturing\")) {\n      instance.$(\":input\").attr(\"disabled\", true);\n      instance.$(\"#btn-capture-payment\").text(\"Capturing\");\n      return true;\n    }\n    return false;\n  },\n  isRefunding() {\n    const instance = Template.instance();\n    if (instance.state.get(\"isRefunding\")) {\n      instance.$(\"#btn-refund-payment\").text(i18next.t(\"order.refunding\"));\n      return true;\n    }\n    return false;\n  },\n  isFetching() {\n    const instance = Template.instance();\n    if (instance.state.get(\"isFetching\")) {\n      return true;\n    }\n    return false;\n  },\n  DiscountList() {\n    return DiscountList;\n  },\n  InvoiceContainer() {\n    return InvoiceContainer;\n  },\n  buttonSelectComponent() {\n    return {\n      component: ButtonSelect,\n      buttons: [\n        {\n          name: \"Approve\",\n          i18nKeyLabel: \"order.approveInvoice\",\n          active: true,\n          status: \"info\",\n          eventAction: \"approveInvoice\",\n          bgColor: \"bg-info\",\n          buttonType: \"submit\"\n        }, {\n          name: \"Cancel\",\n          i18nKeyLabel: \"order.cancelInvoice\",\n          active: false,\n          status: \"danger\",\n          eventAction: \"cancelOrder\",\n          bgColor: \"bg-danger\",\n          buttonType: \"button\"\n        }\n      ]\n    };\n  },\n  LineItemsContainer() {\n    return LineItemsContainer;\n  },\n  TotalActionsContainer() {\n    return TotalActionsContainer;\n  },\n  orderId() {\n    const instance = Template.instance();\n    const state = instance.state;\n    const order = state.get(\"order\");\n    return order._id;\n  }\n});\n\n/**\n * coreOrderAdjustments events\n */\nTemplate.coreOrderShippingInvoice.events({\n  /**\n   * Click Start Cancel Order\n   * @param {Event} event - Event Object\n   * @param {Template} instance - Blaze Template\n   * @return {void}\n   */\n  \"click [data-event-action=cancelOrder]\": (event, instance) => {\n    event.preventDefault();\n    const order = instance.state.get(\"order\");\n    const invoiceTotal = order.billing[0].invoice.total;\n    const currencySymbol = instance.state.get(\"currency\").symbol;\n\n    Meteor.subscribe(\"Packages\");\n    const packageId = order.billing[0].paymentMethod.paymentPackageId;\n    const settingsKey = order.billing[0].paymentMethod.paymentSettingsKey;\n    // check if payment provider supports de-authorize\n    const checkSupportedMethods = Packages.findOne({\n      _id: packageId,\n      shopId: Reaction.getShopId()\n    }).settings[settingsKey].support;\n\n    const orderStatus = order.billing[0].paymentMethod.status;\n    const orderMode = order.billing[0].paymentMethod.mode;\n\n    let alertText;\n    if (_.includes(checkSupportedMethods, \"de-authorize\") ||\n      (orderStatus === \"completed\" && orderMode === \"capture\")) {\n      alertText = i18next.t(\"order.applyRefundDuringCancelOrder\", { currencySymbol, invoiceTotal });\n    }\n\n    Alerts.alert({\n      title: i18next.t(\"order.cancelOrder\"),\n      text: alertText,\n      type: \"warning\",\n      showCancelButton: true,\n      showCloseButton: true,\n      confirmButtonColor: \"#98afbc\",\n      cancelButtonColor: \"#98afbc\",\n      confirmButtonText: i18next.t(\"order.cancelOrderNoRestock\"),\n      cancelButtonText: i18next.t(\"order.cancelOrderThenRestock\")\n    }, (isConfirm, cancel)=> {\n      let returnToStock;\n      if (isConfirm) {\n        returnToStock = false;\n        return Meteor.call(\"orders/cancelOrder\", order, returnToStock, err => {\n          if (err) {\n            $(\".alert\").removeClass(\"hidden\").text(err.message);\n          }\n        });\n      }\n      if (cancel === \"cancel\") {\n        returnToStock = true;\n        return Meteor.call(\"orders/cancelOrder\", order, returnToStock, err => {\n          if (err) {\n            $(\".alert\").removeClass(\"hidden\").text(err.message);\n          }\n        });\n      }\n    });\n  },\n  /**\n   * Submit form\n   * @param  {Event} event - Event object\n   * @param  {Template} instance - Blaze Template\n   * @return {void}\n   */\n  \"submit form[name=capture]\": (event, instance) => {\n    event.preventDefault();\n    const state = instance.state;\n    const order = state.get(\"order\");\n\n    const paymentMethod = orderCreditMethod(order);\n    const orderTotal = accounting.toFixed(\n      paymentMethod.invoice.subtotal\n      + paymentMethod.invoice.shipping\n      + paymentMethod.invoice.taxes\n      , 2);\n\n    const discount = state.get(\"field-discount\") || order.discount;\n    // TODO: review Discount cannot be greater than original total price\n    // logic is probably not valid any more. Discounts aren't valid below 0 order.\n    if (discount > orderTotal) {\n      Alerts.inline(\"Discount cannot be greater than original total price\", \"error\", {\n        placement: \"coreOrderShippingInvoice\",\n        i18nKey: \"order.invalidDiscount\",\n        autoHide: 10000\n      });\n    } else if (orderTotal === accounting.toFixed(discount, 2)) {\n      Alerts.alert({\n        title: i18next.t(\"order.fullDiscountWarning\"),\n        showCancelButton: true,\n        confirmButtonText: i18next.t(\"order.applyDiscount\")\n      }, (isConfirm) => {\n        if (isConfirm) {\n          Meteor.call(\"orders/approvePayment\", order, (error) => {\n            if (error) {\n              Logger.warn(error);\n            }\n          });\n        }\n      });\n    } else {\n      Meteor.call(\"orders/approvePayment\", order, (error) => {\n        if (error) {\n          Logger.warn(error);\n          if (error.error === \"orders/approvePayment.discount-amount\") {\n            Alerts.inline(\"Discount cannot be greater than original total price\", \"error\", {\n              placement: \"coreOrderShippingInvoice\",\n              i18nKey: \"order.invalidDiscount\",\n              autoHide: 10000\n            });\n          }\n        }\n      });\n    }\n  },\n\n  /**\n   * Submit form\n   * @param  {Event} event - Event object\n   * @param  {Template} instance - Blaze Template\n   * @return {void}\n   */\n  \"click [data-event-action=applyRefund]\": (event, instance) => {\n    event.preventDefault();\n\n    const { state } = Template.instance();\n    const currencySymbol = state.get(\"currency\").symbol;\n    const order = instance.state.get(\"order\");\n    const paymentMethod = orderCreditMethod(order).paymentMethod;\n    const orderTotal = paymentMethod.amount;\n    const discounts = paymentMethod.discounts;\n    const refund = state.get(\"field-refund\") || 0;\n    const refunds = Template.instance().refunds.get();\n    let refundTotal = 0;\n    _.each(refunds, function (item) {\n      refundTotal += parseFloat(item.amount);\n    });\n\n    let adjustedTotal;\n\n    // TODO extract Stripe specific fullfilment payment handling out of core.\n    // Stripe counts discounts as refunds, so we need to re-add the discount to not \"double discount\" in the adjustedTotal\n    if (paymentMethod.processor === \"Stripe\") {\n      adjustedTotal = accounting.toFixed(orderTotal + discounts - refundTotal, 2);\n    } else {\n      adjustedTotal = accounting.toFixed(orderTotal - refundTotal, 2);\n    }\n\n    if (refund > adjustedTotal) {\n      Alerts.inline(\"Refund(s) total cannot be greater than adjusted total\", \"error\", {\n        placement: \"coreOrderRefund\",\n        i18nKey: \"order.invalidRefund\",\n        autoHide: 10000\n      });\n    } else {\n      Alerts.alert({\n        title: i18next.t(\"order.applyRefundToThisOrder\", { refund: refund, currencySymbol: currencySymbol }),\n        showCancelButton: true,\n        confirmButtonText: i18next.t(\"order.applyRefund\")\n      }, (isConfirm) => {\n        if (isConfirm) {\n          state.set(\"isRefunding\", true);\n          Meteor.call(\"orders/refunds/create\", order._id, paymentMethod, refund, (error, result) => {\n            if (error) {\n              Alerts.alert(error.reason);\n            }\n            if (result) {\n              Alerts.toast(i18next.t(\"mail.alerts.emailSent\"), \"success\");\n            }\n            $(\"#btn-refund-payment\").text(i18next.t(\"order.applyRefund\"));\n            state.set(\"field-refund\", 0);\n            state.set(\"isRefunding\", false);\n          });\n        }\n      });\n    }\n  },\n\n  \"click [data-event-action=makeAdjustments]\": (event, instance) => {\n    event.preventDefault();\n    Meteor.call(\"orders/makeAdjustmentsToInvoice\", instance.state.get(\"order\"));\n  },\n\n  \"click [data-event-action=capturePayment]\": (event, instance) => {\n    event.preventDefault();\n\n    instance.state.set(\"isCapturing\", true);\n\n    const order = instance.state.get(\"order\");\n    Meteor.call(\"orders/capturePayments\", order._id);\n\n    if (order.workflow.status === \"new\") {\n      Meteor.call(\"workflow/pushOrderWorkflow\", \"coreOrderWorkflow\", \"processing\", order);\n\n      Reaction.Router.setQueryParams({\n        filter: \"processing\",\n        _id: order._id\n      });\n    }\n  },\n\n  \"change input[name=refund_amount], keyup input[name=refund_amount]\": (event, instance) => {\n    instance.refundAmount.set(accounting.unformat(event.target.value));\n  }\n});\n\n\n/**\n * coreOrderShippingInvoice helpers\n */\nTemplate.coreOrderShippingInvoice.helpers({\n  NumericInput() {\n    return NumericInput;\n  },\n\n  numericInputProps(fieldName, value = 0, enabled = true) {\n    const { state } = Template.instance();\n    const order = state.get(\"order\");\n    const paymentMethod = orderCreditMethod(order);\n    const status = paymentMethod.status;\n    const isApprovedAmount = (status === \"approved\" || status === \"completed\");\n\n    return {\n      component: NumericInput,\n      numericType: \"currency\",\n      value: value,\n      disabled: !enabled,\n      isEditing: !isApprovedAmount, // Dont allow editing if its approved\n      format: state.get(\"currency\"),\n      classNames: {\n        input: { amount: true },\n        text: {\n          \"text-success\": status === \"completed\"\n        }\n      },\n      onChange(event, data) {\n        state.set(`field-${fieldName}`, data.numberValue);\n      }\n    };\n  },\n\n  refundInputProps() {\n    const { state } = Template.instance();\n    const order = state.get(\"order\");\n    const paymentMethod = orderCreditMethod(order).paymentMethod;\n    const refunds = Template.instance().refunds.get();\n\n    let refundTotal = 0;\n    _.each(refunds, function (item) {\n      refundTotal += parseFloat(item.amount);\n    });\n    const adjustedTotal = paymentMethod.amount - refundTotal;\n\n    return {\n      component: NumericInput,\n      numericType: \"currency\",\n      value: state.get(\"field-refund\") || 0,\n      maxValue: adjustedTotal,\n      format: state.get(\"currency\"),\n      classNames: {\n        input: { amount: true }\n      },\n      onChange(event, data) {\n        state.set(\"field-refund\", data.numberValue);\n      }\n    };\n  },\n\n  refundAmount() {\n    return Template.instance().refundAmount;\n  },\n\n  invoice() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n\n    const invoice = Object.assign({}, order.billing[0].invoice, {\n      totalItems: _.sumBy(order.items, (o) => o.quantity)\n    });\n    return invoice;\n  },\n\n  money(amount) {\n    return formatNumber(amount);\n  },\n\n  disabled() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const status = orderCreditMethod(order).paymentMethod.status;\n\n    if (status === \"approved\" || status === \"completed\") {\n      return \"disabled\";\n    }\n\n    return \"\";\n  },\n\n  paymentPendingApproval() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const status = orderCreditMethod(order).paymentMethod.status;\n\n    return status === \"created\" || status === \"adjustments\" || status === \"error\";\n  },\n\n  canMakeAdjustments() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const status = orderCreditMethod(order).paymentMethod.status;\n\n    if (status === \"approved\" || status === \"completed\") {\n      return false;\n    }\n    return true;\n  },\n\n  showAfterPaymentCaptured() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const orderStatus = orderCreditMethod(order).paymentMethod.status;\n    return orderStatus === \"completed\";\n  },\n\n  paymentApproved() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n\n    return order.billing[0].paymentMethod.status === \"approved\";\n  },\n\n  paymentCaptured() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const orderStatus = orderCreditMethod(order).paymentMethod.status;\n    const orderMode = orderCreditMethod(order).paymentMethod.mode;\n    return orderStatus === \"completed\" || (orderStatus === \"refunded\" && orderMode === \"capture\");\n  },\n\n  refundTransactions() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const transactions = orderCreditMethod(order).paymentMethod.transactions;\n\n    return _.filter(transactions, (transaction) => {\n      return transaction.type === \"refund\";\n    });\n  },\n\n  refunds() {\n    const refunds = Template.instance().refunds.get();\n    if (_.isArray(refunds)) {\n      return refunds.reverse();\n    }\n\n    return refunds;\n  },\n\n  /**\n   * Get the total after all refunds\n   * @return {Number} the amount after all refunds\n   */\n  adjustedTotal() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const paymentMethod = orderCreditMethod(order).paymentMethod;\n    const discounts = orderCreditMethod(order).invoice.discounts;\n    const refunds = Template.instance().refunds.get();\n    let refundTotal = 0;\n\n    _.each(refunds, function (item) {\n      refundTotal += parseFloat(item.amount);\n    });\n\n    if (paymentMethod.processor === \"Stripe\") {\n      return Math.abs(paymentMethod.amount + discounts - refundTotal);\n    }\n    return Math.abs(paymentMethod.amount - refundTotal);\n  },\n\n  capturedDisabled() {\n    const isLoading = Template.instance().state.get(\"isCapturing\");\n    if (isLoading) {\n      return \"disabled\";\n    }\n    return null;\n  },\n\n  refundSubmitDisabled() {\n    const amount = Template.instance().state.get(\"field-refund\") || 0;\n    const isLoading = Template.instance().state.get(\"isRefunding\");\n    if (amount === 0 || isLoading) {\n      return \"disabled\";\n    }\n\n    return null;\n  },\n\n  /**\n   * Order\n   * @summary find a single order using the order id spplied with the template\n   * data context\n   * @return {Object} A single order\n   */\n  order() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n\n    return order;\n  },\n\n  shipment() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n\n    const shipment = _.filter(order.shipping, { _id: currentData.fulfillment._id })[0];\n\n    return shipment;\n  },\n\n  discounts() {\n    const enabledPaymentsArr = [];\n    const apps = Reaction.Apps({\n      provides: \"paymentMethod\",\n      enabled: true\n    });\n    for (app of apps) {\n      if (app.enabled === true) enabledPaymentsArr.push(app);\n    }\n    let discount = false;\n\n    for (enabled of enabledPaymentsArr) {\n      if (enabled.packageName === \"discount-codes\") {\n        discount = true;\n        break;\n      }\n    }\n    return discount;\n  },\n\n  items() {\n    const instance = Template.instance();\n    const order = instance.state.get(\"order\");\n    const currentData = Template.currentData();\n    const shipment = currentData.fulfillment;\n\n    // returns order items with shipping detail\n    const returnItems = _.map(order.items, (item) => {\n      const shipping = shipment.shipmentMethod;\n      return _.extend(item, { shipping });\n    });\n\n    let items;\n\n\n    // if avalara tax has been enabled it adds a \"taxDetail\" field for every item\n    if (order.taxes !== undefined) {\n      const taxes = order.taxes.slice(0, -1);\n\n      items = _.map(returnItems, (item) => {\n        const taxDetail = _.find(taxes, {\n          lineNumber: item._id\n        });\n        return _.extend(item, { taxDetail });\n      });\n    } else {\n      items = returnItems;\n    }\n    return items;\n  }\n});\n"]},"hash":"26e840528534044186e83a2aab0cdcd22ab0fb02"}
