{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"sortablejs","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Sortable"}]},{"source":"/imports/plugins/core/ui-tagnav/client/helpers","imported":["TagHelpers"],"specifiers":[{"kind":"named","imported":"TagHelpers","local":"TagHelpers"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui-tagnav/client/components/tagTree/tagTree.js","filenameRelative":"/imports/plugins/core/ui-tagnav/client/components/tagTree/tagTree.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui-tagnav/client/components/tagTree/tagTree.js"],"names":["Sortable","TagHelpers","Template","tagTree","onRendered","instance","list","$","_sortable","create","group","handle","draggable","onSort","event","tagIds","data","subTagGroups","map","item","_id","newTagsOrder","moveItem","oldIndex","newIndex","onTagSort","parentTag","onAdd","toListId","to","dataset","id","movedTagId","onTagDragAdd","onRemove","onTagRemove","foundTag","_","find","tag","helpers","isEditing","tagGroupProps","groupTag","onTagCreate","onTagUpdate","newTagGroupProps","blank","newGroupName","tagTreeNewGroup","props"],"mappings":"AAAA,IAAO;AAAP,OAAqB,WAArB;;;;;;;;;;GACA,AAAS,AAAkB,AAE3B,AAAS,AAAQ,AAAW,AAAM;AAChC,AAAM,iBAAW,WAAS,YAA1B,AAAiB,AACjB;MAAM,AAAO,WAAA,AAAS,AAAE,SAAxB,AAAa,AAAuB,AAEpC;MAAS,OAAT,AAAqB,WAAS,YAAT,AAAgB,AAAM,AACzC,AAAO,AACP;WAAQ;WAFiC,AAG9B;YACX;AAAO,eAAP,AAAc,AACZ;sBAAM,OAAS,AAAS,AAAK,AAAa,AAAI,AAAQ,AACpD;UAAA,AAAI,AAAM,wDACR;YAAO,MAAP,AAAY,AACb;sBAHH,AAAe,AAId;AAED;AAAA,AAAM,AAAe,AAAW,AAAS,AAAQ,AAAM,AAAU,AAAM,AAEvE;AAAI,UAAJ,AAAkB,iEAChB,AAAI,AAAS,AAAK,AAAW,AAC3B;;UAAA,AAAS,cAAT,AAAc,AAAU,AAAc,AAAS,AAAK,AACrD;qCACF;8DAjBsC,AAkBxC;;AAED;AACA,AAAM,AAAO,AACX;AAAA,AAAM,AAAW,AAAM,AAAG,AAAQ,AAClC;qBAAM,OAAN,AAAmB,AAAM,AAAK,AAAQ,AACtC;UAAM,AAAS,iBAAS,GAAT,AAAc,QAAd,AAA2B,AAAI,AAAQ,AACpD;UAAA,AAAI,AAAM,gCACR;UAAO,wDACR;kBAHH,AAAe,AAId;;AAED;AAAA,AAAI,AAAS,AAAK,AAAc,AAC9B,AAAS,AAAK,AAAa,AAAY,AAAU,AAAM,AAAU,AAClE,OANG,AAAY;;sCA1BuB,AAiCxC;;AAED;AACA,AAAS,AAAO,AACd;AAAA,AAAM,AAAa,AAAM,AAAK,AAAQ;+BAEtC;AAAI,UAAA,AAAS,AAAK,mBAAlB,KAA+B,QAC7B,AAAM,AAAW,AAAE,AAAK,AAAS,AAAK,AAAc,AAAC,AAAQ,AAC3D;;UAAO,SAAI,KAAJ,AAAY,aAAnB,AACD;AAFD,AAAiB;6BAIjB;AAAA,AAAS,AAAK,AAAY,AAAU,AAAS,AAAK,AACnD,AACF;;;AA9CH,AAAqB,AAAsB;AAJ7C,AAoDC,AAED;AA/CI,GAHyC;AAkD7C,AAAS,AAAQ,AAAQ,AACvB,AAAY;AACV,SAAO,QAAS;AAFK;oCAKvB;AAAA,AAAc,AAAU,AACtB,AAAM,AAAW,AAAS,AAE1B;AAAO,qCACL;QADK,oBAAA,AAEL,AAAW,AAAS,AAAK,AACzB;;AAHK,AAIQ,AAAS,AAAK,AAC3B;iBAAc,SAAS,KALlB,AAKS,AAAc,AAC5B;iBAAa,SAAS,KANjB,AAMQ,AAAc,AAC3B;AAAW,mBAAS,SAAT,AAAc,KAPpB,AAQL;AAAa,oBAAS,SAAT,AAAc,KAR7B,AAAO;iCARc,AAkBtB;;iCACD,AAAiB,AAAW,AAC1B;AAZO,AAGM,AAAS,AAAK,AACzB;AAQF,AAAM,AAAW,AAAS,AAE1B;AAAO,yCACL;QADK,AACE,oBACP;;AACM,aAAJ,AAAI,AAAS,AAAK,AAAa,AAC7B;6BAAA,AAAS,AAAK,cAAd,AAA0B,AAAc,AACzC;uCACF;;AANH,AAAO;AAQR;AANG,AAAY,AAAc,AACxB;AAzBR,AAAyB,AAkCzB,AAAS,AAAgB,AAAQ,AAC/B,AAAQ;AAjCN,AAAO,AAAoB,AAAK,AACjC;AAiCC,SAAM,AAAW,gBAAS;qBAEnB,AACL;QADK,AACE,oBADF,AAEL,AAAa,AAAS,AAAK;AAF7B;;iCAJJ,AAAiC;AAQ9B;;AANC,AAAiB,AAEjB","file":"/imports/plugins/core/ui-tagnav/client/components/tagTree/tagTree.js.map","sourcesContent":["import Sortable from \"sortablejs\";\nimport { TagHelpers } from \"/imports/plugins/core/ui-tagnav/client/helpers\";\n\nTemplate.tagTree.onRendered(() => {\n  const instance = Template.instance();\n  const list = instance.$(\".content\")[0];\n\n  instance._sortable = Sortable.create(list, {\n    group: \"tagGroup\",\n    handle: \".js-drag-handle\",\n    draggable: \".rui.grouptag\",\n    onSort(event) {\n      const tagIds = instance.data.subTagGroups.map(item => {\n        if (item) {\n          return item._id;\n        }\n      });\n\n      const newTagsOrder = TagHelpers.moveItem(tagIds, event.oldIndex, event.newIndex);\n\n      if (newTagsOrder) {\n        if (instance.data.onTagSort) {\n          instance.data.onTagSort(newTagsOrder, instance.data.parentTag);\n        }\n      }\n    },\n\n    // On add from another list\n    onAdd(event) {\n      const toListId = event.to.dataset.id;\n      const movedTagId = event.item.dataset.id;\n      const tagIds = instance.data.subTagGroups.map(item => {\n        if (item) {\n          return item._id;\n        }\n      });\n\n      if (instance.data.onTagDragAdd) {\n        instance.data.onTagDragAdd(movedTagId, toListId, event.newIndex, tagIds);\n      }\n    },\n\n    // Tag removed from list becuase it was dragged to a different list\n    onRemove(event) {\n      const movedTagId = event.item.dataset.id;\n\n      if (instance.data.onTagRemove) {\n        const foundTag = _.find(instance.data.subTagGroups, (tag) => {\n          return tag._id === movedTagId;\n        });\n\n        instance.data.onTagRemove(foundTag, instance.data.parentTag);\n      }\n    }\n  });\n});\n\nTemplate.tagTree.helpers({\n  isEditing() {\n    return Template.instance().data.isEditing;\n  },\n\n  tagGroupProps(groupTag) {\n    const instance = Template.instance();\n\n    return {\n      groupTag,\n      parentTag: instance.data.parentTag,\n      isEditing: instance.data.isEditing,\n      onTagCreate: instance.data.onTagCreate,\n      onTagDragAdd: instance.data.onTagDragAdd,\n      onTagRemove: instance.data.onTagRemove,\n      onTagSort: instance.data.onTagSort,\n      onTagUpdate: instance.data.onTagUpdate\n    };\n  },\n  newTagGroupProps(parentTag) {\n    const instance = Template.instance();\n\n    return {\n      blank: true,\n      onTagCreate(newGroupName) {\n        if (instance.data.onTagCreate) {\n          instance.data.onTagCreate(newGroupName, parentTag);\n        }\n      }\n    };\n  }\n});\n\n\nTemplate.tagTreeNewGroup.helpers({\n  props() {\n    const instance = Template.instance();\n\n    return {\n      blank: true,\n      onTagCreate: instance.data.onTagCreate\n    };\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui-tagnav/client/components/tagTree/tagTree.js.map","sourceFileName":"/imports/plugins/core/ui-tagnav/client/components/tagTree/tagTree.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"tagTree"},"ignored":false,"code":"var Sortable = void 0;\nmodule.importSync(\"sortablejs\", {\n  \"default\": function (v) {\n    Sortable = v;\n  }\n}, 0);\nvar TagHelpers = void 0;\nmodule.importSync(\"/imports/plugins/core/ui-tagnav/client/helpers\", {\n  TagHelpers: function (v) {\n    TagHelpers = v;\n  }\n}, 1);\nTemplate.tagTree.onRendered(function () {\n  var instance = Template.instance();\n  var list = instance.$(\".content\")[0];\n  instance._sortable = Sortable.create(list, {\n    group: \"tagGroup\",\n    handle: \".js-drag-handle\",\n    draggable: \".rui.grouptag\",\n    onSort: function (event) {\n      var tagIds = instance.data.subTagGroups.map(function (item) {\n        if (item) {\n          return item._id;\n        }\n      });\n      var newTagsOrder = TagHelpers.moveItem(tagIds, event.oldIndex, event.newIndex);\n\n      if (newTagsOrder) {\n        if (instance.data.onTagSort) {\n          instance.data.onTagSort(newTagsOrder, instance.data.parentTag);\n        }\n      }\n    },\n    // On add from another list\n    onAdd: function (event) {\n      var toListId = event.to.dataset.id;\n      var movedTagId = event.item.dataset.id;\n      var tagIds = instance.data.subTagGroups.map(function (item) {\n        if (item) {\n          return item._id;\n        }\n      });\n\n      if (instance.data.onTagDragAdd) {\n        instance.data.onTagDragAdd(movedTagId, toListId, event.newIndex, tagIds);\n      }\n    },\n    // Tag removed from list becuase it was dragged to a different list\n    onRemove: function (event) {\n      var movedTagId = event.item.dataset.id;\n\n      if (instance.data.onTagRemove) {\n        var foundTag = _.find(instance.data.subTagGroups, function (tag) {\n          return tag._id === movedTagId;\n        });\n\n        instance.data.onTagRemove(foundTag, instance.data.parentTag);\n      }\n    }\n  });\n});\nTemplate.tagTree.helpers({\n  isEditing: function () {\n    return Template.instance().data.isEditing;\n  },\n  tagGroupProps: function (groupTag) {\n    var instance = Template.instance();\n    return {\n      groupTag: groupTag,\n      parentTag: instance.data.parentTag,\n      isEditing: instance.data.isEditing,\n      onTagCreate: instance.data.onTagCreate,\n      onTagDragAdd: instance.data.onTagDragAdd,\n      onTagRemove: instance.data.onTagRemove,\n      onTagSort: instance.data.onTagSort,\n      onTagUpdate: instance.data.onTagUpdate\n    };\n  },\n  newTagGroupProps: function (parentTag) {\n    var instance = Template.instance();\n    return {\n      blank: true,\n      onTagCreate: function (newGroupName) {\n        if (instance.data.onTagCreate) {\n          instance.data.onTagCreate(newGroupName, parentTag);\n        }\n      }\n    };\n  }\n});\nTemplate.tagTreeNewGroup.helpers({\n  props: function () {\n    var instance = Template.instance();\n    return {\n      blank: true,\n      onTagCreate: instance.data.onTagCreate\n    };\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/ui-tagnav/client/components/tagTree/tagTree.js"],"names":["Sortable","TagHelpers","Template","tagTree","onRendered","instance","list","$","_sortable","create","group","handle","draggable","onSort","event","tagIds","data","subTagGroups","map","item","_id","newTagsOrder","moveItem","oldIndex","newIndex","onTagSort","parentTag","onAdd","toListId","to","dataset","id","movedTagId","onTagDragAdd","onRemove","onTagRemove","foundTag","_","find","tag","helpers","isEditing","tagGroupProps","groupTag","onTagCreate","onTagUpdate","newTagGroupProps","blank","newGroupName","tagTreeNewGroup","props"],"mappings":"AAAA,IAAO;AAAP,OAAqB,WAArB;;;;;;;;;;GACA,AAAS,AAAkB,AAE3B,AAAS,AAAQ,AAAW,AAAM;AAChC,AAAM,iBAAW,WAAS,YAA1B,AAAiB,AACjB;MAAM,AAAO,WAAA,AAAS,AAAE,SAAxB,AAAa,AAAuB,AAEpC;MAAS,OAAT,AAAqB,WAAS,YAAT,AAAgB,AAAM,AACzC,AAAO,AACP;WAAQ;WAFiC,AAG9B;YACX;AAAO,eAAP,AAAc,AACZ;sBAAM,OAAS,AAAS,AAAK,AAAa,AAAI,AAAQ,AACpD;UAAA,AAAI,AAAM,wDACR;YAAO,MAAP,AAAY,AACb;sBAHH,AAAe,AAId;AAED;AAAA,AAAM,AAAe,AAAW,AAAS,AAAQ,AAAM,AAAU,AAAM,AAEvE;AAAI,UAAJ,AAAkB,iEAChB,AAAI,AAAS,AAAK,AAAW,AAC3B;;UAAA,AAAS,cAAT,AAAc,AAAU,AAAc,AAAS,AAAK,AACrD;qCACF;8DAjBsC,AAkBxC;;AAED;AACA,AAAM,AAAO,AACX;AAAA,AAAM,AAAW,AAAM,AAAG,AAAQ,AAClC;qBAAM,OAAN,AAAmB,AAAM,AAAK,AAAQ,AACtC;UAAM,AAAS,iBAAS,GAAT,AAAc,QAAd,AAA2B,AAAI,AAAQ,AACpD;UAAA,AAAI,AAAM,gCACR;UAAO,wDACR;kBAHH,AAAe,AAId;;AAED;AAAA,AAAI,AAAS,AAAK,AAAc,AAC9B,AAAS,AAAK,AAAa,AAAY,AAAU,AAAM,AAAU,AAClE,OANG,AAAY;;sCA1BuB,AAiCxC;;AAED;AACA,AAAS,AAAO,AACd;AAAA,AAAM,AAAa,AAAM,AAAK,AAAQ;+BAEtC;AAAI,UAAA,AAAS,AAAK,mBAAlB,KAA+B,QAC7B,AAAM,AAAW,AAAE,AAAK,AAAS,AAAK,AAAc,AAAC,AAAQ,AAC3D;;UAAO,SAAI,KAAJ,AAAY,aAAnB,AACD;AAFD,AAAiB;6BAIjB;AAAA,AAAS,AAAK,AAAY,AAAU,AAAS,AAAK,AACnD,AACF;;;AA9CH,AAAqB,AAAsB;AAJ7C,AAoDC,AAED;AA/CI,GAHyC;AAkD7C,AAAS,AAAQ,AAAQ,AACvB,AAAY;AACV,SAAO,QAAS;AAFK;oCAKvB;AAAA,AAAc,AAAU,AACtB,AAAM,AAAW,AAAS,AAE1B;AAAO,qCACL;QADK,oBAAA,AAEL,AAAW,AAAS,AAAK,AACzB;;AAHK,AAIQ,AAAS,AAAK,AAC3B;iBAAc,SAAS,KALlB,AAKS,AAAc,AAC5B;iBAAa,SAAS,KANjB,AAMQ,AAAc,AAC3B;AAAW,mBAAS,SAAT,AAAc,KAPpB,AAQL;AAAa,oBAAS,SAAT,AAAc,KAR7B,AAAO;iCARc,AAkBtB;;iCACD,AAAiB,AAAW,AAC1B;AAZO,AAGM,AAAS,AAAK,AACzB;AAQF,AAAM,AAAW,AAAS,AAE1B;AAAO,yCACL;QADK,AACE,oBACP;;AACM,aAAJ,AAAI,AAAS,AAAK,AAAa,AAC7B;6BAAA,AAAS,AAAK,cAAd,AAA0B,AAAc,AACzC;uCACF;;AANH,AAAO;AAQR;AANG,AAAY,AAAc,AACxB;AAzBR,AAAyB,AAkCzB,AAAS,AAAgB,AAAQ,AAC/B,AAAQ;AAjCN,AAAO,AAAoB,AAAK,AACjC;AAiCC,SAAM,AAAW,gBAAS;qBAEnB,AACL;QADK,AACE,oBADF,AAEL,AAAa,AAAS,AAAK;AAF7B;;iCAJJ,AAAiC;AAQ9B;;AANC,AAAiB,AAEjB","file":"/imports/plugins/core/ui-tagnav/client/components/tagTree/tagTree.js.map","sourcesContent":["import Sortable from \"sortablejs\";\nimport { TagHelpers } from \"/imports/plugins/core/ui-tagnav/client/helpers\";\n\nTemplate.tagTree.onRendered(() => {\n  const instance = Template.instance();\n  const list = instance.$(\".content\")[0];\n\n  instance._sortable = Sortable.create(list, {\n    group: \"tagGroup\",\n    handle: \".js-drag-handle\",\n    draggable: \".rui.grouptag\",\n    onSort(event) {\n      const tagIds = instance.data.subTagGroups.map(item => {\n        if (item) {\n          return item._id;\n        }\n      });\n\n      const newTagsOrder = TagHelpers.moveItem(tagIds, event.oldIndex, event.newIndex);\n\n      if (newTagsOrder) {\n        if (instance.data.onTagSort) {\n          instance.data.onTagSort(newTagsOrder, instance.data.parentTag);\n        }\n      }\n    },\n\n    // On add from another list\n    onAdd(event) {\n      const toListId = event.to.dataset.id;\n      const movedTagId = event.item.dataset.id;\n      const tagIds = instance.data.subTagGroups.map(item => {\n        if (item) {\n          return item._id;\n        }\n      });\n\n      if (instance.data.onTagDragAdd) {\n        instance.data.onTagDragAdd(movedTagId, toListId, event.newIndex, tagIds);\n      }\n    },\n\n    // Tag removed from list becuase it was dragged to a different list\n    onRemove(event) {\n      const movedTagId = event.item.dataset.id;\n\n      if (instance.data.onTagRemove) {\n        const foundTag = _.find(instance.data.subTagGroups, (tag) => {\n          return tag._id === movedTagId;\n        });\n\n        instance.data.onTagRemove(foundTag, instance.data.parentTag);\n      }\n    }\n  });\n});\n\nTemplate.tagTree.helpers({\n  isEditing() {\n    return Template.instance().data.isEditing;\n  },\n\n  tagGroupProps(groupTag) {\n    const instance = Template.instance();\n\n    return {\n      groupTag,\n      parentTag: instance.data.parentTag,\n      isEditing: instance.data.isEditing,\n      onTagCreate: instance.data.onTagCreate,\n      onTagDragAdd: instance.data.onTagDragAdd,\n      onTagRemove: instance.data.onTagRemove,\n      onTagSort: instance.data.onTagSort,\n      onTagUpdate: instance.data.onTagUpdate\n    };\n  },\n  newTagGroupProps(parentTag) {\n    const instance = Template.instance();\n\n    return {\n      blank: true,\n      onTagCreate(newGroupName) {\n        if (instance.data.onTagCreate) {\n          instance.data.onTagCreate(newGroupName, parentTag);\n        }\n      }\n    };\n  }\n});\n\n\nTemplate.tagTreeNewGroup.helpers({\n  props() {\n    const instance = Template.instance();\n\n    return {\n      blank: true,\n      onTagCreate: instance.data.onTagCreate\n    };\n  }\n});\n"]},"hash":"7c58ee223a3d19a30bb3bcfd9bddd6200da8ddaa"}
