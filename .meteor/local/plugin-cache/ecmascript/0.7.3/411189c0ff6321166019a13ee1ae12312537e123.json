{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"accounting-js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"accounting"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/client/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"/lib/collections","imported":["Shops"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"}]},{"source":"./main","imported":["currencyDep"],"specifiers":[{"kind":"named","imported":"currencyDep","local":"currencyDep"}]}],"exports":{"exported":["formatPriceString","formatPrice","useDefaultShopCurrency","formatNumber","currentPrice"],"specifiers":[{"kind":"local","local":"formatPriceString","exported":"formatPriceString"},{"kind":"local","local":"formatPrice","exported":"formatPrice"},{"kind":"local","local":"useDefaultShopCurrency","exported":"useDefaultShopCurrency"},{"kind":"local","local":"formatNumber","exported":"formatNumber"},{"kind":"local","local":"currentPrice","exported":"currentPrice"}]}}},"options":{"filename":"/client/modules/i18n/currency.js","filenameRelative":"/client/modules/i18n/currency.js","inputSourceMap":{"version":3,"sources":["/client/modules/i18n/currency.js"],"names":["accounting","Meteor","Reaction","Logger","Shops","currencyDep","findCurrency","defaultCurrency","useDefaultShopCurrency","shop","findOne","getShopId","fields","currencies","currency","localStorageCurrencyName","localStorage","getItem","localStorageCurrency","exchangeRate","rate","formatPriceString","formatPrice","defaultShopCurrency","depend","locale","Locale","get","userCurrency","currentPrice","toString","price","prices","indexOf","split","len","length","i","originalPrice","Error","_formatPrice","error","debug","shopCurrency","formatNumber","format","Object","assign","shopFormat","formatMoney","actualPrice","pos","adjustedPrice","formattedPrice","scale","undefined","precision","where","modifiedCurrency","symbol","replace"],"mappings":"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","file":"/client/modules/i18n/currency.js.map","sourcesContent":["import accounting from \"accounting-js\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, Logger } from \"/client/api\";\nimport { Shops } from \"/lib/collections\";\nimport { currencyDep } from \"./main\";\n\n/**\n * findCurrency\n * private function for returning localStorage currency\n * @param   {Object}  defaultCurrency    The default currency\n * @param {Boolean} useDefaultShopCurrency - flag for displaying shop's currency in Admin view of PDP\n * @return  {Object}  localStorageCurrency The localStorage currency\n */\nfunction findCurrency(defaultCurrency, useDefaultShopCurrency) {\n  const shop = Shops.findOne(Reaction.getShopId(), {\n    fields: {\n      currencies: 1,\n      currency: 1\n    }\n  });\n  const localStorageCurrencyName = localStorage.getItem(\"currency\");\n  if (typeof shop === \"object\" && shop.currencies && localStorageCurrencyName) {\n    let localStorageCurrency = {};\n    if (shop.currencies[localStorageCurrencyName]) {\n      if (useDefaultShopCurrency) {\n        localStorageCurrency = shop.currencies[shop.currency];\n        localStorageCurrency.exchangeRate = 1;\n      } else {\n        localStorageCurrency = shop.currencies[localStorageCurrencyName];\n        localStorageCurrency.exchangeRate = shop.currencies[localStorageCurrencyName].rate;\n      }\n    }\n    return localStorageCurrency;\n  }\n  return defaultCurrency;\n}\n\n/**\n * formatPriceString\n * @summary return shop /locale specific formatted price\n * also accepts a range formatted with \" - \"\n * @param {String} formatPrice - currentPrice or \"xx.xx - xx.xx\" formatted String\n * @param {Boolean} useDefaultShopCurrency - flag for displaying shop's currency in Admin view of PDP\n * @return {String} returns locale formatted and exchange rate converted values\n */\nexport function formatPriceString(formatPrice, useDefaultShopCurrency) {\n  let defaultShopCurrency = useDefaultShopCurrency;\n\n  // in case useDefaultShopCurrency is a Spacebars.kw we have this check\n  if (typeof useDefaultShopCurrency === \"object\" || !useDefaultShopCurrency) {\n    defaultShopCurrency = false;\n  }\n\n  currencyDep.depend();\n  const locale = Reaction.Locale.get();\n\n  if (typeof locale !== \"object\" || typeof locale.currency !== \"object\") {\n    // locale not yet loaded, so we don\"t need to return anything.\n    return false;\n  }\n\n  if (typeof formatPrice !== \"string\" && typeof formatPrice !== \"number\") {\n    return false;\n  }\n\n  // uses the localStorage currency instead of locale\n  const userCurrency = findCurrency(locale.currency, defaultShopCurrency);\n\n  // for the cases then we have only one price. It is a number.\n  const currentPrice = formatPrice.toString();\n  let price = 0;\n  const prices = ~currentPrice.indexOf(\" - \") ?\n    currentPrice.split(\" - \") : [currentPrice];\n\n  // basic \"for\" is faster then \"for ...of\" for arrays. We need more speed here\n  const len = prices.length;\n  for (let i = 0; i < len; i++) {\n    const originalPrice = prices[i];\n    try {\n      // we know the locale, but we don\"t know exchange rate. In that case we\n      // should return to default shop currency\n      if (typeof userCurrency.rate !== \"number\") {\n        throw new Meteor.Error(\"exchangeRateUndefined\");\n      }\n      prices[i] *= userCurrency.rate;\n\n      price = _formatPrice(price, originalPrice, prices[i],\n        currentPrice, userCurrency, i, len);\n    } catch (error) {\n      Logger.debug(\"currency error, fallback to shop currency\");\n      price = _formatPrice(price, originalPrice, prices[i],\n        currentPrice, locale.shopCurrency, i, len);\n    }\n  }\n  return price;\n}\n\nexport function formatNumber(currentPrice) {\n  const locale = Reaction.Locale.get();\n  let price = currentPrice;\n  const format = Object.assign({}, locale.currency, {\n    format: \"%v\"\n  });\n  const shopFormat = Object.assign({}, locale.shopCurrency, {\n    format: \"%v\"\n  });\n\n  if (typeof locale.currency === \"object\" && locale.currency.rate) {\n    price = currentPrice * locale.currency.rate;\n    return accounting.formatMoney(price, format);\n  }\n\n  Logger.debug(\"currency error, fallback to shop currency\");\n  return accounting.formatMoney(currentPrice, shopFormat);\n}\n\n/**\n * _formatPrice\n * private function for formatting locale currency\n * @private\n * @param  {Number} price         price\n * @param  {Number} originalPrice originalPrice\n * @param  {Number} actualPrice   actualPrice\n * @param  {Number} currentPrice  currentPrice\n * @param  {Number} currency      currency\n * @param  {Number} pos           position\n * @param  {Number} len           length\n * @return {Number}               formatted price\n */\nfunction _formatPrice(price, originalPrice, actualPrice, currentPrice, currency,\n  pos, len) {\n  // this checking for locale.shopCurrency mostly\n  if (typeof currency !== \"object\") {\n    return false;\n  }\n\n  let adjustedPrice = actualPrice;\n  let formattedPrice;\n\n  // Precision is mis-used in accounting js. Scale is the propery term for number\n  // of decimal places. Let's adjust it here so accounting.js does not break.\n  if (currency.scale !== undefined) {\n    currency.precision = currency.scale;\n  }\n\n  // If there are no decimal places, in the case of the Japanese Yen, we adjust it here.\n  if (currency.scale === 0) {\n    adjustedPrice = actualPrice * 100;\n  }\n\n  // @param {string} currency.where: If it presents - in situation then two\n  // prices in string, currency sign will be placed just outside the right price.\n  // For now it should be manually added to fixtures shop data.\n  if (typeof currency.where === \"string\" && currency.where === \"right\" &&\n    len > 1 && pos === 0) {\n    const modifiedCurrency = Object.assign({}, currency, {\n      symbol: \"\"\n    });\n    formattedPrice = accounting.formatMoney(adjustedPrice, modifiedCurrency);\n  } else {\n    // accounting api: http://openexchangerates.github.io/accounting.js/\n    formattedPrice = accounting.formatMoney(adjustedPrice, currency);\n  }\n\n  return price === 0 ? currentPrice.replace(originalPrice, formattedPrice) : price.replace(originalPrice, formattedPrice);\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/i18n/currency.js.map","sourceFileName":"/client/modules/i18n/currency.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"currency"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  formatPriceString: function () {\n    return formatPriceString;\n  },\n  formatNumber: function () {\n    return formatNumber;\n  }\n});\nvar accounting = void 0;\nmodule.importSync(\"accounting-js\", {\n  \"default\": function (v) {\n    accounting = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 2);\nvar Shops = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  }\n}, 3);\nvar currencyDep = void 0;\nmodule.importSync(\"./main\", {\n  currencyDep: function (v) {\n    currencyDep = v;\n  }\n}, 4);\n\n/**\n * findCurrency\n * private function for returning localStorage currency\n * @param   {Object}  defaultCurrency    The default currency\n * @param {Boolean} useDefaultShopCurrency - flag for displaying shop's currency in Admin view of PDP\n * @return  {Object}  localStorageCurrency The localStorage currency\n */function findCurrency(defaultCurrency, useDefaultShopCurrency) {\n  var shop = Shops.findOne(Reaction.getShopId(), {\n    fields: {\n      currencies: 1,\n      currency: 1\n    }\n  });\n  var localStorageCurrencyName = localStorage.getItem(\"currency\");\n\n  if ((typeof shop === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(shop)) === \"object\" && shop.currencies && localStorageCurrencyName) {\n    var localStorageCurrency = {};\n\n    if (shop.currencies[localStorageCurrencyName]) {\n      if (useDefaultShopCurrency) {\n        localStorageCurrency = shop.currencies[shop.currency];\n        localStorageCurrency.exchangeRate = 1;\n      } else {\n        localStorageCurrency = shop.currencies[localStorageCurrencyName];\n        localStorageCurrency.exchangeRate = shop.currencies[localStorageCurrencyName].rate;\n      }\n    }\n\n    return localStorageCurrency;\n  }\n\n  return defaultCurrency;\n} /**\n   * formatPriceString\n   * @summary return shop /locale specific formatted price\n   * also accepts a range formatted with \" - \"\n   * @param {String} formatPrice - currentPrice or \"xx.xx - xx.xx\" formatted String\n   * @param {Boolean} useDefaultShopCurrency - flag for displaying shop's currency in Admin view of PDP\n   * @return {String} returns locale formatted and exchange rate converted values\n   */\n\nfunction formatPriceString(formatPrice, useDefaultShopCurrency) {\n  var defaultShopCurrency = useDefaultShopCurrency; // in case useDefaultShopCurrency is a Spacebars.kw we have this check\n\n  if ((typeof useDefaultShopCurrency === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(useDefaultShopCurrency)) === \"object\" || !useDefaultShopCurrency) {\n    defaultShopCurrency = false;\n  }\n\n  currencyDep.depend();\n  var locale = Reaction.Locale.get();\n\n  if ((typeof locale === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(locale)) !== \"object\" || (0, _typeof3.default)(locale.currency) !== \"object\") {\n    // locale not yet loaded, so we don\"t need to return anything.\n    return false;\n  }\n\n  if (typeof formatPrice !== \"string\" && typeof formatPrice !== \"number\") {\n    return false;\n  } // uses the localStorage currency instead of locale\n\n\n  var userCurrency = findCurrency(locale.currency, defaultShopCurrency); // for the cases then we have only one price. It is a number.\n\n  var currentPrice = formatPrice.toString();\n  var price = 0;\n  var prices = ~currentPrice.indexOf(\" - \") ? currentPrice.split(\" - \") : [currentPrice]; // basic \"for\" is faster then \"for ...of\" for arrays. We need more speed here\n\n  var len = prices.length;\n\n  for (var i = 0; i < len; i++) {\n    var originalPrice = prices[i];\n\n    try {\n      // we know the locale, but we don\"t know exchange rate. In that case we\n      // should return to default shop currency\n      if (typeof userCurrency.rate !== \"number\") {\n        throw new Meteor.Error(\"exchangeRateUndefined\");\n      }\n\n      prices[i] *= userCurrency.rate;\n      price = _formatPrice(price, originalPrice, prices[i], currentPrice, userCurrency, i, len);\n    } catch (error) {\n      Logger.debug(\"currency error, fallback to shop currency\");\n      price = _formatPrice(price, originalPrice, prices[i], currentPrice, locale.shopCurrency, i, len);\n    }\n  }\n\n  return price;\n}\n\nfunction formatNumber(currentPrice) {\n  var locale = Reaction.Locale.get();\n  var price = currentPrice;\n  var format = Object.assign({}, locale.currency, {\n    format: \"%v\"\n  });\n  var shopFormat = Object.assign({}, locale.shopCurrency, {\n    format: \"%v\"\n  });\n\n  if ((0, _typeof3.default)(locale.currency) === \"object\" && locale.currency.rate) {\n    price = currentPrice * locale.currency.rate;\n    return accounting.formatMoney(price, format);\n  }\n\n  Logger.debug(\"currency error, fallback to shop currency\");\n  return accounting.formatMoney(currentPrice, shopFormat);\n}\n\n/**\n * _formatPrice\n * private function for formatting locale currency\n * @private\n * @param  {Number} price         price\n * @param  {Number} originalPrice originalPrice\n * @param  {Number} actualPrice   actualPrice\n * @param  {Number} currentPrice  currentPrice\n * @param  {Number} currency      currency\n * @param  {Number} pos           position\n * @param  {Number} len           length\n * @return {Number}               formatted price\n */function _formatPrice(price, originalPrice, actualPrice, currentPrice, currency, pos, len) {\n  // this checking for locale.shopCurrency mostly\n  if ((typeof currency === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(currency)) !== \"object\") {\n    return false;\n  }\n\n  var adjustedPrice = actualPrice;\n  var formattedPrice = void 0; // Precision is mis-used in accounting js. Scale is the propery term for number\n  // of decimal places. Let's adjust it here so accounting.js does not break.\n\n  if (currency.scale !== undefined) {\n    currency.precision = currency.scale;\n  } // If there are no decimal places, in the case of the Japanese Yen, we adjust it here.\n\n\n  if (currency.scale === 0) {\n    adjustedPrice = actualPrice * 100;\n  } // @param {string} currency.where: If it presents - in situation then two\n  // prices in string, currency sign will be placed just outside the right price.\n  // For now it should be manually added to fixtures shop data.\n\n\n  if (typeof currency.where === \"string\" && currency.where === \"right\" && len > 1 && pos === 0) {\n    var modifiedCurrency = Object.assign({}, currency, {\n      symbol: \"\"\n    });\n    formattedPrice = accounting.formatMoney(adjustedPrice, modifiedCurrency);\n  } else {\n    // accounting api: http://openexchangerates.github.io/accounting.js/\n    formattedPrice = accounting.formatMoney(adjustedPrice, currency);\n  }\n\n  return price === 0 ? currentPrice.replace(originalPrice, formattedPrice) : price.replace(originalPrice, formattedPrice);\n}","map":{"version":3,"sources":["/client/modules/i18n/currency.js"],"names":["accounting","Meteor","Reaction","Logger","Shops","currencyDep","findCurrency","defaultCurrency","useDefaultShopCurrency","shop","findOne","getShopId","fields","currencies","currency","localStorageCurrencyName","localStorage","getItem","localStorageCurrency","exchangeRate","rate","formatPriceString","formatPrice","defaultShopCurrency","depend","locale","Locale","get","userCurrency","currentPrice","toString","price","prices","indexOf","split","len","length","i","originalPrice","Error","_formatPrice","error","debug","shopCurrency","formatNumber","format","Object","assign","shopFormat","formatMoney","actualPrice","pos","adjustedPrice","formattedPrice","scale","undefined","precision","where","modifiedCurrency","symbol","replace"],"mappings":"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","file":"/client/modules/i18n/currency.js.map","sourcesContent":["import accounting from \"accounting-js\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction, Logger } from \"/client/api\";\nimport { Shops } from \"/lib/collections\";\nimport { currencyDep } from \"./main\";\n\n/**\n * findCurrency\n * private function for returning localStorage currency\n * @param   {Object}  defaultCurrency    The default currency\n * @param {Boolean} useDefaultShopCurrency - flag for displaying shop's currency in Admin view of PDP\n * @return  {Object}  localStorageCurrency The localStorage currency\n */\nfunction findCurrency(defaultCurrency, useDefaultShopCurrency) {\n  const shop = Shops.findOne(Reaction.getShopId(), {\n    fields: {\n      currencies: 1,\n      currency: 1\n    }\n  });\n  const localStorageCurrencyName = localStorage.getItem(\"currency\");\n  if (typeof shop === \"object\" && shop.currencies && localStorageCurrencyName) {\n    let localStorageCurrency = {};\n    if (shop.currencies[localStorageCurrencyName]) {\n      if (useDefaultShopCurrency) {\n        localStorageCurrency = shop.currencies[shop.currency];\n        localStorageCurrency.exchangeRate = 1;\n      } else {\n        localStorageCurrency = shop.currencies[localStorageCurrencyName];\n        localStorageCurrency.exchangeRate = shop.currencies[localStorageCurrencyName].rate;\n      }\n    }\n    return localStorageCurrency;\n  }\n  return defaultCurrency;\n}\n\n/**\n * formatPriceString\n * @summary return shop /locale specific formatted price\n * also accepts a range formatted with \" - \"\n * @param {String} formatPrice - currentPrice or \"xx.xx - xx.xx\" formatted String\n * @param {Boolean} useDefaultShopCurrency - flag for displaying shop's currency in Admin view of PDP\n * @return {String} returns locale formatted and exchange rate converted values\n */\nexport function formatPriceString(formatPrice, useDefaultShopCurrency) {\n  let defaultShopCurrency = useDefaultShopCurrency;\n\n  // in case useDefaultShopCurrency is a Spacebars.kw we have this check\n  if (typeof useDefaultShopCurrency === \"object\" || !useDefaultShopCurrency) {\n    defaultShopCurrency = false;\n  }\n\n  currencyDep.depend();\n  const locale = Reaction.Locale.get();\n\n  if (typeof locale !== \"object\" || typeof locale.currency !== \"object\") {\n    // locale not yet loaded, so we don\"t need to return anything.\n    return false;\n  }\n\n  if (typeof formatPrice !== \"string\" && typeof formatPrice !== \"number\") {\n    return false;\n  }\n\n  // uses the localStorage currency instead of locale\n  const userCurrency = findCurrency(locale.currency, defaultShopCurrency);\n\n  // for the cases then we have only one price. It is a number.\n  const currentPrice = formatPrice.toString();\n  let price = 0;\n  const prices = ~currentPrice.indexOf(\" - \") ?\n    currentPrice.split(\" - \") : [currentPrice];\n\n  // basic \"for\" is faster then \"for ...of\" for arrays. We need more speed here\n  const len = prices.length;\n  for (let i = 0; i < len; i++) {\n    const originalPrice = prices[i];\n    try {\n      // we know the locale, but we don\"t know exchange rate. In that case we\n      // should return to default shop currency\n      if (typeof userCurrency.rate !== \"number\") {\n        throw new Meteor.Error(\"exchangeRateUndefined\");\n      }\n      prices[i] *= userCurrency.rate;\n\n      price = _formatPrice(price, originalPrice, prices[i],\n        currentPrice, userCurrency, i, len);\n    } catch (error) {\n      Logger.debug(\"currency error, fallback to shop currency\");\n      price = _formatPrice(price, originalPrice, prices[i],\n        currentPrice, locale.shopCurrency, i, len);\n    }\n  }\n  return price;\n}\n\nexport function formatNumber(currentPrice) {\n  const locale = Reaction.Locale.get();\n  let price = currentPrice;\n  const format = Object.assign({}, locale.currency, {\n    format: \"%v\"\n  });\n  const shopFormat = Object.assign({}, locale.shopCurrency, {\n    format: \"%v\"\n  });\n\n  if (typeof locale.currency === \"object\" && locale.currency.rate) {\n    price = currentPrice * locale.currency.rate;\n    return accounting.formatMoney(price, format);\n  }\n\n  Logger.debug(\"currency error, fallback to shop currency\");\n  return accounting.formatMoney(currentPrice, shopFormat);\n}\n\n/**\n * _formatPrice\n * private function for formatting locale currency\n * @private\n * @param  {Number} price         price\n * @param  {Number} originalPrice originalPrice\n * @param  {Number} actualPrice   actualPrice\n * @param  {Number} currentPrice  currentPrice\n * @param  {Number} currency      currency\n * @param  {Number} pos           position\n * @param  {Number} len           length\n * @return {Number}               formatted price\n */\nfunction _formatPrice(price, originalPrice, actualPrice, currentPrice, currency,\n  pos, len) {\n  // this checking for locale.shopCurrency mostly\n  if (typeof currency !== \"object\") {\n    return false;\n  }\n\n  let adjustedPrice = actualPrice;\n  let formattedPrice;\n\n  // Precision is mis-used in accounting js. Scale is the propery term for number\n  // of decimal places. Let's adjust it here so accounting.js does not break.\n  if (currency.scale !== undefined) {\n    currency.precision = currency.scale;\n  }\n\n  // If there are no decimal places, in the case of the Japanese Yen, we adjust it here.\n  if (currency.scale === 0) {\n    adjustedPrice = actualPrice * 100;\n  }\n\n  // @param {string} currency.where: If it presents - in situation then two\n  // prices in string, currency sign will be placed just outside the right price.\n  // For now it should be manually added to fixtures shop data.\n  if (typeof currency.where === \"string\" && currency.where === \"right\" &&\n    len > 1 && pos === 0) {\n    const modifiedCurrency = Object.assign({}, currency, {\n      symbol: \"\"\n    });\n    formattedPrice = accounting.formatMoney(adjustedPrice, modifiedCurrency);\n  } else {\n    // accounting api: http://openexchangerates.github.io/accounting.js/\n    formattedPrice = accounting.formatMoney(adjustedPrice, currency);\n  }\n\n  return price === 0 ? currentPrice.replace(originalPrice, formattedPrice) : price.replace(originalPrice, formattedPrice);\n}\n"]},"hash":"411189c0ff6321166019a13ee1ae12312537e123"}
