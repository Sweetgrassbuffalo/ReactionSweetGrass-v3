{"metadata":{"usedHelpers":["extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"faker","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"faker"}]},{"source":"/lib/collections","imported":["Orders","Products"],"specifiers":[{"kind":"named","imported":"Orders","local":"Orders"},{"kind":"named","imported":"Products","local":"Products"}]},{"source":"./shops","imported":["getShop"],"specifiers":[{"kind":"named","imported":"getShop","local":"getShop"}]},{"source":"./users","imported":["getUser"],"specifiers":[{"kind":"named","imported":"getUser","local":"getUser"}]},{"source":"./packages","imported":["getPkgData"],"specifiers":[{"kind":"named","imported":"getPkgData","local":"getPkgData"}]},{"source":"./accounts","imported":["getAddress"],"specifiers":[{"kind":"named","imported":"getAddress","local":"getAddress"}]},{"source":"./products","imported":["addProduct"],"specifiers":[{"kind":"named","imported":"addProduct","local":"addProduct"}]}],"exports":{"exported":["randomProcessor","randomStatus","randomMode","paymentMethod","doc","getUserId","getShopId"],"specifiers":[{"kind":"local","local":"randomProcessor","exported":"randomProcessor"},{"kind":"local","local":"randomStatus","exported":"randomStatus"},{"kind":"local","local":"randomMode","exported":"randomMode"},{"kind":"local","local":"paymentMethod","exported":"paymentMethod"},{"kind":"local","local":"doc","exported":"doc"},{"kind":"local","local":"getUserId","exported":"getUserId"},{"kind":"local","local":"getShopId","exported":"getShopId"}]}}},"options":{"filename":"/server/imports/fixtures/orders.js","filenameRelative":"/server/imports/fixtures/orders.js","inputSourceMap":{"version":3,"sources":["/server/imports/fixtures/orders.js"],"names":["faker","Orders","Products","getShop","getUser","getPkgData","getAddress","addProduct","randomProcessor","_","sample","itemIdOne","Random","id","itemIdTwo","randomStatus","randomMode","paymentMethod","doc","processor","storedCard","transactionId","status","mode","authorization","amount","commerce","price","getUserId","_id","getShopId","Factory","define","additionalField","lorem","sentence","history","documents","cartId","notes","shopId","userId","sessionId","email","internet","workflow","items","product","variant","findOne","ancestors","childVariants","find","fetch","selectedOption","choice","product2","variant2","childVariants2","selectedOption2","title","productId","quantity","variants","requiresShipping","shipping","variantId","packed","billing","address","isBillingDefault","method","paymentPackageId","paymentSettingsKey","invoice","total","subtotal","discounts","taxes","state","createdAt","Date","updatedAt","extend"],"mappings":"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","file":"/server/imports/fixtures/orders.js.map","sourcesContent":["import faker from \"faker\";\nimport { Orders, Products } from \"/lib/collections\";\nimport { getShop } from \"./shops\";\nimport { getUser } from \"./users\";\nimport { getPkgData } from \"./packages\";\nimport { getAddress } from \"./accounts\";\nimport { addProduct } from \"./products\";\n\n\n/**\n * order factory methods\n * @type {Object}\n * @summary reaction specific faker functions for providing fake order data for testing\n */\n\nexport function randomProcessor() {\n  return _.sample([\"Stripe\", \"Paypal\", \"Braintree\"]);\n}\n\nconst itemIdOne = Random.id();\nconst itemIdTwo = Random.id();\n\nexport function randomStatus() {\n  return _.sample([\n    \"created\",\n    \"approved\",\n    \"failed\",\n    \"canceled\",\n    \"expired\",\n    \"pending\",\n    \"voided\",\n    \"settled\"\n  ]);\n}\n\nexport function randomMode() {\n  return _.sample([\"authorize\", \"capture\", \"refund\", \"void\"]);\n}\n\nexport function paymentMethod(doc) {\n  return {\n    ...doc,\n    processor: doc.processor ? doc.processor : randomProcessor(),\n    storedCard: doc.storedCard ? doc.storedCard : \"4242424242424242\",\n    transactionId: doc.transactionId ? doc.transactionId : Random.id(),\n    status: doc.status ? doc.status : randomStatus(),\n    mode: doc.mode ? doc.mode : randomMode(),\n    authorization: \"auth field\",\n    amount: doc.amount ? doc.amount : faker.commerce.price()\n  };\n}\n\nexport function getUserId() {\n  return getUser()._id;\n}\n\nexport function getShopId() {\n  return getShop()._id;\n}\n\n\n/**\n * order factory\n * @summary Factory for generating reaction orders\n */\n\nexport default function () {\n  Factory.define(\"order\", Orders, {\n    // Schemas.OrderItems\n    additionalField: faker.lorem.sentence(),\n    status: faker.lorem.sentence(3),\n    history: [],\n    documents: [],\n\n    // Schemas.Order\n    cartId: Random.id(),\n    notes: [],\n\n    // Schemas.Cart\n    shopId: getShopId(),\n    userId: getUserId(),\n    sessionId: \"Session\",\n    email: faker.internet.email(),\n    workflow: {\n      status: \"new\",\n      workflow: [\n        \"coreOrderWorkflow/created\"\n      ]\n    },\n    items: function () {\n      const product = addProduct();\n      const variant = Products.findOne({ ancestors: [product._id] });\n      const childVariants = Products.find({ ancestors: [\n        product._id, variant._id\n      ] }).fetch();\n      const selectedOption = Random.choice(childVariants);\n      const product2 = addProduct();\n      const variant2 = Products.findOne({ ancestors: [product2._id] });\n      const childVariants2 = Products.find({ ancestors: [\n        product2._id, variant2._id\n      ] }).fetch();\n      const selectedOption2 = Random.choice(childVariants2);\n      return [{\n        _id: itemIdOne,\n        title: \"firstItem\",\n        shopId: product.shopId,\n        productId: product._id,\n        quantity: 1,\n        variants: selectedOption,\n        workflow: {\n          status: \"new\"\n        }\n      }, {\n        _id: itemIdTwo,\n        title: \"secondItem\",\n        shopId: product2.shopId,\n        productId: product2._id,\n        quantity: 1,\n        variants: selectedOption2,\n        workflow: {\n          status: \"new\"\n        }\n      }];\n    },\n    requiresShipping: true,\n    shipping: [{\n      items: [\n        {\n          _id: itemIdOne,\n          productId: Random.id(),\n          shopId: Random.id(),\n          variantId: Random.id(),\n          packed: false\n        },\n        {\n          _id: itemIdTwo,\n          productId: Random.id(),\n          shopId: Random.id(),\n          variantId: Random.id(),\n          packed: false\n        }\n      ]\n    }], // Shipping Schema\n    billing: [{\n      _id: Random.id(),\n      address: getAddress({ isBillingDefault: true }),\n      paymentMethod: paymentMethod({\n        method: \"credit\",\n        processor: \"Example\",\n        storedCard: \"Mastercard 2346\",\n        paymentPackageId: getPkgData(\"example-paymentmethod\") ? getPkgData(\"example-paymentmethod\")._id : \"uiwneiwknekwewe\",\n        paymentSettingsKey: \"example-paymentmethod\",\n        mode: \"authorize\",\n        status: \"created\",\n        amount: 12.45\n      }),\n      invoice: {\n        total: 12.45,\n        subtotal: 12.45,\n        discounts: 0,\n        taxes: 0.12,\n        shipping: 4.00\n      }\n    }],\n    state: \"new\",\n    createdAt: new Date,\n    updatedAt: new Date\n  });\n\n  /**\n   * authorizedApprovedPaypalOrder Factory\n   * @summary defines order factory which generates an authorized, apporved, paypal order.\n   */\n  Factory.define(\"authorizedApprovedPaypalOrder\", Orders,\n    Factory.extend(\"order\", {\n      billing: [{\n        _id: Random.id(),\n        address: getAddress({ isBillingDefault: true }),\n        paymentMethod: paymentMethod({\n          processor: \"Paypal\",\n          mode: \"authorize\",\n          status: \"approved\"\n        })\n      }]\n    }));\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/imports/fixtures/orders.js.map","sourceFileName":"/server/imports/fixtures/orders.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"orders"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  randomProcessor: function () {\n    return randomProcessor;\n  },\n  randomStatus: function () {\n    return randomStatus;\n  },\n  randomMode: function () {\n    return randomMode;\n  },\n  paymentMethod: function () {\n    return paymentMethod;\n  },\n  getUserId: function () {\n    return getUserId;\n  },\n  getShopId: function () {\n    return getShopId;\n  }\n});\nvar faker = void 0;\nmodule.importSync(\"faker\", {\n  \"default\": function (v) {\n    faker = v;\n  }\n}, 0);\nvar Orders = void 0,\n    Products = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Orders: function (v) {\n    Orders = v;\n  },\n  Products: function (v) {\n    Products = v;\n  }\n}, 1);\nvar getShop = void 0;\nmodule.importSync(\"./shops\", {\n  getShop: function (v) {\n    getShop = v;\n  }\n}, 2);\nvar getUser = void 0;\nmodule.importSync(\"./users\", {\n  getUser: function (v) {\n    getUser = v;\n  }\n}, 3);\nvar getPkgData = void 0;\nmodule.importSync(\"./packages\", {\n  getPkgData: function (v) {\n    getPkgData = v;\n  }\n}, 4);\nvar getAddress = void 0;\nmodule.importSync(\"./accounts\", {\n  getAddress: function (v) {\n    getAddress = v;\n  }\n}, 5);\nvar addProduct = void 0;\nmodule.importSync(\"./products\", {\n  addProduct: function (v) {\n    addProduct = v;\n  }\n}, 6);\n\nfunction randomProcessor() {\n  return _.sample([\"Stripe\", \"Paypal\", \"Braintree\"]);\n}\n\nvar itemIdOne = Random.id();\nvar itemIdTwo = Random.id();\n\nfunction randomStatus() {\n  return _.sample([\"created\", \"approved\", \"failed\", \"canceled\", \"expired\", \"pending\", \"voided\", \"settled\"]);\n}\n\nfunction randomMode() {\n  return _.sample([\"authorize\", \"capture\", \"refund\", \"void\"]);\n}\n\nfunction paymentMethod(doc) {\n  return (0, _extends3.default)({}, doc, {\n    processor: doc.processor ? doc.processor : randomProcessor(),\n    storedCard: doc.storedCard ? doc.storedCard : \"4242424242424242\",\n    transactionId: doc.transactionId ? doc.transactionId : Random.id(),\n    status: doc.status ? doc.status : randomStatus(),\n    mode: doc.mode ? doc.mode : randomMode(),\n    authorization: \"auth field\",\n    amount: doc.amount ? doc.amount : faker.commerce.price()\n  });\n}\n\nfunction getUserId() {\n  return getUser()._id;\n}\n\nfunction getShopId() {\n  return getShop()._id;\n}\n\nmodule.export(\"default\", exports.default = function () {\n  Factory.define(\"order\", Orders, {\n    // Schemas.OrderItems\n    additionalField: faker.lorem.sentence(),\n    status: faker.lorem.sentence(3),\n    history: [],\n    documents: [],\n    // Schemas.Order\n    cartId: Random.id(),\n    notes: [],\n    // Schemas.Cart\n    shopId: getShopId(),\n    userId: getUserId(),\n    sessionId: \"Session\",\n    email: faker.internet.email(),\n    workflow: {\n      status: \"new\",\n      workflow: [\"coreOrderWorkflow/created\"]\n    },\n    items: function () {\n      var product = addProduct();\n      var variant = Products.findOne({\n        ancestors: [product._id]\n      });\n      var childVariants = Products.find({\n        ancestors: [product._id, variant._id]\n      }).fetch();\n      var selectedOption = Random.choice(childVariants);\n      var product2 = addProduct();\n      var variant2 = Products.findOne({\n        ancestors: [product2._id]\n      });\n      var childVariants2 = Products.find({\n        ancestors: [product2._id, variant2._id]\n      }).fetch();\n      var selectedOption2 = Random.choice(childVariants2);\n      return [{\n        _id: itemIdOne,\n        title: \"firstItem\",\n        shopId: product.shopId,\n        productId: product._id,\n        quantity: 1,\n        variants: selectedOption,\n        workflow: {\n          status: \"new\"\n        }\n      }, {\n        _id: itemIdTwo,\n        title: \"secondItem\",\n        shopId: product2.shopId,\n        productId: product2._id,\n        quantity: 1,\n        variants: selectedOption2,\n        workflow: {\n          status: \"new\"\n        }\n      }];\n    },\n    requiresShipping: true,\n    shipping: [{\n      items: [{\n        _id: itemIdOne,\n        productId: Random.id(),\n        shopId: Random.id(),\n        variantId: Random.id(),\n        packed: false\n      }, {\n        _id: itemIdTwo,\n        productId: Random.id(),\n        shopId: Random.id(),\n        variantId: Random.id(),\n        packed: false\n      }]\n    }],\n    // Shipping Schema\n    billing: [{\n      _id: Random.id(),\n      address: getAddress({\n        isBillingDefault: true\n      }),\n      paymentMethod: paymentMethod({\n        method: \"credit\",\n        processor: \"Example\",\n        storedCard: \"Mastercard 2346\",\n        paymentPackageId: getPkgData(\"example-paymentmethod\") ? getPkgData(\"example-paymentmethod\")._id : \"uiwneiwknekwewe\",\n        paymentSettingsKey: \"example-paymentmethod\",\n        mode: \"authorize\",\n        status: \"created\",\n        amount: 12.45\n      }),\n      invoice: {\n        total: 12.45,\n        subtotal: 12.45,\n        discounts: 0,\n        taxes: 0.12,\n        shipping: 4.00\n      }\n    }],\n    state: \"new\",\n    createdAt: new Date(),\n    updatedAt: new Date()\n  }); /**\n       * authorizedApprovedPaypalOrder Factory\n       * @summary defines order factory which generates an authorized, apporved, paypal order.\n       */\n  Factory.define(\"authorizedApprovedPaypalOrder\", Orders, Factory.extend(\"order\", {\n    billing: [{\n      _id: Random.id(),\n      address: getAddress({\n        isBillingDefault: true\n      }),\n      paymentMethod: paymentMethod({\n        processor: \"Paypal\",\n        mode: \"authorize\",\n        status: \"approved\"\n      })\n    }]\n  }));\n});","map":{"version":3,"sources":["/server/imports/fixtures/orders.js"],"names":["faker","Orders","Products","getShop","getUser","getPkgData","getAddress","addProduct","randomProcessor","_","sample","itemIdOne","Random","id","itemIdTwo","randomStatus","randomMode","paymentMethod","doc","processor","storedCard","transactionId","status","mode","authorization","amount","commerce","price","getUserId","_id","getShopId","Factory","define","additionalField","lorem","sentence","history","documents","cartId","notes","shopId","userId","sessionId","email","internet","workflow","items","product","variant","findOne","ancestors","childVariants","find","fetch","selectedOption","choice","product2","variant2","childVariants2","selectedOption2","title","productId","quantity","variants","requiresShipping","shipping","variantId","packed","billing","address","isBillingDefault","method","paymentPackageId","paymentSettingsKey","invoice","total","subtotal","discounts","taxes","state","createdAt","Date","updatedAt","extend"],"mappings":"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","file":"/server/imports/fixtures/orders.js.map","sourcesContent":["import faker from \"faker\";\nimport { Orders, Products } from \"/lib/collections\";\nimport { getShop } from \"./shops\";\nimport { getUser } from \"./users\";\nimport { getPkgData } from \"./packages\";\nimport { getAddress } from \"./accounts\";\nimport { addProduct } from \"./products\";\n\n\n/**\n * order factory methods\n * @type {Object}\n * @summary reaction specific faker functions for providing fake order data for testing\n */\n\nexport function randomProcessor() {\n  return _.sample([\"Stripe\", \"Paypal\", \"Braintree\"]);\n}\n\nconst itemIdOne = Random.id();\nconst itemIdTwo = Random.id();\n\nexport function randomStatus() {\n  return _.sample([\n    \"created\",\n    \"approved\",\n    \"failed\",\n    \"canceled\",\n    \"expired\",\n    \"pending\",\n    \"voided\",\n    \"settled\"\n  ]);\n}\n\nexport function randomMode() {\n  return _.sample([\"authorize\", \"capture\", \"refund\", \"void\"]);\n}\n\nexport function paymentMethod(doc) {\n  return {\n    ...doc,\n    processor: doc.processor ? doc.processor : randomProcessor(),\n    storedCard: doc.storedCard ? doc.storedCard : \"4242424242424242\",\n    transactionId: doc.transactionId ? doc.transactionId : Random.id(),\n    status: doc.status ? doc.status : randomStatus(),\n    mode: doc.mode ? doc.mode : randomMode(),\n    authorization: \"auth field\",\n    amount: doc.amount ? doc.amount : faker.commerce.price()\n  };\n}\n\nexport function getUserId() {\n  return getUser()._id;\n}\n\nexport function getShopId() {\n  return getShop()._id;\n}\n\n\n/**\n * order factory\n * @summary Factory for generating reaction orders\n */\n\nexport default function () {\n  Factory.define(\"order\", Orders, {\n    // Schemas.OrderItems\n    additionalField: faker.lorem.sentence(),\n    status: faker.lorem.sentence(3),\n    history: [],\n    documents: [],\n\n    // Schemas.Order\n    cartId: Random.id(),\n    notes: [],\n\n    // Schemas.Cart\n    shopId: getShopId(),\n    userId: getUserId(),\n    sessionId: \"Session\",\n    email: faker.internet.email(),\n    workflow: {\n      status: \"new\",\n      workflow: [\n        \"coreOrderWorkflow/created\"\n      ]\n    },\n    items: function () {\n      const product = addProduct();\n      const variant = Products.findOne({ ancestors: [product._id] });\n      const childVariants = Products.find({ ancestors: [\n        product._id, variant._id\n      ] }).fetch();\n      const selectedOption = Random.choice(childVariants);\n      const product2 = addProduct();\n      const variant2 = Products.findOne({ ancestors: [product2._id] });\n      const childVariants2 = Products.find({ ancestors: [\n        product2._id, variant2._id\n      ] }).fetch();\n      const selectedOption2 = Random.choice(childVariants2);\n      return [{\n        _id: itemIdOne,\n        title: \"firstItem\",\n        shopId: product.shopId,\n        productId: product._id,\n        quantity: 1,\n        variants: selectedOption,\n        workflow: {\n          status: \"new\"\n        }\n      }, {\n        _id: itemIdTwo,\n        title: \"secondItem\",\n        shopId: product2.shopId,\n        productId: product2._id,\n        quantity: 1,\n        variants: selectedOption2,\n        workflow: {\n          status: \"new\"\n        }\n      }];\n    },\n    requiresShipping: true,\n    shipping: [{\n      items: [\n        {\n          _id: itemIdOne,\n          productId: Random.id(),\n          shopId: Random.id(),\n          variantId: Random.id(),\n          packed: false\n        },\n        {\n          _id: itemIdTwo,\n          productId: Random.id(),\n          shopId: Random.id(),\n          variantId: Random.id(),\n          packed: false\n        }\n      ]\n    }], // Shipping Schema\n    billing: [{\n      _id: Random.id(),\n      address: getAddress({ isBillingDefault: true }),\n      paymentMethod: paymentMethod({\n        method: \"credit\",\n        processor: \"Example\",\n        storedCard: \"Mastercard 2346\",\n        paymentPackageId: getPkgData(\"example-paymentmethod\") ? getPkgData(\"example-paymentmethod\")._id : \"uiwneiwknekwewe\",\n        paymentSettingsKey: \"example-paymentmethod\",\n        mode: \"authorize\",\n        status: \"created\",\n        amount: 12.45\n      }),\n      invoice: {\n        total: 12.45,\n        subtotal: 12.45,\n        discounts: 0,\n        taxes: 0.12,\n        shipping: 4.00\n      }\n    }],\n    state: \"new\",\n    createdAt: new Date,\n    updatedAt: new Date\n  });\n\n  /**\n   * authorizedApprovedPaypalOrder Factory\n   * @summary defines order factory which generates an authorized, apporved, paypal order.\n   */\n  Factory.define(\"authorizedApprovedPaypalOrder\", Orders,\n    Factory.extend(\"order\", {\n      billing: [{\n        _id: Random.id(),\n        address: getAddress({ isBillingDefault: true }),\n        paymentMethod: paymentMethod({\n          processor: \"Paypal\",\n          mode: \"authorize\",\n          status: \"approved\"\n        })\n      }]\n    }));\n}\n"]},"hash":"cc0e8bf204cd566111b242a4b1406b2265f8ce5c"}
