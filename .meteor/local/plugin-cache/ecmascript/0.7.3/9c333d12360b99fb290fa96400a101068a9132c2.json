{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"/server/api","imported":["Reaction","Logger"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"/lib/collections","imported":["Notifications","Packages"],"specifiers":[{"kind":"named","imported":"Notifications","local":"Notifications"},{"kind":"named","imported":"Packages","local":"Packages"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/notifications/server/methods/notifications.js","filenameRelative":"/imports/plugins/included/notifications/server/methods/notifications.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/notifications/server/methods/notifications.js"],"names":["Meteor","check","Match","Reaction","Logger","Notifications","Packages","methods","userId","type","url","sms","details","String","Boolean","OptionalOrNull","values","types","orderCancelled","newOrder","forAdmin","orderDelivered","orderAccepted","orderShipped","to","message","hasDetails","result","findOne","name","shopId","getShopId","enabled","call","error","warn","debug","insert","id","update","_id","$set","status","remove"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAO,AAAa,AAC7B,AAAS,AAAU,AAAc,AACjC,AAAS,AAAe,AAAgB,AAExC;AAGA,AAAO,AAAQ,AACb;;;AAUA,AAAqB,AAAU,AAAQ,AAAM,AAAK,AAAK,AAAS,AAC9D,AAAM,AAAQ,AACd,AAAM,AAAM,AACZ;;;;;;;;;IAAA,AAAM,AAAK,gEACX;UAAA,AAAM,QAAN,AAAe,AAAM,AAAe,AACpC;UAAA,AAAM,AAAK,MAAX,AAEA;UAAM,KAAN,AAAe,AACf;UAAM,AAAQ,8BACZ;eADY,AACI,AAChB,AAAU,AACV;QAAU,SAHE,AAIZ;;AACe,sBALH,AAMZ;gBANF,AAAc,AAME;;sBAGhB;AAAI,AAAU,qBAAd,AAAI,AAAkB,AAAK,AACzB;AAAA,AAAO,oBAAP,AAAc,AACd,AAAO,AAAK,AACZ,AAAO,AAAM,AACb;AAbY,AAII,AAChB;;QAQO,UAAP,AAAiB,QAAM,KAAvB,AAAiB,AACjB;aAAO,OAAP,AAAoB;kBACpB;AAAI,aAAJ,MAAa,AACX;aAAO,UAAP,AAAoB,MAApB,AACA;aAAA,AAAO,AAAU,aAAjB,AACD;;mBACF;;yBAED;AAAA,AAAI,AAAK,AACP;AAAM,AAAS,AAAS,AAAQ,AAAE,AAAM,AAAgB;;aAAxB,AAAgC,AAAS;AAAzE,AAAe;;;;;oCACf;AAAI,oBAAU,AAAO,YAArB,AAA8B,+DAC5B;cAAA,AAAO,AAAK,OAAZ,AAAwB,AAAO,AAAS,AAAQ,AAAS,AAAa,AAAC,AAAU,AAC/E;AAAI,mBAAJ,AAAW,+CACT;AAAA,AAAO,AAAK,AAA0C,AACvD;AACF;AAJD,aADF,AAMC;AAAM,qBACL;AAAA,AAAO,AAAM,AACd;AACF;;;gCACD;AAAA,AAAO,AAAO,AAA0B,AAAO,AAC/C,AAAO,AAAc,AAAO,AAC7B;AAtDY,AAwDb;;;;;KAMA,wCAA8B,AAAC,IAAO,AACpC;UAAA,AAAM,IAAN,AAAU,AAEV,AAAO,AAAc,AAAO,AAAE;;;KAAK;AAAM;AACjC,gBADiC,AACjC,AACJ,AAAQ;AADV;AADK,AAAqB;AAjEjB,AAiEX,AAAO,AAKR,AAED;AAMA,AAAuB,AAAC,AAAO,AAC7B;;;;;KAAA,AAAM,AAAI,qCAEV;UAAO,IAAA,AAAc,AAAO,AAAE,AAAK;AAAnC,AAAO;WACR;;AAlFH,AAAe","file":"/imports/plugins/included/notifications/server/methods/notifications.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { Notifications, Packages } from \"/lib/collections\";\n\n/**\n * Reaction Notification methods\n */\nMeteor.methods({\n  /**\n  * notification/send\n  * @summary This send a notification to a user\n  * @param {String} userId - The user\n  * @param {String} type - The type of Notification\n  * @param {String} url - url link\n  * @param {Boolean} sms - sms enabled check.\n  * @param {String} details - details of the Notification\n  * @return {Object} returns result\n  */\n  \"notification/send\": function (userId, type, url, sms, details) {\n    check(userId, String);\n    check(type, String);\n    check(sms, Boolean);\n    check(details, Match.OptionalOrNull(String));\n    check(url, String);\n\n    const values = {};\n    const types = {\n      orderCancelled: \"Your order was canceled.\",\n      newOrder: \"Your order is being processed.\",\n      forAdmin: \"You have a new order.\",\n      orderDelivered: \"Your order has been delivered.\",\n      orderAccepted: \"Your order has been accepted.\",\n      orderShipped: \"Your order has been shipped.\"\n    };\n\n    if (userId && type && url) {\n      values.type = type;\n      values.to = userId;\n      values.url = url;\n      values.message = types[type];\n      values.hasDetails = false;\n      if (details) {\n        values.hasDetails = true;\n        values.details = details;\n      }\n    }\n\n    if (sms) {\n      const result = Packages.findOne({ name: \"reaction-sms\", shopId: Reaction.getShopId() });\n      if (result && result.enabled) {\n        Meteor.call(\"sms/send\", values.message, userId, Reaction.getShopId(), (error) => {\n          if (error) {\n            Logger.warn(\"Error: error occured while sending sms\", error);\n          }\n        });\n      } else {\n        Logger.debug(\"Sms is not enabled\");\n      }\n    }\n    Logger.debug(`Sending notification to ${userId}`);\n    return Notifications.insert(values);\n  },\n\n  /**\n   * notification/markOneAsRead\n   * @summary This marks all user's notification as ready\n   * @param {String} id - The notification id\n   * @return {Object} returns cursor\n   */\n  \"notification/markOneAsRead\": (id) => {\n    check(id, String);\n\n    return Notifications.update({ _id: id }, {\n      $set: {\n        status: \"read\"\n      }\n    });\n  },\n\n  /**\n   * notification/delete\n   * @summary This deletes a notification\n   * @param {String} id - The notification id\n   * @return {Object} return cursor\n   */\n  \"notification/delete\": (id) => {\n    check(id, String);\n\n    return Notifications.remove({ _id: id });\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/notifications/server/methods/notifications.js.map","sourceFileName":"/imports/plugins/included/notifications/server/methods/notifications.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"notifications"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 1);\nvar Reaction = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 2);\nvar Notifications = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Notifications: function (v) {\n    Notifications = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 3);\n/**\n * Reaction Notification methods\n */Meteor.methods({\n  /**\n  * notification/send\n  * @summary This send a notification to a user\n  * @param {String} userId - The user\n  * @param {String} type - The type of Notification\n  * @param {String} url - url link\n  * @param {Boolean} sms - sms enabled check.\n  * @param {String} details - details of the Notification\n  * @return {Object} returns result\n  */\"notification/send\": function (userId, type, url, sms, details) {\n    check(userId, String);\n    check(type, String);\n    check(sms, Boolean);\n    check(details, Match.OptionalOrNull(String));\n    check(url, String);\n    var values = {};\n    var types = {\n      orderCancelled: \"Your order was canceled.\",\n      newOrder: \"Your order is being processed.\",\n      forAdmin: \"You have a new order.\",\n      orderDelivered: \"Your order has been delivered.\",\n      orderAccepted: \"Your order has been accepted.\",\n      orderShipped: \"Your order has been shipped.\"\n    };\n\n    if (userId && type && url) {\n      values.type = type;\n      values.to = userId;\n      values.url = url;\n      values.message = types[type];\n      values.hasDetails = false;\n\n      if (details) {\n        values.hasDetails = true;\n        values.details = details;\n      }\n    }\n\n    if (sms) {\n      var result = Packages.findOne({\n        name: \"reaction-sms\",\n        shopId: Reaction.getShopId()\n      });\n\n      if (result && result.enabled) {\n        Meteor.call(\"sms/send\", values.message, userId, Reaction.getShopId(), function (error) {\n          if (error) {\n            Logger.warn(\"Error: error occured while sending sms\", error);\n          }\n        });\n      } else {\n        Logger.debug(\"Sms is not enabled\");\n      }\n    }\n\n    Logger.debug(\"Sending notification to \" + userId);\n    return Notifications.insert(values);\n  },\n  /**\n   * notification/markOneAsRead\n   * @summary This marks all user's notification as ready\n   * @param {String} id - The notification id\n   * @return {Object} returns cursor\n   */\"notification/markOneAsRead\": function (id) {\n    check(id, String);\n    return Notifications.update({\n      _id: id\n    }, {\n      $set: {\n        status: \"read\"\n      }\n    });\n  },\n  /**\n   * notification/delete\n   * @summary This deletes a notification\n   * @param {String} id - The notification id\n   * @return {Object} return cursor\n   */\"notification/delete\": function (id) {\n    check(id, String);\n    return Notifications.remove({\n      _id: id\n    });\n  }\n});","map":{"version":3,"sources":["/imports/plugins/included/notifications/server/methods/notifications.js"],"names":["Meteor","check","Match","Reaction","Logger","Notifications","Packages","methods","userId","type","url","sms","details","String","Boolean","OptionalOrNull","values","types","orderCancelled","newOrder","forAdmin","orderDelivered","orderAccepted","orderShipped","to","message","hasDetails","result","findOne","name","shopId","getShopId","enabled","call","error","warn","debug","insert","id","update","_id","$set","status","remove"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAO,AAAa,AAC7B,AAAS,AAAU,AAAc,AACjC,AAAS,AAAe,AAAgB,AAExC;AAGA,AAAO,AAAQ,AACb;;;AAUA,AAAqB,AAAU,AAAQ,AAAM,AAAK,AAAK,AAAS,AAC9D,AAAM,AAAQ,AACd,AAAM,AAAM,AACZ;;;;;;;;;IAAA,AAAM,AAAK,gEACX;UAAA,AAAM,QAAN,AAAe,AAAM,AAAe,AACpC;UAAA,AAAM,AAAK,MAAX,AAEA;UAAM,KAAN,AAAe,AACf;UAAM,AAAQ,8BACZ;eADY,AACI,AAChB,AAAU,AACV;QAAU,SAHE,AAIZ;;AACe,sBALH,AAMZ;gBANF,AAAc,AAME;;sBAGhB;AAAI,AAAU,qBAAd,AAAI,AAAkB,AAAK,AACzB;AAAA,AAAO,oBAAP,AAAc,AACd,AAAO,AAAK,AACZ,AAAO,AAAM,AACb;AAbY,AAII,AAChB;;QAQO,UAAP,AAAiB,QAAM,KAAvB,AAAiB,AACjB;aAAO,OAAP,AAAoB;kBACpB;AAAI,aAAJ,MAAa,AACX;aAAO,UAAP,AAAoB,MAApB,AACA;aAAA,AAAO,AAAU,aAAjB,AACD;;mBACF;;yBAED;AAAA,AAAI,AAAK,AACP;AAAM,AAAS,AAAS,AAAQ,AAAE,AAAM,AAAgB;;aAAxB,AAAgC,AAAS;AAAzE,AAAe;;;;;oCACf;AAAI,oBAAU,AAAO,YAArB,AAA8B,+DAC5B;cAAA,AAAO,AAAK,OAAZ,AAAwB,AAAO,AAAS,AAAQ,AAAS,AAAa,AAAC,AAAU,AAC/E;AAAI,mBAAJ,AAAW,+CACT;AAAA,AAAO,AAAK,AAA0C,AACvD;AACF;AAJD,aADF,AAMC;AAAM,qBACL;AAAA,AAAO,AAAM,AACd;AACF;;;gCACD;AAAA,AAAO,AAAO,AAA0B,AAAO,AAC/C,AAAO,AAAc,AAAO,AAC7B;AAtDY,AAwDb;;;;;KAMA,wCAA8B,AAAC,IAAO,AACpC;UAAA,AAAM,IAAN,AAAU,AAEV,AAAO,AAAc,AAAO,AAAE;;;KAAK;AAAM;AACjC,gBADiC,AACjC,AACJ,AAAQ;AADV;AADK,AAAqB;AAjEjB,AAiEX,AAAO,AAKR,AAED;AAMA,AAAuB,AAAC,AAAO,AAC7B;;;;;KAAA,AAAM,AAAI,qCAEV;UAAO,IAAA,AAAc,AAAO,AAAE,AAAK;AAAnC,AAAO;WACR;;AAlFH,AAAe","file":"/imports/plugins/included/notifications/server/methods/notifications.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Reaction, Logger } from \"/server/api\";\nimport { Notifications, Packages } from \"/lib/collections\";\n\n/**\n * Reaction Notification methods\n */\nMeteor.methods({\n  /**\n  * notification/send\n  * @summary This send a notification to a user\n  * @param {String} userId - The user\n  * @param {String} type - The type of Notification\n  * @param {String} url - url link\n  * @param {Boolean} sms - sms enabled check.\n  * @param {String} details - details of the Notification\n  * @return {Object} returns result\n  */\n  \"notification/send\": function (userId, type, url, sms, details) {\n    check(userId, String);\n    check(type, String);\n    check(sms, Boolean);\n    check(details, Match.OptionalOrNull(String));\n    check(url, String);\n\n    const values = {};\n    const types = {\n      orderCancelled: \"Your order was canceled.\",\n      newOrder: \"Your order is being processed.\",\n      forAdmin: \"You have a new order.\",\n      orderDelivered: \"Your order has been delivered.\",\n      orderAccepted: \"Your order has been accepted.\",\n      orderShipped: \"Your order has been shipped.\"\n    };\n\n    if (userId && type && url) {\n      values.type = type;\n      values.to = userId;\n      values.url = url;\n      values.message = types[type];\n      values.hasDetails = false;\n      if (details) {\n        values.hasDetails = true;\n        values.details = details;\n      }\n    }\n\n    if (sms) {\n      const result = Packages.findOne({ name: \"reaction-sms\", shopId: Reaction.getShopId() });\n      if (result && result.enabled) {\n        Meteor.call(\"sms/send\", values.message, userId, Reaction.getShopId(), (error) => {\n          if (error) {\n            Logger.warn(\"Error: error occured while sending sms\", error);\n          }\n        });\n      } else {\n        Logger.debug(\"Sms is not enabled\");\n      }\n    }\n    Logger.debug(`Sending notification to ${userId}`);\n    return Notifications.insert(values);\n  },\n\n  /**\n   * notification/markOneAsRead\n   * @summary This marks all user's notification as ready\n   * @param {String} id - The notification id\n   * @return {Object} returns cursor\n   */\n  \"notification/markOneAsRead\": (id) => {\n    check(id, String);\n\n    return Notifications.update({ _id: id }, {\n      $set: {\n        status: \"read\"\n      }\n    });\n  },\n\n  /**\n   * notification/delete\n   * @summary This deletes a notification\n   * @param {String} id - The notification id\n   * @return {Object} return cursor\n   */\n  \"notification/delete\": (id) => {\n    check(id, String);\n\n    return Notifications.remove({ _id: id });\n  }\n});\n"]},"hash":"9c333d12360b99fb290fa96400a101068a9132c2"}
