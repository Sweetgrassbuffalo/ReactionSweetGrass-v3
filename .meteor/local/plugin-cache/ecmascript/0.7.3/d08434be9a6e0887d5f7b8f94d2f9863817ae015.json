{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/client/modules/accounts/helpers","imported":["LoginFormSharedHelpers"],"specifiers":[{"kind":"named","imported":"LoginFormSharedHelpers","local":"LoginFormSharedHelpers"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/accounts/templates/updatePassword/updatePassword.js","filenameRelative":"/client/modules/accounts/templates/updatePassword/updatePassword.js","inputSourceMap":{"version":3,"sources":["/client/modules/accounts/templates/updatePassword/updatePassword.js"],"names":["Accounts","Template","i18next","LoginFormSharedHelpers","onResetPasswordLink","token","done","Blaze","renderWithData","loginFormUpdatePasswordOverlay","callback","$","get","onEnrollmentLink","onEmailVerificationLink","verifyEmail","onCreated","template","instance","uniqueId","Random","id","formMessages","ReactiveVar","helpers","events","event","remove","view","preventDefault","stopPropagation","passwordInput","password","val","trim","validatedPassword","LoginFormValidation","templateInstance","errors","set","isEmptyObject","resetPassword","data","error","alerts","loginFormChangePassword","oldPasswordInput","oldPassword","validatedOldPassword","validationLevel","changePassword","info","reason","t"],"mappings":"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","file":"/client/modules/accounts/templates/updatePassword/updatePassword.js.map","sourcesContent":["import { Accounts } from \"meteor/accounts-base\";\nimport { Template } from \"meteor/templating\";\nimport { i18next } from \"/client/api\";\nimport { LoginFormSharedHelpers } from \"/client/modules/accounts/helpers\";\n\n/**\n * Accounts Event: onResetPasswordLink When a user uses a password reset link\n */\nAccounts.onResetPasswordLink((token, done) => {\n  Blaze.renderWithData(Template.loginFormUpdatePasswordOverlay, {\n    token: token,\n    callback: done\n  }, $(\"body\").get(0));\n});\n\n/**\n * Accounts Event: onEnrollmentLink When a user uses an enrollment link\n */\nAccounts.onEnrollmentLink((token, done) => {\n  Blaze.renderWithData(Template.loginFormUpdatePasswordOverlay, {\n    token: token,\n    callback: done\n  }, $(\"body\").get(0));\n});\n\n/**\n * Accounts Event: onEmailVerificationLink When a user uses an verification link\n */\nAccounts.onEmailVerificationLink(function (token, done) {\n  Accounts.verifyEmail(token);\n  done();\n});\n\n// ----------------------------------------------------------------------------\n\n/**\n * onCreated: Login Form Update Password Overlay\n */\nTemplate.loginFormUpdatePasswordOverlay.onCreated(() => {\n  const template = Template.instance();\n\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n});\n\n/**\n * Helpers: Login Form Update Password Overlay\n */\nTemplate.loginFormUpdatePasswordOverlay.helpers(LoginFormSharedHelpers);\n\n/**\n * Events: Login Form Update Password Overlay\n */\nTemplate.loginFormUpdatePasswordOverlay.events({\n\n  /**\n   * Close modal\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\n  \"click .close, click .cancel\": (event, template) => {\n    Blaze.remove(template.view);\n  },\n\n  /**\n   * Submit form within modal - onSubmit reset password if validation is successful\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\n  \"submit form\": (event, template) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const passwordInput = template.$(\".login-input--password\");\n    const password = passwordInput.val().trim();\n    const validatedPassword = LoginFormValidation.password(password);\n\n    const templateInstance = Template.instance();\n    const errors = {};\n\n    templateInstance.formMessages.set({});\n\n    if (validatedPassword !== true) {\n      errors.password = validatedPassword;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      });\n      // prevent password update\n      return;\n    }\n\n    Accounts.resetPassword(template.data.token, password, (error) => {\n      if (error) {\n        // Show some error message\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {\n        // Close dropdown or navigate to page\n        template.data.callback();\n\n        Blaze.remove(template.view);\n      }\n    });\n  }\n});\n\n// ----------------------------------------------------------------------------\n\n/**\n * onCreated: Login Form Change Password\n */\nTemplate.loginFormChangePassword.onCreated(() => {\n  const template = Template.instance();\n\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n});\n\n/**\n * Helpers: Login Form Change Password\n */\nTemplate.loginFormChangePassword.helpers(LoginFormSharedHelpers);\n\n/**\n * Events: Login Form Change Password\n */\nTemplate.loginFormChangePassword.events({\n\n  /**\n   * Submit form for password update\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\n  \"submit form\": function (event, template) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const oldPasswordInput = template.$(\".login-input--oldPassword\");\n    const passwordInput = template.$(\".login-input--password\");\n\n    const oldPassword = oldPasswordInput.val().trim();\n    const password = passwordInput.val().trim();\n\n    // We only check if it exists, just incase we\"ve change the password strength and want the\n    // user to have an oppurtinity to update to a stronger password\n    const validatedOldPassword = LoginFormValidation.password(password, { validationLevel: \"exists\" });\n    const validatedPassword = LoginFormValidation.password(password);\n\n    const templateInstance = Template.instance();\n    const errors = {};\n\n    templateInstance.formMessages.set({});\n\n\n    if (validatedOldPassword !== true) {\n      errors.oldPassword = validatedOldPassword;\n    }\n\n    if (validatedPassword !== true) {\n      errors.password = validatedPassword;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      });\n      // prevent password update\n      return;\n    }\n\n    Accounts.changePassword(oldPassword, password, (error) => {\n      if (error) {\n        // Show some error message\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {\n        // // Close dropdown or navigate to page\n        templateInstance.formMessages.set({\n          info: [{\n            reason: i18next.t(\"accountsUI.info.passwordChanged\")\n          }]\n        });\n      }\n    });\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/accounts/templates/updatePassword/updatePassword.js.map","sourceFileName":"/client/modules/accounts/templates/updatePassword/updatePassword.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"updatePassword"},"ignored":false,"code":"var Accounts = void 0;\nmodule.importSync(\"meteor/accounts-base\", {\n  Accounts: function (v) {\n    Accounts = v;\n  }\n}, 0);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 1);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 2);\nvar LoginFormSharedHelpers = void 0;\nmodule.importSync(\"/client/modules/accounts/helpers\", {\n  LoginFormSharedHelpers: function (v) {\n    LoginFormSharedHelpers = v;\n  }\n}, 3);\n/**\n * Accounts Event: onResetPasswordLink When a user uses a password reset link\n */Accounts.onResetPasswordLink(function (token, done) {\n  Blaze.renderWithData(Template.loginFormUpdatePasswordOverlay, {\n    token: token,\n    callback: done\n  }, $(\"body\").get(0));\n}); /**\n     * Accounts Event: onEnrollmentLink When a user uses an enrollment link\n     */\nAccounts.onEnrollmentLink(function (token, done) {\n  Blaze.renderWithData(Template.loginFormUpdatePasswordOverlay, {\n    token: token,\n    callback: done\n  }, $(\"body\").get(0));\n}); /**\n     * Accounts Event: onEmailVerificationLink When a user uses an verification link\n     */\nAccounts.onEmailVerificationLink(function (token, done) {\n  Accounts.verifyEmail(token);\n  done();\n}); // ----------------------------------------------------------------------------\n/**\n * onCreated: Login Form Update Password Overlay\n */\nTemplate.loginFormUpdatePasswordOverlay.onCreated(function () {\n  var template = Template.instance();\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n}); /**\n     * Helpers: Login Form Update Password Overlay\n     */\nTemplate.loginFormUpdatePasswordOverlay.helpers(LoginFormSharedHelpers); /**\n                                                                          * Events: Login Form Update Password Overlay\n                                                                          */\nTemplate.loginFormUpdatePasswordOverlay.events({\n  /**\n   * Close modal\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\"click .close, click .cancel\": function (event, template) {\n    Blaze.remove(template.view);\n  },\n  /**\n   * Submit form within modal - onSubmit reset password if validation is successful\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\"submit form\": function (event, template) {\n    event.preventDefault();\n    event.stopPropagation();\n    var passwordInput = template.$(\".login-input--password\");\n    var password = passwordInput.val().trim();\n    var validatedPassword = LoginFormValidation.password(password);\n    var templateInstance = Template.instance();\n    var errors = {};\n    templateInstance.formMessages.set({});\n\n    if (validatedPassword !== true) {\n      errors.password = validatedPassword;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      }); // prevent password update\n\n      return;\n    }\n\n    Accounts.resetPassword(template.data.token, password, function (error) {\n      if (error) {\n        // Show some error message\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {\n        // Close dropdown or navigate to page\n        template.data.callback();\n        Blaze.remove(template.view);\n      }\n    });\n  }\n}); // ----------------------------------------------------------------------------\n/**\n * onCreated: Login Form Change Password\n */\nTemplate.loginFormChangePassword.onCreated(function () {\n  var template = Template.instance();\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n}); /**\n     * Helpers: Login Form Change Password\n     */\nTemplate.loginFormChangePassword.helpers(LoginFormSharedHelpers); /**\n                                                                   * Events: Login Form Change Password\n                                                                   */\nTemplate.loginFormChangePassword.events({\n  /**\n   * Submit form for password update\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\"submit form\": function (event, template) {\n    event.preventDefault();\n    event.stopPropagation();\n    var oldPasswordInput = template.$(\".login-input--oldPassword\");\n    var passwordInput = template.$(\".login-input--password\");\n    var oldPassword = oldPasswordInput.val().trim();\n    var password = passwordInput.val().trim(); // We only check if it exists, just incase we\"ve change the password strength and want the\n    // user to have an oppurtinity to update to a stronger password\n\n    var validatedOldPassword = LoginFormValidation.password(password, {\n      validationLevel: \"exists\"\n    });\n    var validatedPassword = LoginFormValidation.password(password);\n    var templateInstance = Template.instance();\n    var errors = {};\n    templateInstance.formMessages.set({});\n\n    if (validatedOldPassword !== true) {\n      errors.oldPassword = validatedOldPassword;\n    }\n\n    if (validatedPassword !== true) {\n      errors.password = validatedPassword;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      }); // prevent password update\n\n      return;\n    }\n\n    Accounts.changePassword(oldPassword, password, function (error) {\n      if (error) {\n        // Show some error message\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {\n        // // Close dropdown or navigate to page\n        templateInstance.formMessages.set({\n          info: [{\n            reason: i18next.t(\"accountsUI.info.passwordChanged\")\n          }]\n        });\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/client/modules/accounts/templates/updatePassword/updatePassword.js"],"names":["Accounts","Template","i18next","LoginFormSharedHelpers","onResetPasswordLink","token","done","Blaze","renderWithData","loginFormUpdatePasswordOverlay","callback","$","get","onEnrollmentLink","onEmailVerificationLink","verifyEmail","onCreated","template","instance","uniqueId","Random","id","formMessages","ReactiveVar","helpers","events","event","remove","view","preventDefault","stopPropagation","passwordInput","password","val","trim","validatedPassword","LoginFormValidation","templateInstance","errors","set","isEmptyObject","resetPassword","data","error","alerts","loginFormChangePassword","oldPasswordInput","oldPassword","validatedOldPassword","validationLevel","changePassword","info","reason","t"],"mappings":"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","file":"/client/modules/accounts/templates/updatePassword/updatePassword.js.map","sourcesContent":["import { Accounts } from \"meteor/accounts-base\";\nimport { Template } from \"meteor/templating\";\nimport { i18next } from \"/client/api\";\nimport { LoginFormSharedHelpers } from \"/client/modules/accounts/helpers\";\n\n/**\n * Accounts Event: onResetPasswordLink When a user uses a password reset link\n */\nAccounts.onResetPasswordLink((token, done) => {\n  Blaze.renderWithData(Template.loginFormUpdatePasswordOverlay, {\n    token: token,\n    callback: done\n  }, $(\"body\").get(0));\n});\n\n/**\n * Accounts Event: onEnrollmentLink When a user uses an enrollment link\n */\nAccounts.onEnrollmentLink((token, done) => {\n  Blaze.renderWithData(Template.loginFormUpdatePasswordOverlay, {\n    token: token,\n    callback: done\n  }, $(\"body\").get(0));\n});\n\n/**\n * Accounts Event: onEmailVerificationLink When a user uses an verification link\n */\nAccounts.onEmailVerificationLink(function (token, done) {\n  Accounts.verifyEmail(token);\n  done();\n});\n\n// ----------------------------------------------------------------------------\n\n/**\n * onCreated: Login Form Update Password Overlay\n */\nTemplate.loginFormUpdatePasswordOverlay.onCreated(() => {\n  const template = Template.instance();\n\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n});\n\n/**\n * Helpers: Login Form Update Password Overlay\n */\nTemplate.loginFormUpdatePasswordOverlay.helpers(LoginFormSharedHelpers);\n\n/**\n * Events: Login Form Update Password Overlay\n */\nTemplate.loginFormUpdatePasswordOverlay.events({\n\n  /**\n   * Close modal\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\n  \"click .close, click .cancel\": (event, template) => {\n    Blaze.remove(template.view);\n  },\n\n  /**\n   * Submit form within modal - onSubmit reset password if validation is successful\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\n  \"submit form\": (event, template) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const passwordInput = template.$(\".login-input--password\");\n    const password = passwordInput.val().trim();\n    const validatedPassword = LoginFormValidation.password(password);\n\n    const templateInstance = Template.instance();\n    const errors = {};\n\n    templateInstance.formMessages.set({});\n\n    if (validatedPassword !== true) {\n      errors.password = validatedPassword;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      });\n      // prevent password update\n      return;\n    }\n\n    Accounts.resetPassword(template.data.token, password, (error) => {\n      if (error) {\n        // Show some error message\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {\n        // Close dropdown or navigate to page\n        template.data.callback();\n\n        Blaze.remove(template.view);\n      }\n    });\n  }\n});\n\n// ----------------------------------------------------------------------------\n\n/**\n * onCreated: Login Form Change Password\n */\nTemplate.loginFormChangePassword.onCreated(() => {\n  const template = Template.instance();\n\n  template.uniqueId = Random.id();\n  template.formMessages = new ReactiveVar({});\n});\n\n/**\n * Helpers: Login Form Change Password\n */\nTemplate.loginFormChangePassword.helpers(LoginFormSharedHelpers);\n\n/**\n * Events: Login Form Change Password\n */\nTemplate.loginFormChangePassword.events({\n\n  /**\n   * Submit form for password update\n   * @param  {Event} event - jQuery Event\n   * @param  {Template} template - Blaze Template\n   * @return {void}\n   */\n  \"submit form\": function (event, template) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const oldPasswordInput = template.$(\".login-input--oldPassword\");\n    const passwordInput = template.$(\".login-input--password\");\n\n    const oldPassword = oldPasswordInput.val().trim();\n    const password = passwordInput.val().trim();\n\n    // We only check if it exists, just incase we\"ve change the password strength and want the\n    // user to have an oppurtinity to update to a stronger password\n    const validatedOldPassword = LoginFormValidation.password(password, { validationLevel: \"exists\" });\n    const validatedPassword = LoginFormValidation.password(password);\n\n    const templateInstance = Template.instance();\n    const errors = {};\n\n    templateInstance.formMessages.set({});\n\n\n    if (validatedOldPassword !== true) {\n      errors.oldPassword = validatedOldPassword;\n    }\n\n    if (validatedPassword !== true) {\n      errors.password = validatedPassword;\n    }\n\n    if ($.isEmptyObject(errors) === false) {\n      templateInstance.formMessages.set({\n        errors: errors\n      });\n      // prevent password update\n      return;\n    }\n\n    Accounts.changePassword(oldPassword, password, (error) => {\n      if (error) {\n        // Show some error message\n        templateInstance.formMessages.set({\n          alerts: [error]\n        });\n      } else {\n        // // Close dropdown or navigate to page\n        templateInstance.formMessages.set({\n          info: [{\n            reason: i18next.t(\"accountsUI.info.passwordChanged\")\n          }]\n        });\n      }\n    });\n  }\n});\n"]},"hash":"d08434be9a6e0887d5f7b8f94d2f9863817ae015"}
