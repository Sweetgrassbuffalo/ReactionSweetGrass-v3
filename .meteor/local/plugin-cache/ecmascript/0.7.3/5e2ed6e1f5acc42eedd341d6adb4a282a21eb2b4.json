{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"./helpers","imported":["shopIdAutoValue"],"specifiers":[{"kind":"named","imported":"shopIdAutoValue","local":"shopIdAutoValue"}]},{"source":"./payments","imported":["Payment"],"specifiers":[{"kind":"named","imported":"Payment","local":"Payment"}]},{"source":"./products","imported":["ProductVariant"],"specifiers":[{"kind":"named","imported":"ProductVariant","local":"ProductVariant"}]},{"source":"./shipping","imported":["Shipment","ShippingParcel"],"specifiers":[{"kind":"named","imported":"Shipment","local":"Shipment"},{"kind":"named","imported":"ShippingParcel","local":"ShippingParcel"}]},{"source":"./workflow","imported":["Workflow"],"specifiers":[{"kind":"named","imported":"Workflow","local":"Workflow"}]}],"exports":{"exported":["CartItem","CartItems","Cart"],"specifiers":[{"kind":"local","local":"CartItem","exported":"CartItem"},{"kind":"local","local":"CartItems","exported":"CartItems"},{"kind":"local","local":"Cart","exported":"Cart"}]}}},"options":{"filename":"/lib/collections/schemas/cart.js","filenameRelative":"/lib/collections/schemas/cart.js","inputSourceMap":{"version":3,"sources":["/lib/collections/schemas/cart.js"],"names":["SimpleSchema","shopIdAutoValue","Payment","ProductVariant","Shipment","ShippingParcel","Workflow","CartItem","_id","type","String","productId","index","shopId","autoValue","label","optional","quantity","Number","min","variants","title","parcel","cartItemId","CartItems","items","Cart","userId","unique","isInsert","isUpdate","isFromTrustedCode","unset","sessionId","email","regEx","RegEx","Email","shipping","blackbox","billing","tax","decimal","taxes","Object","discount","workflow","createdAt","Date","isUpsert","$setOnInsert","denyUpdate","updatedAt","$set"],"mappings":"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","file":"/lib/collections/schemas/cart.js.map","sourcesContent":["import { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { shopIdAutoValue } from \"./helpers\";\nimport { Payment } from \"./payments\";\nimport { ProductVariant } from \"./products\";\nimport { Shipment, ShippingParcel } from \"./shipping\";\nimport { Workflow } from \"./workflow\";\n\n/**\n * CartItem Schema\n */\n\nexport const CartItem = new SimpleSchema({\n  _id: {\n    type: String\n  },\n  productId: {\n    type: String,\n    index: 1\n  },\n  shopId: {\n    type: String,\n    autoValue: shopIdAutoValue,\n    index: 1,\n    label: \"Cart Item shopId\",\n    optional: true\n  },\n  quantity: {\n    label: \"Quantity\",\n    type: Number,\n    min: 0\n  },\n  variants: {\n    type: ProductVariant\n  },\n  title: {\n    type: String,\n    label: \"CartItem Title\"\n  },\n  type: {\n    label: \"Product Type\",\n    type: String,\n    optional: true\n  },\n  parcel: { // Currently the parcel is in the simple product schema, so we need to include it here as well. Maybe it should go in productvariant\n    type: ShippingParcel,\n    optional: true\n  },\n  cartItemId: { // Seems strange here but has to be here since we share schemas between cart and order\n    type: String,\n    optional: true\n  }\n});\n\n/**\n * CartItem Schema\n * used in check by inventory/addReserve method\n */\n\nexport const CartItems = new SimpleSchema({\n  items: {\n    type: [CartItem],\n    optional: true\n  }\n});\n\n/**\n * Cart Schema\n */\n\nexport const Cart = new SimpleSchema({\n  _id: { // required for check of users' carts\n    type: String,\n    optional: true\n  },\n  shopId: {\n    type: String,\n    autoValue: shopIdAutoValue,\n    index: 1,\n    label: \"Cart ShopId\"\n  },\n  userId: {\n    type: String,\n    unique: true,\n    autoValue: function () {\n      if (this.isInsert || this.isUpdate) {\n        if (!this.isFromTrustedCode) {\n          return this.userId;\n        }\n      } else {\n        this.unset();\n      }\n    }\n  },\n  sessionId: {\n    type: String,\n    index: 1\n  },\n  email: {\n    type: String,\n    optional: true,\n    index: 1,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  items: {\n    type: [CartItem],\n    optional: true\n  },\n  shipping: {\n    type: [Shipment],\n    optional: true,\n    blackbox: true\n  },\n  billing: {\n    type: [Payment],\n    optional: true,\n    blackbox: true\n  },\n  tax: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  taxes: {\n    type: [Object],\n    optional: true,\n    blackbox: true\n  },\n  discount: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  workflow: {\n    type: Workflow,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    },\n    denyUpdate: true\n  },\n  updatedAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isUpdate) {\n        return {\n          $set: new Date\n        };\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    },\n    optional: true\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/collections/schemas/cart.js.map","sourceFileName":"/lib/collections/schemas/cart.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"cart"},"ignored":false,"code":"module.export({\n  CartItem: function () {\n    return CartItem;\n  },\n  CartItems: function () {\n    return CartItems;\n  },\n  Cart: function () {\n    return Cart;\n  }\n});\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar shopIdAutoValue = void 0;\nmodule.importSync(\"./helpers\", {\n  shopIdAutoValue: function (v) {\n    shopIdAutoValue = v;\n  }\n}, 1);\nvar Payment = void 0;\nmodule.importSync(\"./payments\", {\n  Payment: function (v) {\n    Payment = v;\n  }\n}, 2);\nvar ProductVariant = void 0;\nmodule.importSync(\"./products\", {\n  ProductVariant: function (v) {\n    ProductVariant = v;\n  }\n}, 3);\nvar Shipment = void 0,\n    ShippingParcel = void 0;\nmodule.importSync(\"./shipping\", {\n  Shipment: function (v) {\n    Shipment = v;\n  },\n  ShippingParcel: function (v) {\n    ShippingParcel = v;\n  }\n}, 4);\nvar Workflow = void 0;\nmodule.importSync(\"./workflow\", {\n  Workflow: function (v) {\n    Workflow = v;\n  }\n}, 5);\nvar CartItem = new SimpleSchema({\n  _id: {\n    type: String\n  },\n  productId: {\n    type: String,\n    index: 1\n  },\n  shopId: {\n    type: String,\n    autoValue: shopIdAutoValue,\n    index: 1,\n    label: \"Cart Item shopId\",\n    optional: true\n  },\n  quantity: {\n    label: \"Quantity\",\n    type: Number,\n    min: 0\n  },\n  variants: {\n    type: ProductVariant\n  },\n  title: {\n    type: String,\n    label: \"CartItem Title\"\n  },\n  type: {\n    label: \"Product Type\",\n    type: String,\n    optional: true\n  },\n  parcel: {\n    // Currently the parcel is in the simple product schema, so we need to include it here as well. Maybe it should go in productvariant\n    type: ShippingParcel,\n    optional: true\n  },\n  cartItemId: {\n    // Seems strange here but has to be here since we share schemas between cart and order\n    type: String,\n    optional: true\n  }\n});\nvar CartItems = new SimpleSchema({\n  items: {\n    type: [CartItem],\n    optional: true\n  }\n});\nvar Cart = new SimpleSchema({\n  _id: {\n    // required for check of users' carts\n    type: String,\n    optional: true\n  },\n  shopId: {\n    type: String,\n    autoValue: shopIdAutoValue,\n    index: 1,\n    label: \"Cart ShopId\"\n  },\n  userId: {\n    type: String,\n    unique: true,\n    autoValue: function () {\n      if (this.isInsert || this.isUpdate) {\n        if (!this.isFromTrustedCode) {\n          return this.userId;\n        }\n      } else {\n        this.unset();\n      }\n    }\n  },\n  sessionId: {\n    type: String,\n    index: 1\n  },\n  email: {\n    type: String,\n    optional: true,\n    index: 1,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  items: {\n    type: [CartItem],\n    optional: true\n  },\n  shipping: {\n    type: [Shipment],\n    optional: true,\n    blackbox: true\n  },\n  billing: {\n    type: [Payment],\n    optional: true,\n    blackbox: true\n  },\n  tax: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  taxes: {\n    type: [Object],\n    optional: true,\n    blackbox: true\n  },\n  discount: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  workflow: {\n    type: Workflow,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      }\n    },\n    denyUpdate: true\n  },\n  updatedAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isUpdate) {\n        return {\n          $set: new Date()\n        };\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      }\n    },\n    optional: true\n  }\n});","map":{"version":3,"sources":["/lib/collections/schemas/cart.js"],"names":["SimpleSchema","shopIdAutoValue","Payment","ProductVariant","Shipment","ShippingParcel","Workflow","CartItem","_id","type","String","productId","index","shopId","autoValue","label","optional","quantity","Number","min","variants","title","parcel","cartItemId","CartItems","items","Cart","userId","unique","isInsert","isUpdate","isFromTrustedCode","unset","sessionId","email","regEx","RegEx","Email","shipping","blackbox","billing","tax","decimal","taxes","Object","discount","workflow","createdAt","Date","isUpsert","$setOnInsert","denyUpdate","updatedAt","$set"],"mappings":"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","file":"/lib/collections/schemas/cart.js.map","sourcesContent":["import { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { shopIdAutoValue } from \"./helpers\";\nimport { Payment } from \"./payments\";\nimport { ProductVariant } from \"./products\";\nimport { Shipment, ShippingParcel } from \"./shipping\";\nimport { Workflow } from \"./workflow\";\n\n/**\n * CartItem Schema\n */\n\nexport const CartItem = new SimpleSchema({\n  _id: {\n    type: String\n  },\n  productId: {\n    type: String,\n    index: 1\n  },\n  shopId: {\n    type: String,\n    autoValue: shopIdAutoValue,\n    index: 1,\n    label: \"Cart Item shopId\",\n    optional: true\n  },\n  quantity: {\n    label: \"Quantity\",\n    type: Number,\n    min: 0\n  },\n  variants: {\n    type: ProductVariant\n  },\n  title: {\n    type: String,\n    label: \"CartItem Title\"\n  },\n  type: {\n    label: \"Product Type\",\n    type: String,\n    optional: true\n  },\n  parcel: { // Currently the parcel is in the simple product schema, so we need to include it here as well. Maybe it should go in productvariant\n    type: ShippingParcel,\n    optional: true\n  },\n  cartItemId: { // Seems strange here but has to be here since we share schemas between cart and order\n    type: String,\n    optional: true\n  }\n});\n\n/**\n * CartItem Schema\n * used in check by inventory/addReserve method\n */\n\nexport const CartItems = new SimpleSchema({\n  items: {\n    type: [CartItem],\n    optional: true\n  }\n});\n\n/**\n * Cart Schema\n */\n\nexport const Cart = new SimpleSchema({\n  _id: { // required for check of users' carts\n    type: String,\n    optional: true\n  },\n  shopId: {\n    type: String,\n    autoValue: shopIdAutoValue,\n    index: 1,\n    label: \"Cart ShopId\"\n  },\n  userId: {\n    type: String,\n    unique: true,\n    autoValue: function () {\n      if (this.isInsert || this.isUpdate) {\n        if (!this.isFromTrustedCode) {\n          return this.userId;\n        }\n      } else {\n        this.unset();\n      }\n    }\n  },\n  sessionId: {\n    type: String,\n    index: 1\n  },\n  email: {\n    type: String,\n    optional: true,\n    index: 1,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  items: {\n    type: [CartItem],\n    optional: true\n  },\n  shipping: {\n    type: [Shipment],\n    optional: true,\n    blackbox: true\n  },\n  billing: {\n    type: [Payment],\n    optional: true,\n    blackbox: true\n  },\n  tax: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  taxes: {\n    type: [Object],\n    optional: true,\n    blackbox: true\n  },\n  discount: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  workflow: {\n    type: Workflow,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    },\n    denyUpdate: true\n  },\n  updatedAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isUpdate) {\n        return {\n          $set: new Date\n        };\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    },\n    optional: true\n  }\n});\n"]},"hash":"5e2ed6e1f5acc42eedd341d6adb4a282a21eb2b4"}
