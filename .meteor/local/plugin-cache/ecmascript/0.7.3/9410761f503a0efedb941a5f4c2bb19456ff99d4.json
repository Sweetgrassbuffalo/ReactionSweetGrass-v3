{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"nodemailer-wellknown","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"getServiceConfig"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"/lib/collections","imported":["Jobs","Packages"],"specifiers":[{"kind":"named","imported":"Jobs","local":"Jobs"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Logger","Reaction"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"Reaction","local":"Reaction"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/methods/email.js","filenameRelative":"/server/methods/email.js","inputSourceMap":{"version":3,"sources":["/server/methods/email.js"],"names":["getServiceConfig","Meteor","check","Match","Jobs","Packages","Logger","Reaction","methods","settings","hasPermission","userId","error","Error","unblock","Optional","Object","config","service","host","port","user","password","auth","pass","Email","wrapAsync","verifyConfig","getMailConfig","e","responseCode","response","String","Number","update","name","shopId","getShopId","$set","info","jobId","debug","_id","status"],"mappings":";;;;;;AAAA,IAAO;AAAP,OAA6B,WAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAc,AACvB,AAAS,AAAO,AAAa,AAC7B,AAAS,AAAM,AAAgB,AAC/B,AAAS,AAAQ,AAAgB,AAEjC,AAAO,AAAQ;AACb;AAKA,AAAuB,AAAU,AAC/B,AAAI,AAAC,AAAS,AAAc,AAAC,AAAS,AAAS,AAAc,AAAK,AAAS,AACzE;;;;KAAA,AAAO,AAAM;SACP,AAAI,SAAJ,AAAW,AAAM,wBAAjB,AAAkC,SAAxC,AAAM,4BACP;;8CAED;AAAA,AAAK,AAEL,AAAM,AAAU,AAAM,AAAS,AAE/B;;AAAI,SAV2B,AAU/B,AAEA,AACA;AAAI,UAAO,UAAP,MAAoB,SAAxB,AAAkC,AAChC,AAAM,AAAE;QAAF,AAAW,AAAM,iBAAjB,AAAuB;;QAAvB;AAA6B;iBAAnC,AAAM,AAA0C;;;;;oEAEhD;AAAA,AAAI,AAAY,AAAY,AAAQ,AAAQ,AAAQ,AAAU,AAC5D;;;;;;kBACA;;;iBAAS,6BAAE;AAAF,AAAQ;AAAR,8CAAc;eAAM;;gBAAE;;AAAF,AAAQ;AAArC,AAAS,AAAoB,AAAc;;AAhB7C,AACA,oBAaA,AAGC,AAAM,AAAI,AAAW,AAAQ,AAAU,AACtC;;;QACA;aAAS,iBAAiB,MAA1B,AAAS,AAA6B,8BACtC;aAAO,GAAP,AAAc,AAAE;aAAF,MAAQ;gBAAM,+BAAd;AAAd,AACD;AACF,AAED;AAAA,AAAM,AAAE,AAAU,AAElB,AAAI,AACF;;;;KAAO,AAAO,gCAAP,AAAiB,UAAxB,AAAO,AAAuB,AAAc,AAAU,AAAM,AAC7D;AAFD,AAEE,SAAA,AAAO,AAAG,sEACV;aAAA,AAAO,MAAP,AAAa,AACb;YAAM,IAAI,OAAJ,AAAW,MAAX,AAAiB,AAAE,AAAc,iBAAvC,AAAM,AAAmC,AAC1C;AAvCU,AAwCZ;;;;;;YAQD;gBAAA,AAAqB,AAAU,AAC7B,AAAI,AAAC,AAAS,AAAc,AAAC,AAAS,AAAS,AAAc,AAAK,AAAS,AACzE,AAAO,AAAM,AACb;AARJ;AAQU,aAAI;AAAO,YAAX,AAAiB;cAAjB,AAAkC,SAAxC,AAAM;;;yBAGR,AAAM,AAAU,AACd,AAAS,AACT,AAAM,AAAM,AAAS,AACrB;;AALD;WAKO,AAAM,SAHE,AAGR,AAAe,AACrB,AAAM,AACN;gBAAU,UALZ,AAAgB,AAQhB;WAAA,AAAS,AAAO,AAAE;AAAlB,AAAgB,AAAQ,AAAQ,AAAQ,AAAS,AAAe,AAC9D;AADF,AAAgE,AACxD,AACJ,AAAiB,AAIrB,AAAO,AAAS,AAEhB;;;;KAAA,AAAO,AAAK,gCAAZ,AAAsB,OAAtB,AAEA;SAAA,AAAO,sEAxEI,AAyEZ;;8CAGD;;;;AAKA,WAAA,AAAqB,AAAO,uDAC1B,AAAI,AAAC,AAAS,AAAc,AAAC,AAAS,AAAS,AAAc,AAAK,AAAS,AACzE;SAAO;AAAP,AAAa;;;gBAIf,AAAM,AAAO,AAEb,AAAO,AAAO,AAA6C,AAAM,AAEjE;AAPE,AAAM,AAAI,AAAO,AAAM,AAAiB,AACzC;AAFC,AACA;AAOG,WAAL,AAAY,AAAE;AA3FlB,AAAe,AA2FX,AAAY,AAAO,AAAS,AAC1B,AAAM,AACJ,AAAQ,AAIZ,AAAO,AACR","file":"/server/methods/email.js.map","sourcesContent":["import getServiceConfig from \"nodemailer-wellknown\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Jobs, Packages } from \"/lib/collections\";\nimport { Logger, Reaction } from \"/server/api\";\n\nMeteor.methods({\n  /**\n   * Verify the current email configuration\n   * @param {Object} settings - optional settings object (otherwise uses settings in database)\n   * @return {Boolean} - returns true if SMTP connection succeeds\n   */\n  \"email/verifySettings\"(settings) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/verifySettings: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    this.unblock();\n\n    check(settings, Match.Optional(Object));\n\n    let config;\n\n    // if a settings object has been provided, build a config\n    if (typeof settings === \"object\") {\n      const { service, host, port, user, password } = settings;\n\n      if (service === \"custom\" && host && port && user && password) {\n        // create a custom Nodemailer config\n        config = { host, port, auth: { user, pass: password } };\n      } else if (service && user && password) {\n        // create a Nodemailer config from the nodemailer-wellknown services\n        config = getServiceConfig(service) || {};\n        config.auth = { user, pass: password };\n      }\n    }\n\n    const { Email } = Reaction;\n\n    try {\n      return Meteor.wrapAsync(Email.verifyConfig)(config || Email.getMailConfig());\n    } catch (e) {\n      Logger.error(e);\n      throw new Meteor.Error(e.responseCode, e.response);\n    }\n  },\n\n\n  /**\n   * Save new email configuration\n   * @param {Object} settings - mail provider settings\n   * @return {Boolean} - returns true if update succeeds\n   */\n  \"email/saveSettings\"(settings) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/saveSettings: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    check(settings, {\n      service: String,\n      host: Match.Optional(String),\n      port: Match.Optional(Number),\n      user: String,\n      password: String\n    });\n\n    Packages.update({ name: \"core\", shopId: Reaction.getShopId() }, {\n      $set: {\n        \"settings.mail\": settings\n      }\n    });\n\n    delete settings.password;\n\n    Logger.info(settings, \"Email settings updated\");\n\n    return true;\n  },\n\n\n  /**\n   * Retry a failed or cancelled email job\n   * @param {String} jobId - a sendEmail job ID\n   * @return {Boolean} - returns true if job is successfully restarted\n   */\n  \"emails/retryFailed\"(jobId) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/retryFailed: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    check(jobId, String);\n\n    Logger.debug(`emails/retryFailed - restarting email job \"${jobId}\"`);\n\n    Jobs.update({ _id: jobId }, {\n      $set: {\n        status: \"ready\"\n      }\n    });\n\n    return true;\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/methods/email.js.map","sourceFileName":"/server/methods/email.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"email"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar getServiceConfig = void 0;\nmodule.importSync(\"nodemailer-wellknown\", {\n  \"default\": function (v) {\n    getServiceConfig = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar check = void 0,\n    Match = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 2);\nvar Jobs = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Jobs: function (v) {\n    Jobs = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 3);\nvar Logger = void 0,\n    Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  },\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 4);\nMeteor.methods({\n  /**\n   * Verify the current email configuration\n   * @param {Object} settings - optional settings object (otherwise uses settings in database)\n   * @return {Boolean} - returns true if SMTP connection succeeds\n   */\"email/verifySettings\": function (settings) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/verifySettings: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    this.unblock();\n    check(settings, Match.Optional(Object));\n    var config = void 0; // if a settings object has been provided, build a config\n\n    if ((typeof settings === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(settings)) === \"object\") {\n      var service = settings.service,\n          host = settings.host,\n          port = settings.port,\n          user = settings.user,\n          password = settings.password;\n\n      if (service === \"custom\" && host && port && user && password) {\n        // create a custom Nodemailer config\n        config = {\n          host: host,\n          port: port,\n          auth: {\n            user: user,\n            pass: password\n          }\n        };\n      } else if (service && user && password) {\n        // create a Nodemailer config from the nodemailer-wellknown services\n        config = getServiceConfig(service) || {};\n        config.auth = {\n          user: user,\n          pass: password\n        };\n      }\n    }\n\n    var _Reaction = Reaction,\n        Email = _Reaction.Email;\n\n    try {\n      return Meteor.wrapAsync(Email.verifyConfig)(config || Email.getMailConfig());\n    } catch (e) {\n      Logger.error(e);\n      throw new Meteor.Error(e.responseCode, e.response);\n    }\n  },\n  /**\n   * Save new email configuration\n   * @param {Object} settings - mail provider settings\n   * @return {Boolean} - returns true if update succeeds\n   */\"email/saveSettings\": function (settings) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/saveSettings: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    check(settings, {\n      service: String,\n      host: Match.Optional(String),\n      port: Match.Optional(Number),\n      user: String,\n      password: String\n    });\n    Packages.update({\n      name: \"core\",\n      shopId: Reaction.getShopId()\n    }, {\n      $set: {\n        \"settings.mail\": settings\n      }\n    });\n    delete settings.password;\n    Logger.info(settings, \"Email settings updated\");\n    return true;\n  },\n  /**\n   * Retry a failed or cancelled email job\n   * @param {String} jobId - a sendEmail job ID\n   * @return {Boolean} - returns true if job is successfully restarted\n   */\"emails/retryFailed\": function (jobId) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/retryFailed: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    check(jobId, String);\n    Logger.debug(\"emails/retryFailed - restarting email job \\\"\" + jobId + \"\\\"\");\n    Jobs.update({\n      _id: jobId\n    }, {\n      $set: {\n        status: \"ready\"\n      }\n    });\n    return true;\n  }\n});","map":{"version":3,"sources":["/server/methods/email.js"],"names":["getServiceConfig","Meteor","check","Match","Jobs","Packages","Logger","Reaction","methods","settings","hasPermission","userId","error","Error","unblock","Optional","Object","config","service","host","port","user","password","auth","pass","Email","wrapAsync","verifyConfig","getMailConfig","e","responseCode","response","String","Number","update","name","shopId","getShopId","$set","info","jobId","debug","_id","status"],"mappings":";;;;;;AAAA,IAAO;AAAP,OAA6B,WAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAc,AACvB,AAAS,AAAO,AAAa,AAC7B,AAAS,AAAM,AAAgB,AAC/B,AAAS,AAAQ,AAAgB,AAEjC,AAAO,AAAQ;AACb;AAKA,AAAuB,AAAU,AAC/B,AAAI,AAAC,AAAS,AAAc,AAAC,AAAS,AAAS,AAAc,AAAK,AAAS,AACzE;;;;KAAA,AAAO,AAAM;SACP,AAAI,SAAJ,AAAW,AAAM,wBAAjB,AAAkC,SAAxC,AAAM,4BACP;;8CAED;AAAA,AAAK,AAEL,AAAM,AAAU,AAAM,AAAS,AAE/B;;AAAI,SAV2B,AAU/B,AAEA,AACA;AAAI,UAAO,UAAP,MAAoB,SAAxB,AAAkC,AAChC,AAAM,AAAE;QAAF,AAAW,AAAM,iBAAjB,AAAuB;;QAAvB;AAA6B;iBAAnC,AAAM,AAA0C;;;;;oEAEhD;AAAA,AAAI,AAAY,AAAY,AAAQ,AAAQ,AAAQ,AAAU,AAC5D;;;;;;kBACA;;;iBAAS,6BAAE;AAAF,AAAQ;AAAR,8CAAc;eAAM;;gBAAE;;AAAF,AAAQ;AAArC,AAAS,AAAoB,AAAc;;AAhB7C,AACA,oBAaA,AAGC,AAAM,AAAI,AAAW,AAAQ,AAAU,AACtC;;;QACA;aAAS,iBAAiB,MAA1B,AAAS,AAA6B,8BACtC;aAAO,GAAP,AAAc,AAAE;aAAF,MAAQ;gBAAM,+BAAd;AAAd,AACD;AACF,AAED;AAAA,AAAM,AAAE,AAAU,AAElB,AAAI,AACF;;;;KAAO,AAAO,gCAAP,AAAiB,UAAxB,AAAO,AAAuB,AAAc,AAAU,AAAM,AAC7D;AAFD,AAEE,SAAA,AAAO,AAAG,sEACV;aAAA,AAAO,MAAP,AAAa,AACb;YAAM,IAAI,OAAJ,AAAW,MAAX,AAAiB,AAAE,AAAc,iBAAvC,AAAM,AAAmC,AAC1C;AAvCU,AAwCZ;;;;;;YAQD;gBAAA,AAAqB,AAAU,AAC7B,AAAI,AAAC,AAAS,AAAc,AAAC,AAAS,AAAS,AAAc,AAAK,AAAS,AACzE,AAAO,AAAM,AACb;AARJ;AAQU,aAAI;AAAO,YAAX,AAAiB;cAAjB,AAAkC,SAAxC,AAAM;;;yBAGR,AAAM,AAAU,AACd,AAAS,AACT,AAAM,AAAM,AAAS,AACrB;;AALD;WAKO,AAAM,SAHE,AAGR,AAAe,AACrB,AAAM,AACN;gBAAU,UALZ,AAAgB,AAQhB;WAAA,AAAS,AAAO,AAAE;AAAlB,AAAgB,AAAQ,AAAQ,AAAQ,AAAS,AAAe,AAC9D;AADF,AAAgE,AACxD,AACJ,AAAiB,AAIrB,AAAO,AAAS,AAEhB;;;;KAAA,AAAO,AAAK,gCAAZ,AAAsB,OAAtB,AAEA;SAAA,AAAO,sEAxEI,AAyEZ;;8CAGD;;;;AAKA,WAAA,AAAqB,AAAO,uDAC1B,AAAI,AAAC,AAAS,AAAc,AAAC,AAAS,AAAS,AAAc,AAAK,AAAS,AACzE;SAAO;AAAP,AAAa;;;gBAIf,AAAM,AAAO,AAEb,AAAO,AAAO,AAA6C,AAAM,AAEjE;AAPE,AAAM,AAAI,AAAO,AAAM,AAAiB,AACzC;AAFC,AACA;AAOG,WAAL,AAAY,AAAE;AA3FlB,AAAe,AA2FX,AAAY,AAAO,AAAS,AAC1B,AAAM,AACJ,AAAQ,AAIZ,AAAO,AACR","file":"/server/methods/email.js.map","sourcesContent":["import getServiceConfig from \"nodemailer-wellknown\";\nimport { Meteor } from \"meteor/meteor\";\nimport { check, Match } from \"meteor/check\";\nimport { Jobs, Packages } from \"/lib/collections\";\nimport { Logger, Reaction } from \"/server/api\";\n\nMeteor.methods({\n  /**\n   * Verify the current email configuration\n   * @param {Object} settings - optional settings object (otherwise uses settings in database)\n   * @return {Boolean} - returns true if SMTP connection succeeds\n   */\n  \"email/verifySettings\"(settings) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/verifySettings: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    this.unblock();\n\n    check(settings, Match.Optional(Object));\n\n    let config;\n\n    // if a settings object has been provided, build a config\n    if (typeof settings === \"object\") {\n      const { service, host, port, user, password } = settings;\n\n      if (service === \"custom\" && host && port && user && password) {\n        // create a custom Nodemailer config\n        config = { host, port, auth: { user, pass: password } };\n      } else if (service && user && password) {\n        // create a Nodemailer config from the nodemailer-wellknown services\n        config = getServiceConfig(service) || {};\n        config.auth = { user, pass: password };\n      }\n    }\n\n    const { Email } = Reaction;\n\n    try {\n      return Meteor.wrapAsync(Email.verifyConfig)(config || Email.getMailConfig());\n    } catch (e) {\n      Logger.error(e);\n      throw new Meteor.Error(e.responseCode, e.response);\n    }\n  },\n\n\n  /**\n   * Save new email configuration\n   * @param {Object} settings - mail provider settings\n   * @return {Boolean} - returns true if update succeeds\n   */\n  \"email/saveSettings\"(settings) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/saveSettings: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    check(settings, {\n      service: String,\n      host: Match.Optional(String),\n      port: Match.Optional(Number),\n      user: String,\n      password: String\n    });\n\n    Packages.update({ name: \"core\", shopId: Reaction.getShopId() }, {\n      $set: {\n        \"settings.mail\": settings\n      }\n    });\n\n    delete settings.password;\n\n    Logger.info(settings, \"Email settings updated\");\n\n    return true;\n  },\n\n\n  /**\n   * Retry a failed or cancelled email job\n   * @param {String} jobId - a sendEmail job ID\n   * @return {Boolean} - returns true if job is successfully restarted\n   */\n  \"emails/retryFailed\"(jobId) {\n    if (!Reaction.hasPermission([\"owner\", \"admin\", \"dashboard\"], this.userId)) {\n      Logger.error(\"email/retryFailed: Access Denied\");\n      throw new Meteor.Error(\"access-denied\", \"Access Denied\");\n    }\n\n    check(jobId, String);\n\n    Logger.debug(`emails/retryFailed - restarting email job \"${jobId}\"`);\n\n    Jobs.update({ _id: jobId }, {\n      $set: {\n        status: \"ready\"\n      }\n    });\n\n    return true;\n  }\n});\n"]},"hash":"9410761f503a0efedb941a5f4c2bb19456ff99d4"}
