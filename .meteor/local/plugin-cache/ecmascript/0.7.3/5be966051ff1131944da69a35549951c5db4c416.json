{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/accounts/templates/login/loginForm.js","filenameRelative":"/client/modules/accounts/templates/login/loginForm.js","inputSourceMap":{"version":3,"sources":["/client/modules/accounts/templates/login/loginForm.js"],"names":["Meteor","Template","capitalize","str","finalString","String","charAt","toUpperCase","slice","loginForm","helpers","loginFormCurrentView","instance","get","loginFormData","credentials","uniqueId","onCreated","template","currentData","startView","ReactiveVar","Random","id","events","event","preventDefault","stopPropagation","email","$","val","password","set","loginFormServiceButton","serviceName","data","name","loginWithService","options"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;G,AACA,AAAS,AAAgB,AAEzB,AACA;;AACA;AACA;AAEA;AACA,AAAS,AAAW,AAAK;AACvB,AAAM,AAAc,AAAQ,AAAO,AAAK,AAAO;AAC/C,SAAO,WAAY,KAAnB,AAAO,AAAmB,AAAG,A,AAAtB,AAAsC,AAAY,AAAM,AAChE;AAGD,+CACA;iEACA;EAEA,AAAS,AAAU,AAAQ;AAEzB;;;;AAIA;AANyB,AAUzB;;;;AAIA,oBAAgB,gCACd;AAAO,AACL,AAAa,AAAS,AAAW;AAhBZ,AAevB,AAGD,AAED;;;;;AAIW,uCACT,AAAO,AAAS,AAAW,AAC5B;AAFD;AAxBF,AAA2B;AA8B3B,AAGA,A,AAAA,AAAS,AAAU,AAAU,AAAY,AACvC;;;KAAM,sBAAN,AAAiB,AAAS,AAC1B;AAAM,oBAAc,WAApB,AAAoB,AAAS,AAC7B;AAAA,AAAI,AAAY,AAEhB,AAAI,AAAa,AACf,AAAI,AAAY,AAAW;AAjCN,AACrB,AAAO,AAAS,AAAW,AAAqB,AACjD,IAgCG,AAAY,AAAY,AACzB,AACF;;;yCAED;MAAS,oBAAT,AAAgC,AAAI,AAAY,AAChD;MAAA,AAAS,cAAW,AAAO,SAA3B,AAAoB,AACpB;MAAS,YAbX,AAayB,AACxB,A,AADC,AAGF;;;;8BAIA;AAAA,AAAS,AAAU,AAAO,AAExB;;;;;;AAMA,AAAoC,AAAU,AAAO,AAAU,AAC7D,AAAM,IACN,AAAM,AAEN,AAAS,AAAc,AACrB,AAAO,AAAS,AAAE,AAAsB,AACxC,AAAU,AAAS,AAAE,AAAyB;;;;AAFhD,AAAuB;AAZD,AAoBxB;;;;;KAMA,oCAAoC,AAAC,UAAO,OAAR,AAAqB,UACvD;UAAA,AAAM,AACN;UAAA,AAAM,AAEN,AAAS,AAAc,AACrB;aAAO,AAAS,AAAE;aACR,WAAA,AAAS,AAAE,sBAFvB,AAAuB,AAEX,AAAoC;oDAhC1B,AAmCtB,AAAS,AAAqB,AAAI,AACnC,AAED;AARyB,AACd,AAAiC,AACxC;;;AAYJ,AAA4C,AAAC,AAAO,AAAa,AAC/D,AAAM,AACN,AAAM,AAEN,AAAS,AAAc,AACrB;;;;;KAAO,AAAS,AAAE,8CAAX,OADc,AACd,AAAiC,UACxC;UAFqB,AAEX,AAAS,AAAE,AAAyB;AAFhD,UAKA,AAAS,AAAqB,AAAI,AACnC;;;oDAMH,AAAS,AAAuB,AAAO,AAErC;AA9DF,AAA0B,AAyD1B,A;;;AAWE,AAAgB,AAAC,AAAO,AAAa,AACnC,AAAI,AAAc,AAAS,AAAK,AAEhC,AACA,AAAI,AAAgB,AAAoB,AACtC;;;;;KAAA,AAAc,uEACf;AAFD,UAEO,AACL;UAAA,AAAc,AAAW,AAC1B;;AAEK,wBAAmB,AAAO,sBAAhC,AAAyB,AAAqB,AAC9C;AAAM,gBAX6B,AAWnC,AAAgB,AAAI,oCAEpB,AAAiB,AAAS,AAAM,AAC9B,AACD;AALD;AAGA,sCAGD;AAxBH,AAAuC;AA3CnC,AAAS,AAAqB,AAAI,AACnC","file":"/client/modules/accounts/templates/login/loginForm.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\n\n// ============================================================================\n// Login form\n//\n//\n\n// XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\nfunction capitalize(str) {\n  const finalString = str === null ? \"\" : String(str);\n  return finalString.charAt(0).toUpperCase() + finalString.slice(1);\n}\n\n\n// ----------------------------------------------------------------------------\n// Login Form helpers\n//\n\nTemplate.loginForm.helpers({\n\n  /**\n   * Login form current view\n   * @return {String} Name of the template to use as the current view.\n   */\n  loginFormCurrentView() {\n    return Template.instance().loginFormCurrentView.get();\n  },\n\n  /**\n   * Login form data\n   * @return {Object} Object containing data for the current login form view.\n   */\n  loginFormData() {\n    return {\n      credentials: Template.instance().credentials\n    };\n  },\n\n  /**\n   * Unique id to use on form elements\n   * @return {String} String of the unique ID for the current template\n   */\n  uniqueId() {\n    return Template.instance().uniqueId;\n  }\n\n});\n\n/**\n * Login form onCreated\n */\nTemplate.loginForm.onCreated(function () {\n  const template = Template.instance();\n  const currentData = Template.currentData();\n  let startView = \"loginFormSignInView\";\n\n  if (currentData) {\n    if (currentData.startView) {\n      startView = currentData.startView;\n    }\n  }\n\n  template.loginFormCurrentView = new ReactiveVar(startView);\n  template.uniqueId = Random.id();\n  template.credentials = {};\n});\n\n/**\n * Login Form events\n * These events are shared across all login form views and subviews\n */\nTemplate.loginForm.events({\n\n  /**\n   * Event: Show sign in view\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\n  \"click [data-event-action=signIn]\": function (event, template) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    template.credentials = {\n      email: template.$(\".login-input-email\").val(),\n      password: template.$(\".login-input-password\").val()\n    };\n\n    template.loginFormCurrentView.set(\"loginFormSignInView\");\n  },\n\n  /**\n   * Event: Show the sign up (register) view\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\n  \"click [data-event-action=signUp]\": (event, template) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    template.credentials = {\n      email: template.$(\".login-input-email\").val(),\n      password: template.$(\".login-input-password\").val()\n    };\n\n    template.loginFormCurrentView.set(\"loginFormSignUpView\");\n  },\n\n  /**\n   * Event: Show the password reset view\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\n  \"click [data-event-action=forgotPassword]\": (event, template) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    template.credentials = {\n      email: template.$(\".login-input-email\").val(),\n      password: template.$(\".login-input-password\").val()\n    };\n\n    template.loginFormCurrentView.set(\"loginFormResetPasswordView\");\n  }\n});\n\n/**\n * Service sign in button helpers\n */\nTemplate.loginFormServiceButton.events({\n\n  /**\n   * Event: Click (click on the service button to sign in / sign up)\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\n  \"click button\": (event, template) => {\n    let serviceName = template.data.name;\n\n    // Get proper service name\n    if (serviceName === \"meteor-developer\") {\n      serviceName = \"MeteorDeveloperAccount\";\n    } else {\n      serviceName = capitalize(serviceName);\n    }\n\n    const loginWithService = Meteor[\"loginWith\" + serviceName];\n    const options = {}; // use default scope unless specified\n\n    loginWithService(options, () => {\n      // TODO: add error message for failed login attempt\n    });\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/accounts/templates/login/loginForm.js.map","sourceFileName":"/client/modules/accounts/templates/login/loginForm.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"loginForm"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 1);\n\n// ============================================================================\n// Login form\n//\n//\n// XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\nfunction capitalize(str) {\n  var finalString = str === null ? \"\" : String(str);\n  return finalString.charAt(0).toUpperCase() + finalString.slice(1);\n} // ----------------------------------------------------------------------------\n// Login Form helpers\n//\n\n\nTemplate.loginForm.helpers({\n  /**\n   * Login form current view\n   * @return {String} Name of the template to use as the current view.\n   */loginFormCurrentView: function () {\n    return Template.instance().loginFormCurrentView.get();\n  },\n  /**\n   * Login form data\n   * @return {Object} Object containing data for the current login form view.\n   */loginFormData: function () {\n    return {\n      credentials: Template.instance().credentials\n    };\n  },\n  /**\n   * Unique id to use on form elements\n   * @return {String} String of the unique ID for the current template\n   */uniqueId: function () {\n    return Template.instance().uniqueId;\n  }\n}); /**\n     * Login form onCreated\n     */\nTemplate.loginForm.onCreated(function () {\n  var template = Template.instance();\n  var currentData = Template.currentData();\n  var startView = \"loginFormSignInView\";\n\n  if (currentData) {\n    if (currentData.startView) {\n      startView = currentData.startView;\n    }\n  }\n\n  template.loginFormCurrentView = new ReactiveVar(startView);\n  template.uniqueId = Random.id();\n  template.credentials = {};\n}); /**\n     * Login Form events\n     * These events are shared across all login form views and subviews\n     */\nTemplate.loginForm.events({\n  /**\n   * Event: Show sign in view\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\"click [data-event-action=signIn]\": function (event, template) {\n    event.preventDefault();\n    event.stopPropagation();\n    template.credentials = {\n      email: template.$(\".login-input-email\").val(),\n      password: template.$(\".login-input-password\").val()\n    };\n    template.loginFormCurrentView.set(\"loginFormSignInView\");\n  },\n  /**\n   * Event: Show the sign up (register) view\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\"click [data-event-action=signUp]\": function (event, template) {\n    event.preventDefault();\n    event.stopPropagation();\n    template.credentials = {\n      email: template.$(\".login-input-email\").val(),\n      password: template.$(\".login-input-password\").val()\n    };\n    template.loginFormCurrentView.set(\"loginFormSignUpView\");\n  },\n  /**\n   * Event: Show the password reset view\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\"click [data-event-action=forgotPassword]\": function (event, template) {\n    event.preventDefault();\n    event.stopPropagation();\n    template.credentials = {\n      email: template.$(\".login-input-email\").val(),\n      password: template.$(\".login-input-password\").val()\n    };\n    template.loginFormCurrentView.set(\"loginFormResetPasswordView\");\n  }\n}); /**\n     * Service sign in button helpers\n     */\nTemplate.loginFormServiceButton.events({\n  /**\n   * Event: Click (click on the service button to sign in / sign up)\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\"click button\": function (event, template) {\n    var serviceName = template.data.name; // Get proper service name\n\n    if (serviceName === \"meteor-developer\") {\n      serviceName = \"MeteorDeveloperAccount\";\n    } else {\n      serviceName = capitalize(serviceName);\n    }\n\n    var loginWithService = Meteor[\"loginWith\" + serviceName];\n    var options = {}; // use default scope unless specified\n\n    loginWithService(options, function () {// TODO: add error message for failed login attempt\n    });\n  }\n});","map":{"version":3,"sources":["/client/modules/accounts/templates/login/loginForm.js"],"names":["Meteor","Template","capitalize","str","finalString","String","charAt","toUpperCase","slice","loginForm","helpers","loginFormCurrentView","instance","get","loginFormData","credentials","uniqueId","onCreated","template","currentData","startView","ReactiveVar","Random","id","events","event","preventDefault","stopPropagation","email","$","val","password","set","loginFormServiceButton","serviceName","data","name","loginWithService","options"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;G,AACA,AAAS,AAAgB,AAEzB,AACA;;AACA;AACA;AAEA;AACA,AAAS,AAAW,AAAK;AACvB,AAAM,AAAc,AAAQ,AAAO,AAAK,AAAO;AAC/C,SAAO,WAAY,KAAnB,AAAO,AAAmB,AAAG,A,AAAtB,AAAsC,AAAY,AAAM,AAChE;AAGD,+CACA;iEACA;EAEA,AAAS,AAAU,AAAQ;AAEzB;;;;AAIA;AANyB,AAUzB;;;;AAIA,oBAAgB,gCACd;AAAO,AACL,AAAa,AAAS,AAAW;AAhBZ,AAevB,AAGD,AAED;;;;;AAIW,uCACT,AAAO,AAAS,AAAW,AAC5B;AAFD;AAxBF,AAA2B;AA8B3B,AAGA,A,AAAA,AAAS,AAAU,AAAU,AAAY,AACvC;;;KAAM,sBAAN,AAAiB,AAAS,AAC1B;AAAM,oBAAc,WAApB,AAAoB,AAAS,AAC7B;AAAA,AAAI,AAAY,AAEhB,AAAI,AAAa,AACf,AAAI,AAAY,AAAW;AAjCN,AACrB,AAAO,AAAS,AAAW,AAAqB,AACjD,IAgCG,AAAY,AAAY,AACzB,AACF;;;yCAED;MAAS,oBAAT,AAAgC,AAAI,AAAY,AAChD;MAAA,AAAS,cAAW,AAAO,SAA3B,AAAoB,AACpB;MAAS,YAbX,AAayB,AACxB,A,AADC,AAGF;;;;8BAIA;AAAA,AAAS,AAAU,AAAO,AAExB;;;;;;AAMA,AAAoC,AAAU,AAAO,AAAU,AAC7D,AAAM,IACN,AAAM,AAEN,AAAS,AAAc,AACrB,AAAO,AAAS,AAAE,AAAsB,AACxC,AAAU,AAAS,AAAE,AAAyB;;;;AAFhD,AAAuB;AAZD,AAoBxB;;;;;KAMA,oCAAoC,AAAC,UAAO,OAAR,AAAqB,UACvD;UAAA,AAAM,AACN;UAAA,AAAM,AAEN,AAAS,AAAc,AACrB;aAAO,AAAS,AAAE;aACR,WAAA,AAAS,AAAE,sBAFvB,AAAuB,AAEX,AAAoC;oDAhC1B,AAmCtB,AAAS,AAAqB,AAAI,AACnC,AAED;AARyB,AACd,AAAiC,AACxC;;;AAYJ,AAA4C,AAAC,AAAO,AAAa,AAC/D,AAAM,AACN,AAAM,AAEN,AAAS,AAAc,AACrB;;;;;KAAO,AAAS,AAAE,8CAAX,OADc,AACd,AAAiC,UACxC;UAFqB,AAEX,AAAS,AAAE,AAAyB;AAFhD,UAKA,AAAS,AAAqB,AAAI,AACnC;;;oDAMH,AAAS,AAAuB,AAAO,AAErC;AA9DF,AAA0B,AAyD1B,A;;;AAWE,AAAgB,AAAC,AAAO,AAAa,AACnC,AAAI,AAAc,AAAS,AAAK,AAEhC,AACA,AAAI,AAAgB,AAAoB,AACtC;;;;;KAAA,AAAc,uEACf;AAFD,UAEO,AACL;UAAA,AAAc,AAAW,AAC1B;;AAEK,wBAAmB,AAAO,sBAAhC,AAAyB,AAAqB,AAC9C;AAAM,gBAX6B,AAWnC,AAAgB,AAAI,oCAEpB,AAAiB,AAAS,AAAM,AAC9B,AACD;AALD;AAGA,sCAGD;AAxBH,AAAuC;AA3CnC,AAAS,AAAqB,AAAI,AACnC","file":"/client/modules/accounts/templates/login/loginForm.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\n\n// ============================================================================\n// Login form\n//\n//\n\n// XXX from http://epeli.github.com/underscore.string/lib/underscore.string.js\nfunction capitalize(str) {\n  const finalString = str === null ? \"\" : String(str);\n  return finalString.charAt(0).toUpperCase() + finalString.slice(1);\n}\n\n\n// ----------------------------------------------------------------------------\n// Login Form helpers\n//\n\nTemplate.loginForm.helpers({\n\n  /**\n   * Login form current view\n   * @return {String} Name of the template to use as the current view.\n   */\n  loginFormCurrentView() {\n    return Template.instance().loginFormCurrentView.get();\n  },\n\n  /**\n   * Login form data\n   * @return {Object} Object containing data for the current login form view.\n   */\n  loginFormData() {\n    return {\n      credentials: Template.instance().credentials\n    };\n  },\n\n  /**\n   * Unique id to use on form elements\n   * @return {String} String of the unique ID for the current template\n   */\n  uniqueId() {\n    return Template.instance().uniqueId;\n  }\n\n});\n\n/**\n * Login form onCreated\n */\nTemplate.loginForm.onCreated(function () {\n  const template = Template.instance();\n  const currentData = Template.currentData();\n  let startView = \"loginFormSignInView\";\n\n  if (currentData) {\n    if (currentData.startView) {\n      startView = currentData.startView;\n    }\n  }\n\n  template.loginFormCurrentView = new ReactiveVar(startView);\n  template.uniqueId = Random.id();\n  template.credentials = {};\n});\n\n/**\n * Login Form events\n * These events are shared across all login form views and subviews\n */\nTemplate.loginForm.events({\n\n  /**\n   * Event: Show sign in view\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\n  \"click [data-event-action=signIn]\": function (event, template) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    template.credentials = {\n      email: template.$(\".login-input-email\").val(),\n      password: template.$(\".login-input-password\").val()\n    };\n\n    template.loginFormCurrentView.set(\"loginFormSignInView\");\n  },\n\n  /**\n   * Event: Show the sign up (register) view\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\n  \"click [data-event-action=signUp]\": (event, template) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    template.credentials = {\n      email: template.$(\".login-input-email\").val(),\n      password: template.$(\".login-input-password\").val()\n    };\n\n    template.loginFormCurrentView.set(\"loginFormSignUpView\");\n  },\n\n  /**\n   * Event: Show the password reset view\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\n  \"click [data-event-action=forgotPassword]\": (event, template) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    template.credentials = {\n      email: template.$(\".login-input-email\").val(),\n      password: template.$(\".login-input-password\").val()\n    };\n\n    template.loginFormCurrentView.set(\"loginFormResetPasswordView\");\n  }\n});\n\n/**\n * Service sign in button helpers\n */\nTemplate.loginFormServiceButton.events({\n\n  /**\n   * Event: Click (click on the service button to sign in / sign up)\n   * @param  {Event}    event    jQuery Event\n   * @param  {Template} template Blaze Template instance\n   * @return {void}\n   */\n  \"click button\": (event, template) => {\n    let serviceName = template.data.name;\n\n    // Get proper service name\n    if (serviceName === \"meteor-developer\") {\n      serviceName = \"MeteorDeveloperAccount\";\n    } else {\n      serviceName = capitalize(serviceName);\n    }\n\n    const loginWithService = Meteor[\"loginWith\" + serviceName];\n    const options = {}; // use default scope unless specified\n\n    loginWithService(options, () => {\n      // TODO: add error message for failed login attempt\n    });\n  }\n});\n"]},"hash":"5be966051ff1131944da69a35549951c5db4c416"}
