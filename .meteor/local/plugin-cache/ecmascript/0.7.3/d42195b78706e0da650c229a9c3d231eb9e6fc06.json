{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","createClass","classCallCheck","extends","typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"lodash/isEqual","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_isEqual"}]},{"source":"lodash/at","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_at"}]},{"source":"lodash/set","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_set"}]},{"source":"lodash/update","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_update"}]},{"source":"lodash/map","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_map"}]},{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"classnames","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classnames"}]},{"source":"/lib/api","imported":["toCamelCase"],"specifiers":[{"kind":"named","imported":"toCamelCase","local":"toCamelCase"}]},{"source":"../","imported":["Switch","Button","TextField","Select","FormActions"],"specifiers":[{"kind":"named","imported":"Switch","local":"Switch"},{"kind":"named","imported":"Button","local":"Button"},{"kind":"named","imported":"TextField","local":"TextField"},{"kind":"named","imported":"Select","local":"Select"},{"kind":"named","imported":"FormActions","local":"FormActions"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui/client/components/forms/form.js","filenameRelative":"/imports/plugins/core/ui/client/components/forms/form.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/components/forms/form.js"],"names":["React","Component","PropTypes","classnames","toCamelCase","Switch","Button","TextField","Select","FormActions","Form","defaultProps","autoSave","propTypes","bool","doc","object","docPath","string","fields","hideFields","arrayOf","name","onSubmit","func","schema","constructor","props","state","validationSchema","isValid","undefined","componentWillReceiveProps","nextProps","setState","objectKeys","Array","isArray","fieldNames","map","fieldName","pick","newContext","namedContext","_objectKeys","_schema","valueForField","picked","length","validate","docToValidate","cleanedObject","_simpleSchema","clean","isFieldHidden","indexOf","handleChange","event","value","newdoc","handleSubmit","handleSelectChange","Event","preventDefault","renderFormField","field","sharedProps","i18nKeyLabel","key","label","fieldElement","helpText","type","options","fieldHasError","_invalidKeys","filter","v","validationError","message","keyErrorMessage","formGroupClassName","renderField","additionalFieldProps","fieldSchema","fieldProps","renderWithSchema","endsWith","fullFieldName","fieldData","renderFormActions","render"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/forms/form.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { map, update, set, at, isEqual } from \"lodash\";\nimport classnames from \"classnames\";\nimport { toCamelCase } from \"/lib/api\";\nimport { Switch, Button, TextField, Select, FormActions } from \"../\";\n\nclass Form extends Component {\n  static defaultProps = {\n    autoSave: false\n  }\n\n  static propTypes = {\n    autoSave: PropTypes.bool,\n    doc: PropTypes.object,\n    docPath: PropTypes.string,\n    fields: PropTypes.object,\n    hideFields: PropTypes.arrayOf(PropTypes.string),\n    name: PropTypes.string,\n    onSubmit: PropTypes.func,\n    schema: PropTypes.object\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      doc: props.doc,\n      schema: this.validationSchema(),\n      isValid: undefined\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (isEqual(nextProps.doc, this.props.doc) === false) {\n      this.setState({\n        doc: nextProps.doc,\n        schema: this.validationSchema()\n      });\n    }\n  }\n\n\n  validationSchema() {\n    const { docPath } = this.props;\n\n    if (docPath) {\n      const objectKeys = this.objectKeys[docPath + \".\"];\n      if (Array.isArray(objectKeys)) {\n        // Use the objectKeys from parent fieldset to generate\n        // actual form fields\n        const fieldNames = objectKeys.map((fieldName) => {\n          return `${docPath}.${fieldName}`;\n        });\n\n        return this.props.schema.pick(fieldNames).newContext();\n      }\n    }\n\n    return this.props.schema.namedContext();\n  }\n\n  get objectKeys() {\n    return this.props.schema._objectKeys;\n  }\n\n  get schema() {\n    return this.props.schema._schema;\n  }\n\n  valueForField(fieldName) {\n    const picked = at(this.state.doc, fieldName);\n\n    if (Array.isArray(picked) && picked.length) {\n      return picked[0];\n    }\n\n    return undefined;\n  }\n\n  validate() {\n    const { docPath } = this.props;\n\n    // Create a smaller document in order to validate without extra fields\n    const docToValidate = set(\n      {},\n      docPath,\n      at(this.state.doc, this.props.docPath)[0]\n    );\n\n    // Clean any fields not in schame to avoid needless validation errors\n    const cleanedObject = this.state.schema._simpleSchema.clean(docToValidate);\n\n    // Finally validate the document\n    this.setState({\n      isValid: this.state.schema.validate(cleanedObject)\n    });\n  }\n\n  isFieldHidden(fieldName) {\n    if (Array.isArray(this.props.hideFields) && this.props.hideFields.indexOf(fieldName) >= 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  handleChange = (event, value, name) => {\n    const newdoc = update(this.state.doc, name, () => {\n      return value;\n    });\n\n    this.setState({\n      doc: newdoc\n    }, () => {\n      this.validate();\n    });\n\n    if (this.props.autoSave === true) {\n      this.handleSubmit(event);\n    }\n  }\n\n  handleSelectChange = (value, name) => {\n    this.handleChange(new Event(\"onSelect\"), value, name);\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.validate();\n\n    if (this.props.onSubmit) {\n      this.props.onSubmit(event, {\n        doc: this.state.doc,\n        isValid: this.state.isValid\n      }, this.props.name);\n    }\n  }\n\n  renderFormField(field) {\n    const sharedProps = {\n      i18nKeyLabel: `settings.${toCamelCase(field.name)}`,\n      key: field.name,\n      label: field.label,\n      name: field.name\n    };\n\n    let fieldElement;\n    let helpText;\n\n    switch (field.type) {\n      case \"boolean\":\n        fieldElement = (\n          <Switch\n            {...sharedProps}\n            onChange={this.handleChange}\n            checked={this.valueForField(field.name)}\n          />\n        );\n        break;\n      case \"string\":\n        fieldElement = (\n          <TextField\n            {...sharedProps}\n            onChange={this.handleChange}\n            value={this.valueForField(field.name)}\n          />\n        );\n        break;\n      case \"select\":\n        fieldElement = (\n          <Select\n            {...sharedProps}\n            onChange={this.handleSelectChange}\n            options={field.options}\n            value={this.valueForField(field.name)}\n          />\n        );\n        break;\n      default:\n        return null;\n    }\n\n    let fieldHasError = false;\n\n    if (this.state.isValid === false) {\n      this.state.schema._invalidKeys\n        .filter((v) => v.name === field.name)\n        .map((validationError) => {\n          const message = this.state.schema.keyErrorMessage(validationError.name);\n          fieldHasError = true;\n\n          helpText = (\n            <div className=\"help-block\">\n              {message}\n            </div>\n          );\n        });\n    }\n\n    const formGroupClassName = classnames({\n      \"rui\": true,\n      \"form-group\": true,\n      \"has-error\": fieldHasError\n    });\n\n    return (\n      <div key={`${sharedProps.key}-group`} className={formGroupClassName}>\n        {fieldElement}\n        {helpText}\n      </div>\n    );\n  }\n\n  renderField(field, additionalFieldProps) {\n    const { fieldName } = field;\n\n    if (this.isFieldHidden(fieldName) === false) {\n      const fieldSchema = this.schema[fieldName];\n      const fieldProps = {\n        ...fieldSchema,\n        name: fieldName,\n        type: typeof fieldSchema.type(),\n        ...additionalFieldProps\n      };\n\n      return this.renderFormField(fieldProps);\n    }\n\n    return null;\n  }\n\n  renderWithSchema() {\n    const { docPath } = this.props;\n\n    if (this.props.schema) {\n      // Render form with a specific docPath\n      if (docPath) {\n        return map(this.schema, (field, key) => { // eslint-disable-line consistent-return\n          if (key.endsWith(docPath)) {\n            const objectKeys = this.objectKeys[docPath + \".\"];\n            if (Array.isArray(objectKeys)) {\n              // Use the objectKeys from parent fieldset to generate\n              // actual form fields\n              return objectKeys.map((fieldName) => {\n                const fullFieldName = docPath ? `${docPath}.${fieldName}` : fieldName;\n                return this.renderField({ fieldName: fullFieldName });\n              });\n            }\n\n            return this.renderField({ fieldName: key });\n          }\n        });\n      }\n\n      // Render form by only using desired fields from schema\n      if (this.props.fields) {\n        return map(this.props.fields, (fieldData, key) => { // eslint-disable-line consistent-return\n          const fieldSchema = this.schema[key];\n          if (fieldSchema) {\n            return this.renderField({ fieldName: key }, fieldData);\n          }\n        });\n      }\n\n      // Render all fields if none of the options are set above\n      return map(this.schema, (field, key) => { // eslint-disable-line consistent-return\n        return this.renderField({ fieldName: key });\n      });\n    }\n\n    return null;\n  }\n\n  renderFormActions() {\n    if (this.props.autoSave === false) {\n      return (\n        <FormActions>\n          <Button\n            label={\"Save Changes\"}\n            bezelStyle={\"solid\"}\n            primary={true}\n            type=\"submit\"\n          />\n        </FormActions>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        {this.renderWithSchema()}\n        {this.renderFormActions()}\n      </form>\n    );\n  }\n}\n\nexport default Form;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/components/forms/form.js.map","sourceFileName":"/imports/plugins/core/ui/client/components/forms/form.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"form"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _isEqual = void 0;\n\nmodule.importSync(\"lodash/isEqual\", {\n  \"default\": function (v) {\n    _isEqual = v;\n  }\n}, 0);\n\nvar _at = void 0;\n\nmodule.importSync(\"lodash/at\", {\n  \"default\": function (v) {\n    _at = v;\n  }\n}, 1);\n\nvar _set = void 0;\n\nmodule.importSync(\"lodash/set\", {\n  \"default\": function (v) {\n    _set = v;\n  }\n}, 2);\n\nvar _update = void 0;\n\nmodule.importSync(\"lodash/update\", {\n  \"default\": function (v) {\n    _update = v;\n  }\n}, 3);\n\nvar _map = void 0;\n\nmodule.importSync(\"lodash/map\", {\n  \"default\": function (v) {\n    _map = v;\n  }\n}, 4);\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 5);\nvar classnames = void 0;\nmodule.importSync(\"classnames\", {\n  \"default\": function (v) {\n    classnames = v;\n  }\n}, 6);\nvar toCamelCase = void 0;\nmodule.importSync(\"/lib/api\", {\n  toCamelCase: function (v) {\n    toCamelCase = v;\n  }\n}, 7);\nvar Switch = void 0,\n    Button = void 0,\n    TextField = void 0,\n    Select = void 0,\n    FormActions = void 0;\nmodule.importSync(\"../\", {\n  Switch: function (v) {\n    Switch = v;\n  },\n  Button: function (v) {\n    Button = v;\n  },\n  TextField: function (v) {\n    TextField = v;\n  },\n  Select: function (v) {\n    Select = v;\n  },\n  FormActions: function (v) {\n    FormActions = v;\n  }\n}, 8);\n\nvar Form = function (_Component) {\n  (0, _inherits3.default)(Form, _Component);\n\n  function Form(props) {\n    (0, _classCallCheck3.default)(this, Form);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _this.handleChange = function (event, value, name) {\n      var newdoc = _update(_this.state.doc, name, function () {\n        return value;\n      });\n\n      _this.setState({\n        doc: newdoc\n      }, function () {\n        _this.validate();\n      });\n\n      if (_this.props.autoSave === true) {\n        _this.handleSubmit(event);\n      }\n    };\n\n    _this.handleSelectChange = function (value, name) {\n      _this.handleChange(new Event(\"onSelect\"), value, name);\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n\n      _this.validate();\n\n      if (_this.props.onSubmit) {\n        _this.props.onSubmit(event, {\n          doc: _this.state.doc,\n          isValid: _this.state.isValid\n        }, _this.props.name);\n      }\n    };\n\n    _this.state = {\n      doc: props.doc,\n      schema: _this.validationSchema(),\n      isValid: undefined\n    };\n    return _this;\n  }\n\n  Form.prototype.componentWillReceiveProps = function () {\n    function componentWillReceiveProps(nextProps) {\n      if (_isEqual(nextProps.doc, this.props.doc) === false) {\n        this.setState({\n          doc: nextProps.doc,\n          schema: this.validationSchema()\n        });\n      }\n    }\n\n    return componentWillReceiveProps;\n  }();\n\n  Form.prototype.validationSchema = function () {\n    function validationSchema() {\n      var docPath = this.props.docPath;\n\n      if (docPath) {\n        var objectKeys = this.objectKeys[docPath + \".\"];\n\n        if (Array.isArray(objectKeys)) {\n          // Use the objectKeys from parent fieldset to generate\n          // actual form fields\n          var fieldNames = objectKeys.map(function (fieldName) {\n            return docPath + \".\" + fieldName;\n          });\n          return this.props.schema.pick(fieldNames).newContext();\n        }\n      }\n\n      return this.props.schema.namedContext();\n    }\n\n    return validationSchema;\n  }();\n\n  Form.prototype.valueForField = function () {\n    function valueForField(fieldName) {\n      var picked = _at(this.state.doc, fieldName);\n\n      if (Array.isArray(picked) && picked.length) {\n        return picked[0];\n      }\n\n      return undefined;\n    }\n\n    return valueForField;\n  }();\n\n  Form.prototype.validate = function () {\n    function validate() {\n      var docPath = this.props.docPath; // Create a smaller document in order to validate without extra fields\n\n      var docToValidate = _set({}, docPath, _at(this.state.doc, this.props.docPath)[0]); // Clean any fields not in schame to avoid needless validation errors\n\n\n      var cleanedObject = this.state.schema._simpleSchema.clean(docToValidate); // Finally validate the document\n\n\n      this.setState({\n        isValid: this.state.schema.validate(cleanedObject)\n      });\n    }\n\n    return validate;\n  }();\n\n  Form.prototype.isFieldHidden = function () {\n    function isFieldHidden(fieldName) {\n      if (Array.isArray(this.props.hideFields) && this.props.hideFields.indexOf(fieldName) >= 0) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return isFieldHidden;\n  }();\n\n  Form.prototype.renderFormField = function () {\n    function renderFormField(field) {\n      var _this2 = this;\n\n      var sharedProps = {\n        i18nKeyLabel: \"settings.\" + toCamelCase(field.name),\n        key: field.name,\n        label: field.label,\n        name: field.name\n      };\n      var fieldElement = void 0;\n      var helpText = void 0;\n\n      switch (field.type) {\n        case \"boolean\":\n          fieldElement = React.createElement(Switch, (0, _extends3.default)({}, sharedProps, {\n            onChange: this.handleChange,\n            checked: this.valueForField(field.name)\n          }));\n          break;\n\n        case \"string\":\n          fieldElement = React.createElement(TextField, (0, _extends3.default)({}, sharedProps, {\n            onChange: this.handleChange,\n            value: this.valueForField(field.name)\n          }));\n          break;\n\n        case \"select\":\n          fieldElement = React.createElement(Select, (0, _extends3.default)({}, sharedProps, {\n            onChange: this.handleSelectChange,\n            options: field.options,\n            value: this.valueForField(field.name)\n          }));\n          break;\n\n        default:\n          return null;\n      }\n\n      var fieldHasError = false;\n\n      if (this.state.isValid === false) {\n        this.state.schema._invalidKeys.filter(function (v) {\n          return v.name === field.name;\n        }).map(function (validationError) {\n          var message = _this2.state.schema.keyErrorMessage(validationError.name);\n\n          fieldHasError = true;\n          helpText = React.createElement(\n            \"div\",\n            {\n              className: \"help-block\"\n            },\n            message\n          );\n        });\n      }\n\n      var formGroupClassName = classnames({\n        \"rui\": true,\n        \"form-group\": true,\n        \"has-error\": fieldHasError\n      });\n      return React.createElement(\n        \"div\",\n        {\n          key: sharedProps.key + \"-group\",\n          className: formGroupClassName\n        },\n        fieldElement,\n        helpText\n      );\n    }\n\n    return renderFormField;\n  }();\n\n  Form.prototype.renderField = function () {\n    function renderField(field, additionalFieldProps) {\n      var fieldName = field.fieldName;\n\n      if (this.isFieldHidden(fieldName) === false) {\n        var fieldSchema = this.schema[fieldName];\n        var fieldProps = (0, _extends3.default)({}, fieldSchema, {\n          name: fieldName,\n          type: (0, _typeof3.default)(fieldSchema.type())\n        }, additionalFieldProps);\n        return this.renderFormField(fieldProps);\n      }\n\n      return null;\n    }\n\n    return renderField;\n  }();\n\n  Form.prototype.renderWithSchema = function () {\n    function renderWithSchema() {\n      var _this3 = this;\n\n      var docPath = this.props.docPath;\n\n      if (this.props.schema) {\n        // Render form with a specific docPath\n        if (docPath) {\n          return _map(this.schema, function (field, key) {\n            // eslint-disable-line consistent-return\n            if (key.endsWith(docPath)) {\n              var objectKeys = _this3.objectKeys[docPath + \".\"];\n\n              if (Array.isArray(objectKeys)) {\n                // Use the objectKeys from parent fieldset to generate\n                // actual form fields\n                return objectKeys.map(function (fieldName) {\n                  var fullFieldName = docPath ? docPath + \".\" + fieldName : fieldName;\n                  return _this3.renderField({\n                    fieldName: fullFieldName\n                  });\n                });\n              }\n\n              return _this3.renderField({\n                fieldName: key\n              });\n            }\n          });\n        } // Render form by only using desired fields from schema\n\n\n        if (this.props.fields) {\n          return _map(this.props.fields, function (fieldData, key) {\n            // eslint-disable-line consistent-return\n            var fieldSchema = _this3.schema[key];\n\n            if (fieldSchema) {\n              return _this3.renderField({\n                fieldName: key\n              }, fieldData);\n            }\n          });\n        } // Render all fields if none of the options are set above\n\n\n        return _map(this.schema, function (field, key) {\n          // eslint-disable-line consistent-return\n          return _this3.renderField({\n            fieldName: key\n          });\n        });\n      }\n\n      return null;\n    }\n\n    return renderWithSchema;\n  }();\n\n  Form.prototype.renderFormActions = function () {\n    function renderFormActions() {\n      if (this.props.autoSave === false) {\n        return React.createElement(\n          FormActions,\n          null,\n          React.createElement(Button, {\n            label: \"Save Changes\",\n            bezelStyle: \"solid\",\n            primary: true,\n            type: \"submit\"\n          })\n        );\n      }\n    }\n\n    return renderFormActions;\n  }();\n\n  Form.prototype.render = function () {\n    function render() {\n      return React.createElement(\n        \"form\",\n        {\n          onSubmit: this.handleSubmit\n        },\n        this.renderWithSchema(),\n        this.renderFormActions()\n      );\n    }\n\n    return render;\n  }();\n\n  (0, _createClass3.default)(Form, [{\n    key: \"objectKeys\",\n    get: function () {\n      return this.props.schema._objectKeys;\n    }\n  }, {\n    key: \"schema\",\n    get: function () {\n      return this.props.schema._schema;\n    }\n  }]);\n  return Form;\n}(Component);\n\nForm.defaultProps = {\n  autoSave: false\n};\nForm.propTypes = {\n  autoSave: PropTypes.bool,\n  doc: PropTypes.object,\n  docPath: PropTypes.string,\n  fields: PropTypes.object,\n  hideFields: PropTypes.arrayOf(PropTypes.string),\n  name: PropTypes.string,\n  onSubmit: PropTypes.func,\n  schema: PropTypes.object\n};\nmodule.export(\"default\", exports.default = Form);","map":{"version":3,"sources":["/imports/plugins/core/ui/client/components/forms/form.js"],"names":["React","Component","PropTypes","classnames","toCamelCase","Switch","Button","TextField","Select","FormActions","Form","defaultProps","autoSave","propTypes","bool","doc","object","docPath","string","fields","hideFields","arrayOf","name","onSubmit","func","schema","constructor","props","state","validationSchema","isValid","undefined","componentWillReceiveProps","nextProps","setState","objectKeys","Array","isArray","fieldNames","map","fieldName","pick","newContext","namedContext","_objectKeys","_schema","valueForField","picked","length","validate","docToValidate","cleanedObject","_simpleSchema","clean","isFieldHidden","indexOf","handleChange","event","value","newdoc","handleSubmit","handleSelectChange","Event","preventDefault","renderFormField","field","sharedProps","i18nKeyLabel","key","label","fieldElement","helpText","type","options","fieldHasError","_invalidKeys","filter","v","validationError","message","keyErrorMessage","formGroupClassName","renderField","additionalFieldProps","fieldSchema","fieldProps","renderWithSchema","endsWith","fullFieldName","fieldData","renderFormActions","render"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/forms/form.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { map, update, set, at, isEqual } from \"lodash\";\nimport classnames from \"classnames\";\nimport { toCamelCase } from \"/lib/api\";\nimport { Switch, Button, TextField, Select, FormActions } from \"../\";\n\nclass Form extends Component {\n  static defaultProps = {\n    autoSave: false\n  }\n\n  static propTypes = {\n    autoSave: PropTypes.bool,\n    doc: PropTypes.object,\n    docPath: PropTypes.string,\n    fields: PropTypes.object,\n    hideFields: PropTypes.arrayOf(PropTypes.string),\n    name: PropTypes.string,\n    onSubmit: PropTypes.func,\n    schema: PropTypes.object\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      doc: props.doc,\n      schema: this.validationSchema(),\n      isValid: undefined\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (isEqual(nextProps.doc, this.props.doc) === false) {\n      this.setState({\n        doc: nextProps.doc,\n        schema: this.validationSchema()\n      });\n    }\n  }\n\n\n  validationSchema() {\n    const { docPath } = this.props;\n\n    if (docPath) {\n      const objectKeys = this.objectKeys[docPath + \".\"];\n      if (Array.isArray(objectKeys)) {\n        // Use the objectKeys from parent fieldset to generate\n        // actual form fields\n        const fieldNames = objectKeys.map((fieldName) => {\n          return `${docPath}.${fieldName}`;\n        });\n\n        return this.props.schema.pick(fieldNames).newContext();\n      }\n    }\n\n    return this.props.schema.namedContext();\n  }\n\n  get objectKeys() {\n    return this.props.schema._objectKeys;\n  }\n\n  get schema() {\n    return this.props.schema._schema;\n  }\n\n  valueForField(fieldName) {\n    const picked = at(this.state.doc, fieldName);\n\n    if (Array.isArray(picked) && picked.length) {\n      return picked[0];\n    }\n\n    return undefined;\n  }\n\n  validate() {\n    const { docPath } = this.props;\n\n    // Create a smaller document in order to validate without extra fields\n    const docToValidate = set(\n      {},\n      docPath,\n      at(this.state.doc, this.props.docPath)[0]\n    );\n\n    // Clean any fields not in schame to avoid needless validation errors\n    const cleanedObject = this.state.schema._simpleSchema.clean(docToValidate);\n\n    // Finally validate the document\n    this.setState({\n      isValid: this.state.schema.validate(cleanedObject)\n    });\n  }\n\n  isFieldHidden(fieldName) {\n    if (Array.isArray(this.props.hideFields) && this.props.hideFields.indexOf(fieldName) >= 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  handleChange = (event, value, name) => {\n    const newdoc = update(this.state.doc, name, () => {\n      return value;\n    });\n\n    this.setState({\n      doc: newdoc\n    }, () => {\n      this.validate();\n    });\n\n    if (this.props.autoSave === true) {\n      this.handleSubmit(event);\n    }\n  }\n\n  handleSelectChange = (value, name) => {\n    this.handleChange(new Event(\"onSelect\"), value, name);\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.validate();\n\n    if (this.props.onSubmit) {\n      this.props.onSubmit(event, {\n        doc: this.state.doc,\n        isValid: this.state.isValid\n      }, this.props.name);\n    }\n  }\n\n  renderFormField(field) {\n    const sharedProps = {\n      i18nKeyLabel: `settings.${toCamelCase(field.name)}`,\n      key: field.name,\n      label: field.label,\n      name: field.name\n    };\n\n    let fieldElement;\n    let helpText;\n\n    switch (field.type) {\n      case \"boolean\":\n        fieldElement = (\n          <Switch\n            {...sharedProps}\n            onChange={this.handleChange}\n            checked={this.valueForField(field.name)}\n          />\n        );\n        break;\n      case \"string\":\n        fieldElement = (\n          <TextField\n            {...sharedProps}\n            onChange={this.handleChange}\n            value={this.valueForField(field.name)}\n          />\n        );\n        break;\n      case \"select\":\n        fieldElement = (\n          <Select\n            {...sharedProps}\n            onChange={this.handleSelectChange}\n            options={field.options}\n            value={this.valueForField(field.name)}\n          />\n        );\n        break;\n      default:\n        return null;\n    }\n\n    let fieldHasError = false;\n\n    if (this.state.isValid === false) {\n      this.state.schema._invalidKeys\n        .filter((v) => v.name === field.name)\n        .map((validationError) => {\n          const message = this.state.schema.keyErrorMessage(validationError.name);\n          fieldHasError = true;\n\n          helpText = (\n            <div className=\"help-block\">\n              {message}\n            </div>\n          );\n        });\n    }\n\n    const formGroupClassName = classnames({\n      \"rui\": true,\n      \"form-group\": true,\n      \"has-error\": fieldHasError\n    });\n\n    return (\n      <div key={`${sharedProps.key}-group`} className={formGroupClassName}>\n        {fieldElement}\n        {helpText}\n      </div>\n    );\n  }\n\n  renderField(field, additionalFieldProps) {\n    const { fieldName } = field;\n\n    if (this.isFieldHidden(fieldName) === false) {\n      const fieldSchema = this.schema[fieldName];\n      const fieldProps = {\n        ...fieldSchema,\n        name: fieldName,\n        type: typeof fieldSchema.type(),\n        ...additionalFieldProps\n      };\n\n      return this.renderFormField(fieldProps);\n    }\n\n    return null;\n  }\n\n  renderWithSchema() {\n    const { docPath } = this.props;\n\n    if (this.props.schema) {\n      // Render form with a specific docPath\n      if (docPath) {\n        return map(this.schema, (field, key) => { // eslint-disable-line consistent-return\n          if (key.endsWith(docPath)) {\n            const objectKeys = this.objectKeys[docPath + \".\"];\n            if (Array.isArray(objectKeys)) {\n              // Use the objectKeys from parent fieldset to generate\n              // actual form fields\n              return objectKeys.map((fieldName) => {\n                const fullFieldName = docPath ? `${docPath}.${fieldName}` : fieldName;\n                return this.renderField({ fieldName: fullFieldName });\n              });\n            }\n\n            return this.renderField({ fieldName: key });\n          }\n        });\n      }\n\n      // Render form by only using desired fields from schema\n      if (this.props.fields) {\n        return map(this.props.fields, (fieldData, key) => { // eslint-disable-line consistent-return\n          const fieldSchema = this.schema[key];\n          if (fieldSchema) {\n            return this.renderField({ fieldName: key }, fieldData);\n          }\n        });\n      }\n\n      // Render all fields if none of the options are set above\n      return map(this.schema, (field, key) => { // eslint-disable-line consistent-return\n        return this.renderField({ fieldName: key });\n      });\n    }\n\n    return null;\n  }\n\n  renderFormActions() {\n    if (this.props.autoSave === false) {\n      return (\n        <FormActions>\n          <Button\n            label={\"Save Changes\"}\n            bezelStyle={\"solid\"}\n            primary={true}\n            type=\"submit\"\n          />\n        </FormActions>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        {this.renderWithSchema()}\n        {this.renderFormActions()}\n      </form>\n    );\n  }\n}\n\nexport default Form;\n"]},"hash":"d42195b78706e0da650c229a9c3d231eb9e6fc06"}
