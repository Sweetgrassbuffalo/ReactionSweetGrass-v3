{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","createClass","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"meteor/gadicc:blaze-react-component","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Blaze"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/lib/api/compose","imported":["composeWithTracker"],"specifiers":[{"kind":"named","imported":"composeWithTracker","local":"composeWithTracker"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["Card","CardHeader","CardBody"],"specifiers":[{"kind":"named","imported":"Card","local":"Card"},{"kind":"named","imported":"CardHeader","local":"CardHeader"},{"kind":"named","imported":"CardBody","local":"CardBody"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui/client/components/cards/settingsCard.js","filenameRelative":"/imports/plugins/core/ui/client/components/cards/settingsCard.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/components/cards/settingsCard.js"],"names":["React","Component","PropTypes","Blaze","Reaction","composeWithTracker","Card","CardHeader","CardBody","SettingsCard","defaultProps","showSwitch","propTypes","children","node","enabled","bool","expanded","i18nKeyTitle","string","icon","name","onExpand","func","onSwitchChange","packageName","padded","preferences","object","saveOpenStateToPreferences","template","any","title","handleSwitchChange","event","isChecked","props","handleExpand","card","isExpanded","updateUserPreferences","renderCardBody","render","composer","onData","getUserPreferences","decoratedComponent"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAKA,AAAO,AAAS,AAAW,AAAiB,AAC5C,AAAO,AAAW,AAClB,AAAS,AAAgB,AACzB,AAAS,AAA0B,AACnC,AAAS,AAAM,AAAY,AAAgB,AAE3C,AAAM,AAAqB,AAAU,AACnC,AAAO,AAAe,AACpB;;;;;;;;;;;;;;0JAqBF,iDAMA;iBAAe,AAAC,MAAD,AAAQ,MAAR,AAAc,AAAM,mBAApB,AAAmC,YAChD;AAAI,cAAK,MAAT,AAAI,AAAW,AAAU,6CACvB;AAAA,AAAK,AAAM,AAAS,AAAO,AAAM,AAAM,AACxC;AAED,aAAI,AAAK,yBAAL,AAAW,OAAX,MAA0B,MAAA,AAAK,AAAM,YAAzC,AAAqE,AACnE;gBAAS,gBAAT,AAA+B,AAAK,AAAM,AAAa,AAAiB,AACtE;AAAC,cAAK,MAAN,AAAC,AAAW,SAAO,mBADmD;AAN5E,AAMI,AAGD,AACF;;;;;gEAED,AAAI,0EAAJ,AAAiB,cACf,AAAI,AAAK,AAAM,AAAe,AAAK,AAAM,AAA4B,AACnE;AAAA,AAAO,AAAK,AAAM,AAAY,AAAK,AAAM,AAC1C;AAED,AAAO,AAAK;;;yBAUL,AAAK;8BAAZ,AAAO,AAAW,AACnB;;AAED,mCAAS;+BACP,AACE,AAAC,AACC,AAAW,AAAC,AACZ,AAAS,AAAC,AAAK,AACf,AAAS,AAAC,AAAK,AACf,AAAK,AAAC,AAAK,AAAM;;AAEjB,AAAC,AACC,AAAa,AAAC,AAAK,AAAM,AACzB,AAAK,AAAC,AAAK,AAAM,AACjB,AAAM,AAAC,AAAK,AAAM,AAClB,AAAW,AAAC,AAAK,AAAM,AACvB,AAAc,AAAC,AACf,AAAS,AAAC,AAAK,AAAM,AACrB,AAAW,AAAC,AAAK,AAAM,AACvB,AAAiB,AAAC,AAClB,AAAe,AAAC,AAAK,AAEvB,AAAC,AAAS,AAAW,AAAC,AAAM,AAAO,AAAC,AAAK,AAAM;;AAC7C,aAAC,KAAK,MAAN,AAAC;AAnBP,AAoBI,AAAE,AACJ,AAAE,AAEL;;;;;;;AAnFkC;;;sBAsFrC;AAAA,AAAS,oBAAS,KAAlB,AAAyB,AAAQ,AAC/B,AAAI;AAAM,yBAAV,AAAI,AAAqB,AAAM,AAA4B,AACzD;AAAM,qBAAc,MAApB,AAAoB,AAAS,AAAmB,AAAM,AAAa,AAAiB,AAEpF,AAAO,AAAM,AACX;;4BADF,AAAa;mCAHf,AAMC,AAAM;2BACL;AAAA,AAAO,iBAAP,AAAa,WACd;iCACF;;+BAED,AAAM;2BAAqB,MAA3B,AAA2B,AAAmB,AAAU,AAExD;AAAe,4BAAf;;;;;;;;;;;;;;;;;;;qBAtDI,AAAO,AAAW,AACnB;;iDAED;AAAiB,AACf,AAAI,AAAK,AAAM,AAAU,AACvB;;aACE,AAAC,KAAD,AAAO,MADT,AACE,AAAgB,AAAC,AAAK,AAAM,AAE/B;AAED;;;EAvDF,AAAsB;;AACR;AAGP,cAAP,AAAmB,AACjB,AAAU,AAAU,AACpB,AAAS,AAAU,AACnB;AAHF;aAGY;YACI,UAJG,AAIO,AACxB;AAAM,WAAU,UALC,AAMjB;AAAM,YAAU,UANC,AAOjB;AAAU,gBAAU,UAPH,AAQjB;kBARiB,AAQD,AAAU,AAC1B;QAAa,UATI,AASM,AACvB;AAAQ,YAAU,UAVD,AAWjB;AAAa,kBAAU,UAXN,AAYjB;yBAZiB,AAYW,AAAU,AACtC;UAAY,UAbK,AAaK,AACtB;AAAU,eAAU,UAdH,AAejB;AAAO,AAAU,wCAfnB,AAAmB;wBAkBnB;YAAqB,UAAA,AAAC,AAAO,AAAc,AACzC;AAAI,SAAO,AAAK,UAAhB,AAAI,AAAO,AAAW,AAAmB,AAAY,AACnD,AAAK,AAAM,AAAe,AAAO,AAAW,AAAK,AAAM,AAAM,AAC9D,AACF;AAtBkB,AAGG,AACpB","file":"/imports/plugins/core/ui/client/components/cards/settingsCard.js.map","sourcesContent":["/**\n * Settings Card is a composite component to standardize the\n * creation settings cards (panels) in the dashboard.\n */\n\nimport React, { Component, PropTypes } from \"react\";\nimport Blaze from \"meteor/gadicc:blaze-react-component\";\nimport { Reaction } from \"/client/api\";\nimport { composeWithTracker } from \"/lib/api/compose\";\nimport { Card, CardHeader, CardBody } from \"/imports/plugins/core/ui/client/components\";\n\nclass SettingsCard extends Component {\n  static defaultProps = {\n    showSwitch: true\n  }\n\n  static propTypes = {\n    children: PropTypes.node,\n    enabled: PropTypes.bool,\n    expanded: PropTypes.bool,\n    i18nKeyTitle: PropTypes.string,\n    icon: PropTypes.string,\n    name: PropTypes.string,\n    onExpand: PropTypes.func,\n    onSwitchChange: PropTypes.func,\n    packageName: PropTypes.string,\n    padded: PropTypes.bool,\n    preferences: PropTypes.object,\n    saveOpenStateToPreferences: PropTypes.bool,\n    showSwitch: PropTypes.bool,\n    template: PropTypes.any,\n    title: PropTypes.string\n  }\n\n  handleSwitchChange = (event, isChecked) => {\n    if (typeof this.props.onSwitchChange === \"function\") {\n      this.props.onSwitchChange(event, isChecked, this.props.name, this);\n    }\n  }\n\n  handleExpand = (event, card, name, isExpanded) => {\n    if (this.props.onExpand) {\n      this.props.onExpand(event, card, name, isExpanded);\n    }\n\n    if (this.props.packageName && this.props.saveOpenStateToPreferences) {\n      Reaction.updateUserPreferences(this.props.packageName, \"settingsCards\", {\n        [this.props.name]: isExpanded\n      });\n    }\n  }\n\n  get isExpanded() {\n    if (this.props.packageName && this.props.saveOpenStateToPreferences) {\n      return this.props.preferences[this.props.name];\n    }\n\n    return this.props.expanded;\n  }\n\n  renderCardBody() {\n    if (this.props.template) {\n      return (\n        <Blaze template={this.props.template} />\n      );\n    }\n\n    return this.props.children;\n  }\n\n  render() {\n    return (\n      <Card\n        expandable={true}\n        onExpand={this.handleExpand}\n        expanded={this.isExpanded}\n        name={this.props.name}\n      >\n        <CardHeader\n          i18nKeyTitle={this.props.i18nKeyTitle}\n          icon={this.props.icon}\n          title={this.props.title}\n          showSwitch={this.props.showSwitch}\n          actAsExpander={true}\n          switchOn={this.props.enabled}\n          switchName={this.props.name}\n          expandOnSwitchOn={true}\n          onSwitchChange={this.handleSwitchChange}\n        />\n        <CardBody expandable={true} padded={this.props.padded}>\n          {this.renderCardBody()}\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nfunction composer(props, onData) {\n  if (props.packageName && props.saveOpenStateToPreferences) {\n    const preferences = Reaction.getUserPreferences(props.packageName, \"settingsCards\", {});\n\n    onData(null, {\n      preferences\n    });\n  } else {\n    onData(null, {});\n  }\n}\n\nconst decoratedComponent = composeWithTracker(composer)(SettingsCard);\n\nexport default decoratedComponent;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/components/cards/settingsCard.js.map","sourceFileName":"/imports/plugins/core/ui/client/components/cards/settingsCard.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"settingsCard"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar Blaze = void 0;\nmodule.importSync(\"meteor/gadicc:blaze-react-component\", {\n  \"default\": function (v) {\n    Blaze = v;\n  }\n}, 1);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 2);\nvar composeWithTracker = void 0;\nmodule.importSync(\"/lib/api/compose\", {\n  composeWithTracker: function (v) {\n    composeWithTracker = v;\n  }\n}, 3);\nvar Card = void 0,\n    CardHeader = void 0,\n    CardBody = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  Card: function (v) {\n    Card = v;\n  },\n  CardHeader: function (v) {\n    CardHeader = v;\n  },\n  CardBody: function (v) {\n    CardBody = v;\n  }\n}, 4);\n\nvar SettingsCard = function (_Component) {\n  (0, _inherits3.default)(SettingsCard, _Component);\n\n  function SettingsCard() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, SettingsCard);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleSwitchChange = function (event, isChecked) {\n      if (typeof _this.props.onSwitchChange === \"function\") {\n        _this.props.onSwitchChange(event, isChecked, _this.props.name, _this);\n      }\n    }, _this.handleExpand = function (event, card, name, isExpanded) {\n      if (_this.props.onExpand) {\n        _this.props.onExpand(event, card, name, isExpanded);\n      }\n\n      if (_this.props.packageName && _this.props.saveOpenStateToPreferences) {\n        var _Reaction$updateUserP;\n\n        Reaction.updateUserPreferences(_this.props.packageName, \"settingsCards\", (_Reaction$updateUserP = {}, _Reaction$updateUserP[_this.props.name] = isExpanded, _Reaction$updateUserP));\n      }\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  SettingsCard.prototype.renderCardBody = function () {\n    function renderCardBody() {\n      if (this.props.template) {\n        return React.createElement(Blaze, {\n          template: this.props.template\n        });\n      }\n\n      return this.props.children;\n    }\n\n    return renderCardBody;\n  }();\n\n  SettingsCard.prototype.render = function () {\n    function render() {\n      return React.createElement(\n        Card,\n        {\n          expandable: true,\n          onExpand: this.handleExpand,\n          expanded: this.isExpanded,\n          name: this.props.name\n        },\n        React.createElement(CardHeader, {\n          i18nKeyTitle: this.props.i18nKeyTitle,\n          icon: this.props.icon,\n          title: this.props.title,\n          showSwitch: this.props.showSwitch,\n          actAsExpander: true,\n          switchOn: this.props.enabled,\n          switchName: this.props.name,\n          expandOnSwitchOn: true,\n          onSwitchChange: this.handleSwitchChange\n        }),\n        React.createElement(\n          CardBody,\n          {\n            expandable: true,\n            padded: this.props.padded\n          },\n          this.renderCardBody()\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  (0, _createClass3.default)(SettingsCard, [{\n    key: \"isExpanded\",\n    get: function () {\n      if (this.props.packageName && this.props.saveOpenStateToPreferences) {\n        return this.props.preferences[this.props.name];\n      }\n\n      return this.props.expanded;\n    }\n  }]);\n  return SettingsCard;\n}(Component);\n\nSettingsCard.defaultProps = {\n  showSwitch: true\n};\nSettingsCard.propTypes = {\n  children: PropTypes.node,\n  enabled: PropTypes.bool,\n  expanded: PropTypes.bool,\n  i18nKeyTitle: PropTypes.string,\n  icon: PropTypes.string,\n  name: PropTypes.string,\n  onExpand: PropTypes.func,\n  onSwitchChange: PropTypes.func,\n  packageName: PropTypes.string,\n  padded: PropTypes.bool,\n  preferences: PropTypes.object,\n  saveOpenStateToPreferences: PropTypes.bool,\n  showSwitch: PropTypes.bool,\n  template: PropTypes.any,\n  title: PropTypes.string\n};\n\nfunction composer(props, onData) {\n  if (props.packageName && props.saveOpenStateToPreferences) {\n    var preferences = Reaction.getUserPreferences(props.packageName, \"settingsCards\", {});\n    onData(null, {\n      preferences: preferences\n    });\n  } else {\n    onData(null, {});\n  }\n}\n\nvar decoratedComponent = composeWithTracker(composer)(SettingsCard);\nmodule.export(\"default\", exports.default = decoratedComponent);","map":{"version":3,"sources":["/imports/plugins/core/ui/client/components/cards/settingsCard.js"],"names":["React","Component","PropTypes","Blaze","Reaction","composeWithTracker","Card","CardHeader","CardBody","SettingsCard","defaultProps","showSwitch","propTypes","children","node","enabled","bool","expanded","i18nKeyTitle","string","icon","name","onExpand","func","onSwitchChange","packageName","padded","preferences","object","saveOpenStateToPreferences","template","any","title","handleSwitchChange","event","isChecked","props","handleExpand","card","isExpanded","updateUserPreferences","renderCardBody","render","composer","onData","getUserPreferences","decoratedComponent"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/cards/settingsCard.js.map","sourcesContent":["/**\n * Settings Card is a composite component to standardize the\n * creation settings cards (panels) in the dashboard.\n */\n\nimport React, { Component, PropTypes } from \"react\";\nimport Blaze from \"meteor/gadicc:blaze-react-component\";\nimport { Reaction } from \"/client/api\";\nimport { composeWithTracker } from \"/lib/api/compose\";\nimport { Card, CardHeader, CardBody } from \"/imports/plugins/core/ui/client/components\";\n\nclass SettingsCard extends Component {\n  static defaultProps = {\n    showSwitch: true\n  }\n\n  static propTypes = {\n    children: PropTypes.node,\n    enabled: PropTypes.bool,\n    expanded: PropTypes.bool,\n    i18nKeyTitle: PropTypes.string,\n    icon: PropTypes.string,\n    name: PropTypes.string,\n    onExpand: PropTypes.func,\n    onSwitchChange: PropTypes.func,\n    packageName: PropTypes.string,\n    padded: PropTypes.bool,\n    preferences: PropTypes.object,\n    saveOpenStateToPreferences: PropTypes.bool,\n    showSwitch: PropTypes.bool,\n    template: PropTypes.any,\n    title: PropTypes.string\n  }\n\n  handleSwitchChange = (event, isChecked) => {\n    if (typeof this.props.onSwitchChange === \"function\") {\n      this.props.onSwitchChange(event, isChecked, this.props.name, this);\n    }\n  }\n\n  handleExpand = (event, card, name, isExpanded) => {\n    if (this.props.onExpand) {\n      this.props.onExpand(event, card, name, isExpanded);\n    }\n\n    if (this.props.packageName && this.props.saveOpenStateToPreferences) {\n      Reaction.updateUserPreferences(this.props.packageName, \"settingsCards\", {\n        [this.props.name]: isExpanded\n      });\n    }\n  }\n\n  get isExpanded() {\n    if (this.props.packageName && this.props.saveOpenStateToPreferences) {\n      return this.props.preferences[this.props.name];\n    }\n\n    return this.props.expanded;\n  }\n\n  renderCardBody() {\n    if (this.props.template) {\n      return (\n        <Blaze template={this.props.template} />\n      );\n    }\n\n    return this.props.children;\n  }\n\n  render() {\n    return (\n      <Card\n        expandable={true}\n        onExpand={this.handleExpand}\n        expanded={this.isExpanded}\n        name={this.props.name}\n      >\n        <CardHeader\n          i18nKeyTitle={this.props.i18nKeyTitle}\n          icon={this.props.icon}\n          title={this.props.title}\n          showSwitch={this.props.showSwitch}\n          actAsExpander={true}\n          switchOn={this.props.enabled}\n          switchName={this.props.name}\n          expandOnSwitchOn={true}\n          onSwitchChange={this.handleSwitchChange}\n        />\n        <CardBody expandable={true} padded={this.props.padded}>\n          {this.renderCardBody()}\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nfunction composer(props, onData) {\n  if (props.packageName && props.saveOpenStateToPreferences) {\n    const preferences = Reaction.getUserPreferences(props.packageName, \"settingsCards\", {});\n\n    onData(null, {\n      preferences\n    });\n  } else {\n    onData(null, {});\n  }\n}\n\nconst decoratedComponent = composeWithTracker(composer)(SettingsCard);\n\nexport default decoratedComponent;\n"]},"hash":"b60cd6b1b55805043a0a5253f4a31a100755232d"}
