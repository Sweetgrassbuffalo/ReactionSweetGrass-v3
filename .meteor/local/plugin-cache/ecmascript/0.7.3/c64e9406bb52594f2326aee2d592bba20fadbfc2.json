{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"lodash/isEqual","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"_isEqual"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/lib/collections","imported":["Cart"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/shipping/client/templates/checkout/shipping.js","filenameRelative":"/imports/plugins/core/shipping/client/templates/checkout/shipping.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/shipping/client/templates/checkout/shipping.js"],"names":["Meteor","Template","Reaction","Cart","cartShippingQuotes","currentCart","cart","findOne","shipmentQuotes","shipping","quote","push","cartShipmentMethods","shipmentMethods","shipmentMethod","enabledShipping","enabledShippingArr","apps","Apps","provides","enabled","app","coreCheckoutShipping","onCreated","autorun","subscribe","isEnabled","length","shippingOpts","name","template","showActionView","helpers","instance","subscriptionsReady","isSelected","self","method","isReady","Subscriptions","ready","events","event","preventDefault","stopPropagation","call","_id","error","Error","dashboardRegistryEntry","shippingRegistryEntry"],"mappings":"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","file":"/imports/plugins/core/shipping/client/templates/checkout/shipping.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Reaction } from \"/client/api\";\nimport { Cart } from \"/lib/collections\";\n\n// cartShippingQuotes\n// returns multiple methods\nfunction cartShippingQuotes(currentCart) {\n  const cart = currentCart || Cart.findOne();\n  const shipmentQuotes = [];\n\n  if (cart) {\n    if (cart.shipping) {\n      for (const shipping of cart.shipping) {\n        if (shipping.shipmentQuotes) {\n          for (quote of shipping.shipmentQuotes) {\n            shipmentQuotes.push(quote);\n          }\n        }\n      }\n    }\n  }\n  return shipmentQuotes;\n}\n// cartShipmentMethods to get current shipment method\n// this returns multiple methods, if more than one carrier\n// has been chosen\nfunction cartShipmentMethods(currentCart) {\n  const cart = currentCart || Cart.findOne();\n  const shipmentMethods = [];\n\n  if (cart) {\n    if (cart.shipping) {\n      for (const shipping of cart.shipping) {\n        if (shipping.shipmentMethod) {\n          shipmentMethods.push(shipping.shipmentMethod);\n        }\n      }\n    }\n  }\n  return shipmentMethods;\n}\n\nfunction enabledShipping() {\n  const enabledShippingArr = [];\n  const apps = Reaction.Apps({\n    provides: \"shippingSettings\",\n    enabled: true\n  });\n  for (app of apps) {\n    if (app.enabled === true) enabledShippingArr.push(app);\n  }\n  return enabledShippingArr;\n}\n\n// ensure new quotes are\nTemplate.coreCheckoutShipping.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"Shipping\");\n  });\n\n  const enabled = enabledShipping();\n  const isEnabled = enabled.length;\n  const shippingOpts = {\n    provides: \"settings\",\n    name: \"settings/shipping\",\n    template: \"shippingSettings\"\n  };\n\n  // If shipping not set, show shipping settings dashboard\n  if (!isEnabled) {\n    Reaction.showActionView(shippingOpts);\n  }\n});\n\nTemplate.coreCheckoutShipping.helpers({\n  // retrieves current rates and updates shipping rates\n  // in the users cart collection (historical, and prevents repeated rate lookup)\n  shipmentQuotes: function () {\n    const instance = Template.instance();\n    if (instance.subscriptionsReady()) {\n      const cart = Cart.findOne();\n      return cartShippingQuotes(cart);\n    }\n  },\n  // helper to display currently selected shipmentMethod\n  isSelected: function () {\n    const self = this;\n    const shipmentMethods = cartShipmentMethods();\n\n    for (method of shipmentMethods) {\n      // if there is already a selected method, set active\n      if (_.isEqual(self.method, method)) {\n        return \"active\";\n      }\n    }\n    return null;\n  },\n\n  isReady() {\n    const instance = Template.instance();\n    const isReady = instance.subscriptionsReady();\n\n    if (Reaction.Subscriptions.Cart.ready()) {\n      if (isReady) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n});\n\n//\n// Set and store cart shipmentMethod\n// this copies from shipmentMethods (retrieved rates)\n// to shipmentMethod (selected rate)\n//\nTemplate.coreCheckoutShipping.events({\n  \"click .list-group-item\": function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const self = this;\n    const cart = Cart.findOne();\n\n    try {\n      Meteor.call(\"cart/setShipmentMethod\", cart._id, self.method);\n    } catch (error) {\n      throw new Meteor.Error(error,\n        \"Cannot change methods while processing.\");\n    }\n  },\n  \"click [data-event-action=configure-shipping]\"(event) {\n    event.preventDefault();\n\n    const dashboardRegistryEntry = Reaction.Apps({ name: \"reaction-dashboard\", provides: \"shortcut\" });\n    const shippingRegistryEntry = Reaction.Apps({ name: \"reaction-shipping\", provides: \"settings\" });\n\n    Reaction.showActionView([\n      dashboardRegistryEntry[0],\n      shippingRegistryEntry[0]\n    ]);\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/shipping/client/templates/checkout/shipping.js.map","sourceFileName":"/imports/plugins/core/shipping/client/templates/checkout/shipping.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"shipping"},"ignored":false,"code":"var _isEqual = void 0;\n\nmodule.importSync(\"lodash/isEqual\", {\n  \"default\": function (v) {\n    _isEqual = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 2);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 3);\nvar Cart = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  }\n}, 4);\n\n// cartShippingQuotes\n// returns multiple methods\nfunction cartShippingQuotes(currentCart) {\n  var cart = currentCart || Cart.findOne();\n  var shipmentQuotes = [];\n\n  if (cart) {\n    if (cart.shipping) {\n      for (var _iterator = cart.shipping, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var shipping = _ref;\n\n        if (shipping.shipmentQuotes) {\n          for (var _iterator2 = shipping.shipmentQuotes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n            if (_isArray2) {\n              if (_i2 >= _iterator2.length) break;\n              quote = _iterator2[_i2++];\n            } else {\n              _i2 = _iterator2.next();\n              if (_i2.done) break;\n              quote = _i2.value;\n            }\n\n            shipmentQuotes.push(quote);\n          }\n        }\n      }\n    }\n  }\n\n  return shipmentQuotes;\n} // cartShipmentMethods to get current shipment method\n// this returns multiple methods, if more than one carrier\n// has been chosen\n\n\nfunction cartShipmentMethods(currentCart) {\n  var cart = currentCart || Cart.findOne();\n  var shipmentMethods = [];\n\n  if (cart) {\n    if (cart.shipping) {\n      for (var _iterator3 = cart.shipping, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref2 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref2 = _i3.value;\n        }\n\n        var shipping = _ref2;\n\n        if (shipping.shipmentMethod) {\n          shipmentMethods.push(shipping.shipmentMethod);\n        }\n      }\n    }\n  }\n\n  return shipmentMethods;\n}\n\nfunction enabledShipping() {\n  var enabledShippingArr = [];\n  var apps = Reaction.Apps({\n    provides: \"shippingSettings\",\n    enabled: true\n  });\n\n  for (var _iterator4 = apps, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n    if (_isArray4) {\n      if (_i4 >= _iterator4.length) break;\n      app = _iterator4[_i4++];\n    } else {\n      _i4 = _iterator4.next();\n      if (_i4.done) break;\n      app = _i4.value;\n    }\n\n    if (app.enabled === true) enabledShippingArr.push(app);\n  }\n\n  return enabledShippingArr;\n} // ensure new quotes are\n\n\nTemplate.coreCheckoutShipping.onCreated(function () {\n  var _this = this;\n\n  this.autorun(function () {\n    _this.subscribe(\"Shipping\");\n  });\n  var enabled = enabledShipping();\n  var isEnabled = enabled.length;\n  var shippingOpts = {\n    provides: \"settings\",\n    name: \"settings/shipping\",\n    template: \"shippingSettings\"\n  }; // If shipping not set, show shipping settings dashboard\n\n  if (!isEnabled) {\n    Reaction.showActionView(shippingOpts);\n  }\n});\nTemplate.coreCheckoutShipping.helpers({\n  // retrieves current rates and updates shipping rates\n  // in the users cart collection (historical, and prevents repeated rate lookup)\n  shipmentQuotes: function () {\n    var instance = Template.instance();\n\n    if (instance.subscriptionsReady()) {\n      var cart = Cart.findOne();\n      return cartShippingQuotes(cart);\n    }\n  },\n  // helper to display currently selected shipmentMethod\n  isSelected: function () {\n    var self = this;\n    var shipmentMethods = cartShipmentMethods();\n\n    for (var _iterator5 = shipmentMethods, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n      if (_isArray5) {\n        if (_i5 >= _iterator5.length) break;\n        method = _iterator5[_i5++];\n      } else {\n        _i5 = _iterator5.next();\n        if (_i5.done) break;\n        method = _i5.value;\n      }\n\n      // if there is already a selected method, set active\n      if (_isEqual(self.method, method)) {\n        return \"active\";\n      }\n    }\n\n    return null;\n  },\n  isReady: function () {\n    var instance = Template.instance();\n    var isReady = instance.subscriptionsReady();\n\n    if (Reaction.Subscriptions.Cart.ready()) {\n      if (isReady) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}); //\n// Set and store cart shipmentMethod\n// this copies from shipmentMethods (retrieved rates)\n// to shipmentMethod (selected rate)\n//\n\nTemplate.coreCheckoutShipping.events({\n  \"click .list-group-item\": function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    var self = this;\n    var cart = Cart.findOne();\n\n    try {\n      Meteor.call(\"cart/setShipmentMethod\", cart._id, self.method);\n    } catch (error) {\n      throw new Meteor.Error(error, \"Cannot change methods while processing.\");\n    }\n  },\n  \"click [data-event-action=configure-shipping]\": function (event) {\n    event.preventDefault();\n    var dashboardRegistryEntry = Reaction.Apps({\n      name: \"reaction-dashboard\",\n      provides: \"shortcut\"\n    });\n    var shippingRegistryEntry = Reaction.Apps({\n      name: \"reaction-shipping\",\n      provides: \"settings\"\n    });\n    Reaction.showActionView([dashboardRegistryEntry[0], shippingRegistryEntry[0]]);\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/shipping/client/templates/checkout/shipping.js"],"names":["Meteor","Template","Reaction","Cart","cartShippingQuotes","currentCart","cart","findOne","shipmentQuotes","shipping","quote","push","cartShipmentMethods","shipmentMethods","shipmentMethod","enabledShipping","enabledShippingArr","apps","Apps","provides","enabled","app","coreCheckoutShipping","onCreated","autorun","subscribe","isEnabled","length","shippingOpts","name","template","showActionView","helpers","instance","subscriptionsReady","isSelected","self","method","isReady","Subscriptions","ready","events","event","preventDefault","stopPropagation","call","_id","error","Error","dashboardRegistryEntry","shippingRegistryEntry"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAc,AACvB,AAAS,AAAgB,AACzB,AAAS,AAAgB,AACzB,AAAS,AAAY,AAErB,AACA;;;AACA,AAAS,AAAmB,AAAa;AACvC,AAAM,SAAO,mBAAe,AAAK,aAAjC,AAA4B,AAC5B;MAAM,OAAN,AAAuB;uBAEvB,AAAI,AAAM,AACR;;MAAI,MAAJ,AAAS,AAAU,AACjB;QAAK,KAAM,UAAX,AAAuB,AAAK,AAAU,AACpC;AAAI,gCAAJ,AAA6B;AAC3B;;;;;;;;;;;YADW;;YACX,AAAK,SAAS,AAAS,gBAAvB,AAAuC,AACrC;gCAAA,AAAe,AAAK,SAApB;AACD;;;;;;;;;gCACF;AACF;AACF;AACF;;AACD;;SAAA,AAAO,AACR;AACD,A,EACA;AACA;;;;0CACA;MAAS,OAAT,AAA6B,oBAA7B,AAA0C,AACxC;MAAM,AAAO,kBAAb,AAA4B,AAAK,AACjC,AAAM,AAAkB;;YAExB;AAAI,QAAJ,AAAU,eACR;AAAI,AAAK;AACP;;;;;;;;;;;YADF,AAAmB;;AACZ,YAAM,SAAX,AAAuB,AAAK,gBAA5B,AAAsC,AACpC;AAAI,AAAS,+BAAb,AAA6B,SAC3B;AAAA,AAAgB,AAAK,AAAS,AAC/B;AACF;AACF;AACF;;;AACD,AAAO;;AACR;2BAED;MAAS,gBAAT,AAA2B;AACnB,cAAN,AAA2B,AAC3B;AAAM,aAAO,AAAS,AAAK,AACzB,AAAU,AACV;AAHF;;;AACa,AAAc;;AAEhB;;;;;;;AAFX;AAIA;;AAAK,SAAL,AAAY,AAAM,AAChB;AAAA,AAAI,AAAI,AAAY,AAAM,AAAmB,AAAK,AACnD;;;AACD,SAAA,AAAO;A,AACR;;AAED;;AACA,AAAS,AAAqB,AAAU,AAAY,AAClD;AAAK,MAAL,AAAa,UAAM,AACjB;MAAA,AAAK,AAAU,oBAAf,AACD;AAFD;AAIM,cAAN,AAAgB,AAChB;AAAM,UAAN,AAAkB,AAAQ,AAC1B;AAAM,cAAe,AACnB,AAAU,AACV,AAAM,AACN;AALF,KAEqB,AAGT;;AAVsC,AAOlD,AAMA;4BACA;AAAA,AAAI,AAAC,AAAW,AACd;AAAA,AAAS,AAAe,AACzB;AAhBH,AAiBC;AAED,AAAS,AAAqB,AAAQ,AACpC;AACA;8BACA;QAAgB,oBAAY,AAC1B;;QAAM,SAAW,AAAS,sBAA1B;sBACA;AAAI,aAAS,mBAAb,AAAI,AAA+B,AACjC;AAAA,AAAM,AAAO,AAAK,AAClB;AAAA,AAAO,AAAmB,AAC3B;AACF;AATmC,0BAUpC;eACA;QAAY,AAAY,kBACtB,AAAM,AAAO,AACb;;0BAAwB;AAAxB;;AAAM;;;;;;;AAEN;AAAK,UAAL,AAAe,sBAAf,AAAgC,SAC9B;eACA;AAAA,AAAI,AAAU,AAAK,AAAQ,AAAS,AAClC;AAAA,AAAO,AACR;;WACF;AACD;AAAO,uBArB2B,AAqBlC,AACD;;2BAED,AAAU,AACR;;QAAM,SAAW,AAAS,mBAA1B,AAAiB,SACjB;UAAM,SAAN,AAAgB,AAAS;eAEzB;AAAA,AAAI,AAAS,AAAc,AAAK,AAAS,AACvC;AAAA,AAAI,AAAS,AACX,AAAO,AACR;;WACF;AAED,AAAO;AAlCX,IAmCG;;AAnCH,A,AAAsC,AAsCtC;AACA;AACA;;AACA;;UAEA;AAAS,UAAT,AAA8B,AAAO,AACnC;eAA0B,AAAU,AAAO,AACzC;QAAM,YAAN,AACA,AAAM,AACN;;QAAA,AAAM,AAAO,AACb;AAAM,aAAO,KAAb,AAAa,AAAK;oBAElB;AAAI,6BACF,OAAA,AAAO,AAAK,AAA0B,AAAK,AAAK,AAAK,AACtD;AAFD,AAEE,AAAO,AAAO,AACd;AAAA,AAAM,AAAI,AAAO,AAAM,AACrB,AACH;mEAZgC,AAalC;UACD;;AAAA,AAAsD;gBACpD;AAD6C;QAC7C,AAAM;;gBAEN,AAAM,AAAyB,AAAS,AAAK,AAAE;;AAAM,4BAAR,AAA8B,CAAU,uBAAtD,AAAc,IAA7C,sBACA,AAAM,AAAwB,AAAS,AAAK,AAAE;AAlBlD,AAAqC,AAkBjC,AAA8B,AAAc,AAAQ,AAAqB,AAAU,AAEnF,AAAS,AAAe,AACtB,AAAuB,AACvB,AAAsB,AAEzB;AAzBH","file":"/imports/plugins/core/shipping/client/templates/checkout/shipping.js.map","sourcesContent":["import _ from \"lodash\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\nimport { Reaction } from \"/client/api\";\nimport { Cart } from \"/lib/collections\";\n\n// cartShippingQuotes\n// returns multiple methods\nfunction cartShippingQuotes(currentCart) {\n  const cart = currentCart || Cart.findOne();\n  const shipmentQuotes = [];\n\n  if (cart) {\n    if (cart.shipping) {\n      for (const shipping of cart.shipping) {\n        if (shipping.shipmentQuotes) {\n          for (quote of shipping.shipmentQuotes) {\n            shipmentQuotes.push(quote);\n          }\n        }\n      }\n    }\n  }\n  return shipmentQuotes;\n}\n// cartShipmentMethods to get current shipment method\n// this returns multiple methods, if more than one carrier\n// has been chosen\nfunction cartShipmentMethods(currentCart) {\n  const cart = currentCart || Cart.findOne();\n  const shipmentMethods = [];\n\n  if (cart) {\n    if (cart.shipping) {\n      for (const shipping of cart.shipping) {\n        if (shipping.shipmentMethod) {\n          shipmentMethods.push(shipping.shipmentMethod);\n        }\n      }\n    }\n  }\n  return shipmentMethods;\n}\n\nfunction enabledShipping() {\n  const enabledShippingArr = [];\n  const apps = Reaction.Apps({\n    provides: \"shippingSettings\",\n    enabled: true\n  });\n  for (app of apps) {\n    if (app.enabled === true) enabledShippingArr.push(app);\n  }\n  return enabledShippingArr;\n}\n\n// ensure new quotes are\nTemplate.coreCheckoutShipping.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"Shipping\");\n  });\n\n  const enabled = enabledShipping();\n  const isEnabled = enabled.length;\n  const shippingOpts = {\n    provides: \"settings\",\n    name: \"settings/shipping\",\n    template: \"shippingSettings\"\n  };\n\n  // If shipping not set, show shipping settings dashboard\n  if (!isEnabled) {\n    Reaction.showActionView(shippingOpts);\n  }\n});\n\nTemplate.coreCheckoutShipping.helpers({\n  // retrieves current rates and updates shipping rates\n  // in the users cart collection (historical, and prevents repeated rate lookup)\n  shipmentQuotes: function () {\n    const instance = Template.instance();\n    if (instance.subscriptionsReady()) {\n      const cart = Cart.findOne();\n      return cartShippingQuotes(cart);\n    }\n  },\n  // helper to display currently selected shipmentMethod\n  isSelected: function () {\n    const self = this;\n    const shipmentMethods = cartShipmentMethods();\n\n    for (method of shipmentMethods) {\n      // if there is already a selected method, set active\n      if (_.isEqual(self.method, method)) {\n        return \"active\";\n      }\n    }\n    return null;\n  },\n\n  isReady() {\n    const instance = Template.instance();\n    const isReady = instance.subscriptionsReady();\n\n    if (Reaction.Subscriptions.Cart.ready()) {\n      if (isReady) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n});\n\n//\n// Set and store cart shipmentMethod\n// this copies from shipmentMethods (retrieved rates)\n// to shipmentMethod (selected rate)\n//\nTemplate.coreCheckoutShipping.events({\n  \"click .list-group-item\": function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const self = this;\n    const cart = Cart.findOne();\n\n    try {\n      Meteor.call(\"cart/setShipmentMethod\", cart._id, self.method);\n    } catch (error) {\n      throw new Meteor.Error(error,\n        \"Cannot change methods while processing.\");\n    }\n  },\n  \"click [data-event-action=configure-shipping]\"(event) {\n    event.preventDefault();\n\n    const dashboardRegistryEntry = Reaction.Apps({ name: \"reaction-dashboard\", provides: \"shortcut\" });\n    const shippingRegistryEntry = Reaction.Apps({ name: \"reaction-shipping\", provides: \"settings\" });\n\n    Reaction.showActionView([\n      dashboardRegistryEntry[0],\n      shippingRegistryEntry[0]\n    ]);\n  }\n});\n"]},"hash":"c64e9406bb52594f2326aee2d592bba20fadbfc2"}
