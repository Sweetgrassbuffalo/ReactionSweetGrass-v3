{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","createClass","classCallCheck","objectWithoutProperties","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-addons-create-fragment","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"createFragment"}]},{"source":"classnames/dedupe","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"classnames"}]},{"source":"../icon/icon.jsx","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Icon"}]},{"source":"../","imported":["Tooltip","Translation"],"specifiers":[{"kind":"named","imported":"Tooltip","local":"Tooltip"},{"kind":"named","imported":"Translation","local":"Translation"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/ui/client/components/button/button.jsx","filenameRelative":"/imports/plugins/core/ui/client/components/button/button.jsx","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/components/button/button.jsx"],"names":["React","Component","PropTypes","createFragment","classnames","Icon","Tooltip","Translation","Button","constructor","props","state","tooltipOpen","handleButtonMouseOver","bind","handleButtonMouseOut","isTooltipOpen","setState","tooltip","handleClick","event","tagName","preventDefault","toggle","onToggle","toggleOn","onValue","value","onClick","renderOnStateIcon","onIcon","renderNormalStateIcon","icon","renderIcon","renderTooltipContent","disabled","i18nKeyTooltip","renderLabel","label","toggleOnLabel","i18nKeyToggleOnLabel","i18nKeyLabel","render","active","status","primary","bezelStyle","className","containerStyle","iconAfter","i18nKeyTitle","eventAction","buttonType","tooltipPosition","attrs","classes","undefined","extraProps","href","buttonProps","Object","assign","buttonChildren","children","createElement","display","propTypes","bool","oneOf","string","node","oneOfType","object","func","any","title","defaultProps"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/button/button.jsx.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport createFragment from \"react-addons-create-fragment\";\nimport classnames from \"classnames/dedupe\";\nimport Icon from \"../icon/icon.jsx\";\nimport { Tooltip, Translation } from \"../\";\n\nclass Button extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tooltipOpen: false\n    };\n\n    this.handleButtonMouseOver = this.handleButtonMouseOver.bind(this);\n    this.handleButtonMouseOut = this.handleButtonMouseOut.bind(this);\n  }\n\n  get isTooltipOpen() {\n    return this.state.tooltipOpen;\n  }\n\n  handleButtonMouseOver() {\n    this.setState({\n      tooltipOpen: this.props.tooltip ? true : false\n    });\n  }\n\n  handleButtonMouseOut() {\n    this.setState({\n      tooltipOpen: false\n    });\n  }\n\n  handleClick = (event) => {\n    if (this.props.tagName === \"a\") {\n      event.preventDefault();\n    }\n\n    // If this is a toogle button, and has a onToggle callback function\n    if (this.props.toggle && this.props.onToggle) {\n      if (this.props.toggleOn) {\n        // If toggleOn is true, return the toggleOn value, or true\n        this.props.onToggle(event, this.props.onValue || true);\n      } else {\n        // Otherwise return the value prop, or false\n        this.props.onToggle(event, this.props.value || false);\n      }\n    } else if (this.props.onClick) {\n      this.props.onClick(event, this.props.value);\n    }\n  }\n\n  renderOnStateIcon() {\n    if (this.props.onIcon) {\n      return (\n        <Icon icon={this.props.onIcon} />\n      );\n    }\n    return null;\n  }\n\n  renderNormalStateIcon() {\n    if (this.props.icon) {\n      return (\n        <Icon icon={this.props.icon} />\n      );\n    }\n    return null;\n  }\n\n  renderIcon() {\n    if (this.props.toggle) {\n      if (this.props.toggleOn) {\n        return this.renderOnStateIcon();\n      }\n    }\n\n    return this.renderNormalStateIcon();\n  }\n\n  renderTooltipContent() {\n    if (this.isTooltipOpen && this.props.disabled === false) {\n      if (typeof this.props.tooltip === \"string\") {\n        return (\n          <Translation defaultValue={this.props.tooltip} i18nKey={this.props.i18nKeyTooltip} />\n        );\n      }\n\n      return (\n        <div>\n          {this.props.tooltip}\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  renderLabel() {\n    if (this.props.label) {\n      if (this.props.toggle) {\n        if (this.props.toggleOn && this.props.toggleOnLabel) {\n          return (\n            <Translation\n              defaultValue={this.props.toggleOnLabel}\n              i18nKey={this.props.i18nKeyToggleOnLabel}\n            />\n          );\n        }\n      }\n\n      return (\n        <Translation\n          defaultValue={this.props.label}\n          i18nKey={this.props.i18nKeyLabel}\n        />\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      active, status, toggleOn, primary, bezelStyle, className, containerStyle,\n\n      // Destructure these vars as they aren't valid as attributes on the HTML element button\n      iconAfter, label, i18nKeyTitle, i18nKeyLabel, i18nKeyTooltip, // eslint-disable-line no-unused-vars\n      tooltip, icon, toggle, onIcon, eventAction, buttonType, // eslint-disable-line no-unused-vars\n      toggleOnLabel, i18nKeyToggleOnLabel, tagName, onClick, onToggle, onValue, tooltipPosition, // eslint-disable-line no-unused-vars\n\n      // Get the rest of the properties and put them in attrs\n      // these will most likely be HTML attributes\n      ...attrs\n    } = this.props;\n\n    const classes = classnames({\n      \"rui\": true,\n      \"btn\": true,\n      \"btn-default\": !primary &&  (status === null || status === undefined || status === \"default\"),\n      \"active\": active || toggleOn,\n      \"btn-success\": status === \"success\",\n      \"btn-danger\": status === \"danger\",\n      \"btn-info\": status === \"info\",\n      \"btn-warning\": status === \"warning\",\n      \"btn-link\": status === \"link\",\n      \"btn-cta\": status === \"cta\",\n      \"btn-primary\": primary === true || status === \"primary\",\n      [bezelStyle || \"flat\"]: true\n    }, className);\n\n    const extraProps = {};\n\n    if (tagName === \"a\") {\n      extraProps.href = \"#\";\n    }\n\n    const buttonProps = Object.assign({\n      \"className\": classes,\n      \"data-event-action\": eventAction,\n      \"onMouseOut\": this.handleButtonMouseOut,\n      \"onMouseOver\": this.handleButtonMouseOver,\n      \"onClick\": this.handleClick,\n      \"type\": buttonType || \"button\"\n    }, attrs, extraProps);\n\n\n    // Create a react fragment for all the button children\n    let buttonChildren;\n\n    if (iconAfter) {\n      buttonChildren = createFragment({\n        label: this.renderLabel(),\n        icon: this.renderIcon(),\n        children: this.props.children\n      });\n    } else {\n      buttonChildren = createFragment({\n        icon: this.renderIcon(),\n        label: this.renderLabel(),\n        children: this.props.children\n      });\n    }\n\n    // Button with tooltip gets some special treatment\n    if (tooltip) {\n      return React.createElement(tagName, buttonProps,\n        <span className=\"rui btn-tooltip\" style={{ display: \"inline-flex\", ...containerStyle }}>\n          <Tooltip tooltipContent={this.renderTooltipContent()}>\n            {buttonChildren}\n          </Tooltip>\n        </span>\n      );\n    }\n\n    // Add a wrapped container with styles for standard button\n    if (containerStyle) {\n      buttonChildren = (\n        <div style={containerStyle}>\n          {buttonChildren}\n        </div>\n      );\n    }\n\n    // Normal button, without tooltip\n    return React.createElement(tagName, buttonProps, buttonChildren);\n  }\n}\n\nButton.propTypes = {\n  active: PropTypes.bool,\n  bezelStyle: PropTypes.oneOf([\"flat\", \"solid\", \"outline\"]),\n  buttonType: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  containerStyle: PropTypes.object,\n  disabled: PropTypes.bool,\n  eventAction: PropTypes.string,\n  i18nKeyLabel: PropTypes.string,\n  i18nKeyTitle: PropTypes.string,\n  i18nKeyToggleOnLabel: PropTypes.string,\n  i18nKeyTooltip: PropTypes.string,\n  icon: PropTypes.string,\n  iconAfter: PropTypes.bool,\n  label: PropTypes.string,\n  onClick: PropTypes.func,\n  onIcon: PropTypes.string,\n  onToggle: PropTypes.func,\n  onValue: PropTypes.any,\n  primary: PropTypes.bool,\n  status: PropTypes.string,\n  tagName: PropTypes.string,\n  title: PropTypes.string,\n  toggle: PropTypes.bool,\n  toggleOn: PropTypes.bool,\n  toggleOnLabel: PropTypes.string,\n  tooltip: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.node]),\n  tooltipPosition: PropTypes.string,\n  value: PropTypes.any\n};\n\nButton.defaultProps = {\n  active: false,\n  disabled: false,\n  iconAfter: false,\n  tagName: \"button\",\n  toggle: false,\n  bezelStyle: \"flat\"\n};\n\nexport default Button;\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/components/button/button.jsx.map","sourceFileName":"/imports/plugins/core/ui/client/components/button/button.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"button"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require(\"babel-runtime/helpers/objectWithoutProperties\");\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar createFragment = void 0;\nmodule.importSync(\"react-addons-create-fragment\", {\n  \"default\": function (v) {\n    createFragment = v;\n  }\n}, 1);\nvar classnames = void 0;\nmodule.importSync(\"classnames/dedupe\", {\n  \"default\": function (v) {\n    classnames = v;\n  }\n}, 2);\nvar Icon = void 0;\nmodule.importSync(\"../icon/icon.jsx\", {\n  \"default\": function (v) {\n    Icon = v;\n  }\n}, 3);\nvar Tooltip = void 0,\n    Translation = void 0;\nmodule.importSync(\"../\", {\n  Tooltip: function (v) {\n    Tooltip = v;\n  },\n  Translation: function (v) {\n    Translation = v;\n  }\n}, 4);\n\nvar Button = function (_Component) {\n  (0, _inherits3.default)(Button, _Component);\n\n  function Button(props) {\n    (0, _classCallCheck3.default)(this, Button);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _this.handleClick = function (event) {\n      if (_this.props.tagName === \"a\") {\n        event.preventDefault();\n      } // If this is a toogle button, and has a onToggle callback function\n\n\n      if (_this.props.toggle && _this.props.onToggle) {\n        if (_this.props.toggleOn) {\n          // If toggleOn is true, return the toggleOn value, or true\n          _this.props.onToggle(event, _this.props.onValue || true);\n        } else {\n          // Otherwise return the value prop, or false\n          _this.props.onToggle(event, _this.props.value || false);\n        }\n      } else if (_this.props.onClick) {\n        _this.props.onClick(event, _this.props.value);\n      }\n    };\n\n    _this.state = {\n      tooltipOpen: false\n    };\n    _this.handleButtonMouseOver = _this.handleButtonMouseOver.bind(_this);\n    _this.handleButtonMouseOut = _this.handleButtonMouseOut.bind(_this);\n    return _this;\n  }\n\n  Button.prototype.handleButtonMouseOver = function () {\n    function handleButtonMouseOver() {\n      this.setState({\n        tooltipOpen: this.props.tooltip ? true : false\n      });\n    }\n\n    return handleButtonMouseOver;\n  }();\n\n  Button.prototype.handleButtonMouseOut = function () {\n    function handleButtonMouseOut() {\n      this.setState({\n        tooltipOpen: false\n      });\n    }\n\n    return handleButtonMouseOut;\n  }();\n\n  Button.prototype.renderOnStateIcon = function () {\n    function renderOnStateIcon() {\n      if (this.props.onIcon) {\n        return React.createElement(Icon, {\n          icon: this.props.onIcon\n        });\n      }\n\n      return null;\n    }\n\n    return renderOnStateIcon;\n  }();\n\n  Button.prototype.renderNormalStateIcon = function () {\n    function renderNormalStateIcon() {\n      if (this.props.icon) {\n        return React.createElement(Icon, {\n          icon: this.props.icon\n        });\n      }\n\n      return null;\n    }\n\n    return renderNormalStateIcon;\n  }();\n\n  Button.prototype.renderIcon = function () {\n    function renderIcon() {\n      if (this.props.toggle) {\n        if (this.props.toggleOn) {\n          return this.renderOnStateIcon();\n        }\n      }\n\n      return this.renderNormalStateIcon();\n    }\n\n    return renderIcon;\n  }();\n\n  Button.prototype.renderTooltipContent = function () {\n    function renderTooltipContent() {\n      if (this.isTooltipOpen && this.props.disabled === false) {\n        if (typeof this.props.tooltip === \"string\") {\n          return React.createElement(Translation, {\n            defaultValue: this.props.tooltip,\n            i18nKey: this.props.i18nKeyTooltip\n          });\n        }\n\n        return React.createElement(\n          \"div\",\n          null,\n          this.props.tooltip\n        );\n      }\n\n      return null;\n    }\n\n    return renderTooltipContent;\n  }();\n\n  Button.prototype.renderLabel = function () {\n    function renderLabel() {\n      if (this.props.label) {\n        if (this.props.toggle) {\n          if (this.props.toggleOn && this.props.toggleOnLabel) {\n            return React.createElement(Translation, {\n              defaultValue: this.props.toggleOnLabel,\n              i18nKey: this.props.i18nKeyToggleOnLabel\n            });\n          }\n        }\n\n        return React.createElement(Translation, {\n          defaultValue: this.props.label,\n          i18nKey: this.props.i18nKeyLabel\n        });\n      }\n\n      return null;\n    }\n\n    return renderLabel;\n  }();\n\n  Button.prototype.render = function () {\n    function render() {\n      var _classnames;\n\n      var _props = this.props,\n          active = _props.active,\n          status = _props.status,\n          toggleOn = _props.toggleOn,\n          primary = _props.primary,\n          bezelStyle = _props.bezelStyle,\n          className = _props.className,\n          containerStyle = _props.containerStyle,\n          iconAfter = _props.iconAfter,\n          label = _props.label,\n          i18nKeyTitle = _props.i18nKeyTitle,\n          i18nKeyLabel = _props.i18nKeyLabel,\n          i18nKeyTooltip = _props.i18nKeyTooltip,\n          tooltip = _props.tooltip,\n          icon = _props.icon,\n          toggle = _props.toggle,\n          onIcon = _props.onIcon,\n          eventAction = _props.eventAction,\n          buttonType = _props.buttonType,\n          toggleOnLabel = _props.toggleOnLabel,\n          i18nKeyToggleOnLabel = _props.i18nKeyToggleOnLabel,\n          tagName = _props.tagName,\n          onClick = _props.onClick,\n          onToggle = _props.onToggle,\n          onValue = _props.onValue,\n          tooltipPosition = _props.tooltipPosition,\n          attrs = (0, _objectWithoutProperties3.default)(_props, [\"active\", \"status\", \"toggleOn\", \"primary\", \"bezelStyle\", \"className\", \"containerStyle\", \"iconAfter\", \"label\", \"i18nKeyTitle\", \"i18nKeyLabel\", \"i18nKeyTooltip\", \"tooltip\", \"icon\", \"toggle\", \"onIcon\", \"eventAction\", \"buttonType\", \"toggleOnLabel\", \"i18nKeyToggleOnLabel\", \"tagName\", \"onClick\", \"onToggle\", \"onValue\", \"tooltipPosition\"]);\n      var classes = classnames((_classnames = {\n        \"rui\": true,\n        \"btn\": true,\n        \"btn-default\": !primary && (status === null || status === undefined || status === \"default\"),\n        \"active\": active || toggleOn,\n        \"btn-success\": status === \"success\",\n        \"btn-danger\": status === \"danger\",\n        \"btn-info\": status === \"info\",\n        \"btn-warning\": status === \"warning\",\n        \"btn-link\": status === \"link\",\n        \"btn-cta\": status === \"cta\",\n        \"btn-primary\": primary === true || status === \"primary\"\n      }, _classnames[bezelStyle || \"flat\"] = true, _classnames), className);\n      var extraProps = {};\n\n      if (tagName === \"a\") {\n        extraProps.href = \"#\";\n      }\n\n      var buttonProps = Object.assign({\n        \"className\": classes,\n        \"data-event-action\": eventAction,\n        \"onMouseOut\": this.handleButtonMouseOut,\n        \"onMouseOver\": this.handleButtonMouseOver,\n        \"onClick\": this.handleClick,\n        \"type\": buttonType || \"button\"\n      }, attrs, extraProps); // Create a react fragment for all the button children\n\n      var buttonChildren = void 0;\n\n      if (iconAfter) {\n        buttonChildren = createFragment({\n          label: this.renderLabel(),\n          icon: this.renderIcon(),\n          children: this.props.children\n        });\n      } else {\n        buttonChildren = createFragment({\n          icon: this.renderIcon(),\n          label: this.renderLabel(),\n          children: this.props.children\n        });\n      } // Button with tooltip gets some special treatment\n\n\n      if (tooltip) {\n        return React.createElement(tagName, buttonProps, React.createElement(\n          \"span\",\n          {\n            className: \"rui btn-tooltip\",\n            style: (0, _extends3.default)({\n              display: \"inline-flex\"\n            }, containerStyle)\n          },\n          React.createElement(\n            Tooltip,\n            {\n              tooltipContent: this.renderTooltipContent()\n            },\n            buttonChildren\n          )\n        ));\n      } // Add a wrapped container with styles for standard button\n\n\n      if (containerStyle) {\n        buttonChildren = React.createElement(\n          \"div\",\n          {\n            style: containerStyle\n          },\n          buttonChildren\n        );\n      } // Normal button, without tooltip\n\n\n      return React.createElement(tagName, buttonProps, buttonChildren);\n    }\n\n    return render;\n  }();\n\n  (0, _createClass3.default)(Button, [{\n    key: \"isTooltipOpen\",\n    get: function () {\n      return this.state.tooltipOpen;\n    }\n  }]);\n  return Button;\n}(Component);\n\nButton.propTypes = {\n  active: PropTypes.bool,\n  bezelStyle: PropTypes.oneOf([\"flat\", \"solid\", \"outline\"]),\n  buttonType: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  containerStyle: PropTypes.object,\n  disabled: PropTypes.bool,\n  eventAction: PropTypes.string,\n  i18nKeyLabel: PropTypes.string,\n  i18nKeyTitle: PropTypes.string,\n  i18nKeyToggleOnLabel: PropTypes.string,\n  i18nKeyTooltip: PropTypes.string,\n  icon: PropTypes.string,\n  iconAfter: PropTypes.bool,\n  label: PropTypes.string,\n  onClick: PropTypes.func,\n  onIcon: PropTypes.string,\n  onToggle: PropTypes.func,\n  onValue: PropTypes.any,\n  primary: PropTypes.bool,\n  status: PropTypes.string,\n  tagName: PropTypes.string,\n  title: PropTypes.string,\n  toggle: PropTypes.bool,\n  toggleOn: PropTypes.bool,\n  toggleOnLabel: PropTypes.string,\n  tooltip: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.node]),\n  tooltipPosition: PropTypes.string,\n  value: PropTypes.any\n};\nButton.defaultProps = {\n  active: false,\n  disabled: false,\n  iconAfter: false,\n  tagName: \"button\",\n  toggle: false,\n  bezelStyle: \"flat\"\n};\nmodule.export(\"default\", exports.default = Button);","map":{"version":3,"sources":["/imports/plugins/core/ui/client/components/button/button.jsx"],"names":["React","Component","PropTypes","createFragment","classnames","Icon","Tooltip","Translation","Button","constructor","props","state","tooltipOpen","handleButtonMouseOver","bind","handleButtonMouseOut","isTooltipOpen","setState","tooltip","handleClick","event","tagName","preventDefault","toggle","onToggle","toggleOn","onValue","value","onClick","renderOnStateIcon","onIcon","renderNormalStateIcon","icon","renderIcon","renderTooltipContent","disabled","i18nKeyTooltip","renderLabel","label","toggleOnLabel","i18nKeyToggleOnLabel","i18nKeyLabel","render","active","status","primary","bezelStyle","className","containerStyle","iconAfter","i18nKeyTitle","eventAction","buttonType","tooltipPosition","attrs","classes","undefined","extraProps","href","buttonProps","Object","assign","buttonChildren","children","createElement","display","propTypes","bool","oneOf","string","node","oneOfType","object","func","any","title","defaultProps"],"mappings":"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","file":"/imports/plugins/core/ui/client/components/button/button.jsx.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport createFragment from \"react-addons-create-fragment\";\nimport classnames from \"classnames/dedupe\";\nimport Icon from \"../icon/icon.jsx\";\nimport { Tooltip, Translation } from \"../\";\n\nclass Button extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tooltipOpen: false\n    };\n\n    this.handleButtonMouseOver = this.handleButtonMouseOver.bind(this);\n    this.handleButtonMouseOut = this.handleButtonMouseOut.bind(this);\n  }\n\n  get isTooltipOpen() {\n    return this.state.tooltipOpen;\n  }\n\n  handleButtonMouseOver() {\n    this.setState({\n      tooltipOpen: this.props.tooltip ? true : false\n    });\n  }\n\n  handleButtonMouseOut() {\n    this.setState({\n      tooltipOpen: false\n    });\n  }\n\n  handleClick = (event) => {\n    if (this.props.tagName === \"a\") {\n      event.preventDefault();\n    }\n\n    // If this is a toogle button, and has a onToggle callback function\n    if (this.props.toggle && this.props.onToggle) {\n      if (this.props.toggleOn) {\n        // If toggleOn is true, return the toggleOn value, or true\n        this.props.onToggle(event, this.props.onValue || true);\n      } else {\n        // Otherwise return the value prop, or false\n        this.props.onToggle(event, this.props.value || false);\n      }\n    } else if (this.props.onClick) {\n      this.props.onClick(event, this.props.value);\n    }\n  }\n\n  renderOnStateIcon() {\n    if (this.props.onIcon) {\n      return (\n        <Icon icon={this.props.onIcon} />\n      );\n    }\n    return null;\n  }\n\n  renderNormalStateIcon() {\n    if (this.props.icon) {\n      return (\n        <Icon icon={this.props.icon} />\n      );\n    }\n    return null;\n  }\n\n  renderIcon() {\n    if (this.props.toggle) {\n      if (this.props.toggleOn) {\n        return this.renderOnStateIcon();\n      }\n    }\n\n    return this.renderNormalStateIcon();\n  }\n\n  renderTooltipContent() {\n    if (this.isTooltipOpen && this.props.disabled === false) {\n      if (typeof this.props.tooltip === \"string\") {\n        return (\n          <Translation defaultValue={this.props.tooltip} i18nKey={this.props.i18nKeyTooltip} />\n        );\n      }\n\n      return (\n        <div>\n          {this.props.tooltip}\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  renderLabel() {\n    if (this.props.label) {\n      if (this.props.toggle) {\n        if (this.props.toggleOn && this.props.toggleOnLabel) {\n          return (\n            <Translation\n              defaultValue={this.props.toggleOnLabel}\n              i18nKey={this.props.i18nKeyToggleOnLabel}\n            />\n          );\n        }\n      }\n\n      return (\n        <Translation\n          defaultValue={this.props.label}\n          i18nKey={this.props.i18nKeyLabel}\n        />\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      active, status, toggleOn, primary, bezelStyle, className, containerStyle,\n\n      // Destructure these vars as they aren't valid as attributes on the HTML element button\n      iconAfter, label, i18nKeyTitle, i18nKeyLabel, i18nKeyTooltip, // eslint-disable-line no-unused-vars\n      tooltip, icon, toggle, onIcon, eventAction, buttonType, // eslint-disable-line no-unused-vars\n      toggleOnLabel, i18nKeyToggleOnLabel, tagName, onClick, onToggle, onValue, tooltipPosition, // eslint-disable-line no-unused-vars\n\n      // Get the rest of the properties and put them in attrs\n      // these will most likely be HTML attributes\n      ...attrs\n    } = this.props;\n\n    const classes = classnames({\n      \"rui\": true,\n      \"btn\": true,\n      \"btn-default\": !primary &&  (status === null || status === undefined || status === \"default\"),\n      \"active\": active || toggleOn,\n      \"btn-success\": status === \"success\",\n      \"btn-danger\": status === \"danger\",\n      \"btn-info\": status === \"info\",\n      \"btn-warning\": status === \"warning\",\n      \"btn-link\": status === \"link\",\n      \"btn-cta\": status === \"cta\",\n      \"btn-primary\": primary === true || status === \"primary\",\n      [bezelStyle || \"flat\"]: true\n    }, className);\n\n    const extraProps = {};\n\n    if (tagName === \"a\") {\n      extraProps.href = \"#\";\n    }\n\n    const buttonProps = Object.assign({\n      \"className\": classes,\n      \"data-event-action\": eventAction,\n      \"onMouseOut\": this.handleButtonMouseOut,\n      \"onMouseOver\": this.handleButtonMouseOver,\n      \"onClick\": this.handleClick,\n      \"type\": buttonType || \"button\"\n    }, attrs, extraProps);\n\n\n    // Create a react fragment for all the button children\n    let buttonChildren;\n\n    if (iconAfter) {\n      buttonChildren = createFragment({\n        label: this.renderLabel(),\n        icon: this.renderIcon(),\n        children: this.props.children\n      });\n    } else {\n      buttonChildren = createFragment({\n        icon: this.renderIcon(),\n        label: this.renderLabel(),\n        children: this.props.children\n      });\n    }\n\n    // Button with tooltip gets some special treatment\n    if (tooltip) {\n      return React.createElement(tagName, buttonProps,\n        <span className=\"rui btn-tooltip\" style={{ display: \"inline-flex\", ...containerStyle }}>\n          <Tooltip tooltipContent={this.renderTooltipContent()}>\n            {buttonChildren}\n          </Tooltip>\n        </span>\n      );\n    }\n\n    // Add a wrapped container with styles for standard button\n    if (containerStyle) {\n      buttonChildren = (\n        <div style={containerStyle}>\n          {buttonChildren}\n        </div>\n      );\n    }\n\n    // Normal button, without tooltip\n    return React.createElement(tagName, buttonProps, buttonChildren);\n  }\n}\n\nButton.propTypes = {\n  active: PropTypes.bool,\n  bezelStyle: PropTypes.oneOf([\"flat\", \"solid\", \"outline\"]),\n  buttonType: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  containerStyle: PropTypes.object,\n  disabled: PropTypes.bool,\n  eventAction: PropTypes.string,\n  i18nKeyLabel: PropTypes.string,\n  i18nKeyTitle: PropTypes.string,\n  i18nKeyToggleOnLabel: PropTypes.string,\n  i18nKeyTooltip: PropTypes.string,\n  icon: PropTypes.string,\n  iconAfter: PropTypes.bool,\n  label: PropTypes.string,\n  onClick: PropTypes.func,\n  onIcon: PropTypes.string,\n  onToggle: PropTypes.func,\n  onValue: PropTypes.any,\n  primary: PropTypes.bool,\n  status: PropTypes.string,\n  tagName: PropTypes.string,\n  title: PropTypes.string,\n  toggle: PropTypes.bool,\n  toggleOn: PropTypes.bool,\n  toggleOnLabel: PropTypes.string,\n  tooltip: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.node]),\n  tooltipPosition: PropTypes.string,\n  value: PropTypes.any\n};\n\nButton.defaultProps = {\n  active: false,\n  disabled: false,\n  iconAfter: false,\n  tagName: \"button\",\n  toggle: false,\n  bezelStyle: \"flat\"\n};\n\nexport default Button;\n"]},"hash":"1e810a3c226220da23166d0cfcf089fbbbde0713"}
