{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/lib/collections","imported":["*"],"specifiers":[{"kind":"namespace","local":"Collections"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/modules/accounts/templates/addressBook/grid/grid.js","filenameRelative":"/client/modules/accounts/templates/addressBook/grid/grid.js","inputSourceMap":{"version":3,"sources":["/client/modules/accounts/templates/addressBook/grid/grid.js"],"names":["Collections","Meteor","Template","addressBookGrid","helpers","selectedBilling","cart","Cart","findOne","userId","billing","address","_id","isBillingDefault","call","selectedShipping","shipping","isShippingDefault","account","Accounts","events"],"mappings":"AAAA,IAAO,AAAK,cAAZ,OAA6B;OAA7B;;;;;;;;;;;;;;;;GACA,AAAS,A,AAAc,AACvB,AAAS,AAAgB,AAEzB;AAGA,AAAS,AAAgB,AAAQ,AAC/B,AAAiB,AAAY;;YACrB,AAAO,gBAAY;AACf,mBAAA,AAAO,YADqB;AAAtC,AAAa;qBAIb,AAAI,AAAM,AACR,AAAI,AAAK,AAAS,AAChB;;;QAAI,MAAJ,AAAI,AAAK,AAAQ,AAAG,AAAS,AAC3B;UAAI,KAAA,AAAK,SAAT,AAAiB,AAAK,AAAQ,AAAG,AAAQ,AAAK,AAC5C;iBAAO,QAAP,YACD;wDACF;mBALH,AAMC;AAAM,AAAE;AACP;;AACA;AAAA,AAAI,AAAK,AAAkB,AACzB;iBAAA,AAAO,AAAK,kBADa,AACzB,AAAsC,AAAK,AAAK,AAChD,AACD;0DACF,OACF;AApB4B,AAqB9B;AAED;AAAkB,AAAY,AAC5B;AAAM,AAAO,AAAY,AAAK,AAAQ,AACpC,AAAQ,AAAO;AADjB,AAAa;;AAIb,AAAI,cAAM,OACR,AAAI,AAAK,AAAU,AACjB,AAAI,AAAK,AAAS,AAAG,AAAS,AAC5B;AAHN;;cAGM,AAAI,AAAK,AAAQ,AAAK,AAAS,AAAG,AAAQ,AAAK,AAC7C;eAAO,UAAP,AACD;sCACF;yDALH,AAMC;AAAM,mBAAE;AACP;AACA;AAAI;AAAJ,AAAS,AAAmB,AAC1B;AAD0B,AAC1B,AAAO,AAAK,AAA2B,AAAK,AAAK,AACjD,AACD;oCACF;2DACF,OA1C4B,AA2C9B;AACD;AAAS,AAAY,AACnB;AAAO,AAAY,AAAS,AAAQ,AAClC;AADkC,AAC1B,AAAO;AADjB,AAAO,uBAGR;;;A,AAhDH,AAAiC,AAmDjC;AAIA,AAAS,AAAgB,AAAO,AAC9B,AAAmD,AAAY;AAtDhD,AAAiB,AAAQ,AACpC,CADF,GAuDF,AACE,AAAI,AAAC,AAAK,AAAmB,AAC3B,AAAO,AAAO,AAAK,AAA8B,AAAM,AACrD,AACH;;;AAN2B,AAO7B;AACiD,qDAAY,YAC5D;AACA;QAAI,CAAC,KAAL,AAAU,AAAkB,mBAC1B;aAAO,OAAA,AAAO,KAAP,AAAY,8BAAZ,AAA0C,MAAjD,AAAO,AAAgD,AACrD,AACH,MACF;AAdH,AAAgC;;;;;;;;AAQ9B","file":"/client/modules/accounts/templates/addressBook/grid/grid.js.map","sourcesContent":["import * as Collections from \"/lib/collections\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\n\n/*\n * handles display of addressBook grid\n */\nTemplate.addressBookGrid.helpers({\n  selectedBilling: function () {\n    const cart = Collections.Cart.findOne({\n      userId: Meteor.userId()\n    });\n\n    if (cart) {\n      if (cart.billing) {\n        if (cart.billing[0].address) {\n          if (this._id === cart.billing[0].address._id) {\n            return \"active\";\n          }\n        }\n      } else { // if this is a first checkout review, we need to push default\n        // billing address to cart\n        if (this.isBillingDefault) {\n          Meteor.call(\"cart/setPaymentAddress\", cart._id, this);\n          // return \"active\";\n        }\n      }\n    }\n  },\n\n  selectedShipping: function () {\n    const cart = Collections.Cart.findOne({\n      userId: Meteor.userId()\n    });\n\n    if (cart) {\n      if (cart.shipping) {\n        if (cart.shipping[0].address) {\n          if (this._id === cart.shipping[0].address._id) {\n            return \"active\";\n          }\n        }\n      } else { // if this is a first checkout review, we need to push default\n        // shipping address to cart\n        if (this.isShippingDefault) {\n          Meteor.call(\"cart/setShipmentAddress\", cart._id, this);\n          // return \"active\";\n        }\n      }\n    }\n  },\n  account: function () {\n    return Collections.Accounts.findOne({\n      userId: Meteor.userId()\n    });\n  }\n});\n\n/*\n * events\n */\n\nTemplate.addressBookGrid.events({\n  \"click [data-event-action=selectShippingAddress]\": function () {\n  // update address(make it default) only if wasn't already\n    if (!this.isShippingDefault) {\n      return Meteor.call(\"accounts/addressBookUpdate\", this, null,\n        \"isShippingDefault\");\n    }\n  },\n  \"click [data-event-action=selectBillingAddress]\": function () {\n    // update address(make it default) only if wasn't already\n    if (!this.isBillingDefault) {\n      return Meteor.call(\"accounts/addressBookUpdate\", this, null,\n        \"isBillingDefault\");\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/modules/accounts/templates/addressBook/grid/grid.js.map","sourceFileName":"/client/modules/accounts/templates/addressBook/grid/grid.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"grid"},"ignored":false,"code":"var Collections = Object.create(null);\nmodule.importSync(\"/lib/collections\", {\n  \"*\": function (v, n) {\n    Collections[n] = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 2);\n/*\n * handles display of addressBook grid\n */Template.addressBookGrid.helpers({\n  selectedBilling: function () {\n    var cart = Collections.Cart.findOne({\n      userId: Meteor.userId()\n    });\n\n    if (cart) {\n      if (cart.billing) {\n        if (cart.billing[0].address) {\n          if (this._id === cart.billing[0].address._id) {\n            return \"active\";\n          }\n        }\n      } else {\n        // if this is a first checkout review, we need to push default\n        // billing address to cart\n        if (this.isBillingDefault) {\n          Meteor.call(\"cart/setPaymentAddress\", cart._id, this); // return \"active\";\n        }\n      }\n    }\n  },\n  selectedShipping: function () {\n    var cart = Collections.Cart.findOne({\n      userId: Meteor.userId()\n    });\n\n    if (cart) {\n      if (cart.shipping) {\n        if (cart.shipping[0].address) {\n          if (this._id === cart.shipping[0].address._id) {\n            return \"active\";\n          }\n        }\n      } else {\n        // if this is a first checkout review, we need to push default\n        // shipping address to cart\n        if (this.isShippingDefault) {\n          Meteor.call(\"cart/setShipmentAddress\", cart._id, this); // return \"active\";\n        }\n      }\n    }\n  },\n  account: function () {\n    return Collections.Accounts.findOne({\n      userId: Meteor.userId()\n    });\n  }\n}); /*\n     * events\n     */\nTemplate.addressBookGrid.events({\n  \"click [data-event-action=selectShippingAddress]\": function () {\n    // update address(make it default) only if wasn't already\n    if (!this.isShippingDefault) {\n      return Meteor.call(\"accounts/addressBookUpdate\", this, null, \"isShippingDefault\");\n    }\n  },\n  \"click [data-event-action=selectBillingAddress]\": function () {\n    // update address(make it default) only if wasn't already\n    if (!this.isBillingDefault) {\n      return Meteor.call(\"accounts/addressBookUpdate\", this, null, \"isBillingDefault\");\n    }\n  }\n});","map":{"version":3,"sources":["/client/modules/accounts/templates/addressBook/grid/grid.js"],"names":["Collections","Meteor","Template","addressBookGrid","helpers","selectedBilling","cart","Cart","findOne","userId","billing","address","_id","isBillingDefault","call","selectedShipping","shipping","isShippingDefault","account","Accounts","events"],"mappings":"AAAA,IAAO,AAAK,cAAZ,OAA6B;OAA7B;;;;;;;;;;;;;;;;GACA,AAAS,A,AAAc,AACvB,AAAS,AAAgB,AAEzB;AAGA,AAAS,AAAgB,AAAQ,AAC/B,AAAiB,AAAY;;YACrB,AAAO,gBAAY;AACf,mBAAA,AAAO,YADqB;AAAtC,AAAa;qBAIb,AAAI,AAAM,AACR,AAAI,AAAK,AAAS,AAChB;;;QAAI,MAAJ,AAAI,AAAK,AAAQ,AAAG,AAAS,AAC3B;UAAI,KAAA,AAAK,SAAT,AAAiB,AAAK,AAAQ,AAAG,AAAQ,AAAK,AAC5C;iBAAO,QAAP,YACD;wDACF;mBALH,AAMC;AAAM,AAAE;AACP;;AACA;AAAA,AAAI,AAAK,AAAkB,AACzB;iBAAA,AAAO,AAAK,kBADa,AACzB,AAAsC,AAAK,AAAK,AAChD,AACD;0DACF,OACF;AApB4B,AAqB9B;AAED;AAAkB,AAAY,AAC5B;AAAM,AAAO,AAAY,AAAK,AAAQ,AACpC,AAAQ,AAAO;AADjB,AAAa;;AAIb,AAAI,cAAM,OACR,AAAI,AAAK,AAAU,AACjB,AAAI,AAAK,AAAS,AAAG,AAAS,AAC5B;AAHN;;cAGM,AAAI,AAAK,AAAQ,AAAK,AAAS,AAAG,AAAQ,AAAK,AAC7C;eAAO,UAAP,AACD;sCACF;yDALH,AAMC;AAAM,mBAAE;AACP;AACA;AAAI;AAAJ,AAAS,AAAmB,AAC1B;AAD0B,AAC1B,AAAO,AAAK,AAA2B,AAAK,AAAK,AACjD,AACD;oCACF;2DACF,OA1C4B,AA2C9B;AACD;AAAS,AAAY,AACnB;AAAO,AAAY,AAAS,AAAQ,AAClC;AADkC,AAC1B,AAAO;AADjB,AAAO,uBAGR;;;A,AAhDH,AAAiC,AAmDjC;AAIA,AAAS,AAAgB,AAAO,AAC9B,AAAmD,AAAY;AAtDhD,AAAiB,AAAQ,AACpC,CADF,GAuDF,AACE,AAAI,AAAC,AAAK,AAAmB,AAC3B,AAAO,AAAO,AAAK,AAA8B,AAAM,AACrD,AACH;;;AAN2B,AAO7B;AACiD,qDAAY,YAC5D;AACA;QAAI,CAAC,KAAL,AAAU,AAAkB,mBAC1B;aAAO,OAAA,AAAO,KAAP,AAAY,8BAAZ,AAA0C,MAAjD,AAAO,AAAgD,AACrD,AACH,MACF;AAdH,AAAgC;;;;;;;;AAQ9B","file":"/client/modules/accounts/templates/addressBook/grid/grid.js.map","sourcesContent":["import * as Collections from \"/lib/collections\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Template } from \"meteor/templating\";\n\n/*\n * handles display of addressBook grid\n */\nTemplate.addressBookGrid.helpers({\n  selectedBilling: function () {\n    const cart = Collections.Cart.findOne({\n      userId: Meteor.userId()\n    });\n\n    if (cart) {\n      if (cart.billing) {\n        if (cart.billing[0].address) {\n          if (this._id === cart.billing[0].address._id) {\n            return \"active\";\n          }\n        }\n      } else { // if this is a first checkout review, we need to push default\n        // billing address to cart\n        if (this.isBillingDefault) {\n          Meteor.call(\"cart/setPaymentAddress\", cart._id, this);\n          // return \"active\";\n        }\n      }\n    }\n  },\n\n  selectedShipping: function () {\n    const cart = Collections.Cart.findOne({\n      userId: Meteor.userId()\n    });\n\n    if (cart) {\n      if (cart.shipping) {\n        if (cart.shipping[0].address) {\n          if (this._id === cart.shipping[0].address._id) {\n            return \"active\";\n          }\n        }\n      } else { // if this is a first checkout review, we need to push default\n        // shipping address to cart\n        if (this.isShippingDefault) {\n          Meteor.call(\"cart/setShipmentAddress\", cart._id, this);\n          // return \"active\";\n        }\n      }\n    }\n  },\n  account: function () {\n    return Collections.Accounts.findOne({\n      userId: Meteor.userId()\n    });\n  }\n});\n\n/*\n * events\n */\n\nTemplate.addressBookGrid.events({\n  \"click [data-event-action=selectShippingAddress]\": function () {\n  // update address(make it default) only if wasn't already\n    if (!this.isShippingDefault) {\n      return Meteor.call(\"accounts/addressBookUpdate\", this, null,\n        \"isShippingDefault\");\n    }\n  },\n  \"click [data-event-action=selectBillingAddress]\": function () {\n    // update address(make it default) only if wasn't already\n    if (!this.isBillingDefault) {\n      return Meteor.call(\"accounts/addressBookUpdate\", this, null,\n        \"isBillingDefault\");\n    }\n  }\n});\n"]},"hash":"750f9927f1502f8f31177f9fa03692dc271045c3"}
