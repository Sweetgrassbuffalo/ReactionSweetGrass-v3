{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/lib/collections","imported":["Packages"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/lib/api","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Reaction"}]}],"exports":{"exported":["PayFlow"],"specifiers":[{"kind":"local","local":"PayFlow","exported":"PayFlow"}]}}},"options":{"filename":"/imports/plugins/included/payments-paypal/lib/api/payflow.js","filenameRelative":"/imports/plugins/included/payments-paypal/lib/api/payflow.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/payments-paypal/lib/api/payflow.js"],"names":["Meteor","Packages","Reaction","PayFlow","payflowAccountOptions","settings","findOne","name","shopId","getShopId","enabled","mode","payflow_mode","ref","paypal","options","getSettings","client_id","client_secret","Error","authorize","cardInfo","paymentInfo","callback","call","capture","transactionId","amount","captureDetails","currency","total","parseFloat","is_final_capture","config","accountOptions","paymentObj","intent","payer","payment_method","funding_instruments","transactions","parseCardData","data","credit_card","type","number","first_name","last_name","cvv2","expire_month","expire_year","parsePaymentData","valueName"],"mappings":"AAAA;;AACA,WAAS;;;AAAT;AAAuB,OAAvB;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAgB,AACzB,AAAO,AAAc,AAErB,AACA,AACA,AAEA,AAAO,AAAM,AAAU,AACrB,AAAuB,AAAY,AACjC,AAAM,AAAW,AAAS,AAAQ,AAChC;AAAM;AACE,AAAS,yBAFe,AAExB,YACR;QAAS;AACR,YAJH,AAKA;AAAA,AAAI;eACJ;AANiB,AAAiB,OAMlC,AAAI,AAAC,AAAa,AAAO,AAAS,AAAe,AAAK,AAAO,AAAM,AACjE;QAAA,AAAO,AACR;;AAFD,SAEO,8DACL;aAAA,AAAO,AACR;;aACD;AAAA,AAAM,AAAM,AAAO,AAAS,AAC5B;;QAAM,MAAU,gBACd;QADc,AACR;YADQ,AAEL,AAAY,AAAU,AAAK,AACpC;eAAW,YAAY,UAAZ,AAAsB,KAHnB,AAGH,AAA2B,AACtC;iBAAe,YAAY,UAAZ,AAAsB,KAJvC,AAAgB,AAIC,AAA2B;gDAE5C;AAJE;;QAIE,CAAC,QAAL,AAAa,WAAW,AACtB;YAAM,IAAI,OAAJ,AAAW,MAAX,AAAiB,KAAvB,AAAM,AAAsB,AAC7B;;;WACD;AAAA,AAAO,AACR;AAxBoB,wDAyBrB;WAAW,KAAA,AAAU,AAAU,6BAApB,AAAiC,AAAU,oCACpD;AAAA,AAAO,AAAK,AAA6B,AAAa,AAAU,AAAa,AAC9E;AA3BoB,sDA4BrB;QAAS,AAAU;AACX;AACI;AACN;eADM,AACI,mBAAO,AACjB;AAHmB,AACrB;AAES,wBAHY,AACb,AAEC,AAAW,AAAQ,AAE5B;AANK,AAAyB,AAAQ,AAAU,AAClD;gBAKoB,6DALG;AAAvB,AAOA;UAAA,AAAO,AAAK,mBApCO,AAoCnB,AAA0C,AAAe,AAAgB,AAC1E;0BACD;AAAQ,AAAU,AAAS,AACzB;AAAK,cAAL,YAvCmB,AAuCnB,AAAsB,AACvB;;cACW,AAAY,AACtB;AAAO;AAAA,AACG,wBACR;AAAO,6BAAA,AACL,AAAgB,AAChB;AAHF;oBADK,AAEE,AAEgB,AAEvB;AAPJ;AACS,AAMS;AANhB,iCA1CmB,AAkDpB;;AACc;AACN,mBACL;gBAAa,KACX;AAAM,AAAK,oBADA,KAEX;AAAQ,mBAAK,KAFF,AAGX;mBAHW,AAGC,AAAK,AACjB;AAAW,sBAAK,KAJL,AAKX;AAAM,AAAK,qBALA,KAAA,AAMX,AAAc,AAAK,AACnB,AAAa,AAAK;AATT,AAAU,AAAM,AAC7B;AADF;AACS;AAAP,oCApDmB,AA+DpB;;;AAEQ,sCACL;AAAQ,uBAAA,AACN,AAAO,AAAW,AAAK,AAAO,AAC9B,AAAU,AAAK;AAJH,AAAU,AAAM,AAChC;AADF;AACE,AAAO,AAMR;AArEmC,AAEhC;;AAJC,AAAgB;yBA0EvB;AAAS,oBAAT,AAAqB,AAAU,AAAK,AAAW,AAC7C;AAAI,aAAa,QAAjB,AAAuB,MACrB;WAAO,IAAP,AAAO,AAAS,AACjB;AAFD,AAEO,AAAI,AAAQ,AAAM,AACvB;;SAAA,AAAO,AAAI,AACZ;AACD,AAAO,AACR","file":"/imports/plugins/included/payments-paypal/lib/api/payflow.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { Meteor } from \"meteor/meteor\";\nimport { Packages } from \"/lib/collections\";\nimport Reaction from \"/lib/api\";\n\n// using global instance of Reaction\n// Paypal is a shared client/server stub\n// to provide normalized PayPal tooling\n\nexport const PayFlow = {\n  payflowAccountOptions: function () {\n    const settings = Packages.findOne({\n      name: \"reaction-paypal\",\n      shopId: Reaction.getShopId(),\n      enabled: true\n    }).settings;\n    let mode;\n    if ((settings !== null ? settings.payflow_mode : void 0) === true) {\n      mode = \"live\";\n    } else {\n      mode = \"sandbox\";\n    }\n    const ref = Meteor.settings.paypal;\n    const options = {\n      mode: mode,\n      enabled: getSettings(settings, ref, \"payflow_enabled\"),\n      client_id: getSettings(settings, ref, \"client_id\"),\n      client_secret: getSettings(settings, ref, \"client_secret\")\n    };\n    if (!options.client_id) {\n      throw new Meteor.Error(403, \"Invalid PayPal Credentials\");\n    }\n    return options;\n  },\n  authorize: function (cardInfo, paymentInfo, callback) {\n    Meteor.call(\"payflowpro/payment/submit\", \"authorize\", cardInfo, paymentInfo, callback);\n  },\n  capture: function (transactionId, amount, callback) {\n    const captureDetails = {\n      amount: {\n        currency: \"USD\", // todo should this be locale.currency\n        total: parseFloat(amount, 10)\n      },\n      is_final_capture: true\n    };\n    Meteor.call(\"payflowpro/payment/capture\", transactionId, captureDetails, callback);\n  },\n  config: function (options) {\n    this.accountOptions = options;\n  },\n  paymentObj: function () {\n    return {\n      intent: \"sale\",\n      payer: {\n        payment_method: \"credit_card\",\n        funding_instruments: []\n      },\n      transactions: []\n    };\n  },\n  parseCardData: function (data) {\n    return {\n      credit_card: {\n        type: data.type,\n        number: data.number,\n        first_name: data.first_name,\n        last_name: data.last_name,\n        cvv2: data.cvv2,\n        expire_month: data.expire_month,\n        expire_year: data.expire_year\n      }\n    };\n  },\n  parsePaymentData: function (data) {\n    return {\n      amount: {\n        total: parseFloat(data.total, 10),\n        currency: data.currency\n      }\n    };\n  }\n};\n\nfunction getSettings(settings, ref, valueName) {\n  if (settings !== null) {\n    return settings[valueName];\n  } else if (ref !== null) {\n    return ref[valueName];\n  }\n  return {};\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/payments-paypal/lib/api/payflow.js.map","sourceFileName":"/imports/plugins/included/payments-paypal/lib/api/payflow.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"payflow"},"ignored":false,"code":"module.export({\n  PayFlow: function () {\n    return PayFlow;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 1);\nvar Reaction = void 0;\nmodule.importSync(\"/lib/api\", {\n  \"default\": function (v) {\n    Reaction = v;\n  }\n}, 2);\nvar PayFlow = {\n  payflowAccountOptions: function () {\n    var settings = Packages.findOne({\n      name: \"reaction-paypal\",\n      shopId: Reaction.getShopId(),\n      enabled: true\n    }).settings;\n    var mode = void 0;\n\n    if ((settings !== null ? settings.payflow_mode : void 0) === true) {\n      mode = \"live\";\n    } else {\n      mode = \"sandbox\";\n    }\n\n    var ref = Meteor.settings.paypal;\n    var options = {\n      mode: mode,\n      enabled: getSettings(settings, ref, \"payflow_enabled\"),\n      client_id: getSettings(settings, ref, \"client_id\"),\n      client_secret: getSettings(settings, ref, \"client_secret\")\n    };\n\n    if (!options.client_id) {\n      throw new Meteor.Error(403, \"Invalid PayPal Credentials\");\n    }\n\n    return options;\n  },\n  authorize: function (cardInfo, paymentInfo, callback) {\n    Meteor.call(\"payflowpro/payment/submit\", \"authorize\", cardInfo, paymentInfo, callback);\n  },\n  capture: function (transactionId, amount, callback) {\n    var captureDetails = {\n      amount: {\n        currency: \"USD\",\n        // todo should this be locale.currency\n        total: parseFloat(amount, 10)\n      },\n      is_final_capture: true\n    };\n    Meteor.call(\"payflowpro/payment/capture\", transactionId, captureDetails, callback);\n  },\n  config: function (options) {\n    this.accountOptions = options;\n  },\n  paymentObj: function () {\n    return {\n      intent: \"sale\",\n      payer: {\n        payment_method: \"credit_card\",\n        funding_instruments: []\n      },\n      transactions: []\n    };\n  },\n  parseCardData: function (data) {\n    return {\n      credit_card: {\n        type: data.type,\n        number: data.number,\n        first_name: data.first_name,\n        last_name: data.last_name,\n        cvv2: data.cvv2,\n        expire_month: data.expire_month,\n        expire_year: data.expire_year\n      }\n    };\n  },\n  parsePaymentData: function (data) {\n    return {\n      amount: {\n        total: parseFloat(data.total, 10),\n        currency: data.currency\n      }\n    };\n  }\n};\n\nfunction getSettings(settings, ref, valueName) {\n  if (settings !== null) {\n    return settings[valueName];\n  } else if (ref !== null) {\n    return ref[valueName];\n  }\n\n  return {};\n}","map":{"version":3,"sources":["/imports/plugins/included/payments-paypal/lib/api/payflow.js"],"names":["Meteor","Packages","Reaction","PayFlow","payflowAccountOptions","settings","findOne","name","shopId","getShopId","enabled","mode","payflow_mode","ref","paypal","options","getSettings","client_id","client_secret","Error","authorize","cardInfo","paymentInfo","callback","call","capture","transactionId","amount","captureDetails","currency","total","parseFloat","is_final_capture","config","accountOptions","paymentObj","intent","payer","payment_method","funding_instruments","transactions","parseCardData","data","credit_card","type","number","first_name","last_name","cvv2","expire_month","expire_year","parsePaymentData","valueName"],"mappings":"AAAA;;AACA,WAAS;;;AAAT;AAAuB,OAAvB;;;;;;;;;;;;;;;;GACA,A,AAAS,AAAgB,AACzB,AAAO,AAAc,AAErB,AACA,AACA,AAEA,AAAO,AAAM,AAAU,AACrB,AAAuB,AAAY,AACjC,AAAM,AAAW,AAAS,AAAQ,AAChC;AAAM;AACE,AAAS,yBAFe,AAExB,YACR;QAAS;AACR,YAJH,AAKA;AAAA,AAAI;eACJ;AANiB,AAAiB,OAMlC,AAAI,AAAC,AAAa,AAAO,AAAS,AAAe,AAAK,AAAO,AAAM,AACjE;QAAA,AAAO,AACR;;AAFD,SAEO,8DACL;aAAA,AAAO,AACR;;aACD;AAAA,AAAM,AAAM,AAAO,AAAS,AAC5B;;QAAM,MAAU,gBACd;QADc,AACR;YADQ,AAEL,AAAY,AAAU,AAAK,AACpC;eAAW,YAAY,UAAZ,AAAsB,KAHnB,AAGH,AAA2B,AACtC;iBAAe,YAAY,UAAZ,AAAsB,KAJvC,AAAgB,AAIC,AAA2B;gDAE5C;AAJE;;QAIE,CAAC,QAAL,AAAa,WAAW,AACtB;YAAM,IAAI,OAAJ,AAAW,MAAX,AAAiB,KAAvB,AAAM,AAAsB,AAC7B;;;WACD;AAAA,AAAO,AACR;AAxBoB,wDAyBrB;WAAW,KAAA,AAAU,AAAU,6BAApB,AAAiC,AAAU,oCACpD;AAAA,AAAO,AAAK,AAA6B,AAAa,AAAU,AAAa,AAC9E;AA3BoB,sDA4BrB;QAAS,AAAU;AACX;AACI;AACN;eADM,AACI,mBAAO,AACjB;AAHmB,AACrB;AAES,wBAHY,AACb,AAEC,AAAW,AAAQ,AAE5B;AANK,AAAyB,AAAQ,AAAU,AAClD;gBAKoB,6DALG;AAAvB,AAOA;UAAA,AAAO,AAAK,mBApCO,AAoCnB,AAA0C,AAAe,AAAgB,AAC1E;0BACD;AAAQ,AAAU,AAAS,AACzB;AAAK,cAAL,YAvCmB,AAuCnB,AAAsB,AACvB;;cACW,AAAY,AACtB;AAAO;AAAA,AACG,wBACR;AAAO,6BAAA,AACL,AAAgB,AAChB;AAHF;oBADK,AAEE,AAEgB,AAEvB;AAPJ;AACS,AAMS;AANhB,iCA1CmB,AAkDpB;;AACc;AACN,mBACL;gBAAa,KACX;AAAM,AAAK,oBADA,KAEX;AAAQ,mBAAK,KAFF,AAGX;mBAHW,AAGC,AAAK,AACjB;AAAW,sBAAK,KAJL,AAKX;AAAM,AAAK,qBALA,KAAA,AAMX,AAAc,AAAK,AACnB,AAAa,AAAK;AATT,AAAU,AAAM,AAC7B;AADF;AACS;AAAP,oCApDmB,AA+DpB;;;AAEQ,sCACL;AAAQ,uBAAA,AACN,AAAO,AAAW,AAAK,AAAO,AAC9B,AAAU,AAAK;AAJH,AAAU,AAAM,AAChC;AADF;AACE,AAAO,AAMR;AArEmC,AAEhC;;AAJC,AAAgB;yBA0EvB;AAAS,oBAAT,AAAqB,AAAU,AAAK,AAAW,AAC7C;AAAI,aAAa,QAAjB,AAAuB,MACrB;WAAO,IAAP,AAAO,AAAS,AACjB;AAFD,AAEO,AAAI,AAAQ,AAAM,AACvB;;SAAA,AAAO,AAAI,AACZ;AACD,AAAO,AACR","file":"/imports/plugins/included/payments-paypal/lib/api/payflow.js.map","sourcesContent":["/* eslint camelcase: 0 */\nimport { Meteor } from \"meteor/meteor\";\nimport { Packages } from \"/lib/collections\";\nimport Reaction from \"/lib/api\";\n\n// using global instance of Reaction\n// Paypal is a shared client/server stub\n// to provide normalized PayPal tooling\n\nexport const PayFlow = {\n  payflowAccountOptions: function () {\n    const settings = Packages.findOne({\n      name: \"reaction-paypal\",\n      shopId: Reaction.getShopId(),\n      enabled: true\n    }).settings;\n    let mode;\n    if ((settings !== null ? settings.payflow_mode : void 0) === true) {\n      mode = \"live\";\n    } else {\n      mode = \"sandbox\";\n    }\n    const ref = Meteor.settings.paypal;\n    const options = {\n      mode: mode,\n      enabled: getSettings(settings, ref, \"payflow_enabled\"),\n      client_id: getSettings(settings, ref, \"client_id\"),\n      client_secret: getSettings(settings, ref, \"client_secret\")\n    };\n    if (!options.client_id) {\n      throw new Meteor.Error(403, \"Invalid PayPal Credentials\");\n    }\n    return options;\n  },\n  authorize: function (cardInfo, paymentInfo, callback) {\n    Meteor.call(\"payflowpro/payment/submit\", \"authorize\", cardInfo, paymentInfo, callback);\n  },\n  capture: function (transactionId, amount, callback) {\n    const captureDetails = {\n      amount: {\n        currency: \"USD\", // todo should this be locale.currency\n        total: parseFloat(amount, 10)\n      },\n      is_final_capture: true\n    };\n    Meteor.call(\"payflowpro/payment/capture\", transactionId, captureDetails, callback);\n  },\n  config: function (options) {\n    this.accountOptions = options;\n  },\n  paymentObj: function () {\n    return {\n      intent: \"sale\",\n      payer: {\n        payment_method: \"credit_card\",\n        funding_instruments: []\n      },\n      transactions: []\n    };\n  },\n  parseCardData: function (data) {\n    return {\n      credit_card: {\n        type: data.type,\n        number: data.number,\n        first_name: data.first_name,\n        last_name: data.last_name,\n        cvv2: data.cvv2,\n        expire_month: data.expire_month,\n        expire_year: data.expire_year\n      }\n    };\n  },\n  parsePaymentData: function (data) {\n    return {\n      amount: {\n        total: parseFloat(data.total, 10),\n        currency: data.currency\n      }\n    };\n  }\n};\n\nfunction getSettings(settings, ref, valueName) {\n  if (settings !== null) {\n    return settings[valueName];\n  } else if (ref !== null) {\n    return ref[valueName];\n  }\n  return {};\n}\n"]},"hash":"59d151b455f72dc87d170c8ea93e3335245824f0"}
