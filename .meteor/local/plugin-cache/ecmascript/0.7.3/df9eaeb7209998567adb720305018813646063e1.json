{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/ongoworks:security/lib/server/Security.js","filenameRelative":"/packages/ongoworks:security/lib/server/Security.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ongoworks:security/lib/server/Security.js.map","sourceFileName":"/packages/ongoworks:security/lib/server/Security.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Security"},"ignored":false,"code":"// The `Security` object is exported and provides the package API\nSecurity = {\n  // Putting these on the exported object allows package users to override if necessary\n  errorMessages: {\n    multipleCan: 'You may not combine more than one insert, update, or remove on a Security.can chain',\n    notAllowed: 'Action not allowed',\n    requiresDefinition: 'Security.defineMethod requires a \"definition\" argument',\n    requiresAllow: 'Security.defineMethod requires an \"allow\" function',\n    collectionsArg: 'The collections argument must be a Mongo.Collection instance or an array of them',\n    noCollectionOrType: 'At a minimum, you must call permit and collections methods for a security rule.'\n  },\n  // the starting point of the chain\n  permit: function () {\n    function permit(types) {\n      return new Security.Rule(types);\n    }\n\n    return permit;\n  }(),\n  can: function () {\n    function can(userId) {\n      return new Security.Check(userId);\n    }\n\n    return can;\n  }(),\n  defineMethod: function () {\n    function securityDefineMethod(name, definition) {\n      // Check whether a rule with the given name already exists; can't overwrite\n      if (Security.Rule.prototype[name]) {\n        throw new Error('A security method with the name \"' + name + '\" has already been defined');\n      }\n\n      if (!definition) throw new Error(Security.errorMessages.requiresDefinition); // If \"deny\" is used, convert to \"allow\" for backwards compatibility\n\n      if (definition.deny) {\n        definition.allow = function () {\n          return !definition.deny.apply(definition, arguments);\n        };\n      } // Make sure the definition argument is an object that has an `allow` property\n\n\n      if (!definition.allow) throw new Error(Security.errorMessages.requiresAllow); // Wrap transform, if provided\n\n      if (definition.transform) {\n        definition.transform = LocalCollection.wrapTransform(definition.transform);\n      }\n\n      Security.Rule.prototype[name] = function (arg) {\n        this._restrictions.push({\n          definition: definition,\n          arg: arg\n        });\n\n        return this;\n      };\n    }\n\n    return securityDefineMethod;\n  }()\n};\n\nMongo.Collection.prototype.permit = function (types) {\n  return Security.permit(types).collections(this);\n};","map":{"version":3,"sources":["/packages/ongoworks:security/lib/server/Security.js"],"names":["Security","errorMessages","multipleCan","notAllowed","requiresDefinition","requiresAllow","collectionsArg","noCollectionOrType","permit","types","Rule","can","userId","Check","defineMethod","securityDefineMethod","name","definition","prototype","Error","deny","allow","transform","LocalCollection","wrapTransform","arg","_restrictions","push","Mongo","Collection","collections"],"mappings":"AAAA;AACAA,WAAW;AACT;AACAC,iBAAe;AACbC,iBAAa,qFADA;AAEbC,gBAAY,oBAFC;AAGbC,wBAAoB,wDAHP;AAIbC,mBAAe,oDAJF;AAKbC,oBAAgB,kFALH;AAMbC,wBAAoB;AANP,GAFN;AAUT;AACAC;AAAQ,aAASA,MAAT,CAAgBC,KAAhB,EAAuB;AAC7B,aAAO,IAAIT,SAASU,IAAb,CAAkBD,KAAlB,CAAP;AACD;;AAFD,WAAiBD,MAAjB;AAAA,KAXS;AAcTG;AAAK,aAASA,GAAT,CAAaC,MAAb,EAAqB;AACxB,aAAO,IAAIZ,SAASa,KAAb,CAAmBD,MAAnB,CAAP;AACD;;AAFD,WAAcD,GAAd;AAAA,KAdS;AAiBTG;AAAc,aAASC,oBAAT,CAA8BC,IAA9B,EAAoCC,UAApC,EAAgD;AAC5D;AACA,UAAIjB,SAASU,IAAT,CAAcQ,SAAd,CAAwBF,IAAxB,CAAJ,EAAmC;AACjC,cAAM,IAAIG,KAAJ,CAAU,sCAAsCH,IAAtC,GAA6C,4BAAvD,CAAN;AACD;;AACD,UAAI,CAACC,UAAL,EAAiB,MAAM,IAAIE,KAAJ,CAAUnB,SAASC,aAAT,CAAuBG,kBAAjC,CAAN,CAL2C,CAM5D;;AACA,UAAIa,WAAWG,IAAf,EAAqB;AACnBH,mBAAWI,KAAX,GAAmB,YAAa;AAC9B,iBAAO,CAACJ,WAAWG,IAAX,6BAAR;AACD,SAFD;AAGD,OAX2D,CAY5D;;;AACA,UAAI,CAACH,WAAWI,KAAhB,EAAuB,MAAM,IAAIF,KAAJ,CAAUnB,SAASC,aAAT,CAAuBI,aAAjC,CAAN,CAbqC,CAc5D;;AACA,UAAIY,WAAWK,SAAf,EAA0B;AACxBL,mBAAWK,SAAX,GAAuBC,gBAAgBC,aAAhB,CAA8BP,WAAWK,SAAzC,CAAvB;AACD;;AACDtB,eAASU,IAAT,CAAcQ,SAAd,CAAwBF,IAAxB,IAAgC,UAAUS,GAAV,EAAe;AAC7C,aAAKC,aAAL,CAAmBC,IAAnB,CAAwB;AACtBV,gCADsB;AAEtBQ;AAFsB,SAAxB;;AAIA,eAAO,IAAP;AACD,OAND;AAOD;;AAzBD,WAAuBV,oBAAvB;AAAA;AAjBS,CAAX;;AA6CAa,MAAMC,UAAN,CAAiBX,SAAjB,CAA2BV,MAA3B,GAAoC,UAAUC,KAAV,EAAiB;AACnD,SAAOT,SAASQ,MAAT,CAAgBC,KAAhB,EAAuBqB,WAAvB,CAAmC,IAAnC,CAAP;AACD,CAFD","file":"/packages/ongoworks:security/lib/server/Security.js.map","sourcesContent":["// The `Security` object is exported and provides the package API\nSecurity = {\n  // Putting these on the exported object allows package users to override if necessary\n  errorMessages: {\n    multipleCan: 'You may not combine more than one insert, update, or remove on a Security.can chain',\n    notAllowed: 'Action not allowed',\n    requiresDefinition: 'Security.defineMethod requires a \"definition\" argument',\n    requiresAllow: 'Security.defineMethod requires an \"allow\" function',\n    collectionsArg: 'The collections argument must be a Mongo.Collection instance or an array of them',\n    noCollectionOrType: 'At a minimum, you must call permit and collections methods for a security rule.',\n  },\n  // the starting point of the chain\n  permit: function permit(types) {\n    return new Security.Rule(types);\n  },\n  can: function can(userId) {\n    return new Security.Check(userId);\n  },\n  defineMethod: function securityDefineMethod(name, definition) {\n    // Check whether a rule with the given name already exists; can't overwrite\n    if (Security.Rule.prototype[name]) {\n      throw new Error('A security method with the name \"' + name + '\" has already been defined');\n    }\n    if (!definition) throw new Error(Security.errorMessages.requiresDefinition);\n    // If \"deny\" is used, convert to \"allow\" for backwards compatibility\n    if (definition.deny) {\n      definition.allow = (...args) => {\n        return !definition.deny(...args);\n      };\n    }\n    // Make sure the definition argument is an object that has an `allow` property\n    if (!definition.allow) throw new Error(Security.errorMessages.requiresAllow);\n    // Wrap transform, if provided\n    if (definition.transform) {\n      definition.transform = LocalCollection.wrapTransform(definition.transform);\n    }\n    Security.Rule.prototype[name] = function (arg) {\n      this._restrictions.push({\n        definition,\n        arg,\n      });\n      return this;\n    };\n  }\n};\n\nMongo.Collection.prototype.permit = function (types) {\n  return Security.permit(types).collections(this);\n};\n"]},"hash":"df9eaeb7209998567adb720305018813646063e1"}
