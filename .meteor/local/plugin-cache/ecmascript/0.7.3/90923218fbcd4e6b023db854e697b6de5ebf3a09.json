{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/lib/collections","imported":["Jobs","ProductSearch","Orders","OrderSearch","AccountSearch"],"specifiers":[{"kind":"named","imported":"Jobs","local":"Jobs"},{"kind":"named","imported":"ProductSearch","local":"ProductSearch"},{"kind":"named","imported":"Orders","local":"Orders"},{"kind":"named","imported":"OrderSearch","local":"OrderSearch"},{"kind":"named","imported":"AccountSearch","local":"AccountSearch"}]},{"source":"/server/api","imported":["Hooks","Logger"],"specifiers":[{"kind":"named","imported":"Hooks","local":"Hooks"},{"kind":"named","imported":"Logger","local":"Logger"}]},{"source":"../methods/","imported":["buildProductSearch","buildOrderSearch","buildAccountSearch","rebuildProductSearchIndex","buildEmptyProductSearch"],"specifiers":[{"kind":"named","imported":"buildProductSearch","local":"buildProductSearch"},{"kind":"named","imported":"buildOrderSearch","local":"buildOrderSearch"},{"kind":"named","imported":"buildAccountSearch","local":"buildAccountSearch"},{"kind":"named","imported":"rebuildProductSearchIndex","local":"rebuildProductSearchIndex"},{"kind":"named","imported":"buildEmptyProductSearch","local":"buildEmptyProductSearch"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js","filenameRelative":"/imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js"],"names":["Meteor","Jobs","ProductSearch","Orders","OrderSearch","AccountSearch","Hooks","Logger","buildProductSearch","buildOrderSearch","buildAccountSearch","rebuildProductSearchIndex","buildEmptyProductSearch","addBuildProductSearchCollection","productSearchCount","find","count","debug","Job","priority","retry","retries","wait","backoff","save","cancelRepeats","addBuildOrderSearchCollection","orderSearchCount","orderCount","addBuildAccountSearchCollection","accountSearchCount","Events","add","isAppTest","processJobs","pollInterval","workTimeout","job","callback","error","done","toString","repeatId","success"],"mappings":"AAAA;OAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACvB,AAAS,AAAM,AAAe,AAAQ,AAAa,AAAqB,AACxE,AAAS,AAAO,AAAc,AAC9B,AAAS,AAAoB,AAAkB,AAC7C,AAA2B,AAA+B,AAG5D,AAAS,AAAkC,AACzC,AAAM,AAAqB,AAAc,AAAK,AAAI;;2CAClD;AAAI,AAAC,MAAL,AAAyB,4CACvB;;OAAA,AAAO,AAAM,oBAAb,AACA;AAAI,WAAJ,AAAQ,MAAR,AAAc,AAAiC,AAC5C,AAAS,AACT,AAAM,AACL;YADK,AACI,uCACT,IAAM,SAFD,AAGL;AALJ,AAOQ,eACJ;YARJ,AAOQ,AACW;eAVrB,AAYC,AAAM,AACL;AAXA,AAES,AAGI,AAEV,OAII;qBAEV;AAFG,AAAa,AACd;SAGH;AAAS,iBAAT,AAAyC,AACvC;AAAA,AAAM,AAAmB,AAAY,AAAK,AAAI,AAC9C;AAAA,AAAM,AAAa,AAAO,AAAK,AAAI;;AACnC,AAAI,AAAC,SAAL,AAAI,AAAqB,AAAY,gCACnC;MAAA,AAAO,AAAM,wCAAb,AACA;MAAA,AAAI,AAAI,AAAM,6BAAd,AAA6C,AAC1C,AAAS,AACT,AAAM,AACL;;OADK,AACI,gCACT;WAAM,MAFD,AAGL;YAAS,qCALb,AAES,IAFT,AAOG,AAAK,SACJ;eAVN,AAYC;AAAM,YACL;AAAA,AAAO,eAAP,AAAa,AACd,AACF;AAbG,AAOQ,AACW;qBAOvB,AAAS,AAAkC,AACzC;;AAAM,SAAN,AAA2B,AAAc,AAAK,AAAI;iBAClD;AAAA,AAAI,AAAC,AAAoB,AACvB;AAAA,AAAO,AAAM,AACb,AAAI,AAAI,AAAM,AAAiC,AAC5C,AAAS,AACT,AAAM;;AACL,SADK,AACI,kCACT;MAFK,AAEC,4CACN;;OAAS,oBAHJ;AAFT,AAOG,WAPH,AAOQ,MACJ;kBAAe,iCARnB,AAOQ,aATV,AAYC,UAAM;AACL,AAAO,eAAP,AAAa,AACd;YACF;eAED,AAAM;AAJF;AAKU,qBAAZ,AAAuB,AACrB,AACA;AAHJ,AAAa,AAAI,AAAiB,AAAM,AACtC,AAAI,AAAC;SAGH;iBACA;AACD;AANH,AAOC;;AAGD,aAAe,IAAY,6BACzB;OAAK,OAAL,AAAiB,WAAjB,AACE,AACE;AADF,AACgB,AAAK,AACnB;AAHJ,AACE,AAEe,AAAM;AAErB,AAAC,AAAK,AAAa,AACjB;AAAA,AAAO,AAAM,AACb;AAAmB,AAAU,AAAO,AAClC;AAAA,AAAI,AAAO,AACT,AAAI,AAAK,AAAM,AAAY,AAAE,AAAU;OArFxC,OAAT,mBAAA,sBAsFU;mBACD;AACO,kBAAU,KAAhB,AACA;AAAO,iBAAP,AAAa,MAAb,AACA,AAAI,AAAK,AAAS,AAAE;AANtB,AAGO,AACL,oBAE8B,UAAZ;AAAlB,iBACA;wCACD;iBATH,AAUC;;oBAjBL,AAkBG;;AAGH,AAAK;aAAL,AAAiB,AACf,AACE;YAAc,AAAK,UADrB,AAEE;eAAa,MAHjB,AACE,AAEqB,AAErB,AAAC;AAAK,iBAAN,AAAmB;oBACjB;;AAAA,AAAO,AAAM,AACb;AAA0B,AAAU,AAAO,AACzC;AAAA,AAAI,AAAO,AACT;AAAA,AAAI,AAAK,AAAM,AAAY,AAAE,AAAU,AACvC;mBACD;AACO,kBAAU,KAAhB,AACA;AAAO,iBAAP,AAAa,MAAb,AACA,AAAI,AAAK,AAAS,AAAE;AANtB,AAGO,AACL,oBAE8B,UAAZ;AAAlB,iBACA;+CACD;iBATH,AAUC;;oBAjBL,AAkBG;;AAGH,AAAK;aAAL,AAAiB,AACf,AACE;YAAc,AAAK,UADrB,AAEE;eAAa,MAHjB,AACE,AAEqB,AAErB,AAAC;AAAK,iBAAN,AAAmB;oBACjB;;AAAA,AAAO,AAAM,AACb;AAAiB,AAAU,AAAO,AAChC;AAAA,AAAI,AAAO,AACT;AAAA,AAAI,AAAK,AAAM,AAAY,AAAE,AAAU,AACvC;mBACD;AACO,kBAAU,KAAhB,AACA;AAAO,iBAAP,AAAa,MAAb,AACA,AAAI,AAAK,AAAS,AAAE;AANtB,AAGO,AACL,oBAE8B,UAAZ;AAAlB,iBACA;sCACD;iBATH,AAUC;;oBAjBL,AAkBG;;AAGH,AAAK;aAAL,AAAiB,AACf,AACE;YAAc,AAAK,UADrB,AAEE;eAAa,MAHjB,AACE,AAEqB,AAErB,AAAC;AAAK,iBAAN,AAAmB;oBACjB;;AAAA,AAAO,AAAM,AACb;AAAmB,AAAU,AAAO,AAClC;AAAA,AAAI,AAAO,AACT;AAAA,AAAI,AAAK,AAAM,AAAY,AAAE,AAAU,AACvC;mBACD;AACO,kBAAU,KAAhB,AACA;AAAO,iBAAP,AAAa,MAAb,AACA,AAAI,AAAK,AAAS,AAAE;AANtB,AAGO,AACL,oBAE8B,UAAZ;AAAlB,iBACA;wCACD;iBATH,AAUC;;oBAjBL,AAkBG;;AAEJ","file":"/imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Jobs, ProductSearch, Orders, OrderSearch, AccountSearch } from \"/lib/collections\";\nimport { Hooks, Logger } from \"/server/api\";\nimport { buildProductSearch, buildOrderSearch, buildAccountSearch,\n  rebuildProductSearchIndex, buildEmptyProductSearch } from \"../methods/\";\n\n\nfunction addBuildProductSearchCollection() {\n  const productSearchCount = ProductSearch.find({}).count();\n  if (!productSearchCount) {\n    Logger.debug(\"No ProductSearch records found. Adding build ProductSearch Collection to jobs\");\n    new Job(Jobs, \"product/buildSearchCollection\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .save({\n        cancelRepeats: true\n      });\n  } else {\n    Logger.debug(\"ProductSearch collection already exists, not building\");\n  }\n}\n\nfunction addBuildOrderSearchCollection() {\n  const orderSearchCount = OrderSearch.find({}).count();\n  const orderCount = Orders.find({}).count();\n  if (!orderSearchCount && orderCount) {\n    Logger.debug(\"No OrderSearch records found. Adding build OrderSearch Collection to jobs\");\n    new Job(Jobs, \"order/buildSearchCollection\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .save({\n        cancelRepeats: true\n      });\n  } else {\n    Logger.debug(\"OrderSearch collection already exists (or no orders), not building\");\n  }\n}\n\nfunction addBuildAccountSearchCollection() {\n  const accountSearchCount = AccountSearch.find({}).count();\n  if (!accountSearchCount) {\n    Logger.debug(\"No AccountSearch records found. Adding build AccountSearch Collection to jobs\");\n    new Job(Jobs, \"account/buildSearchCollection\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .save({\n        cancelRepeats: true\n      });\n  } else {\n    Logger.debug(\"AccountSearch collection already exists, not building\");\n  }\n}\n\nHooks.Events.add(\"afterCoreInit\", () => {\n  if (!Meteor.isAppTest) {\n    buildEmptyProductSearch();\n    addBuildProductSearchCollection();\n    addBuildOrderSearchCollection();\n    addBuildAccountSearchCollection();\n  }\n});\n\n\nexport default function () {\n  Jobs.processJobs(\"product/buildSearchCollection\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build ProductSearch collection running\");\n      buildProductSearch(function (error) {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"ProductSearch collection (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n\n  Jobs.processJobs(\"product/buildSearchIndex\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build ProductSearch index running\");\n      rebuildProductSearchIndex(function (error) {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"ProductSearch Index (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n\n  Jobs.processJobs(\"order/buildSearchCollection\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build OrderSearch index running\");\n      buildOrderSearch(function (error) {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"OrderSearch collection (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n\n  Jobs.processJobs(\"account/buildSearchCollection\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build AccountSearch index running\");\n      buildAccountSearch(function (error) {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"AccountSearch collection (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js.map","sourceFileName":"/imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"buildSearchCollections"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Jobs = void 0,\n    ProductSearch = void 0,\n    Orders = void 0,\n    OrderSearch = void 0,\n    AccountSearch = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Jobs: function (v) {\n    Jobs = v;\n  },\n  ProductSearch: function (v) {\n    ProductSearch = v;\n  },\n  Orders: function (v) {\n    Orders = v;\n  },\n  OrderSearch: function (v) {\n    OrderSearch = v;\n  },\n  AccountSearch: function (v) {\n    AccountSearch = v;\n  }\n}, 1);\nvar Hooks = void 0,\n    Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Hooks: function (v) {\n    Hooks = v;\n  },\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 2);\nvar buildProductSearch = void 0,\n    buildOrderSearch = void 0,\n    buildAccountSearch = void 0,\n    rebuildProductSearchIndex = void 0,\n    buildEmptyProductSearch = void 0;\nmodule.importSync(\"../methods/\", {\n  buildProductSearch: function (v) {\n    buildProductSearch = v;\n  },\n  buildOrderSearch: function (v) {\n    buildOrderSearch = v;\n  },\n  buildAccountSearch: function (v) {\n    buildAccountSearch = v;\n  },\n  rebuildProductSearchIndex: function (v) {\n    rebuildProductSearchIndex = v;\n  },\n  buildEmptyProductSearch: function (v) {\n    buildEmptyProductSearch = v;\n  }\n}, 3);\n\nfunction addBuildProductSearchCollection() {\n  var productSearchCount = ProductSearch.find({}).count();\n\n  if (!productSearchCount) {\n    Logger.debug(\"No ProductSearch records found. Adding build ProductSearch Collection to jobs\");\n    new Job(Jobs, \"product/buildSearchCollection\", {}).priority(\"normal\").retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\"\n    }).save({\n      cancelRepeats: true\n    });\n  } else {\n    Logger.debug(\"ProductSearch collection already exists, not building\");\n  }\n}\n\nfunction addBuildOrderSearchCollection() {\n  var orderSearchCount = OrderSearch.find({}).count();\n  var orderCount = Orders.find({}).count();\n\n  if (!orderSearchCount && orderCount) {\n    Logger.debug(\"No OrderSearch records found. Adding build OrderSearch Collection to jobs\");\n    new Job(Jobs, \"order/buildSearchCollection\", {}).priority(\"normal\").retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\"\n    }).save({\n      cancelRepeats: true\n    });\n  } else {\n    Logger.debug(\"OrderSearch collection already exists (or no orders), not building\");\n  }\n}\n\nfunction addBuildAccountSearchCollection() {\n  var accountSearchCount = AccountSearch.find({}).count();\n\n  if (!accountSearchCount) {\n    Logger.debug(\"No AccountSearch records found. Adding build AccountSearch Collection to jobs\");\n    new Job(Jobs, \"account/buildSearchCollection\", {}).priority(\"normal\").retry({\n      retries: 5,\n      wait: 60000,\n      backoff: \"exponential\"\n    }).save({\n      cancelRepeats: true\n    });\n  } else {\n    Logger.debug(\"AccountSearch collection already exists, not building\");\n  }\n}\n\nHooks.Events.add(\"afterCoreInit\", function () {\n  if (!Meteor.isAppTest) {\n    buildEmptyProductSearch();\n    addBuildProductSearchCollection();\n    addBuildOrderSearchCollection();\n    addBuildAccountSearchCollection();\n  }\n});\nmodule.export(\"default\", exports.default = function () {\n  Jobs.processJobs(\"product/buildSearchCollection\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, function (job, callback) {\n    Logger.debug(\"(re)build ProductSearch collection running\");\n    buildProductSearch(function (error) {\n      if (error) {\n        job.done(error.toString(), {\n          repeatId: true\n        });\n        callback();\n      } else {\n        var success = \"ProductSearch collection (re)built successfully.\";\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n        callback();\n      }\n    });\n  });\n  Jobs.processJobs(\"product/buildSearchIndex\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, function (job, callback) {\n    Logger.debug(\"(re)build ProductSearch index running\");\n    rebuildProductSearchIndex(function (error) {\n      if (error) {\n        job.done(error.toString(), {\n          repeatId: true\n        });\n        callback();\n      } else {\n        var success = \"ProductSearch Index (re)built successfully.\";\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n        callback();\n      }\n    });\n  });\n  Jobs.processJobs(\"order/buildSearchCollection\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, function (job, callback) {\n    Logger.debug(\"(re)build OrderSearch index running\");\n    buildOrderSearch(function (error) {\n      if (error) {\n        job.done(error.toString(), {\n          repeatId: true\n        });\n        callback();\n      } else {\n        var success = \"OrderSearch collection (re)built successfully.\";\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n        callback();\n      }\n    });\n  });\n  Jobs.processJobs(\"account/buildSearchCollection\", {\n    pollInterval: 30 * 1000,\n    workTimeout: 180 * 1000\n  }, function (job, callback) {\n    Logger.debug(\"(re)build AccountSearch index running\");\n    buildAccountSearch(function (error) {\n      if (error) {\n        job.done(error.toString(), {\n          repeatId: true\n        });\n        callback();\n      } else {\n        var success = \"AccountSearch collection (re)built successfully.\";\n        Logger.debug(success);\n        job.done(success, {\n          repeatId: true\n        });\n        callback();\n      }\n    });\n  });\n});","map":{"version":3,"sources":["/imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js"],"names":["Meteor","Jobs","ProductSearch","Orders","OrderSearch","AccountSearch","Hooks","Logger","buildProductSearch","buildOrderSearch","buildAccountSearch","rebuildProductSearchIndex","buildEmptyProductSearch","addBuildProductSearchCollection","productSearchCount","find","count","debug","Job","priority","retry","retries","wait","backoff","save","cancelRepeats","addBuildOrderSearchCollection","orderSearchCount","orderCount","addBuildAccountSearchCollection","accountSearchCount","Events","add","isAppTest","processJobs","pollInterval","workTimeout","job","callback","error","done","toString","repeatId","success"],"mappings":"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","file":"/imports/plugins/included/search-mongo/server/jobs/buildSearchCollections.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Jobs, ProductSearch, Orders, OrderSearch, AccountSearch } from \"/lib/collections\";\nimport { Hooks, Logger } from \"/server/api\";\nimport { buildProductSearch, buildOrderSearch, buildAccountSearch,\n  rebuildProductSearchIndex, buildEmptyProductSearch } from \"../methods/\";\n\n\nfunction addBuildProductSearchCollection() {\n  const productSearchCount = ProductSearch.find({}).count();\n  if (!productSearchCount) {\n    Logger.debug(\"No ProductSearch records found. Adding build ProductSearch Collection to jobs\");\n    new Job(Jobs, \"product/buildSearchCollection\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .save({\n        cancelRepeats: true\n      });\n  } else {\n    Logger.debug(\"ProductSearch collection already exists, not building\");\n  }\n}\n\nfunction addBuildOrderSearchCollection() {\n  const orderSearchCount = OrderSearch.find({}).count();\n  const orderCount = Orders.find({}).count();\n  if (!orderSearchCount && orderCount) {\n    Logger.debug(\"No OrderSearch records found. Adding build OrderSearch Collection to jobs\");\n    new Job(Jobs, \"order/buildSearchCollection\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .save({\n        cancelRepeats: true\n      });\n  } else {\n    Logger.debug(\"OrderSearch collection already exists (or no orders), not building\");\n  }\n}\n\nfunction addBuildAccountSearchCollection() {\n  const accountSearchCount = AccountSearch.find({}).count();\n  if (!accountSearchCount) {\n    Logger.debug(\"No AccountSearch records found. Adding build AccountSearch Collection to jobs\");\n    new Job(Jobs, \"account/buildSearchCollection\", {})\n      .priority(\"normal\")\n      .retry({\n        retries: 5,\n        wait: 60000,\n        backoff: \"exponential\"\n      })\n      .save({\n        cancelRepeats: true\n      });\n  } else {\n    Logger.debug(\"AccountSearch collection already exists, not building\");\n  }\n}\n\nHooks.Events.add(\"afterCoreInit\", () => {\n  if (!Meteor.isAppTest) {\n    buildEmptyProductSearch();\n    addBuildProductSearchCollection();\n    addBuildOrderSearchCollection();\n    addBuildAccountSearchCollection();\n  }\n});\n\n\nexport default function () {\n  Jobs.processJobs(\"product/buildSearchCollection\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build ProductSearch collection running\");\n      buildProductSearch(function (error) {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"ProductSearch collection (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n\n  Jobs.processJobs(\"product/buildSearchIndex\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build ProductSearch index running\");\n      rebuildProductSearchIndex(function (error) {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"ProductSearch Index (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n\n  Jobs.processJobs(\"order/buildSearchCollection\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build OrderSearch index running\");\n      buildOrderSearch(function (error) {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"OrderSearch collection (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n\n  Jobs.processJobs(\"account/buildSearchCollection\",\n    {\n      pollInterval: 30 * 1000,\n      workTimeout: 180 * 1000\n    },\n    (job, callback) => {\n      Logger.debug(\"(re)build AccountSearch index running\");\n      buildAccountSearch(function (error) {\n        if (error) {\n          job.done(error.toString(), { repeatId: true });\n          callback();\n        } else {\n          const success = \"AccountSearch collection (re)built successfully.\";\n          Logger.debug(success);\n          job.done(success, { repeatId: true });\n          callback();\n        }\n      });\n    }\n  );\n}\n"]},"hash":"90923218fbcd4e6b023db854e697b6de5ebf3a09"}
