{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/server/api","imported":["Logger","MethodHooks"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"},{"kind":"named","imported":"MethodHooks","local":"MethodHooks"}]},{"source":"../shop","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/methods/core/hooks/shop.js","filenameRelative":"/server/methods/core/hooks/shop.js","inputSourceMap":{"version":3,"sources":["/server/methods/core/hooks/shop.js"],"names":["Logger","MethodHooks","after","options","error","warn","reason","result","debug"],"mappings":"AAAA,IAAS;IAAT,AAAiB;AAAjB,OAAoC,WAApC,A,AACA;;;;;;;;kBACA,AAAO,AAAP,AAEA,AAAY,AAAZ,AAAkB,AAAlB,AAAoC,AAAU,AAAV,AAAmB;AACrD,AAAI,YAAQ,MAAZ,AAAmB,qCACjB;MAAO,QAAP,AAAY,OAAZ,AAAsC,AAAQ,AAAR,AAAc,AAApD,AACA;WAAO,KAAQ,AAAf,wCACD;;AACD;;MAAI,OAAO,QAAQ,AAAf,WAA0B,AAA9B,UAAwC,AACtC;WAAO,AAAP,AAAc,iCAAwB,QAAQ,AAAO,AAArD,AACD;AAED;;SAAO,QAAQ,AAAf,AACD;AAVD","file":"/server/methods/core/hooks/shop.js.map","sourcesContent":["import { Logger, MethodHooks } from \"/server/api\";\n// this needed to keep correct loading order. Methods should be loaded before hooks\nimport \"../shop\";\n\nMethodHooks.after(\"shop/createTag\", function (options) {\n  if (options.error) {\n    Logger.warn(\"Failed to add new tag:\", options.error.reason);\n    return options.error;\n  }\n  if (typeof options.result === \"string\") {\n    Logger.debug(`Created tag with _id: ${options.result}`);\n  }\n\n  return options.result;\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/methods/core/hooks/shop.js.map","sourceFileName":"/server/methods/core/hooks/shop.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"shop"},"ignored":false,"code":"var Logger = void 0,\n    MethodHooks = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  },\n  MethodHooks: function (v) {\n    MethodHooks = v;\n  }\n}, 0);\nmodule.importSync(\"../shop\");\nMethodHooks.after(\"shop/createTag\", function (options) {\n  if (options.error) {\n    Logger.warn(\"Failed to add new tag:\", options.error.reason);\n    return options.error;\n  }\n\n  if (typeof options.result === \"string\") {\n    Logger.debug(\"Created tag with _id: \" + options.result);\n  }\n\n  return options.result;\n});","map":{"version":3,"sources":["/server/methods/core/hooks/shop.js"],"names":["Logger","MethodHooks","after","options","error","warn","reason","result","debug"],"mappings":"AAAA,IAAS;IAAT,AAAiB;AAAjB,OAAoC,WAApC,A,AACA;;;;;;;;kBACA,AAAO,AAAP,AAEA,AAAY,AAAZ,AAAkB,AAAlB,AAAoC,AAAU,AAAV,AAAmB;AACrD,AAAI,YAAQ,MAAZ,AAAmB,qCACjB;MAAO,QAAP,AAAY,OAAZ,AAAsC,AAAQ,AAAR,AAAc,AAApD,AACA;WAAO,KAAQ,AAAf,wCACD;;AACD;;MAAI,OAAO,QAAQ,AAAf,WAA0B,AAA9B,UAAwC,AACtC;WAAO,AAAP,AAAc,iCAAwB,QAAQ,AAAO,AAArD,AACD;AAED;;SAAO,QAAQ,AAAf,AACD;AAVD","file":"/server/methods/core/hooks/shop.js.map","sourcesContent":["import { Logger, MethodHooks } from \"/server/api\";\n// this needed to keep correct loading order. Methods should be loaded before hooks\nimport \"../shop\";\n\nMethodHooks.after(\"shop/createTag\", function (options) {\n  if (options.error) {\n    Logger.warn(\"Failed to add new tag:\", options.error.reason);\n    return options.error;\n  }\n  if (typeof options.result === \"string\") {\n    Logger.debug(`Created tag with _id: ${options.result}`);\n  }\n\n  return options.result;\n});\n"]},"hash":"138e2df07d033f858d39c6db44a3ee779c73916e"}
