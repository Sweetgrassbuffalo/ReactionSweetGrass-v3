{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"react-dnd","imported":["DragSource","DropTarget"],"specifiers":[{"kind":"named","imported":"DragSource","local":"DragSource"},{"kind":"named","imported":"DropTarget","local":"DropTarget"}]}],"exports":{"exported":["ComposeSortableItem","itemType","SortableItemComponent"],"specifiers":[{"kind":"local","local":"ComposeSortableItem","exported":"default"},{"kind":"local","local":"itemType","exported":"default"},{"kind":"local","local":"SortableItemComponent","exported":"default"}]}}},"options":{"filename":"/imports/plugins/core/ui/client/containers/sortableItem.js","filenameRelative":"/imports/plugins/core/ui/client/containers/sortableItem.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/ui/client/containers/sortableItem.js"],"names":["React","PropTypes","DragSource","DropTarget","cardSource","beginDrag","props","index","collectDropSource","connect","monitor","connectDragSource","dragSource","connectDragPreview","dragPreview","isDragging","collectDropTarget","connectDropTarget","dropTarget","cardTarget","hover","dragIndex","getItem","hoverIndex","onMove","ComposeSortableItem","itemType","SortableItemComponent","SortableItem","contextTypes","dragDropManager","object","isRequired","propTypes","func","bool","decoratedComponent"],"mappings":"AAAA,OAAA,AAAO;AAAS;AAAhB,WAAA,AAAiC;;;;;;;;;;;;;;;;;;;;;;GACjC,AAAS,AAAY,AAAkB,AAEvC,AAAM,AAAa;AACjB,IAAA,AAAU;AACD,8BACL;;mBAEH;AAHC,AAAO,AACE,AAAM;AAHnB,AAAmB,A,AAQnB;AAPmB,AACf,GAYJ,AAAS,AAAkB,AAAS,AAAS;;;;;;;AAC3C,SAAO,oCACL;;uBACoB,QAFf,AAEe,AAAQ,AAC5B;AAAY,wBAAQ,QAHtB,AAAO,AAGO;wBAEf;AALQ,AACc,AAAQ,AAC3B;AAKJ,AAAS,AAAkB,AAAS;;AAClC,SAAO,2BACL;;+BAEH;AAHC,AAAO,AACc,AAAQ;AAI/B,AAAM,AAAa;;AACjB,IAAA,AAAM,AAAO;mBACL,OAAY;QACZ,YAAa,AAAM,QAFL,AAEpB,AAEA;2BACA,AAAI,AAAc,AAAY,AAC5B,OACD;;AAPmB,AASpB;;AAToB,AAUpB,AAAM,AAAO,AAAW,AAExB,AACA,KAZA,AAAkB,AAAQ,AAAU,AACpC,CAYA;;;4BACA,aACA;AAAA,AAAQ,AAAU,AAAQ,AAC3B;;AAlBH,AAAmB;;8BAqBnB;AAAe,AAAS,AAAoB,AAAU,AAAuB,AAC3E,AAAM,AAAe,AAAC,AAAU,AAC9B,AAAO,AAAC,AAAsB,AAAI,AACnC;AAvBD,AAAsB,AACpB;;;sCAwBF;+BAAA,AAAa,AAAe,uBAC1B;AADF,AAA4B,AACT,AAAU,AAAO,AAGpC;;eAAA,AAAa,AAAY;sCAAA,AAEvB,AAAoB,AAAU,AAAK,AACnC,AAAmB,AAAU,AAAK,AAClC;AAHA;eAGmB;AAJrB,AAAyB,AAKX,AAAU,AAAK;uCAG7B;AAAI,uBAAqB,eAAzB,AACA;uBAAqB,UAAW,KAAhC,AAAqB,AAAqB,AAAY,AAAmB,AACzE;gBAAqB,eAArB,AAAqB,AAAW,AAAU,AAAY,AAAmB,AAEzE,AAAO,AACR;AAb0B,AAIJ,AAAU,AAAK,AAClC","file":"/imports/plugins/core/ui/client/containers/sortableItem.js.map","sourcesContent":["import React, { PropTypes } from \"react\";\nimport { DragSource, DropTarget } from \"react-dnd\";\n\nconst cardSource = {\n  beginDrag(props) {\n    return {\n      index: props.index\n    };\n  }\n};\n\n/**\n * Specifies the props to inject into your component.\n * @param {DragSourceConnector} connect An onject containing functions to assign roles to a component's DOM nodes\n * @param {DragSourceMonitor} monitor An object containing functions that return information about drag state\n * @return {Object} Props for drag source\n */\nfunction collectDropSource(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nfunction collectDropTarget(connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n}\n\nconst cardTarget = {\n  hover(props, monitor) {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index;\n\n    // Don't replace items with themselves\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    // Time to actually perform the action\n    props.onMove(dragIndex, hoverIndex);\n\n    // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n    monitor.getItem().index = hoverIndex;\n  }\n};\n\nexport default function ComposeSortableItem(itemType, SortableItemComponent) {\n  const SortableItem = (props) => {\n    return <SortableItemComponent {...props} />;\n  };\n\n  SortableItem.contextTypes = {\n    dragDropManager: PropTypes.object.isRequired\n  };\n\n  SortableItem.propTypes = {\n    // Injected by React DnD:\n    connectDragPreview: PropTypes.func.isRequired,\n    connectDragSource: PropTypes.func.isRequired,\n    connectDropTarget: PropTypes.func.isRequired,\n    isDragging: PropTypes.bool.isRequired\n  };\n\n  let decoratedComponent = SortableItem;\n  decoratedComponent = DragSource(itemType, cardSource, collectDropSource)(decoratedComponent);\n  decoratedComponent = DropTarget(itemType, cardTarget, collectDropTarget)(decoratedComponent);\n\n  return decoratedComponent;\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/ui/client/containers/sortableItem.js.map","sourceFileName":"/imports/plugins/core/ui/client/containers/sortableItem.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"sortableItem"},"ignored":false,"code":"module.export({\n  \"default\": function () {\n    return ComposeSortableItem;\n  }\n});\nvar React = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar DragSource = void 0,\n    DropTarget = void 0;\nmodule.importSync(\"react-dnd\", {\n  DragSource: function (v) {\n    DragSource = v;\n  },\n  DropTarget: function (v) {\n    DropTarget = v;\n  }\n}, 1);\nvar cardSource = {\n  beginDrag: function (props) {\n    return {\n      index: props.index\n    };\n  }\n}; /**\n    * Specifies the props to inject into your component.\n    * @param {DragSourceConnector} connect An onject containing functions to assign roles to a component's DOM nodes\n    * @param {DragSourceMonitor} monitor An object containing functions that return information about drag state\n    * @return {Object} Props for drag source\n    */\n\nfunction collectDropSource(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nfunction collectDropTarget(connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n}\n\nvar cardTarget = {\n  hover: function (props, monitor) {\n    var dragIndex = monitor.getItem().index;\n    var hoverIndex = props.index; // Don't replace items with themselves\n\n    if (dragIndex === hoverIndex) {\n      return;\n    } // Time to actually perform the action\n\n\n    props.onMove(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n\n    monitor.getItem().index = hoverIndex;\n  }\n};\n\nfunction ComposeSortableItem(itemType, SortableItemComponent) {\n  var SortableItem = function (props) {\n    return React.createElement(SortableItemComponent, props);\n  };\n\n  SortableItem.contextTypes = {\n    dragDropManager: PropTypes.object.isRequired\n  };\n  SortableItem.propTypes = {\n    // Injected by React DnD:\n    connectDragPreview: PropTypes.func.isRequired,\n    connectDragSource: PropTypes.func.isRequired,\n    connectDropTarget: PropTypes.func.isRequired,\n    isDragging: PropTypes.bool.isRequired\n  };\n  var decoratedComponent = SortableItem;\n  decoratedComponent = DragSource(itemType, cardSource, collectDropSource)(decoratedComponent);\n  decoratedComponent = DropTarget(itemType, cardTarget, collectDropTarget)(decoratedComponent);\n  return decoratedComponent;\n}","map":{"version":3,"sources":["/imports/plugins/core/ui/client/containers/sortableItem.js"],"names":["React","PropTypes","DragSource","DropTarget","cardSource","beginDrag","props","index","collectDropSource","connect","monitor","connectDragSource","dragSource","connectDragPreview","dragPreview","isDragging","collectDropTarget","connectDropTarget","dropTarget","cardTarget","hover","dragIndex","getItem","hoverIndex","onMove","ComposeSortableItem","itemType","SortableItemComponent","SortableItem","contextTypes","dragDropManager","object","isRequired","propTypes","func","bool","decoratedComponent"],"mappings":"AAAA,OAAA,AAAO;AAAS;AAAhB,WAAA,AAAiC;;;;;;;;;;;;;;;;;;;;;;GACjC,AAAS,AAAY,AAAkB,AAEvC,AAAM,AAAa;AACjB,IAAA,AAAU;AACD,8BACL;;mBAEH;AAHC,AAAO,AACE,AAAM;AAHnB,AAAmB,A,AAQnB;AAPmB,AACf,GAYJ,AAAS,AAAkB,AAAS,AAAS;;;;;;;AAC3C,SAAO,oCACL;;uBACoB,QAFf,AAEe,AAAQ,AAC5B;AAAY,wBAAQ,QAHtB,AAAO,AAGO;wBAEf;AALQ,AACc,AAAQ,AAC3B;AAKJ,AAAS,AAAkB,AAAS;;AAClC,SAAO,2BACL;;+BAEH;AAHC,AAAO,AACc,AAAQ;AAI/B,AAAM,AAAa;;AACjB,IAAA,AAAM,AAAO;mBACL,OAAY;QACZ,YAAa,AAAM,QAFL,AAEpB,AAEA;2BACA,AAAI,AAAc,AAAY,AAC5B,OACD;;AAPmB,AASpB;;AAToB,AAUpB,AAAM,AAAO,AAAW,AAExB,AACA,KAZA,AAAkB,AAAQ,AAAU,AACpC,CAYA;;;4BACA,aACA;AAAA,AAAQ,AAAU,AAAQ,AAC3B;;AAlBH,AAAmB;;8BAqBnB;AAAe,AAAS,AAAoB,AAAU,AAAuB,AAC3E,AAAM,AAAe,AAAC,AAAU,AAC9B,AAAO,AAAC,AAAsB,AAAI,AACnC;AAvBD,AAAsB,AACpB;;;sCAwBF;+BAAA,AAAa,AAAe,uBAC1B;AADF,AAA4B,AACT,AAAU,AAAO,AAGpC;;eAAA,AAAa,AAAY;sCAAA,AAEvB,AAAoB,AAAU,AAAK,AACnC,AAAmB,AAAU,AAAK,AAClC;AAHA;eAGmB;AAJrB,AAAyB,AAKX,AAAU,AAAK;uCAG7B;AAAI,uBAAqB,eAAzB,AACA;uBAAqB,UAAW,KAAhC,AAAqB,AAAqB,AAAY,AAAmB,AACzE;gBAAqB,eAArB,AAAqB,AAAW,AAAU,AAAY,AAAmB,AAEzE,AAAO,AACR;AAb0B,AAIJ,AAAU,AAAK,AAClC","file":"/imports/plugins/core/ui/client/containers/sortableItem.js.map","sourcesContent":["import React, { PropTypes } from \"react\";\nimport { DragSource, DropTarget } from \"react-dnd\";\n\nconst cardSource = {\n  beginDrag(props) {\n    return {\n      index: props.index\n    };\n  }\n};\n\n/**\n * Specifies the props to inject into your component.\n * @param {DragSourceConnector} connect An onject containing functions to assign roles to a component's DOM nodes\n * @param {DragSourceMonitor} monitor An object containing functions that return information about drag state\n * @return {Object} Props for drag source\n */\nfunction collectDropSource(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nfunction collectDropTarget(connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n}\n\nconst cardTarget = {\n  hover(props, monitor) {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index;\n\n    // Don't replace items with themselves\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    // Time to actually perform the action\n    props.onMove(dragIndex, hoverIndex);\n\n    // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n    monitor.getItem().index = hoverIndex;\n  }\n};\n\nexport default function ComposeSortableItem(itemType, SortableItemComponent) {\n  const SortableItem = (props) => {\n    return <SortableItemComponent {...props} />;\n  };\n\n  SortableItem.contextTypes = {\n    dragDropManager: PropTypes.object.isRequired\n  };\n\n  SortableItem.propTypes = {\n    // Injected by React DnD:\n    connectDragPreview: PropTypes.func.isRequired,\n    connectDragSource: PropTypes.func.isRequired,\n    connectDropTarget: PropTypes.func.isRequired,\n    isDragging: PropTypes.bool.isRequired\n  };\n\n  let decoratedComponent = SortableItem;\n  decoratedComponent = DragSource(itemType, cardSource, collectDropSource)(decoratedComponent);\n  decoratedComponent = DropTarget(itemType, cardTarget, collectDropTarget)(decoratedComponent);\n\n  return decoratedComponent;\n}\n"]},"hash":"7c3ed36dbc9725c375f1d3dcdad15e08ff32bf82"}
