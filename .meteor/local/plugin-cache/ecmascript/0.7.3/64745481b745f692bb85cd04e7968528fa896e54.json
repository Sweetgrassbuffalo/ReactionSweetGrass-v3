{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["Match","check"],"specifiers":[{"kind":"named","imported":"Match","local":"Match"},{"kind":"named","imported":"check","local":"check"}]},{"source":"/lib/collections","imported":["Cart","Packages"],"specifiers":[{"kind":"named","imported":"Cart","local":"Cart"},{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"../../lib/collections","imported":["Taxes"],"specifiers":[{"kind":"named","imported":"Taxes","local":"Taxes"}]},{"source":"../api","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Reaction"}]},{"source":"/server/api","imported":["Logger"],"specifiers":[{"kind":"named","imported":"Logger","local":"Logger"}]}],"exports":{"exported":["methods"],"specifiers":[{"kind":"local","local":"methods","exported":"methods"}]}}},"options":{"filename":"/imports/plugins/core/taxes/server/methods/methods.js","filenameRelative":"/imports/plugins/core/taxes/server/methods/methods.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/taxes/server/methods/methods.js"],"names":["Meteor","Match","check","Cart","Packages","Taxes","Reaction","Logger","methods","taxId","String","hasPermission","Error","remove","cartId","taxRate","taxes","Number","Optional","Array","direct","update","$set","tax","modifier","docId","Object","OneOf","undefined","insert","cartToCalc","findOne","shopId","pkg","name","enabled","settings","rates","debug","shipping","items","shippingAddress","address","customTaxRate","totalTax","addressTaxData","find","$and","$or","postal","$exists","region","country","sort","fetch","length","rate","variants","taxable","subTotal","price","quantity","cartSubTotal","call","_id"],"mappings":"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","file":"/imports/plugins/core/taxes/server/methods/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Match, check } from \"meteor/check\";\nimport { Cart, Packages } from \"/lib/collections\";\nimport { Taxes } from \"../../lib/collections\";\nimport Reaction from \"../api\";\nimport { Logger } from \"/server/api\";\n\n//\n// make all tax methods available\n//\nexport const methods = {\n  /**\n   * taxes/deleteRate\n   * @param  {String} taxId tax taxId to delete\n   * @return {String} returns update/insert result\n   */\n  \"taxes/deleteRate\": function (taxId) {\n    check(taxId, String);\n\n    // check permissions to delete\n    if (!Reaction.hasPermission(\"taxes\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    return Taxes.remove(taxId);\n  },\n\n  /**\n   * taxes/setRate\n   * update the cart without hooks\n   * @param  {String} cartId cartId\n   * @param  {Number} taxRate taxRate\n   * @param  {Object} taxes taxes\n   * @return {Number} returns update result\n   */\n  \"taxes/setRate\": function (cartId, taxRate, taxes) {\n    check(cartId, String);\n    check(taxRate, Number);\n    check(taxes, Match.Optional(Array));\n\n    return Cart.direct.update(cartId, {\n      $set: {\n        taxes: taxes,\n        tax: taxRate\n      }\n    });\n  },\n\n  /**\n   * taxes/addRate\n   * @param  {String} modifier update statement\n   * @param  {String} docId    tax docId\n   * @return {String} returns update/insert result\n   */\n  \"taxes/addRate\": function (modifier, docId) {\n    check(modifier, Object);\n    check(docId, Match.OneOf(String, null, undefined));\n\n    // check permissions to add\n    if (!Reaction.hasPermission(\"taxes\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    // if no doc, insert\n    if (!docId) {\n      return Taxes.insert(modifier);\n    }\n    // else update and return\n    return Taxes.update(docId, modifier);\n  },\n\n  /**\n   * taxes/calculate\n   * @param  {String} cartId cartId\n   * @return {Object}  returns tax object\n   */\n  \"taxes/calculate\": function (cartId) {\n    check(cartId, String);\n    const cartToCalc = Cart.findOne(cartId);\n    const shopId = cartToCalc.shopId;\n    let taxRate = 0;\n    // get all tax packages\n    //\n    // TODO FIND IN LAYOUT/REGISTRY\n    //\n    const pkg = Packages.findOne({\n      shopId: shopId,\n      name: \"reaction-taxes\"\n    });\n    //\n    // custom rates\n    // TODO Determine calculation method (row, total, shipping)\n    // TODO method for order tax updates\n    // additional logic will be needed for refunds\n    // or tax adjustments\n    //\n    // check if plugin is enabled and this calculation method is enabled\n    if (pkg && pkg.enabled === true && pkg.settings.rates.enabled === true) {\n      Logger.debug(\"Calculating custom tax rates\");\n\n      if (typeof cartToCalc.shipping !== \"undefined\" && typeof cartToCalc.items !== \"undefined\") {\n        const shippingAddress = cartToCalc.shipping[0].address;\n        //\n        // custom rates that match shipping info\n        // high chance this needs more review as\n        // it's unlikely this matches all potential\n        // here we just sort by postal, so if it's an exact\n        // match we're taking the first record, where the most\n        // likely tax scenario is a postal code falling\n        // back to a regional tax.\n\n        if (shippingAddress) {\n          let customTaxRate = 0;\n          let totalTax = 0;\n          // lookup custom tax rate\n          const addressTaxData = Taxes.find(\n            {\n              $and: [{\n                $or: [{\n                  postal: shippingAddress.postal\n                }, {\n                  postal: { $exists: false },\n                  region: shippingAddress.region,\n                  country: shippingAddress.country\n                }, {\n                  postal: { $exists: false },\n                  region: { $exists: false },\n                  country: shippingAddress.country\n                }]\n              }, {\n                shopId: shopId\n              }]\n            }, { sort: { postal: -1 } }\n          ).fetch();\n\n          // return custom rates\n          // TODO  break down the product origination, taxability\n          // by qty and an originating shop and inventory\n          // for location of each item in the cart.\n          if (addressTaxData.length > 0) {\n            customTaxRate = addressTaxData[0].rate;\n          }\n\n          // calculate line item taxes\n          for (const items of cartToCalc.items) {\n            // only processs taxable products\n            if (items.variants.taxable === true) {\n              const subTotal = items.variants.price * items.quantity;\n              const tax = subTotal * (customTaxRate / 100);\n              totalTax += tax;\n            }\n          }\n          // calculate overall cart rate\n          if (totalTax > 0) {\n            taxRate = (totalTax / cartToCalc.cartSubTotal());\n          }\n          // store tax on cart\n          Meteor.call(\"taxes/setRate\", cartToCalc._id, taxRate, addressTaxData);\n        } // end custom rates\n      } // end shippingAddress calculation\n    } else {\n      // we are here because the custom rate package is disabled.\n      // we're going to set an inital rate of 0\n      // all methods that trigger when taxes/calculate will\n      // recalculate this rate as needed.\n      Meteor.call(\"taxes/setRate\", cartToCalc._id, taxRate);\n    }\n  } // end taxes/calculate\n};\n\n// export tax methods to Meteor\nMeteor.methods(methods);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/taxes/server/methods/methods.js.map","sourceFileName":"/imports/plugins/core/taxes/server/methods/methods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"methods"},"ignored":false,"code":"module.export({\n  methods: function () {\n    return methods;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Match = void 0,\n    check = void 0;\nmodule.importSync(\"meteor/check\", {\n  Match: function (v) {\n    Match = v;\n  },\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar Cart = void 0,\n    Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Cart: function (v) {\n    Cart = v;\n  },\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 2);\nvar Taxes = void 0;\nmodule.importSync(\"../../lib/collections\", {\n  Taxes: function (v) {\n    Taxes = v;\n  }\n}, 3);\nvar Reaction = void 0;\nmodule.importSync(\"../api\", {\n  \"default\": function (v) {\n    Reaction = v;\n  }\n}, 4);\nvar Logger = void 0;\nmodule.importSync(\"/server/api\", {\n  Logger: function (v) {\n    Logger = v;\n  }\n}, 5);\nvar methods = {\n  /**\n   * taxes/deleteRate\n   * @param  {String} taxId tax taxId to delete\n   * @return {String} returns update/insert result\n   */\"taxes/deleteRate\": function (taxId) {\n    check(taxId, String); // check permissions to delete\n\n    if (!Reaction.hasPermission(\"taxes\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    return Taxes.remove(taxId);\n  },\n  /**\n   * taxes/setRate\n   * update the cart without hooks\n   * @param  {String} cartId cartId\n   * @param  {Number} taxRate taxRate\n   * @param  {Object} taxes taxes\n   * @return {Number} returns update result\n   */\"taxes/setRate\": function (cartId, taxRate, taxes) {\n    check(cartId, String);\n    check(taxRate, Number);\n    check(taxes, Match.Optional(Array));\n    return Cart.direct.update(cartId, {\n      $set: {\n        taxes: taxes,\n        tax: taxRate\n      }\n    });\n  },\n  /**\n   * taxes/addRate\n   * @param  {String} modifier update statement\n   * @param  {String} docId    tax docId\n   * @return {String} returns update/insert result\n   */\"taxes/addRate\": function (modifier, docId) {\n    check(modifier, Object);\n    check(docId, Match.OneOf(String, null, undefined)); // check permissions to add\n\n    if (!Reaction.hasPermission(\"taxes\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    } // if no doc, insert\n\n\n    if (!docId) {\n      return Taxes.insert(modifier);\n    } // else update and return\n\n\n    return Taxes.update(docId, modifier);\n  },\n  /**\n   * taxes/calculate\n   * @param  {String} cartId cartId\n   * @return {Object}  returns tax object\n   */\"taxes/calculate\": function (cartId) {\n    check(cartId, String);\n    var cartToCalc = Cart.findOne(cartId);\n    var shopId = cartToCalc.shopId;\n    var taxRate = 0; // get all tax packages\n    //\n    // TODO FIND IN LAYOUT/REGISTRY\n    //\n\n    var pkg = Packages.findOne({\n      shopId: shopId,\n      name: \"reaction-taxes\"\n    }); //\n    // custom rates\n    // TODO Determine calculation method (row, total, shipping)\n    // TODO method for order tax updates\n    // additional logic will be needed for refunds\n    // or tax adjustments\n    //\n    // check if plugin is enabled and this calculation method is enabled\n\n    if (pkg && pkg.enabled === true && pkg.settings.rates.enabled === true) {\n      Logger.debug(\"Calculating custom tax rates\");\n\n      if (typeof cartToCalc.shipping !== \"undefined\" && typeof cartToCalc.items !== \"undefined\") {\n        var shippingAddress = cartToCalc.shipping[0].address; //\n        // custom rates that match shipping info\n        // high chance this needs more review as\n        // it's unlikely this matches all potential\n        // here we just sort by postal, so if it's an exact\n        // match we're taking the first record, where the most\n        // likely tax scenario is a postal code falling\n        // back to a regional tax.\n\n        if (shippingAddress) {\n          var customTaxRate = 0;\n          var totalTax = 0; // lookup custom tax rate\n\n          var addressTaxData = Taxes.find({\n            $and: [{\n              $or: [{\n                postal: shippingAddress.postal\n              }, {\n                postal: {\n                  $exists: false\n                },\n                region: shippingAddress.region,\n                country: shippingAddress.country\n              }, {\n                postal: {\n                  $exists: false\n                },\n                region: {\n                  $exists: false\n                },\n                country: shippingAddress.country\n              }]\n            }, {\n              shopId: shopId\n            }]\n          }, {\n            sort: {\n              postal: -1\n            }\n          }).fetch(); // return custom rates\n          // TODO  break down the product origination, taxability\n          // by qty and an originating shop and inventory\n          // for location of each item in the cart.\n\n          if (addressTaxData.length > 0) {\n            customTaxRate = addressTaxData[0].rate;\n          } // calculate line item taxes\n\n\n          for (var _iterator = cartToCalc.items, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n            var _ref;\n\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref = _i.value;\n            }\n\n            var items = _ref;\n\n            // only processs taxable products\n            if (items.variants.taxable === true) {\n              var subTotal = items.variants.price * items.quantity;\n              var tax = subTotal * (customTaxRate / 100);\n              totalTax += tax;\n            }\n          } // calculate overall cart rate\n\n\n          if (totalTax > 0) {\n            taxRate = totalTax / cartToCalc.cartSubTotal();\n          } // store tax on cart\n\n\n          Meteor.call(\"taxes/setRate\", cartToCalc._id, taxRate, addressTaxData);\n        } // end custom rates\n\n      } // end shippingAddress calculation\n\n    } else {\n      // we are here because the custom rate package is disabled.\n      // we're going to set an inital rate of 0\n      // all methods that trigger when taxes/calculate will\n      // recalculate this rate as needed.\n      Meteor.call(\"taxes/setRate\", cartToCalc._id, taxRate);\n    }\n  } // end taxes/calculate\n\n};\n// export tax methods to Meteor\nMeteor.methods(methods);","map":{"version":3,"sources":["/imports/plugins/core/taxes/server/methods/methods.js"],"names":["Meteor","Match","check","Cart","Packages","Taxes","Reaction","Logger","methods","taxId","String","hasPermission","Error","remove","cartId","taxRate","taxes","Number","Optional","Array","direct","update","$set","tax","modifier","docId","Object","OneOf","undefined","insert","cartToCalc","findOne","shopId","pkg","name","enabled","settings","rates","debug","shipping","items","shippingAddress","address","customTaxRate","totalTax","addressTaxData","find","$and","$or","postal","$exists","region","country","sort","fetch","length","rate","variants","taxable","subTotal","price","quantity","cartSubTotal","call","_id"],"mappings":"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","file":"/imports/plugins/core/taxes/server/methods/methods.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Match, check } from \"meteor/check\";\nimport { Cart, Packages } from \"/lib/collections\";\nimport { Taxes } from \"../../lib/collections\";\nimport Reaction from \"../api\";\nimport { Logger } from \"/server/api\";\n\n//\n// make all tax methods available\n//\nexport const methods = {\n  /**\n   * taxes/deleteRate\n   * @param  {String} taxId tax taxId to delete\n   * @return {String} returns update/insert result\n   */\n  \"taxes/deleteRate\": function (taxId) {\n    check(taxId, String);\n\n    // check permissions to delete\n    if (!Reaction.hasPermission(\"taxes\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n\n    return Taxes.remove(taxId);\n  },\n\n  /**\n   * taxes/setRate\n   * update the cart without hooks\n   * @param  {String} cartId cartId\n   * @param  {Number} taxRate taxRate\n   * @param  {Object} taxes taxes\n   * @return {Number} returns update result\n   */\n  \"taxes/setRate\": function (cartId, taxRate, taxes) {\n    check(cartId, String);\n    check(taxRate, Number);\n    check(taxes, Match.Optional(Array));\n\n    return Cart.direct.update(cartId, {\n      $set: {\n        taxes: taxes,\n        tax: taxRate\n      }\n    });\n  },\n\n  /**\n   * taxes/addRate\n   * @param  {String} modifier update statement\n   * @param  {String} docId    tax docId\n   * @return {String} returns update/insert result\n   */\n  \"taxes/addRate\": function (modifier, docId) {\n    check(modifier, Object);\n    check(docId, Match.OneOf(String, null, undefined));\n\n    // check permissions to add\n    if (!Reaction.hasPermission(\"taxes\")) {\n      throw new Meteor.Error(403, \"Access Denied\");\n    }\n    // if no doc, insert\n    if (!docId) {\n      return Taxes.insert(modifier);\n    }\n    // else update and return\n    return Taxes.update(docId, modifier);\n  },\n\n  /**\n   * taxes/calculate\n   * @param  {String} cartId cartId\n   * @return {Object}  returns tax object\n   */\n  \"taxes/calculate\": function (cartId) {\n    check(cartId, String);\n    const cartToCalc = Cart.findOne(cartId);\n    const shopId = cartToCalc.shopId;\n    let taxRate = 0;\n    // get all tax packages\n    //\n    // TODO FIND IN LAYOUT/REGISTRY\n    //\n    const pkg = Packages.findOne({\n      shopId: shopId,\n      name: \"reaction-taxes\"\n    });\n    //\n    // custom rates\n    // TODO Determine calculation method (row, total, shipping)\n    // TODO method for order tax updates\n    // additional logic will be needed for refunds\n    // or tax adjustments\n    //\n    // check if plugin is enabled and this calculation method is enabled\n    if (pkg && pkg.enabled === true && pkg.settings.rates.enabled === true) {\n      Logger.debug(\"Calculating custom tax rates\");\n\n      if (typeof cartToCalc.shipping !== \"undefined\" && typeof cartToCalc.items !== \"undefined\") {\n        const shippingAddress = cartToCalc.shipping[0].address;\n        //\n        // custom rates that match shipping info\n        // high chance this needs more review as\n        // it's unlikely this matches all potential\n        // here we just sort by postal, so if it's an exact\n        // match we're taking the first record, where the most\n        // likely tax scenario is a postal code falling\n        // back to a regional tax.\n\n        if (shippingAddress) {\n          let customTaxRate = 0;\n          let totalTax = 0;\n          // lookup custom tax rate\n          const addressTaxData = Taxes.find(\n            {\n              $and: [{\n                $or: [{\n                  postal: shippingAddress.postal\n                }, {\n                  postal: { $exists: false },\n                  region: shippingAddress.region,\n                  country: shippingAddress.country\n                }, {\n                  postal: { $exists: false },\n                  region: { $exists: false },\n                  country: shippingAddress.country\n                }]\n              }, {\n                shopId: shopId\n              }]\n            }, { sort: { postal: -1 } }\n          ).fetch();\n\n          // return custom rates\n          // TODO  break down the product origination, taxability\n          // by qty and an originating shop and inventory\n          // for location of each item in the cart.\n          if (addressTaxData.length > 0) {\n            customTaxRate = addressTaxData[0].rate;\n          }\n\n          // calculate line item taxes\n          for (const items of cartToCalc.items) {\n            // only processs taxable products\n            if (items.variants.taxable === true) {\n              const subTotal = items.variants.price * items.quantity;\n              const tax = subTotal * (customTaxRate / 100);\n              totalTax += tax;\n            }\n          }\n          // calculate overall cart rate\n          if (totalTax > 0) {\n            taxRate = (totalTax / cartToCalc.cartSubTotal());\n          }\n          // store tax on cart\n          Meteor.call(\"taxes/setRate\", cartToCalc._id, taxRate, addressTaxData);\n        } // end custom rates\n      } // end shippingAddress calculation\n    } else {\n      // we are here because the custom rate package is disabled.\n      // we're going to set an inital rate of 0\n      // all methods that trigger when taxes/calculate will\n      // recalculate this rate as needed.\n      Meteor.call(\"taxes/setRate\", cartToCalc._id, taxRate);\n    }\n  } // end taxes/calculate\n};\n\n// export tax methods to Meteor\nMeteor.methods(methods);\n"]},"hash":"64745481b745f692bb85cd04e7968528fa896e54"}
