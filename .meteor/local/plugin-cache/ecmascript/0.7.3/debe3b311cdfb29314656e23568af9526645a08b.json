{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]},{"source":"meteor/reactive-dict","imported":["ReactiveDict"],"specifiers":[{"kind":"named","imported":"ReactiveDict","local":"ReactiveDict"}]},{"source":"meteor/aldeed:autoform","imported":["AutoForm"],"specifiers":[{"kind":"named","imported":"AutoForm","local":"AutoForm"}]},{"source":"/lib/collections","imported":["Shops"],"specifiers":[{"kind":"named","imported":"Shops","local":"Shops"}]},{"source":"/client/collections","imported":["Countries"],"specifiers":[{"kind":"named","imported":"Countries","local":"Countries"}]},{"source":"../../lib/collections","imported":["Taxes","TaxCodes"],"specifiers":[{"kind":"named","imported":"Taxes","local":"Taxes"},{"kind":"named","imported":"TaxCodes","local":"TaxCodes"}]},{"source":"/client/api","imported":["i18next"],"specifiers":[{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"../../lib/collections/schemas","imported":["Taxes"],"specifiers":[{"kind":"named","imported":"Taxes","local":"TaxSchema"}]},{"source":"/imports/plugins/core/ui-grid/client/griddle","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"MeteorGriddle"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["IconButton","Loading"],"specifiers":[{"kind":"named","imported":"IconButton","local":"IconButton"},{"kind":"named","imported":"Loading","local":"Loading"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/taxes/client/settings/custom.js","filenameRelative":"/imports/plugins/core/taxes/client/settings/custom.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/taxes/client/settings/custom.js"],"names":["Template","ReactiveDict","AutoForm","Shops","Countries","Taxes","TaxCodes","i18next","TaxSchema","MeteorGriddle","IconButton","Loading","customTaxRates","onCreated","autorun","subscribe","state","setDefault","isEditing","editingId","helpers","editButton","instance","equals","get","component","icon","onIcon","toggle","toggleOn","style","position","top","right","onClick","$","removeClass","set","taxGrid","filteredFields","noDataMessage","t","editRow","options","currentId","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","publication","collection","matchingResultsCount","showFilter","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","taxSchema","countryOptions","find","fetch","statesForCountry","shop","findOne","selectedCountry","getFieldValue","locales","countries","states","hasOwnProperty","call","locale","label","name","value","taxRate","id","tax","country","addressBook","taxCodes","subscriptionsReady","taxCode","events","confirmTitle","confirmButtonText","Alerts","alert","title","type","showCancelButton","isConfirm","Meteor","event","currentTarget","addClass","hooks","onSuccess","toast","onError","operation","error"],"mappings":"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","file":"/imports/plugins/core/taxes/client/settings/custom.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { Shops } from \"/lib/collections\";\nimport { Countries } from \"/client/collections\";\nimport { Taxes, TaxCodes } from \"../../lib/collections\";\nimport { i18next } from \"/client/api\";\nimport { Taxes as TaxSchema } from \"../../lib/collections/schemas\";\nimport MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport { IconButton, Loading } from \"/imports/plugins/core/ui/client/components\";\n\n/* eslint no-shadow: [\"error\", { \"allow\": [\"options\"] }] */\n/* eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"[oO]ptions\" }] */\n\nTemplate.customTaxRates.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"Taxes\");\n  });\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\nTemplate.customTaxRates.helpers({\n  editButton() {\n    const instance = Template.instance();\n    const state = instance.state;\n    const isEditing = state.equals(\"isEditing\", true);\n    let editingId = state.get(\"editingId\");\n    // toggle edit state\n    if (!isEditing) {\n      editingId = null;\n    }\n    // return icon\n    return {\n      component: IconButton,\n      icon: \"fa fa-plus\",\n      onIcon: \"fa fa-pencil\",\n      toggle: true,\n      toggleOn: isEditing,\n      style: {\n        position: \"relative\",\n        top: \"-25px\",\n        right: \"8px\"\n      },\n      onClick() {\n        // remove active rows from grid\n        $(\".tax-grid-row\").removeClass(\"active\");\n        return state.set({\n          isEditing: !isEditing,\n          editingId: editingId\n        });\n      }\n    };\n  },\n  taxGrid() {\n    const filteredFields = [\"taxCode\", \"rate\", \"country\", \"region\", \"postal\"];\n    const noDataMessage = i18next.t(\"admin.taxSettings.noCustomTaxRatesFound\");\n    const instance = Template.instance();\n\n    //\n    // helper to get and select row from griddle\n    // into blaze for to select tax row for editing\n    //\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n      // isEditing is tax rate object\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    //\n    // helper adds a class to every grid row\n    //\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"tax-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`admin.taxGrid.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // return tax Grid\n    return {\n      component: MeteorGriddle,\n      publication: \"Taxes\",\n      collection: Taxes,\n      matchingResultsCount: \"taxes-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n  // schema for forms\n  taxSchema() {\n    return TaxSchema;\n  },\n  // list of countries for tax input\n  countryOptions: function () {\n    return Countries.find().fetch();\n  },\n  statesForCountry: function () {\n    const shop = Shops.findOne();\n    const selectedCountry = AutoForm.getFieldValue(\"country\");\n    if (!selectedCountry) {\n      return false;\n    }\n    if ((shop !== null ? shop.locales.countries[selectedCountry].states : void 0) === null) {\n      return false;\n    }\n    options = [];\n    if (shop && typeof shop.locales.countries[selectedCountry].states === \"object\") {\n      for (const state in shop.locales.countries[selectedCountry].states) {\n        if ({}.hasOwnProperty.call(shop.locales.countries[selectedCountry].states, state)) {\n          const locale = shop.locales.countries[selectedCountry].states[state];\n          options.push({\n            label: locale.name,\n            value: state\n          });\n        }\n      }\n    }\n    return options;\n  },\n  taxRate() {\n    const shop = Shops.findOne();\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const tax = Taxes.findOne(id) || {};\n    // enforce a default country that makes sense.\n    if (!tax.country) {\n      if (shop && typeof shop.addressBook === \"object\") {\n        tax.country = shop.addressBook[0].country;\n      }\n    }\n    return tax;\n  },\n  taxCodes() {\n    const instance = Template.instance();\n    if (instance.subscriptionsReady()) {\n      const taxCodes = TaxCodes.find().fetch();\n      const options = [{\n        label: i18next.t(\"admin.taxSettings.taxable\"),\n        value: \"RC_TAX\"\n      }, {\n        label: i18next.t(\"admin.taxSettings.nottaxable\"),\n        value: \"RC_NOTAX\"\n      }];\n\n      for (const taxCode of taxCodes) {\n        options.push({\n          label: i18next.t(taxCode.label),\n          value: taxCode.id\n        });\n      }\n      return options;\n    }\n    return [];\n  }\n});\n\n//\n// on submit lets clear the form state\n//\nTemplate.customTaxRates.events({\n  \"submit #customTaxRates-update-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"submit #customTaxRates-insert-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .tax-grid-row .active\": function () {\n    instance = Template.instance();\n    // remove active rows from grid\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n    // ugly hack\n    $(\".tax-grid-row\").removeClass(\"active\");\n  },\n  \"click .delete\": function () {\n    const confirmTitle = i18next.t(\"admin.taxSettings.confirmRateDelete\");\n    const confirmButtonText = i18next.t(\"app.delete\");\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    // confirm delete\n    Alerts.alert({\n      title: confirmTitle,\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: confirmButtonText\n    }, (isConfirm) => {\n      if (isConfirm) {\n        if (id) {\n          Meteor.call(\"taxes/deleteRate\", id);\n          instance.state.set({\n            isEditing: false,\n            editingId: null\n          });\n        }\n      }\n    });\n  },\n  \"click .tax-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".tax-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n});\n\n//\n// Hooks for update and insert forms\n//\nAutoForm.hooks({\n  \"customTaxRates-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopCustomTaxRatesSaved\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.taxSettings.shopCustomTaxRatesFailed\")} ${error}`, \"error\"\n      );\n    }\n  },\n  \"customTaxRates-insert-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopCustomTaxRatesSaved\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.taxSettings.shopCustomTaxRatesFailed\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/taxes/client/settings/custom.js.map","sourceFileName":"/imports/plugins/core/taxes/client/settings/custom.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"custom"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 0);\nvar ReactiveDict = void 0;\nmodule.importSync(\"meteor/reactive-dict\", {\n  ReactiveDict: function (v) {\n    ReactiveDict = v;\n  }\n}, 1);\nvar AutoForm = void 0;\nmodule.importSync(\"meteor/aldeed:autoform\", {\n  AutoForm: function (v) {\n    AutoForm = v;\n  }\n}, 2);\nvar Shops = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Shops: function (v) {\n    Shops = v;\n  }\n}, 3);\nvar Countries = void 0;\nmodule.importSync(\"/client/collections\", {\n  Countries: function (v) {\n    Countries = v;\n  }\n}, 4);\nvar Taxes = void 0,\n    TaxCodes = void 0;\nmodule.importSync(\"../../lib/collections\", {\n  Taxes: function (v) {\n    Taxes = v;\n  },\n  TaxCodes: function (v) {\n    TaxCodes = v;\n  }\n}, 5);\nvar i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 6);\nvar TaxSchema = void 0;\nmodule.importSync(\"../../lib/collections/schemas\", {\n  Taxes: function (v) {\n    TaxSchema = v;\n  }\n}, 7);\nvar MeteorGriddle = void 0;\nmodule.importSync(\"/imports/plugins/core/ui-grid/client/griddle\", {\n  \"default\": function (v) {\n    MeteorGriddle = v;\n  }\n}, 8);\nvar IconButton = void 0,\n    Loading = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  IconButton: function (v) {\n    IconButton = v;\n  },\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 9);\n/* eslint no-shadow: [\"error\", { \"allow\": [\"options\"] }] */ /* eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"[oO]ptions\" }] */Template.customTaxRates.onCreated(function () {\n  var _this = this;\n\n  this.autorun(function () {\n    _this.subscribe(\"Taxes\");\n  });\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\nTemplate.customTaxRates.helpers({\n  editButton: function () {\n    var instance = Template.instance();\n    var state = instance.state;\n    var isEditing = state.equals(\"isEditing\", true);\n    var editingId = state.get(\"editingId\"); // toggle edit state\n\n    if (!isEditing) {\n      editingId = null;\n    } // return icon\n\n\n    return {\n      component: IconButton,\n      icon: \"fa fa-plus\",\n      onIcon: \"fa fa-pencil\",\n      toggle: true,\n      toggleOn: isEditing,\n      style: {\n        position: \"relative\",\n        top: \"-25px\",\n        right: \"8px\"\n      },\n      onClick: function () {\n        // remove active rows from grid\n        $(\".tax-grid-row\").removeClass(\"active\");\n        return state.set({\n          isEditing: !isEditing,\n          editingId: editingId\n        });\n      }\n    };\n  },\n  taxGrid: function () {\n    var filteredFields = [\"taxCode\", \"rate\", \"country\", \"region\", \"postal\"];\n    var noDataMessage = i18next.t(\"admin.taxSettings.noCustomTaxRatesFound\");\n    var instance = Template.instance(); //\n    // helper to get and select row from griddle\n    // into blaze for to select tax row for editing\n    //\n\n    function editRow(options) {\n      var currentId = instance.state.get(\"editingId\"); // isEditing is tax rate object\n\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id); // toggle edit mode clicking on same row\n\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    } //\n    // helper adds a class to every grid row\n    //\n\n\n    var customRowMetaData = {\n      bodyCssClassName: function () {\n        return \"tax-grid-row\";\n      }\n    }; // add i18n handling to headers\n\n    var customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      var columnMeta = {\n        columnName: field,\n        displayName: i18next.t(\"admin.taxGrid.\" + field)\n      };\n      customColumnMetadata.push(columnMeta);\n    }); // return tax Grid\n\n    return {\n      component: MeteorGriddle,\n      publication: \"Taxes\",\n      collection: Taxes,\n      matchingResultsCount: \"taxes-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n  instance: function () {\n    var instance = Template.instance();\n    return instance;\n  },\n  // schema for forms\n  taxSchema: function () {\n    return TaxSchema;\n  },\n  // list of countries for tax input\n  countryOptions: function () {\n    return Countries.find().fetch();\n  },\n  statesForCountry: function () {\n    var shop = Shops.findOne();\n    var selectedCountry = AutoForm.getFieldValue(\"country\");\n\n    if (!selectedCountry) {\n      return false;\n    }\n\n    if ((shop !== null ? shop.locales.countries[selectedCountry].states : void 0) === null) {\n      return false;\n    }\n\n    options = [];\n\n    if (shop && (0, _typeof3.default)(shop.locales.countries[selectedCountry].states) === \"object\") {\n      for (var state in meteorBabelHelpers.sanitizeForInObject(shop.locales.countries[selectedCountry].states)) {\n        if ({}.hasOwnProperty.call(shop.locales.countries[selectedCountry].states, state)) {\n          var locale = shop.locales.countries[selectedCountry].states[state];\n          options.push({\n            label: locale.name,\n            value: state\n          });\n        }\n      }\n    }\n\n    return options;\n  },\n  taxRate: function () {\n    var shop = Shops.findOne();\n    var instance = Template.instance();\n    var id = instance.state.get(\"editingId\");\n    var tax = Taxes.findOne(id) || {}; // enforce a default country that makes sense.\n\n    if (!tax.country) {\n      if (shop && (0, _typeof3.default)(shop.addressBook) === \"object\") {\n        tax.country = shop.addressBook[0].country;\n      }\n    }\n\n    return tax;\n  },\n  taxCodes: function () {\n    var instance = Template.instance();\n\n    if (instance.subscriptionsReady()) {\n      var taxCodes = TaxCodes.find().fetch();\n      var _options = [{\n        label: i18next.t(\"admin.taxSettings.taxable\"),\n        value: \"RC_TAX\"\n      }, {\n        label: i18next.t(\"admin.taxSettings.nottaxable\"),\n        value: \"RC_NOTAX\"\n      }];\n\n      for (var _iterator = taxCodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var taxCode = _ref;\n\n        _options.push({\n          label: i18next.t(taxCode.label),\n          value: taxCode.id\n        });\n      }\n\n      return _options;\n    }\n\n    return [];\n  }\n}); //\n// on submit lets clear the form state\n//\n\nTemplate.customTaxRates.events({\n  \"submit #customTaxRates-update-form\": function () {\n    var instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"submit #customTaxRates-insert-form\": function () {\n    var instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .tax-grid-row .active\": function () {\n    instance = Template.instance(); // remove active rows from grid\n\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    }); // ugly hack\n\n    $(\".tax-grid-row\").removeClass(\"active\");\n  },\n  \"click .delete\": function () {\n    var confirmTitle = i18next.t(\"admin.taxSettings.confirmRateDelete\");\n    var confirmButtonText = i18next.t(\"app.delete\");\n    var instance = Template.instance();\n    var id = instance.state.get(\"editingId\"); // confirm delete\n\n    Alerts.alert({\n      title: confirmTitle,\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: confirmButtonText\n    }, function (isConfirm) {\n      if (isConfirm) {\n        if (id) {\n          Meteor.call(\"taxes/deleteRate\", id);\n          instance.state.set({\n            isEditing: false,\n            editingId: null\n          });\n        }\n      }\n    });\n  },\n  \"click .tax-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".tax-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n}); //\n// Hooks for update and insert forms\n//\n\nAutoForm.hooks({\n  \"customTaxRates-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopCustomTaxRatesSaved\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopCustomTaxRatesFailed\") + \" \" + error, \"error\");\n    }\n  },\n  \"customTaxRates-insert-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopCustomTaxRatesSaved\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopCustomTaxRatesFailed\") + \" \" + error, \"error\");\n    }\n  }\n});","map":{"version":3,"sources":["/imports/plugins/core/taxes/client/settings/custom.js"],"names":["Template","ReactiveDict","AutoForm","Shops","Countries","Taxes","TaxCodes","i18next","TaxSchema","MeteorGriddle","IconButton","Loading","customTaxRates","onCreated","autorun","subscribe","state","setDefault","isEditing","editingId","helpers","editButton","instance","equals","get","component","icon","onIcon","toggle","toggleOn","style","position","top","right","onClick","$","removeClass","set","taxGrid","filteredFields","noDataMessage","t","editRow","options","currentId","props","data","_id","customRowMetaData","bodyCssClassName","customColumnMetadata","forEach","field","columnMeta","columnName","displayName","push","publication","collection","matchingResultsCount","showFilter","useGriddleStyles","rowMetadata","columns","onRowClick","columnMetadata","externalLoadingComponent","taxSchema","countryOptions","find","fetch","statesForCountry","shop","findOne","selectedCountry","getFieldValue","locales","countries","states","hasOwnProperty","call","locale","label","name","value","taxRate","id","tax","country","addressBook","taxCodes","subscriptionsReady","taxCode","events","confirmTitle","confirmButtonText","Alerts","alert","title","type","showCancelButton","isConfirm","Meteor","event","currentTarget","addClass","hooks","onSuccess","toast","onError","operation","error"],"mappings":"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","file":"/imports/plugins/core/taxes/client/settings/custom.js.map","sourcesContent":["import { Template } from \"meteor/templating\";\nimport { ReactiveDict } from \"meteor/reactive-dict\";\nimport { AutoForm } from \"meteor/aldeed:autoform\";\nimport { Shops } from \"/lib/collections\";\nimport { Countries } from \"/client/collections\";\nimport { Taxes, TaxCodes } from \"../../lib/collections\";\nimport { i18next } from \"/client/api\";\nimport { Taxes as TaxSchema } from \"../../lib/collections/schemas\";\nimport MeteorGriddle from \"/imports/plugins/core/ui-grid/client/griddle\";\nimport { IconButton, Loading } from \"/imports/plugins/core/ui/client/components\";\n\n/* eslint no-shadow: [\"error\", { \"allow\": [\"options\"] }] */\n/* eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"[oO]ptions\" }] */\n\nTemplate.customTaxRates.onCreated(function () {\n  this.autorun(() => {\n    this.subscribe(\"Taxes\");\n  });\n\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    isEditing: false,\n    editingId: null\n  });\n});\n\nTemplate.customTaxRates.helpers({\n  editButton() {\n    const instance = Template.instance();\n    const state = instance.state;\n    const isEditing = state.equals(\"isEditing\", true);\n    let editingId = state.get(\"editingId\");\n    // toggle edit state\n    if (!isEditing) {\n      editingId = null;\n    }\n    // return icon\n    return {\n      component: IconButton,\n      icon: \"fa fa-plus\",\n      onIcon: \"fa fa-pencil\",\n      toggle: true,\n      toggleOn: isEditing,\n      style: {\n        position: \"relative\",\n        top: \"-25px\",\n        right: \"8px\"\n      },\n      onClick() {\n        // remove active rows from grid\n        $(\".tax-grid-row\").removeClass(\"active\");\n        return state.set({\n          isEditing: !isEditing,\n          editingId: editingId\n        });\n      }\n    };\n  },\n  taxGrid() {\n    const filteredFields = [\"taxCode\", \"rate\", \"country\", \"region\", \"postal\"];\n    const noDataMessage = i18next.t(\"admin.taxSettings.noCustomTaxRatesFound\");\n    const instance = Template.instance();\n\n    //\n    // helper to get and select row from griddle\n    // into blaze for to select tax row for editing\n    //\n    function editRow(options) {\n      const currentId = instance.state.get(\"editingId\");\n      // isEditing is tax rate object\n      instance.state.set(\"isEditing\", options.props.data);\n      instance.state.set(\"editingId\", options.props.data._id);\n      // toggle edit mode clicking on same row\n      if (currentId === options.props.data._id) {\n        instance.state.set(\"isEditing\", null);\n        instance.state.set(\"editingId\", null);\n      }\n    }\n\n    //\n    // helper adds a class to every grid row\n    //\n    const customRowMetaData = {\n      bodyCssClassName: () =>  {\n        return \"tax-grid-row\";\n      }\n    };\n\n    // add i18n handling to headers\n    const customColumnMetadata = [];\n    filteredFields.forEach(function (field) {\n      const columnMeta = {\n        columnName: field,\n        displayName: i18next.t(`admin.taxGrid.${field}`)\n      };\n      customColumnMetadata.push(columnMeta);\n    });\n\n    // return tax Grid\n    return {\n      component: MeteorGriddle,\n      publication: \"Taxes\",\n      collection: Taxes,\n      matchingResultsCount: \"taxes-count\",\n      showFilter: true,\n      useGriddleStyles: false,\n      rowMetadata: customRowMetaData,\n      filteredFields: filteredFields,\n      columns: filteredFields,\n      noDataMessage: noDataMessage,\n      onRowClick: editRow,\n      columnMetadata: customColumnMetadata,\n      externalLoadingComponent: Loading\n    };\n  },\n\n  instance() {\n    const instance = Template.instance();\n    return instance;\n  },\n  // schema for forms\n  taxSchema() {\n    return TaxSchema;\n  },\n  // list of countries for tax input\n  countryOptions: function () {\n    return Countries.find().fetch();\n  },\n  statesForCountry: function () {\n    const shop = Shops.findOne();\n    const selectedCountry = AutoForm.getFieldValue(\"country\");\n    if (!selectedCountry) {\n      return false;\n    }\n    if ((shop !== null ? shop.locales.countries[selectedCountry].states : void 0) === null) {\n      return false;\n    }\n    options = [];\n    if (shop && typeof shop.locales.countries[selectedCountry].states === \"object\") {\n      for (const state in shop.locales.countries[selectedCountry].states) {\n        if ({}.hasOwnProperty.call(shop.locales.countries[selectedCountry].states, state)) {\n          const locale = shop.locales.countries[selectedCountry].states[state];\n          options.push({\n            label: locale.name,\n            value: state\n          });\n        }\n      }\n    }\n    return options;\n  },\n  taxRate() {\n    const shop = Shops.findOne();\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    const tax = Taxes.findOne(id) || {};\n    // enforce a default country that makes sense.\n    if (!tax.country) {\n      if (shop && typeof shop.addressBook === \"object\") {\n        tax.country = shop.addressBook[0].country;\n      }\n    }\n    return tax;\n  },\n  taxCodes() {\n    const instance = Template.instance();\n    if (instance.subscriptionsReady()) {\n      const taxCodes = TaxCodes.find().fetch();\n      const options = [{\n        label: i18next.t(\"admin.taxSettings.taxable\"),\n        value: \"RC_TAX\"\n      }, {\n        label: i18next.t(\"admin.taxSettings.nottaxable\"),\n        value: \"RC_NOTAX\"\n      }];\n\n      for (const taxCode of taxCodes) {\n        options.push({\n          label: i18next.t(taxCode.label),\n          value: taxCode.id\n        });\n      }\n      return options;\n    }\n    return [];\n  }\n});\n\n//\n// on submit lets clear the form state\n//\nTemplate.customTaxRates.events({\n  \"submit #customTaxRates-update-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n  },\n  \"submit #customTaxRates-insert-form\": function () {\n    const instance = Template.instance();\n    instance.state.set({\n      isEditing: true,\n      editingId: null\n    });\n  },\n  \"click .cancel, .tax-grid-row .active\": function () {\n    instance = Template.instance();\n    // remove active rows from grid\n    instance.state.set({\n      isEditing: false,\n      editingId: null\n    });\n    // ugly hack\n    $(\".tax-grid-row\").removeClass(\"active\");\n  },\n  \"click .delete\": function () {\n    const confirmTitle = i18next.t(\"admin.taxSettings.confirmRateDelete\");\n    const confirmButtonText = i18next.t(\"app.delete\");\n    const instance = Template.instance();\n    const id = instance.state.get(\"editingId\");\n    // confirm delete\n    Alerts.alert({\n      title: confirmTitle,\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: confirmButtonText\n    }, (isConfirm) => {\n      if (isConfirm) {\n        if (id) {\n          Meteor.call(\"taxes/deleteRate\", id);\n          instance.state.set({\n            isEditing: false,\n            editingId: null\n          });\n        }\n      }\n    });\n  },\n  \"click .tax-grid-row\": function (event) {\n    // toggle all rows off, then add our active row\n    $(\".tax-grid-row\").removeClass(\"active\");\n    Template.instance().$(event.currentTarget).addClass(\"active\");\n  }\n});\n\n//\n// Hooks for update and insert forms\n//\nAutoForm.hooks({\n  \"customTaxRates-update-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopCustomTaxRatesSaved\"),\n        \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.taxSettings.shopCustomTaxRatesFailed\")} ${error}`, \"error\"\n      );\n    }\n  },\n  \"customTaxRates-insert-form\": {\n    onSuccess: function () {\n      return Alerts.toast(i18next.t(\"admin.taxSettings.shopCustomTaxRatesSaved\"), \"success\");\n    },\n    onError: function (operation, error) {\n      return Alerts.toast(\n        `${i18next.t(\"admin.taxSettings.shopCustomTaxRatesFailed\")} ${error}`, \"error\"\n      );\n    }\n  }\n});\n"]},"hash":"debe3b311cdfb29314656e23568af9526645a08b"}
