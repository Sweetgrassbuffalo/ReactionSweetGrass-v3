{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"/lib/collections","imported":["Packages"],"specifiers":[{"kind":"named","imported":"Packages","local":"Packages"}]},{"source":"/server/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/lib/api","imported":["mergeDeep"],"specifiers":[{"kind":"named","imported":"mergeDeep","local":"mergeDeep"}]}],"exports":{"exported":["methods"],"specifiers":[{"kind":"local","local":"methods","exported":"methods"}]}}},"options":{"filename":"/server/methods/core/registry.js","filenameRelative":"/server/methods/core/registry.js","inputSourceMap":{"version":3,"sources":["/server/methods/core/registry.js"],"names":["Meteor","check","Packages","Reaction","mergeDeep","methods","packageId","name","fields","String","Array","setting","split","splice","dataToSave","currentPackage","findOne","_","each","field","property","value","settings","hasPermission","upsert","_id","enabled","$set"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAgB,AACzB,AAAS,AAAgB,AACzB,AAAS,AAAiB,AAE1B,AAAO,AAAM,AAAU,AACrB;IAAmB;AACjB,AAAM,qBAAN,AAAiB;UACjB,AAAM,AAAM,WAAZ,AACA;UAAM,MAH8C,AAGpD,AAAc,AACd,AACA;kBACA;AACA;AAAA,AAAM,AAAU,AAAK,AAAM,AAAK,AAAO,AAAC,AACxC;;AAAI,kBAAJ,AAAiB,wBACjB;QAAW,aAAX,AAAsB,AACtB;AAAM,0BAAN,AAAuB,AAAS,AAAQ;0CAExC,AAAE,AAAK,AAAQ,AAAU,AAAO,AAC9B;;WAAW,QAAX,AAAoB,UAAM,OAD5B,AACE,AAAsC,AAAM,AAC7C;;AAED,AAAI,AAAkB,AAAe,AAAU,AAC7C;;QAAa,kBAAU,eAAe,UAjBY,AAiBlD,AAAa,AAAmC,AACjD;AACD;KAjBA,CAkBA;;;QAAI,SAAA,AAAS,cAAc,CAAC,eAA5B,AAAI,AAAuB,AAAgB,QAAQ,AACjD;sBAAO,AAAS;aAAO,AAChB,AACL;cAAM,eAFe,AAEA,AACrB;iBAAS,eAHJ,AAAgB,AAGG;AAHH,AACrB,OADK;;oBAAA,AAIJ,AACK,AACM;AADN,AACJ;AAFD,AACD;gBAGG;AAAF;AARH,AAAO,AAQJ,AAAU,AACd;;;AAED,AAAO,AACR;AAjCkB,AAAU,AAAW,AAAM,AAAQ,AACpD;AAFG,AAAgB,eAqCvB,AAAO,AAAQ","file":"/server/methods/core/registry.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Packages } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\nimport { mergeDeep } from \"/lib/api\";\n\nexport const methods = {\n  \"registry/update\": function (packageId, name, fields) {\n    check(packageId, String);\n    check(name, String);\n    check(fields, Array);\n    // settings use just the last name from full name so that schemas don't need to define overly complex names based with\n    // x/x/x formatting.\n    // TODO name could be optional, just use package name as default\n    const setting = name.split(\"/\").splice(-1);\n    let dataToSave = {};\n    dataToSave[setting] = {};\n    const currentPackage = Packages.findOne(packageId);\n\n    _.each(fields, function (field) {\n      dataToSave[setting][field.property] = field.value;\n    });\n\n    if (currentPackage && currentPackage.settings) {\n      dataToSave = mergeDeep(currentPackage.settings, dataToSave);\n    }\n    // user must have permission to package to update settings\n    if (Reaction.hasPermission([currentPackage.name])) {\n      return Packages.upsert({\n        _id: packageId,\n        name: currentPackage.name,\n        enabled: currentPackage.enabled\n      }, {\n        $set: {\n          settings: dataToSave\n        }\n      }, { upsert: true });\n    }\n\n    return false;\n  }\n};\n\nMeteor.methods(methods);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/methods/core/registry.js.map","sourceFileName":"/server/methods/core/registry.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"registry"},"ignored":false,"code":"module.export({\n  methods: function () {\n    return methods;\n  }\n});\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar check = void 0;\nmodule.importSync(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  }\n}, 1);\nvar Packages = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Packages: function (v) {\n    Packages = v;\n  }\n}, 2);\nvar Reaction = void 0;\nmodule.importSync(\"/server/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 3);\nvar mergeDeep = void 0;\nmodule.importSync(\"/lib/api\", {\n  mergeDeep: function (v) {\n    mergeDeep = v;\n  }\n}, 4);\nvar methods = {\n  \"registry/update\": function (packageId, name, fields) {\n    check(packageId, String);\n    check(name, String);\n    check(fields, Array); // settings use just the last name from full name so that schemas don't need to define overly complex names based with\n    // x/x/x formatting.\n    // TODO name could be optional, just use package name as default\n\n    var setting = name.split(\"/\").splice(-1);\n    var dataToSave = {};\n    dataToSave[setting] = {};\n    var currentPackage = Packages.findOne(packageId);\n\n    _.each(fields, function (field) {\n      dataToSave[setting][field.property] = field.value;\n    });\n\n    if (currentPackage && currentPackage.settings) {\n      dataToSave = mergeDeep(currentPackage.settings, dataToSave);\n    } // user must have permission to package to update settings\n\n\n    if (Reaction.hasPermission([currentPackage.name])) {\n      return Packages.upsert({\n        _id: packageId,\n        name: currentPackage.name,\n        enabled: currentPackage.enabled\n      }, {\n        $set: {\n          settings: dataToSave\n        }\n      }, {\n        upsert: true\n      });\n    }\n\n    return false;\n  }\n};\nMeteor.methods(methods);","map":{"version":3,"sources":["/server/methods/core/registry.js"],"names":["Meteor","check","Packages","Reaction","mergeDeep","methods","packageId","name","fields","String","Array","setting","split","splice","dataToSave","currentPackage","findOne","_","each","field","property","value","settings","hasPermission","upsert","_id","enabled","$set"],"mappings":"AAAA,OAAS;AAAT;AAAuB;;;AAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAAa,AACtB,AAAS,AAAgB,AACzB,AAAS,AAAgB,AACzB,AAAS,AAAiB,AAE1B,AAAO,AAAM,AAAU,AACrB;IAAmB;AACjB,AAAM,qBAAN,AAAiB;UACjB,AAAM,AAAM,WAAZ,AACA;UAAM,MAH8C,AAGpD,AAAc,AACd,AACA;kBACA;AACA;AAAA,AAAM,AAAU,AAAK,AAAM,AAAK,AAAO,AAAC,AACxC;;AAAI,kBAAJ,AAAiB,wBACjB;QAAW,aAAX,AAAsB,AACtB;AAAM,0BAAN,AAAuB,AAAS,AAAQ;0CAExC,AAAE,AAAK,AAAQ,AAAU,AAAO,AAC9B;;WAAW,QAAX,AAAoB,UAAM,OAD5B,AACE,AAAsC,AAAM,AAC7C;;AAED,AAAI,AAAkB,AAAe,AAAU,AAC7C;;QAAa,kBAAU,eAAe,UAjBY,AAiBlD,AAAa,AAAmC,AACjD;AACD;KAjBA,CAkBA;;;QAAI,SAAA,AAAS,cAAc,CAAC,eAA5B,AAAI,AAAuB,AAAgB,QAAQ,AACjD;sBAAO,AAAS;aAAO,AAChB,AACL;cAAM,eAFe,AAEA,AACrB;iBAAS,eAHJ,AAAgB,AAGG;AAHH,AACrB,OADK;;oBAAA,AAIJ,AACK,AACM;AADN,AACJ;AAFD,AACD;gBAGG;AAAF;AARH,AAAO,AAQJ,AAAU,AACd;;;AAED,AAAO,AACR;AAjCkB,AAAU,AAAW,AAAM,AAAQ,AACpD;AAFG,AAAgB,eAqCvB,AAAO,AAAQ","file":"/server/methods/core/registry.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { check } from \"meteor/check\";\nimport { Packages } from \"/lib/collections\";\nimport { Reaction } from \"/server/api\";\nimport { mergeDeep } from \"/lib/api\";\n\nexport const methods = {\n  \"registry/update\": function (packageId, name, fields) {\n    check(packageId, String);\n    check(name, String);\n    check(fields, Array);\n    // settings use just the last name from full name so that schemas don't need to define overly complex names based with\n    // x/x/x formatting.\n    // TODO name could be optional, just use package name as default\n    const setting = name.split(\"/\").splice(-1);\n    let dataToSave = {};\n    dataToSave[setting] = {};\n    const currentPackage = Packages.findOne(packageId);\n\n    _.each(fields, function (field) {\n      dataToSave[setting][field.property] = field.value;\n    });\n\n    if (currentPackage && currentPackage.settings) {\n      dataToSave = mergeDeep(currentPackage.settings, dataToSave);\n    }\n    // user must have permission to package to update settings\n    if (Reaction.hasPermission([currentPackage.name])) {\n      return Packages.upsert({\n        _id: packageId,\n        name: currentPackage.name,\n        enabled: currentPackage.enabled\n      }, {\n        $set: {\n          settings: dataToSave\n        }\n      }, { upsert: true });\n    }\n\n    return false;\n  }\n};\n\nMeteor.methods(methods);\n"]},"hash":"1fc3e739d069151483ebd932f61295ffa1761e98"}
