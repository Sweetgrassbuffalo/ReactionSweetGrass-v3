{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"faker","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"faker"}]},{"source":"/lib/collections","imported":["Products","Tags"],"specifiers":[{"kind":"named","imported":"Products","local":"Products"},{"kind":"named","imported":"Tags","local":"Tags"}]},{"source":"./shops","imported":["getShop"],"specifiers":[{"kind":"named","imported":"getShop","local":"getShop"}]}],"exports":{"exported":["metaField","options","productVariant","options","addProduct","addProductSingleVariant","getProduct","getProducts","limit"],"specifiers":[{"kind":"local","local":"metaField","exported":"metaField"},{"kind":"local","local":"options","exported":"options"},{"kind":"local","local":"productVariant","exported":"productVariant"},{"kind":"local","local":"options","exported":"options"},{"kind":"local","local":"addProduct","exported":"addProduct"},{"kind":"local","local":"addProductSingleVariant","exported":"addProductSingleVariant"},{"kind":"local","local":"getProduct","exported":"getProduct"},{"kind":"local","local":"getProducts","exported":"getProducts"},{"kind":"local","local":"limit","exported":"limit"}]}}},"options":{"filename":"/server/imports/fixtures/products.js","filenameRelative":"/server/imports/fixtures/products.js","inputSourceMap":{"version":3,"sources":["/server/imports/fixtures/products.js"],"names":["faker","Products","Tags","getShop","metaField","options","defaults","key","commerce","productAdjective","value","productMaterial","scope","_","productVariant","ancestors","compareAtPrice","random","weight","inventoryManagement","boolean","inventoryPolicy","lowInventoryWarningThreshold","inventoryQuantity","price","title","productName","optionTitle","shopId","_id","sku","taxable","type","metafields","addProduct","product","Factory","create","variant","Object","assign","addProductSingleVariant","getProduct","existingProduct","findOne","getProducts","limit","products","existingProducts","find","fetch","i","push","define","name","slug","position","isTopLevel","createdAt","date","past","updatedAt","Date","base","priceRange","range","min","max","pageTitle","lorem","sentence","description","paragraph","vendor","company","companyName","isLowQuantity","isSoldOut","isBackorder","requiresShipping","hashtags","isVisible","publishedAt"],"mappings":"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","file":"/server/imports/fixtures/products.js.map","sourcesContent":["import faker from \"faker\";\nimport { Products, Tags } from \"/lib/collections\";\nimport { getShop } from \"./shops\";\n\n\n/**\n * ReactionFaker.metaField()\n *\n * @param   {Object} [options] - options object to override generated default values\n * @param   {string} [options.key] - metaField key\n * @param   {string} [options.value] - metaField value\n * @param   {string} [options.scope] - metaField scope\n * @returns {Object} - randomly generated metaField\n */\nexport function metaField(options = {}) {\n  const defaults = {\n    key: faker.commerce.productAdjective(),\n    value: faker.commerce.productMaterial(),\n    scope: \"detail\"\n  };\n  return _.defaults(options, defaults);\n}\n\n/**\n * ReactionFaker.productVariant()\n *\n * @param {Object} [options] - Options object\n * @param {string} [options._id] - id\n * @param {string} [options.parentId] - variant's parent's ID. Sets variant as child.\n * @param {string} [options.compareAtPrice] - MSRP Price / Compare At Price\n * @param {string} [options.weight] - productVariant weight\n * @param {string} [options.inventoryManagement] - Track inventory for this product?\n * @param {string} [options.inventoryPolicy] - Allow overselling of this product?\n * @param {string} [options.lowInventoryWarningThreshold] - Qty left of inventory that sets off warning\n * @param {string} [options.inventoryQuantity] - Inventory Quantity\n * @param {string} [options.price] - productVariant price\n * @param {string} [options.title] - productVariant title\n * @param {string} [options.optionTitle] - productVariant option title\n * @param {string} [options.sku] - productVariant sku\n * @param {string} [options.taxable] - is this productVariant taxable?\n * @param {Object[]} [options.metafields] - productVariant metaFields\n *\n * @returns {Object} - randomly generated productVariant\n */\nexport function productVariant(options = {}) {\n  const defaults = {\n    ancestors: [],\n    compareAtPrice: _.random(0, 1000),\n    weight: _.random(0, 10),\n    inventoryManagement: faker.random.boolean(),\n    inventoryPolicy: faker.random.boolean(),\n    lowInventoryWarningThreshold: _.random(1, 5),\n    inventoryQuantity: _.random(0, 100),\n    price: _.random(10, 1000),\n    title: faker.commerce.productName(),\n    optionTitle: faker.commerce.productName(),\n    shopId: getShop()._id,\n    sku: _.random(0, 6),\n    taxable: faker.random.boolean(),\n    type: \"variant\",\n    metafields: [\n      metaField(),\n      metaField({\n        key: \"facebook\",\n        scope: \"socialMessages\"\n      }),\n      metaField({\n        key: \"twitter\",\n        scope: \"socialMessages\"\n      })\n    ]\n  };\n  return _.defaults(options, defaults);\n}\n\nexport function addProduct() {\n  const product = Factory.create(\"product\");\n  // top level variant\n  const variant = Factory.create(\"variant\", Object.assign({}, productVariant(), { ancestors: [product._id] }));\n  Factory.create(\"variant\", Object.assign({}, productVariant(), { ancestors: [product._id, variant._id] }));\n  Factory.create(\"variant\", Object.assign({}, productVariant(), { ancestors: [product._id, variant._id] }));\n  return product;\n}\n\nexport function addProductSingleVariant() {\n  const product = Factory.create(\"product\");\n  // top level variant\n  const variant = Factory.create(\"variant\", Object.assign({}, productVariant(), { ancestors: [product._id] }));\n  return { product: product, variant: variant };\n}\n\nexport function getProduct() {\n  const existingProduct = Products.findOne();\n  return existingProduct || Factory.create(\"product\");\n}\n\n\nexport function getProducts(limit = 2) {\n  const products = [];\n  const existingProducts = Products.find({}, { limit: limit }).fetch();\n  for (let i = 0; i < limit; i = i + 1) {\n    const product = existingProducts[i] || Factory.create(\"product\");\n    products.push(product);\n  }\n  return products;\n}\n\n\nexport default function () {\n  /**\n   * Tag Factory\n   * @summary define tag Factory\n   */\n  Factory.define(\"tag\", Tags, {\n    name: \"Tag\",\n    slug: \"tag\",\n    position: _.random(0, 100000),\n    //  relatedTagIds: [],\n    isTopLevel: true,\n    shopId: getShop()._id,\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  });\n\n  /**\n   * Product factory\n   * @summary define product Factory\n   */\n  const base = {\n    ancestors: [],\n    shopId: getShop()._id\n  };\n\n  const priceRange = {\n    range: \"1.00 - 12.99\",\n    min: 1.00,\n    max: 12.99\n  };\n\n  const product = {\n    title: faker.commerce.productName(),\n    pageTitle: faker.lorem.sentence(),\n    description: faker.lorem.paragraph(),\n    type: \"simple\",\n    vendor: faker.company.companyName(),\n    price: priceRange,\n    isLowQuantity: false,\n    isSoldOut: false,\n    isBackorder: false,\n    metafields: [],\n    requiresShipping: true,\n    // parcel: ?,\n    hashtags: [],\n    isVisible: faker.random.boolean(),\n    publishedAt: new Date(),\n    createdAt: new Date(),\n    updatedAt: new Date()\n  };\n\n  Factory.define(\"product\", Products, Object.assign({}, base, product));\n  Factory.define(\"variant\", Products, {\n    type: \"variant\"\n  });\n}\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/imports/fixtures/products.js.map","sourceFileName":"/server/imports/fixtures/products.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"products"},"ignored":false,"code":"module.export({\n  metaField: function () {\n    return metaField;\n  },\n  productVariant: function () {\n    return productVariant;\n  },\n  addProduct: function () {\n    return addProduct;\n  },\n  addProductSingleVariant: function () {\n    return addProductSingleVariant;\n  },\n  getProduct: function () {\n    return getProduct;\n  },\n  getProducts: function () {\n    return getProducts;\n  }\n});\nvar faker = void 0;\nmodule.importSync(\"faker\", {\n  \"default\": function (v) {\n    faker = v;\n  }\n}, 0);\nvar Products = void 0,\n    Tags = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Products: function (v) {\n    Products = v;\n  },\n  Tags: function (v) {\n    Tags = v;\n  }\n}, 1);\nvar getShop = void 0;\nmodule.importSync(\"./shops\", {\n  getShop: function (v) {\n    getShop = v;\n  }\n}, 2);\n\nfunction metaField() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults = {\n    key: faker.commerce.productAdjective(),\n    value: faker.commerce.productMaterial(),\n    scope: \"detail\"\n  };\n  return _.defaults(options, defaults);\n}\n\nfunction productVariant() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults = {\n    ancestors: [],\n    compareAtPrice: _.random(0, 1000),\n    weight: _.random(0, 10),\n    inventoryManagement: faker.random.boolean(),\n    inventoryPolicy: faker.random.boolean(),\n    lowInventoryWarningThreshold: _.random(1, 5),\n    inventoryQuantity: _.random(0, 100),\n    price: _.random(10, 1000),\n    title: faker.commerce.productName(),\n    optionTitle: faker.commerce.productName(),\n    shopId: getShop()._id,\n    sku: _.random(0, 6),\n    taxable: faker.random.boolean(),\n    type: \"variant\",\n    metafields: [metaField(), metaField({\n      key: \"facebook\",\n      scope: \"socialMessages\"\n    }), metaField({\n      key: \"twitter\",\n      scope: \"socialMessages\"\n    })]\n  };\n  return _.defaults(options, defaults);\n}\n\nfunction addProduct() {\n  var product = Factory.create(\"product\"); // top level variant\n\n  var variant = Factory.create(\"variant\", Object.assign({}, productVariant(), {\n    ancestors: [product._id]\n  }));\n  Factory.create(\"variant\", Object.assign({}, productVariant(), {\n    ancestors: [product._id, variant._id]\n  }));\n  Factory.create(\"variant\", Object.assign({}, productVariant(), {\n    ancestors: [product._id, variant._id]\n  }));\n  return product;\n}\n\nfunction addProductSingleVariant() {\n  var product = Factory.create(\"product\"); // top level variant\n\n  var variant = Factory.create(\"variant\", Object.assign({}, productVariant(), {\n    ancestors: [product._id]\n  }));\n  return {\n    product: product,\n    variant: variant\n  };\n}\n\nfunction getProduct() {\n  var existingProduct = Products.findOne();\n  return existingProduct || Factory.create(\"product\");\n}\n\nfunction getProducts() {\n  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n  var products = [];\n  var existingProducts = Products.find({}, {\n    limit: limit\n  }).fetch();\n\n  for (var i = 0; i < limit; i = i + 1) {\n    var product = existingProducts[i] || Factory.create(\"product\");\n    products.push(product);\n  }\n\n  return products;\n}\n\nmodule.export(\"default\", exports.default = function () {\n  /**\n   * Tag Factory\n   * @summary define tag Factory\n   */Factory.define(\"tag\", Tags, {\n    name: \"Tag\",\n    slug: \"tag\",\n    position: _.random(0, 100000),\n    //  relatedTagIds: [],\n    isTopLevel: true,\n    shopId: getShop()._id,\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  }); /**\n       * Product factory\n       * @summary define product Factory\n       */\n  var base = {\n    ancestors: [],\n    shopId: getShop()._id\n  };\n  var priceRange = {\n    range: \"1.00 - 12.99\",\n    min: 1.00,\n    max: 12.99\n  };\n  var product = {\n    title: faker.commerce.productName(),\n    pageTitle: faker.lorem.sentence(),\n    description: faker.lorem.paragraph(),\n    type: \"simple\",\n    vendor: faker.company.companyName(),\n    price: priceRange,\n    isLowQuantity: false,\n    isSoldOut: false,\n    isBackorder: false,\n    metafields: [],\n    requiresShipping: true,\n    // parcel: ?,\n    hashtags: [],\n    isVisible: faker.random.boolean(),\n    publishedAt: new Date(),\n    createdAt: new Date(),\n    updatedAt: new Date()\n  };\n  Factory.define(\"product\", Products, Object.assign({}, base, product));\n  Factory.define(\"variant\", Products, {\n    type: \"variant\"\n  });\n});","map":{"version":3,"sources":["/server/imports/fixtures/products.js"],"names":["faker","Products","Tags","getShop","metaField","options","defaults","key","commerce","productAdjective","value","productMaterial","scope","_","productVariant","ancestors","compareAtPrice","random","weight","inventoryManagement","boolean","inventoryPolicy","lowInventoryWarningThreshold","inventoryQuantity","price","title","productName","optionTitle","shopId","_id","sku","taxable","type","metafields","addProduct","product","Factory","create","variant","Object","assign","addProductSingleVariant","getProduct","existingProduct","findOne","getProducts","limit","products","existingProducts","find","fetch","i","push","define","name","slug","position","isTopLevel","createdAt","date","past","updatedAt","Date","base","priceRange","range","min","max","pageTitle","lorem","sentence","description","paragraph","vendor","company","companyName","isLowQuantity","isSoldOut","isBackorder","requiresShipping","hashtags","isVisible","publishedAt"],"mappings":"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","file":"/server/imports/fixtures/products.js.map","sourcesContent":["import faker from \"faker\";\nimport { Products, Tags } from \"/lib/collections\";\nimport { getShop } from \"./shops\";\n\n\n/**\n * ReactionFaker.metaField()\n *\n * @param   {Object} [options] - options object to override generated default values\n * @param   {string} [options.key] - metaField key\n * @param   {string} [options.value] - metaField value\n * @param   {string} [options.scope] - metaField scope\n * @returns {Object} - randomly generated metaField\n */\nexport function metaField(options = {}) {\n  const defaults = {\n    key: faker.commerce.productAdjective(),\n    value: faker.commerce.productMaterial(),\n    scope: \"detail\"\n  };\n  return _.defaults(options, defaults);\n}\n\n/**\n * ReactionFaker.productVariant()\n *\n * @param {Object} [options] - Options object\n * @param {string} [options._id] - id\n * @param {string} [options.parentId] - variant's parent's ID. Sets variant as child.\n * @param {string} [options.compareAtPrice] - MSRP Price / Compare At Price\n * @param {string} [options.weight] - productVariant weight\n * @param {string} [options.inventoryManagement] - Track inventory for this product?\n * @param {string} [options.inventoryPolicy] - Allow overselling of this product?\n * @param {string} [options.lowInventoryWarningThreshold] - Qty left of inventory that sets off warning\n * @param {string} [options.inventoryQuantity] - Inventory Quantity\n * @param {string} [options.price] - productVariant price\n * @param {string} [options.title] - productVariant title\n * @param {string} [options.optionTitle] - productVariant option title\n * @param {string} [options.sku] - productVariant sku\n * @param {string} [options.taxable] - is this productVariant taxable?\n * @param {Object[]} [options.metafields] - productVariant metaFields\n *\n * @returns {Object} - randomly generated productVariant\n */\nexport function productVariant(options = {}) {\n  const defaults = {\n    ancestors: [],\n    compareAtPrice: _.random(0, 1000),\n    weight: _.random(0, 10),\n    inventoryManagement: faker.random.boolean(),\n    inventoryPolicy: faker.random.boolean(),\n    lowInventoryWarningThreshold: _.random(1, 5),\n    inventoryQuantity: _.random(0, 100),\n    price: _.random(10, 1000),\n    title: faker.commerce.productName(),\n    optionTitle: faker.commerce.productName(),\n    shopId: getShop()._id,\n    sku: _.random(0, 6),\n    taxable: faker.random.boolean(),\n    type: \"variant\",\n    metafields: [\n      metaField(),\n      metaField({\n        key: \"facebook\",\n        scope: \"socialMessages\"\n      }),\n      metaField({\n        key: \"twitter\",\n        scope: \"socialMessages\"\n      })\n    ]\n  };\n  return _.defaults(options, defaults);\n}\n\nexport function addProduct() {\n  const product = Factory.create(\"product\");\n  // top level variant\n  const variant = Factory.create(\"variant\", Object.assign({}, productVariant(), { ancestors: [product._id] }));\n  Factory.create(\"variant\", Object.assign({}, productVariant(), { ancestors: [product._id, variant._id] }));\n  Factory.create(\"variant\", Object.assign({}, productVariant(), { ancestors: [product._id, variant._id] }));\n  return product;\n}\n\nexport function addProductSingleVariant() {\n  const product = Factory.create(\"product\");\n  // top level variant\n  const variant = Factory.create(\"variant\", Object.assign({}, productVariant(), { ancestors: [product._id] }));\n  return { product: product, variant: variant };\n}\n\nexport function getProduct() {\n  const existingProduct = Products.findOne();\n  return existingProduct || Factory.create(\"product\");\n}\n\n\nexport function getProducts(limit = 2) {\n  const products = [];\n  const existingProducts = Products.find({}, { limit: limit }).fetch();\n  for (let i = 0; i < limit; i = i + 1) {\n    const product = existingProducts[i] || Factory.create(\"product\");\n    products.push(product);\n  }\n  return products;\n}\n\n\nexport default function () {\n  /**\n   * Tag Factory\n   * @summary define tag Factory\n   */\n  Factory.define(\"tag\", Tags, {\n    name: \"Tag\",\n    slug: \"tag\",\n    position: _.random(0, 100000),\n    //  relatedTagIds: [],\n    isTopLevel: true,\n    shopId: getShop()._id,\n    createdAt: faker.date.past(),\n    updatedAt: new Date()\n  });\n\n  /**\n   * Product factory\n   * @summary define product Factory\n   */\n  const base = {\n    ancestors: [],\n    shopId: getShop()._id\n  };\n\n  const priceRange = {\n    range: \"1.00 - 12.99\",\n    min: 1.00,\n    max: 12.99\n  };\n\n  const product = {\n    title: faker.commerce.productName(),\n    pageTitle: faker.lorem.sentence(),\n    description: faker.lorem.paragraph(),\n    type: \"simple\",\n    vendor: faker.company.companyName(),\n    price: priceRange,\n    isLowQuantity: false,\n    isSoldOut: false,\n    isBackorder: false,\n    metafields: [],\n    requiresShipping: true,\n    // parcel: ?,\n    hashtags: [],\n    isVisible: faker.random.boolean(),\n    publishedAt: new Date(),\n    createdAt: new Date(),\n    updatedAt: new Date()\n  };\n\n  Factory.define(\"product\", Products, Object.assign({}, base, product));\n  Factory.define(\"variant\", Products, {\n    type: \"variant\"\n  });\n}\n"]},"hash":"6f7086b373fc3556b34050435cfde6377e000d12"}
