{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"/lib/api/compose","imported":["composeWithTracker"],"specifiers":[{"kind":"named","imported":"composeWithTracker","local":"composeWithTracker"}]},{"source":"/lib/api","imported":["ReactionProduct"],"specifiers":[{"kind":"named","imported":"ReactionProduct","local":"ReactionProduct"}]},{"source":"/lib/collections","imported":["Products"],"specifiers":[{"kind":"named","imported":"Products","local":"Products"}]},{"source":"/imports/plugins/core/revisions/client/containers/publishContainer","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PublishContainer"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/included/product-variant/client/containers/gridPublishContainer.js","filenameRelative":"/imports/plugins/included/product-variant/client/containers/gridPublishContainer.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/included/product-variant/client/containers/gridPublishContainer.js"],"names":["React","Component","PropTypes","composeWithTracker","ReactionProduct","Products","PublishContainer","GridProductPublishContainer","propTypes","documentIds","arrayOf","string","documents","object","handleVisibilityChange","event","isProductVisible","Array","isArray","props","productId","Meteor","call","handlePublishActions","action","archiveProduct","render","composer","onData","selectedProducts","Session","get","products","productIds","length","map","p","_id","find","$in","fetch"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;IAAA;;OAA4C,WAA5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAA0B,AACnC,AAAS,AAAuB,AAChC,AAAS,AAAgB,AACzB,AAAO,AAAsB,AAE7B;;;;;;;;;;;;;;0JAOQ,AAAM,AAAQ,yBAAK,UAAL,AAAW,OAA7B,AAAI,AAAuC,kBACzC;UAAK,MAAM,QAAX,MAAwB,MAAA,AAAK,AAAM,cAAnC,AAAgD,AAC9C;AAAO,yCAAP,AAA2C;AAA3C,AAAsD,AAAa,AACpE;;;;;;;;;;;cADC,AAAY;6EAEf;AALH,AAMC;AAED;AAAuB,AAAC,AAAO,AAAW,AACxC,AAAI,AAAW,AAAW,AACxB,aAAgB,wCAAhB,AAA+B,AAAK,QAApC,AAA+B,AAAW,AAC3C;gCAHH,AAIC;;AAED;AAAS,AACP,AACE,AAAC,AACC,AAAS,AAAC,AAAK,AACf,AAAmB,AAAC,AAAK,AACzB,AAAI,AAAK,AAGd;;;;;AA5BiD;uBA+BpD;AAAA,AAAS,AAAS,AAAO,4BAAzB,KAAiC,AAC/B,AAAM;cAAN,AAAyB,AAAQ,AAAI,AACrC,AAAM,AAAW,AAAQ,AAAI,AAE7B,AAAI;AAEJ,AAAI,AAAM,AAAQ,AAAqB,AAAiB,AAAQ,AAC9D,AAAa;;;;;;EAtCjB,AAA0C,AAAU,AAClD;;AADF,AAAM,4BACJ,AAAO;eACQ,UAAA,AAAU,QAAQ,UADd,AACJ,AAA4B,AACzC;aAAW,UAAA,AAAU,QAAQ,UAF/B,AAAmB,AAEN,AAA4B,AAGzC,AAAyB,AAAC,AAAO,AAAqB,AACpD;AANiB,AACjB;;AAmCF,AAEC,SAAM,AAAI,SAAM,OAAN,AAAc,QAAlB,AAAI,AAA2B,AAAS,AAAQ,AACrD;MAAa,AAAS,mBAAT,AAAa,QAAK,AAAE,IAAjC,AAAa,AACd;6BAED;MAAA,AAAI,AAAY,AACd,AAAM,AAAY,AAAS,AAAK,AAC9B;;MAAK,4DAAE;AAAK,iBAAP;yDADyB;AAAhC,AAAkB,AAEf;eAEH;;AAAA,AAAO,AAAM,AACX,AAAa,AACb;;kBAFW;AAAb;AAIK;aACL;;AAVF,AASC,OACC,AAAO,AAAM,A,AACd,AACF,AAED;;;AACA,AAAe,AAAmB,AAAU;;;;;;;;OAhErC,OAAS,WAAhB,AAA2B,QAA3B","file":"/imports/plugins/included/product-variant/client/containers/gridPublishContainer.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { composeWithTracker } from \"/lib/api/compose\";\nimport { ReactionProduct } from \"/lib/api\";\nimport { Products } from \"/lib/collections\";\nimport PublishContainer from \"/imports/plugins/core/revisions/client/containers/publishContainer\";\n\nclass GridProductPublishContainer extends Component {\n  static propTypes = {\n    documentIds: PropTypes.arrayOf(PropTypes.string),\n    documents: PropTypes.arrayOf(PropTypes.object)\n  };\n\n  handleVisibilityChange = (event, isProductVisible) => {\n    if (Array.isArray(this.props.documentIds)) {\n      for (const productId of this.props.documentIds) {\n        Meteor.call(\"products/updateProductField\", productId, \"isVisible\", isProductVisible);\n      }\n    }\n  }\n\n  handlePublishActions = (event, action) => {\n    if (action === \"archive\") {\n      ReactionProduct.archiveProduct(this.props.documents);\n    }\n  }\n\n  render() {\n    return (\n      <PublishContainer\n        onAction={this.handlePublishActions}\n        onVisibilityChange={this.handleVisibilityChange}\n        {...this.props}\n      />\n    );\n  }\n}\n\nfunction composer(props, onData) {\n  const selectedProducts = Session.get(\"productGrid/selectedProducts\");\n  const products = Session.get(\"productGrid/products\");\n\n  let productIds;\n\n  if (Array.isArray(selectedProducts) && selectedProducts.length) {\n    productIds = selectedProducts;\n  } else if (Array.isArray(products) && products.length) {\n    productIds = products.map(p => p._id);\n  }\n\n  if (productIds) {\n    const documents = Products.find({\n      _id: { $in: productIds }\n    }).fetch();\n\n    onData(null, {\n      documentIds: productIds,\n      documents\n    });\n  } else {\n    onData(null, {});\n  }\n}\n\n// Decorate component and export\nexport default composeWithTracker(composer)(GridProductPublishContainer);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/included/product-variant/client/containers/gridPublishContainer.js.map","sourceFileName":"/imports/plugins/included/product-variant/client/containers/gridPublishContainer.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"gridPublishContainer"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar React = void 0,\n    Component = void 0,\n    PropTypes = void 0;\nmodule.importSync(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  },\n  PropTypes: function (v) {\n    PropTypes = v;\n  }\n}, 0);\nvar composeWithTracker = void 0;\nmodule.importSync(\"/lib/api/compose\", {\n  composeWithTracker: function (v) {\n    composeWithTracker = v;\n  }\n}, 1);\nvar ReactionProduct = void 0;\nmodule.importSync(\"/lib/api\", {\n  ReactionProduct: function (v) {\n    ReactionProduct = v;\n  }\n}, 2);\nvar Products = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Products: function (v) {\n    Products = v;\n  }\n}, 3);\nvar PublishContainer = void 0;\nmodule.importSync(\"/imports/plugins/core/revisions/client/containers/publishContainer\", {\n  \"default\": function (v) {\n    PublishContainer = v;\n  }\n}, 4);\n\nvar GridProductPublishContainer = function (_Component) {\n  (0, _inherits3.default)(GridProductPublishContainer, _Component);\n\n  function GridProductPublishContainer() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, GridProductPublishContainer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleVisibilityChange = function (event, isProductVisible) {\n      if (Array.isArray(_this.props.documentIds)) {\n        for (var _iterator = _this.props.documentIds, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var productId = _ref;\n          Meteor.call(\"products/updateProductField\", productId, \"isVisible\", isProductVisible);\n        }\n      }\n    }, _this.handlePublishActions = function (event, action) {\n      if (action === \"archive\") {\n        ReactionProduct.archiveProduct(_this.props.documents);\n      }\n    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  GridProductPublishContainer.prototype.render = function () {\n    function render() {\n      return React.createElement(PublishContainer, (0, _extends3.default)({\n        onAction: this.handlePublishActions,\n        onVisibilityChange: this.handleVisibilityChange\n      }, this.props));\n    }\n\n    return render;\n  }();\n\n  return GridProductPublishContainer;\n}(Component);\n\nGridProductPublishContainer.propTypes = {\n  documentIds: PropTypes.arrayOf(PropTypes.string),\n  documents: PropTypes.arrayOf(PropTypes.object)\n};\n\nfunction composer(props, onData) {\n  var selectedProducts = Session.get(\"productGrid/selectedProducts\");\n  var products = Session.get(\"productGrid/products\");\n  var productIds = void 0;\n\n  if (Array.isArray(selectedProducts) && selectedProducts.length) {\n    productIds = selectedProducts;\n  } else if (Array.isArray(products) && products.length) {\n    productIds = products.map(function (p) {\n      return p._id;\n    });\n  }\n\n  if (productIds) {\n    var documents = Products.find({\n      _id: {\n        $in: productIds\n      }\n    }).fetch();\n    onData(null, {\n      documentIds: productIds,\n      documents: documents\n    });\n  } else {\n    onData(null, {});\n  }\n} // Decorate component and export\n\n\nmodule.export(\"default\", exports.default = composeWithTracker(composer)(GridProductPublishContainer));","map":{"version":3,"sources":["/imports/plugins/included/product-variant/client/containers/gridPublishContainer.js"],"names":["React","Component","PropTypes","composeWithTracker","ReactionProduct","Products","PublishContainer","GridProductPublishContainer","propTypes","documentIds","arrayOf","string","documents","object","handleVisibilityChange","event","isProductVisible","Array","isArray","props","productId","Meteor","call","handlePublishActions","action","archiveProduct","render","composer","onData","selectedProducts","Session","get","products","productIds","length","map","p","_id","find","$in","fetch"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;IAAA;;OAA4C,WAA5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAS,AAA0B,AACnC,AAAS,AAAuB,AAChC,AAAS,AAAgB,AACzB,AAAO,AAAsB,AAE7B;;;;;;;;;;;;;;0JAOQ,AAAM,AAAQ,yBAAK,UAAL,AAAW,OAA7B,AAAI,AAAuC,kBACzC;UAAK,MAAM,QAAX,MAAwB,MAAA,AAAK,AAAM,cAAnC,AAAgD,AAC9C;AAAO,yCAAP,AAA2C;AAA3C,AAAsD,AAAa,AACpE;;;;;;;;;;;cADC,AAAY;6EAEf;AALH,AAMC;AAED;AAAuB,AAAC,AAAO,AAAW,AACxC,AAAI,AAAW,AAAW,AACxB,aAAgB,wCAAhB,AAA+B,AAAK,QAApC,AAA+B,AAAW,AAC3C;gCAHH,AAIC;;AAED;AAAS,AACP,AACE,AAAC,AACC,AAAS,AAAC,AAAK,AACf,AAAmB,AAAC,AAAK,AACzB,AAAI,AAAK,AAGd;;;;;AA5BiD;uBA+BpD;AAAA,AAAS,AAAS,AAAO,4BAAzB,KAAiC,AAC/B,AAAM;cAAN,AAAyB,AAAQ,AAAI,AACrC,AAAM,AAAW,AAAQ,AAAI,AAE7B,AAAI;AAEJ,AAAI,AAAM,AAAQ,AAAqB,AAAiB,AAAQ,AAC9D,AAAa;;;;;;EAtCjB,AAA0C,AAAU,AAClD;;AADF,AAAM,4BACJ,AAAO;eACQ,UAAA,AAAU,QAAQ,UADd,AACJ,AAA4B,AACzC;aAAW,UAAA,AAAU,QAAQ,UAF/B,AAAmB,AAEN,AAA4B,AAGzC,AAAyB,AAAC,AAAO,AAAqB,AACpD;AANiB,AACjB;;AAmCF,AAEC,SAAM,AAAI,SAAM,OAAN,AAAc,QAAlB,AAAI,AAA2B,AAAS,AAAQ,AACrD;MAAa,AAAS,mBAAT,AAAa,QAAK,AAAE,IAAjC,AAAa,AACd;6BAED;MAAA,AAAI,AAAY,AACd,AAAM,AAAY,AAAS,AAAK,AAC9B;;MAAK,4DAAE;AAAK,iBAAP;yDADyB;AAAhC,AAAkB,AAEf;eAEH;;AAAA,AAAO,AAAM,AACX,AAAa,AACb;;kBAFW;AAAb;AAIK;aACL;;AAVF,AASC,OACC,AAAO,AAAM,A,AACd,AACF,AAED;;;AACA,AAAe,AAAmB,AAAU;;;;;;;;OAhErC,OAAS,WAAhB,AAA2B,QAA3B","file":"/imports/plugins/included/product-variant/client/containers/gridPublishContainer.js.map","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { composeWithTracker } from \"/lib/api/compose\";\nimport { ReactionProduct } from \"/lib/api\";\nimport { Products } from \"/lib/collections\";\nimport PublishContainer from \"/imports/plugins/core/revisions/client/containers/publishContainer\";\n\nclass GridProductPublishContainer extends Component {\n  static propTypes = {\n    documentIds: PropTypes.arrayOf(PropTypes.string),\n    documents: PropTypes.arrayOf(PropTypes.object)\n  };\n\n  handleVisibilityChange = (event, isProductVisible) => {\n    if (Array.isArray(this.props.documentIds)) {\n      for (const productId of this.props.documentIds) {\n        Meteor.call(\"products/updateProductField\", productId, \"isVisible\", isProductVisible);\n      }\n    }\n  }\n\n  handlePublishActions = (event, action) => {\n    if (action === \"archive\") {\n      ReactionProduct.archiveProduct(this.props.documents);\n    }\n  }\n\n  render() {\n    return (\n      <PublishContainer\n        onAction={this.handlePublishActions}\n        onVisibilityChange={this.handleVisibilityChange}\n        {...this.props}\n      />\n    );\n  }\n}\n\nfunction composer(props, onData) {\n  const selectedProducts = Session.get(\"productGrid/selectedProducts\");\n  const products = Session.get(\"productGrid/products\");\n\n  let productIds;\n\n  if (Array.isArray(selectedProducts) && selectedProducts.length) {\n    productIds = selectedProducts;\n  } else if (Array.isArray(products) && products.length) {\n    productIds = products.map(p => p._id);\n  }\n\n  if (productIds) {\n    const documents = Products.find({\n      _id: { $in: productIds }\n    }).fetch();\n\n    onData(null, {\n      documentIds: productIds,\n      documents\n    });\n  } else {\n    onData(null, {});\n  }\n}\n\n// Decorate component and export\nexport default composeWithTracker(composer)(GridProductPublishContainer);\n"]},"hash":"477eb95f3959f3dd3178205c913562d07a42c540"}
