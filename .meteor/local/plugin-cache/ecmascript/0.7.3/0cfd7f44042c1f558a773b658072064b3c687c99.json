{"metadata":{"usedHelpers":["objectDestructuringEmpty","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react-simple-di","imported":["useDeps"],"specifiers":[{"kind":"named","imported":"useDeps","local":"useDeps"}]},{"source":"nodemailer-wellknown","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"getServiceConfig"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"/client/api","imported":["Reaction"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"}]},{"source":"/imports/plugins/core/ui/client/components","imported":["Loading"],"specifiers":[{"kind":"named","imported":"Loading","local":"Loading"}]},{"source":"../actions","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"actions"}]},{"source":"../components/emailConfig","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"EmailConfig"}]},{"source":"/lib/api/compose","imported":["composeWithTracker","merge"],"specifiers":[{"kind":"named","imported":"composeWithTracker","local":"composeWithTracker"},{"kind":"named","imported":"merge","local":"merge"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/email/client/containers/emailConfig.js","filenameRelative":"/imports/plugins/core/email/client/containers/emailConfig.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/email/client/containers/emailConfig.js"],"names":["useDeps","getServiceConfig","Meteor","Reaction","Loading","actions","EmailConfig","composeWithTracker","merge","composer","onData","subscribe","ready","shopSettings","getShopSettings","settings","mail","service","config","host","port","user","password","call","error","status","reason","depsMapper","toggleSettings"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAO,AAAsB,AAC7B,AAAS,AAAc,AACvB,AAAS,AAAgB,AACzB,AAAS,AAAe,AACxB,AAAO,AAAa,AACpB,AAAO,AAAiB,AACxB,AAAS,AAAoB,AAAa;;AAE1C,IAAM,WAAW,AAAC,gBAAD,AAAK;AAAW,AAC/B;;MAAI,OAAA,AAAO,UAAP,AAAiB,YAArB,AAAI,AAA6B;QACzB,eAAe,SAArB,AAAqB,AAAS,AAC9B;QAAM,WAAW,aAAA,AAAa,QAA9B,AAAsC,AAEtC;;QAAI,SAAA,AAAS,WAAW,SAAA,AAAS,YAAjC,AAA6C;UACrC,SAAS,iBAAiB,SADqB,AACrD,AAAe,AAA0B,AAEzC,AACA,SAJqD,AACrD,CAGA,AAAS,AAAO,AAAO,AAAQ,AAC/B;;eAAA,AAAS,OAAO,OAAhB,AAAuB,QACxB;;AAED,AAAM,AAAE;;AAZgC,AACxC,QAWM;eAAA,AAAW,AAAM;;;sCAAjB,AAAuB;;QAAvB,6CAA6B;2DAA7B;AAA0C,YAZR,AAYxC,AAEA;;;;yBACA,AAAI;;AAAJ,AAAI,AAAW,AAAQ,AAAQ,AAAQ,AAAU,AAC/C;;AAAO;;AAAP,AAAoC,AAAC,kBAAU;iBAC7C;SADF,AAAY;AACV,AAAI,AAAO,AACT;WAAO,AAAO,AAAM,AAAE;;;;eAAU;AAAZ;AAAA,AAAoB,AAAS;AAA7B,AAAoC,AAAM;AAA9D,AAAO,AACR;;;;AACM,oBAAO,QAAP,AAAa,SAAA,AAAE,AAAU,AAAQ,AAAS;AAAjD;;;OA9BC,OAAT,WAAwB,QAAxB,UA8B4B,AAAoC,MAAxD,AAAO,6BACR,UALD,QAMD,aAvBL,AAgBI,AAOO,AACL,AAAO,AAAM,AAAE,AAAU,AAAQ,AAAS,AAAO,AAClD,AACF,AACF,AAED,AAAM,AAAa,AAAO,AACxB,AAAgB,AAAQ,AAAS,AAGnC,AAAe,AACb,AAAmB,AAAU,AAC7B,AAAQ,AACR","file":"/imports/plugins/core/email/client/containers/emailConfig.js.map","sourcesContent":["import { useDeps } from \"react-simple-di\";\nimport getServiceConfig from \"nodemailer-wellknown\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction } from \"/client/api\";\nimport { Loading } from \"/imports/plugins/core/ui/client/components\";\nimport actions from \"../actions\";\nimport EmailConfig from \"../components/emailConfig\";\nimport { composeWithTracker, merge } from \"/lib/api/compose\";\n\nconst composer = ({}, onData) => {\n  if (Meteor.subscribe(\"Packages\").ready()) {\n    const shopSettings = Reaction.getShopSettings();\n    const settings = shopSettings.mail || {};\n\n    if (settings.service && settings.service !== \"custom\") {\n      const config = getServiceConfig(settings.service);\n\n      // show localhost for test providers like Maildev that have no host\n      settings.host = config.host || \"localhost\";\n      settings.port = config.port;\n    }\n\n    const { service, host, port, user, password } = settings;\n\n    // if all settings exist, check if they work\n    if (service && host && port && user && password) {\n      Meteor.call(\"email/verifySettings\", (error) => {\n        if (error) {\n          return onData(null, { settings, status: \"error\", error: error.reason });\n        }\n        return onData(null, { settings, status: \"valid\", error: null });\n      });\n    } else {\n      onData(null, { settings, status: \"error\", error: null });\n    }\n  }\n};\n\nconst depsMapper = () => ({\n  toggleSettings: actions.settings.toggleSettings\n});\n\nexport default merge(\n  composeWithTracker(composer, Loading),\n  useDeps(depsMapper)\n)(EmailConfig);\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/email/client/containers/emailConfig.js.map","sourceFileName":"/imports/plugins/core/email/client/containers/emailConfig.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"emailConfig"},"ignored":false,"code":"var _objectDestructuringEmpty2 = require(\"babel-runtime/helpers/objectDestructuringEmpty\");\n\nvar _objectDestructuringEmpty3 = _interopRequireDefault(_objectDestructuringEmpty2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar useDeps = void 0;\nmodule.importSync(\"react-simple-di\", {\n  useDeps: function (v) {\n    useDeps = v;\n  }\n}, 0);\nvar getServiceConfig = void 0;\nmodule.importSync(\"nodemailer-wellknown\", {\n  \"default\": function (v) {\n    getServiceConfig = v;\n  }\n}, 1);\nvar Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 2);\nvar Reaction = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  }\n}, 3);\nvar Loading = void 0;\nmodule.importSync(\"/imports/plugins/core/ui/client/components\", {\n  Loading: function (v) {\n    Loading = v;\n  }\n}, 4);\nvar actions = void 0;\nmodule.importSync(\"../actions\", {\n  \"default\": function (v) {\n    actions = v;\n  }\n}, 5);\nvar EmailConfig = void 0;\nmodule.importSync(\"../components/emailConfig\", {\n  \"default\": function (v) {\n    EmailConfig = v;\n  }\n}, 6);\nvar composeWithTracker = void 0,\n    merge = void 0;\nmodule.importSync(\"/lib/api/compose\", {\n  composeWithTracker: function (v) {\n    composeWithTracker = v;\n  },\n  merge: function (v) {\n    merge = v;\n  }\n}, 7);\n\nvar composer = function (_ref, onData) {\n  (0, _objectDestructuringEmpty3.default)(_ref);\n\n  if (Meteor.subscribe(\"Packages\").ready()) {\n    var shopSettings = Reaction.getShopSettings();\n    var settings = shopSettings.mail || {};\n\n    if (settings.service && settings.service !== \"custom\") {\n      var config = getServiceConfig(settings.service); // show localhost for test providers like Maildev that have no host\n\n      settings.host = config.host || \"localhost\";\n      settings.port = config.port;\n    }\n\n    var service = settings.service,\n        host = settings.host,\n        port = settings.port,\n        user = settings.user,\n        password = settings.password; // if all settings exist, check if they work\n\n    if (service && host && port && user && password) {\n      Meteor.call(\"email/verifySettings\", function (error) {\n        if (error) {\n          return onData(null, {\n            settings: settings,\n            status: \"error\",\n            error: error.reason\n          });\n        }\n\n        return onData(null, {\n          settings: settings,\n          status: \"valid\",\n          error: null\n        });\n      });\n    } else {\n      onData(null, {\n        settings: settings,\n        status: \"error\",\n        error: null\n      });\n    }\n  }\n};\n\nvar depsMapper = function () {\n  return {\n    toggleSettings: actions.settings.toggleSettings\n  };\n};\n\nmodule.export(\"default\", exports.default = merge(composeWithTracker(composer, Loading), useDeps(depsMapper))(EmailConfig));","map":{"version":3,"sources":["/imports/plugins/core/email/client/containers/emailConfig.js"],"names":["useDeps","getServiceConfig","Meteor","Reaction","Loading","actions","EmailConfig","composeWithTracker","merge","composer","onData","subscribe","ready","shopSettings","getShopSettings","settings","mail","service","config","host","port","user","password","call","error","status","reason","depsMapper","toggleSettings"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,AAAO,AAAsB,AAC7B,AAAS,AAAc,AACvB,AAAS,AAAgB,AACzB,AAAS,AAAe,AACxB,AAAO,AAAa,AACpB,AAAO,AAAiB,AACxB,AAAS,AAAoB,AAAa;;AAE1C,IAAM,WAAW,AAAC,gBAAD,AAAK;AAAW,AAC/B;;MAAI,OAAA,AAAO,UAAP,AAAiB,YAArB,AAAI,AAA6B;QACzB,eAAe,SAArB,AAAqB,AAAS,AAC9B;QAAM,WAAW,aAAA,AAAa,QAA9B,AAAsC,AAEtC;;QAAI,SAAA,AAAS,WAAW,SAAA,AAAS,YAAjC,AAA6C;UACrC,SAAS,iBAAiB,SADqB,AACrD,AAAe,AAA0B,AAEzC,AACA,SAJqD,AACrD,CAGA,AAAS,AAAO,AAAO,AAAQ,AAC/B;;eAAA,AAAS,OAAO,OAAhB,AAAuB,QACxB;;AAED,AAAM,AAAE;;AAZgC,AACxC,QAWM;eAAA,AAAW,AAAM;;;sCAAjB,AAAuB;;QAAvB,6CAA6B;2DAA7B;AAA0C,YAZR,AAYxC,AAEA;;;;yBACA,AAAI;;AAAJ,AAAI,AAAW,AAAQ,AAAQ,AAAQ,AAAU,AAC/C;;AAAO;;AAAP,AAAoC,AAAC,kBAAU;iBAC7C;SADF,AAAY;AACV,AAAI,AAAO,AACT;WAAO,AAAO,AAAM,AAAE;;;;eAAU;AAAZ;AAAA,AAAoB,AAAS;AAA7B,AAAoC,AAAM;AAA9D,AAAO,AACR;;;;AACM,oBAAO,QAAP,AAAa,SAAA,AAAE,AAAU,AAAQ,AAAS;AAAjD;;;OA9BC,OAAT,WAAwB,QAAxB,UA8B4B,AAAoC,MAAxD,AAAO,6BACR,UALD,QAMD,aAvBL,AAgBI,AAOO,AACL,AAAO,AAAM,AAAE,AAAU,AAAQ,AAAS,AAAO,AAClD,AACF,AACF,AAED,AAAM,AAAa,AAAO,AACxB,AAAgB,AAAQ,AAAS,AAGnC,AAAe,AACb,AAAmB,AAAU,AAC7B,AAAQ,AACR","file":"/imports/plugins/core/email/client/containers/emailConfig.js.map","sourcesContent":["import { useDeps } from \"react-simple-di\";\nimport getServiceConfig from \"nodemailer-wellknown\";\nimport { Meteor } from \"meteor/meteor\";\nimport { Reaction } from \"/client/api\";\nimport { Loading } from \"/imports/plugins/core/ui/client/components\";\nimport actions from \"../actions\";\nimport EmailConfig from \"../components/emailConfig\";\nimport { composeWithTracker, merge } from \"/lib/api/compose\";\n\nconst composer = ({}, onData) => {\n  if (Meteor.subscribe(\"Packages\").ready()) {\n    const shopSettings = Reaction.getShopSettings();\n    const settings = shopSettings.mail || {};\n\n    if (settings.service && settings.service !== \"custom\") {\n      const config = getServiceConfig(settings.service);\n\n      // show localhost for test providers like Maildev that have no host\n      settings.host = config.host || \"localhost\";\n      settings.port = config.port;\n    }\n\n    const { service, host, port, user, password } = settings;\n\n    // if all settings exist, check if they work\n    if (service && host && port && user && password) {\n      Meteor.call(\"email/verifySettings\", (error) => {\n        if (error) {\n          return onData(null, { settings, status: \"error\", error: error.reason });\n        }\n        return onData(null, { settings, status: \"valid\", error: null });\n      });\n    } else {\n      onData(null, { settings, status: \"error\", error: null });\n    }\n  }\n};\n\nconst depsMapper = () => ({\n  toggleSettings: actions.settings.toggleSettings\n});\n\nexport default merge(\n  composeWithTracker(composer, Loading),\n  useDeps(depsMapper)\n)(EmailConfig);\n"]},"hash":"0cfd7f44042c1f558a773b658072064b3c687c99"}
