{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/session","imported":["Session"],"specifiers":[{"kind":"named","imported":"Session","local":"Session"}]},{"source":"/client/api","imported":["Reaction","i18next"],"specifiers":[{"kind":"named","imported":"Reaction","local":"Reaction"},{"kind":"named","imported":"i18next","local":"i18next"}]},{"source":"/lib/collections","imported":["Orders"],"specifiers":[{"kind":"named","imported":"Orders","local":"Orders"}]},{"source":"meteor/templating","imported":["Template"],"specifiers":[{"kind":"named","imported":"Template","local":"Template"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/plugins/core/checkout/client/templates/checkout/completed/completed.js","filenameRelative":"/imports/plugins/core/checkout/client/templates/checkout/completed/completed.js","inputSourceMap":{"version":3,"sources":["/imports/plugins/core/checkout/client/templates/checkout/completed/completed.js"],"names":["Meteor","Session","Reaction","i18next","Orders","Template","cartCompleted","helpers","orderCompleted","id","Router","getQueryParam","ccoSub","subscribe","userId","ready","order","findOne","cartId","orderStatus","workflow","status","t","userOrders","user","find","_id","events","templateInstance","instance","email","value","check","String","call","err","Alerts","toast","onCreated","sessionId","get","cartSub","Subscriptions","Cart","stop"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAe,AACxB,AAAS,AAAU,AAAe,AAClC,AAAS,AAAc,AACvB,AAAS,AAAgB,AAEzB;AAKA,AAAS,AAAc,AAAQ,AAC7B,AAAgB,AAAY;;;;YACpB,AAAK,cAAA,AAAS;8BACpB;AAAI,QAAJ,AAAQ,mCACN;;YAAA,AAAM,AAAS,AAAO,AAAU,AAAsB,AAAO,AAAU;2EACvE;;UAAI,OAAJ,AAAI,AAAO,SAAS,AAClB;eAAA,AAAO,AACR;AACF;;;WACD;AAAA,AAAO,AACR;AAV4B,qBAW7B;AAAO,kBAAY;AACV,cAAO,OAAP,AAAe,AACpB;cAAQ,AAAO,SADK,AACZ,qBADY,AAEpB,AAAQ,AAAS,AAAO,AAAc;AAFxC;AAAA,AAAO,AAIR;AAhB4B,2BAiB7B;YAAa,cAAY,AACvB;WAAA,AAAQ,AAAK,AAAS,AACpB;AAAK,eAAL,UACE;;WAAA,AAAO,AAAQ,AAAE;yBACnB;;WAAA,AAAK,AACH;eAAO,QAAA,AAAQ,EAAf,AAAO,AAAU;;AACnB;AAAK,6BAAL,AACE,AAAO,AAAQ,AAAE;;AACnB;0BACE;eAAO,AAAK,QARhB,AAQI,AAAO,AAAc;;uBAG3B;AAAY,qBAAY,AACtB,AAAI,AAAO,AAAQ,AACjB;AA/ByB,AA4B5B;AAGU,AAAO,AAAK,AACjB;;WADiB,AACT,AAAO,AACf;AAFF,AAAO,AAAY,AAET,AAAK,AAEhB;AAjCD,AAAW,AAAgB,AAAc,CAAzC,GAFJ,AAoCI,A,AApC2B,AAoC3B,AAAO,AACR,AAGH;;;;;;;oCAKA;AAAS,gBAAT,AAAuB,AAAO,2CAC5B;iBAAuB,AAAY,AACjC;QAAM,kBAAmB,OAAzB,AAAyB,AAAS,cAClC,AAAM,AAAQ,AAAiB,AAAK,AAAqB,AACzD;AAAM,uBAAN,sDACA;UAAM,KAAN,AAAe,AAAS,AAAO,AAAc,AAE7C;AAAO,eAAO,MAAP,AAAY,UAAZ,AAAoC,AAAQ,8BAAO,AAAC,AAAQ,AACjE;AAAI,aAAJ,AAAS,AACP;YAAA,AAAO,AAAM,eAAA,AAAQ,AAAE;AAClB,yBACL;AAAM,kBAAQ,SAAO,OAAP,AAAe,cAAA,AAC3B,AAAQ,AAAO,AACf;AALJ,AACE,AAAa,AAAwC,AACtD;eAGW,KAAA,AAAS,AAAO,2BAFG,AAEnB,AAA8B;AAFxC,AAAc,AAId;AAAA,AAAO,AAAK,AAA2B,AACxC,KAZH,AAAa;AAGb,AAAO,AAUN,AACF;IAlBH,AAA8B,A,AAqB9B;;;;;;AAMA,SAAA,AAAS,cAAT,AAAuB,UAAU,YAAY,AAC3C;MAAM,YAAY,QAAA,AAAQ,IAA1B,AAAkB,AAAY,AAC9B;MAAM,SAAS,OAAf,AAAe,AAAO,AACtB;MAAM,UAAU,SAAA,AAAS,cAAT,AAAuB,OAAO,OAAA,AAAO,UAAP,AAAiB,QAAjB,AAAyB,WAAvE,AAA8C,AAAoC,AAClF;UAAA,AAAQ,AACR;WAAA,AAAS,cAAT,AAAuB,OAAO,OAAA,AAAO,UAAP,AAAiB,QAAjB,AAAyB,WAAvD,AAA8B,AAAoC,AACnE;AAND","file":"/imports/plugins/core/checkout/client/templates/checkout/completed/completed.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Session } from \"meteor/session\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { Orders } from \"/lib/collections\";\nimport { Template } from \"meteor/templating\";\n\n/**\n * cartCompleted helpers\n *\n * if order status = new translate submitted message\n */\nTemplate.cartCompleted.helpers({\n  orderCompleted: function () {\n    const id = Reaction.Router.getQueryParam(\"_id\");\n    if (id) {\n      const ccoSub = Meteor.subscribe(\"CompletedCartOrder\", Meteor.userId(), id);\n      if (ccoSub.ready()) {\n        return true;\n      }\n    }\n    return false;\n  },\n  order: function () {\n    return Orders.findOne({\n      userId: Meteor.userId(),\n      cartId: Reaction.Router.getQueryParam(\"_id\")\n    });\n  },\n  orderStatus: function () {\n    switch (this.workflow.status) {\n      case \"new\":\n        return i18next.t(\"cartCompleted.submitted\");\n      case \"coreOrderWorkflow/processing\":\n        return i18next.t(\"cartCompleted.processing\");\n      case \"coreOrderWorkflow/completed\":\n        return i18next.t(\"cartCompleted.completed\");\n      default:\n        return this.workflow.status;\n    }\n  },\n  userOrders: function () {\n    if (Meteor.user()) {\n      return Orders.find({\n        userId: Meteor.userId(),\n        cartId: this._id\n      });\n    }\n    return {};\n  }\n});\n\n/**\n * cartCompleted events\n *\n * adds email to order\n */\nTemplate.cartCompleted.events({\n  \"click #update-order\": function () {\n    const templateInstance = Template.instance();\n    const email = templateInstance.find(\"input[name=email]\").value;\n    check(email, String);\n    const cartId = Reaction.Router.getQueryParam(\"_id\");\n\n    return Meteor.call(\"orders/addOrderEmail\", cartId, email, (err) => {\n      if (err) {\n        Alerts.toast(i18next.t(\"mail.alerts.cantSendEmail\"), \"error\");\n      } else {\n        const order = Orders.findOne({\n          userId: Meteor.userId(),\n          cartId: Reaction.Router.getQueryParam(\"_id\")\n        });\n        Meteor.call(\"orders/sendNotification\", order);\n      }\n    });\n  }\n});\n\n/**\n * cartCompleted onCreated\n *\n * when the order is completed we need to destroy and recreate\n * the subscription to get the new cart\n */\nTemplate.cartCompleted.onCreated(function () {\n  const sessionId = Session.get(\"sessionId\");\n  const userId = Meteor.userId();\n  const cartSub = Reaction.Subscriptions.Cart = Meteor.subscribe(\"Cart\", sessionId, userId);\n  cartSub.stop();\n  Reaction.Subscriptions.Cart = Meteor.subscribe(\"Cart\", sessionId, userId);\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/plugins/core/checkout/client/templates/checkout/completed/completed.js.map","sourceFileName":"/imports/plugins/core/checkout/client/templates/checkout/completed/completed.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"completed"},"ignored":false,"code":"var Meteor = void 0;\nmodule.importSync(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar Session = void 0;\nmodule.importSync(\"meteor/session\", {\n  Session: function (v) {\n    Session = v;\n  }\n}, 1);\nvar Reaction = void 0,\n    i18next = void 0;\nmodule.importSync(\"/client/api\", {\n  Reaction: function (v) {\n    Reaction = v;\n  },\n  i18next: function (v) {\n    i18next = v;\n  }\n}, 2);\nvar Orders = void 0;\nmodule.importSync(\"/lib/collections\", {\n  Orders: function (v) {\n    Orders = v;\n  }\n}, 3);\nvar Template = void 0;\nmodule.importSync(\"meteor/templating\", {\n  Template: function (v) {\n    Template = v;\n  }\n}, 4);\n/**\n * cartCompleted helpers\n *\n * if order status = new translate submitted message\n */Template.cartCompleted.helpers({\n  orderCompleted: function () {\n    var id = Reaction.Router.getQueryParam(\"_id\");\n\n    if (id) {\n      var ccoSub = Meteor.subscribe(\"CompletedCartOrder\", Meteor.userId(), id);\n\n      if (ccoSub.ready()) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  order: function () {\n    return Orders.findOne({\n      userId: Meteor.userId(),\n      cartId: Reaction.Router.getQueryParam(\"_id\")\n    });\n  },\n  orderStatus: function () {\n    switch (this.workflow.status) {\n      case \"new\":\n        return i18next.t(\"cartCompleted.submitted\");\n\n      case \"coreOrderWorkflow/processing\":\n        return i18next.t(\"cartCompleted.processing\");\n\n      case \"coreOrderWorkflow/completed\":\n        return i18next.t(\"cartCompleted.completed\");\n\n      default:\n        return this.workflow.status;\n    }\n  },\n  userOrders: function () {\n    if (Meteor.user()) {\n      return Orders.find({\n        userId: Meteor.userId(),\n        cartId: this._id\n      });\n    }\n\n    return {};\n  }\n}); /**\n     * cartCompleted events\n     *\n     * adds email to order\n     */\nTemplate.cartCompleted.events({\n  \"click #update-order\": function () {\n    var templateInstance = Template.instance();\n    var email = templateInstance.find(\"input[name=email]\").value;\n    check(email, String);\n    var cartId = Reaction.Router.getQueryParam(\"_id\");\n    return Meteor.call(\"orders/addOrderEmail\", cartId, email, function (err) {\n      if (err) {\n        Alerts.toast(i18next.t(\"mail.alerts.cantSendEmail\"), \"error\");\n      } else {\n        var order = Orders.findOne({\n          userId: Meteor.userId(),\n          cartId: Reaction.Router.getQueryParam(\"_id\")\n        });\n        Meteor.call(\"orders/sendNotification\", order);\n      }\n    });\n  }\n}); /**\n     * cartCompleted onCreated\n     *\n     * when the order is completed we need to destroy and recreate\n     * the subscription to get the new cart\n     */\nTemplate.cartCompleted.onCreated(function () {\n  var sessionId = Session.get(\"sessionId\");\n  var userId = Meteor.userId();\n  var cartSub = Reaction.Subscriptions.Cart = Meteor.subscribe(\"Cart\", sessionId, userId);\n  cartSub.stop();\n  Reaction.Subscriptions.Cart = Meteor.subscribe(\"Cart\", sessionId, userId);\n});","map":{"version":3,"sources":["/imports/plugins/core/checkout/client/templates/checkout/completed/completed.js"],"names":["Meteor","Session","Reaction","i18next","Orders","Template","cartCompleted","helpers","orderCompleted","id","Router","getQueryParam","ccoSub","subscribe","userId","ready","order","findOne","cartId","orderStatus","workflow","status","t","userOrders","user","find","_id","events","templateInstance","instance","email","value","check","String","call","err","Alerts","toast","onCreated","sessionId","get","cartSub","Subscriptions","Cart","stop"],"mappings":"AAAA,IAAS;AAAT,OAAuB,WAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,A,AAAA,AAAS,AAAe,AACxB,AAAS,AAAU,AAAe,AAClC,AAAS,AAAc,AACvB,AAAS,AAAgB,AAEzB;AAKA,AAAS,AAAc,AAAQ,AAC7B,AAAgB,AAAY;;;;YACpB,AAAK,cAAA,AAAS;8BACpB;AAAI,QAAJ,AAAQ,mCACN;;YAAA,AAAM,AAAS,AAAO,AAAU,AAAsB,AAAO,AAAU;2EACvE;;UAAI,OAAJ,AAAI,AAAO,SAAS,AAClB;eAAA,AAAO,AACR;AACF;;;WACD;AAAA,AAAO,AACR;AAV4B,qBAW7B;AAAO,kBAAY;AACV,cAAO,OAAP,AAAe,AACpB;cAAQ,AAAO,SADK,AACZ,qBADY,AAEpB,AAAQ,AAAS,AAAO,AAAc;AAFxC;AAAA,AAAO,AAIR;AAhB4B,2BAiB7B;YAAa,cAAY,AACvB;WAAA,AAAQ,AAAK,AAAS,AACpB;AAAK,eAAL,UACE;;WAAA,AAAO,AAAQ,AAAE;yBACnB;;WAAA,AAAK,AACH;eAAO,QAAA,AAAQ,EAAf,AAAO,AAAU;;AACnB;AAAK,6BAAL,AACE,AAAO,AAAQ,AAAE;;AACnB;0BACE;eAAO,AAAK,QARhB,AAQI,AAAO,AAAc;;uBAG3B;AAAY,qBAAY,AACtB,AAAI,AAAO,AAAQ,AACjB;AA/ByB,AA4B5B;AAGU,AAAO,AAAK,AACjB;;WADiB,AACT,AAAO,AACf;AAFF,AAAO,AAAY,AAET,AAAK,AAEhB;AAjCD,AAAW,AAAgB,AAAc,CAAzC,GAFJ,AAoCI,A,AApC2B,AAoC3B,AAAO,AACR,AAGH;;;;;;;oCAKA;AAAS,gBAAT,AAAuB,AAAO,2CAC5B;iBAAuB,AAAY,AACjC;QAAM,kBAAmB,OAAzB,AAAyB,AAAS,cAClC,AAAM,AAAQ,AAAiB,AAAK,AAAqB,AACzD;AAAM,uBAAN,sDACA;UAAM,KAAN,AAAe,AAAS,AAAO,AAAc,AAE7C;AAAO,eAAO,MAAP,AAAY,UAAZ,AAAoC,AAAQ,8BAAO,AAAC,AAAQ,AACjE;AAAI,aAAJ,AAAS,AACP;YAAA,AAAO,AAAM,eAAA,AAAQ,AAAE;AAClB,yBACL;AAAM,kBAAQ,SAAO,OAAP,AAAe,cAAA,AAC3B,AAAQ,AAAO,AACf;AALJ,AACE,AAAa,AAAwC,AACtD;eAGW,KAAA,AAAS,AAAO,2BAFG,AAEnB,AAA8B;AAFxC,AAAc,AAId;AAAA,AAAO,AAAK,AAA2B,AACxC,KAZH,AAAa;AAGb,AAAO,AAUN,AACF;IAlBH,AAA8B,A,AAqB9B;;;;;;AAMA,SAAA,AAAS,cAAT,AAAuB,UAAU,YAAY,AAC3C;MAAM,YAAY,QAAA,AAAQ,IAA1B,AAAkB,AAAY,AAC9B;MAAM,SAAS,OAAf,AAAe,AAAO,AACtB;MAAM,UAAU,SAAA,AAAS,cAAT,AAAuB,OAAO,OAAA,AAAO,UAAP,AAAiB,QAAjB,AAAyB,WAAvE,AAA8C,AAAoC,AAClF;UAAA,AAAQ,AACR;WAAA,AAAS,cAAT,AAAuB,OAAO,OAAA,AAAO,UAAP,AAAiB,QAAjB,AAAyB,WAAvD,AAA8B,AAAoC,AACnE;AAND","file":"/imports/plugins/core/checkout/client/templates/checkout/completed/completed.js.map","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { Session } from \"meteor/session\";\nimport { Reaction, i18next } from \"/client/api\";\nimport { Orders } from \"/lib/collections\";\nimport { Template } from \"meteor/templating\";\n\n/**\n * cartCompleted helpers\n *\n * if order status = new translate submitted message\n */\nTemplate.cartCompleted.helpers({\n  orderCompleted: function () {\n    const id = Reaction.Router.getQueryParam(\"_id\");\n    if (id) {\n      const ccoSub = Meteor.subscribe(\"CompletedCartOrder\", Meteor.userId(), id);\n      if (ccoSub.ready()) {\n        return true;\n      }\n    }\n    return false;\n  },\n  order: function () {\n    return Orders.findOne({\n      userId: Meteor.userId(),\n      cartId: Reaction.Router.getQueryParam(\"_id\")\n    });\n  },\n  orderStatus: function () {\n    switch (this.workflow.status) {\n      case \"new\":\n        return i18next.t(\"cartCompleted.submitted\");\n      case \"coreOrderWorkflow/processing\":\n        return i18next.t(\"cartCompleted.processing\");\n      case \"coreOrderWorkflow/completed\":\n        return i18next.t(\"cartCompleted.completed\");\n      default:\n        return this.workflow.status;\n    }\n  },\n  userOrders: function () {\n    if (Meteor.user()) {\n      return Orders.find({\n        userId: Meteor.userId(),\n        cartId: this._id\n      });\n    }\n    return {};\n  }\n});\n\n/**\n * cartCompleted events\n *\n * adds email to order\n */\nTemplate.cartCompleted.events({\n  \"click #update-order\": function () {\n    const templateInstance = Template.instance();\n    const email = templateInstance.find(\"input[name=email]\").value;\n    check(email, String);\n    const cartId = Reaction.Router.getQueryParam(\"_id\");\n\n    return Meteor.call(\"orders/addOrderEmail\", cartId, email, (err) => {\n      if (err) {\n        Alerts.toast(i18next.t(\"mail.alerts.cantSendEmail\"), \"error\");\n      } else {\n        const order = Orders.findOne({\n          userId: Meteor.userId(),\n          cartId: Reaction.Router.getQueryParam(\"_id\")\n        });\n        Meteor.call(\"orders/sendNotification\", order);\n      }\n    });\n  }\n});\n\n/**\n * cartCompleted onCreated\n *\n * when the order is completed we need to destroy and recreate\n * the subscription to get the new cart\n */\nTemplate.cartCompleted.onCreated(function () {\n  const sessionId = Session.get(\"sessionId\");\n  const userId = Meteor.userId();\n  const cartSub = Reaction.Subscriptions.Cart = Meteor.subscribe(\"Cart\", sessionId, userId);\n  cartSub.stop();\n  Reaction.Subscriptions.Cart = Meteor.subscribe(\"Cart\", sessionId, userId);\n});\n"]},"hash":"eff935423d2cb17660c04e773c75af058d57fb5a"}
