{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/aldeed:simple-schema","imported":["SimpleSchema"],"specifiers":[{"kind":"named","imported":"SimpleSchema","local":"SimpleSchema"}]},{"source":"./helpers","imported":["schemaIdAutoValue"],"specifiers":[{"kind":"named","imported":"schemaIdAutoValue","local":"schemaIdAutoValue"}]},{"source":"./address","imported":["Address"],"specifiers":[{"kind":"named","imported":"Address","local":"Address"}]},{"source":"./workflow","imported":["Workflow"],"specifiers":[{"kind":"named","imported":"Workflow","local":"Workflow"}]}],"exports":{"exported":["PaymentMethod","Invoice","Currency","Payment","Refund"],"specifiers":[{"kind":"local","local":"PaymentMethod","exported":"PaymentMethod"},{"kind":"local","local":"Invoice","exported":"Invoice"},{"kind":"local","local":"Currency","exported":"Currency"},{"kind":"local","local":"Payment","exported":"Payment"},{"kind":"local","local":"Refund","exported":"Refund"}]}}},"options":{"filename":"/lib/collections/schemas/payments.js","filenameRelative":"/lib/collections/schemas/payments.js","inputSourceMap":{"version":3,"sources":["/lib/collections/schemas/payments.js"],"names":["SimpleSchema","schemaIdAutoValue","Address","Workflow","PaymentMethod","processor","type","String","paymentPackageId","paymentSettingsKey","storedCard","optional","method","allowedValues","transactionId","metadata","Object","blackbox","workflow","status","mode","createdAt","Date","autoValue","isInsert","isUpsert","$setOnInsert","denyUpdate","updatedAt","authorization","amount","Number","decimal","currency","transactions","Invoice","transaction","shipping","taxes","subtotal","discounts","total","Currency","userCurrency","exchangeRate","Payment","_id","label","address","paymentMethod","invoice","defaultValue","Refund","created","raw"],"mappings":"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","file":"/lib/collections/schemas/payments.js.map","sourcesContent":["import { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { schemaIdAutoValue } from \"./helpers\";\nimport { Address } from \"./address\";\nimport { Workflow } from \"./workflow\";\n\n/**\n * PaymentMethod Schema\n */\n\nexport const PaymentMethod = new SimpleSchema({\n  processor: {\n    type: String\n  },\n  paymentPackageId: {\n    type: String\n  },\n  paymentSettingsKey: {\n    type: String\n  },\n  storedCard: {\n    type: String,\n    optional: true\n  },\n  method: {\n    type: String,\n    allowedValues: [\"credit\", \"debit\", \"shipping-credit\"],\n    optional: true\n  },\n  transactionId: {\n    type: String\n  },\n  metadata: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  workflow: {\n    type: Workflow,\n    optional: true\n  },\n  status: {\n    type: String\n  },\n  mode: {\n    type: String,\n    allowedValues: [\"authorize\", \"capture\", \"refund\", \"cancel\", \"void\"]\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    },\n    denyUpdate: true\n  },\n  updatedAt: {\n    type: Date,\n    optional: true\n  },\n  authorization: {\n    type: String,\n    optional: true\n  },\n  amount: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  currency: {\n    type: String,\n    optional: true\n  },\n  transactions: {\n    type: [Object],\n    optional: true,\n    blackbox: true\n  }\n});\n\n/**\n * Invoice Schema\n */\n\nexport const Invoice = new SimpleSchema({\n  transaction: {\n    type: String,\n    optional: true\n  },\n  shipping: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  taxes: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  subtotal: {\n    type: Number,\n    decimal: true\n  },\n  discounts: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  total: {\n    type: Number,\n    decimal: true\n  }\n});\n\n/**\n * Currency Schema\n */\n\nexport const Currency = new SimpleSchema({\n  userCurrency: {\n    type: String,\n    optional: true\n  },\n  exchangeRate: {\n    type: Number,\n    decimal: true,\n    optional: true\n  }\n});\n\n/**\n * Payment Schema\n */\n\nexport const Payment = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Payment Id\",\n    autoValue: schemaIdAutoValue\n  },\n  address: {\n    type: Address,\n    optional: true\n  },\n  paymentMethod: {\n    type: PaymentMethod,\n    optional: true\n  },\n  invoice: {\n    type: Invoice,\n    optional: true\n  },\n  currency: {\n    type: Currency,\n    optional: true,\n    defaultValue: \"USD\"\n  }\n});\n\nexport const Refund = new SimpleSchema({\n  type: {\n    type: String\n  },\n  amount: {\n    type: Number,\n    decimal: true\n  },\n  created: {\n    type: Number\n  },\n  currency: {\n    type: String\n  },\n  raw: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n});\n"]},"env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/collections/schemas/payments.js.map","sourceFileName":"/lib/collections/schemas/payments.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"payments"},"ignored":false,"code":"module.export({\n  PaymentMethod: function () {\n    return PaymentMethod;\n  },\n  Invoice: function () {\n    return Invoice;\n  },\n  Currency: function () {\n    return Currency;\n  },\n  Payment: function () {\n    return Payment;\n  },\n  Refund: function () {\n    return Refund;\n  }\n});\nvar SimpleSchema = void 0;\nmodule.importSync(\"meteor/aldeed:simple-schema\", {\n  SimpleSchema: function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar schemaIdAutoValue = void 0;\nmodule.importSync(\"./helpers\", {\n  schemaIdAutoValue: function (v) {\n    schemaIdAutoValue = v;\n  }\n}, 1);\nvar Address = void 0;\nmodule.importSync(\"./address\", {\n  Address: function (v) {\n    Address = v;\n  }\n}, 2);\nvar Workflow = void 0;\nmodule.importSync(\"./workflow\", {\n  Workflow: function (v) {\n    Workflow = v;\n  }\n}, 3);\nvar PaymentMethod = new SimpleSchema({\n  processor: {\n    type: String\n  },\n  paymentPackageId: {\n    type: String\n  },\n  paymentSettingsKey: {\n    type: String\n  },\n  storedCard: {\n    type: String,\n    optional: true\n  },\n  method: {\n    type: String,\n    allowedValues: [\"credit\", \"debit\", \"shipping-credit\"],\n    optional: true\n  },\n  transactionId: {\n    type: String\n  },\n  metadata: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  workflow: {\n    type: Workflow,\n    optional: true\n  },\n  status: {\n    type: String\n  },\n  mode: {\n    type: String,\n    allowedValues: [\"authorize\", \"capture\", \"refund\", \"cancel\", \"void\"]\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      }\n    },\n    denyUpdate: true\n  },\n  updatedAt: {\n    type: Date,\n    optional: true\n  },\n  authorization: {\n    type: String,\n    optional: true\n  },\n  amount: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  currency: {\n    type: String,\n    optional: true\n  },\n  transactions: {\n    type: [Object],\n    optional: true,\n    blackbox: true\n  }\n});\nvar Invoice = new SimpleSchema({\n  transaction: {\n    type: String,\n    optional: true\n  },\n  shipping: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  taxes: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  subtotal: {\n    type: Number,\n    decimal: true\n  },\n  discounts: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  total: {\n    type: Number,\n    decimal: true\n  }\n});\nvar Currency = new SimpleSchema({\n  userCurrency: {\n    type: String,\n    optional: true\n  },\n  exchangeRate: {\n    type: Number,\n    decimal: true,\n    optional: true\n  }\n});\nvar Payment = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Payment Id\",\n    autoValue: schemaIdAutoValue\n  },\n  address: {\n    type: Address,\n    optional: true\n  },\n  paymentMethod: {\n    type: PaymentMethod,\n    optional: true\n  },\n  invoice: {\n    type: Invoice,\n    optional: true\n  },\n  currency: {\n    type: Currency,\n    optional: true,\n    defaultValue: \"USD\"\n  }\n});\nvar Refund = new SimpleSchema({\n  type: {\n    type: String\n  },\n  amount: {\n    type: Number,\n    decimal: true\n  },\n  created: {\n    type: Number\n  },\n  currency: {\n    type: String\n  },\n  raw: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n});","map":{"version":3,"sources":["/lib/collections/schemas/payments.js"],"names":["SimpleSchema","schemaIdAutoValue","Address","Workflow","PaymentMethod","processor","type","String","paymentPackageId","paymentSettingsKey","storedCard","optional","method","allowedValues","transactionId","metadata","Object","blackbox","workflow","status","mode","createdAt","Date","autoValue","isInsert","isUpsert","$setOnInsert","denyUpdate","updatedAt","authorization","amount","Number","decimal","currency","transactions","Invoice","transaction","shipping","taxes","subtotal","discounts","total","Currency","userCurrency","exchangeRate","Payment","_id","label","address","paymentMethod","invoice","defaultValue","Refund","created","raw"],"mappings":"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","file":"/lib/collections/schemas/payments.js.map","sourcesContent":["import { SimpleSchema } from \"meteor/aldeed:simple-schema\";\nimport { schemaIdAutoValue } from \"./helpers\";\nimport { Address } from \"./address\";\nimport { Workflow } from \"./workflow\";\n\n/**\n * PaymentMethod Schema\n */\n\nexport const PaymentMethod = new SimpleSchema({\n  processor: {\n    type: String\n  },\n  paymentPackageId: {\n    type: String\n  },\n  paymentSettingsKey: {\n    type: String\n  },\n  storedCard: {\n    type: String,\n    optional: true\n  },\n  method: {\n    type: String,\n    allowedValues: [\"credit\", \"debit\", \"shipping-credit\"],\n    optional: true\n  },\n  transactionId: {\n    type: String\n  },\n  metadata: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  workflow: {\n    type: Workflow,\n    optional: true\n  },\n  status: {\n    type: String\n  },\n  mode: {\n    type: String,\n    allowedValues: [\"authorize\", \"capture\", \"refund\", \"cancel\", \"void\"]\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date\n        };\n      }\n    },\n    denyUpdate: true\n  },\n  updatedAt: {\n    type: Date,\n    optional: true\n  },\n  authorization: {\n    type: String,\n    optional: true\n  },\n  amount: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  currency: {\n    type: String,\n    optional: true\n  },\n  transactions: {\n    type: [Object],\n    optional: true,\n    blackbox: true\n  }\n});\n\n/**\n * Invoice Schema\n */\n\nexport const Invoice = new SimpleSchema({\n  transaction: {\n    type: String,\n    optional: true\n  },\n  shipping: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  taxes: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  subtotal: {\n    type: Number,\n    decimal: true\n  },\n  discounts: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  total: {\n    type: Number,\n    decimal: true\n  }\n});\n\n/**\n * Currency Schema\n */\n\nexport const Currency = new SimpleSchema({\n  userCurrency: {\n    type: String,\n    optional: true\n  },\n  exchangeRate: {\n    type: Number,\n    decimal: true,\n    optional: true\n  }\n});\n\n/**\n * Payment Schema\n */\n\nexport const Payment = new SimpleSchema({\n  _id: {\n    type: String,\n    label: \"Payment Id\",\n    autoValue: schemaIdAutoValue\n  },\n  address: {\n    type: Address,\n    optional: true\n  },\n  paymentMethod: {\n    type: PaymentMethod,\n    optional: true\n  },\n  invoice: {\n    type: Invoice,\n    optional: true\n  },\n  currency: {\n    type: Currency,\n    optional: true,\n    defaultValue: \"USD\"\n  }\n});\n\nexport const Refund = new SimpleSchema({\n  type: {\n    type: String\n  },\n  amount: {\n    type: Number,\n    decimal: true\n  },\n  created: {\n    type: Number\n  },\n  currency: {\n    type: String\n  },\n  raw: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n});\n"]},"hash":"ab9b1ef1ae8d9b00b06fd8dfd724dcfa602fcdef"}
