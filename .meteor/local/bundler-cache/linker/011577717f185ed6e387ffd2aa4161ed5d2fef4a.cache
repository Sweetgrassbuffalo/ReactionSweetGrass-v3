[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar MongoID = Package['mongo-id'].MongoID;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar rulesByCollection, addFuncForAll, ensureCreated, ensureDefaultAllow, getRulesForCollectionAndType, getCollectionName, Security;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"ongoworks:security\":{\"lib\":{\"server\":{\"utility.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks_security/lib/server/utility.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global _, rulesByCollection:true, addFuncForAll:true, ensureCreated:true, ensureDefaultAllow:true */rulesByCollection = {};\nvar created = {                                                                                                        // 5\n  allow: {                                                                                                             // 6\n    insert: {},                                                                                                        // 7\n    update: {},                                                                                                        // 8\n    remove: {},                                                                                                        // 9\n    download: {} // for use with CollectionFS packages                                                                 // 10\n                                                                                                                       //\n  },                                                                                                                   // 6\n  deny: {                                                                                                              // 12\n    insert: {},                                                                                                        // 13\n    update: {},                                                                                                        // 14\n    remove: {},                                                                                                        // 15\n    download: {} // for use with CollectionFS packages                                                                 // 16\n                                                                                                                       //\n  }                                                                                                                    // 12\n}; /**                                                                                                                 // 5\n    * Adds the given function as an allow or deny function for all specified collections and types.                    //\n    * @param {Array(Mongo.Collection)} collections Array of Mongo.Collection instances                                 //\n    * @param {String}                  allowOrDeny \"allow\" or \"deny\"                                                   //\n    * @param {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")                       //\n    * @param {Array(String)|null}      fetch       `fetch` property to use                                             //\n    * @param {Function}                func        The function                                                        //\n    */                                                                                                                 //\n                                                                                                                       //\naddFuncForAll = function () {                                                                                          // 28\n  function addFuncForAll(collections, allowOrDeny, types, fetch, func) {                                               // 28\n    // We always disable transformation, but we transform for specific                                                 // 29\n    // rules upon running our deny function if requested.                                                              // 30\n    var rules = {                                                                                                      // 31\n      transform: null                                                                                                  // 31\n    };                                                                                                                 // 31\n                                                                                                                       //\n    if (_.isArray(fetch)) {                                                                                            // 32\n      rules.fetch = fetch;                                                                                             // 33\n    }                                                                                                                  // 34\n                                                                                                                       //\n    _.each(types, function (t) {                                                                                       // 35\n      rules[t] = func;                                                                                                 // 36\n    });                                                                                                                // 37\n                                                                                                                       //\n    _.each(collections, function (c) {                                                                                 // 38\n      c[allowOrDeny](rules);                                                                                           // 39\n    });                                                                                                                // 40\n  }                                                                                                                    // 41\n                                                                                                                       //\n  return addFuncForAll;                                                                                                // 28\n}(); /**                                                                                                               // 28\n      * Creates the allow or deny function for the given collections if not already created. This ensures that this package only ever creates up to one allow and one deny per collection.\n      * @param   {String}                  allowOrDeny \"allow\" or \"deny\"                                               //\n      * @param   {Array(Mongo.Collection)} collections An array of collections                                         //\n      * @param   {Array(String)}           types       An array of types (\"insert\", \"update\", \"remove\")                //\n      * @param   {Array(String)|null}      fetch       `fetch` property to use                                         //\n      * @param   {Function}                func        The function                                                    //\n      */                                                                                                               //\n                                                                                                                       //\nensureCreated = function () {                                                                                          // 51\n  function ensureCreated(allowOrDeny, collections, types, fetch, func) {                                               // 51\n    _.each(types, function (t) {                                                                                       // 52\n      // Ignore \"read\"                                                                                                 // 53\n      if (!_.contains(['insert', 'update', 'remove', 'download'], t)) return;                                          // 54\n      collections = _.reject(collections, function (c) {                                                               // 56\n        return _.has(created[allowOrDeny][t], getCollectionName(c));                                                   // 57\n      });                                                                                                              // 58\n      addFuncForAll(collections, allowOrDeny, [t], null, func); // mark that we've defined function for collection-type combo\n                                                                                                                       //\n      _.each(collections, function (c) {                                                                               // 61\n        created[allowOrDeny][t][getCollectionName(c)] = true;                                                          // 62\n      });                                                                                                              // 63\n    });                                                                                                                // 64\n  }                                                                                                                    // 65\n                                                                                                                       //\n  return ensureCreated;                                                                                                // 51\n}(); /**                                                                                                               // 51\n      * Sets up default allow functions for the collections and types.                                                 //\n      * @param   {Array(Mongo.Collection)} collections Array of Mongo.Collection instances                             //\n      * @param   {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")                   //\n      */                                                                                                               //\n                                                                                                                       //\nensureDefaultAllow = function () {                                                                                     // 72\n  function ensureDefaultAllow(collections, types) {                                                                    // 72\n    ensureCreated(\"allow\", collections, types, [], function () {                                                       // 73\n      return true;                                                                                                     // 74\n    });                                                                                                                // 75\n  }                                                                                                                    // 76\n                                                                                                                       //\n  return ensureDefaultAllow;                                                                                           // 72\n}(); /**                                                                                                               // 72\n      * Return only those rules that apply to the given collection and operation type                                  //\n      */                                                                                                               //\n                                                                                                                       //\ngetRulesForCollectionAndType = function () {                                                                           // 81\n  function getRulesForCollectionAndType(collectionName, type) {                                                        // 81\n    var rules = rulesByCollection[collectionName] || [];                                                               // 82\n    return _.select(rules, function (rule) {                                                                           // 83\n      return _.contains(rule._types, type);                                                                            // 84\n    });                                                                                                                // 85\n  }                                                                                                                    // 86\n                                                                                                                       //\n  return getRulesForCollectionAndType;                                                                                 // 81\n}();                                                                                                                   // 81\n                                                                                                                       //\ngetCollectionName = function () {                                                                                      // 88\n  function getCollectionName(collection) {                                                                             // 88\n    // CollectionFS has underlying collection on `files` property                                                      // 89\n    return collection._name || collection.files && collection.files._name;                                             // 90\n  }                                                                                                                    // 91\n                                                                                                                       //\n  return getCollectionName;                                                                                            // 88\n}();                                                                                                                   // 88\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Security.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks_security/lib/server/Security.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// The `Security` object is exported and provides the package API                                                      // 1\nSecurity = {                                                                                                           // 2\n  // Putting these on the exported object allows package users to override if necessary                                // 3\n  errorMessages: {                                                                                                     // 4\n    multipleCan: 'You may not combine more than one insert, update, or remove on a Security.can chain',                // 5\n    notAllowed: 'Action not allowed',                                                                                  // 6\n    requiresDefinition: 'Security.defineMethod requires a \"definition\" argument',                                      // 7\n    requiresAllow: 'Security.defineMethod requires an \"allow\" function',                                               // 8\n    collectionsArg: 'The collections argument must be a Mongo.Collection instance or an array of them',                // 9\n    noCollectionOrType: 'At a minimum, you must call permit and collections methods for a security rule.'              // 10\n  },                                                                                                                   // 4\n  // the starting point of the chain                                                                                   // 12\n  permit: function () {                                                                                                // 13\n    function permit(types) {                                                                                           // 13\n      return new Security.Rule(types);                                                                                 // 14\n    }                                                                                                                  // 15\n                                                                                                                       //\n    return permit;                                                                                                     // 13\n  }(),                                                                                                                 // 13\n  can: function () {                                                                                                   // 16\n    function can(userId) {                                                                                             // 16\n      return new Security.Check(userId);                                                                               // 17\n    }                                                                                                                  // 18\n                                                                                                                       //\n    return can;                                                                                                        // 16\n  }(),                                                                                                                 // 16\n  defineMethod: function () {                                                                                          // 19\n    function securityDefineMethod(name, definition) {                                                                  // 19\n      // Check whether a rule with the given name already exists; can't overwrite                                      // 20\n      if (Security.Rule.prototype[name]) {                                                                             // 21\n        throw new Error('A security method with the name \"' + name + '\" has already been defined');                    // 22\n      }                                                                                                                // 23\n                                                                                                                       //\n      if (!definition) throw new Error(Security.errorMessages.requiresDefinition); // If \"deny\" is used, convert to \"allow\" for backwards compatibility\n                                                                                                                       //\n      if (definition.deny) {                                                                                           // 26\n        definition.allow = function () {                                                                               // 27\n          return !definition.deny.apply(definition, arguments);                                                        // 28\n        };                                                                                                             // 29\n      } // Make sure the definition argument is an object that has an `allow` property                                 // 30\n                                                                                                                       //\n                                                                                                                       //\n      if (!definition.allow) throw new Error(Security.errorMessages.requiresAllow); // Wrap transform, if provided     // 32\n                                                                                                                       //\n      if (definition.transform) {                                                                                      // 34\n        definition.transform = LocalCollection.wrapTransform(definition.transform);                                    // 35\n      }                                                                                                                // 36\n                                                                                                                       //\n      Security.Rule.prototype[name] = function (arg) {                                                                 // 37\n        this._restrictions.push({                                                                                      // 38\n          definition: definition,                                                                                      // 39\n          arg: arg                                                                                                     // 40\n        });                                                                                                            // 38\n                                                                                                                       //\n        return this;                                                                                                   // 42\n      };                                                                                                               // 43\n    }                                                                                                                  // 44\n                                                                                                                       //\n    return securityDefineMethod;                                                                                       // 19\n  }()                                                                                                                  // 19\n};                                                                                                                     // 2\n                                                                                                                       //\nMongo.Collection.prototype.permit = function (types) {                                                                 // 47\n  return Security.permit(types).collections(this);                                                                     // 48\n};                                                                                                                     // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Security.Rule.js\":[\"babel-runtime/helpers/toConsumableArray\",\"babel-runtime/helpers/classCallCheck\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks_security/lib/server/Security.Rule.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");                                          //\n                                                                                                                       //\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);                                                 //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nSecurity.Rule = function () {                                                                                          // 1\n  function _class(types) {                                                                                             // 2\n    (0, _classCallCheck3.default)(this, _class);                                                                       // 2\n    if (!_.isArray(types)) types = [types];                                                                            // 3\n    this._types = types;                                                                                               // 4\n    this._restrictions = [];                                                                                           // 5\n  }                                                                                                                    // 6\n                                                                                                                       //\n  _class.prototype.collections = function () {                                                                         // 1\n    function collections(_collections) {                                                                               // 1\n      var _this = this;                                                                                                // 8\n                                                                                                                       //\n      // Make sure the `collections` argument is either a `Mongo.Collection` instance or                               // 9\n      // an array of them. If it's a single collection, convert it to a one-item array.                                // 10\n      if (!_.isArray(_collections)) _collections = [_collections]; // Keep list keyed by collection name               // 11\n                                                                                                                       //\n      _.each(_collections, function (collection) {                                                                     // 14\n        if (!(collection instanceof Mongo.Collection) && // CollectionFS has underlying collection on `files` property\n        !(collection.files instanceof Mongo.Collection)) {                                                             // 17\n          throw new Error(Security.errorMessages.collectionsArg);                                                      // 18\n        } // CollectionFS has underlying collection on `files` property                                                // 19\n                                                                                                                       //\n                                                                                                                       //\n        var collectionName = getCollectionName(collection);                                                            // 21\n        rulesByCollection[collectionName] = rulesByCollection[collectionName] || [];                                   // 22\n        rulesByCollection[collectionName].push(_this);                                                                 // 23\n      });                                                                                                              // 24\n                                                                                                                       //\n      this._collections = _collections;                                                                                // 26\n      return this;                                                                                                     // 28\n    }                                                                                                                  // 29\n                                                                                                                       //\n    return collections;                                                                                                // 1\n  }();                                                                                                                 // 1\n                                                                                                                       //\n  _class.prototype.combinedFetch = function () {                                                                       // 1\n    function combinedFetch() {                                                                                         // 1\n      // We need a combined `fetch` array. The `fetch` is optional and can be either an array                          // 32\n      // or a function that takes the argument passed to the restriction method and returns an array.                  // 33\n      var fetch = [];                                                                                                  // 34\n                                                                                                                       //\n      _.every(this._restrictions, function (restriction) {                                                             // 35\n        if (_.isArray(restriction.definition.fetch)) {                                                                 // 36\n          fetch = _.union(fetch, restriction.definition.fetch);                                                        // 37\n        } else if (typeof restriction.definition.fetch === \"function\") {                                               // 38\n          fetch = _.union(fetch, restriction.definition.fetch(restriction.arg));                                       // 39\n        } else if (!restriction.definition.hasOwnProperty('fetch')) {                                                  // 40\n          // If `fetch` property isn't present, we should fetch the full doc.                                          // 41\n          fetch = null;                                                                                                // 42\n          return false; // Exit loop                                                                                   // 43\n        }                                                                                                              // 44\n                                                                                                                       //\n        return true;                                                                                                   // 45\n      });                                                                                                              // 46\n                                                                                                                       //\n      return fetch;                                                                                                    // 47\n    }                                                                                                                  // 48\n                                                                                                                       //\n    return combinedFetch;                                                                                              // 1\n  }();                                                                                                                 // 1\n                                                                                                                       //\n  _class.prototype.allowInClientCode = function () {                                                                   // 1\n    function allowInClientCode() {                                                                                     // 1\n      if (!this._collections || !this._types) throw new Error(Security.errorMessages.noCollectionOrType);              // 51\n      ensureSecureDeny(this._collections, this._types);                                                                // 52\n    }                                                                                                                  // 53\n                                                                                                                       //\n    return allowInClientCode;                                                                                          // 1\n  }();                                                                                                                 // 1\n                                                                                                                       //\n  _class.prototype.allow = function () {                                                                               // 1\n    function allow(type, collection, userId, doc, modifier) {                                                          // 1\n      for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {        // 55\n        args[_key - 5] = arguments[_key];                                                                              // 55\n      }                                                                                                                // 55\n                                                                                                                       //\n      var fields = void 0;                                                                                             // 56\n      if (type === 'update') fields = computeChangedFieldsFromModifier(modifier); // Loop through all defined restrictions. Restrictions are additive for this chained\n      // rule, so if any allow function returns false, this function should return false.                              // 60\n                                                                                                                       //\n      return _.every(this._restrictions, function (restriction) {                                                      // 61\n        var _restriction$definiti;                                                                                     // 61\n                                                                                                                       //\n        // Clone the doc in case we need to transform it. Transformations                                              // 62\n        // should apply to only the one restriction.                                                                   // 63\n        var loopDoc = _.clone(doc); // If transform is a function, apply that                                          // 64\n                                                                                                                       //\n                                                                                                                       //\n        var transform = restriction.definition.transform;                                                              // 67\n                                                                                                                       //\n        if (transform !== null) {                                                                                      // 68\n          transform = transform || collection._transform;                                                              // 69\n                                                                                                                       //\n          if (typeof transform === 'function') {                                                                       // 70\n            var addedRandomId = false;                                                                                 // 71\n                                                                                                                       //\n            if (type === 'insert' && !loopDoc._id) {                                                                   // 72\n              // The wrapped transform requires an _id, but we                                                         // 73\n              // don't have access to the generatedId from Meteor API,                                                 // 74\n              // so we'll fudge one and then remove it.                                                                // 75\n              loopDoc._id = Random.id();                                                                               // 76\n              addedRandomId = true;                                                                                    // 77\n            }                                                                                                          // 78\n                                                                                                                       //\n            loopDoc = transform(loopDoc);                                                                              // 79\n            if (addedRandomId) delete loopDoc._id;                                                                     // 80\n          }                                                                                                            // 81\n        }                                                                                                              // 82\n                                                                                                                       //\n        return (_restriction$definiti = restriction.definition).allow.apply(_restriction$definiti, [type, restriction.arg, userId, loopDoc, fields, modifier].concat(args));\n      });                                                                                                              // 85\n    }                                                                                                                  // 86\n                                                                                                                       //\n    return allow;                                                                                                      // 1\n  }();                                                                                                                 // 1\n                                                                                                                       //\n  return _class;                                                                                                       // 1\n}();                                                                                                                   // 1\n                                                                                                                       //\nfunction ensureSecureDeny(collections, types) {                                                                        // 89\n  // If we haven't yet done so, set up a default, permissive `allow` function for all of                               // 90\n  // the given collections and types. We control all security through `deny` functions only, but                       // 91\n  // there must first be at least one `allow` function for each collection or all writes                               // 92\n  // will be denied.                                                                                                   // 93\n  ensureDefaultAllow(collections, types);                                                                              // 94\n                                                                                                                       //\n  _.each(types, function (t) {                                                                                         // 96\n    _.each(collections, function (collection) {                                                                        // 97\n      ensureCreated('deny', [collection], [t], null, function () {                                                     // 98\n        var _Security$can;                                                                                             // 98\n                                                                                                                       //\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {                   // 98\n          args[_key2] = arguments[_key2];                                                                              // 98\n        }                                                                                                              // 98\n                                                                                                                       //\n        var userId = args.shift(); // If type is update, remove the `fields` argument. We will create our own          // 99\n        // for consistency.                                                                                            // 102\n                                                                                                                       //\n        if (t === 'update') args = [args[0], args[2]];                                                                 // 103\n        return !(_Security$can = Security.can(userId))[t].apply(_Security$can, (0, _toConsumableArray3.default)(args)).for(collection).check();\n      });                                                                                                              // 106\n    });                                                                                                                // 107\n  });                                                                                                                  // 108\n}                                                                                                                      // 109\n                                                                                                                       //\nfunction computeChangedFieldsFromModifier(modifier) {                                                                  // 111\n  var fields = []; // This is the same logic Meteor's mongo package uses in                                            // 112\n  // https://github.com/meteor/meteor/blob/devel/packages/mongo/collection.js                                          // 114\n                                                                                                                       //\n  _.each(modifier, function (params) {                                                                                 // 115\n    _.each(_.keys(params), function (field) {                                                                          // 116\n      // treat dotted fields as if they are replacing their                                                            // 117\n      // top-level part                                                                                                // 118\n      if (field.indexOf('.') !== -1) field = field.substring(0, field.indexOf('.')); // record the field we are trying to change\n                                                                                                                       //\n      if (!_.contains(fields, field)) fields.push(field);                                                              // 123\n    });                                                                                                                // 125\n  });                                                                                                                  // 126\n                                                                                                                       //\n  return fields;                                                                                                       // 127\n}                                                                                                                      // 128\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"Security.Check.js\":[\"babel-runtime/helpers/toConsumableArray\",\"babel-runtime/helpers/classCallCheck\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks_security/lib/server/Security.Check.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");                                          //\n                                                                                                                       //\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);                                                 //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nSecurity.Check = function () {                                                                                         // 1\n  function _class(userId) {                                                                                            // 2\n    (0, _classCallCheck3.default)(this, _class);                                                                       // 2\n    this.userId = userId || null;                                                                                      // 3\n  }                                                                                                                    // 4\n                                                                                                                       //\n  _class.prototype.for = function () {                                                                                 // 1\n    function _for(collection) {                                                                                        // 1\n      this.collection = collection;                                                                                    // 7\n      this.collectionName = getCollectionName(collection);                                                             // 8\n      return this;                                                                                                     // 9\n    }                                                                                                                  // 10\n                                                                                                                       //\n    return _for;                                                                                                       // 1\n  }();                                                                                                                 // 1\n                                                                                                                       //\n  _class.prototype.insert = function () {                                                                              // 1\n    function insert(doc) {                                                                                             // 1\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);                                              // 13\n      this.type = 'insert';                                                                                            // 14\n      this.doc = doc;                                                                                                  // 15\n                                                                                                                       //\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {        // 12\n        args[_key - 1] = arguments[_key];                                                                              // 12\n      }                                                                                                                // 12\n                                                                                                                       //\n      this.args = args;                                                                                                // 16\n      return this;                                                                                                     // 17\n    }                                                                                                                  // 18\n                                                                                                                       //\n    return insert;                                                                                                     // 1\n  }();                                                                                                                 // 1\n                                                                                                                       //\n  _class.prototype.update = function () {                                                                              // 1\n    function update(doc, modifier) {                                                                                   // 1\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);                                              // 21\n      this.type = 'update';                                                                                            // 22\n      this.doc = doc;                                                                                                  // 23\n      this.modifier = modifier;                                                                                        // 24\n                                                                                                                       //\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];                                                                            // 20\n      }                                                                                                                // 20\n                                                                                                                       //\n      this.args = args;                                                                                                // 25\n      return this;                                                                                                     // 26\n    }                                                                                                                  // 27\n                                                                                                                       //\n    return update;                                                                                                     // 1\n  }();                                                                                                                 // 1\n                                                                                                                       //\n  _class.prototype.remove = function () {                                                                              // 1\n    function remove(doc) {                                                                                             // 1\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);                                              // 30\n      this.type = 'remove';                                                                                            // 31\n      this.doc = doc;                                                                                                  // 32\n                                                                                                                       //\n      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];                                                                            // 29\n      }                                                                                                                // 29\n                                                                                                                       //\n      this.args = args;                                                                                                // 33\n      return this;                                                                                                     // 34\n    }                                                                                                                  // 35\n                                                                                                                       //\n    return remove;                                                                                                     // 1\n  }();                                                                                                                 // 1\n                                                                                                                       //\n  _class.prototype.read = function () {                                                                                // 1\n    function read(doc) {                                                                                               // 1\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);                                              // 38\n      this.type = 'read';                                                                                              // 39\n      this.doc = doc;                                                                                                  // 40\n                                                                                                                       //\n      for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];                                                                            // 37\n      }                                                                                                                // 37\n                                                                                                                       //\n      this.args = args;                                                                                                // 41\n      return this;                                                                                                     // 42\n    }                                                                                                                  // 43\n                                                                                                                       //\n    return read;                                                                                                       // 1\n  }();                                                                                                                 // 1\n                                                                                                                       //\n  _class.prototype.download = function () {                                                                            // 1\n    function download(doc) {                                                                                           // 1\n      if (this.type) throw new Error(Security.errorMessages.multipleCan);                                              // 46\n      this.type = 'download';                                                                                          // 47\n      this.doc = doc;                                                                                                  // 48\n                                                                                                                       //\n      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];                                                                            // 45\n      }                                                                                                                // 45\n                                                                                                                       //\n      this.args = args;                                                                                                // 49\n      return this;                                                                                                     // 50\n    }                                                                                                                  // 51\n                                                                                                                       //\n    return download;                                                                                                   // 1\n  }(); // EXAMPLES:                                                                                                    // 1\n  // Security.can(userId).insert(doc).for(MyCollection).check()                                                        // 54\n  // Security.can(userId).update(id, modifier).for(MyCollection).check()                                               // 55\n  // Security.can(userId).remove(id).for(MyCollection).check()                                                         // 56\n                                                                                                                       //\n                                                                                                                       //\n  _class.prototype.check = function () {                                                                               // 1\n    function check() {                                                                                                 // 1\n      var _this = this;                                                                                                // 57\n                                                                                                                       //\n      // Select only those rules that apply to this operation type                                                     // 58\n      var rules = getRulesForCollectionAndType(this.collectionName, this.type); // If this.doc is an ID, we will look up the doc, fetching only the fields needed.\n      // To find out which fields are needed, we will combine all the `fetch` arrays from                              // 62\n      // all the restrictions in all the rules.                                                                        // 63\n                                                                                                                       //\n      if (typeof this.doc === 'string' || this.doc instanceof MongoID.ObjectID) {                                      // 64\n        var fields = {};                                                                                               // 65\n                                                                                                                       //\n        _.every(rules, function (rule) {                                                                               // 66\n          var fetch = rule.combinedFetch();                                                                            // 67\n                                                                                                                       //\n          if (fetch === null) {                                                                                        // 68\n            fields = null;                                                                                             // 69\n            return false; // Exit loop                                                                                 // 70\n          }                                                                                                            // 71\n                                                                                                                       //\n          rule.combinedFetch().forEach(function (field) {                                                              // 72\n            fields[field] = 1;                                                                                         // 73\n          });                                                                                                          // 74\n          return true;                                                                                                 // 75\n        });                                                                                                            // 76\n                                                                                                                       //\n        var options = {};                                                                                              // 78\n                                                                                                                       //\n        if (fields) {                                                                                                  // 79\n          if (_.isEmpty(fields)) {                                                                                     // 80\n            options = {                                                                                                // 81\n              _id: 1                                                                                                   // 81\n            };                                                                                                         // 81\n          } else {                                                                                                     // 82\n            options = {                                                                                                // 83\n              fields: fields                                                                                           // 83\n            };                                                                                                         // 83\n          }                                                                                                            // 84\n        }                                                                                                              // 85\n                                                                                                                       //\n        this.doc = this.collection.findOne(this.doc, options);                                                         // 86\n      } // Loop through all defined rules for this collection. There is an OR relationship among                       // 87\n      // all rules for the collection, so if any \"allow\" function DO return true, we allow.                            // 90\n                                                                                                                       //\n                                                                                                                       //\n      return _.any(rules, function (rule) {                                                                            // 91\n        return rule.allow.apply(rule, [_this.type, _this.collection, _this.userId, _this.doc, _this.modifier].concat((0, _toConsumableArray3.default)(_this.args)));\n      });                                                                                                              // 91\n    }                                                                                                                  // 92\n                                                                                                                       //\n    return check;                                                                                                      // 1\n  }(); // EXAMPLES:                                                                                                    // 1\n  // Security.can(userId).insert(doc).for(MyCollection).throw()                                                        // 95\n  // Security.can(userId).update(id, modifier).for(MyCollection).throw()                                               // 96\n  // Security.can(userId).remove(id).for(MyCollection).throw()                                                         // 97\n                                                                                                                       //\n                                                                                                                       //\n  _class.prototype.throw = function () {                                                                               // 1\n    function _throw() {                                                                                                // 1\n      if (!this.check()) throw new Meteor.Error('access-denied', Security.errorMessages.notAllowed);                   // 99\n    }                                                                                                                  // 100\n                                                                                                                       //\n    return _throw;                                                                                                     // 1\n  }();                                                                                                                 // 1\n                                                                                                                       //\n  return _class;                                                                                                       // 1\n}();                                                                                                                   // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"builtInRules.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ongoworks_security/lib/builtInRules.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * This file defines built-in restriction methods                                                                      //\n */ /*                                                                                                                 //\n     * No one                                                                                                          //\n     */Security.defineMethod(\"never\", {                                                                                //\n  fetch: [],                                                                                                           // 10\n  transform: null,                                                                                                     // 11\n  allow: function () {                                                                                                 // 12\n    return false;                                                                                                      // 13\n  }                                                                                                                    // 14\n}); /*                                                                                                                 // 9\n     * Logged In                                                                                                       //\n     */                                                                                                                //\nSecurity.defineMethod(\"ifLoggedIn\", {                                                                                  // 21\n  fetch: [],                                                                                                           // 22\n  transform: null,                                                                                                     // 23\n  allow: function (type, arg, userId) {                                                                                // 24\n    return !!userId;                                                                                                   // 25\n  }                                                                                                                    // 26\n}); /*                                                                                                                 // 21\n     * Specific User ID                                                                                                //\n     */                                                                                                                //\nSecurity.defineMethod(\"ifHasUserId\", {                                                                                 // 33\n  fetch: [],                                                                                                           // 34\n  transform: null,                                                                                                     // 35\n  allow: function (type, arg, userId) {                                                                                // 36\n    return userId === arg;                                                                                             // 37\n  }                                                                                                                    // 38\n}); /*                                                                                                                 // 33\n     * Specific Roles                                                                                                  //\n     */ /*                                                                                                             //\n         * alanning:roles support                                                                                      //\n         */                                                                                                            //\n                                                                                                                       //\nif (Package && Package[\"alanning:roles\"]) {                                                                            // 48\n  var Roles = Package[\"alanning:roles\"].Roles;                                                                         // 50\n  Security.defineMethod(\"ifHasRole\", {                                                                                 // 52\n    fetch: [],                                                                                                         // 53\n    transform: null,                                                                                                   // 54\n    allow: function (type, arg, userId) {                                                                              // 55\n      if (!arg) throw new Error('ifHasRole security rule method requires an argument');                                // 56\n                                                                                                                       //\n      if (arg.role) {                                                                                                  // 57\n        return Roles.userIsInRole(userId, arg.role, arg.group);                                                        // 58\n      } else {                                                                                                         // 59\n        return Roles.userIsInRole(userId, arg);                                                                        // 60\n      }                                                                                                                // 61\n    }                                                                                                                  // 62\n  });                                                                                                                  // 52\n} /*                                                                                                                   // 65\n   * nicolaslopezj:roles support                                                                                       //\n   * Note: doesn't support groups                                                                                      //\n   */                                                                                                                  //\n                                                                                                                       //\nif (Package && Package[\"nicolaslopezj:roles\"]) {                                                                       // 71\n  var Roles = Package[\"nicolaslopezj:roles\"].Roles;                                                                    // 73\n  Security.defineMethod(\"ifHasRole\", {                                                                                 // 75\n    fetch: [],                                                                                                         // 76\n    transform: null,                                                                                                   // 77\n    allow: function (type, arg, userId) {                                                                              // 78\n      if (!arg) throw new Error('ifHasRole security rule method requires an argument');                                // 79\n      return Roles.userHasRole(userId, arg);                                                                           // 80\n    }                                                                                                                  // 81\n  });                                                                                                                  // 75\n} /*                                                                                                                   // 84\n   * Specific Properties                                                                                               //\n   */                                                                                                                  //\n                                                                                                                       //\nSecurity.defineMethod(\"onlyProps\", {                                                                                   // 90\n  fetch: [],                                                                                                           // 91\n  transform: null,                                                                                                     // 92\n  allow: function (type, arg, userId, doc, fieldNames) {                                                               // 93\n    if (!_.isArray(arg)) arg = [arg];                                                                                  // 94\n    fieldNames = fieldNames || _.keys(doc);                                                                            // 96\n    return _.every(fieldNames, function (fieldName) {                                                                  // 98\n      return _.contains(arg, fieldName);                                                                               // 99\n    });                                                                                                                // 100\n  }                                                                                                                    // 101\n});                                                                                                                    // 90\nSecurity.defineMethod(\"exceptProps\", {                                                                                 // 104\n  fetch: [],                                                                                                           // 105\n  transform: null,                                                                                                     // 106\n  allow: function (type, arg, userId, doc, fieldNames) {                                                               // 107\n    if (!_.isArray(arg)) arg = [arg];                                                                                  // 108\n    fieldNames = fieldNames || _.keys(doc);                                                                            // 110\n    return !_.any(fieldNames, function (fieldName) {                                                                   // 112\n      return _.contains(arg, fieldName);                                                                               // 113\n    });                                                                                                                // 114\n  }                                                                                                                    // 115\n});                                                                                                                    // 104\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/ongoworks:security/lib/server/utility.js\");\nrequire(\"./node_modules/meteor/ongoworks:security/lib/server/Security.js\");\nrequire(\"./node_modules/meteor/ongoworks:security/lib/server/Security.Rule.js\");\nrequire(\"./node_modules/meteor/ongoworks:security/lib/server/Security.Check.js\");\nrequire(\"./node_modules/meteor/ongoworks:security/lib/builtInRules.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['ongoworks:security'] = {}, {\n  Security: Security\n});\n\n})();\n","servePath":"/packages/ongoworks_security.js","sourceMap":{"version":3,"sources":["/packages/ongoworks:security/lib/server/utility.js","/packages/ongoworks:security/lib/server/Security.js","/packages/ongoworks:security/lib/server/Security.Rule.js","/packages/ongoworks:security/lib/server/Security.Check.js","/packages/ongoworks:security/lib/builtInRules.js"],"names":["rulesByCollection","created","allow","insert","update","remove","download","deny","addFuncForAll","collections","allowOrDeny","types","fetch","func","rules","transform","_","isArray","each","t","c","ensureCreated","contains","reject","has","getCollectionName","ensureDefaultAllow","getRulesForCollectionAndType","collectionName","type","select","rule","_types","collection","_name","files","Security","errorMessages","multipleCan","notAllowed","requiresDefinition","requiresAllow","collectionsArg","noCollectionOrType","permit","Rule","can","userId","Check","defineMethod","securityDefineMethod","name","definition","prototype","Error","LocalCollection","wrapTransform","arg","_restrictions","push","Mongo","Collection","_collections","combinedFetch","every","restriction","union","hasOwnProperty","allowInClientCode","ensureSecureDeny","doc","modifier","args","fields","computeChangedFieldsFromModifier","loopDoc","clone","_transform","addedRandomId","_id","Random","id","shift","for","check","params","keys","field","indexOf","substring","read","MongoID","ObjectID","forEach","options","isEmpty","findOne","any","throw","Meteor","Package","Roles","role","userIsInRole","group","userHasRole","fieldNames","fieldName"],"mappings":"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","file":"/packages/ongoworks_security.js","sourcesContent":["/* global _, rulesByCollection:true, addFuncForAll:true, ensureCreated:true, ensureDefaultAllow:true */\n\nrulesByCollection = {};\n\nvar created = {\n  allow: {\n    insert: {},\n    update: {},\n    remove: {},\n    download: {} // for use with CollectionFS packages\n  },\n  deny: {\n    insert: {},\n    update: {},\n    remove: {},\n    download: {} // for use with CollectionFS packages\n  }\n};\n\n/**\n * Adds the given function as an allow or deny function for all specified collections and types.\n * @param {Array(Mongo.Collection)} collections Array of Mongo.Collection instances\n * @param {String}                  allowOrDeny \"allow\" or \"deny\"\n * @param {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")\n * @param {Array(String)|null}      fetch       `fetch` property to use\n * @param {Function}                func        The function\n */\naddFuncForAll = function addFuncForAll(collections, allowOrDeny, types, fetch, func) {\n  // We always disable transformation, but we transform for specific\n  // rules upon running our deny function if requested.\n  var rules = {transform: null};\n  if (_.isArray(fetch)) {\n    rules.fetch = fetch;\n  }\n  _.each(types, function (t) {\n    rules[t] = func;\n  });\n  _.each(collections, function (c) {\n    c[allowOrDeny](rules);\n  });\n};\n\n/**\n * Creates the allow or deny function for the given collections if not already created. This ensures that this package only ever creates up to one allow and one deny per collection.\n * @param   {String}                  allowOrDeny \"allow\" or \"deny\"\n * @param   {Array(Mongo.Collection)} collections An array of collections\n * @param   {Array(String)}           types       An array of types (\"insert\", \"update\", \"remove\")\n * @param   {Array(String)|null}      fetch       `fetch` property to use\n * @param   {Function}                func        The function\n */\nensureCreated = function ensureCreated(allowOrDeny, collections, types, fetch, func) {\n  _.each(types, t => {\n    // Ignore \"read\"\n    if (!_.contains(['insert', 'update', 'remove', 'download'], t)) return;\n\n    collections = _.reject(collections, c => {\n      return _.has(created[allowOrDeny][t], getCollectionName(c));\n    });\n    addFuncForAll(collections, allowOrDeny, [t], null, func);\n    // mark that we've defined function for collection-type combo\n    _.each(collections, c => {\n      created[allowOrDeny][t][getCollectionName(c)] = true;\n    });\n  });\n};\n\n/**\n * Sets up default allow functions for the collections and types.\n * @param   {Array(Mongo.Collection)} collections Array of Mongo.Collection instances\n * @param   {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")\n */\nensureDefaultAllow = function ensureDefaultAllow(collections, types) {\n  ensureCreated(\"allow\", collections, types, [], function () {\n    return true;\n  });\n};\n\n/**\n * Return only those rules that apply to the given collection and operation type\n */\ngetRulesForCollectionAndType = function getRulesForCollectionAndType(collectionName, type) {\n  var rules = rulesByCollection[collectionName] || [];\n  return _.select(rules, function (rule) {\n    return _.contains(rule._types, type);\n  });\n};\n\ngetCollectionName = function getCollectionName(collection) {\n  // CollectionFS has underlying collection on `files` property\n  return collection._name || (collection.files && collection.files._name);\n};\n","// The `Security` object is exported and provides the package API\nSecurity = {\n  // Putting these on the exported object allows package users to override if necessary\n  errorMessages: {\n    multipleCan: 'You may not combine more than one insert, update, or remove on a Security.can chain',\n    notAllowed: 'Action not allowed',\n    requiresDefinition: 'Security.defineMethod requires a \"definition\" argument',\n    requiresAllow: 'Security.defineMethod requires an \"allow\" function',\n    collectionsArg: 'The collections argument must be a Mongo.Collection instance or an array of them',\n    noCollectionOrType: 'At a minimum, you must call permit and collections methods for a security rule.',\n  },\n  // the starting point of the chain\n  permit: function permit(types) {\n    return new Security.Rule(types);\n  },\n  can: function can(userId) {\n    return new Security.Check(userId);\n  },\n  defineMethod: function securityDefineMethod(name, definition) {\n    // Check whether a rule with the given name already exists; can't overwrite\n    if (Security.Rule.prototype[name]) {\n      throw new Error('A security method with the name \"' + name + '\" has already been defined');\n    }\n    if (!definition) throw new Error(Security.errorMessages.requiresDefinition);\n    // If \"deny\" is used, convert to \"allow\" for backwards compatibility\n    if (definition.deny) {\n      definition.allow = (...args) => {\n        return !definition.deny(...args);\n      };\n    }\n    // Make sure the definition argument is an object that has an `allow` property\n    if (!definition.allow) throw new Error(Security.errorMessages.requiresAllow);\n    // Wrap transform, if provided\n    if (definition.transform) {\n      definition.transform = LocalCollection.wrapTransform(definition.transform);\n    }\n    Security.Rule.prototype[name] = function (arg) {\n      this._restrictions.push({\n        definition,\n        arg,\n      });\n      return this;\n    };\n  }\n};\n\nMongo.Collection.prototype.permit = function (types) {\n  return Security.permit(types).collections(this);\n};\n","Security.Rule = class {\n  constructor(types) {\n    if (!_.isArray(types)) types = [types];\n    this._types = types;\n    this._restrictions = [];\n  }\n\n  collections(collections) {\n    // Make sure the `collections` argument is either a `Mongo.Collection` instance or\n    // an array of them. If it's a single collection, convert it to a one-item array.\n    if (!_.isArray(collections)) collections = [collections];\n\n    // Keep list keyed by collection name\n    _.each(collections, collection => {\n      if (!(collection instanceof Mongo.Collection) &&\n          // CollectionFS has underlying collection on `files` property\n        !(collection.files instanceof Mongo.Collection)) {\n        throw new Error(Security.errorMessages.collectionsArg);\n      }\n      // CollectionFS has underlying collection on `files` property\n      const collectionName = getCollectionName(collection);\n      rulesByCollection[collectionName] = rulesByCollection[collectionName] || [];\n      rulesByCollection[collectionName].push(this);\n    });\n\n    this._collections = collections;\n\n    return this;\n  }\n\n  combinedFetch() {\n    // We need a combined `fetch` array. The `fetch` is optional and can be either an array\n    // or a function that takes the argument passed to the restriction method and returns an array.\n    let fetch = [];\n    _.every(this._restrictions, restriction => {\n      if (_.isArray(restriction.definition.fetch)) {\n        fetch = _.union(fetch, restriction.definition.fetch);\n      } else if (typeof restriction.definition.fetch === \"function\") {\n        fetch = _.union(fetch, restriction.definition.fetch(restriction.arg));\n      } else if (!restriction.definition.hasOwnProperty('fetch')) {\n        // If `fetch` property isn't present, we should fetch the full doc.\n        fetch = null;\n        return false; // Exit loop\n      }\n      return true;\n    });\n    return fetch;\n  }\n\n  allowInClientCode() {\n    if (!this._collections || !this._types) throw new Error(Security.errorMessages.noCollectionOrType);\n    ensureSecureDeny(this._collections, this._types);\n  }\n\n  allow(type, collection, userId, doc, modifier, ...args) {\n    let fields;\n    if (type === 'update') fields = computeChangedFieldsFromModifier(modifier);\n\n    // Loop through all defined restrictions. Restrictions are additive for this chained\n    // rule, so if any allow function returns false, this function should return false.\n    return _.every(this._restrictions, restriction => {\n      // Clone the doc in case we need to transform it. Transformations\n      // should apply to only the one restriction.\n      let loopDoc = _.clone(doc);\n\n      // If transform is a function, apply that\n      let transform = restriction.definition.transform;\n      if (transform !== null) {\n        transform = transform || collection._transform;\n        if (typeof transform === 'function') {\n          let addedRandomId = false;\n          if (type === 'insert' && !loopDoc._id) {\n            // The wrapped transform requires an _id, but we\n            // don't have access to the generatedId from Meteor API,\n            // so we'll fudge one and then remove it.\n            loopDoc._id = Random.id();\n            addedRandomId = true;\n          }\n          loopDoc = transform(loopDoc);\n          if (addedRandomId) delete loopDoc._id;\n        }\n      }\n\n      return restriction.definition.allow(type, restriction.arg, userId, loopDoc, fields, modifier, ...args);\n    });\n  }\n}\n\nfunction ensureSecureDeny(collections, types) {\n  // If we haven't yet done so, set up a default, permissive `allow` function for all of\n  // the given collections and types. We control all security through `deny` functions only, but\n  // there must first be at least one `allow` function for each collection or all writes\n  // will be denied.\n  ensureDefaultAllow(collections, types);\n\n  _.each(types, t => {\n    _.each(collections, collection => {\n      ensureCreated('deny', [collection], [t], null, function (...args) {\n        const userId = args.shift();\n\n        // If type is update, remove the `fields` argument. We will create our own\n        // for consistency.\n        if (t === 'update') args = [args[0], args[2]];\n\n        return !Security.can(userId)[t](...args).for(collection).check();\n      });\n    });\n  });\n}\n\nfunction computeChangedFieldsFromModifier(modifier) {\n  var fields = [];\n  // This is the same logic Meteor's mongo package uses in\n  // https://github.com/meteor/meteor/blob/devel/packages/mongo/collection.js\n  _.each(modifier, function (params) {\n    _.each(_.keys(params), function (field) {\n      // treat dotted fields as if they are replacing their\n      // top-level part\n      if (field.indexOf('.') !== -1)\n        field = field.substring(0, field.indexOf('.'));\n\n      // record the field we are trying to change\n      if (!_.contains(fields, field))\n        fields.push(field);\n    });\n  });\n  return fields;\n}\n","Security.Check = class {\n  constructor(userId) {\n    this.userId = userId || null;\n  }\n\n  for(collection) {\n    this.collection = collection;\n    this.collectionName = getCollectionName(collection);\n    return this;\n  }\n\n  insert(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'insert';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  update(doc, modifier, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'update';\n    this.doc = doc;\n    this.modifier = modifier;\n    this.args = args;\n    return this;\n  }\n\n  remove(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'remove';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  read(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'read';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  download(doc, ...args) {\n    if (this.type) throw new Error(Security.errorMessages.multipleCan);\n    this.type = 'download';\n    this.doc = doc;\n    this.args = args;\n    return this;\n  }\n\n  // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).check()\n  // Security.can(userId).update(id, modifier).for(MyCollection).check()\n  // Security.can(userId).remove(id).for(MyCollection).check()\n  check() {\n    // Select only those rules that apply to this operation type\n    const rules = getRulesForCollectionAndType(this.collectionName, this.type);\n\n    // If this.doc is an ID, we will look up the doc, fetching only the fields needed.\n    // To find out which fields are needed, we will combine all the `fetch` arrays from\n    // all the restrictions in all the rules.\n    if (typeof this.doc === 'string' || this.doc instanceof MongoID.ObjectID) {\n      let fields = {};\n      _.every(rules, rule => {\n        const fetch = rule.combinedFetch();\n        if (fetch === null) {\n          fields = null;\n          return false; // Exit loop\n        }\n        rule.combinedFetch().forEach(field => {\n          fields[field] = 1;\n        });\n        return true;\n      });\n\n      let options = {};\n      if (fields) {\n        if (_.isEmpty(fields)) {\n          options = {_id: 1};\n        } else {\n          options = {fields};\n        }\n      }\n      this.doc = this.collection.findOne(this.doc, options);\n    }\n\n    // Loop through all defined rules for this collection. There is an OR relationship among\n    // all rules for the collection, so if any \"allow\" function DO return true, we allow.\n    return _.any(rules, rule => rule.allow(this.type, this.collection, this.userId, this.doc, this.modifier, ...this.args));\n  }\n\n  // EXAMPLES:\n  // Security.can(userId).insert(doc).for(MyCollection).throw()\n  // Security.can(userId).update(id, modifier).for(MyCollection).throw()\n  // Security.can(userId).remove(id).for(MyCollection).throw()\n  throw() {\n    if (!this.check()) throw new Meteor.Error('access-denied', Security.errorMessages.notAllowed);\n  }\n}\n","/*\n * This file defines built-in restriction methods\n */\n\n/*\n * No one\n */\n\nSecurity.defineMethod(\"never\", {\n  fetch: [],\n  transform: null,\n  allow() {\n    return false;\n  },\n});\n\n/*\n * Logged In\n */\n\nSecurity.defineMethod(\"ifLoggedIn\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId) {\n    return !!userId;\n  },\n});\n\n/*\n * Specific User ID\n */\n\nSecurity.defineMethod(\"ifHasUserId\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId) {\n    return userId === arg;\n  },\n});\n\n/*\n * Specific Roles\n */\n\n/*\n * alanning:roles support\n */\nif (Package && Package[\"alanning:roles\"]) {\n\n  var Roles = Package[\"alanning:roles\"].Roles;\n\n  Security.defineMethod(\"ifHasRole\", {\n    fetch: [],\n    transform: null,\n    allow(type, arg, userId) {\n      if (!arg) throw new Error('ifHasRole security rule method requires an argument');\n      if (arg.role) {\n        return Roles.userIsInRole(userId, arg.role, arg.group);\n      } else {\n        return Roles.userIsInRole(userId, arg);\n      }\n    },\n  });\n\n}\n\n/*\n * nicolaslopezj:roles support\n * Note: doesn't support groups\n */\nif (Package && Package[\"nicolaslopezj:roles\"]) {\n\n  var Roles = Package[\"nicolaslopezj:roles\"].Roles;\n\n  Security.defineMethod(\"ifHasRole\", {\n    fetch: [],\n    transform: null,\n    allow(type, arg, userId) {\n      if (!arg) throw new Error('ifHasRole security rule method requires an argument');\n      return Roles.userHasRole(userId, arg);\n    }\n  });\n\n}\n\n/*\n * Specific Properties\n */\n\nSecurity.defineMethod(\"onlyProps\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId, doc, fieldNames) {\n    if (!_.isArray(arg)) arg = [arg];\n\n    fieldNames = fieldNames || _.keys(doc);\n\n    return _.every(fieldNames, function (fieldName) {\n      return _.contains(arg, fieldName);\n    });\n  },\n});\n\nSecurity.defineMethod(\"exceptProps\", {\n  fetch: [],\n  transform: null,\n  allow(type, arg, userId, doc, fieldNames) {\n    if (!_.isArray(arg)) arg = [arg];\n\n    fieldNames = fieldNames || _.keys(doc);\n\n    return !_.any(fieldNames, function (fieldName) {\n      return _.contains(arg, fieldName);\n    });\n  },\n});\n"]}}]