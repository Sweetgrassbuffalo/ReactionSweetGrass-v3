[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar later = Package['mrt:later'].later;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar __coffeescriptShare, Job, JobCollection;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/vsivsi_job-collection/job/src/job_class.coffee.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n                                                                                                                      //\nvar JobQueue,                                                                                                         // 9\n    _clearInterval,                                                                                                   // 9\n    _setImmediate,                                                                                                    // 9\n    _setInterval,                                                                                                     // 9\n    concatReduce,                                                                                                     // 9\n    isBoolean,                                                                                                        // 9\n    isInteger,                                                                                                        // 9\n    methodCall,                                                                                                       // 9\n    optionsHelp,                                                                                                      // 9\n    reduceCallbacks,                                                                                                  // 9\n    splitLongArray,                                                                                                   // 9\n    slice = [].slice,                                                                                                 // 9\n    indexOf = [].indexOf || function (item) {                                                                         // 9\n  for (var i = 0, l = this.length; i < l; i++) {                                                                      // 3\n    if (i in this && this[i] === item) return i;                                                                      // 3\n  }                                                                                                                   // 3\n                                                                                                                      //\n  return -1;                                                                                                          // 3\n};                                                                                                                    // 3\n                                                                                                                      //\nmethodCall = function (root, method, params, cb, after) {                                                             // 9\n  var apply, name, ref, ref1, ref2, ref3;                                                                             // 10\n                                                                                                                      //\n  if (after == null) {                                                                                                // 7\n    after = function (ret) {                                                                                          // 9\n      return ret;                                                                                                     // 9\n    };                                                                                                                // 9\n  }                                                                                                                   // 11\n                                                                                                                      //\n  apply = (ref = (ref1 = Job._ddp_apply) != null ? ref1[(ref2 = root.root) != null ? ref2 : root] : void 0) != null ? ref : Job._ddp_apply;\n                                                                                                                      //\n  if (typeof apply !== 'function') {                                                                                  // 11\n    throw new Error(\"Job remote method call error, no valid invocation method found.\");                               // 12\n  }                                                                                                                   // 15\n                                                                                                                      //\n  name = ((ref3 = root.root) != null ? ref3 : root) + \"_\" + method;                                                   // 13\n                                                                                                                      //\n  if (cb && typeof cb === 'function') {                                                                               // 14\n    return apply(name, params, function (_this) {                                                                     // 18\n      return function (err, res) {                                                                                    // 19\n        if (err) {                                                                                                    // 16\n          return cb(err);                                                                                             // 16\n        }                                                                                                             // 22\n                                                                                                                      //\n        return cb(null, after(res));                                                                                  // 23\n      };                                                                                                              // 15\n    }(this));                                                                                                         // 15\n  } else {                                                                                                            // 14\n    return after(apply(name, params));                                                                                // 19\n  }                                                                                                                   // 28\n};                                                                                                                    // 9\n                                                                                                                      //\noptionsHelp = function (options, cb) {                                                                                // 21\n  var ref;                                                                                                            // 23\n                                                                                                                      //\n  if (cb != null && typeof cb !== 'function') {                                                                       // 23\n    options = cb;                                                                                                     // 24\n    cb = void 0;                                                                                                      // 25\n  } else {                                                                                                            // 23\n    if (!((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) === 'object' && options instanceof Array && options.length < 2)) {\n      throw new Error('options... in optionsHelp must be an Array with zero or one elements');                        // 30\n    }                                                                                                                 // 39\n                                                                                                                      //\n    options = (ref = options != null ? options[0] : void 0) != null ? ref : {};                                       // 31\n  }                                                                                                                   // 41\n                                                                                                                      //\n  if ((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== 'object') {                               // 32\n    throw new Error('in optionsHelp options not an object or bad callback');                                          // 33\n  }                                                                                                                   // 44\n                                                                                                                      //\n  return [options, cb];                                                                                               // 34\n};                                                                                                                    // 21\n                                                                                                                      //\nsplitLongArray = function (arr, max) {                                                                                // 36\n  var i, k, ref, results;                                                                                             // 37\n                                                                                                                      //\n  if (!(arr instanceof Array && max > 0)) {                                                                           // 37\n    throw new Error('splitLongArray: bad params');                                                                    // 37\n  }                                                                                                                   // 52\n                                                                                                                      //\n  results = [];                                                                                                       // 38\n                                                                                                                      //\n  for (i = k = 0, ref = Math.ceil(arr.length / max); 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {        // 54\n    results.push(arr.slice(i * max, (i + 1) * max));                                                                  // 55\n  }                                                                                                                   // 38\n                                                                                                                      //\n  return results;                                                                                                     // 57\n};                                                                                                                    // 36\n                                                                                                                      //\nreduceCallbacks = function (cb, num, reduce, init) {                                                                  // 42\n  var cbCount, cbErr, cbRetVal;                                                                                       // 43\n                                                                                                                      //\n  if (reduce == null) {                                                                                               // 62\n    reduce = function (a, b) {                                                                                        // 42\n      return a || b;                                                                                                  // 64\n    };                                                                                                                // 42\n  }                                                                                                                   // 66\n                                                                                                                      //\n  if (init == null) {                                                                                                 // 67\n    init = false;                                                                                                     // 42\n  }                                                                                                                   // 69\n                                                                                                                      //\n  if (cb == null) {                                                                                                   // 43\n    return void 0;                                                                                                    // 43\n  }                                                                                                                   // 72\n                                                                                                                      //\n  if (!(typeof cb === 'function' && num > 0 && typeof reduce === 'function')) {                                       // 44\n    throw new Error('Bad params given to reduceCallbacks');                                                           // 45\n  }                                                                                                                   // 75\n                                                                                                                      //\n  cbRetVal = init;                                                                                                    // 46\n  cbCount = 0;                                                                                                        // 47\n  cbErr = null;                                                                                                       // 48\n  return function (err, res) {                                                                                        // 49\n    if (!cbErr) {                                                                                                     // 50\n      if (err) {                                                                                                      // 51\n        cbErr = err;                                                                                                  // 52\n        return cb(err);                                                                                               // 83\n      } else {                                                                                                        // 51\n        cbCount++;                                                                                                    // 55\n        cbRetVal = reduce(cbRetVal, res);                                                                             // 56\n                                                                                                                      //\n        if (cbCount === num) {                                                                                        // 57\n          return cb(null, cbRetVal);                                                                                  // 88\n        } else if (cbCount > num) {                                                                                   // 57\n          throw new Error(\"reduceCallbacks callback invoked more than requested \" + num + \" times\");                  // 60\n        }                                                                                                             // 51\n      }                                                                                                               // 50\n    }                                                                                                                 // 93\n  };                                                                                                                  // 49\n};                                                                                                                    // 42\n                                                                                                                      //\nconcatReduce = function (a, b) {                                                                                      // 62\n  if (!(a instanceof Array)) {                                                                                        // 63\n    a = [a];                                                                                                          // 63\n  }                                                                                                                   // 100\n                                                                                                                      //\n  return a.concat(b);                                                                                                 // 101\n};                                                                                                                    // 62\n                                                                                                                      //\nisInteger = function (i) {                                                                                            // 66\n  return typeof i === 'number' && Math.floor(i) === i;                                                                // 105\n};                                                                                                                    // 66\n                                                                                                                      //\nisBoolean = function (b) {                                                                                            // 68\n  return typeof b === 'boolean';                                                                                      // 109\n};                                                                                                                    // 68\n                                                                                                                      //\n_setImmediate = function () {                                                                                         // 71\n  var args, func;                                                                                                     // 72\n  func = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                                  // 71\n                                                                                                                      //\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.setTimeout : void 0) != null) {                      // 72\n    return Meteor.setTimeout.apply(Meteor, [func, 0].concat(slice.call(args)));                                       // 73\n  } else if (typeof setImmediate !== \"undefined\" && setImmediate !== null) {                                          // 72\n    return setImmediate.apply(null, [func].concat(slice.call(args)));                                                 // 75\n  } else {                                                                                                            // 74\n    return setTimeout.apply(null, [func, 0].concat(slice.call(args)));                                                // 78\n  }                                                                                                                   // 121\n};                                                                                                                    // 71\n                                                                                                                      //\n_setInterval = function () {                                                                                          // 80\n  var args, func, timeOut;                                                                                            // 81\n  func = arguments[0], timeOut = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];          // 80\n                                                                                                                      //\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.setInterval : void 0) != null) {                     // 81\n    return Meteor.setInterval.apply(Meteor, [func, timeOut].concat(slice.call(args)));                                // 82\n  } else {                                                                                                            // 81\n    return setInterval.apply(null, [func, timeOut].concat(slice.call(args)));                                         // 85\n  }                                                                                                                   // 131\n};                                                                                                                    // 80\n                                                                                                                      //\n_clearInterval = function (id) {                                                                                      // 87\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.clearInterval : void 0) != null) {                   // 88\n    return Meteor.clearInterval(id);                                                                                  // 89\n  } else {                                                                                                            // 88\n    return clearInterval(id);                                                                                         // 92\n  }                                                                                                                   // 139\n};                                                                                                                    // 87\n                                                                                                                      //\nJobQueue = function () {                                                                                              // 96\n  function JobQueue() {                                                                                               // 98\n    var k, options, ref, ref1, ref2, ref3, root1, type1, worker;                                                      // 99\n    root1 = arguments[0], type1 = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), worker = arguments[k++];\n    this.root = root1;                                                                                                // 98\n    this.type = type1;                                                                                                // 98\n    this.worker = worker;                                                                                             // 98\n                                                                                                                      //\n    if (!(this instanceof JobQueue)) {                                                                                // 99\n      return function (func, args, ctor) {                                                                            // 100\n        ctor.prototype = func.prototype;                                                                              // 151\n        var child = new ctor(),                                                                                       // 152\n            result = func.apply(child, args);                                                                         // 152\n        return Object(result) === result ? result : child;                                                            // 153\n      }(JobQueue, [this.root, this.type].concat(slice.call(options), [this.worker]), function () {});                 // 154\n    }                                                                                                                 // 155\n                                                                                                                      //\n    ref = optionsHelp(options, this.worker), options = ref[0], this.worker = ref[1];                                  // 101\n    this.pollInterval = options.pollInterval != null && !options.pollInterval ? Job.forever : !(options.pollInterval != null && isInteger(options.pollInterval)) ? 5000 : options.pollInterval;\n                                                                                                                      //\n    if (!(isInteger(this.pollInterval) && this.pollInterval >= 0)) {                                                  // 110\n      throw new Error(\"JobQueue: Invalid pollInterval, must be a positive integer\");                                  // 111\n    }                                                                                                                 // 160\n                                                                                                                      //\n    this.concurrency = (ref1 = options.concurrency) != null ? ref1 : 1;                                               // 113\n                                                                                                                      //\n    if (!(isInteger(this.concurrency) && this.concurrency >= 0)) {                                                    // 114\n      throw new Error(\"JobQueue: Invalid concurrency, must be a positive integer\");                                   // 115\n    }                                                                                                                 // 164\n                                                                                                                      //\n    this.payload = (ref2 = options.payload) != null ? ref2 : 1;                                                       // 117\n                                                                                                                      //\n    if (!(isInteger(this.payload) && this.payload >= 0)) {                                                            // 118\n      throw new Error(\"JobQueue: Invalid payload, must be a positive integer\");                                       // 119\n    }                                                                                                                 // 168\n                                                                                                                      //\n    this.prefetch = (ref3 = options.prefetch) != null ? ref3 : 0;                                                     // 121\n                                                                                                                      //\n    if (!(isInteger(this.prefetch) && this.prefetch >= 0)) {                                                          // 122\n      throw new Error(\"JobQueue: Invalid prefetch, must be a positive integer\");                                      // 123\n    }                                                                                                                 // 172\n                                                                                                                      //\n    this.workTimeout = options.workTimeout;                                                                           // 125\n                                                                                                                      //\n    if (this.workTimeout != null && !(isInteger(this.workTimeout) && this.workTimeout >= 0)) {                        // 126\n      throw new Error(\"JobQueue: Invalid workTimeout, must be a positive integer\");                                   // 127\n    }                                                                                                                 // 176\n                                                                                                                      //\n    this.callbackStrict = options.callbackStrict;                                                                     // 129\n                                                                                                                      //\n    if (this.callbackStrict != null && !isBoolean(this.callbackStrict)) {                                             // 130\n      throw new Error(\"JobQueue: Invalid callbackStrict, must be a boolean\");                                         // 131\n    }                                                                                                                 // 180\n                                                                                                                      //\n    this._workers = {};                                                                                               // 133\n    this._tasks = [];                                                                                                 // 134\n    this._taskNumber = 0;                                                                                             // 135\n    this._stoppingGetWork = void 0;                                                                                   // 136\n    this._stoppingTasks = void 0;                                                                                     // 137\n    this._interval = null;                                                                                            // 138\n    this._getWorkOutstanding = false;                                                                                 // 139\n    this.paused = true;                                                                                               // 140\n    this.resume();                                                                                                    // 141\n  }                                                                                                                   // 98\n                                                                                                                      //\n  JobQueue.prototype._getWork = function () {                                                                         // 192\n    var numJobsToGet, options;                                                                                        // 145\n                                                                                                                      //\n    if (!(this._getWorkOutstanding || this.paused)) {                                                                 // 145\n      numJobsToGet = this.prefetch + this.payload * (this.concurrency - this.running()) - this.length();              // 146\n                                                                                                                      //\n      if (numJobsToGet > 0) {                                                                                         // 147\n        this._getWorkOutstanding = true;                                                                              // 148\n        options = {                                                                                                   // 149\n          maxJobs: numJobsToGet                                                                                       // 149\n        };                                                                                                            // 149\n                                                                                                                      //\n        if (this.workTimeout != null) {                                                                               // 150\n          options.workTimeout = this.workTimeout;                                                                     // 150\n        }                                                                                                             // 203\n                                                                                                                      //\n        return Job.getWork(this.root, this.type, options, function (_this) {                                          // 204\n          return function (err, jobs) {                                                                               // 205\n            var j, k, len;                                                                                            // 152\n            _this._getWorkOutstanding = false;                                                                        // 152\n                                                                                                                      //\n            if (err) {                                                                                                // 153\n              return console.error(\"JobQueue: Received error from getWork(): \", err);                                 // 209\n            } else if (jobs != null && jobs instanceof Array) {                                                       // 153\n              if (jobs.length > numJobsToGet) {                                                                       // 156\n                console.error(\"JobQueue: getWork() returned jobs (\" + jobs.length + \") in excess of maxJobs (\" + numJobsToGet + \")\");\n              }                                                                                                       // 213\n                                                                                                                      //\n              for (k = 0, len = jobs.length; k < len; k++) {                                                          // 158\n                j = jobs[k];                                                                                          // 215\n                                                                                                                      //\n                _this._tasks.push(j);                                                                                 // 159\n                                                                                                                      //\n                if (_this._stoppingGetWork == null) {                                                                 // 160\n                  _setImmediate(_this._process.bind(_this));                                                          // 160\n                }                                                                                                     // 219\n              }                                                                                                       // 158\n                                                                                                                      //\n              if (_this._stoppingGetWork != null) {                                                                   // 161\n                return _this._stoppingGetWork();                                                                      // 222\n              }                                                                                                       // 155\n            } else {                                                                                                  // 155\n              return console.error(\"JobQueue: Nonarray response from server from getWork()\");                         // 225\n            }                                                                                                         // 226\n          };                                                                                                          // 151\n        }(this));                                                                                                     // 151\n      }                                                                                                               // 145\n    }                                                                                                                 // 230\n  };                                                                                                                  // 143\n                                                                                                                      //\n  JobQueue.prototype._only_once = function (fn) {                                                                     // 233\n    var called;                                                                                                       // 166\n    called = false;                                                                                                   // 166\n    return function (_this) {                                                                                         // 167\n      return function () {                                                                                            // 237\n        if (called) {                                                                                                 // 168\n          console.error(\"Worker callback called multiple times in JobQueue\");                                         // 169\n                                                                                                                      //\n          if (_this.callbackStrict) {                                                                                 // 170\n            throw new Error(\"JobQueue worker callback was invoked multiple times\");                                   // 171\n          }                                                                                                           // 168\n        }                                                                                                             // 243\n                                                                                                                      //\n        called = true;                                                                                                // 172\n        return fn.apply(_this, arguments);                                                                            // 245\n      };                                                                                                              // 167\n    }(this);                                                                                                          // 167\n  };                                                                                                                  // 165\n                                                                                                                      //\n  JobQueue.prototype._process = function () {                                                                         // 250\n    var cb, job, next;                                                                                                // 176\n                                                                                                                      //\n    if (!this.paused && this.running() < this.concurrency && this.length()) {                                         // 176\n      if (this.payload > 1) {                                                                                         // 177\n        job = this._tasks.splice(0, this.payload);                                                                    // 178\n      } else {                                                                                                        // 177\n        job = this._tasks.shift();                                                                                    // 180\n      }                                                                                                               // 257\n                                                                                                                      //\n      job._taskId = \"Task_\" + this._taskNumber++;                                                                     // 181\n      this._workers[job._taskId] = job;                                                                               // 182\n                                                                                                                      //\n      next = function (_this) {                                                                                       // 183\n        return function () {                                                                                          // 261\n          delete _this._workers[job._taskId];                                                                         // 184\n                                                                                                                      //\n          if (_this._stoppingTasks != null && _this.running() === 0 && _this.length() === 0) {                        // 185\n            return _this._stoppingTasks();                                                                            // 264\n          } else {                                                                                                    // 185\n            _setImmediate(_this._process.bind(_this));                                                                // 188\n                                                                                                                      //\n            return _setImmediate(_this._getWork.bind(_this));                                                         // 267\n          }                                                                                                           // 268\n        };                                                                                                            // 183\n      }(this);                                                                                                        // 183\n                                                                                                                      //\n      cb = this._only_once(next);                                                                                     // 190\n      return this.worker(job, cb);                                                                                    // 272\n    }                                                                                                                 // 273\n  };                                                                                                                  // 175\n                                                                                                                      //\n  JobQueue.prototype._stopGetWork = function (callback) {                                                             // 276\n    _clearInterval(this._interval);                                                                                   // 194\n                                                                                                                      //\n    this._interval = null;                                                                                            // 195\n                                                                                                                      //\n    if (this._getWorkOutstanding) {                                                                                   // 196\n      return this._stoppingGetWork = callback;                                                                        // 280\n    } else {                                                                                                          // 196\n      return _setImmediate(callback);                                                                                 // 282\n    }                                                                                                                 // 283\n  };                                                                                                                  // 193\n                                                                                                                      //\n  JobQueue.prototype._waitForTasks = function (callback) {                                                            // 286\n    if (this.running() !== 0) {                                                                                       // 202\n      return this._stoppingTasks = callback;                                                                          // 288\n    } else {                                                                                                          // 202\n      return _setImmediate(callback);                                                                                 // 290\n    }                                                                                                                 // 291\n  };                                                                                                                  // 201\n                                                                                                                      //\n  JobQueue.prototype._failJobs = function (tasks, callback) {                                                         // 294\n    var count, job, k, len, results;                                                                                  // 208\n                                                                                                                      //\n    if (tasks.length === 0) {                                                                                         // 208\n      _setImmediate(callback);                                                                                        // 208\n    }                                                                                                                 // 298\n                                                                                                                      //\n    count = 0;                                                                                                        // 209\n    results = [];                                                                                                     // 210\n                                                                                                                      //\n    for (k = 0, len = tasks.length; k < len; k++) {                                                                   // 301\n      job = tasks[k];                                                                                                 // 302\n      results.push(job.fail(\"Worker shutdown\", function (_this) {                                                     // 303\n        return function (err, res) {                                                                                  // 304\n          count++;                                                                                                    // 212\n                                                                                                                      //\n          if (count === tasks.length) {                                                                               // 213\n            return callback();                                                                                        // 307\n          }                                                                                                           // 308\n        };                                                                                                            // 211\n      }(this)));                                                                                                      // 211\n    }                                                                                                                 // 210\n                                                                                                                      //\n    return results;                                                                                                   // 312\n  };                                                                                                                  // 207\n                                                                                                                      //\n  JobQueue.prototype._hard = function (callback) {                                                                    // 315\n    this.paused = true;                                                                                               // 217\n    return this._stopGetWork(function (_this) {                                                                       // 317\n      return function () {                                                                                            // 318\n        var i, r, ref, tasks;                                                                                         // 219\n        tasks = _this._tasks;                                                                                         // 219\n        _this._tasks = [];                                                                                            // 220\n        ref = _this._workers;                                                                                         // 221\n                                                                                                                      //\n        for (i in meteorBabelHelpers.sanitizeForInObject(ref)) {                                                      // 221\n          r = ref[i];                                                                                                 // 324\n          tasks = tasks.concat(r);                                                                                    // 222\n        }                                                                                                             // 221\n                                                                                                                      //\n        return _this._failJobs(tasks, callback);                                                                      // 327\n      };                                                                                                              // 218\n    }(this));                                                                                                         // 218\n  };                                                                                                                  // 216\n                                                                                                                      //\n  JobQueue.prototype._stop = function (callback) {                                                                    // 332\n    this.paused = true;                                                                                               // 226\n    return this._stopGetWork(function (_this) {                                                                       // 334\n      return function () {                                                                                            // 335\n        var tasks;                                                                                                    // 228\n        tasks = _this._tasks;                                                                                         // 228\n        _this._tasks = [];                                                                                            // 229\n        return _this._waitForTasks(function () {                                                                      // 339\n          return _this._failJobs(tasks, callback);                                                                    // 340\n        });                                                                                                           // 230\n      };                                                                                                              // 227\n    }(this));                                                                                                         // 227\n  };                                                                                                                  // 225\n                                                                                                                      //\n  JobQueue.prototype._soft = function (callback) {                                                                    // 346\n    return this._stopGetWork(function (_this) {                                                                       // 347\n      return function () {                                                                                            // 348\n        return _this._waitForTasks(callback);                                                                         // 349\n      };                                                                                                              // 234\n    }(this));                                                                                                         // 234\n  };                                                                                                                  // 233\n                                                                                                                      //\n  JobQueue.prototype.length = function () {                                                                           // 354\n    return this._tasks.length;                                                                                        // 355\n  };                                                                                                                  // 237\n                                                                                                                      //\n  JobQueue.prototype.running = function () {                                                                          // 358\n    return Object.keys(this._workers).length;                                                                         // 359\n  };                                                                                                                  // 239\n                                                                                                                      //\n  JobQueue.prototype.idle = function () {                                                                             // 362\n    return this.length() + this.running() === 0;                                                                      // 363\n  };                                                                                                                  // 241\n                                                                                                                      //\n  JobQueue.prototype.full = function () {                                                                             // 366\n    return this.running() === this.concurrency;                                                                       // 367\n  };                                                                                                                  // 243\n                                                                                                                      //\n  JobQueue.prototype.pause = function () {                                                                            // 370\n    if (this.paused) {                                                                                                // 246\n      return;                                                                                                         // 246\n    }                                                                                                                 // 373\n                                                                                                                      //\n    if (!(this.pollInterval >= Job.forever)) {                                                                        // 247\n      _clearInterval(this._interval);                                                                                 // 248\n                                                                                                                      //\n      this._interval = null;                                                                                          // 249\n    }                                                                                                                 // 377\n                                                                                                                      //\n    this.paused = true;                                                                                               // 250\n    return this;                                                                                                      // 379\n  };                                                                                                                  // 245\n                                                                                                                      //\n  JobQueue.prototype.resume = function () {                                                                           // 382\n    var k, ref, w;                                                                                                    // 254\n                                                                                                                      //\n    if (!this.paused) {                                                                                               // 254\n      return;                                                                                                         // 254\n    }                                                                                                                 // 386\n                                                                                                                      //\n    this.paused = false;                                                                                              // 255\n                                                                                                                      //\n    _setImmediate(this._getWork.bind(this));                                                                          // 256\n                                                                                                                      //\n    if (!(this.pollInterval >= Job.forever)) {                                                                        // 257\n      this._interval = _setInterval(this._getWork.bind(this), this.pollInterval);                                     // 258\n    }                                                                                                                 // 391\n                                                                                                                      //\n    for (w = k = 1, ref = this.concurrency; 1 <= ref ? k <= ref : k >= ref; w = 1 <= ref ? ++k : --k) {               // 259\n      _setImmediate(this._process.bind(this));                                                                        // 260\n    }                                                                                                                 // 259\n                                                                                                                      //\n    return this;                                                                                                      // 395\n  };                                                                                                                  // 253\n                                                                                                                      //\n  JobQueue.prototype.trigger = function () {                                                                          // 398\n    if (this.paused) {                                                                                                // 264\n      return;                                                                                                         // 264\n    }                                                                                                                 // 401\n                                                                                                                      //\n    _setImmediate(this._getWork.bind(this));                                                                          // 265\n                                                                                                                      //\n    return this;                                                                                                      // 403\n  };                                                                                                                  // 263\n                                                                                                                      //\n  JobQueue.prototype.shutdown = function () {                                                                         // 406\n    var cb, k, options, ref;                                                                                          // 269\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 269\n                                                                                                                      //\n    if (options.level == null) {                                                                                      // 410\n      options.level = 'normal';                                                                                       // 270\n    }                                                                                                                 // 412\n                                                                                                                      //\n    if (options.quiet == null) {                                                                                      // 413\n      options.quiet = false;                                                                                          // 271\n    }                                                                                                                 // 415\n                                                                                                                      //\n    if (cb == null) {                                                                                                 // 272\n      if (!options.quiet) {                                                                                           // 273\n        console.warn(\"using default shutdown callback!\");                                                             // 273\n      }                                                                                                               // 419\n                                                                                                                      //\n      cb = function (_this) {                                                                                         // 274\n        return function () {                                                                                          // 421\n          return console.warn(\"Shutdown complete\");                                                                   // 422\n        };                                                                                                            // 274\n      }(this);                                                                                                        // 274\n    }                                                                                                                 // 425\n                                                                                                                      //\n    switch (options.level) {                                                                                          // 276\n      case 'hard':                                                                                                    // 276\n        if (!options.quiet) {                                                                                         // 278\n          console.warn(\"Shutting down hard\");                                                                         // 278\n        }                                                                                                             // 430\n                                                                                                                      //\n        return this._hard(cb);                                                                                        // 431\n                                                                                                                      //\n      case 'soft':                                                                                                    // 276\n        if (!options.quiet) {                                                                                         // 281\n          console.warn(\"Shutting down soft\");                                                                         // 281\n        }                                                                                                             // 435\n                                                                                                                      //\n        return this._soft(cb);                                                                                        // 436\n                                                                                                                      //\n      default:                                                                                                        // 276\n        if (!options.quiet) {                                                                                         // 284\n          console.warn(\"Shutting down normally\");                                                                     // 284\n        }                                                                                                             // 440\n                                                                                                                      //\n        return this._stop(cb);                                                                                        // 441\n    }                                                                                                                 // 276\n  };                                                                                                                  // 268\n                                                                                                                      //\n  return JobQueue;                                                                                                    // 445\n}();                                                                                                                  // 447\n                                                                                                                      //\nJob = function () {                                                                                                   // 289\n  Job.forever = 9007199254740992;                                                                                     // 292\n  Job.foreverDate = new Date(8640000000000000);                                                                       // 295\n  Job.jobPriorities = {                                                                                               // 297\n    low: 10,                                                                                                          // 298\n    normal: 0,                                                                                                        // 299\n    medium: -5,                                                                                                       // 300\n    high: -10,                                                                                                        // 301\n    critical: -15                                                                                                     // 302\n  };                                                                                                                  // 298\n  Job.jobRetryBackoffMethods = ['constant', 'exponential'];                                                           // 304\n  Job.jobStatuses = ['waiting', 'paused', 'ready', 'running', 'failed', 'cancelled', 'completed'];                    // 306\n  Job.jobLogLevels = ['info', 'success', 'warning', 'danger'];                                                        // 309\n  Job.jobStatusCancellable = ['running', 'ready', 'waiting', 'paused'];                                               // 311\n  Job.jobStatusPausable = ['ready', 'waiting'];                                                                       // 312\n  Job.jobStatusRemovable = ['cancelled', 'completed', 'failed'];                                                      // 313\n  Job.jobStatusRestartable = ['cancelled', 'failed'];                                                                 // 314\n  Job.ddpMethods = ['startJobs', 'stopJobs', 'startJobServer', 'shutdownJobServer', 'jobRemove', 'jobPause', 'jobResume', 'jobReady', 'jobCancel', 'jobRestart', 'jobSave', 'jobRerun', 'getWork', 'getJob', 'jobLog', 'jobProgress', 'jobDone', 'jobFail'];\n  Job.ddpPermissionLevels = ['admin', 'manager', 'creator', 'worker'];                                                // 322\n  Job.ddpMethodPermissions = {                                                                                        // 325\n    'startJobs': ['startJobs', 'admin'],                                                                              // 326\n    'stopJobs': ['stopJobs', 'admin'],                                                                                // 327\n    'startJobServer': ['startJobServer', 'admin'],                                                                    // 328\n    'shutdownJobServer': ['shutdownJobServer', 'admin'],                                                              // 329\n    'jobRemove': ['jobRemove', 'admin', 'manager'],                                                                   // 330\n    'jobPause': ['jobPause', 'admin', 'manager'],                                                                     // 331\n    'jobResume': ['jobResume', 'admin', 'manager'],                                                                   // 332\n    'jobCancel': ['jobCancel', 'admin', 'manager'],                                                                   // 333\n    'jobReady': ['jobReady', 'admin', 'manager'],                                                                     // 334\n    'jobRestart': ['jobRestart', 'admin', 'manager'],                                                                 // 335\n    'jobSave': ['jobSave', 'admin', 'creator'],                                                                       // 336\n    'jobRerun': ['jobRerun', 'admin', 'creator'],                                                                     // 337\n    'getWork': ['getWork', 'admin', 'worker'],                                                                        // 338\n    'getJob': ['getJob', 'admin', 'worker'],                                                                          // 339\n    'jobLog': ['jobLog', 'admin', 'worker'],                                                                          // 340\n    'jobProgress': ['jobProgress', 'admin', 'worker'],                                                                // 341\n    'jobDone': ['jobDone', 'admin', 'worker'],                                                                        // 342\n    'jobFail': ['jobFail', 'admin', 'worker']                                                                         // 343\n  };                                                                                                                  // 326\n  Job._ddp_apply = void 0;                                                                                            // 346\n                                                                                                                      //\n  Job._setDDPApply = function (apply, collectionName) {                                                               // 350\n    if (typeof apply === 'function') {                                                                                // 351\n      if (typeof collectionName === 'string') {                                                                       // 352\n        if (this._ddp_apply == null) {                                                                                // 506\n          this._ddp_apply = {};                                                                                       // 353\n        }                                                                                                             // 508\n                                                                                                                      //\n        if (typeof this._ddp_apply === 'function') {                                                                  // 354\n          throw new Error(\"Job.setDDP must specify a collection name each time if called more than once.\");           // 355\n        }                                                                                                             // 511\n                                                                                                                      //\n        return this._ddp_apply[collectionName] = apply;                                                               // 512\n      } else if (!this._ddp_apply) {                                                                                  // 352\n        return this._ddp_apply = apply;                                                                               // 514\n      } else {                                                                                                        // 357\n        throw new Error(\"Job.setDDP must specify a collection name each time if called more than once.\");             // 360\n      }                                                                                                               // 351\n    } else {                                                                                                          // 351\n      throw new Error(\"Bad function in Job.setDDPApply()\");                                                           // 362\n    }                                                                                                                 // 520\n  };                                                                                                                  // 350\n                                                                                                                      //\n  Job.setDDP = function (ddp, collectionNames, Fiber) {                                                               // 365\n    var collName, k, len, results;                                                                                    // 366\n                                                                                                                      //\n    if (ddp == null) {                                                                                                // 525\n      ddp = null;                                                                                                     // 365\n    }                                                                                                                 // 527\n                                                                                                                      //\n    if (collectionNames == null) {                                                                                    // 528\n      collectionNames = null;                                                                                         // 365\n    }                                                                                                                 // 530\n                                                                                                                      //\n    if (Fiber == null) {                                                                                              // 531\n      Fiber = null;                                                                                                   // 365\n    }                                                                                                                 // 533\n                                                                                                                      //\n    if (!(typeof collectionNames === 'string' || collectionNames instanceof Array)) {                                 // 366\n      Fiber = collectionNames;                                                                                        // 368\n      collectionNames = [void 0];                                                                                     // 369\n    } else if (typeof collectionNames === 'string') {                                                                 // 366\n      collectionNames = [collectionNames];                                                                            // 372\n    }                                                                                                                 // 539\n                                                                                                                      //\n    results = [];                                                                                                     // 373\n                                                                                                                      //\n    for (k = 0, len = collectionNames.length; k < len; k++) {                                                         // 541\n      collName = collectionNames[k];                                                                                  // 542\n                                                                                                                      //\n      if (!(ddp != null && ddp.close != null && ddp.subscribe != null)) {                                             // 374\n        if (ddp === null && (typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.apply : void 0) != null) {     // 376\n          results.push(this._setDDPApply(Meteor.apply, collName));                                                    // 545\n        } else {                                                                                                      // 376\n          throw new Error(\"Bad ddp object in Job.setDDP()\");                                                          // 381\n        }                                                                                                             // 374\n      } else if (ddp.observe == null) {                                                                               // 374\n        results.push(this._setDDPApply(ddp.apply.bind(ddp), collName));                                               // 550\n      } else {                                                                                                        // 382\n        if (Fiber == null) {                                                                                          // 385\n          results.push(this._setDDPApply(ddp.call.bind(ddp), collName));                                              // 553\n        } else {                                                                                                      // 385\n          results.push(this._setDDPApply(function (name, params, cb) {                                                // 555\n            var fib;                                                                                                  // 391\n            fib = Fiber.current;                                                                                      // 391\n            ddp.call(name, params, function (err, res) {                                                              // 392\n              if (cb != null && typeof cb === 'function') {                                                           // 393\n                return cb(err, res);                                                                                  // 560\n              } else {                                                                                                // 393\n                if (err) {                                                                                            // 396\n                  return fib.throwInto(err);                                                                          // 563\n                } else {                                                                                              // 396\n                  return fib.run(res);                                                                                // 565\n                }                                                                                                     // 393\n              }                                                                                                       // 567\n            });                                                                                                       // 392\n                                                                                                                      //\n            if (cb != null && typeof cb === 'function') {} else {                                                     // 400\n              return Fiber[\"yield\"]();                                                                                // 403\n            }                                                                                                         // 573\n          }, collName));                                                                                              // 390\n        }                                                                                                             // 382\n      }                                                                                                               // 576\n    }                                                                                                                 // 373\n                                                                                                                      //\n    return results;                                                                                                   // 578\n  };                                                                                                                  // 365\n                                                                                                                      //\n  Job.getWork = function () {                                                                                         // 409\n    var cb, k, options, ref, root, type;                                                                              // 410\n    root = arguments[0], type = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 410\n                                                                                                                      //\n    if (typeof type === 'string') {                                                                                   // 411\n      type = [type];                                                                                                  // 411\n    }                                                                                                                 // 587\n                                                                                                                      //\n    if (options.workTimeout != null) {                                                                                // 412\n      if (!(isInteger(options.workTimeout) && options.workTimeout > 0)) {                                             // 413\n        throw new Error('getWork: workTimeout must be a positive integer');                                           // 414\n      }                                                                                                               // 412\n    }                                                                                                                 // 592\n                                                                                                                      //\n    return methodCall(root, \"getWork\", [type, options], cb, function (_this) {                                        // 593\n      return function (res) {                                                                                         // 594\n        var doc, jobs;                                                                                                // 416\n                                                                                                                      //\n        jobs = function () {                                                                                          // 416\n          var l, len, results;                                                                                        // 597\n          results = [];                                                                                               // 416\n                                                                                                                      //\n          for (l = 0, len = res.length; l < len; l++) {                                                               // 599\n            doc = res[l];                                                                                             // 600\n            results.push(new Job(root, doc));                                                                         // 601\n          }                                                                                                           // 416\n                                                                                                                      //\n          return results;                                                                                             // 603\n        }() || [];                                                                                                    // 604\n                                                                                                                      //\n        if (options.maxJobs != null) {                                                                                // 417\n          return jobs;                                                                                                // 418\n        } else {                                                                                                      // 417\n          return jobs[0];                                                                                             // 420\n        }                                                                                                             // 609\n      };                                                                                                              // 415\n    }(this));                                                                                                         // 415\n  };                                                                                                                  // 409\n                                                                                                                      //\n  Job.processJobs = JobQueue;                                                                                         // 423\n                                                                                                                      //\n  Job.makeJob = function () {                                                                                         // 427\n    var depFlag;                                                                                                      // 428\n    depFlag = false;                                                                                                  // 428\n    return function (root, doc) {                                                                                     // 619\n      if (!depFlag) {                                                                                                 // 430\n        depFlag = true;                                                                                               // 431\n        console.warn(\"Job.makeJob(root, jobDoc) has been deprecated and will be removed in a future release, use 'new Job(root, jobDoc)' instead.\");\n      }                                                                                                               // 623\n                                                                                                                      //\n      return new Job(root, doc);                                                                                      // 624\n    };                                                                                                                // 429\n  }();                                                                                                                // 427\n                                                                                                                      //\n  Job.getJob = function () {                                                                                          // 437\n    var cb, id, k, options, ref, root;                                                                                // 438\n    root = arguments[0], id = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 438\n                                                                                                                      //\n    if (options.getLog == null) {                                                                                     // 632\n      options.getLog = false;                                                                                         // 439\n    }                                                                                                                 // 634\n                                                                                                                      //\n    return methodCall(root, \"getJob\", [id, options], cb, function (_this) {                                           // 635\n      return function (doc) {                                                                                         // 636\n        if (doc) {                                                                                                    // 441\n          return new Job(root, doc);                                                                                  // 638\n        } else {                                                                                                      // 441\n          return void 0;                                                                                              // 640\n        }                                                                                                             // 641\n      };                                                                                                              // 440\n    }(this));                                                                                                         // 440\n  };                                                                                                                  // 437\n                                                                                                                      //\n  Job.getJobs = function () {                                                                                         // 447\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 448\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 448\n                                                                                                                      //\n    if (options.getLog == null) {                                                                                     // 650\n      options.getLog = false;                                                                                         // 449\n    }                                                                                                                 // 652\n                                                                                                                      //\n    retVal = [];                                                                                                      // 450\n    chunksOfIds = splitLongArray(ids, 32);                                                                            // 451\n    myCb = reduceCallbacks(cb, chunksOfIds.length, concatReduce, []);                                                 // 452\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 453\n      chunkOfIds = chunksOfIds[l];                                                                                    // 657\n      retVal = retVal.concat(methodCall(root, \"getJob\", [chunkOfIds, options], myCb, function (_this) {               // 454\n        return function (doc) {                                                                                       // 659\n          var d, len1, m, results;                                                                                    // 455\n                                                                                                                      //\n          if (doc) {                                                                                                  // 455\n            results = [];                                                                                             // 456\n                                                                                                                      //\n            for (m = 0, len1 = doc.length; m < len1; m++) {                                                           // 663\n              d = doc[m];                                                                                             // 664\n              results.push(new Job(root, d.type, d.data, d));                                                         // 665\n            }                                                                                                         // 456\n                                                                                                                      //\n            return results;                                                                                           // 667\n          } else {                                                                                                    // 455\n            return null;                                                                                              // 669\n          }                                                                                                           // 670\n        };                                                                                                            // 454\n      }(this)));                                                                                                      // 454\n    }                                                                                                                 // 453\n                                                                                                                      //\n    return retVal;                                                                                                    // 459\n  };                                                                                                                  // 447\n                                                                                                                      //\n  Job.pauseJobs = function () {                                                                                       // 463\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 464\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 464\n    retVal = false;                                                                                                   // 465\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 466\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 467\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 468\n      chunkOfIds = chunksOfIds[l];                                                                                    // 685\n      retVal = methodCall(root, \"jobPause\", [chunkOfIds, options], myCb) || retVal;                                   // 469\n    }                                                                                                                 // 468\n                                                                                                                      //\n    return retVal;                                                                                                    // 470\n  };                                                                                                                  // 463\n                                                                                                                      //\n  Job.resumeJobs = function () {                                                                                      // 474\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 475\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 475\n    retVal = false;                                                                                                   // 476\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 477\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 478\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 479\n      chunkOfIds = chunksOfIds[l];                                                                                    // 699\n      retVal = methodCall(root, \"jobResume\", [chunkOfIds, options], myCb) || retVal;                                  // 480\n    }                                                                                                                 // 479\n                                                                                                                      //\n    return retVal;                                                                                                    // 481\n  };                                                                                                                  // 474\n                                                                                                                      //\n  Job.readyJobs = function () {                                                                                       // 485\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 486\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n                                                                                                                      //\n    if (ids == null) {                                                                                                // 708\n      ids = [];                                                                                                       // 485\n    }                                                                                                                 // 710\n                                                                                                                      //\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 486\n                                                                                                                      //\n    if (options.force == null) {                                                                                      // 712\n      options.force = false;                                                                                          // 487\n    }                                                                                                                 // 714\n                                                                                                                      //\n    retVal = false;                                                                                                   // 488\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 489\n                                                                                                                      //\n    if (!(chunksOfIds.length > 0)) {                                                                                  // 490\n      chunksOfIds = [[]];                                                                                             // 490\n    }                                                                                                                 // 719\n                                                                                                                      //\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 491\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 492\n      chunkOfIds = chunksOfIds[l];                                                                                    // 722\n      retVal = methodCall(root, \"jobReady\", [chunkOfIds, options], myCb) || retVal;                                   // 493\n    }                                                                                                                 // 492\n                                                                                                                      //\n    return retVal;                                                                                                    // 494\n  };                                                                                                                  // 485\n                                                                                                                      //\n  Job.cancelJobs = function () {                                                                                      // 497\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 498\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 498\n                                                                                                                      //\n    if (options.antecedents == null) {                                                                                // 732\n      options.antecedents = true;                                                                                     // 499\n    }                                                                                                                 // 734\n                                                                                                                      //\n    retVal = false;                                                                                                   // 500\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 501\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 502\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 503\n      chunkOfIds = chunksOfIds[l];                                                                                    // 739\n      retVal = methodCall(root, \"jobCancel\", [chunkOfIds, options], myCb) || retVal;                                  // 504\n    }                                                                                                                 // 503\n                                                                                                                      //\n    return retVal;                                                                                                    // 505\n  };                                                                                                                  // 497\n                                                                                                                      //\n  Job.restartJobs = function () {                                                                                     // 508\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 509\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 509\n                                                                                                                      //\n    if (options.retries == null) {                                                                                    // 749\n      options.retries = 1;                                                                                            // 510\n    }                                                                                                                 // 751\n                                                                                                                      //\n    if (options.dependents == null) {                                                                                 // 752\n      options.dependents = true;                                                                                      // 511\n    }                                                                                                                 // 754\n                                                                                                                      //\n    retVal = false;                                                                                                   // 512\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 513\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 514\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 515\n      chunkOfIds = chunksOfIds[l];                                                                                    // 759\n      retVal = methodCall(root, \"jobRestart\", [chunkOfIds, options], myCb) || retVal;                                 // 516\n    }                                                                                                                 // 515\n                                                                                                                      //\n    return retVal;                                                                                                    // 517\n  };                                                                                                                  // 508\n                                                                                                                      //\n  Job.removeJobs = function () {                                                                                      // 520\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;                                // 521\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 521\n    retVal = false;                                                                                                   // 522\n    chunksOfIds = splitLongArray(ids, 256);                                                                           // 523\n    myCb = reduceCallbacks(cb, chunksOfIds.length);                                                                   // 524\n                                                                                                                      //\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {                                                             // 525\n      chunkOfIds = chunksOfIds[l];                                                                                    // 773\n      retVal = methodCall(root, \"jobRemove\", [chunkOfIds, options], myCb) || retVal;                                  // 526\n    }                                                                                                                 // 525\n                                                                                                                      //\n    return retVal;                                                                                                    // 527\n  };                                                                                                                  // 520\n                                                                                                                      //\n  Job.startJobs = function () {                                                                                       // 531\n    var cb, k, options, ref, root;                                                                                    // 532\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 532\n    return methodCall(root, \"startJobs\", [options], cb);                                                              // 783\n  };                                                                                                                  // 531\n                                                                                                                      //\n  Job.stopJobs = function () {                                                                                        // 537\n    var cb, k, options, ref, root;                                                                                    // 538\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 538\n                                                                                                                      //\n    if (options.timeout == null) {                                                                                    // 790\n      options.timeout = 60 * 1000;                                                                                    // 539\n    }                                                                                                                 // 792\n                                                                                                                      //\n    return methodCall(root, \"stopJobs\", [options], cb);                                                               // 793\n  };                                                                                                                  // 537\n                                                                                                                      //\n  Job.startJobServer = function () {                                                                                  // 543\n    var cb, k, options, ref, root;                                                                                    // 544\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 544\n    return methodCall(root, \"startJobServer\", [options], cb);                                                         // 800\n  };                                                                                                                  // 543\n                                                                                                                      //\n  Job.shutdownJobServer = function () {                                                                               // 548\n    var cb, k, options, ref, root;                                                                                    // 549\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 549\n                                                                                                                      //\n    if (options.timeout == null) {                                                                                    // 807\n      options.timeout = 60 * 1000;                                                                                    // 550\n    }                                                                                                                 // 809\n                                                                                                                      //\n    return methodCall(root, \"shutdownJobServer\", [options], cb);                                                      // 810\n  };                                                                                                                  // 548\n                                                                                                                      //\n  function Job(root1, type, data) {                                                                                   // 554\n    var doc, ref, time;                                                                                               // 555\n    this.root = root1;                                                                                                // 554\n                                                                                                                      //\n    if (!(this instanceof Job)) {                                                                                     // 555\n      return new Job(this.root, type, data);                                                                          // 556\n    }                                                                                                                 // 818\n                                                                                                                      //\n    this._root = this.root;                                                                                           // 559\n                                                                                                                      //\n    if (((ref = this.root) != null ? ref.root : void 0) != null && typeof this.root.root === 'string') {              // 562\n      this.root = this._root.root;                                                                                    // 563\n    }                                                                                                                 // 822\n                                                                                                                      //\n    if (data == null && (type != null ? type.data : void 0) != null && (type != null ? type.type : void 0) != null) {\n      if (type instanceof Job) {                                                                                      // 567\n        return type;                                                                                                  // 568\n      }                                                                                                               // 826\n                                                                                                                      //\n      doc = type;                                                                                                     // 570\n      data = doc.data;                                                                                                // 571\n      type = doc.type;                                                                                                // 572\n    } else {                                                                                                          // 566\n      doc = {};                                                                                                       // 574\n    }                                                                                                                 // 832\n                                                                                                                      //\n    if (!((typeof doc === \"undefined\" ? \"undefined\" : _typeof(doc)) === 'object' && (typeof data === \"undefined\" ? \"undefined\" : _typeof(data)) === 'object' && typeof type === 'string' && typeof this.root === 'string')) {\n      throw new Error(\"new Job: bad parameter(s), \" + this.root + \" (\" + _typeof(this.root) + \"), \" + type + \" (\" + (typeof type === \"undefined\" ? \"undefined\" : _typeof(type)) + \"), \" + data + \" (\" + (typeof data === \"undefined\" ? \"undefined\" : _typeof(data)) + \"), \" + doc + \" (\" + (typeof doc === \"undefined\" ? \"undefined\" : _typeof(doc)) + \")\");\n    } else if (doc.type != null && doc.data != null) {                                                                // 576\n      this._doc = doc;                                                                                                // 583\n    } else {                                                                                                          // 582\n      time = new Date();                                                                                              // 586\n      this._doc = {                                                                                                   // 587\n        runId: null,                                                                                                  // 588\n        type: type,                                                                                                   // 589\n        data: data,                                                                                                   // 590\n        status: 'waiting',                                                                                            // 591\n        updated: time,                                                                                                // 592\n        created: time                                                                                                 // 593\n      };                                                                                                              // 588\n      this.priority().retry().repeat().after().progress().depends().log(\"Constructed\");                               // 594\n    }                                                                                                                 // 848\n                                                                                                                      //\n    return this;                                                                                                      // 596\n  }                                                                                                                   // 554\n                                                                                                                      //\n  Job.prototype._echo = function (message, level) {                                                                   // 852\n    if (level == null) {                                                                                              // 853\n      level = null;                                                                                                   // 599\n    }                                                                                                                 // 855\n                                                                                                                      //\n    switch (level) {                                                                                                  // 600\n      case 'danger':                                                                                                  // 600\n        console.error(message);                                                                                       // 601\n        break;                                                                                                        // 601\n                                                                                                                      //\n      case 'warning':                                                                                                 // 600\n        console.warn(message);                                                                                        // 602\n        break;                                                                                                        // 602\n                                                                                                                      //\n      case 'success':                                                                                                 // 600\n        console.log(message);                                                                                         // 603\n        break;                                                                                                        // 603\n                                                                                                                      //\n      default:                                                                                                        // 600\n        console.info(message);                                                                                        // 604\n    }                                                                                                                 // 600\n  };                                                                                                                  // 599\n                                                                                                                      //\n  Job.prototype.depends = function (jobs) {                                                                           // 871\n    var depends, j, k, len;                                                                                           // 610\n                                                                                                                      //\n    if (jobs) {                                                                                                       // 610\n      if (jobs instanceof Job) {                                                                                      // 611\n        jobs = [jobs];                                                                                                // 612\n      }                                                                                                               // 876\n                                                                                                                      //\n      if (jobs instanceof Array) {                                                                                    // 613\n        depends = this._doc.depends;                                                                                  // 614\n                                                                                                                      //\n        for (k = 0, len = jobs.length; k < len; k++) {                                                                // 615\n          j = jobs[k];                                                                                                // 880\n                                                                                                                      //\n          if (!(j instanceof Job && j._doc._id != null)) {                                                            // 616\n            throw new Error('Each provided object must be a saved Job instance (with an _id)');                       // 617\n          }                                                                                                           // 883\n                                                                                                                      //\n          depends.push(j._doc._id);                                                                                   // 618\n        }                                                                                                             // 613\n      } else {                                                                                                        // 613\n        throw new Error('Bad input parameter: depends() accepts a falsy value, or Job or array of Jobs');             // 620\n      }                                                                                                               // 610\n    } else {                                                                                                          // 610\n      depends = [];                                                                                                   // 622\n    }                                                                                                                 // 891\n                                                                                                                      //\n    this._doc.depends = depends;                                                                                      // 623\n    this._doc.resolved = [];                                                                                          // 624\n    return this;                                                                                                      // 625\n  };                                                                                                                  // 609\n                                                                                                                      //\n  Job.prototype.priority = function (level) {                                                                         // 897\n    var priority;                                                                                                     // 629\n                                                                                                                      //\n    if (level == null) {                                                                                              // 899\n      level = 0;                                                                                                      // 628\n    }                                                                                                                 // 901\n                                                                                                                      //\n    if (typeof level === 'string') {                                                                                  // 629\n      priority = Job.jobPriorities[level];                                                                            // 630\n                                                                                                                      //\n      if (priority == null) {                                                                                         // 631\n        throw new Error('Invalid string priority level provided');                                                    // 632\n      }                                                                                                               // 629\n    } else if (isInteger(level)) {                                                                                    // 629\n      priority = level;                                                                                               // 634\n    } else {                                                                                                          // 633\n      throw new Error('priority must be an integer or valid priority level');                                         // 636\n      priority = 0;                                                                                                   // 637\n    }                                                                                                                 // 912\n                                                                                                                      //\n    this._doc.priority = priority;                                                                                    // 638\n    return this;                                                                                                      // 639\n  };                                                                                                                  // 628\n                                                                                                                      //\n  Job.prototype.retry = function (options) {                                                                          // 917\n    var base, ref;                                                                                                    // 645\n                                                                                                                      //\n    if (options == null) {                                                                                            // 919\n      options = 0;                                                                                                    // 644\n    }                                                                                                                 // 921\n                                                                                                                      //\n    if (isInteger(options) && options >= 0) {                                                                         // 645\n      options = {                                                                                                     // 646\n        retries: options                                                                                              // 646\n      };                                                                                                              // 646\n    }                                                                                                                 // 926\n                                                                                                                      //\n    if ((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== 'object') {                             // 647\n      throw new Error('bad parameter: accepts either an integer >= 0 or an options object');                          // 648\n    }                                                                                                                 // 929\n                                                                                                                      //\n    if (options.retries != null) {                                                                                    // 649\n      if (!(isInteger(options.retries) && options.retries >= 0)) {                                                    // 650\n        throw new Error('bad option: retries must be an integer >= 0');                                               // 651\n      }                                                                                                               // 933\n                                                                                                                      //\n      options.retries++;                                                                                              // 652\n    } else {                                                                                                          // 649\n      options.retries = Job.forever;                                                                                  // 654\n    }                                                                                                                 // 937\n                                                                                                                      //\n    if (options.until != null) {                                                                                      // 655\n      if (!(options.until instanceof Date)) {                                                                         // 656\n        throw new Error('bad option: until must be a Date object');                                                   // 657\n      }                                                                                                               // 655\n    } else {                                                                                                          // 655\n      options.until = Job.foreverDate;                                                                                // 659\n    }                                                                                                                 // 944\n                                                                                                                      //\n    if (options.wait != null) {                                                                                       // 660\n      if (!(isInteger(options.wait) && options.wait >= 0)) {                                                          // 661\n        throw new Error('bad option: wait must be an integer >= 0');                                                  // 662\n      }                                                                                                               // 660\n    } else {                                                                                                          // 660\n      options.wait = 5 * 60 * 1000;                                                                                   // 664\n    }                                                                                                                 // 951\n                                                                                                                      //\n    if (options.backoff != null) {                                                                                    // 665\n      if (ref = options.backoff, indexOf.call(Job.jobRetryBackoffMethods, ref) < 0) {                                 // 666\n        throw new Error('bad option: invalid retry backoff method');                                                  // 667\n      }                                                                                                               // 665\n    } else {                                                                                                          // 665\n      options.backoff = 'constant';                                                                                   // 669\n    }                                                                                                                 // 958\n                                                                                                                      //\n    this._doc.retries = options.retries;                                                                              // 671\n    this._doc.repeatRetries = options.retries;                                                                        // 672\n    this._doc.retryWait = options.wait;                                                                               // 673\n                                                                                                                      //\n    if ((base = this._doc).retried == null) {                                                                         // 962\n      base.retried = 0;                                                                                               // 963\n    }                                                                                                                 // 964\n                                                                                                                      //\n    this._doc.retryBackoff = options.backoff;                                                                         // 675\n    this._doc.retryUntil = options.until;                                                                             // 676\n    return this;                                                                                                      // 677\n  };                                                                                                                  // 644\n                                                                                                                      //\n  Job.prototype.repeat = function (options) {                                                                         // 970\n    var base, ref;                                                                                                    // 683\n                                                                                                                      //\n    if (options == null) {                                                                                            // 972\n      options = 0;                                                                                                    // 682\n    }                                                                                                                 // 974\n                                                                                                                      //\n    if (isInteger(options) && options >= 0) {                                                                         // 683\n      options = {                                                                                                     // 684\n        repeats: options                                                                                              // 684\n      };                                                                                                              // 684\n    }                                                                                                                 // 979\n                                                                                                                      //\n    if ((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== 'object') {                             // 685\n      throw new Error('bad parameter: accepts either an integer >= 0 or an options object');                          // 686\n    }                                                                                                                 // 982\n                                                                                                                      //\n    if (options.wait != null && options.schedule != null) {                                                           // 687\n      throw new Error('bad options: wait and schedule options are mutually exclusive');                               // 688\n    }                                                                                                                 // 985\n                                                                                                                      //\n    if (options.repeats != null) {                                                                                    // 689\n      if (!(isInteger(options.repeats) && options.repeats >= 0)) {                                                    // 690\n        throw new Error('bad option: repeats must be an integer >= 0');                                               // 691\n      }                                                                                                               // 689\n    } else {                                                                                                          // 689\n      options.repeats = Job.forever;                                                                                  // 693\n    }                                                                                                                 // 992\n                                                                                                                      //\n    if (options.until != null) {                                                                                      // 694\n      if (!(options.until instanceof Date)) {                                                                         // 695\n        throw new Error('bad option: until must be a Date object');                                                   // 696\n      }                                                                                                               // 694\n    } else {                                                                                                          // 694\n      options.until = Job.foreverDate;                                                                                // 698\n    }                                                                                                                 // 999\n                                                                                                                      //\n    if (options.wait != null) {                                                                                       // 699\n      if (!(isInteger(options.wait) && options.wait >= 0)) {                                                          // 700\n        throw new Error('bad option: wait must be an integer >= 0');                                                  // 701\n      }                                                                                                               // 699\n    } else {                                                                                                          // 699\n      options.wait = 5 * 60 * 1000;                                                                                   // 703\n    }                                                                                                                 // 1006\n                                                                                                                      //\n    if (options.schedule != null) {                                                                                   // 704\n      if (_typeof(options.schedule) !== 'object') {                                                                   // 705\n        throw new Error('bad option, schedule option must be an object');                                             // 706\n      }                                                                                                               // 1010\n                                                                                                                      //\n      if (!(((ref = options.schedule) != null ? ref.schedules : void 0) != null && options.schedule.schedules instanceof Array)) {\n        throw new Error('bad option, schedule object requires a schedules attribute of type Array.');                 // 708\n      }                                                                                                               // 1013\n                                                                                                                      //\n      if (options.schedule.exceptions != null && !(options.schedule.exceptions instanceof Array)) {                   // 709\n        throw new Error('bad option, schedule object exceptions attribute must be an Array');                         // 710\n      }                                                                                                               // 1016\n                                                                                                                      //\n      options.wait = {                                                                                                // 711\n        schedules: options.schedule.schedules,                                                                        // 712\n        exceptions: options.schedule.exceptions                                                                       // 713\n      };                                                                                                              // 712\n    }                                                                                                                 // 1021\n                                                                                                                      //\n    this._doc.repeats = options.repeats;                                                                              // 715\n    this._doc.repeatWait = options.wait;                                                                              // 716\n                                                                                                                      //\n    if ((base = this._doc).repeated == null) {                                                                        // 1024\n      base.repeated = 0;                                                                                              // 1025\n    }                                                                                                                 // 1026\n                                                                                                                      //\n    this._doc.repeatUntil = options.until;                                                                            // 718\n    return this;                                                                                                      // 719\n  };                                                                                                                  // 682\n                                                                                                                      //\n  Job.prototype.delay = function (wait) {                                                                             // 1031\n    if (wait == null) {                                                                                               // 1032\n      wait = 0;                                                                                                       // 722\n    }                                                                                                                 // 1034\n                                                                                                                      //\n    if (!(isInteger(wait) && wait >= 0)) {                                                                            // 723\n      throw new Error('Bad parameter, delay requires a non-negative integer.');                                       // 724\n    }                                                                                                                 // 1037\n                                                                                                                      //\n    return this.after(new Date(new Date().valueOf() + wait));                                                         // 725\n  };                                                                                                                  // 722\n                                                                                                                      //\n  Job.prototype.after = function (time) {                                                                             // 1041\n    var after;                                                                                                        // 729\n                                                                                                                      //\n    if (time == null) {                                                                                               // 1043\n      time = new Date(0);                                                                                             // 728\n    }                                                                                                                 // 1045\n                                                                                                                      //\n    if ((typeof time === \"undefined\" ? \"undefined\" : _typeof(time)) === 'object' && time instanceof Date) {           // 729\n      after = time;                                                                                                   // 730\n    } else {                                                                                                          // 729\n      throw new Error('Bad parameter, after requires a valid Date object');                                           // 732\n    }                                                                                                                 // 1050\n                                                                                                                      //\n    this._doc.after = after;                                                                                          // 733\n    return this;                                                                                                      // 734\n  };                                                                                                                  // 728\n                                                                                                                      //\n  Job.prototype.log = function () {                                                                                   // 1055\n    var base, cb, k, message, options, ref, ref1;                                                                     // 738\n    message = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 738\n                                                                                                                      //\n    if (options.level == null) {                                                                                      // 1059\n      options.level = 'info';                                                                                         // 739\n    }                                                                                                                 // 1061\n                                                                                                                      //\n    if (typeof message !== 'string') {                                                                                // 740\n      throw new Error('Log message must be a string');                                                                // 741\n    }                                                                                                                 // 1064\n                                                                                                                      //\n    if (!(typeof options.level === 'string' && (ref1 = options.level, indexOf.call(Job.jobLogLevels, ref1) >= 0))) {  // 742\n      throw new Error('Log level options must be one of Job.jobLogLevels');                                           // 743\n    }                                                                                                                 // 1067\n                                                                                                                      //\n    if (options.echo != null) {                                                                                       // 744\n      if (options.echo && Job.jobLogLevels.indexOf(options.level) >= Job.jobLogLevels.indexOf(options.echo)) {        // 745\n        this._echo(\"LOG: \" + options.level + \", \" + this._doc._id + \" \" + this._doc.runId + \": \" + message, options.level);\n      }                                                                                                               // 1071\n                                                                                                                      //\n      delete options.echo;                                                                                            // 747\n    }                                                                                                                 // 1073\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 748\n      return methodCall(this._root, \"jobLog\", [this._doc._id, this._doc.runId, message, options], cb);                // 749\n    } else {                                                                                                          // 748\n      if ((base = this._doc).log == null) {                                                                           // 1077\n        base.log = [];                                                                                                // 1078\n      }                                                                                                               // 1079\n                                                                                                                      //\n      this._doc.log.push({                                                                                            // 752\n        time: new Date(),                                                                                             // 752\n        runId: null,                                                                                                  // 752\n        level: options.level,                                                                                         // 752\n        message: message                                                                                              // 752\n      });                                                                                                             // 752\n                                                                                                                      //\n      if (cb != null && typeof cb === 'function') {                                                                   // 753\n        _setImmediate(cb, null, true);                                                                                // 754\n      }                                                                                                               // 1088\n                                                                                                                      //\n      return this;                                                                                                    // 755\n    }                                                                                                                 // 1090\n  };                                                                                                                  // 737\n                                                                                                                      //\n  Job.prototype.progress = function () {                                                                              // 1093\n    var cb, completed, k, options, progress, ref, total;                                                              // 760\n    completed = arguments[0], total = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n                                                                                                                      //\n    if (completed == null) {                                                                                          // 1096\n      completed = 0;                                                                                                  // 759\n    }                                                                                                                 // 1098\n                                                                                                                      //\n    if (total == null) {                                                                                              // 1099\n      total = 1;                                                                                                      // 759\n    }                                                                                                                 // 1101\n                                                                                                                      //\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 760\n                                                                                                                      //\n    if (typeof completed === 'number' && typeof total === 'number' && completed >= 0 && total > 0 && total >= completed) {\n      progress = {                                                                                                    // 766\n        completed: completed,                                                                                         // 767\n        total: total,                                                                                                 // 768\n        percent: 100 * completed / total                                                                              // 769\n      };                                                                                                              // 767\n                                                                                                                      //\n      if (options.echo) {                                                                                             // 770\n        delete options.echo;                                                                                          // 771\n                                                                                                                      //\n        this._echo(\"PROGRESS: \" + this._doc._id + \" \" + this._doc.runId + \": \" + progress.completed + \" out of \" + progress.total + \" (\" + progress.percent + \"%)\");\n      }                                                                                                               // 1112\n                                                                                                                      //\n      if (this._doc._id != null && this._doc.runId != null) {                                                         // 773\n        return methodCall(this._root, \"jobProgress\", [this._doc._id, this._doc.runId, completed, total, options], cb, function (_this) {\n          return function (res) {                                                                                     // 1115\n            if (res) {                                                                                                // 775\n              _this._doc.progress = progress;                                                                         // 776\n            }                                                                                                         // 1118\n                                                                                                                      //\n            return res;                                                                                               // 1119\n          };                                                                                                          // 774\n        }(this));                                                                                                     // 774\n      } else if (this._doc._id == null) {                                                                             // 773\n        this._doc.progress = progress;                                                                                // 779\n                                                                                                                      //\n        if (cb != null && typeof cb === 'function') {                                                                 // 780\n          _setImmediate(cb, null, true);                                                                              // 781\n        }                                                                                                             // 1126\n                                                                                                                      //\n        return this;                                                                                                  // 782\n      }                                                                                                               // 761\n    } else {                                                                                                          // 761\n      throw new Error(\"job.progress: something is wrong with progress params: \" + this.id + \", \" + completed + \" out of \" + total);\n    }                                                                                                                 // 1131\n                                                                                                                      //\n    return null;                                                                                                      // 785\n  };                                                                                                                  // 759\n                                                                                                                      //\n  Job.prototype.save = function () {                                                                                  // 1135\n    var cb, k, options, ref;                                                                                          // 790\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 790\n    return methodCall(this._root, \"jobSave\", [this._doc, options], cb, function (_this) {                             // 791\n      return function (id) {                                                                                          // 1140\n        if (id) {                                                                                                     // 792\n          _this._doc._id = id;                                                                                        // 793\n        }                                                                                                             // 1143\n                                                                                                                      //\n        return id;                                                                                                    // 1144\n      };                                                                                                              // 791\n    }(this));                                                                                                         // 791\n  };                                                                                                                  // 789\n                                                                                                                      //\n  Job.prototype.refresh = function () {                                                                               // 1149\n    var cb, k, options, ref;                                                                                          // 798\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 798\n                                                                                                                      //\n    if (options.getLog == null) {                                                                                     // 1153\n      options.getLog = false;                                                                                         // 799\n    }                                                                                                                 // 1155\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 800\n      return methodCall(this._root, \"getJob\", [this._doc._id, options], cb, function (_this) {                        // 801\n        return function (doc) {                                                                                       // 1158\n          if (doc != null) {                                                                                          // 802\n            _this._doc = doc;                                                                                         // 803\n            return _this;                                                                                             // 1161\n          } else {                                                                                                    // 802\n            return false;                                                                                             // 1163\n          }                                                                                                           // 1164\n        };                                                                                                            // 801\n      }(this));                                                                                                       // 801\n    } else {                                                                                                          // 800\n      throw new Error(\"Can't call .refresh() on an unsaved job\");                                                     // 808\n    }                                                                                                                 // 1169\n  };                                                                                                                  // 797\n                                                                                                                      //\n  Job.prototype.done = function () {                                                                                  // 1172\n    var cb, k, options, ref, result;                                                                                  // 812\n    result = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n                                                                                                                      //\n    if (result == null) {                                                                                             // 1175\n      result = {};                                                                                                    // 811\n    }                                                                                                                 // 1177\n                                                                                                                      //\n    if (typeof result === 'function') {                                                                               // 812\n      cb = result;                                                                                                    // 813\n      result = {};                                                                                                    // 814\n    }                                                                                                                 // 1181\n                                                                                                                      //\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 815\n                                                                                                                      //\n    if (!(result != null && (typeof result === \"undefined\" ? \"undefined\" : _typeof(result)) === 'object')) {          // 816\n      result = {                                                                                                      // 817\n        value: result                                                                                                 // 817\n      };                                                                                                              // 817\n    }                                                                                                                 // 1187\n                                                                                                                      //\n    if (this._doc._id != null && this._doc.runId != null) {                                                           // 818\n      return methodCall(this._root, \"jobDone\", [this._doc._id, this._doc.runId, result, options], cb);                // 819\n    } else {                                                                                                          // 818\n      throw new Error(\"Can't call .done() on an unsaved or non-running job\");                                         // 821\n    }                                                                                                                 // 1192\n                                                                                                                      //\n    return null;                                                                                                      // 822\n  };                                                                                                                  // 811\n                                                                                                                      //\n  Job.prototype.fail = function () {                                                                                  // 1196\n    var cb, k, options, ref, result;                                                                                  // 826\n    result = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n                                                                                                                      //\n    if (result == null) {                                                                                             // 1199\n      result = \"No error information provided\";                                                                       // 825\n    }                                                                                                                 // 1201\n                                                                                                                      //\n    if (typeof result === 'function') {                                                                               // 826\n      cb = result;                                                                                                    // 827\n      result = \"No error information provided\";                                                                       // 828\n    }                                                                                                                 // 1205\n                                                                                                                      //\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 829\n                                                                                                                      //\n    if (!(result != null && (typeof result === \"undefined\" ? \"undefined\" : _typeof(result)) === 'object')) {          // 830\n      result = {                                                                                                      // 831\n        value: result                                                                                                 // 831\n      };                                                                                                              // 831\n    }                                                                                                                 // 1211\n                                                                                                                      //\n    if (options.fatal == null) {                                                                                      // 1212\n      options.fatal = false;                                                                                          // 832\n    }                                                                                                                 // 1214\n                                                                                                                      //\n    if (this._doc._id != null && this._doc.runId != null) {                                                           // 833\n      return methodCall(this._root, \"jobFail\", [this._doc._id, this._doc.runId, result, options], cb);                // 834\n    } else {                                                                                                          // 833\n      throw new Error(\"Can't call .fail() on an unsaved or non-running job\");                                         // 836\n    }                                                                                                                 // 1219\n                                                                                                                      //\n    return null;                                                                                                      // 837\n  };                                                                                                                  // 825\n                                                                                                                      //\n  Job.prototype.pause = function () {                                                                                 // 1223\n    var cb, k, options, ref;                                                                                          // 841\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 841\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 842\n      return methodCall(this._root, \"jobPause\", [this._doc._id, options], cb);                                        // 843\n    } else {                                                                                                          // 842\n      this._doc.status = 'paused';                                                                                    // 845\n                                                                                                                      //\n      if (cb != null && typeof cb === 'function') {                                                                   // 846\n        _setImmediate(cb, null, true);                                                                                // 847\n      }                                                                                                               // 1233\n                                                                                                                      //\n      return this;                                                                                                    // 848\n    }                                                                                                                 // 1235\n                                                                                                                      //\n    return null;                                                                                                      // 849\n  };                                                                                                                  // 840\n                                                                                                                      //\n  Job.prototype.resume = function () {                                                                                // 1239\n    var cb, k, options, ref;                                                                                          // 854\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 854\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 855\n      return methodCall(this._root, \"jobResume\", [this._doc._id, options], cb);                                       // 856\n    } else {                                                                                                          // 855\n      this._doc.status = 'waiting';                                                                                   // 858\n                                                                                                                      //\n      if (cb != null && typeof cb === 'function') {                                                                   // 859\n        _setImmediate(cb, null, true);                                                                                // 860\n      }                                                                                                               // 1249\n                                                                                                                      //\n      return this;                                                                                                    // 861\n    }                                                                                                                 // 1251\n                                                                                                                      //\n    return null;                                                                                                      // 862\n  };                                                                                                                  // 853\n                                                                                                                      //\n  Job.prototype.ready = function () {                                                                                 // 1255\n    var cb, k, options, ref;                                                                                          // 866\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 866\n                                                                                                                      //\n    if (options.force == null) {                                                                                      // 1259\n      options.force = false;                                                                                          // 867\n    }                                                                                                                 // 1261\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 868\n      return methodCall(this._root, \"jobReady\", [this._doc._id, options], cb);                                        // 869\n    } else {                                                                                                          // 868\n      throw new Error(\"Can't call .ready() on an unsaved job\");                                                       // 871\n    }                                                                                                                 // 1266\n                                                                                                                      //\n    return null;                                                                                                      // 872\n  };                                                                                                                  // 865\n                                                                                                                      //\n  Job.prototype.cancel = function () {                                                                                // 1270\n    var cb, k, options, ref;                                                                                          // 876\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 876\n                                                                                                                      //\n    if (options.antecedents == null) {                                                                                // 1274\n      options.antecedents = true;                                                                                     // 877\n    }                                                                                                                 // 1276\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 878\n      return methodCall(this._root, \"jobCancel\", [this._doc._id, options], cb);                                       // 879\n    } else {                                                                                                          // 878\n      throw new Error(\"Can't call .cancel() on an unsaved job\");                                                      // 881\n    }                                                                                                                 // 1281\n                                                                                                                      //\n    return null;                                                                                                      // 882\n  };                                                                                                                  // 875\n                                                                                                                      //\n  Job.prototype.restart = function () {                                                                               // 1285\n    var cb, k, options, ref;                                                                                          // 886\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 886\n                                                                                                                      //\n    if (options.retries == null) {                                                                                    // 1289\n      options.retries = 1;                                                                                            // 887\n    }                                                                                                                 // 1291\n                                                                                                                      //\n    if (options.dependents == null) {                                                                                 // 1292\n      options.dependents = true;                                                                                      // 888\n    }                                                                                                                 // 1294\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 889\n      return methodCall(this._root, \"jobRestart\", [this._doc._id, options], cb);                                      // 890\n    } else {                                                                                                          // 889\n      throw new Error(\"Can't call .restart() on an unsaved job\");                                                     // 892\n    }                                                                                                                 // 1299\n                                                                                                                      //\n    return null;                                                                                                      // 893\n  };                                                                                                                  // 885\n                                                                                                                      //\n  Job.prototype.rerun = function () {                                                                                 // 1303\n    var cb, k, options, ref;                                                                                          // 897\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 897\n                                                                                                                      //\n    if (options.repeats == null) {                                                                                    // 1307\n      options.repeats = 0;                                                                                            // 898\n    }                                                                                                                 // 1309\n                                                                                                                      //\n    if (options.wait == null) {                                                                                       // 1310\n      options.wait = this._doc.repeatWait;                                                                            // 899\n    }                                                                                                                 // 1312\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 900\n      return methodCall(this._root, \"jobRerun\", [this._doc._id, options], cb);                                        // 901\n    } else {                                                                                                          // 900\n      throw new Error(\"Can't call .rerun() on an unsaved job\");                                                       // 903\n    }                                                                                                                 // 1317\n                                                                                                                      //\n    return null;                                                                                                      // 904\n  };                                                                                                                  // 896\n                                                                                                                      //\n  Job.prototype.remove = function () {                                                                                // 1321\n    var cb, k, options, ref;                                                                                          // 908\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];                                                    // 908\n                                                                                                                      //\n    if (this._doc._id != null) {                                                                                      // 909\n      return methodCall(this._root, \"jobRemove\", [this._doc._id, options], cb);                                       // 910\n    } else {                                                                                                          // 909\n      throw new Error(\"Can't call .remove() on an unsaved job\");                                                      // 912\n    }                                                                                                                 // 1329\n                                                                                                                      //\n    return null;                                                                                                      // 913\n  };                                                                                                                  // 907\n                                                                                                                      //\n  Object.defineProperties(Job.prototype, {                                                                            // 916\n    doc: {                                                                                                            // 917\n      get: function () {                                                                                              // 918\n        return this._doc;                                                                                             // 1336\n      },                                                                                                              // 918\n      set: function () {                                                                                              // 919\n        return console.warn(\"Job.doc cannot be directly assigned.\");                                                  // 1339\n      }                                                                                                               // 918\n    },                                                                                                                // 918\n    type: {                                                                                                           // 920\n      get: function () {                                                                                              // 921\n        return this._doc.type;                                                                                        // 1344\n      },                                                                                                              // 921\n      set: function () {                                                                                              // 922\n        return console.warn(\"Job.type cannot be directly assigned.\");                                                 // 1347\n      }                                                                                                               // 921\n    },                                                                                                                // 921\n    data: {                                                                                                           // 923\n      get: function () {                                                                                              // 924\n        return this._doc.data;                                                                                        // 1352\n      },                                                                                                              // 924\n      set: function () {                                                                                              // 925\n        return console.warn(\"Job.data cannot be directly assigned.\");                                                 // 1355\n      }                                                                                                               // 924\n    }                                                                                                                 // 924\n  });                                                                                                                 // 917\n  return Job;                                                                                                         // 1360\n}();                                                                                                                  // 1362\n                                                                                                                      //\nif ((typeof module !== \"undefined\" && module !== null ? module.exports : void 0) != null) {                           // 928\n  module.exports = Job;                                                                                               // 929\n}                                                                                                                     // 1366\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/vsivsi_job-collection/src/shared.coffee.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar JobCollectionBase,                                                                                                // 7\n    _validId,                                                                                                         // 7\n    _validIntGTEOne,                                                                                                  // 7\n    _validIntGTEZero,                                                                                                 // 7\n    _validJobDoc,                                                                                                     // 7\n    _validLaterJSObj,                                                                                                 // 7\n    _validLog,                                                                                                        // 7\n    _validLogLevel,                                                                                                   // 7\n    _validNumGTEOne,                                                                                                  // 7\n    _validNumGTEZero,                                                                                                 // 7\n    _validNumGTZero,                                                                                                  // 7\n    _validProgress,                                                                                                   // 7\n    _validRetryBackoff,                                                                                               // 7\n    _validStatus,                                                                                                     // 7\n    indexOf = [].indexOf || function (item) {                                                                         // 7\n  for (var i = 0, l = this.length; i < l; i++) {                                                                      // 7\n    if (i in this && this[i] === item) return i;                                                                      // 7\n  }                                                                                                                   // 7\n                                                                                                                      //\n  return -1;                                                                                                          // 7\n},                                                                                                                    // 7\n    extend = function (child, parent) {                                                                               // 7\n  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {                                                   // 3\n    if (hasProp.call(parent, key)) child[key] = parent[key];                                                          // 3\n  }                                                                                                                   // 3\n                                                                                                                      //\n  function ctor() {                                                                                                   // 3\n    this.constructor = child;                                                                                         // 3\n  }                                                                                                                   // 3\n                                                                                                                      //\n  ctor.prototype = parent.prototype;                                                                                  // 3\n  child.prototype = new ctor();                                                                                       // 3\n  child.__super__ = parent.prototype;                                                                                 // 3\n  return child;                                                                                                       // 3\n},                                                                                                                    // 3\n    hasProp = {}.hasOwnProperty,                                                                                      // 7\n    slice = [].slice;                                                                                                 // 7\n                                                                                                                      //\n_validNumGTEZero = function (v) {                                                                                     // 7\n  return Match.test(v, Number) && v >= 0.0;                                                                           // 8\n};                                                                                                                    // 7\n                                                                                                                      //\n_validNumGTZero = function (v) {                                                                                      // 10\n  return Match.test(v, Number) && v > 0.0;                                                                            // 12\n};                                                                                                                    // 10\n                                                                                                                      //\n_validNumGTEOne = function (v) {                                                                                      // 13\n  return Match.test(v, Number) && v >= 1.0;                                                                           // 16\n};                                                                                                                    // 13\n                                                                                                                      //\n_validIntGTEZero = function (v) {                                                                                     // 16\n  return _validNumGTEZero(v) && Math.floor(v) === v;                                                                  // 20\n};                                                                                                                    // 16\n                                                                                                                      //\n_validIntGTEOne = function (v) {                                                                                      // 19\n  return _validNumGTEOne(v) && Math.floor(v) === v;                                                                   // 24\n};                                                                                                                    // 19\n                                                                                                                      //\n_validStatus = function (v) {                                                                                         // 22\n  return Match.test(v, String) && indexOf.call(Job.jobStatuses, v) >= 0;                                              // 28\n};                                                                                                                    // 22\n                                                                                                                      //\n_validLogLevel = function (v) {                                                                                       // 25\n  return Match.test(v, String) && indexOf.call(Job.jobLogLevels, v) >= 0;                                             // 32\n};                                                                                                                    // 25\n                                                                                                                      //\n_validRetryBackoff = function (v) {                                                                                   // 28\n  return Match.test(v, String) && indexOf.call(Job.jobRetryBackoffMethods, v) >= 0;                                   // 36\n};                                                                                                                    // 28\n                                                                                                                      //\n_validId = function (v) {                                                                                             // 31\n  return Match.test(v, Match.OneOf(String, Mongo.Collection.ObjectID));                                               // 40\n};                                                                                                                    // 31\n                                                                                                                      //\n_validLog = function () {                                                                                             // 34\n  return [{                                                                                                           // 44\n    time: Date,                                                                                                       // 36\n    runId: Match.OneOf(Match.Where(_validId), null),                                                                  // 37\n    level: Match.Where(_validLogLevel),                                                                               // 38\n    message: String,                                                                                                  // 39\n    data: Match.Optional(Object)                                                                                      // 40\n  }];                                                                                                                 // 35\n};                                                                                                                    // 34\n                                                                                                                      //\n_validProgress = function () {                                                                                        // 43\n  return {                                                                                                            // 56\n    completed: Match.Where(_validNumGTEZero),                                                                         // 44\n    total: Match.Where(_validNumGTEZero),                                                                             // 45\n    percent: Match.Where(_validNumGTEZero)                                                                            // 46\n  };                                                                                                                  // 44\n};                                                                                                                    // 43\n                                                                                                                      //\n_validLaterJSObj = function () {                                                                                      // 48\n  return {                                                                                                            // 64\n    schedules: [Object],                                                                                              // 49\n    exceptions: Match.Optional([Object])                                                                              // 50\n  };                                                                                                                  // 49\n};                                                                                                                    // 48\n                                                                                                                      //\n_validJobDoc = function () {                                                                                          // 52\n  return {                                                                                                            // 71\n    _id: Match.Optional(Match.OneOf(Match.Where(_validId), null)),                                                    // 53\n    runId: Match.OneOf(Match.Where(_validId), null),                                                                  // 54\n    type: String,                                                                                                     // 55\n    status: Match.Where(_validStatus),                                                                                // 56\n    data: Object,                                                                                                     // 57\n    result: Match.Optional(Object),                                                                                   // 58\n    failures: Match.Optional([Object]),                                                                               // 59\n    priority: Match.Integer,                                                                                          // 60\n    depends: [Match.Where(_validId)],                                                                                 // 61\n    resolved: [Match.Where(_validId)],                                                                                // 62\n    after: Date,                                                                                                      // 63\n    updated: Date,                                                                                                    // 64\n    workTimeout: Match.Optional(Match.Where(_validIntGTEOne)),                                                        // 65\n    expiresAfter: Match.Optional(Date),                                                                               // 66\n    log: Match.Optional(_validLog()),                                                                                 // 67\n    progress: _validProgress(),                                                                                       // 68\n    retries: Match.Where(_validIntGTEZero),                                                                           // 69\n    retried: Match.Where(_validIntGTEZero),                                                                           // 70\n    repeatRetries: Match.Optional(Match.Where(_validIntGTEZero)),                                                     // 71\n    retryUntil: Date,                                                                                                 // 72\n    retryWait: Match.Where(_validIntGTEZero),                                                                         // 73\n    retryBackoff: Match.Where(_validRetryBackoff),                                                                    // 74\n    repeats: Match.Where(_validIntGTEZero),                                                                           // 75\n    repeated: Match.Where(_validIntGTEZero),                                                                          // 76\n    repeatUntil: Date,                                                                                                // 77\n    repeatWait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj)),                            // 78\n    created: Date                                                                                                     // 79\n  };                                                                                                                  // 53\n};                                                                                                                    // 52\n                                                                                                                      //\nJobCollectionBase = function (superClass) {                                                                           // 81\n  extend(JobCollectionBase, superClass);                                                                              // 103\n                                                                                                                      //\n  function JobCollectionBase(root, options) {                                                                         // 83\n    var collectionName;                                                                                               // 84\n    this.root = root != null ? root : 'queue';                                                                        // 83\n                                                                                                                      //\n    if (options == null) {                                                                                            // 108\n      options = {};                                                                                                   // 83\n    }                                                                                                                 // 110\n                                                                                                                      //\n    if (!(this instanceof JobCollectionBase)) {                                                                       // 84\n      return new JobCollectionBase(this.root, options);                                                               // 85\n    }                                                                                                                 // 113\n                                                                                                                      //\n    if (!(this instanceof Mongo.Collection)) {                                                                        // 87\n      throw new Error('The global definition of Mongo.Collection has changed since the job-collection package was loaded. Please ensure that any packages that redefine Mongo.Collection are loaded before job-collection.');\n    }                                                                                                                 // 116\n                                                                                                                      //\n    if (Mongo.Collection !== Mongo.Collection.prototype.constructor) {                                                // 90\n      throw new Meteor.Error('The global definition of Mongo.Collection has been patched by another package, and the prototype constructor has been left in an inconsistent state. Please see this link for a workaround: https://github.com/vsivsi/meteor-file-sample-app/issues/2#issuecomment-120780592');\n    }                                                                                                                 // 119\n                                                                                                                      //\n    this.later = later;                                                                                               // 93\n                                                                                                                      //\n    if (options.noCollectionSuffix == null) {                                                                         // 121\n      options.noCollectionSuffix = false;                                                                             // 95\n    }                                                                                                                 // 123\n                                                                                                                      //\n    collectionName = this.root;                                                                                       // 97\n                                                                                                                      //\n    if (!options.noCollectionSuffix) {                                                                                // 99\n      collectionName += '.jobs';                                                                                      // 100\n    }                                                                                                                 // 127\n                                                                                                                      //\n    delete options.noCollectionSuffix;                                                                                // 104\n    Job.setDDP(options.connection, this.root);                                                                        // 106\n                                                                                                                      //\n    this._createLogEntry = function (message, runId, level, time, data) {                                             // 108\n      var l;                                                                                                          // 109\n                                                                                                                      //\n      if (message == null) {                                                                                          // 132\n        message = '';                                                                                                 // 108\n      }                                                                                                               // 134\n                                                                                                                      //\n      if (runId == null) {                                                                                            // 135\n        runId = null;                                                                                                 // 108\n      }                                                                                                               // 137\n                                                                                                                      //\n      if (level == null) {                                                                                            // 138\n        level = 'info';                                                                                               // 108\n      }                                                                                                               // 140\n                                                                                                                      //\n      if (time == null) {                                                                                             // 141\n        time = new Date();                                                                                            // 108\n      }                                                                                                               // 143\n                                                                                                                      //\n      if (data == null) {                                                                                             // 144\n        data = null;                                                                                                  // 108\n      }                                                                                                               // 146\n                                                                                                                      //\n      l = {                                                                                                           // 109\n        time: time,                                                                                                   // 109\n        runId: runId,                                                                                                 // 109\n        message: message,                                                                                             // 109\n        level: level                                                                                                  // 109\n      };                                                                                                              // 109\n      return l;                                                                                                       // 110\n    };                                                                                                                // 108\n                                                                                                                      //\n    this._logMessage = {                                                                                              // 112\n      'readied': function () {                                                                                        // 113\n        return this._createLogEntry(\"Promoted to ready\");                                                             // 157\n      }.bind(this),                                                                                                   // 113\n      'forced': function (id) {                                                                                       // 114\n        return this._createLogEntry(\"Dependencies force resolved\", null, 'warning');                                  // 160\n      }.bind(this),                                                                                                   // 114\n      'rerun': function (id, runId) {                                                                                 // 115\n        return this._createLogEntry(\"Rerunning job\", null, 'info', new Date(), {                                      // 163\n          previousJob: {                                                                                              // 115\n            id: id,                                                                                                   // 115\n            runId: runId                                                                                              // 115\n          }                                                                                                           // 115\n        });                                                                                                           // 115\n      }.bind(this),                                                                                                   // 115\n      'running': function (runId) {                                                                                   // 116\n        return this._createLogEntry(\"Job Running\", runId);                                                            // 171\n      }.bind(this),                                                                                                   // 116\n      'paused': function () {                                                                                         // 117\n        return this._createLogEntry(\"Job Paused\");                                                                    // 174\n      }.bind(this),                                                                                                   // 117\n      'resumed': function () {                                                                                        // 118\n        return this._createLogEntry(\"Job Resumed\");                                                                   // 177\n      }.bind(this),                                                                                                   // 118\n      'cancelled': function () {                                                                                      // 119\n        return this._createLogEntry(\"Job Cancelled\", null, 'warning');                                                // 180\n      }.bind(this),                                                                                                   // 119\n      'restarted': function () {                                                                                      // 120\n        return this._createLogEntry(\"Job Restarted\");                                                                 // 183\n      }.bind(this),                                                                                                   // 120\n      'resubmitted': function () {                                                                                    // 121\n        return this._createLogEntry(\"Job Resubmitted\");                                                               // 186\n      }.bind(this),                                                                                                   // 121\n      'submitted': function () {                                                                                      // 122\n        return this._createLogEntry(\"Job Submitted\");                                                                 // 189\n      }.bind(this),                                                                                                   // 122\n      'completed': function (runId) {                                                                                 // 123\n        return this._createLogEntry(\"Job Completed\", runId, 'success');                                               // 192\n      }.bind(this),                                                                                                   // 123\n      'resolved': function (id, runId) {                                                                              // 124\n        return this._createLogEntry(\"Dependency resolved\", null, 'info', new Date(), {                                // 195\n          dependency: {                                                                                               // 124\n            id: id,                                                                                                   // 124\n            runId: runId                                                                                              // 124\n          }                                                                                                           // 124\n        });                                                                                                           // 124\n      }.bind(this),                                                                                                   // 124\n      'failed': function (runId, fatal, err) {                                                                        // 125\n        var level, msg, value;                                                                                        // 126\n        value = err.value;                                                                                            // 126\n        msg = \"Job Failed with\" + (fatal ? ' Fatal' : '') + \" Error\" + (value != null && typeof value === 'string' ? ': ' + value : '') + \".\";\n        level = fatal ? 'danger' : 'warning';                                                                         // 128\n        return this._createLogEntry(msg, runId, level);                                                               // 207\n      }.bind(this)                                                                                                    // 125\n    };                                                                                                                // 113\n                                                                                                                      //\n    JobCollectionBase.__super__.constructor.call(this, collectionName, options);                                      // 132\n  }                                                                                                                   // 83\n                                                                                                                      //\n  JobCollectionBase.prototype._validNumGTEZero = _validNumGTEZero;                                                    // 213\n  JobCollectionBase.prototype._validNumGTZero = _validNumGTZero;                                                      // 215\n  JobCollectionBase.prototype._validNumGTEOne = _validNumGTEOne;                                                      // 217\n  JobCollectionBase.prototype._validIntGTEZero = _validIntGTEZero;                                                    // 219\n  JobCollectionBase.prototype._validIntGTEOne = _validIntGTEOne;                                                      // 221\n  JobCollectionBase.prototype._validStatus = _validStatus;                                                            // 223\n  JobCollectionBase.prototype._validLogLevel = _validLogLevel;                                                        // 225\n  JobCollectionBase.prototype._validRetryBackoff = _validRetryBackoff;                                                // 227\n  JobCollectionBase.prototype._validId = _validId;                                                                    // 229\n  JobCollectionBase.prototype._validLog = _validLog;                                                                  // 231\n  JobCollectionBase.prototype._validProgress = _validProgress;                                                        // 233\n  JobCollectionBase.prototype._validJobDoc = _validJobDoc;                                                            // 235\n  JobCollectionBase.prototype.jobLogLevels = Job.jobLogLevels;                                                        // 237\n  JobCollectionBase.prototype.jobPriorities = Job.jobPriorities;                                                      // 239\n  JobCollectionBase.prototype.jobStatuses = Job.jobStatuses;                                                          // 241\n  JobCollectionBase.prototype.jobStatusCancellable = Job.jobStatusCancellable;                                        // 243\n  JobCollectionBase.prototype.jobStatusPausable = Job.jobStatusPausable;                                              // 245\n  JobCollectionBase.prototype.jobStatusRemovable = Job.jobStatusRemovable;                                            // 247\n  JobCollectionBase.prototype.jobStatusRestartable = Job.jobStatusRestartable;                                        // 249\n  JobCollectionBase.prototype.forever = Job.forever;                                                                  // 251\n  JobCollectionBase.prototype.foreverDate = Job.foreverDate;                                                          // 253\n  JobCollectionBase.prototype.ddpMethods = Job.ddpMethods;                                                            // 255\n  JobCollectionBase.prototype.ddpPermissionLevels = Job.ddpPermissionLevels;                                          // 257\n  JobCollectionBase.prototype.ddpMethodPermissions = Job.ddpMethodPermissions;                                        // 259\n                                                                                                                      //\n  JobCollectionBase.prototype.processJobs = function () {                                                             // 261\n    var params;                                                                                                       // 161\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 161\n    return function (func, args, ctor) {                                                                              // 264\n      ctor.prototype = func.prototype;                                                                                // 265\n      var child = new ctor(),                                                                                         // 266\n          result = func.apply(child, args);                                                                           // 266\n      return Object(result) === result ? result : child;                                                              // 267\n    }(Job.processJobs, [this.root].concat(slice.call(params)), function () {});                                       // 268\n  };                                                                                                                  // 161\n                                                                                                                      //\n  JobCollectionBase.prototype.getJob = function () {                                                                  // 271\n    var params;                                                                                                       // 162\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 162\n    return Job.getJob.apply(Job, [this.root].concat(slice.call(params)));                                             // 274\n  };                                                                                                                  // 162\n                                                                                                                      //\n  JobCollectionBase.prototype.getWork = function () {                                                                 // 277\n    var params;                                                                                                       // 163\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 163\n    return Job.getWork.apply(Job, [this.root].concat(slice.call(params)));                                            // 280\n  };                                                                                                                  // 163\n                                                                                                                      //\n  JobCollectionBase.prototype.getJobs = function () {                                                                 // 283\n    var params;                                                                                                       // 164\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 164\n    return Job.getJobs.apply(Job, [this.root].concat(slice.call(params)));                                            // 286\n  };                                                                                                                  // 164\n                                                                                                                      //\n  JobCollectionBase.prototype.readyJobs = function () {                                                               // 289\n    var params;                                                                                                       // 165\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 165\n    return Job.readyJobs.apply(Job, [this.root].concat(slice.call(params)));                                          // 292\n  };                                                                                                                  // 165\n                                                                                                                      //\n  JobCollectionBase.prototype.cancelJobs = function () {                                                              // 295\n    var params;                                                                                                       // 166\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 166\n    return Job.cancelJobs.apply(Job, [this.root].concat(slice.call(params)));                                         // 298\n  };                                                                                                                  // 166\n                                                                                                                      //\n  JobCollectionBase.prototype.pauseJobs = function () {                                                               // 301\n    var params;                                                                                                       // 167\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 167\n    return Job.pauseJobs.apply(Job, [this.root].concat(slice.call(params)));                                          // 304\n  };                                                                                                                  // 167\n                                                                                                                      //\n  JobCollectionBase.prototype.resumeJobs = function () {                                                              // 307\n    var params;                                                                                                       // 168\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 168\n    return Job.resumeJobs.apply(Job, [this.root].concat(slice.call(params)));                                         // 310\n  };                                                                                                                  // 168\n                                                                                                                      //\n  JobCollectionBase.prototype.restartJobs = function () {                                                             // 313\n    var params;                                                                                                       // 169\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 169\n    return Job.restartJobs.apply(Job, [this.root].concat(slice.call(params)));                                        // 316\n  };                                                                                                                  // 169\n                                                                                                                      //\n  JobCollectionBase.prototype.removeJobs = function () {                                                              // 319\n    var params;                                                                                                       // 170\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 170\n    return Job.removeJobs.apply(Job, [this.root].concat(slice.call(params)));                                         // 322\n  };                                                                                                                  // 170\n                                                                                                                      //\n  JobCollectionBase.prototype.setDDP = function () {                                                                  // 325\n    var params;                                                                                                       // 172\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 172\n    return Job.setDDP.apply(Job, params);                                                                             // 328\n  };                                                                                                                  // 172\n                                                                                                                      //\n  JobCollectionBase.prototype.startJobServer = function () {                                                          // 331\n    var params;                                                                                                       // 174\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 174\n    return Job.startJobServer.apply(Job, [this.root].concat(slice.call(params)));                                     // 334\n  };                                                                                                                  // 174\n                                                                                                                      //\n  JobCollectionBase.prototype.shutdownJobServer = function () {                                                       // 337\n    var params;                                                                                                       // 175\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 175\n    return Job.shutdownJobServer.apply(Job, [this.root].concat(slice.call(params)));                                  // 340\n  };                                                                                                                  // 175\n                                                                                                                      //\n  JobCollectionBase.prototype.startJobs = function () {                                                               // 343\n    var params;                                                                                                       // 178\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 178\n    return Job.startJobs.apply(Job, [this.root].concat(slice.call(params)));                                          // 346\n  };                                                                                                                  // 178\n                                                                                                                      //\n  JobCollectionBase.prototype.stopJobs = function () {                                                                // 349\n    var params;                                                                                                       // 179\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                   // 179\n    return Job.stopJobs.apply(Job, [this.root].concat(slice.call(params)));                                           // 352\n  };                                                                                                                  // 179\n                                                                                                                      //\n  JobCollectionBase.prototype.jobDocPattern = _validJobDoc();                                                         // 355\n                                                                                                                      //\n  JobCollectionBase.prototype.allow = function () {                                                                   // 357\n    throw new Error(\"Server-only function jc.allow() invoked on client.\");                                            // 184\n  };                                                                                                                  // 184\n                                                                                                                      //\n  JobCollectionBase.prototype.deny = function () {                                                                    // 361\n    throw new Error(\"Server-only function jc.deny() invoked on client.\");                                             // 185\n  };                                                                                                                  // 185\n                                                                                                                      //\n  JobCollectionBase.prototype.promote = function () {                                                                 // 365\n    throw new Error(\"Server-only function jc.promote() invoked on client.\");                                          // 186\n  };                                                                                                                  // 186\n                                                                                                                      //\n  JobCollectionBase.prototype.setLogStream = function () {                                                            // 369\n    throw new Error(\"Server-only function jc.setLogStream() invoked on client.\");                                     // 187\n  };                                                                                                                  // 187\n                                                                                                                      //\n  JobCollectionBase.prototype.logConsole = function () {                                                              // 373\n    throw new Error(\"Client-only function jc.logConsole() invoked on server.\");                                       // 190\n  };                                                                                                                  // 190\n                                                                                                                      //\n  JobCollectionBase.prototype.makeJob = function () {                                                                 // 377\n    var dep;                                                                                                          // 194\n    dep = false;                                                                                                      // 194\n    return function () {                                                                                              // 380\n      var params;                                                                                                     // 196\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                 // 195\n                                                                                                                      //\n      if (!dep) {                                                                                                     // 196\n        dep = true;                                                                                                   // 197\n        console.warn(\"WARNING: jc.makeJob() has been deprecated. Use new Job(jc, doc) instead.\");                     // 198\n      }                                                                                                               // 386\n                                                                                                                      //\n      return function (func, args, ctor) {                                                                            // 387\n        ctor.prototype = func.prototype;                                                                              // 388\n        var child = new ctor(),                                                                                       // 389\n            result = func.apply(child, args);                                                                         // 389\n        return Object(result) === result ? result : child;                                                            // 390\n      }(Job, [this.root].concat(slice.call(params)), function () {});                                                 // 391\n    };                                                                                                                // 195\n  }();                                                                                                                // 193\n                                                                                                                      //\n  JobCollectionBase.prototype.createJob = function () {                                                               // 395\n    var dep;                                                                                                          // 203\n    dep = false;                                                                                                      // 203\n    return function () {                                                                                              // 398\n      var params;                                                                                                     // 205\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                 // 204\n                                                                                                                      //\n      if (!dep) {                                                                                                     // 205\n        dep = true;                                                                                                   // 206\n        console.warn(\"WARNING: jc.createJob() has been deprecated. Use new Job(jc, type, data) instead.\");            // 207\n      }                                                                                                               // 404\n                                                                                                                      //\n      return function (func, args, ctor) {                                                                            // 405\n        ctor.prototype = func.prototype;                                                                              // 406\n        var child = new ctor(),                                                                                       // 407\n            result = func.apply(child, args);                                                                         // 407\n        return Object(result) === result ? result : child;                                                            // 408\n      }(Job, [this.root].concat(slice.call(params)), function () {});                                                 // 409\n    };                                                                                                                // 204\n  }();                                                                                                                // 202\n                                                                                                                      //\n  JobCollectionBase.prototype._methodWrapper = function (method, func) {                                              // 413\n    var ref, toLog, unblockDDPMethods;                                                                                // 211\n    toLog = this._toLog;                                                                                              // 211\n    unblockDDPMethods = (ref = this._unblockDDPMethods) != null ? ref : false;                                        // 212\n    return function () {                                                                                              // 214\n      var params, ref1, retval, user;                                                                                 // 215\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                                 // 214\n      user = (ref1 = this.userId) != null ? ref1 : \"[UNAUTHENTICATED]\";                                               // 215\n      toLog(user, method, \"params: \" + JSON.stringify(params));                                                       // 216\n                                                                                                                      //\n      if (unblockDDPMethods) {                                                                                        // 217\n        this.unblock();                                                                                               // 217\n      }                                                                                                               // 424\n                                                                                                                      //\n      retval = func.apply(null, params);                                                                              // 218\n      toLog(user, method, \"returned: \" + JSON.stringify(retval));                                                     // 219\n      return retval;                                                                                                  // 220\n    };                                                                                                                // 214\n  };                                                                                                                  // 210\n                                                                                                                      //\n  JobCollectionBase.prototype._generateMethods = function () {                                                        // 431\n    var baseMethodName, methodFunc, methodName, methodPrefix, methodsOut, ref;                                        // 223\n    methodsOut = {};                                                                                                  // 223\n    methodPrefix = '_DDPMethod_';                                                                                     // 224\n    ref = this;                                                                                                       // 225\n                                                                                                                      //\n    for (methodName in meteorBabelHelpers.sanitizeForInObject(ref)) {                                                 // 225\n      methodFunc = ref[methodName];                                                                                   // 437\n                                                                                                                      //\n      if (!(methodName.slice(0, methodPrefix.length) === methodPrefix)) {                                             // 438\n        continue;                                                                                                     // 439\n      }                                                                                                               // 440\n                                                                                                                      //\n      baseMethodName = methodName.slice(methodPrefix.length);                                                         // 226\n      methodsOut[this.root + \"_\" + baseMethodName] = this._methodWrapper(baseMethodName, methodFunc.bind(this));      // 227\n    }                                                                                                                 // 225\n                                                                                                                      //\n    return methodsOut;                                                                                                // 228\n  };                                                                                                                  // 222\n                                                                                                                      //\n  JobCollectionBase.prototype._idsOfDeps = function (ids, antecedents, dependents, jobStatuses) {                     // 447\n    var antsArray, dependsIds, dependsQuery;                                                                          // 234\n    dependsQuery = [];                                                                                                // 234\n                                                                                                                      //\n    if (dependents) {                                                                                                 // 235\n      dependsQuery.push({                                                                                             // 236\n        depends: {                                                                                                    // 237\n          $elemMatch: {                                                                                               // 238\n            $in: ids                                                                                                  // 239\n          }                                                                                                           // 239\n        }                                                                                                             // 238\n      });                                                                                                             // 237\n    }                                                                                                                 // 458\n                                                                                                                      //\n    if (antecedents) {                                                                                                // 240\n      antsArray = [];                                                                                                 // 241\n      this.find({                                                                                                     // 242\n        _id: {                                                                                                        // 244\n          $in: ids                                                                                                    // 245\n        }                                                                                                             // 245\n      }, {                                                                                                            // 243\n        fields: {                                                                                                     // 248\n          depends: 1                                                                                                  // 249\n        },                                                                                                            // 249\n        transform: null                                                                                               // 250\n      }).forEach(function (d) {                                                                                       // 247\n        var i, j, len, ref, results;                                                                                  // 252\n                                                                                                                      //\n        if (indexOf.call(antsArray, i) < 0) {                                                                         // 252\n          ref = d.depends;                                                                                            // 252\n          results = [];                                                                                               // 252\n                                                                                                                      //\n          for (j = 0, len = ref.length; j < len; j++) {                                                               // 475\n            i = ref[j];                                                                                               // 476\n            results.push(antsArray.push(i));                                                                          // 477\n          }                                                                                                           // 252\n                                                                                                                      //\n          return results;                                                                                             // 479\n        }                                                                                                             // 480\n      });                                                                                                             // 242\n                                                                                                                      //\n      if (antsArray.length > 0) {                                                                                     // 253\n        dependsQuery.push({                                                                                           // 254\n          _id: {                                                                                                      // 255\n            $in: antsArray                                                                                            // 256\n          }                                                                                                           // 256\n        });                                                                                                           // 255\n      }                                                                                                               // 240\n    }                                                                                                                 // 489\n                                                                                                                      //\n    if (dependsQuery) {                                                                                               // 257\n      dependsIds = [];                                                                                                // 258\n      this.find({                                                                                                     // 259\n        status: {                                                                                                     // 261\n          $in: jobStatuses                                                                                            // 262\n        },                                                                                                            // 262\n        $or: dependsQuery                                                                                             // 263\n      }, {                                                                                                            // 260\n        fields: {                                                                                                     // 266\n          _id: 1                                                                                                      // 267\n        },                                                                                                            // 267\n        transform: null                                                                                               // 268\n      }).forEach(function (d) {                                                                                       // 265\n        var ref;                                                                                                      // 271\n                                                                                                                      //\n        if (ref = d._id, indexOf.call(dependsIds, ref) < 0) {                                                         // 271\n          return dependsIds.push(d._id);                                                                              // 505\n        }                                                                                                             // 506\n      });                                                                                                             // 259\n    }                                                                                                                 // 508\n                                                                                                                      //\n    return dependsIds;                                                                                                // 272\n  };                                                                                                                  // 230\n                                                                                                                      //\n  JobCollectionBase.prototype._rerun_job = function (doc, repeats, wait, repeatUntil) {                               // 512\n    var id, jobId, logObj, runId, time;                                                                               // 276\n                                                                                                                      //\n    if (repeats == null) {                                                                                            // 514\n      repeats = doc.repeats - 1;                                                                                      // 274\n    }                                                                                                                 // 516\n                                                                                                                      //\n    if (wait == null) {                                                                                               // 517\n      wait = doc.repeatWait;                                                                                          // 274\n    }                                                                                                                 // 519\n                                                                                                                      //\n    if (repeatUntil == null) {                                                                                        // 520\n      repeatUntil = doc.repeatUntil;                                                                                  // 274\n    }                                                                                                                 // 522\n                                                                                                                      //\n    id = doc._id;                                                                                                     // 276\n    runId = doc.runId;                                                                                                // 277\n    time = new Date();                                                                                                // 278\n    delete doc._id;                                                                                                   // 279\n    delete doc.result;                                                                                                // 280\n    delete doc.failures;                                                                                              // 281\n    delete doc.expiresAfter;                                                                                          // 282\n    delete doc.workTimeout;                                                                                           // 283\n    doc.runId = null;                                                                                                 // 284\n    doc.status = \"waiting\";                                                                                           // 285\n    doc.repeatRetries = doc.repeatRetries != null ? doc.repeatRetries : doc.retries + doc.retried;                    // 286\n    doc.retries = doc.repeatRetries;                                                                                  // 287\n                                                                                                                      //\n    if (doc.retries > this.forever) {                                                                                 // 288\n      doc.retries = this.forever;                                                                                     // 288\n    }                                                                                                                 // 537\n                                                                                                                      //\n    doc.retryUntil = repeatUntil;                                                                                     // 289\n    doc.retried = 0;                                                                                                  // 290\n    doc.repeats = repeats;                                                                                            // 291\n                                                                                                                      //\n    if (doc.repeats > this.forever) {                                                                                 // 292\n      doc.repeats = this.forever;                                                                                     // 292\n    }                                                                                                                 // 543\n                                                                                                                      //\n    doc.repeatUntil = repeatUntil;                                                                                    // 293\n    doc.repeated = doc.repeated + 1;                                                                                  // 294\n    doc.updated = time;                                                                                               // 295\n    doc.created = time;                                                                                               // 296\n    doc.progress = {                                                                                                  // 297\n      completed: 0,                                                                                                   // 298\n      total: 1,                                                                                                       // 299\n      percent: 0                                                                                                      // 300\n    };                                                                                                                // 298\n                                                                                                                      //\n    if (logObj = this._logMessage.rerun(id, runId)) {                                                                 // 301\n      doc.log = [logObj];                                                                                             // 302\n    } else {                                                                                                          // 301\n      doc.log = [];                                                                                                   // 304\n    }                                                                                                                 // 557\n                                                                                                                      //\n    doc.after = new Date(time.valueOf() + wait);                                                                      // 306\n                                                                                                                      //\n    if (jobId = this.insert(doc)) {                                                                                   // 307\n      this._DDPMethod_jobReady(jobId);                                                                                // 308\n                                                                                                                      //\n      return jobId;                                                                                                   // 309\n    } else {                                                                                                          // 307\n      console.warn(\"Job rerun/repeat failed to reschedule!\", id, runId);                                              // 311\n    }                                                                                                                 // 564\n                                                                                                                      //\n    return null;                                                                                                      // 312\n  };                                                                                                                  // 274\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_startJobServer = function (options) {                                        // 568\n    check(options, Match.Optional({}));                                                                               // 315\n                                                                                                                      //\n    if (options == null) {                                                                                            // 570\n      options = {};                                                                                                   // 316\n    }                                                                                                                 // 572\n                                                                                                                      //\n    if (!this.isSimulation) {                                                                                         // 318\n      if (this.stopped && this.stopped !== true) {                                                                    // 319\n        Meteor.clearTimeout(this.stopped);                                                                            // 319\n      }                                                                                                               // 576\n                                                                                                                      //\n      this.stopped = false;                                                                                           // 320\n    }                                                                                                                 // 578\n                                                                                                                      //\n    return true;                                                                                                      // 321\n  };                                                                                                                  // 314\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_startJobs = function () {                                                    // 582\n    var depFlag;                                                                                                      // 324\n    depFlag = false;                                                                                                  // 324\n    return function (options) {                                                                                       // 585\n      if (!depFlag) {                                                                                                 // 326\n        depFlag = true;                                                                                               // 327\n        console.warn(\"Deprecation Warning: jc.startJobs() has been renamed to jc.startJobServer()\");                  // 328\n      }                                                                                                               // 589\n                                                                                                                      //\n      return this._DDPMethod_startJobServer(options);                                                                 // 329\n    };                                                                                                                // 325\n  }();                                                                                                                // 323\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_shutdownJobServer = function (options) {                                     // 594\n    check(options, Match.Optional({                                                                                   // 332\n      timeout: Match.Optional(Match.Where(_validIntGTEOne))                                                           // 333\n    }));                                                                                                              // 333\n                                                                                                                      //\n    if (options == null) {                                                                                            // 598\n      options = {};                                                                                                   // 334\n    }                                                                                                                 // 600\n                                                                                                                      //\n    if (options.timeout == null) {                                                                                    // 601\n      options.timeout = 60 * 1000;                                                                                    // 335\n    }                                                                                                                 // 603\n                                                                                                                      //\n    if (!this.isSimulation) {                                                                                         // 338\n      if (this.stopped && this.stopped !== true) {                                                                    // 339\n        Meteor.clearTimeout(this.stopped);                                                                            // 339\n      }                                                                                                               // 607\n                                                                                                                      //\n      this.stopped = Meteor.setTimeout(function (_this) {                                                             // 340\n        return function () {                                                                                          // 609\n          var cursor, failedJobs;                                                                                     // 342\n          cursor = _this.find({                                                                                       // 342\n            status: 'running'                                                                                         // 344\n          }, {                                                                                                        // 343\n            transform: null                                                                                           // 347\n          });                                                                                                         // 346\n          failedJobs = cursor.count();                                                                                // 350\n                                                                                                                      //\n          if (failedJobs !== 0) {                                                                                     // 351\n            console.warn(\"Failing \" + failedJobs + \" jobs on queue stop.\");                                           // 351\n          }                                                                                                           // 619\n                                                                                                                      //\n          cursor.forEach(function (d) {                                                                               // 352\n            return _this._DDPMethod_jobFail(d._id, d.runId, \"Running at Job Server shutdown.\");                       // 621\n          });                                                                                                         // 352\n                                                                                                                      //\n          if (_this.logStream != null) {                                                                              // 353\n            _this.logStream.end();                                                                                    // 354\n                                                                                                                      //\n            return _this.logStream = null;                                                                            // 625\n          }                                                                                                           // 626\n        };                                                                                                            // 341\n      }(this), options.timeout);                                                                                      // 341\n    }                                                                                                                 // 629\n                                                                                                                      //\n    return true;                                                                                                      // 358\n  };                                                                                                                  // 331\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_stopJobs = function () {                                                     // 633\n    var depFlag;                                                                                                      // 361\n    depFlag = false;                                                                                                  // 361\n    return function (options) {                                                                                       // 636\n      if (!depFlag) {                                                                                                 // 363\n        depFlag = true;                                                                                               // 364\n        console.warn(\"Deprecation Warning: jc.stopJobs() has been renamed to jc.shutdownJobServer()\");                // 365\n      }                                                                                                               // 640\n                                                                                                                      //\n      return this._DDPMethod_shutdownJobServer(options);                                                              // 366\n    };                                                                                                                // 362\n  }();                                                                                                                // 360\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_getJob = function (ids, options) {                                           // 645\n    var d, docs, fields, single;                                                                                      // 369\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 369\n    check(options, Match.Optional({                                                                                   // 370\n      getLog: Match.Optional(Boolean),                                                                                // 371\n      getFailures: Match.Optional(Boolean)                                                                            // 372\n    }));                                                                                                              // 371\n                                                                                                                      //\n    if (options == null) {                                                                                            // 652\n      options = {};                                                                                                   // 373\n    }                                                                                                                 // 654\n                                                                                                                      //\n    if (options.getLog == null) {                                                                                     // 655\n      options.getLog = false;                                                                                         // 374\n    }                                                                                                                 // 657\n                                                                                                                      //\n    if (options.getFailures == null) {                                                                                // 658\n      options.getFailures = false;                                                                                    // 375\n    }                                                                                                                 // 660\n                                                                                                                      //\n    single = false;                                                                                                   // 376\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 377\n      ids = [ids];                                                                                                    // 378\n      single = true;                                                                                                  // 379\n    }                                                                                                                 // 665\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 380\n      return null;                                                                                                    // 380\n    }                                                                                                                 // 668\n                                                                                                                      //\n    fields = {                                                                                                        // 381\n      _private: 0                                                                                                     // 381\n    };                                                                                                                // 381\n                                                                                                                      //\n    if (!options.getLog) {                                                                                            // 382\n      fields.log = 0;                                                                                                 // 382\n    }                                                                                                                 // 674\n                                                                                                                      //\n    if (!options.getFailures) {                                                                                       // 383\n      fields.failures = 0;                                                                                            // 383\n    }                                                                                                                 // 677\n                                                                                                                      //\n    docs = this.find({                                                                                                // 384\n      _id: {                                                                                                          // 386\n        $in: ids                                                                                                      // 387\n      }                                                                                                               // 387\n    }, {                                                                                                              // 385\n      fields: fields,                                                                                                 // 390\n      transform: null                                                                                                 // 391\n    }).fetch();                                                                                                       // 389\n                                                                                                                      //\n    if (docs != null ? docs.length : void 0) {                                                                        // 394\n      if (this.scrub != null) {                                                                                       // 395\n        docs = function () {                                                                                          // 396\n          var j, len, results;                                                                                        // 689\n          results = [];                                                                                               // 396\n                                                                                                                      //\n          for (j = 0, len = docs.length; j < len; j++) {                                                              // 691\n            d = docs[j];                                                                                              // 692\n            results.push(this.scrub(d));                                                                              // 693\n          }                                                                                                           // 396\n                                                                                                                      //\n          return results;                                                                                             // 695\n        }.call(this);                                                                                                 // 696\n      }                                                                                                               // 697\n                                                                                                                      //\n      check(docs, [_validJobDoc()]);                                                                                  // 397\n                                                                                                                      //\n      if (single) {                                                                                                   // 398\n        return docs[0];                                                                                               // 399\n      } else {                                                                                                        // 398\n        return docs;                                                                                                  // 401\n      }                                                                                                               // 394\n    }                                                                                                                 // 704\n                                                                                                                      //\n    return null;                                                                                                      // 402\n  };                                                                                                                  // 368\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_getWork = function (type, options) {                                         // 708\n    var d, docs, foundDocs, ids, logObj, mods, num, runId, time;                                                      // 405\n    check(type, Match.OneOf(String, [String]));                                                                       // 405\n    check(options, Match.Optional({                                                                                   // 406\n      maxJobs: Match.Optional(Match.Where(_validIntGTEOne)),                                                          // 407\n      workTimeout: Match.Optional(Match.Where(_validIntGTEOne))                                                       // 408\n    }));                                                                                                              // 407\n                                                                                                                      //\n    if (this.isSimulation) {                                                                                          // 411\n      return;                                                                                                         // 412\n    }                                                                                                                 // 717\n                                                                                                                      //\n    if (options == null) {                                                                                            // 718\n      options = {};                                                                                                   // 414\n    }                                                                                                                 // 720\n                                                                                                                      //\n    if (options.maxJobs == null) {                                                                                    // 721\n      options.maxJobs = 1;                                                                                            // 415\n    }                                                                                                                 // 723\n                                                                                                                      //\n    if (this.stopped) {                                                                                               // 417\n      return [];                                                                                                      // 418\n    }                                                                                                                 // 726\n                                                                                                                      //\n    if (typeof type === 'string') {                                                                                   // 421\n      type = [type];                                                                                                  // 422\n    }                                                                                                                 // 729\n                                                                                                                      //\n    time = new Date();                                                                                                // 423\n    docs = [];                                                                                                        // 424\n    runId = this._makeNewID();                                                                                        // 425\n                                                                                                                      //\n    while (docs.length < options.maxJobs) {                                                                           // 427\n      ids = this.find({                                                                                               // 429\n        type: {                                                                                                       // 431\n          $in: type                                                                                                   // 432\n        },                                                                                                            // 432\n        status: 'ready',                                                                                              // 433\n        runId: null                                                                                                   // 434\n      }, {                                                                                                            // 430\n        sort: {                                                                                                       // 437\n          priority: 1,                                                                                                // 438\n          retryUntil: 1,                                                                                              // 439\n          after: 1                                                                                                    // 440\n        },                                                                                                            // 438\n        limit: options.maxJobs - docs.length,                                                                         // 441\n        fields: {                                                                                                     // 442\n          _id: 1                                                                                                      // 443\n        },                                                                                                            // 443\n        transform: null                                                                                               // 444\n      }).map(function (d) {                                                                                           // 436\n        return d._id;                                                                                                 // 752\n      });                                                                                                             // 429\n                                                                                                                      //\n      if (!((ids != null ? ids.length : void 0) > 0)) {                                                               // 447\n        break;                                                                                                        // 448\n      }                                                                                                               // 756\n                                                                                                                      //\n      mods = {                                                                                                        // 450\n        $set: {                                                                                                       // 451\n          status: 'running',                                                                                          // 452\n          runId: runId,                                                                                               // 453\n          updated: time                                                                                               // 454\n        },                                                                                                            // 452\n        $inc: {                                                                                                       // 455\n          retries: -1,                                                                                                // 456\n          retried: 1                                                                                                  // 457\n        }                                                                                                             // 456\n      };                                                                                                              // 451\n                                                                                                                      //\n      if (logObj = this._logMessage.running(runId)) {                                                                 // 459\n        mods.$push = {                                                                                                // 460\n          log: logObj                                                                                                 // 461\n        };                                                                                                            // 461\n      }                                                                                                               // 772\n                                                                                                                      //\n      if (options.workTimeout != null) {                                                                              // 463\n        mods.$set.workTimeout = options.workTimeout;                                                                  // 464\n        mods.$set.expiresAfter = new Date(time.valueOf() + options.workTimeout);                                      // 465\n      } else {                                                                                                        // 463\n        if (mods.$unset == null) {                                                                                    // 777\n          mods.$unset = {};                                                                                           // 467\n        }                                                                                                             // 779\n                                                                                                                      //\n        mods.$unset.workTimeout = \"\";                                                                                 // 468\n        mods.$unset.expiresAfter = \"\";                                                                                // 469\n      }                                                                                                               // 782\n                                                                                                                      //\n      num = this.update({                                                                                             // 471\n        _id: {                                                                                                        // 473\n          $in: ids                                                                                                    // 474\n        },                                                                                                            // 474\n        status: 'ready',                                                                                              // 475\n        runId: null                                                                                                   // 476\n      }, mods, {                                                                                                      // 472\n        multi: true                                                                                                   // 480\n      });                                                                                                             // 479\n                                                                                                                      //\n      if (num > 0) {                                                                                                  // 484\n        foundDocs = this.find({                                                                                       // 485\n          _id: {                                                                                                      // 487\n            $in: ids                                                                                                  // 488\n          },                                                                                                          // 488\n          runId: runId                                                                                                // 489\n        }, {                                                                                                          // 486\n          fields: {                                                                                                   // 492\n            log: 0,                                                                                                   // 493\n            failures: 0,                                                                                              // 494\n            _private: 0                                                                                               // 495\n          },                                                                                                          // 493\n          transform: null                                                                                             // 496\n        }).fetch();                                                                                                   // 491\n                                                                                                                      //\n        if ((foundDocs != null ? foundDocs.length : void 0) > 0) {                                                    // 500\n          if (this.scrub != null) {                                                                                   // 501\n            foundDocs = function () {                                                                                 // 502\n              var j, len, results;                                                                                    // 809\n              results = [];                                                                                           // 502\n                                                                                                                      //\n              for (j = 0, len = foundDocs.length; j < len; j++) {                                                     // 811\n                d = foundDocs[j];                                                                                     // 812\n                results.push(this.scrub(d));                                                                          // 813\n              }                                                                                                       // 502\n                                                                                                                      //\n              return results;                                                                                         // 815\n            }.call(this);                                                                                             // 816\n          }                                                                                                           // 817\n                                                                                                                      //\n          check(docs, [_validJobDoc()]);                                                                              // 503\n          docs = docs.concat(foundDocs);                                                                              // 504\n        }                                                                                                             // 484\n      }                                                                                                               // 821\n    }                                                                                                                 // 427\n                                                                                                                      //\n    return docs;                                                                                                      // 507\n  };                                                                                                                  // 404\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobRemove = function (ids, options) {                                        // 826\n    var num;                                                                                                          // 510\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 510\n    check(options, Match.Optional({}));                                                                               // 511\n                                                                                                                      //\n    if (options == null) {                                                                                            // 830\n      options = {};                                                                                                   // 512\n    }                                                                                                                 // 832\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 513\n      ids = [ids];                                                                                                    // 514\n    }                                                                                                                 // 835\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 515\n      return false;                                                                                                   // 515\n    }                                                                                                                 // 838\n                                                                                                                      //\n    num = this.remove({                                                                                               // 516\n      _id: {                                                                                                          // 518\n        $in: ids                                                                                                      // 519\n      },                                                                                                              // 519\n      status: {                                                                                                       // 520\n        $in: this.jobStatusRemovable                                                                                  // 521\n      }                                                                                                               // 521\n    });                                                                                                               // 517\n                                                                                                                      //\n    if (num > 0) {                                                                                                    // 524\n      return true;                                                                                                    // 525\n    } else {                                                                                                          // 524\n      console.warn(\"jobRemove failed\");                                                                               // 527\n    }                                                                                                                 // 851\n                                                                                                                      //\n    return false;                                                                                                     // 528\n  };                                                                                                                  // 509\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobPause = function (ids, options) {                                         // 855\n    var logObj, mods, num, time;                                                                                      // 531\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 531\n    check(options, Match.Optional({}));                                                                               // 532\n                                                                                                                      //\n    if (options == null) {                                                                                            // 859\n      options = {};                                                                                                   // 533\n    }                                                                                                                 // 861\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 534\n      ids = [ids];                                                                                                    // 535\n    }                                                                                                                 // 864\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 536\n      return false;                                                                                                   // 536\n    }                                                                                                                 // 867\n                                                                                                                      //\n    time = new Date();                                                                                                // 537\n    mods = {                                                                                                          // 539\n      $set: {                                                                                                         // 540\n        status: \"paused\",                                                                                             // 541\n        updated: time                                                                                                 // 542\n      }                                                                                                               // 541\n    };                                                                                                                // 540\n                                                                                                                      //\n    if (logObj = this._logMessage.paused()) {                                                                         // 544\n      mods.$push = {                                                                                                  // 545\n        log: logObj                                                                                                   // 546\n      };                                                                                                              // 546\n    }                                                                                                                 // 879\n                                                                                                                      //\n    num = this.update({                                                                                               // 548\n      _id: {                                                                                                          // 550\n        $in: ids                                                                                                      // 551\n      },                                                                                                              // 551\n      status: {                                                                                                       // 552\n        $in: this.jobStatusPausable                                                                                   // 553\n      }                                                                                                               // 553\n    }, mods, {                                                                                                        // 549\n      multi: true                                                                                                     // 557\n    });                                                                                                               // 556\n                                                                                                                      //\n    if (num > 0) {                                                                                                    // 560\n      return true;                                                                                                    // 561\n    } else {                                                                                                          // 560\n      console.warn(\"jobPause failed\");                                                                                // 563\n    }                                                                                                                 // 894\n                                                                                                                      //\n    return false;                                                                                                     // 564\n  };                                                                                                                  // 530\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobResume = function (ids, options) {                                        // 898\n    var logObj, mods, num, time;                                                                                      // 567\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 567\n    check(options, Match.Optional({}));                                                                               // 568\n                                                                                                                      //\n    if (options == null) {                                                                                            // 902\n      options = {};                                                                                                   // 569\n    }                                                                                                                 // 904\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 570\n      ids = [ids];                                                                                                    // 571\n    }                                                                                                                 // 907\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 572\n      return false;                                                                                                   // 572\n    }                                                                                                                 // 910\n                                                                                                                      //\n    time = new Date();                                                                                                // 573\n    mods = {                                                                                                          // 574\n      $set: {                                                                                                         // 575\n        status: \"waiting\",                                                                                            // 576\n        updated: time                                                                                                 // 577\n      }                                                                                                               // 576\n    };                                                                                                                // 575\n                                                                                                                      //\n    if (logObj = this._logMessage.resumed()) {                                                                        // 579\n      mods.$push = {                                                                                                  // 580\n        log: logObj                                                                                                   // 581\n      };                                                                                                              // 581\n    }                                                                                                                 // 922\n                                                                                                                      //\n    num = this.update({                                                                                               // 583\n      _id: {                                                                                                          // 585\n        $in: ids                                                                                                      // 586\n      },                                                                                                              // 586\n      status: \"paused\",                                                                                               // 587\n      updated: {                                                                                                      // 588\n        $ne: time                                                                                                     // 589\n      }                                                                                                               // 589\n    }, mods, {                                                                                                        // 584\n      multi: true                                                                                                     // 593\n    });                                                                                                               // 592\n                                                                                                                      //\n    if (num > 0) {                                                                                                    // 596\n      this._DDPMethod_jobReady(ids);                                                                                  // 597\n                                                                                                                      //\n      return true;                                                                                                    // 598\n    } else {                                                                                                          // 596\n      console.warn(\"jobResume failed\");                                                                               // 600\n    }                                                                                                                 // 939\n                                                                                                                      //\n    return false;                                                                                                     // 601\n  };                                                                                                                  // 566\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobReady = function (ids, options) {                                         // 943\n    var l, logObj, mods, now, num, query;                                                                             // 604\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 604\n    check(options, Match.Optional({                                                                                   // 605\n      force: Match.Optional(Boolean),                                                                                 // 606\n      time: Match.Optional(Date)                                                                                      // 607\n    }));                                                                                                              // 606\n                                                                                                                      //\n    if (this.isSimulation) {                                                                                          // 612\n      return;                                                                                                         // 613\n    }                                                                                                                 // 952\n                                                                                                                      //\n    now = new Date();                                                                                                 // 615\n                                                                                                                      //\n    if (options == null) {                                                                                            // 954\n      options = {};                                                                                                   // 617\n    }                                                                                                                 // 956\n                                                                                                                      //\n    if (options.force == null) {                                                                                      // 957\n      options.force = false;                                                                                          // 618\n    }                                                                                                                 // 959\n                                                                                                                      //\n    if (options.time == null) {                                                                                       // 960\n      options.time = now;                                                                                             // 619\n    }                                                                                                                 // 962\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 621\n      ids = [ids];                                                                                                    // 622\n    }                                                                                                                 // 965\n                                                                                                                      //\n    query = {                                                                                                         // 624\n      status: \"waiting\",                                                                                              // 625\n      after: {                                                                                                        // 626\n        $lte: options.time                                                                                            // 627\n      }                                                                                                               // 627\n    };                                                                                                                // 625\n    mods = {                                                                                                          // 629\n      $set: {                                                                                                         // 630\n        status: \"ready\",                                                                                              // 631\n        updated: now                                                                                                  // 632\n      }                                                                                                               // 631\n    };                                                                                                                // 630\n                                                                                                                      //\n    if (ids.length > 0) {                                                                                             // 634\n      query._id = {                                                                                                   // 635\n        $in: ids                                                                                                      // 636\n      };                                                                                                              // 636\n      mods.$set.after = now;                                                                                          // 637\n    }                                                                                                                 // 983\n                                                                                                                      //\n    logObj = [];                                                                                                      // 639\n                                                                                                                      //\n    if (options.force) {                                                                                              // 641\n      mods.$set.depends = [];                                                                                         // 642\n      l = this._logMessage.forced();                                                                                  // 643\n                                                                                                                      //\n      if (l) {                                                                                                        // 644\n        logObj.push(l);                                                                                               // 644\n      }                                                                                                               // 641\n    } else {                                                                                                          // 641\n      query.depends = {                                                                                               // 646\n        $size: 0                                                                                                      // 647\n      };                                                                                                              // 647\n    }                                                                                                                 // 995\n                                                                                                                      //\n    l = this._logMessage.readied();                                                                                   // 649\n                                                                                                                      //\n    if (l) {                                                                                                          // 650\n      logObj.push(l);                                                                                                 // 650\n    }                                                                                                                 // 999\n                                                                                                                      //\n    if (logObj.length > 0) {                                                                                          // 652\n      mods.$push = {                                                                                                  // 653\n        log: {                                                                                                        // 654\n          $each: logObj                                                                                               // 655\n        }                                                                                                             // 655\n      };                                                                                                              // 654\n    }                                                                                                                 // 1006\n                                                                                                                      //\n    num = this.update(query, mods, {                                                                                  // 657\n      multi: true                                                                                                     // 661\n    });                                                                                                               // 660\n                                                                                                                      //\n    if (num > 0) {                                                                                                    // 665\n      return true;                                                                                                    // 666\n    } else {                                                                                                          // 665\n      return false;                                                                                                   // 668\n    }                                                                                                                 // 1014\n  };                                                                                                                  // 603\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobCancel = function (ids, options) {                                        // 1017\n    var cancelIds, depsCancelled, logObj, mods, num, time;                                                            // 671\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 671\n    check(options, Match.Optional({                                                                                   // 672\n      antecedents: Match.Optional(Boolean),                                                                           // 673\n      dependents: Match.Optional(Boolean)                                                                             // 674\n    }));                                                                                                              // 673\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1024\n      options = {};                                                                                                   // 675\n    }                                                                                                                 // 1026\n                                                                                                                      //\n    if (options.antecedents == null) {                                                                                // 1027\n      options.antecedents = false;                                                                                    // 676\n    }                                                                                                                 // 1029\n                                                                                                                      //\n    if (options.dependents == null) {                                                                                 // 1030\n      options.dependents = true;                                                                                      // 677\n    }                                                                                                                 // 1032\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 678\n      ids = [ids];                                                                                                    // 679\n    }                                                                                                                 // 1035\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 680\n      return false;                                                                                                   // 680\n    }                                                                                                                 // 1038\n                                                                                                                      //\n    time = new Date();                                                                                                // 681\n    mods = {                                                                                                          // 683\n      $set: {                                                                                                         // 684\n        status: \"cancelled\",                                                                                          // 685\n        runId: null,                                                                                                  // 686\n        progress: {                                                                                                   // 687\n          completed: 0,                                                                                               // 688\n          total: 1,                                                                                                   // 689\n          percent: 0                                                                                                  // 690\n        },                                                                                                            // 688\n        updated: time                                                                                                 // 691\n      }                                                                                                               // 685\n    };                                                                                                                // 684\n                                                                                                                      //\n    if (logObj = this._logMessage.cancelled()) {                                                                      // 693\n      mods.$push = {                                                                                                  // 694\n        log: logObj                                                                                                   // 695\n      };                                                                                                              // 695\n    }                                                                                                                 // 1056\n                                                                                                                      //\n    num = this.update({                                                                                               // 697\n      _id: {                                                                                                          // 699\n        $in: ids                                                                                                      // 700\n      },                                                                                                              // 700\n      status: {                                                                                                       // 701\n        $in: this.jobStatusCancellable                                                                                // 702\n      }                                                                                                               // 702\n    }, mods, {                                                                                                        // 698\n      multi: true                                                                                                     // 706\n    });                                                                                                               // 705\n    cancelIds = this._idsOfDeps(ids, options.antecedents, options.dependents, this.jobStatusCancellable);             // 710\n    depsCancelled = false;                                                                                            // 712\n                                                                                                                      //\n    if (cancelIds.length > 0) {                                                                                       // 713\n      depsCancelled = this._DDPMethod_jobCancel(cancelIds, options);                                                  // 714\n    }                                                                                                                 // 1071\n                                                                                                                      //\n    if (num > 0 || depsCancelled) {                                                                                   // 716\n      return true;                                                                                                    // 717\n    } else {                                                                                                          // 716\n      console.warn(\"jobCancel failed\");                                                                               // 719\n    }                                                                                                                 // 1076\n                                                                                                                      //\n    return false;                                                                                                     // 720\n  };                                                                                                                  // 670\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobRestart = function (ids, options) {                                       // 1080\n    var depsRestarted, logObj, mods, num, query, restartIds, time;                                                    // 723\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));                                          // 723\n    check(options, Match.Optional({                                                                                   // 724\n      retries: Match.Optional(Match.Where(_validIntGTEZero)),                                                         // 725\n      until: Match.Optional(Date),                                                                                    // 726\n      antecedents: Match.Optional(Boolean),                                                                           // 727\n      dependents: Match.Optional(Boolean)                                                                             // 728\n    }));                                                                                                              // 725\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1089\n      options = {};                                                                                                   // 729\n    }                                                                                                                 // 1091\n                                                                                                                      //\n    if (options.retries == null) {                                                                                    // 1092\n      options.retries = 1;                                                                                            // 730\n    }                                                                                                                 // 1094\n                                                                                                                      //\n    if (options.retries > this.forever) {                                                                             // 731\n      options.retries = this.forever;                                                                                 // 731\n    }                                                                                                                 // 1097\n                                                                                                                      //\n    if (options.dependents == null) {                                                                                 // 1098\n      options.dependents = false;                                                                                     // 732\n    }                                                                                                                 // 1100\n                                                                                                                      //\n    if (options.antecedents == null) {                                                                                // 1101\n      options.antecedents = true;                                                                                     // 733\n    }                                                                                                                 // 1103\n                                                                                                                      //\n    if (_validId(ids)) {                                                                                              // 734\n      ids = [ids];                                                                                                    // 735\n    }                                                                                                                 // 1106\n                                                                                                                      //\n    if (ids.length === 0) {                                                                                           // 736\n      return false;                                                                                                   // 736\n    }                                                                                                                 // 1109\n                                                                                                                      //\n    time = new Date();                                                                                                // 737\n    query = {                                                                                                         // 739\n      _id: {                                                                                                          // 740\n        $in: ids                                                                                                      // 741\n      },                                                                                                              // 741\n      status: {                                                                                                       // 742\n        $in: this.jobStatusRestartable                                                                                // 743\n      }                                                                                                               // 743\n    };                                                                                                                // 740\n    mods = {                                                                                                          // 745\n      $set: {                                                                                                         // 746\n        status: \"waiting\",                                                                                            // 747\n        progress: {                                                                                                   // 748\n          completed: 0,                                                                                               // 749\n          total: 1,                                                                                                   // 750\n          percent: 0                                                                                                  // 751\n        },                                                                                                            // 749\n        updated: time                                                                                                 // 752\n      },                                                                                                              // 747\n      $inc: {                                                                                                         // 753\n        retries: options.retries                                                                                      // 754\n      }                                                                                                               // 754\n    };                                                                                                                // 746\n                                                                                                                      //\n    if (logObj = this._logMessage.restarted()) {                                                                      // 756\n      mods.$push = {                                                                                                  // 757\n        log: logObj                                                                                                   // 758\n      };                                                                                                              // 758\n    }                                                                                                                 // 1137\n                                                                                                                      //\n    if (options.until != null) {                                                                                      // 760\n      mods.$set.retryUntil = options.until;                                                                           // 761\n    }                                                                                                                 // 1140\n                                                                                                                      //\n    num = this.update(query, mods, {                                                                                  // 763\n      multi: true                                                                                                     // 763\n    });                                                                                                               // 763\n    restartIds = this._idsOfDeps(ids, options.antecedents, options.dependents, this.jobStatusRestartable);            // 766\n    depsRestarted = false;                                                                                            // 768\n                                                                                                                      //\n    if (restartIds.length > 0) {                                                                                      // 769\n      depsRestarted = this._DDPMethod_jobRestart(restartIds, options);                                                // 770\n    }                                                                                                                 // 1148\n                                                                                                                      //\n    if (num > 0 || depsRestarted) {                                                                                   // 772\n      this._DDPMethod_jobReady(ids);                                                                                  // 773\n                                                                                                                      //\n      return true;                                                                                                    // 774\n    } else {                                                                                                          // 772\n      console.warn(\"jobRestart failed\");                                                                              // 776\n    }                                                                                                                 // 1154\n                                                                                                                      //\n    return false;                                                                                                     // 777\n  };                                                                                                                  // 722\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobSave = function (doc, options) {                                          // 1158\n    var logObj, mods, newId, next, nextDate, num, ref, time;                                                          // 782\n    check(doc, _validJobDoc());                                                                                       // 782\n    check(options, Match.Optional({                                                                                   // 783\n      cancelRepeats: Match.Optional(Boolean)                                                                          // 784\n    }));                                                                                                              // 784\n    check(doc.status, Match.Where(function (v) {                                                                      // 785\n      return Match.test(v, String) && (v === 'waiting' || v === 'paused');                                            // 1165\n    }));                                                                                                              // 785\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1167\n      options = {};                                                                                                   // 787\n    }                                                                                                                 // 1169\n                                                                                                                      //\n    if (options.cancelRepeats == null) {                                                                              // 1170\n      options.cancelRepeats = false;                                                                                  // 788\n    }                                                                                                                 // 1172\n                                                                                                                      //\n    if (doc.repeats > this.forever) {                                                                                 // 789\n      doc.repeats = this.forever;                                                                                     // 789\n    }                                                                                                                 // 1175\n                                                                                                                      //\n    if (doc.retries > this.forever) {                                                                                 // 790\n      doc.retries = this.forever;                                                                                     // 790\n    }                                                                                                                 // 1178\n                                                                                                                      //\n    time = new Date();                                                                                                // 792\n                                                                                                                      //\n    if (doc.after < time) {                                                                                           // 796\n      doc.after = time;                                                                                               // 796\n    }                                                                                                                 // 1182\n                                                                                                                      //\n    if (doc.retryUntil < time) {                                                                                      // 797\n      doc.retryUntil = time;                                                                                          // 797\n    }                                                                                                                 // 1185\n                                                                                                                      //\n    if (doc.repeatUntil < time) {                                                                                     // 798\n      doc.repeatUntil = time;                                                                                         // 798\n    }                                                                                                                 // 1188\n                                                                                                                      //\n    if (this.later != null && typeof doc.repeatWait !== 'number') {                                                   // 802\n      if (!(next = (ref = this.later) != null ? ref.schedule(doc.repeatWait).next(1, doc.after) : void 0)) {          // 803\n        console.warn(\"No valid available later.js times in schedule after \" + doc.after);                             // 804\n        return null;                                                                                                  // 805\n      }                                                                                                               // 1193\n                                                                                                                      //\n      nextDate = new Date(next);                                                                                      // 806\n                                                                                                                      //\n      if (!(nextDate <= doc.repeatUntil)) {                                                                           // 807\n        console.warn(\"No valid available later.js times in schedule before \" + doc.repeatUntil);                      // 808\n        return null;                                                                                                  // 809\n      }                                                                                                               // 1198\n                                                                                                                      //\n      doc.after = nextDate;                                                                                           // 810\n    } else if (this.later == null && doc.repeatWait !== 'number') {                                                   // 802\n      console.warn(\"Later.js not loaded...\");                                                                         // 812\n      return null;                                                                                                    // 813\n    }                                                                                                                 // 1203\n                                                                                                                      //\n    if (doc._id) {                                                                                                    // 815\n      mods = {                                                                                                        // 817\n        $set: {                                                                                                       // 818\n          status: 'waiting',                                                                                          // 819\n          data: doc.data,                                                                                             // 820\n          retries: doc.retries,                                                                                       // 821\n          repeatRetries: doc.repeatRetries != null ? doc.repeatRetries : doc.retries + doc.retried,                   // 822\n          retryUntil: doc.retryUntil,                                                                                 // 823\n          retryWait: doc.retryWait,                                                                                   // 824\n          retryBackoff: doc.retryBackoff,                                                                             // 825\n          repeats: doc.repeats,                                                                                       // 826\n          repeatUntil: doc.repeatUntil,                                                                               // 827\n          repeatWait: doc.repeatWait,                                                                                 // 828\n          depends: doc.depends,                                                                                       // 829\n          priority: doc.priority,                                                                                     // 830\n          after: doc.after,                                                                                           // 831\n          updated: time                                                                                               // 832\n        }                                                                                                             // 819\n      };                                                                                                              // 818\n                                                                                                                      //\n      if (logObj = this._logMessage.resubmitted()) {                                                                  // 834\n        mods.$push = {                                                                                                // 835\n          log: logObj                                                                                                 // 836\n        };                                                                                                            // 836\n      }                                                                                                               // 1227\n                                                                                                                      //\n      num = this.update({                                                                                             // 838\n        _id: doc._id,                                                                                                 // 840\n        status: 'paused',                                                                                             // 841\n        runId: null                                                                                                   // 842\n      }, mods);                                                                                                       // 839\n                                                                                                                      //\n      if (num) {                                                                                                      // 847\n        this._DDPMethod_jobReady(doc._id);                                                                            // 848\n                                                                                                                      //\n        return doc._id;                                                                                               // 849\n      } else {                                                                                                        // 847\n        return null;                                                                                                  // 851\n      }                                                                                                               // 815\n    } else {                                                                                                          // 815\n      if (doc.repeats === this.forever && options.cancelRepeats) {                                                    // 853\n        this.find({                                                                                                   // 855\n          type: doc.type,                                                                                             // 857\n          status: {                                                                                                   // 858\n            $in: this.jobStatusCancellable                                                                            // 859\n          }                                                                                                           // 859\n        }, {                                                                                                          // 856\n          transform: null                                                                                             // 862\n        }).forEach(function (_this) {                                                                                 // 861\n          return function (d) {                                                                                       // 1249\n            return _this._DDPMethod_jobCancel(d._id, {});                                                             // 1250\n          };                                                                                                          // 864\n        }(this));                                                                                                     // 864\n      }                                                                                                               // 1253\n                                                                                                                      //\n      doc.created = time;                                                                                             // 865\n      doc.log.push(this._logMessage.submitted());                                                                     // 866\n      newId = this.insert(doc);                                                                                       // 867\n                                                                                                                      //\n      this._DDPMethod_jobReady(newId);                                                                                // 868\n                                                                                                                      //\n      return newId;                                                                                                   // 869\n    }                                                                                                                 // 1259\n  };                                                                                                                  // 781\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobProgress = function (id, runId, completed, total, options) {              // 1262\n    var job, mods, num, progress, time;                                                                               // 874\n    check(id, Match.Where(_validId));                                                                                 // 874\n    check(runId, Match.Where(_validId));                                                                              // 875\n    check(completed, Match.Where(_validNumGTEZero));                                                                  // 876\n    check(total, Match.Where(_validNumGTZero));                                                                       // 877\n    check(options, Match.Optional({}));                                                                               // 878\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1269\n      options = {};                                                                                                   // 879\n    }                                                                                                                 // 1271\n                                                                                                                      //\n    if (this.stopped) {                                                                                               // 882\n      return null;                                                                                                    // 883\n    }                                                                                                                 // 1274\n                                                                                                                      //\n    progress = {                                                                                                      // 885\n      completed: completed,                                                                                           // 886\n      total: total,                                                                                                   // 887\n      percent: 100 * completed / total                                                                                // 888\n    };                                                                                                                // 886\n    check(progress, Match.Where(function (v) {                                                                        // 890\n      var ref;                                                                                                        // 891\n      return v.total >= v.completed && 0 <= (ref = v.percent) && ref <= 100;                                          // 1282\n    }));                                                                                                              // 890\n    time = new Date();                                                                                                // 893\n    job = this.findOne({                                                                                              // 895\n      _id: id                                                                                                         // 895\n    }, {                                                                                                              // 895\n      fields: {                                                                                                       // 895\n        workTimeout: 1                                                                                                // 895\n      }                                                                                                               // 895\n    });                                                                                                               // 895\n    mods = {                                                                                                          // 897\n      $set: {                                                                                                         // 898\n        progress: progress,                                                                                           // 899\n        updated: time                                                                                                 // 900\n      }                                                                                                               // 899\n    };                                                                                                                // 898\n                                                                                                                      //\n    if ((job != null ? job.workTimeout : void 0) != null) {                                                           // 902\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout);                                            // 903\n    }                                                                                                                 // 1300\n                                                                                                                      //\n    num = this.update({                                                                                               // 905\n      _id: id,                                                                                                        // 907\n      runId: runId,                                                                                                   // 908\n      status: \"running\"                                                                                               // 909\n    }, mods);                                                                                                         // 906\n                                                                                                                      //\n    if (num === 1) {                                                                                                  // 914\n      return true;                                                                                                    // 915\n    } else {                                                                                                          // 914\n      console.warn(\"jobProgress failed\");                                                                             // 917\n    }                                                                                                                 // 1310\n                                                                                                                      //\n    return false;                                                                                                     // 918\n  };                                                                                                                  // 873\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobLog = function (id, runId, message, options) {                            // 1314\n    var job, logObj, mods, num, ref, time;                                                                            // 921\n    check(id, Match.Where(_validId));                                                                                 // 921\n    check(runId, Match.OneOf(Match.Where(_validId), null));                                                           // 922\n    check(message, String);                                                                                           // 923\n    check(options, Match.Optional({                                                                                   // 924\n      level: Match.Optional(Match.Where(_validLogLevel)),                                                             // 925\n      data: Match.Optional(Object)                                                                                    // 926\n    }));                                                                                                              // 925\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1323\n      options = {};                                                                                                   // 927\n    }                                                                                                                 // 1325\n                                                                                                                      //\n    time = new Date();                                                                                                // 928\n    logObj = {                                                                                                        // 929\n      time: time,                                                                                                     // 930\n      runId: runId,                                                                                                   // 931\n      level: (ref = options.level) != null ? ref : 'info',                                                            // 932\n      message: message                                                                                                // 933\n    };                                                                                                                // 930\n                                                                                                                      //\n    if (options.data != null) {                                                                                       // 934\n      logObj.data = options.data;                                                                                     // 934\n    }                                                                                                                 // 1335\n                                                                                                                      //\n    job = this.findOne({                                                                                              // 936\n      _id: id                                                                                                         // 936\n    }, {                                                                                                              // 936\n      fields: {                                                                                                       // 936\n        status: 1,                                                                                                    // 936\n        workTimeout: 1                                                                                                // 936\n      }                                                                                                               // 936\n    });                                                                                                               // 936\n    mods = {                                                                                                          // 938\n      $push: {                                                                                                        // 939\n        log: logObj                                                                                                   // 940\n      },                                                                                                              // 940\n      $set: {                                                                                                         // 941\n        updated: time                                                                                                 // 942\n      }                                                                                                               // 942\n    };                                                                                                                // 939\n                                                                                                                      //\n    if ((job != null ? job.workTimeout : void 0) != null && job.status === 'running') {                               // 944\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout);                                            // 945\n    }                                                                                                                 // 1354\n                                                                                                                      //\n    num = this.update({                                                                                               // 947\n      _id: id                                                                                                         // 949\n    }, mods);                                                                                                         // 948\n                                                                                                                      //\n    if (num === 1) {                                                                                                  // 953\n      return true;                                                                                                    // 954\n    } else {                                                                                                          // 953\n      console.warn(\"jobLog failed\");                                                                                  // 956\n    }                                                                                                                 // 1362\n                                                                                                                      //\n    return false;                                                                                                     // 957\n  };                                                                                                                  // 920\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobRerun = function (id, options) {                                          // 1366\n    var doc;                                                                                                          // 960\n    check(id, Match.Where(_validId));                                                                                 // 960\n    check(options, Match.Optional({                                                                                   // 961\n      repeats: Match.Optional(Match.Where(_validIntGTEZero)),                                                         // 962\n      until: Match.Optional(Date),                                                                                    // 963\n      wait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj))                                 // 964\n    }));                                                                                                              // 962\n    doc = this.findOne({                                                                                              // 966\n      _id: id,                                                                                                        // 968\n      status: \"completed\"                                                                                             // 969\n    }, {                                                                                                              // 967\n      fields: {                                                                                                       // 972\n        result: 0,                                                                                                    // 973\n        failures: 0,                                                                                                  // 974\n        log: 0,                                                                                                       // 975\n        progress: 0,                                                                                                  // 976\n        updated: 0,                                                                                                   // 977\n        after: 0,                                                                                                     // 978\n        status: 0                                                                                                     // 979\n      },                                                                                                              // 973\n      transform: null                                                                                                 // 980\n    });                                                                                                               // 971\n                                                                                                                      //\n    if (doc != null) {                                                                                                // 984\n      if (options == null) {                                                                                          // 1390\n        options = {};                                                                                                 // 985\n      }                                                                                                               // 1392\n                                                                                                                      //\n      if (options.repeats == null) {                                                                                  // 1393\n        options.repeats = 0;                                                                                          // 986\n      }                                                                                                               // 1395\n                                                                                                                      //\n      if (options.repeats > this.forever) {                                                                           // 987\n        options.repeats = this.forever;                                                                               // 987\n      }                                                                                                               // 1398\n                                                                                                                      //\n      if (options.until == null) {                                                                                    // 1399\n        options.until = doc.repeatUntil;                                                                              // 988\n      }                                                                                                               // 1401\n                                                                                                                      //\n      if (options.wait == null) {                                                                                     // 1402\n        options.wait = 0;                                                                                             // 989\n      }                                                                                                               // 1404\n                                                                                                                      //\n      return this._rerun_job(doc, options.repeats, options.wait, options.until);                                      // 990\n    }                                                                                                                 // 1406\n                                                                                                                      //\n    return false;                                                                                                     // 992\n  };                                                                                                                  // 959\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobDone = function (id, runId, result, options) {                            // 1410\n    var after, d, doc, ids, jobId, logObj, mods, n, next, num, ref, time, wait;                                       // 995\n    check(id, Match.Where(_validId));                                                                                 // 995\n    check(runId, Match.Where(_validId));                                                                              // 996\n    check(result, Object);                                                                                            // 997\n    check(options, Match.Optional({                                                                                   // 998\n      repeatId: Match.Optional(Boolean),                                                                              // 999\n      delayDeps: Match.Optional(Match.Where(_validIntGTEZero))                                                        // 1000\n    }));                                                                                                              // 999\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1419\n      options = {                                                                                                     // 1002\n        repeatId: false                                                                                               // 1002\n      };                                                                                                              // 1002\n    }                                                                                                                 // 1423\n                                                                                                                      //\n    time = new Date();                                                                                                // 1003\n    doc = this.findOne({                                                                                              // 1004\n      _id: id,                                                                                                        // 1006\n      runId: runId,                                                                                                   // 1007\n      status: \"running\"                                                                                               // 1008\n    }, {                                                                                                              // 1005\n      fields: {                                                                                                       // 1011\n        log: 0,                                                                                                       // 1012\n        failures: 0,                                                                                                  // 1013\n        progress: 0,                                                                                                  // 1014\n        updated: 0,                                                                                                   // 1015\n        after: 0,                                                                                                     // 1016\n        status: 0                                                                                                     // 1017\n      },                                                                                                              // 1012\n      transform: null                                                                                                 // 1018\n    });                                                                                                               // 1010\n                                                                                                                      //\n    if (doc == null) {                                                                                                // 1021\n      if (!this.isSimulation) {                                                                                       // 1022\n        console.warn(\"Running job not found\", id, runId);                                                             // 1023\n      }                                                                                                               // 1443\n                                                                                                                      //\n      return false;                                                                                                   // 1024\n    }                                                                                                                 // 1445\n                                                                                                                      //\n    mods = {                                                                                                          // 1026\n      $set: {                                                                                                         // 1027\n        status: \"completed\",                                                                                          // 1028\n        result: result,                                                                                               // 1029\n        progress: {                                                                                                   // 1030\n          completed: 1,                                                                                               // 1031\n          total: 1,                                                                                                   // 1032\n          percent: 100                                                                                                // 1033\n        },                                                                                                            // 1031\n        updated: time                                                                                                 // 1034\n      }                                                                                                               // 1028\n    };                                                                                                                // 1027\n                                                                                                                      //\n    if (logObj = this._logMessage.completed(runId)) {                                                                 // 1036\n      mods.$push = {                                                                                                  // 1037\n        log: logObj                                                                                                   // 1038\n      };                                                                                                              // 1038\n    }                                                                                                                 // 1462\n                                                                                                                      //\n    num = this.update({                                                                                               // 1040\n      _id: id,                                                                                                        // 1042\n      runId: runId,                                                                                                   // 1043\n      status: \"running\"                                                                                               // 1044\n    }, mods);                                                                                                         // 1041\n                                                                                                                      //\n    if (num === 1) {                                                                                                  // 1048\n      if (doc.repeats > 0) {                                                                                          // 1049\n        if (typeof doc.repeatWait === 'number') {                                                                     // 1050\n          if (doc.repeatUntil - doc.repeatWait >= time) {                                                             // 1051\n            jobId = this._rerun_job(doc);                                                                             // 1052\n          }                                                                                                           // 1050\n        } else {                                                                                                      // 1050\n          next = (ref = this.later) != null ? ref.schedule(doc.repeatWait).next(2) : void 0;                          // 1056\n                                                                                                                      //\n          if (next && next.length > 0) {                                                                              // 1057\n            d = new Date(next[0]);                                                                                    // 1058\n                                                                                                                      //\n            if (d - time > 500 || next.length > 1) {                                                                  // 1059\n              if (d - time <= 500) {                                                                                  // 1060\n                d = new Date(next[1]);                                                                                // 1061\n              } else {}                                                                                               // 1060\n                                                                                                                      //\n              wait = d - time;                                                                                        // 1063\n                                                                                                                      //\n              if (doc.repeatUntil - wait >= time) {                                                                   // 1064\n                jobId = this._rerun_job(doc, doc.repeats - 1, wait);                                                  // 1065\n              }                                                                                                       // 1059\n            }                                                                                                         // 1057\n          }                                                                                                           // 1050\n        }                                                                                                             // 1049\n      }                                                                                                               // 1491\n                                                                                                                      //\n      ids = this.find({                                                                                               // 1068\n        depends: {                                                                                                    // 1070\n          $all: [id]                                                                                                  // 1071\n        }                                                                                                             // 1071\n      }, {                                                                                                            // 1069\n        transform: null,                                                                                              // 1074\n        fields: {                                                                                                     // 1075\n          _id: 1                                                                                                      // 1076\n        }                                                                                                             // 1076\n      }).fetch().map(function (_this) {                                                                               // 1073\n        return function (d) {                                                                                         // 1502\n          return d._id;                                                                                               // 1503\n        };                                                                                                            // 1078\n      }(this));                                                                                                       // 1078\n                                                                                                                      //\n      if (ids.length > 0) {                                                                                           // 1080\n        mods = {                                                                                                      // 1082\n          $pull: {                                                                                                    // 1083\n            depends: id                                                                                               // 1084\n          },                                                                                                          // 1084\n          $push: {                                                                                                    // 1085\n            resolved: id                                                                                              // 1086\n          }                                                                                                           // 1086\n        };                                                                                                            // 1083\n                                                                                                                      //\n        if (options.delayDeps != null) {                                                                              // 1088\n          after = new Date(time.valueOf() + options.delayDeps);                                                       // 1089\n          mods.$max = {                                                                                               // 1090\n            after: after                                                                                              // 1091\n          };                                                                                                          // 1091\n        }                                                                                                             // 1520\n                                                                                                                      //\n        if (logObj = this._logMessage.resolved(id, runId)) {                                                          // 1093\n          mods.$push.log = logObj;                                                                                    // 1094\n        }                                                                                                             // 1523\n                                                                                                                      //\n        n = this.update({                                                                                             // 1096\n          _id: {                                                                                                      // 1098\n            $in: ids                                                                                                  // 1099\n          }                                                                                                           // 1099\n        }, mods, {                                                                                                    // 1097\n          multi: true                                                                                                 // 1103\n        });                                                                                                           // 1102\n                                                                                                                      //\n        if (n !== ids.length) {                                                                                       // 1106\n          console.warn(\"Not all dependent jobs were resolved \" + ids.length + \" > \" + n);                             // 1107\n        }                                                                                                             // 1533\n                                                                                                                      //\n        this._DDPMethod_jobReady(ids);                                                                                // 1109\n      }                                                                                                               // 1535\n                                                                                                                      //\n      if (options.repeatId && jobId != null) {                                                                        // 1110\n        return jobId;                                                                                                 // 1111\n      } else {                                                                                                        // 1110\n        return true;                                                                                                  // 1113\n      }                                                                                                               // 1048\n    } else {                                                                                                          // 1048\n      console.warn(\"jobDone failed\");                                                                                 // 1115\n    }                                                                                                                 // 1543\n                                                                                                                      //\n    return false;                                                                                                     // 1116\n  };                                                                                                                  // 994\n                                                                                                                      //\n  JobCollectionBase.prototype._DDPMethod_jobFail = function (id, runId, err, options) {                               // 1547\n    var after, doc, logObj, mods, newStatus, num, time;                                                               // 1119\n    check(id, Match.Where(_validId));                                                                                 // 1119\n    check(runId, Match.Where(_validId));                                                                              // 1120\n    check(err, Object);                                                                                               // 1121\n    check(options, Match.Optional({                                                                                   // 1122\n      fatal: Match.Optional(Boolean)                                                                                  // 1123\n    }));                                                                                                              // 1123\n                                                                                                                      //\n    if (options == null) {                                                                                            // 1555\n      options = {};                                                                                                   // 1125\n    }                                                                                                                 // 1557\n                                                                                                                      //\n    if (options.fatal == null) {                                                                                      // 1558\n      options.fatal = false;                                                                                          // 1126\n    }                                                                                                                 // 1560\n                                                                                                                      //\n    time = new Date();                                                                                                // 1128\n    doc = this.findOne({                                                                                              // 1129\n      _id: id,                                                                                                        // 1131\n      runId: runId,                                                                                                   // 1132\n      status: \"running\"                                                                                               // 1133\n    }, {                                                                                                              // 1130\n      fields: {                                                                                                       // 1136\n        log: 0,                                                                                                       // 1137\n        failures: 0,                                                                                                  // 1138\n        progress: 0,                                                                                                  // 1139\n        updated: 0,                                                                                                   // 1140\n        after: 0,                                                                                                     // 1141\n        runId: 0,                                                                                                     // 1142\n        status: 0                                                                                                     // 1143\n      },                                                                                                              // 1137\n      transform: null                                                                                                 // 1144\n    });                                                                                                               // 1135\n                                                                                                                      //\n    if (doc == null) {                                                                                                // 1147\n      if (!this.isSimulation) {                                                                                       // 1148\n        console.warn(\"Running job not found\", id, runId);                                                             // 1149\n      }                                                                                                               // 1581\n                                                                                                                      //\n      return false;                                                                                                   // 1150\n    }                                                                                                                 // 1583\n                                                                                                                      //\n    after = function () {                                                                                             // 1152\n      switch (doc.retryBackoff) {                                                                                     // 1152\n        case 'exponential':                                                                                           // 1152\n          return new Date(time.valueOf() + doc.retryWait * Math.pow(2, doc.retried - 1));                             // 1587\n                                                                                                                      //\n        default:                                                                                                      // 1152\n          return new Date(time.valueOf() + doc.retryWait);                                                            // 1589\n      }                                                                                                               // 1152\n    }();                                                                                                              // 1591\n                                                                                                                      //\n    newStatus = !options.fatal && doc.retries > 0 && doc.retryUntil >= after ? \"waiting\" : \"failed\";                  // 1158\n    err.runId = runId;                                                                                                // 1162\n    mods = {                                                                                                          // 1164\n      $set: {                                                                                                         // 1165\n        status: newStatus,                                                                                            // 1166\n        runId: null,                                                                                                  // 1167\n        after: after,                                                                                                 // 1168\n        progress: {                                                                                                   // 1169\n          completed: 0,                                                                                               // 1170\n          total: 1,                                                                                                   // 1171\n          percent: 0                                                                                                  // 1172\n        },                                                                                                            // 1170\n        updated: time                                                                                                 // 1173\n      },                                                                                                              // 1166\n      $push: {                                                                                                        // 1174\n        failures: err                                                                                                 // 1175\n      }                                                                                                               // 1175\n    };                                                                                                                // 1165\n                                                                                                                      //\n    if (logObj = this._logMessage.failed(runId, newStatus === 'failed', err)) {                                       // 1178\n      mods.$push.log = logObj;                                                                                        // 1179\n    }                                                                                                                 // 1612\n                                                                                                                      //\n    num = this.update({                                                                                               // 1181\n      _id: id,                                                                                                        // 1183\n      runId: runId,                                                                                                   // 1184\n      status: \"running\"                                                                                               // 1185\n    }, mods);                                                                                                         // 1182\n                                                                                                                      //\n    if (newStatus === \"failed\" && num === 1) {                                                                        // 1189\n      this.find({                                                                                                     // 1191\n        depends: {                                                                                                    // 1193\n          $all: [id]                                                                                                  // 1194\n        }                                                                                                             // 1194\n      }, {                                                                                                            // 1192\n        transform: null                                                                                               // 1197\n      }).forEach(function (_this) {                                                                                   // 1196\n        return function (d) {                                                                                         // 1626\n          return _this._DDPMethod_jobCancel(d._id);                                                                   // 1627\n        };                                                                                                            // 1199\n      }(this));                                                                                                       // 1199\n    }                                                                                                                 // 1630\n                                                                                                                      //\n    if (num === 1) {                                                                                                  // 1200\n      return true;                                                                                                    // 1201\n    } else {                                                                                                          // 1200\n      console.warn(\"jobFail failed\");                                                                                 // 1203\n    }                                                                                                                 // 1635\n                                                                                                                      //\n    return false;                                                                                                     // 1204\n  };                                                                                                                  // 1118\n                                                                                                                      //\n  return JobCollectionBase;                                                                                           // 1639\n}(Mongo.Collection);                                                                                                  // 1641\n                                                                                                                      //\nshare.JobCollectionBase = JobCollectionBase;                                                                          // 1208\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/vsivsi_job-collection/src/server.coffee.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n                                                                                                                      //\nvar eventEmitter,                                                                                                     // 7\n    userHelper,                                                                                                       // 7\n    bind = function (fn, me) {                                                                                        // 7\n  return function () {                                                                                                // 7\n    return fn.apply(me, arguments);                                                                                   // 7\n  };                                                                                                                  // 7\n},                                                                                                                    // 7\n    extend = function (child, parent) {                                                                               // 7\n  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {                                                   // 3\n    if (hasProp.call(parent, key)) child[key] = parent[key];                                                          // 3\n  }                                                                                                                   // 3\n                                                                                                                      //\n  function ctor() {                                                                                                   // 3\n    this.constructor = child;                                                                                         // 3\n  }                                                                                                                   // 3\n                                                                                                                      //\n  ctor.prototype = parent.prototype;                                                                                  // 3\n  child.prototype = new ctor();                                                                                       // 3\n  child.__super__ = parent.prototype;                                                                                 // 3\n  return child;                                                                                                       // 3\n},                                                                                                                    // 3\n    hasProp = {}.hasOwnProperty,                                                                                      // 7\n    slice = [].slice,                                                                                                 // 7\n    indexOf = [].indexOf || function (item) {                                                                         // 7\n  for (var i = 0, l = this.length; i < l; i++) {                                                                      // 6\n    if (i in this && this[i] === item) return i;                                                                      // 6\n  }                                                                                                                   // 6\n                                                                                                                      //\n  return -1;                                                                                                          // 6\n};                                                                                                                    // 6\n                                                                                                                      //\nif (Meteor.isServer) {                                                                                                // 7\n  eventEmitter = Npm.require('events').EventEmitter;                                                                  // 9\n                                                                                                                      //\n  userHelper = function (user, connection) {                                                                          // 11\n    var ret;                                                                                                          // 12\n    ret = user != null ? user : \"[UNAUTHENTICATED]\";                                                                  // 12\n                                                                                                                      //\n    if (!connection) {                                                                                                // 13\n      ret = \"[SERVER]\";                                                                                               // 14\n    }                                                                                                                 // 15\n                                                                                                                      //\n    return ret;                                                                                                       // 16\n  };                                                                                                                  // 11\n                                                                                                                      //\n  JobCollection = function (superClass) {                                                                             // 20\n    extend(JobCollection, superClass);                                                                                // 19\n                                                                                                                      //\n    function JobCollection(root, options) {                                                                           // 22\n      var foo, i, len, level, localMethods, methodFunction, methodName, ref;                                          // 23\n                                                                                                                      //\n      if (root == null) {                                                                                             // 23\n        root = 'queue';                                                                                               // 22\n      }                                                                                                               // 25\n                                                                                                                      //\n      if (options == null) {                                                                                          // 26\n        options = {};                                                                                                 // 22\n      }                                                                                                               // 28\n                                                                                                                      //\n      this._emit = bind(this._emit, this);                                                                            // 29\n      this._toLog = bind(this._toLog, this);                                                                          // 30\n      this._onCall = bind(this._onCall, this);                                                                        // 31\n      this._onError = bind(this._onError, this);                                                                      // 32\n                                                                                                                      //\n      if (!(this instanceof JobCollection)) {                                                                         // 23\n        return new JobCollection(root, options);                                                                      // 24\n      }                                                                                                               // 35\n                                                                                                                      //\n      JobCollection.__super__.constructor.call(this, root, options);                                                  // 27\n                                                                                                                      //\n      this.events = new eventEmitter();                                                                               // 29\n      this._errorListener = this.events.on('error', this._onError);                                                   // 31\n      this._methodErrorDispatch = this.events.on('error', function (_this) {                                          // 34\n        return function (msg) {                                                                                       // 40\n          return _this.events.emit(msg.method, msg);                                                                  // 41\n        };                                                                                                            // 34\n      }(this));                                                                                                       // 34\n      this._callListener = this.events.on('call', this._onCall);                                                      // 37\n      this._methodEventDispatch = this.events.on('call', function (_this) {                                           // 40\n        return function (msg) {                                                                                       // 46\n          return _this.events.emit(msg.method, msg);                                                                  // 47\n        };                                                                                                            // 40\n      }(this));                                                                                                       // 40\n      this.stopped = true;                                                                                            // 43\n                                                                                                                      //\n      share.JobCollectionBase.__super__.deny.bind(this)({                                                             // 46\n        update: function (_this) {                                                                                    // 47\n          return function () {                                                                                        // 53\n            return true;                                                                                              // 54\n          };                                                                                                          // 47\n        }(this),                                                                                                      // 47\n        insert: function (_this) {                                                                                    // 48\n          return function () {                                                                                        // 58\n            return true;                                                                                              // 59\n          };                                                                                                          // 48\n        }(this),                                                                                                      // 48\n        remove: function (_this) {                                                                                    // 49\n          return function () {                                                                                        // 63\n            return true;                                                                                              // 64\n          };                                                                                                          // 49\n        }(this)                                                                                                       // 49\n      });                                                                                                             // 47\n                                                                                                                      //\n      this.promote();                                                                                                 // 51\n      this.logStream = null;                                                                                          // 53\n      this.allows = {};                                                                                               // 55\n      this.denys = {};                                                                                                // 56\n      ref = this.ddpPermissionLevels.concat(this.ddpMethods);                                                         // 59\n                                                                                                                      //\n      for (i = 0, len = ref.length; i < len; i++) {                                                                   // 59\n        level = ref[i];                                                                                               // 74\n        this.allows[level] = [];                                                                                      // 60\n        this.denys[level] = [];                                                                                       // 61\n      }                                                                                                               // 59\n                                                                                                                      //\n      if (options.connection == null) {                                                                               // 65\n        this._ensureIndex({                                                                                           // 67\n          type: 1,                                                                                                    // 67\n          status: 1                                                                                                   // 67\n        });                                                                                                           // 67\n                                                                                                                      //\n        this._ensureIndex({                                                                                           // 68\n          priority: 1,                                                                                                // 68\n          retryUntil: 1,                                                                                              // 68\n          after: 1                                                                                                    // 68\n        });                                                                                                           // 68\n                                                                                                                      //\n        this.isSimulation = false;                                                                                    // 69\n        localMethods = this._generateMethods();                                                                       // 70\n                                                                                                                      //\n        if (this._localServerMethods == null) {                                                                       // 90\n          this._localServerMethods = {};                                                                              // 71\n        }                                                                                                             // 92\n                                                                                                                      //\n        for (methodName in meteorBabelHelpers.sanitizeForInObject(localMethods)) {                                    // 72\n          methodFunction = localMethods[methodName];                                                                  // 94\n          this._localServerMethods[methodName] = methodFunction;                                                      // 72\n        }                                                                                                             // 72\n                                                                                                                      //\n        foo = this;                                                                                                   // 73\n                                                                                                                      //\n        this._ddp_apply = function (_this) {                                                                          // 74\n          return function (name, params, cb) {                                                                        // 99\n            if (cb != null) {                                                                                         // 75\n              return Meteor.setTimeout(function () {                                                                  // 101\n                var e, err, res;                                                                                      // 77\n                err = null;                                                                                           // 77\n                res = null;                                                                                           // 78\n                                                                                                                      //\n                try {                                                                                                 // 79\n                  res = _this._localServerMethods[name].apply(_this, params);                                         // 80\n                } catch (error) {                                                                                     // 79\n                  e = error;                                                                                          // 81\n                  err = e;                                                                                            // 82\n                }                                                                                                     // 110\n                                                                                                                      //\n                return cb(err, res);                                                                                  // 111\n              }, 0);                                                                                                  // 76\n            } else {                                                                                                  // 75\n              return _this._localServerMethods[name].apply(_this, params);                                            // 114\n            }                                                                                                         // 115\n          };                                                                                                          // 74\n        }(this);                                                                                                      // 74\n                                                                                                                      //\n        Job._setDDPApply(this._ddp_apply, root);                                                                      // 87\n                                                                                                                      //\n        Meteor.methods(localMethods);                                                                                 // 89\n      }                                                                                                               // 120\n    }                                                                                                                 // 22\n                                                                                                                      //\n    JobCollection.prototype._onError = function (msg) {                                                               // 123\n      var user;                                                                                                       // 92\n      user = userHelper(msg.userId, msg.connection);                                                                  // 92\n      return this._toLog(user, msg.method, \"\" + msg.error);                                                           // 126\n    };                                                                                                                // 91\n                                                                                                                      //\n    JobCollection.prototype._onCall = function (msg) {                                                                // 129\n      var user;                                                                                                       // 96\n      user = userHelper(msg.userId, msg.connection);                                                                  // 96\n                                                                                                                      //\n      this._toLog(user, msg.method, \"params: \" + JSON.stringify(msg.params));                                         // 97\n                                                                                                                      //\n      return this._toLog(user, msg.method, \"returned: \" + JSON.stringify(msg.returnVal));                             // 133\n    };                                                                                                                // 95\n                                                                                                                      //\n    JobCollection.prototype._toLog = function (userId, method, message) {                                             // 136\n      var ref;                                                                                                        // 101\n      return (ref = this.logStream) != null ? ref.write(new Date() + \", \" + userId + \", \" + method + \", \" + message + \"\\n\") : void 0;\n    };                                                                                                                // 100\n                                                                                                                      //\n    JobCollection.prototype._emit = function () {                                                                     // 141\n      var connection, err, method, params, ret, userId;                                                               // 105\n      method = arguments[0], connection = arguments[1], userId = arguments[2], err = arguments[3], ret = arguments[4], params = 6 <= arguments.length ? slice.call(arguments, 5) : [];\n                                                                                                                      //\n      if (err) {                                                                                                      // 105\n        return this.events.emit('error', {                                                                            // 145\n          error: err,                                                                                                 // 107\n          method: method,                                                                                             // 108\n          connection: connection,                                                                                     // 109\n          userId: userId,                                                                                             // 110\n          params: params,                                                                                             // 111\n          returnVal: null                                                                                             // 112\n        });                                                                                                           // 107\n      } else {                                                                                                        // 105\n        return this.events.emit('call', {                                                                             // 154\n          error: null,                                                                                                // 115\n          method: method,                                                                                             // 116\n          connection: connection,                                                                                     // 117\n          userId: userId,                                                                                             // 118\n          params: params,                                                                                             // 119\n          returnVal: ret                                                                                              // 120\n        });                                                                                                           // 115\n      }                                                                                                               // 162\n    };                                                                                                                // 104\n                                                                                                                      //\n    JobCollection.prototype._methodWrapper = function (method, func) {                                                // 165\n      var myTypeof, permitted, self;                                                                                  // 123\n      self = this;                                                                                                    // 123\n                                                                                                                      //\n      myTypeof = function (val) {                                                                                     // 124\n        var type;                                                                                                     // 125\n        type = typeof val === \"undefined\" ? \"undefined\" : _typeof(val);                                               // 125\n                                                                                                                      //\n        if (type === 'object' && type instanceof Array) {                                                             // 126\n          type = 'array';                                                                                             // 126\n        }                                                                                                             // 173\n                                                                                                                      //\n        return type;                                                                                                  // 127\n      };                                                                                                              // 124\n                                                                                                                      //\n      permitted = function (_this) {                                                                                  // 128\n        return function (userId, params) {                                                                            // 177\n          var performAllTests, performTest;                                                                           // 129\n                                                                                                                      //\n          performTest = function (tests) {                                                                            // 129\n            var i, len, result, test;                                                                                 // 130\n            result = false;                                                                                           // 130\n                                                                                                                      //\n            for (i = 0, len = tests.length; i < len; i++) {                                                           // 131\n              test = tests[i];                                                                                        // 183\n                                                                                                                      //\n              if (result === false) {                                                                                 // 184\n                result = result || function () {                                                                      // 132\n                  switch (myTypeof(test)) {                                                                           // 132\n                    case 'array':                                                                                     // 132\n                      return indexOf.call(test, userId) >= 0;                                                         // 188\n                                                                                                                      //\n                    case 'function':                                                                                  // 132\n                      return test(userId, method, params);                                                            // 190\n                                                                                                                      //\n                    default:                                                                                          // 132\n                      return false;                                                                                   // 192\n                  }                                                                                                   // 132\n                }();                                                                                                  // 194\n              }                                                                                                       // 195\n            }                                                                                                         // 131\n                                                                                                                      //\n            return result;                                                                                            // 136\n          };                                                                                                          // 129\n                                                                                                                      //\n          performAllTests = function (allTests) {                                                                     // 137\n            var i, len, ref, result, t;                                                                               // 138\n            result = false;                                                                                           // 138\n            ref = _this.ddpMethodPermissions[method];                                                                 // 139\n                                                                                                                      //\n            for (i = 0, len = ref.length; i < len; i++) {                                                             // 139\n              t = ref[i];                                                                                             // 204\n                                                                                                                      //\n              if (result === false) {                                                                                 // 205\n                result = result || performTest(allTests[t]);                                                          // 140\n              }                                                                                                       // 207\n            }                                                                                                         // 139\n                                                                                                                      //\n            return result;                                                                                            // 141\n          };                                                                                                          // 137\n                                                                                                                      //\n          return !performAllTests(_this.denys) && performAllTests(_this.allows);                                      // 142\n        };                                                                                                            // 128\n      }(this);                                                                                                        // 128\n                                                                                                                      //\n      return function () {                                                                                            // 144\n        var err, params, retval;                                                                                      // 145\n        params = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                               // 144\n                                                                                                                      //\n        try {                                                                                                         // 145\n          if (!(this.connection && !permitted(this.userId, params))) {                                                // 146\n            retval = func.apply(null, params);                                                                        // 147\n          } else {                                                                                                    // 146\n            err = new Meteor.Error(403, \"Method not authorized\", \"Authenticated user is not permitted to invoke this method.\");\n            throw err;                                                                                                // 150\n          }                                                                                                           // 145\n        } catch (error) {                                                                                             // 145\n          err = error;                                                                                                // 151\n                                                                                                                      //\n          self._emit(method, this.connection, this.userId, err);                                                      // 152\n                                                                                                                      //\n          throw err;                                                                                                  // 153\n        }                                                                                                             // 228\n                                                                                                                      //\n        self._emit.apply(self, [method, this.connection, this.userId, null, retval].concat(slice.call(params)));      // 154\n                                                                                                                      //\n        return retval;                                                                                                // 155\n      };                                                                                                              // 144\n    };                                                                                                                // 122\n                                                                                                                      //\n    JobCollection.prototype.setLogStream = function (writeStream) {                                                   // 234\n      if (writeStream == null) {                                                                                      // 235\n        writeStream = null;                                                                                           // 157\n      }                                                                                                               // 237\n                                                                                                                      //\n      if (this.logStream) {                                                                                           // 158\n        throw new Error(\"logStream may only be set once per job-collection startup/shutdown cycle\");                  // 159\n      }                                                                                                               // 240\n                                                                                                                      //\n      this.logStream = writeStream;                                                                                   // 160\n                                                                                                                      //\n      if (!(this.logStream == null || this.logStream.write != null && typeof this.logStream.write === 'function' && this.logStream.end != null && typeof this.logStream.end === 'function')) {\n        throw new Error(\"logStream must be a valid writable node.js Stream\");                                         // 166\n      }                                                                                                               // 244\n    };                                                                                                                // 157\n                                                                                                                      //\n    JobCollection.prototype.allow = function (allowOptions) {                                                         // 247\n      var func, results, type;                                                                                        // 170\n      results = [];                                                                                                   // 170\n                                                                                                                      //\n      for (type in meteorBabelHelpers.sanitizeForInObject(allowOptions)) {                                            // 250\n        func = allowOptions[type];                                                                                    // 251\n                                                                                                                      //\n        if (type in this.allows) {                                                                                    // 252\n          results.push(this.allows[type].push(func));                                                                 // 253\n        }                                                                                                             // 254\n      }                                                                                                               // 170\n                                                                                                                      //\n      return results;                                                                                                 // 256\n    };                                                                                                                // 169\n                                                                                                                      //\n    JobCollection.prototype.deny = function (denyOptions) {                                                           // 259\n      var func, results, type;                                                                                        // 174\n      results = [];                                                                                                   // 174\n                                                                                                                      //\n      for (type in meteorBabelHelpers.sanitizeForInObject(denyOptions)) {                                             // 262\n        func = denyOptions[type];                                                                                     // 263\n                                                                                                                      //\n        if (type in this.denys) {                                                                                     // 264\n          results.push(this.denys[type].push(func));                                                                  // 265\n        }                                                                                                             // 266\n      }                                                                                                               // 174\n                                                                                                                      //\n      return results;                                                                                                 // 268\n    };                                                                                                                // 173\n                                                                                                                      //\n    JobCollection.prototype.scrub = function (job) {                                                                  // 271\n      return job;                                                                                                     // 272\n    };                                                                                                                // 177\n                                                                                                                      //\n    JobCollection.prototype.promote = function (milliseconds) {                                                       // 275\n      if (milliseconds == null) {                                                                                     // 276\n        milliseconds = 15 * 1000;                                                                                     // 180\n      }                                                                                                               // 278\n                                                                                                                      //\n      if (typeof milliseconds === 'number' && milliseconds > 0) {                                                     // 181\n        if (this.interval) {                                                                                          // 182\n          Meteor.clearInterval(this.interval);                                                                        // 183\n        }                                                                                                             // 282\n                                                                                                                      //\n        this._promote_jobs();                                                                                         // 184\n                                                                                                                      //\n        return this.interval = Meteor.setInterval(this._promote_jobs.bind(this), milliseconds);                       // 284\n      } else {                                                                                                        // 181\n        return console.warn(\"jobCollection.promote: invalid timeout: \" + this.root + \", \" + milliseconds);            // 286\n      }                                                                                                               // 287\n    };                                                                                                                // 180\n                                                                                                                      //\n    JobCollection.prototype._promote_jobs = function (ids) {                                                          // 290\n      if (ids == null) {                                                                                              // 291\n        ids = [];                                                                                                     // 189\n      }                                                                                                               // 293\n                                                                                                                      //\n      if (this.stopped) {                                                                                             // 190\n        return;                                                                                                       // 191\n      }                                                                                                               // 296\n                                                                                                                      //\n      this.find({                                                                                                     // 193\n        status: 'running',                                                                                            // 193\n        expiresAfter: {                                                                                               // 193\n          $lt: new Date()                                                                                             // 193\n        }                                                                                                             // 193\n      }).forEach(function (_this) {                                                                                   // 193\n        return function (job) {                                                                                       // 303\n          return new Job(_this.root, job).fail(\"Failed for exceeding worker set workTimeout\");                        // 304\n        };                                                                                                            // 194\n      }(this));                                                                                                       // 194\n      return this.readyJobs();                                                                                        // 307\n    };                                                                                                                // 189\n                                                                                                                      //\n    return JobCollection;                                                                                             // 310\n  }(share.JobCollectionBase);                                                                                         // 312\n}                                                                                                                     // 313\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['vsivsi:job-collection'] = {}, {\n  Job: Job,\n  JobCollection: JobCollection\n});\n\n})();\n","servePath":"/packages/vsivsi_job-collection.js","sourceMap":{"version":3,"sources":["/packages/vsivsi_job-collection/job/src/job_class.coffee","/job/src/job_class.coffee.js","/packages/vsivsi_job-collection/src/shared.coffee","/src/shared.coffee.js","/packages/vsivsi_job-collection/src/server.coffee","/src/server.coffee.js"],"names":["JobQueue","_clearInterval","_setImmediate","_setInterval","concatReduce","isBoolean","isInteger","methodCall","optionsHelp","reduceCallbacks","splitLongArray","slice","indexOf","item","i","l","length","root","method","params","cb","after","apply","name","ref","ref1","ref2","ref3","ret","Job","_ddp_apply","Error","_this","err","res","options","Array","arr","max","k","results","Math","ceil","push","num","reduce","init","cbCount","cbErr","cbRetVal","a","b","concat","floor","args","func","arguments","call","Meteor","setTimeout","setImmediate","timeOut","setInterval","id","clearInterval","root1","type1","worker","type","ctor","prototype","child","result","Object","pollInterval","forever","concurrency","payload","prefetch","workTimeout","callbackStrict","_workers","_tasks","_taskNumber","_stoppingGetWork","_stoppingTasks","_interval","_getWorkOutstanding","paused","resume","_getWork","numJobsToGet","running","maxJobs","getWork","jobs","j","len","console","error","_process","bind","_only_once","fn","called","job","next","splice","shift","_taskId","_stopGetWork","callback","_waitForTasks","_failJobs","tasks","count","fail","_hard","r","_stop","_soft","keys","idle","full","pause","w","trigger","shutdown","level","quiet","warn","foreverDate","Date","jobPriorities","low","normal","medium","high","critical","jobRetryBackoffMethods","jobStatuses","jobLogLevels","jobStatusCancellable","jobStatusPausable","jobStatusRemovable","jobStatusRestartable","ddpMethods","ddpPermissionLevels","ddpMethodPermissions","_setDDPApply","collectionName","setDDP","ddp","collectionNames","Fiber","collName","close","subscribe","observe","fib","current","throwInto","run","doc","processJobs","makeJob","depFlag","getJob","getLog","getJobs","chunkOfIds","chunksOfIds","ids","myCb","retVal","d","len1","m","data","pauseJobs","resumeJobs","readyJobs","force","cancelJobs","antecedents","restartJobs","retries","dependents","removeJobs","startJobs","stopJobs","timeout","startJobServer","shutdownJobServer","time","_root","_doc","runId","status","updated","created","priority","retry","repeat","progress","depends","log","_echo","message","info","_id","resolved","base","until","wait","backoff","repeatRetries","retryWait","retried","retryBackoff","retryUntil","repeats","schedule","schedules","exceptions","repeatWait","repeated","repeatUntil","delay","valueOf","echo","completed","total","percent","save","refresh","done","value","fatal","ready","cancel","restart","rerun","remove","defineProperties","get","set","module","exports","JobCollectionBase","_validId","_validIntGTEOne","_validIntGTEZero","_validJobDoc","_validLaterJSObj","_validLog","_validLogLevel","_validNumGTEOne","_validNumGTEZero","_validNumGTZero","_validProgress","_validRetryBackoff","_validStatus","extend","parent","key","hasProp","constructor","__super__","hasOwnProperty","v","Match","test","Number","String","OneOf","Mongo","Collection","ObjectID","Where","Optional","failures","Integer","expiresAfter","superClass","later","noCollectionSuffix","connection","_createLogEntry","_logMessage","previousJob","dependency","msg","jobDocPattern","allow","deny","promote","setLogStream","logConsole","dep","createJob","_methodWrapper","toLog","unblockDDPMethods","_toLog","_unblockDDPMethods","retval","user","userId","JSON","stringify","unblock","_generateMethods","baseMethodName","methodFunc","methodName","methodPrefix","methodsOut","_idsOfDeps","antsArray","dependsIds","dependsQuery","$elemMatch","$in","find","fields","transform","forEach","$or","_rerun_job","jobId","logObj","insert","_DDPMethod_jobReady","_DDPMethod_startJobServer","check","isSimulation","stopped","clearTimeout","_DDPMethod_startJobs","_DDPMethod_shutdownJobServer","cursor","failedJobs","_DDPMethod_jobFail","logStream","end","_DDPMethod_stopJobs","_DDPMethod_getJob","docs","single","Boolean","getFailures","_private","fetch","scrub","_DDPMethod_getWork","foundDocs","mods","_makeNewID","sort","limit","map","$set","$inc","$push","$unset","update","multi","_DDPMethod_jobRemove","_DDPMethod_jobPause","_DDPMethod_jobResume","resumed","$ne","now","query","$lte","forced","$size","readied","$each","_DDPMethod_jobCancel","cancelIds","depsCancelled","cancelled","_DDPMethod_jobRestart","depsRestarted","restartIds","restarted","_DDPMethod_jobSave","newId","nextDate","cancelRepeats","resubmitted","submitted","_DDPMethod_jobProgress","findOne","_DDPMethod_jobLog","_DDPMethod_jobRerun","_DDPMethod_jobDone","n","repeatId","delayDeps","$all","$pull","$max","newStatus","pow","failed","share","eventEmitter","userHelper","me","isServer","Npm","require","EventEmitter","JobCollection","foo","localMethods","methodFunction","_emit","_onCall","_onError","events","_errorListener","on","_methodErrorDispatch","emit","_callListener","_methodEventDispatch","allows","denys","_ensureIndex","_localServerMethods","e","methods","returnVal","write","myTypeof","permitted","self","val","performAllTests","performTest","tests","allTests","t","writeStream","allowOptions","denyOptions","milliseconds","interval","_promote_jobs","$lt"],"mappings":"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4L,gBC+EA,GD/EkBA,gBC+ElB;AAEAT,oBAAkBnL,SAAlB,CDhFA6L,eCgFA,GDhFiBA,eCgFjB;AAEAV,oBAAkBnL,SAAlB,CDjFA2L,eCiFA,GDjFiBA,eCiFjB;AAEAR,oBAAkBnL,SAAlB,CDlFAsL,gBCkFA,GDlFkBA,gBCkFlB;AAEAH,oBAAkBnL,SAAlB,CDnFAqL,eCmFA,GDnFiBA,eCmFjB;AAEAF,oBAAkBnL,SAAlB,CDpFAgM,YCoFA,GDpFcA,YCoFd;AAEAb,oBAAkBnL,SAAlB,CDrFA0L,cCqFA,GDrFgBA,cCqFhB;AAEAP,oBAAkBnL,SAAlB,CDtFA+L,kBCsFA,GDtFoBA,kBCsFpB;AAEAZ,oBAAkBnL,SAAlB,CDvFAoL,QCuFA,GDvFUA,QCuFV;AAEAD,oBAAkBnL,SAAlB,CDxFAyL,SCwFA,GDxFWA,SCwFX;AAEAN,oBAAkBnL,SAAlB,CDzFA8L,cCyFA,GDzFgBA,cCyFhB;AAEAX,oBAAkBnL,SAAlB,CD1FAuL,YC0FA,GD1FcA,YC0Fd;AAEAJ,oBAAkBnL,SAAlB,CD1FAuE,YC0FA,GD1FchH,IAAIgH,YC0FlB;AAEA4G,oBAAkBnL,SAAlB,CD3FA+D,aC2FA,GD3FexG,IAAIwG,aC2FnB;AAEAoH,oBAAkBnL,SAAlB,CD5FAsE,WC4FA,GD5Fa/G,IAAI+G,WC4FjB;AAEA6G,oBAAkBnL,SAAlB,CD7FAwE,oBC6FA,GD7FsBjH,IAAIiH,oBC6F1B;AAEA2G,oBAAkBnL,SAAlB,CD9FAyE,iBC8FA,GD9FmBlH,IAAIkH,iBC8FvB;AAEA0G,oBAAkBnL,SAAlB,CD/FA0E,kBC+FA,GD/FoBnH,IAAImH,kBC+FxB;AAEAyG,oBAAkBnL,SAAlB,CDhGA2E,oBCgGA,GDhGsBpH,IAAIoH,oBCgG1B;AAEAwG,oBAAkBnL,SAAlB,CDjGAK,OCiGA,GDjGS9C,IAAI8C,OCiGb;AAEA8K,oBAAkBnL,SAAlB,CDlGA6D,WCkGA,GDlGatG,IAAIsG,WCkGjB;AAEAsH,oBAAkBnL,SAAlB,CDlGA4E,UCkGA,GDlGYrH,IAAIqH,UCkGhB;AAEAuG,oBAAkBnL,SAAlB,CDnGA6E,mBCmGA,GD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","file":"/packages/vsivsi_job-collection.js","sourcesContent":["############################################################################\n#     Copyright (C) 2014-2016 by Vaughn Iverson\n#     meteor-job-class is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\n# Exports Job object\n\nmethodCall = (root, method, params, cb, after = ((ret) -> ret)) ->\n  apply = Job._ddp_apply?[root.root ? root] ? Job._ddp_apply\n  unless typeof apply is 'function'\n     throw new Error \"Job remote method call error, no valid invocation method found.\"\n  name = \"#{root.root ? root}_#{method}\"\n  if cb and typeof cb is 'function'\n    apply name, params, (err, res) =>\n      return cb err if err\n      cb null, after(res)\n  else\n    return after(apply name, params)\n\noptionsHelp = (options, cb) ->\n  # If cb isn't a function, it's assumed to be options...\n  if cb? and typeof cb isnt 'function'\n    options = cb\n    cb = undefined\n  else\n    unless (typeof options is 'object' and\n            options instanceof Array and\n            options.length < 2)\n      throw new Error 'options... in optionsHelp must be an Array with zero or one elements'\n    options = options?[0] ? {}\n  unless typeof options is 'object'\n    throw new Error 'in optionsHelp options not an object or bad callback'\n  return [options, cb]\n\nsplitLongArray = (arr, max) ->\n  throw new Error 'splitLongArray: bad params' unless arr instanceof Array and max > 0\n  arr[(i*max)...((i+1)*max)] for i in [0...Math.ceil(arr.length/max)]\n\n# This function soaks up num callbacks, by default returning the disjunction of Boolean results\n# or returning on first error.... Reduce function causes different reduce behavior, such as concatenation\nreduceCallbacks = (cb, num, reduce = ((a , b) -> (a or b)), init = false) ->\n  return undefined unless cb?\n  unless typeof cb is 'function' and num > 0 and typeof reduce is 'function'\n    throw new Error 'Bad params given to reduceCallbacks'\n  cbRetVal = init\n  cbCount = 0\n  cbErr = null\n  return (err, res) ->\n    unless cbErr\n      if err\n        cbErr = err\n        cb err\n      else\n        cbCount++\n        cbRetVal = reduce cbRetVal, res\n        if cbCount is num\n          cb null, cbRetVal\n        else if cbCount > num\n          throw new Error \"reduceCallbacks callback invoked more than requested #{num} times\"\n\nconcatReduce = (a, b) ->\n  a = [a] unless a instanceof Array\n  a.concat b\n\nisInteger = (i) -> typeof i is 'number' and Math.floor(i) is i\n\nisBoolean = (b) -> typeof b is 'boolean'\n\n# This smooths over the various different implementations...\n_setImmediate = (func, args...) ->\n  if Meteor?.setTimeout?\n    return Meteor.setTimeout func, 0, args...\n  else if setImmediate?\n    return setImmediate func, args...\n  else\n    # Browser fallback\n    return setTimeout func, 0, args...\n\n_setInterval = (func, timeOut, args...) ->\n  if Meteor?.setInterval?\n    return Meteor.setInterval func, timeOut, args...\n  else\n    # Browser / node.js fallback\n    return setInterval func, timeOut, args...\n\n_clearInterval = (id) ->\n  if Meteor?.clearInterval?\n    return Meteor.clearInterval id\n  else\n    # Browser / node.js fallback\n    return clearInterval id\n\n###################################################################\n\nclass JobQueue\n\n  constructor: (@root, @type, options..., @worker) ->\n    unless @ instanceof JobQueue\n      return new JobQueue @root, @type, options..., @worker\n    [options, @worker] = optionsHelp options, @worker\n\n    @pollInterval =\n      if options.pollInterval? and not options.pollInterval\n        Job.forever\n      else if not (options.pollInterval? and isInteger(options.pollInterval))\n        5000  # ms\n      else\n        options.pollInterval\n    unless isInteger(@pollInterval) and @pollInterval >= 0\n      throw new Error \"JobQueue: Invalid pollInterval, must be a positive integer\"\n\n    @concurrency = options.concurrency ? 1\n    unless isInteger(@concurrency) and @concurrency >= 0\n      throw new Error \"JobQueue: Invalid concurrency, must be a positive integer\"\n\n    @payload = options.payload ? 1\n    unless isInteger(@payload) and @payload >= 0\n      throw new Error \"JobQueue: Invalid payload, must be a positive integer\"\n\n    @prefetch = options.prefetch ? 0\n    unless isInteger(@prefetch) and @prefetch >= 0\n      throw new Error \"JobQueue: Invalid prefetch, must be a positive integer\"\n\n    @workTimeout = options.workTimeout  # No default\n    if @workTimeout? and not (isInteger(@workTimeout) and @workTimeout >= 0)\n      throw new Error \"JobQueue: Invalid workTimeout, must be a positive integer\"\n\n    @callbackStrict = options.callbackStrict\n    if @callbackStrict? and not isBoolean(@callbackStrict)\n      throw new Error \"JobQueue: Invalid callbackStrict, must be a boolean\"\n\n    @_workers = {}\n    @_tasks = []\n    @_taskNumber = 0\n    @_stoppingGetWork = undefined\n    @_stoppingTasks = undefined\n    @_interval = null\n    @_getWorkOutstanding = false\n    @paused = true\n    @resume()\n\n  _getWork: () ->\n    # Don't reenter, or run when paused or stopping\n    unless @_getWorkOutstanding or @paused\n      numJobsToGet = @prefetch + @payload*(@concurrency - @running()) - @length()\n      if numJobsToGet > 0\n        @_getWorkOutstanding = true\n        options = { maxJobs: numJobsToGet }\n        options.workTimeout = @workTimeout if @workTimeout?\n        Job.getWork @root, @type, options, (err, jobs) =>\n          @_getWorkOutstanding = false\n          if err\n            console.error \"JobQueue: Received error from getWork(): \", err\n          else if jobs? and jobs instanceof Array\n            if jobs.length > numJobsToGet\n              console.error \"JobQueue: getWork() returned jobs (#{jobs.length}) in excess of maxJobs (#{numJobsToGet})\"\n            for j in jobs\n              @_tasks.push j\n              _setImmediate @_process.bind(@) unless @_stoppingGetWork?\n            @_stoppingGetWork() if @_stoppingGetWork?\n          else\n            console.error \"JobQueue: Nonarray response from server from getWork()\"\n\n  _only_once: (fn) ->\n    called = false\n    return () =>\n      if called\n        console.error \"Worker callback called multiple times in JobQueue\"\n        if @callbackStrict\n          throw new Error \"JobQueue worker callback was invoked multiple times\"\n      called = true\n      fn.apply @, arguments\n\n  _process: () ->\n    if not @paused and @running() < @concurrency and @length()\n      if @payload > 1\n        job = @_tasks.splice 0, @payload\n      else\n        job = @_tasks.shift()\n      job._taskId = \"Task_#{@_taskNumber++}\"\n      @_workers[job._taskId] = job\n      next = () =>\n        delete @_workers[job._taskId]\n        if @_stoppingTasks? and @running() is 0 and @length() is 0\n          @_stoppingTasks()\n        else\n          _setImmediate @_process.bind(@)\n          _setImmediate @_getWork.bind(@)\n      cb = @_only_once next\n      @worker job, cb\n\n  _stopGetWork: (callback) ->\n    _clearInterval @_interval\n    @_interval = null\n    if @_getWorkOutstanding\n      @_stoppingGetWork = callback\n    else\n      _setImmediate callback  # No Zalgo, thanks\n\n  _waitForTasks: (callback) ->\n    unless @running() is 0\n      @_stoppingTasks = callback\n    else\n      _setImmediate callback  # No Zalgo, thanks\n\n  _failJobs: (tasks, callback) ->\n    _setImmediate callback if tasks.length is 0  # No Zalgo, thanks\n    count = 0\n    for job in tasks\n      job.fail \"Worker shutdown\", (err, res) =>\n        count++\n        if count is tasks.length\n          callback()\n\n  _hard: (callback) ->\n    @paused = true\n    @_stopGetWork () =>\n      tasks = @_tasks\n      @_tasks = []\n      for i, r of @_workers\n        tasks = tasks.concat r\n      @_failJobs tasks, callback\n\n  _stop: (callback) ->\n    @paused = true\n    @_stopGetWork () =>\n      tasks = @_tasks\n      @_tasks = []\n      @_waitForTasks () =>\n        @_failJobs tasks, callback\n\n  _soft: (callback) ->\n    @_stopGetWork () =>\n      @_waitForTasks callback\n\n  length: () -> @_tasks.length\n\n  running: () -> Object.keys(@_workers).length\n\n  idle: () -> @length() + @running() is 0\n\n  full: () -> @running() is @concurrency\n\n  pause: () ->\n    return if @paused\n    unless @pollInterval >= Job.forever\n      _clearInterval @_interval\n      @_interval = null\n    @paused = true\n    @\n\n  resume: () ->\n    return unless @paused\n    @paused = false\n    _setImmediate @_getWork.bind(@)\n    unless @pollInterval >= Job.forever\n      @_interval = _setInterval @_getWork.bind(@), @pollInterval\n    for w in [1..@concurrency]\n      _setImmediate @_process.bind(@)\n    @\n\n  trigger: () ->\n    return if @paused\n    _setImmediate @_getWork.bind(@)\n    @\n\n  shutdown: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.level ?= 'normal'\n    options.quiet ?= false\n    unless cb?\n      console.warn \"using default shutdown callback!\" unless options.quiet\n      cb = () =>\n        console.warn \"Shutdown complete\"\n    switch options.level\n      when 'hard'\n        console.warn \"Shutting down hard\" unless options.quiet\n        @_hard cb\n      when 'soft'\n        console.warn \"Shutting down soft\" unless options.quiet\n        @_soft cb\n      else\n        console.warn \"Shutting down normally\" unless options.quiet\n        @_stop cb\n\n###################################################################\n\nclass Job\n\n  # This is the JS max int value = 2^53\n  @forever = 9007199254740992\n\n  # This is the maximum date value in JS\n  @foreverDate = new Date 8640000000000000\n\n  @jobPriorities:\n    low: 10\n    normal: 0\n    medium: -5\n    high: -10\n    critical: -15\n\n  @jobRetryBackoffMethods: [ 'constant', 'exponential' ]\n\n  @jobStatuses: [ 'waiting', 'paused', 'ready', 'running'\n                  'failed', 'cancelled', 'completed' ]\n\n  @jobLogLevels: [ 'info', 'success', 'warning', 'danger' ]\n\n  @jobStatusCancellable: [ 'running', 'ready', 'waiting', 'paused' ]\n  @jobStatusPausable: [ 'ready', 'waiting' ]\n  @jobStatusRemovable:   [ 'cancelled', 'completed', 'failed' ]\n  @jobStatusRestartable: [ 'cancelled', 'failed' ]\n\n  @ddpMethods = [ 'startJobs', 'stopJobs',  # Deprecated!\n                  'startJobServer', 'shutdownJobServer',\n                  'jobRemove', 'jobPause', 'jobResume', 'jobReady'\n                  'jobCancel', 'jobRestart', 'jobSave', 'jobRerun', 'getWork'\n                  'getJob', 'jobLog', 'jobProgress', 'jobDone', 'jobFail' ]\n\n  @ddpPermissionLevels = [ 'admin', 'manager', 'creator', 'worker' ]\n\n  # These are the four levels of the allow/deny permission heirarchy\n  @ddpMethodPermissions =\n    'startJobs': ['startJobs', 'admin']  # Deprecated!\n    'stopJobs': ['stopJobs', 'admin']    # Deprecated!\n    'startJobServer': ['startJobServer', 'admin']\n    'shutdownJobServer': ['shutdownJobServer', 'admin']\n    'jobRemove': ['jobRemove', 'admin', 'manager']\n    'jobPause': ['jobPause', 'admin', 'manager']\n    'jobResume': ['jobResume', 'admin', 'manager']\n    'jobCancel': ['jobCancel', 'admin', 'manager']\n    'jobReady': ['jobReady', 'admin', 'manager']\n    'jobRestart': ['jobRestart', 'admin', 'manager']\n    'jobSave': ['jobSave', 'admin', 'creator']\n    'jobRerun': ['jobRerun', 'admin', 'creator']\n    'getWork': ['getWork', 'admin', 'worker']\n    'getJob': ['getJob', 'admin', 'worker']\n    'jobLog': [ 'jobLog', 'admin', 'worker']\n    'jobProgress': ['jobProgress', 'admin', 'worker']\n    'jobDone': ['jobDone', 'admin', 'worker']\n    'jobFail': ['jobFail', 'admin', 'worker']\n\n  # Automatically work within Meteor, otherwise see @setDDP below\n  @_ddp_apply: undefined\n\n  # Class methods\n\n  @_setDDPApply: (apply, collectionName) ->\n    if typeof apply is 'function'\n      if typeof collectionName is 'string'\n         @_ddp_apply ?= {}\n         if typeof @_ddp_apply is 'function'\n            throw new Error \"Job.setDDP must specify a collection name each time if called more than once.\"\n         @_ddp_apply[collectionName] = apply\n      else unless @_ddp_apply\n         @_ddp_apply = apply\n      else\n         throw new Error \"Job.setDDP must specify a collection name each time if called more than once.\"\n    else\n      throw new Error \"Bad function in Job.setDDPApply()\"\n\n  # This needs to be called when not running in Meteor to use the local DDP connection.\n  @setDDP: (ddp = null, collectionNames = null, Fiber = null) ->\n    unless (typeof collectionNames is 'string') or (collectionNames instanceof Array)\n      # Handle optional collection string with Fiber present\n      Fiber = collectionNames\n      collectionNames = [ undefined ]\n    else if typeof collectionNames is 'string'\n      # If string, convert to array of strings\n      collectionNames = [ collectionNames ]\n    for collName in collectionNames\n      unless ddp? and ddp.close? and ddp.subscribe?\n        # Not the DDP npm package\n        if ddp is null and Meteor?.apply?\n          # Meteor local server/client\n          @_setDDPApply Meteor.apply, collName\n        else\n          # No other possibilities...\n          throw new Error \"Bad ddp object in Job.setDDP()\"\n      else unless ddp.observe?  # This is a Meteor DDP connection object\n        @_setDDPApply ddp.apply.bind(ddp), collName\n      else # This is the npm DDP package\n        unless Fiber?\n          @_setDDPApply ddp.call.bind(ddp), collName\n        else\n          # If Fibers in use under pure node.js,\n          # make sure to yield and throw errors when no callback\n          @_setDDPApply(((name, params, cb) ->\n            fib = Fiber.current\n            ddp.call name, params, (err, res) ->\n              if cb? and typeof cb is 'function'\n                cb err, res\n              else\n                if err\n                  fib.throwInto err\n                else\n                  fib.run res\n            if cb? and typeof cb is 'function'\n              return\n            else\n              return Fiber.yield()\n          ), collName)\n\n  # Creates a job object by reserving the next available job of\n  # the specified 'type' from the server queue root\n  # returns null if no such job exists\n  @getWork: (root, type, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    type = [type] if typeof type is 'string'\n    if options.workTimeout?\n      unless isInteger(options.workTimeout) and options.workTimeout > 0\n        throw new Error 'getWork: workTimeout must be a positive integer'\n    methodCall root, \"getWork\", [type, options], cb, (res) =>\n      jobs = (new Job(root, doc) for doc in res) or []\n      if options.maxJobs?\n        return jobs\n      else\n        return jobs[0]\n\n  # This is defined above\n  @processJobs: JobQueue\n\n  # Makes a job object from a job document\n  # This method is deprecated and will be removed\n  @makeJob: do () ->\n    depFlag = false\n    (root, doc) ->\n      unless depFlag\n        depFlag = true\n        console.warn \"Job.makeJob(root, jobDoc) has been deprecated and will be removed in a future release, use 'new Job(root, jobDoc)' instead.\"\n      new Job root, doc\n\n  # Creates a job object by id from the server queue root\n  # returns null if no such job exists\n  @getJob: (root, id, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.getLog ?= false\n    methodCall root, \"getJob\", [id, options], cb, (doc) =>\n      if doc\n        new Job root, doc\n      else\n        undefined\n\n  # Like the above, but takes an array of ids, returns array of jobs\n  @getJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.getLog ?= false\n    retVal = []\n    chunksOfIds = splitLongArray ids, 32\n    myCb = reduceCallbacks(cb, chunksOfIds.length, concatReduce, [])\n    for chunkOfIds in chunksOfIds\n      retVal = retVal.concat(methodCall root, \"getJob\", [chunkOfIds, options], myCb, (doc) =>\n        if doc\n          (new Job(root, d.type, d.data, d) for d in doc)\n        else\n          null)\n    return retVal\n\n  # Pause this job, only Ready and Waiting jobs can be paused\n  # Calling this toggles the paused state. Unpaused jobs go to waiting\n  @pauseJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobPause\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Resume this job, only Paused jobs can be resumed\n  # Calling this toggles the paused state. Unpaused jobs go to waiting\n  @resumeJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobResume\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Move waiting jobs to the ready state, jobs with dependencies will not\n  # be made ready unless force is used.\n  @readyJobs: (root, ids = [], options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.force ?= false\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    chunksOfIds = [[]] unless chunksOfIds.length > 0\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobReady\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Cancel this job if it is running or able to run (waiting, ready)\n  @cancelJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.antecedents ?= true\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobCancel\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Restart a failed or cancelled job\n  @restartJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.retries ?= 1\n    options.dependents ?= true\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobRestart\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Remove a job that is not able to run (completed, cancelled, failed) from the queue\n  @removeJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobRemove\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Start the job queue\n  # Deprecated!\n  @startJobs: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    methodCall root, \"startJobs\", [options], cb\n\n  # Stop the job queue, stop all running jobs\n  # Deprecated!\n  @stopJobs: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.timeout ?= 60*1000\n    methodCall root, \"stopJobs\", [options], cb\n\n  # Start the job queue\n  @startJobServer: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    methodCall root, \"startJobServer\", [options], cb\n\n  # Shutdown the job queue, stop all running jobs\n  @shutdownJobServer: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.timeout ?= 60*1000\n    methodCall root, \"shutdownJobServer\", [options], cb\n\n  # Job class instance constructor. When \"new Job(...)\" is run\n  constructor: (@root, type, data) ->\n    unless @ instanceof Job\n      return new Job @root, type, data\n\n    # Keep the original root, whatever type that is\n    @_root = @root\n\n    # Handle root as object with obj.root attribute\n    if @root?.root? and typeof @root.root is 'string'\n      @root = @_root.root\n\n    # Handle (root, doc) signature\n    if not data? and type?.data? and type?.type?\n      if type instanceof Job\n        return type\n\n      doc = type\n      data = doc.data\n      type = doc.type\n    else\n      doc = {}\n\n    unless typeof doc is 'object' and\n           typeof data is 'object' and\n           typeof type is 'string' and\n           typeof @root is 'string'\n      throw new Error \"new Job: bad parameter(s), #{@root} (#{typeof @root}), #{type} (#{typeof type}), #{data} (#{typeof data}), #{doc} (#{typeof doc})\"\n\n    else if doc.type? and doc.data? # This case is used to create local Job objects from DDP calls\n      @_doc = doc\n\n    else  # This is the normal \"create a new object\" case\n      time = new Date()\n      @_doc =\n        runId: null\n        type : type\n        data: data\n        status: 'waiting'\n        updated: time\n        created: time\n      @priority().retry().repeat().after().progress().depends().log(\"Constructed\")\n\n    return @\n\n  # Override point for methods that have an echo option\n  _echo: (message, level = null) ->\n    switch level\n      when 'danger' then console.error message\n      when 'warning' then console.warn message\n      when 'success' then console.log message\n      else console.info message\n    return\n\n  # Adds a run dependancy on one or more existing jobs to this job\n  # Calling with a falsy value resets the dependencies to []\n  depends: (jobs) ->\n    if jobs\n      if jobs instanceof Job\n        jobs = [ jobs ]\n      if jobs instanceof Array\n        depends = @_doc.depends\n        for j in jobs\n          unless j instanceof Job and j._doc._id?\n            throw new Error 'Each provided object must be a saved Job instance (with an _id)'\n          depends.push j._doc._id\n      else\n        throw new Error 'Bad input parameter: depends() accepts a falsy value, or Job or array of Jobs'\n    else\n      depends = []\n    @_doc.depends = depends\n    @_doc.resolved = []  # This is where prior depends go as they are satisfied\n    return @\n\n  # Set the run priority of this job\n  priority: (level = 0) ->\n    if typeof level is 'string'\n      priority = Job.jobPriorities[level]\n      unless priority?\n        throw new Error 'Invalid string priority level provided'\n    else if isInteger(level)\n      priority = level\n    else\n      throw new Error 'priority must be an integer or valid priority level'\n      priority = 0\n    @_doc.priority = priority\n    return @\n\n  # Sets the number of attempted runs of this job and\n  # the time to wait between successive attempts\n  # Default, do not retry\n  retry: (options = 0) ->\n    if isInteger(options) and options >= 0\n      options = { retries: options }\n    if typeof options isnt 'object'\n      throw new Error 'bad parameter: accepts either an integer >= 0 or an options object'\n    if options.retries?\n      unless isInteger(options.retries) and options.retries >= 0\n        throw new Error 'bad option: retries must be an integer >= 0'\n      options.retries++\n    else\n      options.retries = Job.forever\n    if options.until?\n      unless options.until instanceof Date\n        throw new Error 'bad option: until must be a Date object'\n    else\n      options.until = Job.foreverDate\n    if options.wait?\n      unless isInteger(options.wait) and options.wait >= 0\n        throw new Error 'bad option: wait must be an integer >= 0'\n    else\n      options.wait = 5*60*1000\n    if options.backoff?\n      unless options.backoff in Job.jobRetryBackoffMethods\n        throw new Error 'bad option: invalid retry backoff method'\n    else\n      options.backoff = 'constant'\n\n    @_doc.retries = options.retries\n    @_doc.repeatRetries = options.retries\n    @_doc.retryWait = options.wait\n    @_doc.retried ?= 0\n    @_doc.retryBackoff = options.backoff\n    @_doc.retryUntil = options.until\n    return @\n\n  # Sets the number of times to repeatedly run this job\n  # and the time to wait between successive runs\n  # Default: repeat every 5 minutes, forever...\n  repeat: (options = 0) ->\n    if isInteger(options) and options >= 0\n      options = { repeats: options }\n    if typeof options isnt 'object'\n      throw new Error 'bad parameter: accepts either an integer >= 0 or an options object'\n    if options.wait? and options.schedule?\n      throw new Error 'bad options: wait and schedule options are mutually exclusive'\n    if options.repeats?\n      unless isInteger(options.repeats) and options.repeats >= 0\n        throw new Error 'bad option: repeats must be an integer >= 0'\n    else\n      options.repeats = Job.forever\n    if options.until?\n      unless options.until instanceof Date\n        throw new Error 'bad option: until must be a Date object'\n    else\n      options.until = Job.foreverDate\n    if options.wait?\n      unless isInteger(options.wait) and options.wait >= 0\n        throw new Error 'bad option: wait must be an integer >= 0'\n    else\n      options.wait = 5*60*1000\n    if options.schedule?\n      unless typeof options.schedule is 'object'\n        throw new Error 'bad option, schedule option must be an object'\n      unless options.schedule?.schedules? and options.schedule.schedules instanceof Array\n        throw new Error 'bad option, schedule object requires a schedules attribute of type Array.'\n      if options.schedule.exceptions? and not (options.schedule.exceptions instanceof Array)\n        throw new Error 'bad option, schedule object exceptions attribute must be an Array'\n      options.wait =\n        schedules: options.schedule.schedules\n        exceptions: options.schedule.exceptions\n\n    @_doc.repeats = options.repeats\n    @_doc.repeatWait = options.wait\n    @_doc.repeated ?= 0\n    @_doc.repeatUntil = options.until\n    return @\n\n  # Sets the delay before this job can run after it is saved\n  delay: (wait = 0) ->\n    unless isInteger(wait) and wait >= 0\n      throw new Error 'Bad parameter, delay requires a non-negative integer.'\n    return @after new Date(new Date().valueOf() + wait)\n\n  # Sets a time after which this job can run once it is saved\n  after: (time = new Date(0)) ->\n    if typeof time is 'object' and time instanceof Date\n      after = time\n    else\n      throw new Error 'Bad parameter, after requires a valid Date object'\n    @_doc.after = after\n    return @\n\n  # Write a message to this job's log.\n  log: (message, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.level ?= 'info'\n    unless typeof message is 'string'\n      throw new Error 'Log message must be a string'\n    unless typeof options.level is 'string' and options.level in Job.jobLogLevels\n      throw new Error 'Log level options must be one of Job.jobLogLevels'\n    if options.echo?\n      if options.echo and Job.jobLogLevels.indexOf(options.level) >= Job.jobLogLevels.indexOf(options.echo)\n        @_echo \"LOG: #{options.level}, #{@_doc._id} #{@_doc.runId}: #{message}\", options.level\n      delete options.echo\n    if @_doc._id?\n      return methodCall @_root, \"jobLog\", [@_doc._id, @_doc.runId, message, options], cb\n    else  # Log can be called on an unsaved job\n      @_doc.log ?= []\n      @_doc.log.push { time: new Date(), runId: null, level: options.level, message: message }\n      if cb? and typeof cb is 'function'\n        _setImmediate cb, null, true   # DO NOT release Zalgo\n      return @  # Allow call chaining in this case\n\n  # Indicate progress made for a running job. This is important for\n  # long running jobs so the scheduler doesn't assume they are dead\n  progress: (completed = 0, total = 1, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if (typeof completed is 'number' and\n        typeof total is 'number' and\n        completed >= 0 and\n        total > 0 and\n        total >= completed)\n      progress =\n        completed: completed\n        total: total\n        percent: 100*completed/total\n      if options.echo\n        delete options.echo\n        @_echo \"PROGRESS: #{@_doc._id} #{@_doc.runId}: #{progress.completed} out of #{progress.total} (#{progress.percent}%)\"\n      if @_doc._id? and @_doc.runId?\n        return methodCall @_root, \"jobProgress\", [@_doc._id, @_doc.runId, completed, total, options], cb, (res) =>\n          if res\n            @_doc.progress = progress\n          res\n      else unless @_doc._id?\n        @_doc.progress = progress\n        if cb? and typeof cb is 'function'\n          _setImmediate cb, null, true   # DO NOT release Zalgo\n        return @\n    else\n      throw new Error \"job.progress: something is wrong with progress params: #{@id}, #{completed} out of #{total}\"\n    return null\n\n  # Save this job to the server job queue Collection it will also resave a modified job if the\n  # job is not running and hasn't completed.\n  save: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    return methodCall @_root, \"jobSave\", [@_doc, options], cb, (id) =>\n      if id\n        @_doc._id = id\n      id\n\n  # Refresh the local job state with the server job queue's version\n  refresh: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.getLog ?= false\n    if @_doc._id?\n      return methodCall @_root, \"getJob\", [@_doc._id, options], cb, (doc) =>\n        if doc?\n          @_doc = doc\n          @\n        else\n          false\n    else\n      throw new Error \"Can't call .refresh() on an unsaved job\"\n\n  # Indicate to the server that this run has successfully finished.\n  done: (result = {}, options..., cb) ->\n    if typeof result is 'function'\n      cb = result\n      result = {}\n    [options, cb] = optionsHelp options, cb\n    unless result? and typeof result is 'object'\n      result = { value: result }\n    if @_doc._id? and @_doc.runId?\n      return methodCall @_root, \"jobDone\", [@_doc._id, @_doc.runId, result, options], cb\n    else\n      throw new Error \"Can't call .done() on an unsaved or non-running job\"\n    return null\n\n  # Indicate to the server that this run has failed and provide an error message.\n  fail: (result = \"No error information provided\", options..., cb) ->\n    if typeof result is 'function'\n      cb = result\n      result = \"No error information provided\"\n    [options, cb] = optionsHelp options, cb\n    unless result? and typeof result is 'object'\n      result = { value: result }\n    options.fatal ?= false\n    if @_doc._id? and @_doc.runId?\n      return methodCall @_root, \"jobFail\", [@_doc._id, @_doc.runId, result, options], cb\n    else\n      throw new Error \"Can't call .fail() on an unsaved or non-running job\"\n    return null\n\n  # Pause this job, only Ready and Waiting jobs can be paused\n  pause: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if @_doc._id?\n      return methodCall @_root, \"jobPause\", [@_doc._id, options], cb\n    else\n      @_doc.status = 'paused'\n      if cb? and typeof cb is 'function'\n        _setImmediate cb, null, true  # DO NOT release Zalgo\n      return @\n    return null\n\n  # Resume this job, only Paused jobs can be resumed\n  # Resumed jobs go to waiting\n  resume: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if @_doc._id?\n      return methodCall @_root, \"jobResume\", [@_doc._id, options], cb\n    else\n      @_doc.status = 'waiting'\n      if cb? and typeof cb is 'function'\n        _setImmediate cb, null, true  # DO NOT release Zalgo\n      return @\n    return null\n\n  # Make a waiting job ready to run. Jobs with dependencies only when forced\n  ready: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.force ?= false\n    if @_doc._id?\n      return methodCall @_root, \"jobReady\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .ready() on an unsaved job\"\n    return null\n\n  # Cancel this job if it is running or able to run (waiting, ready)\n  cancel: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.antecedents ?= true\n    if @_doc._id?\n      return methodCall @_root, \"jobCancel\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .cancel() on an unsaved job\"\n    return null\n\n  # Restart a failed or cancelled job\n  restart: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.retries ?= 1\n    options.dependents ?= true\n    if @_doc._id?\n      return methodCall @_root, \"jobRestart\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .restart() on an unsaved job\"\n    return null\n\n  # Run a completed job again as a new job, essentially a manual repeat\n  rerun: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.repeats ?= 0\n    options.wait ?= @_doc.repeatWait\n    if @_doc._id?\n      return methodCall @_root, \"jobRerun\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .rerun() on an unsaved job\"\n    return null\n\n  # Remove a job that is not able to run (completed, cancelled, failed) from the queue\n  remove: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if @_doc._id?\n      return methodCall @_root, \"jobRemove\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .remove() on an unsaved job\"\n    return null\n\n    # Define convenience getters for some document properties\n  Object.defineProperties @prototype,\n    doc:\n      get: () -> @_doc\n      set: () -> console.warn \"Job.doc cannot be directly assigned.\"\n    type:\n      get: () -> @_doc.type\n      set: () -> console.warn \"Job.type cannot be directly assigned.\"\n    data:\n      get: () -> @_doc.data\n      set: () -> console.warn \"Job.data cannot be directly assigned.\"\n\n# Export Job in a npm package\nif module?.exports?\n  module.exports = Job\n","var JobQueue, _clearInterval, _setImmediate, _setInterval, concatReduce, isBoolean, isInteger, methodCall, optionsHelp, reduceCallbacks, splitLongArray,     \n  slice = [].slice,\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nmethodCall = function(root, method, params, cb, after) {\n  var apply, name, ref, ref1, ref2, ref3;\n  if (after == null) {\n    after = (function(ret) {\n      return ret;\n    });\n  }\n  apply = (ref = (ref1 = Job._ddp_apply) != null ? ref1[(ref2 = root.root) != null ? ref2 : root] : void 0) != null ? ref : Job._ddp_apply;\n  if (typeof apply !== 'function') {\n    throw new Error(\"Job remote method call error, no valid invocation method found.\");\n  }\n  name = ((ref3 = root.root) != null ? ref3 : root) + \"_\" + method;\n  if (cb && typeof cb === 'function') {\n    return apply(name, params, (function(_this) {\n      return function(err, res) {\n        if (err) {\n          return cb(err);\n        }\n        return cb(null, after(res));\n      };\n    })(this));\n  } else {\n    return after(apply(name, params));\n  }\n};\n\noptionsHelp = function(options, cb) {\n  var ref;\n  if ((cb != null) && typeof cb !== 'function') {\n    options = cb;\n    cb = void 0;\n  } else {\n    if (!(typeof options === 'object' && options instanceof Array && options.length < 2)) {\n      throw new Error('options... in optionsHelp must be an Array with zero or one elements');\n    }\n    options = (ref = options != null ? options[0] : void 0) != null ? ref : {};\n  }\n  if (typeof options !== 'object') {\n    throw new Error('in optionsHelp options not an object or bad callback');\n  }\n  return [options, cb];\n};\n\nsplitLongArray = function(arr, max) {\n  var i, k, ref, results;\n  if (!(arr instanceof Array && max > 0)) {\n    throw new Error('splitLongArray: bad params');\n  }\n  results = [];\n  for (i = k = 0, ref = Math.ceil(arr.length / max); 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n    results.push(arr.slice(i * max, (i + 1) * max));\n  }\n  return results;\n};\n\nreduceCallbacks = function(cb, num, reduce, init) {\n  var cbCount, cbErr, cbRetVal;\n  if (reduce == null) {\n    reduce = (function(a, b) {\n      return a || b;\n    });\n  }\n  if (init == null) {\n    init = false;\n  }\n  if (cb == null) {\n    return void 0;\n  }\n  if (!(typeof cb === 'function' && num > 0 && typeof reduce === 'function')) {\n    throw new Error('Bad params given to reduceCallbacks');\n  }\n  cbRetVal = init;\n  cbCount = 0;\n  cbErr = null;\n  return function(err, res) {\n    if (!cbErr) {\n      if (err) {\n        cbErr = err;\n        return cb(err);\n      } else {\n        cbCount++;\n        cbRetVal = reduce(cbRetVal, res);\n        if (cbCount === num) {\n          return cb(null, cbRetVal);\n        } else if (cbCount > num) {\n          throw new Error(\"reduceCallbacks callback invoked more than requested \" + num + \" times\");\n        }\n      }\n    }\n  };\n};\n\nconcatReduce = function(a, b) {\n  if (!(a instanceof Array)) {\n    a = [a];\n  }\n  return a.concat(b);\n};\n\nisInteger = function(i) {\n  return typeof i === 'number' && Math.floor(i) === i;\n};\n\nisBoolean = function(b) {\n  return typeof b === 'boolean';\n};\n\n_setImmediate = function() {\n  var args, func;\n  func = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.setTimeout : void 0) != null) {\n    return Meteor.setTimeout.apply(Meteor, [func, 0].concat(slice.call(args)));\n  } else if (typeof setImmediate !== \"undefined\" && setImmediate !== null) {\n    return setImmediate.apply(null, [func].concat(slice.call(args)));\n  } else {\n    return setTimeout.apply(null, [func, 0].concat(slice.call(args)));\n  }\n};\n\n_setInterval = function() {\n  var args, func, timeOut;\n  func = arguments[0], timeOut = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.setInterval : void 0) != null) {\n    return Meteor.setInterval.apply(Meteor, [func, timeOut].concat(slice.call(args)));\n  } else {\n    return setInterval.apply(null, [func, timeOut].concat(slice.call(args)));\n  }\n};\n\n_clearInterval = function(id) {\n  if ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.clearInterval : void 0) != null) {\n    return Meteor.clearInterval(id);\n  } else {\n    return clearInterval(id);\n  }\n};\n\nJobQueue = (function() {\n  function JobQueue() {\n    var k, options, ref, ref1, ref2, ref3, root1, type1, worker;\n    root1 = arguments[0], type1 = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), worker = arguments[k++];\n    this.root = root1;\n    this.type = type1;\n    this.worker = worker;\n    if (!(this instanceof JobQueue)) {\n      return (function(func, args, ctor) {\n        ctor.prototype = func.prototype;\n        var child = new ctor, result = func.apply(child, args);\n        return Object(result) === result ? result : child;\n      })(JobQueue, [this.root, this.type].concat(slice.call(options), [this.worker]), function(){});\n    }\n    ref = optionsHelp(options, this.worker), options = ref[0], this.worker = ref[1];\n    this.pollInterval = (options.pollInterval != null) && !options.pollInterval ? Job.forever : !((options.pollInterval != null) && isInteger(options.pollInterval)) ? 5000 : options.pollInterval;\n    if (!(isInteger(this.pollInterval) && this.pollInterval >= 0)) {\n      throw new Error(\"JobQueue: Invalid pollInterval, must be a positive integer\");\n    }\n    this.concurrency = (ref1 = options.concurrency) != null ? ref1 : 1;\n    if (!(isInteger(this.concurrency) && this.concurrency >= 0)) {\n      throw new Error(\"JobQueue: Invalid concurrency, must be a positive integer\");\n    }\n    this.payload = (ref2 = options.payload) != null ? ref2 : 1;\n    if (!(isInteger(this.payload) && this.payload >= 0)) {\n      throw new Error(\"JobQueue: Invalid payload, must be a positive integer\");\n    }\n    this.prefetch = (ref3 = options.prefetch) != null ? ref3 : 0;\n    if (!(isInteger(this.prefetch) && this.prefetch >= 0)) {\n      throw new Error(\"JobQueue: Invalid prefetch, must be a positive integer\");\n    }\n    this.workTimeout = options.workTimeout;\n    if ((this.workTimeout != null) && !(isInteger(this.workTimeout) && this.workTimeout >= 0)) {\n      throw new Error(\"JobQueue: Invalid workTimeout, must be a positive integer\");\n    }\n    this.callbackStrict = options.callbackStrict;\n    if ((this.callbackStrict != null) && !isBoolean(this.callbackStrict)) {\n      throw new Error(\"JobQueue: Invalid callbackStrict, must be a boolean\");\n    }\n    this._workers = {};\n    this._tasks = [];\n    this._taskNumber = 0;\n    this._stoppingGetWork = void 0;\n    this._stoppingTasks = void 0;\n    this._interval = null;\n    this._getWorkOutstanding = false;\n    this.paused = true;\n    this.resume();\n  }\n\n  JobQueue.prototype._getWork = function() {\n    var numJobsToGet, options;\n    if (!(this._getWorkOutstanding || this.paused)) {\n      numJobsToGet = this.prefetch + this.payload * (this.concurrency - this.running()) - this.length();\n      if (numJobsToGet > 0) {\n        this._getWorkOutstanding = true;\n        options = {\n          maxJobs: numJobsToGet\n        };\n        if (this.workTimeout != null) {\n          options.workTimeout = this.workTimeout;\n        }\n        return Job.getWork(this.root, this.type, options, (function(_this) {\n          return function(err, jobs) {\n            var j, k, len;\n            _this._getWorkOutstanding = false;\n            if (err) {\n              return console.error(\"JobQueue: Received error from getWork(): \", err);\n            } else if ((jobs != null) && jobs instanceof Array) {\n              if (jobs.length > numJobsToGet) {\n                console.error(\"JobQueue: getWork() returned jobs (\" + jobs.length + \") in excess of maxJobs (\" + numJobsToGet + \")\");\n              }\n              for (k = 0, len = jobs.length; k < len; k++) {\n                j = jobs[k];\n                _this._tasks.push(j);\n                if (_this._stoppingGetWork == null) {\n                  _setImmediate(_this._process.bind(_this));\n                }\n              }\n              if (_this._stoppingGetWork != null) {\n                return _this._stoppingGetWork();\n              }\n            } else {\n              return console.error(\"JobQueue: Nonarray response from server from getWork()\");\n            }\n          };\n        })(this));\n      }\n    }\n  };\n\n  JobQueue.prototype._only_once = function(fn) {\n    var called;\n    called = false;\n    return (function(_this) {\n      return function() {\n        if (called) {\n          console.error(\"Worker callback called multiple times in JobQueue\");\n          if (_this.callbackStrict) {\n            throw new Error(\"JobQueue worker callback was invoked multiple times\");\n          }\n        }\n        called = true;\n        return fn.apply(_this, arguments);\n      };\n    })(this);\n  };\n\n  JobQueue.prototype._process = function() {\n    var cb, job, next;\n    if (!this.paused && this.running() < this.concurrency && this.length()) {\n      if (this.payload > 1) {\n        job = this._tasks.splice(0, this.payload);\n      } else {\n        job = this._tasks.shift();\n      }\n      job._taskId = \"Task_\" + (this._taskNumber++);\n      this._workers[job._taskId] = job;\n      next = (function(_this) {\n        return function() {\n          delete _this._workers[job._taskId];\n          if ((_this._stoppingTasks != null) && _this.running() === 0 && _this.length() === 0) {\n            return _this._stoppingTasks();\n          } else {\n            _setImmediate(_this._process.bind(_this));\n            return _setImmediate(_this._getWork.bind(_this));\n          }\n        };\n      })(this);\n      cb = this._only_once(next);\n      return this.worker(job, cb);\n    }\n  };\n\n  JobQueue.prototype._stopGetWork = function(callback) {\n    _clearInterval(this._interval);\n    this._interval = null;\n    if (this._getWorkOutstanding) {\n      return this._stoppingGetWork = callback;\n    } else {\n      return _setImmediate(callback);\n    }\n  };\n\n  JobQueue.prototype._waitForTasks = function(callback) {\n    if (this.running() !== 0) {\n      return this._stoppingTasks = callback;\n    } else {\n      return _setImmediate(callback);\n    }\n  };\n\n  JobQueue.prototype._failJobs = function(tasks, callback) {\n    var count, job, k, len, results;\n    if (tasks.length === 0) {\n      _setImmediate(callback);\n    }\n    count = 0;\n    results = [];\n    for (k = 0, len = tasks.length; k < len; k++) {\n      job = tasks[k];\n      results.push(job.fail(\"Worker shutdown\", (function(_this) {\n        return function(err, res) {\n          count++;\n          if (count === tasks.length) {\n            return callback();\n          }\n        };\n      })(this)));\n    }\n    return results;\n  };\n\n  JobQueue.prototype._hard = function(callback) {\n    this.paused = true;\n    return this._stopGetWork((function(_this) {\n      return function() {\n        var i, r, ref, tasks;\n        tasks = _this._tasks;\n        _this._tasks = [];\n        ref = _this._workers;\n        for (i in ref) {\n          r = ref[i];\n          tasks = tasks.concat(r);\n        }\n        return _this._failJobs(tasks, callback);\n      };\n    })(this));\n  };\n\n  JobQueue.prototype._stop = function(callback) {\n    this.paused = true;\n    return this._stopGetWork((function(_this) {\n      return function() {\n        var tasks;\n        tasks = _this._tasks;\n        _this._tasks = [];\n        return _this._waitForTasks(function() {\n          return _this._failJobs(tasks, callback);\n        });\n      };\n    })(this));\n  };\n\n  JobQueue.prototype._soft = function(callback) {\n    return this._stopGetWork((function(_this) {\n      return function() {\n        return _this._waitForTasks(callback);\n      };\n    })(this));\n  };\n\n  JobQueue.prototype.length = function() {\n    return this._tasks.length;\n  };\n\n  JobQueue.prototype.running = function() {\n    return Object.keys(this._workers).length;\n  };\n\n  JobQueue.prototype.idle = function() {\n    return this.length() + this.running() === 0;\n  };\n\n  JobQueue.prototype.full = function() {\n    return this.running() === this.concurrency;\n  };\n\n  JobQueue.prototype.pause = function() {\n    if (this.paused) {\n      return;\n    }\n    if (!(this.pollInterval >= Job.forever)) {\n      _clearInterval(this._interval);\n      this._interval = null;\n    }\n    this.paused = true;\n    return this;\n  };\n\n  JobQueue.prototype.resume = function() {\n    var k, ref, w;\n    if (!this.paused) {\n      return;\n    }\n    this.paused = false;\n    _setImmediate(this._getWork.bind(this));\n    if (!(this.pollInterval >= Job.forever)) {\n      this._interval = _setInterval(this._getWork.bind(this), this.pollInterval);\n    }\n    for (w = k = 1, ref = this.concurrency; 1 <= ref ? k <= ref : k >= ref; w = 1 <= ref ? ++k : --k) {\n      _setImmediate(this._process.bind(this));\n    }\n    return this;\n  };\n\n  JobQueue.prototype.trigger = function() {\n    if (this.paused) {\n      return;\n    }\n    _setImmediate(this._getWork.bind(this));\n    return this;\n  };\n\n  JobQueue.prototype.shutdown = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.level == null) {\n      options.level = 'normal';\n    }\n    if (options.quiet == null) {\n      options.quiet = false;\n    }\n    if (cb == null) {\n      if (!options.quiet) {\n        console.warn(\"using default shutdown callback!\");\n      }\n      cb = (function(_this) {\n        return function() {\n          return console.warn(\"Shutdown complete\");\n        };\n      })(this);\n    }\n    switch (options.level) {\n      case 'hard':\n        if (!options.quiet) {\n          console.warn(\"Shutting down hard\");\n        }\n        return this._hard(cb);\n      case 'soft':\n        if (!options.quiet) {\n          console.warn(\"Shutting down soft\");\n        }\n        return this._soft(cb);\n      default:\n        if (!options.quiet) {\n          console.warn(\"Shutting down normally\");\n        }\n        return this._stop(cb);\n    }\n  };\n\n  return JobQueue;\n\n})();\n\nJob = (function() {\n  Job.forever = 9007199254740992;\n\n  Job.foreverDate = new Date(8640000000000000);\n\n  Job.jobPriorities = {\n    low: 10,\n    normal: 0,\n    medium: -5,\n    high: -10,\n    critical: -15\n  };\n\n  Job.jobRetryBackoffMethods = ['constant', 'exponential'];\n\n  Job.jobStatuses = ['waiting', 'paused', 'ready', 'running', 'failed', 'cancelled', 'completed'];\n\n  Job.jobLogLevels = ['info', 'success', 'warning', 'danger'];\n\n  Job.jobStatusCancellable = ['running', 'ready', 'waiting', 'paused'];\n\n  Job.jobStatusPausable = ['ready', 'waiting'];\n\n  Job.jobStatusRemovable = ['cancelled', 'completed', 'failed'];\n\n  Job.jobStatusRestartable = ['cancelled', 'failed'];\n\n  Job.ddpMethods = ['startJobs', 'stopJobs', 'startJobServer', 'shutdownJobServer', 'jobRemove', 'jobPause', 'jobResume', 'jobReady', 'jobCancel', 'jobRestart', 'jobSave', 'jobRerun', 'getWork', 'getJob', 'jobLog', 'jobProgress', 'jobDone', 'jobFail'];\n\n  Job.ddpPermissionLevels = ['admin', 'manager', 'creator', 'worker'];\n\n  Job.ddpMethodPermissions = {\n    'startJobs': ['startJobs', 'admin'],\n    'stopJobs': ['stopJobs', 'admin'],\n    'startJobServer': ['startJobServer', 'admin'],\n    'shutdownJobServer': ['shutdownJobServer', 'admin'],\n    'jobRemove': ['jobRemove', 'admin', 'manager'],\n    'jobPause': ['jobPause', 'admin', 'manager'],\n    'jobResume': ['jobResume', 'admin', 'manager'],\n    'jobCancel': ['jobCancel', 'admin', 'manager'],\n    'jobReady': ['jobReady', 'admin', 'manager'],\n    'jobRestart': ['jobRestart', 'admin', 'manager'],\n    'jobSave': ['jobSave', 'admin', 'creator'],\n    'jobRerun': ['jobRerun', 'admin', 'creator'],\n    'getWork': ['getWork', 'admin', 'worker'],\n    'getJob': ['getJob', 'admin', 'worker'],\n    'jobLog': ['jobLog', 'admin', 'worker'],\n    'jobProgress': ['jobProgress', 'admin', 'worker'],\n    'jobDone': ['jobDone', 'admin', 'worker'],\n    'jobFail': ['jobFail', 'admin', 'worker']\n  };\n\n  Job._ddp_apply = void 0;\n\n  Job._setDDPApply = function(apply, collectionName) {\n    if (typeof apply === 'function') {\n      if (typeof collectionName === 'string') {\n        if (this._ddp_apply == null) {\n          this._ddp_apply = {};\n        }\n        if (typeof this._ddp_apply === 'function') {\n          throw new Error(\"Job.setDDP must specify a collection name each time if called more than once.\");\n        }\n        return this._ddp_apply[collectionName] = apply;\n      } else if (!this._ddp_apply) {\n        return this._ddp_apply = apply;\n      } else {\n        throw new Error(\"Job.setDDP must specify a collection name each time if called more than once.\");\n      }\n    } else {\n      throw new Error(\"Bad function in Job.setDDPApply()\");\n    }\n  };\n\n  Job.setDDP = function(ddp, collectionNames, Fiber) {\n    var collName, k, len, results;\n    if (ddp == null) {\n      ddp = null;\n    }\n    if (collectionNames == null) {\n      collectionNames = null;\n    }\n    if (Fiber == null) {\n      Fiber = null;\n    }\n    if (!((typeof collectionNames === 'string') || (collectionNames instanceof Array))) {\n      Fiber = collectionNames;\n      collectionNames = [void 0];\n    } else if (typeof collectionNames === 'string') {\n      collectionNames = [collectionNames];\n    }\n    results = [];\n    for (k = 0, len = collectionNames.length; k < len; k++) {\n      collName = collectionNames[k];\n      if (!((ddp != null) && (ddp.close != null) && (ddp.subscribe != null))) {\n        if (ddp === null && ((typeof Meteor !== \"undefined\" && Meteor !== null ? Meteor.apply : void 0) != null)) {\n          results.push(this._setDDPApply(Meteor.apply, collName));\n        } else {\n          throw new Error(\"Bad ddp object in Job.setDDP()\");\n        }\n      } else if (ddp.observe == null) {\n        results.push(this._setDDPApply(ddp.apply.bind(ddp), collName));\n      } else {\n        if (Fiber == null) {\n          results.push(this._setDDPApply(ddp.call.bind(ddp), collName));\n        } else {\n          results.push(this._setDDPApply((function(name, params, cb) {\n            var fib;\n            fib = Fiber.current;\n            ddp.call(name, params, function(err, res) {\n              if ((cb != null) && typeof cb === 'function') {\n                return cb(err, res);\n              } else {\n                if (err) {\n                  return fib.throwInto(err);\n                } else {\n                  return fib.run(res);\n                }\n              }\n            });\n            if ((cb != null) && typeof cb === 'function') {\n\n            } else {\n              return Fiber[\"yield\"]();\n            }\n          }), collName));\n        }\n      }\n    }\n    return results;\n  };\n\n  Job.getWork = function() {\n    var cb, k, options, ref, root, type;\n    root = arguments[0], type = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (typeof type === 'string') {\n      type = [type];\n    }\n    if (options.workTimeout != null) {\n      if (!(isInteger(options.workTimeout) && options.workTimeout > 0)) {\n        throw new Error('getWork: workTimeout must be a positive integer');\n      }\n    }\n    return methodCall(root, \"getWork\", [type, options], cb, (function(_this) {\n      return function(res) {\n        var doc, jobs;\n        jobs = ((function() {\n          var l, len, results;\n          results = [];\n          for (l = 0, len = res.length; l < len; l++) {\n            doc = res[l];\n            results.push(new Job(root, doc));\n          }\n          return results;\n        })()) || [];\n        if (options.maxJobs != null) {\n          return jobs;\n        } else {\n          return jobs[0];\n        }\n      };\n    })(this));\n  };\n\n  Job.processJobs = JobQueue;\n\n  Job.makeJob = (function() {\n    var depFlag;\n    depFlag = false;\n    return function(root, doc) {\n      if (!depFlag) {\n        depFlag = true;\n        console.warn(\"Job.makeJob(root, jobDoc) has been deprecated and will be removed in a future release, use 'new Job(root, jobDoc)' instead.\");\n      }\n      return new Job(root, doc);\n    };\n  })();\n\n  Job.getJob = function() {\n    var cb, id, k, options, ref, root;\n    root = arguments[0], id = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.getLog == null) {\n      options.getLog = false;\n    }\n    return methodCall(root, \"getJob\", [id, options], cb, (function(_this) {\n      return function(doc) {\n        if (doc) {\n          return new Job(root, doc);\n        } else {\n          return void 0;\n        }\n      };\n    })(this));\n  };\n\n  Job.getJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.getLog == null) {\n      options.getLog = false;\n    }\n    retVal = [];\n    chunksOfIds = splitLongArray(ids, 32);\n    myCb = reduceCallbacks(cb, chunksOfIds.length, concatReduce, []);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = retVal.concat(methodCall(root, \"getJob\", [chunkOfIds, options], myCb, (function(_this) {\n        return function(doc) {\n          var d, len1, m, results;\n          if (doc) {\n            results = [];\n            for (m = 0, len1 = doc.length; m < len1; m++) {\n              d = doc[m];\n              results.push(new Job(root, d.type, d.data, d));\n            }\n            return results;\n          } else {\n            return null;\n          }\n        };\n      })(this)));\n    }\n    return retVal;\n  };\n\n  Job.pauseJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobPause\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.resumeJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobResume\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.readyJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    if (ids == null) {\n      ids = [];\n    }\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.force == null) {\n      options.force = false;\n    }\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    if (!(chunksOfIds.length > 0)) {\n      chunksOfIds = [[]];\n    }\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobReady\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.cancelJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.antecedents == null) {\n      options.antecedents = true;\n    }\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobCancel\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.restartJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.retries == null) {\n      options.retries = 1;\n    }\n    if (options.dependents == null) {\n      options.dependents = true;\n    }\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobRestart\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.removeJobs = function() {\n    var cb, chunkOfIds, chunksOfIds, ids, k, l, len, myCb, options, ref, retVal, root;\n    root = arguments[0], ids = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    retVal = false;\n    chunksOfIds = splitLongArray(ids, 256);\n    myCb = reduceCallbacks(cb, chunksOfIds.length);\n    for (l = 0, len = chunksOfIds.length; l < len; l++) {\n      chunkOfIds = chunksOfIds[l];\n      retVal = methodCall(root, \"jobRemove\", [chunkOfIds, options], myCb) || retVal;\n    }\n    return retVal;\n  };\n\n  Job.startJobs = function() {\n    var cb, k, options, ref, root;\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    return methodCall(root, \"startJobs\", [options], cb);\n  };\n\n  Job.stopJobs = function() {\n    var cb, k, options, ref, root;\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.timeout == null) {\n      options.timeout = 60 * 1000;\n    }\n    return methodCall(root, \"stopJobs\", [options], cb);\n  };\n\n  Job.startJobServer = function() {\n    var cb, k, options, ref, root;\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    return methodCall(root, \"startJobServer\", [options], cb);\n  };\n\n  Job.shutdownJobServer = function() {\n    var cb, k, options, ref, root;\n    root = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.timeout == null) {\n      options.timeout = 60 * 1000;\n    }\n    return methodCall(root, \"shutdownJobServer\", [options], cb);\n  };\n\n  function Job(root1, type, data) {\n    var doc, ref, time;\n    this.root = root1;\n    if (!(this instanceof Job)) {\n      return new Job(this.root, type, data);\n    }\n    this._root = this.root;\n    if ((((ref = this.root) != null ? ref.root : void 0) != null) && typeof this.root.root === 'string') {\n      this.root = this._root.root;\n    }\n    if ((data == null) && ((type != null ? type.data : void 0) != null) && ((type != null ? type.type : void 0) != null)) {\n      if (type instanceof Job) {\n        return type;\n      }\n      doc = type;\n      data = doc.data;\n      type = doc.type;\n    } else {\n      doc = {};\n    }\n    if (!(typeof doc === 'object' && typeof data === 'object' && typeof type === 'string' && typeof this.root === 'string')) {\n      throw new Error(\"new Job: bad parameter(s), \" + this.root + \" (\" + (typeof this.root) + \"), \" + type + \" (\" + (typeof type) + \"), \" + data + \" (\" + (typeof data) + \"), \" + doc + \" (\" + (typeof doc) + \")\");\n    } else if ((doc.type != null) && (doc.data != null)) {\n      this._doc = doc;\n    } else {\n      time = new Date();\n      this._doc = {\n        runId: null,\n        type: type,\n        data: data,\n        status: 'waiting',\n        updated: time,\n        created: time\n      };\n      this.priority().retry().repeat().after().progress().depends().log(\"Constructed\");\n    }\n    return this;\n  }\n\n  Job.prototype._echo = function(message, level) {\n    if (level == null) {\n      level = null;\n    }\n    switch (level) {\n      case 'danger':\n        console.error(message);\n        break;\n      case 'warning':\n        console.warn(message);\n        break;\n      case 'success':\n        console.log(message);\n        break;\n      default:\n        console.info(message);\n    }\n  };\n\n  Job.prototype.depends = function(jobs) {\n    var depends, j, k, len;\n    if (jobs) {\n      if (jobs instanceof Job) {\n        jobs = [jobs];\n      }\n      if (jobs instanceof Array) {\n        depends = this._doc.depends;\n        for (k = 0, len = jobs.length; k < len; k++) {\n          j = jobs[k];\n          if (!(j instanceof Job && (j._doc._id != null))) {\n            throw new Error('Each provided object must be a saved Job instance (with an _id)');\n          }\n          depends.push(j._doc._id);\n        }\n      } else {\n        throw new Error('Bad input parameter: depends() accepts a falsy value, or Job or array of Jobs');\n      }\n    } else {\n      depends = [];\n    }\n    this._doc.depends = depends;\n    this._doc.resolved = [];\n    return this;\n  };\n\n  Job.prototype.priority = function(level) {\n    var priority;\n    if (level == null) {\n      level = 0;\n    }\n    if (typeof level === 'string') {\n      priority = Job.jobPriorities[level];\n      if (priority == null) {\n        throw new Error('Invalid string priority level provided');\n      }\n    } else if (isInteger(level)) {\n      priority = level;\n    } else {\n      throw new Error('priority must be an integer or valid priority level');\n      priority = 0;\n    }\n    this._doc.priority = priority;\n    return this;\n  };\n\n  Job.prototype.retry = function(options) {\n    var base, ref;\n    if (options == null) {\n      options = 0;\n    }\n    if (isInteger(options) && options >= 0) {\n      options = {\n        retries: options\n      };\n    }\n    if (typeof options !== 'object') {\n      throw new Error('bad parameter: accepts either an integer >= 0 or an options object');\n    }\n    if (options.retries != null) {\n      if (!(isInteger(options.retries) && options.retries >= 0)) {\n        throw new Error('bad option: retries must be an integer >= 0');\n      }\n      options.retries++;\n    } else {\n      options.retries = Job.forever;\n    }\n    if (options.until != null) {\n      if (!(options.until instanceof Date)) {\n        throw new Error('bad option: until must be a Date object');\n      }\n    } else {\n      options.until = Job.foreverDate;\n    }\n    if (options.wait != null) {\n      if (!(isInteger(options.wait) && options.wait >= 0)) {\n        throw new Error('bad option: wait must be an integer >= 0');\n      }\n    } else {\n      options.wait = 5 * 60 * 1000;\n    }\n    if (options.backoff != null) {\n      if (ref = options.backoff, indexOf.call(Job.jobRetryBackoffMethods, ref) < 0) {\n        throw new Error('bad option: invalid retry backoff method');\n      }\n    } else {\n      options.backoff = 'constant';\n    }\n    this._doc.retries = options.retries;\n    this._doc.repeatRetries = options.retries;\n    this._doc.retryWait = options.wait;\n    if ((base = this._doc).retried == null) {\n      base.retried = 0;\n    }\n    this._doc.retryBackoff = options.backoff;\n    this._doc.retryUntil = options.until;\n    return this;\n  };\n\n  Job.prototype.repeat = function(options) {\n    var base, ref;\n    if (options == null) {\n      options = 0;\n    }\n    if (isInteger(options) && options >= 0) {\n      options = {\n        repeats: options\n      };\n    }\n    if (typeof options !== 'object') {\n      throw new Error('bad parameter: accepts either an integer >= 0 or an options object');\n    }\n    if ((options.wait != null) && (options.schedule != null)) {\n      throw new Error('bad options: wait and schedule options are mutually exclusive');\n    }\n    if (options.repeats != null) {\n      if (!(isInteger(options.repeats) && options.repeats >= 0)) {\n        throw new Error('bad option: repeats must be an integer >= 0');\n      }\n    } else {\n      options.repeats = Job.forever;\n    }\n    if (options.until != null) {\n      if (!(options.until instanceof Date)) {\n        throw new Error('bad option: until must be a Date object');\n      }\n    } else {\n      options.until = Job.foreverDate;\n    }\n    if (options.wait != null) {\n      if (!(isInteger(options.wait) && options.wait >= 0)) {\n        throw new Error('bad option: wait must be an integer >= 0');\n      }\n    } else {\n      options.wait = 5 * 60 * 1000;\n    }\n    if (options.schedule != null) {\n      if (typeof options.schedule !== 'object') {\n        throw new Error('bad option, schedule option must be an object');\n      }\n      if (!((((ref = options.schedule) != null ? ref.schedules : void 0) != null) && options.schedule.schedules instanceof Array)) {\n        throw new Error('bad option, schedule object requires a schedules attribute of type Array.');\n      }\n      if ((options.schedule.exceptions != null) && !(options.schedule.exceptions instanceof Array)) {\n        throw new Error('bad option, schedule object exceptions attribute must be an Array');\n      }\n      options.wait = {\n        schedules: options.schedule.schedules,\n        exceptions: options.schedule.exceptions\n      };\n    }\n    this._doc.repeats = options.repeats;\n    this._doc.repeatWait = options.wait;\n    if ((base = this._doc).repeated == null) {\n      base.repeated = 0;\n    }\n    this._doc.repeatUntil = options.until;\n    return this;\n  };\n\n  Job.prototype.delay = function(wait) {\n    if (wait == null) {\n      wait = 0;\n    }\n    if (!(isInteger(wait) && wait >= 0)) {\n      throw new Error('Bad parameter, delay requires a non-negative integer.');\n    }\n    return this.after(new Date(new Date().valueOf() + wait));\n  };\n\n  Job.prototype.after = function(time) {\n    var after;\n    if (time == null) {\n      time = new Date(0);\n    }\n    if (typeof time === 'object' && time instanceof Date) {\n      after = time;\n    } else {\n      throw new Error('Bad parameter, after requires a valid Date object');\n    }\n    this._doc.after = after;\n    return this;\n  };\n\n  Job.prototype.log = function() {\n    var base, cb, k, message, options, ref, ref1;\n    message = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.level == null) {\n      options.level = 'info';\n    }\n    if (typeof message !== 'string') {\n      throw new Error('Log message must be a string');\n    }\n    if (!(typeof options.level === 'string' && (ref1 = options.level, indexOf.call(Job.jobLogLevels, ref1) >= 0))) {\n      throw new Error('Log level options must be one of Job.jobLogLevels');\n    }\n    if (options.echo != null) {\n      if (options.echo && Job.jobLogLevels.indexOf(options.level) >= Job.jobLogLevels.indexOf(options.echo)) {\n        this._echo(\"LOG: \" + options.level + \", \" + this._doc._id + \" \" + this._doc.runId + \": \" + message, options.level);\n      }\n      delete options.echo;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobLog\", [this._doc._id, this._doc.runId, message, options], cb);\n    } else {\n      if ((base = this._doc).log == null) {\n        base.log = [];\n      }\n      this._doc.log.push({\n        time: new Date(),\n        runId: null,\n        level: options.level,\n        message: message\n      });\n      if ((cb != null) && typeof cb === 'function') {\n        _setImmediate(cb, null, true);\n      }\n      return this;\n    }\n  };\n\n  Job.prototype.progress = function() {\n    var cb, completed, k, options, progress, ref, total;\n    completed = arguments[0], total = arguments[1], options = 4 <= arguments.length ? slice.call(arguments, 2, k = arguments.length - 1) : (k = 2, []), cb = arguments[k++];\n    if (completed == null) {\n      completed = 0;\n    }\n    if (total == null) {\n      total = 1;\n    }\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (typeof completed === 'number' && typeof total === 'number' && completed >= 0 && total > 0 && total >= completed) {\n      progress = {\n        completed: completed,\n        total: total,\n        percent: 100 * completed / total\n      };\n      if (options.echo) {\n        delete options.echo;\n        this._echo(\"PROGRESS: \" + this._doc._id + \" \" + this._doc.runId + \": \" + progress.completed + \" out of \" + progress.total + \" (\" + progress.percent + \"%)\");\n      }\n      if ((this._doc._id != null) && (this._doc.runId != null)) {\n        return methodCall(this._root, \"jobProgress\", [this._doc._id, this._doc.runId, completed, total, options], cb, (function(_this) {\n          return function(res) {\n            if (res) {\n              _this._doc.progress = progress;\n            }\n            return res;\n          };\n        })(this));\n      } else if (this._doc._id == null) {\n        this._doc.progress = progress;\n        if ((cb != null) && typeof cb === 'function') {\n          _setImmediate(cb, null, true);\n        }\n        return this;\n      }\n    } else {\n      throw new Error(\"job.progress: something is wrong with progress params: \" + this.id + \", \" + completed + \" out of \" + total);\n    }\n    return null;\n  };\n\n  Job.prototype.save = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    return methodCall(this._root, \"jobSave\", [this._doc, options], cb, (function(_this) {\n      return function(id) {\n        if (id) {\n          _this._doc._id = id;\n        }\n        return id;\n      };\n    })(this));\n  };\n\n  Job.prototype.refresh = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.getLog == null) {\n      options.getLog = false;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"getJob\", [this._doc._id, options], cb, (function(_this) {\n        return function(doc) {\n          if (doc != null) {\n            _this._doc = doc;\n            return _this;\n          } else {\n            return false;\n          }\n        };\n      })(this));\n    } else {\n      throw new Error(\"Can't call .refresh() on an unsaved job\");\n    }\n  };\n\n  Job.prototype.done = function() {\n    var cb, k, options, ref, result;\n    result = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    if (result == null) {\n      result = {};\n    }\n    if (typeof result === 'function') {\n      cb = result;\n      result = {};\n    }\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (!((result != null) && typeof result === 'object')) {\n      result = {\n        value: result\n      };\n    }\n    if ((this._doc._id != null) && (this._doc.runId != null)) {\n      return methodCall(this._root, \"jobDone\", [this._doc._id, this._doc.runId, result, options], cb);\n    } else {\n      throw new Error(\"Can't call .done() on an unsaved or non-running job\");\n    }\n    return null;\n  };\n\n  Job.prototype.fail = function() {\n    var cb, k, options, ref, result;\n    result = arguments[0], options = 3 <= arguments.length ? slice.call(arguments, 1, k = arguments.length - 1) : (k = 1, []), cb = arguments[k++];\n    if (result == null) {\n      result = \"No error information provided\";\n    }\n    if (typeof result === 'function') {\n      cb = result;\n      result = \"No error information provided\";\n    }\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (!((result != null) && typeof result === 'object')) {\n      result = {\n        value: result\n      };\n    }\n    if (options.fatal == null) {\n      options.fatal = false;\n    }\n    if ((this._doc._id != null) && (this._doc.runId != null)) {\n      return methodCall(this._root, \"jobFail\", [this._doc._id, this._doc.runId, result, options], cb);\n    } else {\n      throw new Error(\"Can't call .fail() on an unsaved or non-running job\");\n    }\n    return null;\n  };\n\n  Job.prototype.pause = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobPause\", [this._doc._id, options], cb);\n    } else {\n      this._doc.status = 'paused';\n      if ((cb != null) && typeof cb === 'function') {\n        _setImmediate(cb, null, true);\n      }\n      return this;\n    }\n    return null;\n  };\n\n  Job.prototype.resume = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobResume\", [this._doc._id, options], cb);\n    } else {\n      this._doc.status = 'waiting';\n      if ((cb != null) && typeof cb === 'function') {\n        _setImmediate(cb, null, true);\n      }\n      return this;\n    }\n    return null;\n  };\n\n  Job.prototype.ready = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.force == null) {\n      options.force = false;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobReady\", [this._doc._id, options], cb);\n    } else {\n      throw new Error(\"Can't call .ready() on an unsaved job\");\n    }\n    return null;\n  };\n\n  Job.prototype.cancel = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.antecedents == null) {\n      options.antecedents = true;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobCancel\", [this._doc._id, options], cb);\n    } else {\n      throw new Error(\"Can't call .cancel() on an unsaved job\");\n    }\n    return null;\n  };\n\n  Job.prototype.restart = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.retries == null) {\n      options.retries = 1;\n    }\n    if (options.dependents == null) {\n      options.dependents = true;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobRestart\", [this._doc._id, options], cb);\n    } else {\n      throw new Error(\"Can't call .restart() on an unsaved job\");\n    }\n    return null;\n  };\n\n  Job.prototype.rerun = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (options.repeats == null) {\n      options.repeats = 0;\n    }\n    if (options.wait == null) {\n      options.wait = this._doc.repeatWait;\n    }\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobRerun\", [this._doc._id, options], cb);\n    } else {\n      throw new Error(\"Can't call .rerun() on an unsaved job\");\n    }\n    return null;\n  };\n\n  Job.prototype.remove = function() {\n    var cb, k, options, ref;\n    options = 2 <= arguments.length ? slice.call(arguments, 0, k = arguments.length - 1) : (k = 0, []), cb = arguments[k++];\n    ref = optionsHelp(options, cb), options = ref[0], cb = ref[1];\n    if (this._doc._id != null) {\n      return methodCall(this._root, \"jobRemove\", [this._doc._id, options], cb);\n    } else {\n      throw new Error(\"Can't call .remove() on an unsaved job\");\n    }\n    return null;\n  };\n\n  Object.defineProperties(Job.prototype, {\n    doc: {\n      get: function() {\n        return this._doc;\n      },\n      set: function() {\n        return console.warn(\"Job.doc cannot be directly assigned.\");\n      }\n    },\n    type: {\n      get: function() {\n        return this._doc.type;\n      },\n      set: function() {\n        return console.warn(\"Job.type cannot be directly assigned.\");\n      }\n    },\n    data: {\n      get: function() {\n        return this._doc.data;\n      },\n      set: function() {\n        return console.warn(\"Job.data cannot be directly assigned.\");\n      }\n    }\n  });\n\n  return Job;\n\n})();\n\nif ((typeof module !== \"undefined\" && module !== null ? module.exports : void 0) != null) {\n  module.exports = Job;\n}\n","############################################################################\n#     Copyright (C) 2014-2016 by Vaughn Iverson\n#     job-collection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\n_validNumGTEZero = (v) ->\n  Match.test(v, Number) and v >= 0.0\n\n_validNumGTZero = (v) ->\n  Match.test(v, Number) and v > 0.0\n\n_validNumGTEOne = (v) ->\n  Match.test(v, Number) and v >= 1.0\n\n_validIntGTEZero = (v) ->\n  _validNumGTEZero(v) and Math.floor(v) is v\n\n_validIntGTEOne = (v) ->\n  _validNumGTEOne(v) and Math.floor(v) is v\n\n_validStatus = (v) ->\n  Match.test(v, String) and v in Job.jobStatuses\n\n_validLogLevel = (v) ->\n  Match.test(v, String) and v in Job.jobLogLevels\n\n_validRetryBackoff = (v) ->\n  Match.test(v, String) and v in Job.jobRetryBackoffMethods\n\n_validId = (v) ->\n  Match.test(v, Match.OneOf(String, Mongo.Collection.ObjectID))\n\n_validLog = () ->\n  [{\n      time: Date\n      runId: Match.OneOf(Match.Where(_validId), null)\n      level: Match.Where(_validLogLevel)\n      message: String\n      data: Match.Optional Object\n  }]\n\n_validProgress = () ->\n  completed: Match.Where(_validNumGTEZero)\n  total: Match.Where(_validNumGTEZero)\n  percent: Match.Where(_validNumGTEZero)\n\n_validLaterJSObj = () ->\n  schedules: [ Object ]\n  exceptions: Match.Optional [ Object ]\n\n_validJobDoc = () ->\n  _id: Match.Optional Match.OneOf(Match.Where(_validId), null)\n  runId: Match.OneOf(Match.Where(_validId), null)\n  type: String\n  status: Match.Where _validStatus\n  data: Object\n  result: Match.Optional Object\n  failures: Match.Optional [ Object ]\n  priority: Match.Integer\n  depends: [ Match.Where(_validId) ]\n  resolved: [ Match.Where(_validId) ]\n  after: Date\n  updated: Date\n  workTimeout: Match.Optional Match.Where(_validIntGTEOne)\n  expiresAfter: Match.Optional Date\n  log: Match.Optional _validLog()\n  progress: _validProgress()\n  retries: Match.Where _validIntGTEZero\n  retried: Match.Where _validIntGTEZero\n  repeatRetries: Match.Optional Match.Where _validIntGTEZero\n  retryUntil: Date\n  retryWait: Match.Where _validIntGTEZero\n  retryBackoff: Match.Where _validRetryBackoff\n  repeats: Match.Where _validIntGTEZero\n  repeated: Match.Where _validIntGTEZero\n  repeatUntil: Date\n  repeatWait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj))\n  created: Date\n\nclass JobCollectionBase extends Mongo.Collection\n\n  constructor: (@root = 'queue', options = {}) ->\n    unless @ instanceof JobCollectionBase\n      return new JobCollectionBase(@root, options)\n\n    unless @ instanceof Mongo.Collection\n      throw new Error 'The global definition of Mongo.Collection has changed since the job-collection package was loaded. Please ensure that any packages that redefine Mongo.Collection are loaded before job-collection.'\n\n    unless Mongo.Collection is Mongo.Collection.prototype.constructor\n      throw new Meteor.Error 'The global definition of Mongo.Collection has been patched by another package, and the prototype constructor has been left in an inconsistent state. Please see this link for a workaround: https://github.com/vsivsi/meteor-file-sample-app/issues/2#issuecomment-120780592'\n\n    @later = later  # later object, for convenience\n\n    options.noCollectionSuffix ?= false\n\n    collectionName = @root\n\n    unless options.noCollectionSuffix\n      collectionName += '.jobs'\n\n    # Remove non-standard options before\n    # calling Mongo.Collection constructor\n    delete options.noCollectionSuffix\n\n    Job.setDDP(options.connection, @root)\n\n    @_createLogEntry = (message = '', runId = null, level = 'info', time = new Date(), data = null) ->\n      l = { time: time, runId: runId, message: message, level: level }\n      return l\n\n    @_logMessage =\n      'readied': (() -> @_createLogEntry \"Promoted to ready\").bind(@)\n      'forced': ((id) -> @_createLogEntry \"Dependencies force resolved\", null, 'warning').bind(@)\n      'rerun': ((id, runId) -> @_createLogEntry \"Rerunning job\", null, 'info', new Date(), {previousJob:{id:id,runId:runId}}).bind(@)\n      'running': ((runId) -> @_createLogEntry \"Job Running\", runId).bind(@)\n      'paused': (() -> @_createLogEntry \"Job Paused\").bind(@)\n      'resumed': (() -> @_createLogEntry \"Job Resumed\").bind(@)\n      'cancelled': (() -> @_createLogEntry \"Job Cancelled\", null, 'warning').bind(@)\n      'restarted': (() -> @_createLogEntry \"Job Restarted\").bind(@)\n      'resubmitted': (() -> @_createLogEntry \"Job Resubmitted\").bind(@)\n      'submitted': (() -> @_createLogEntry \"Job Submitted\").bind(@)\n      'completed': ((runId) -> @_createLogEntry \"Job Completed\", runId, 'success').bind(@)\n      'resolved': ((id, runId) -> @_createLogEntry \"Dependency resolved\", null, 'info', new Date(), {dependency:{id:id,runId:runId}}).bind(@)\n      'failed': ((runId, fatal, err) ->\n        value = err.value\n        msg = \"Job Failed with#{if fatal then ' Fatal' else ''} Error#{if value? and typeof value is 'string' then ': ' + value else ''}.\"\n        level = if fatal then 'danger' else 'warning'\n        @_createLogEntry msg, runId, level).bind(@)\n\n    # Call super's constructor\n    super collectionName, options\n\n  _validNumGTEZero: _validNumGTEZero\n  _validNumGTZero: _validNumGTZero\n  _validNumGTEOne: _validNumGTEOne\n  _validIntGTEZero: _validIntGTEZero\n  _validIntGTEOne: _validIntGTEOne\n  _validStatus: _validStatus\n  _validLogLevel: _validLogLevel\n  _validRetryBackoff: _validRetryBackoff\n  _validId: _validId\n  _validLog: _validLog\n  _validProgress: _validProgress\n  _validJobDoc: _validJobDoc\n\n  jobLogLevels: Job.jobLogLevels\n  jobPriorities: Job.jobPriorities\n  jobStatuses: Job.jobStatuses\n  jobStatusCancellable: Job.jobStatusCancellable\n  jobStatusPausable: Job.jobStatusPausable\n  jobStatusRemovable: Job.jobStatusRemovable\n  jobStatusRestartable: Job.jobStatusRestartable\n  forever: Job.forever\n  foreverDate: Job.foreverDate\n\n  ddpMethods: Job.ddpMethods\n  ddpPermissionLevels: Job.ddpPermissionLevels\n  ddpMethodPermissions: Job.ddpMethodPermissions\n\n  processJobs: (params...) -> new Job.processJobs @root, params...\n  getJob: (params...) -> Job.getJob @root, params...\n  getWork: (params...) -> Job.getWork @root, params...\n  getJobs: (params...) -> Job.getJobs @root, params...\n  readyJobs: (params...) -> Job.readyJobs @root, params...\n  cancelJobs: (params...) -> Job.cancelJobs @root, params...\n  pauseJobs: (params...) -> Job.pauseJobs @root, params...\n  resumeJobs: (params...) -> Job.resumeJobs @root, params...\n  restartJobs: (params...) -> Job.restartJobs @root, params...\n  removeJobs: (params...) -> Job.removeJobs @root, params...\n\n  setDDP: (params...) -> Job.setDDP params...\n\n  startJobServer: (params...) -> Job.startJobServer @root, params...\n  shutdownJobServer: (params...) -> Job.shutdownJobServer @root, params...\n\n  # These are deprecated and will be removed\n  startJobs: (params...) -> Job.startJobs @root, params...\n  stopJobs: (params...) -> Job.stopJobs @root, params...\n\n  jobDocPattern: _validJobDoc()\n\n  # Warning Stubs for server-only calls\n  allow: () -> throw new Error \"Server-only function jc.allow() invoked on client.\"\n  deny: () -> throw new Error \"Server-only function jc.deny() invoked on client.\"\n  promote: () -> throw new Error \"Server-only function jc.promote() invoked on client.\"\n  setLogStream: () -> throw new Error \"Server-only function jc.setLogStream() invoked on client.\"\n\n  # Warning Stubs for client-only calls\n  logConsole: () -> throw new Error \"Client-only function jc.logConsole() invoked on server.\"\n\n  # Deprecated. Remove in next major version\n  makeJob: do () ->\n    dep = false\n    (params...) ->\n      unless dep\n        dep = true\n        console.warn \"WARNING: jc.makeJob() has been deprecated. Use new Job(jc, doc) instead.\"\n      new Job @root, params...\n\n  # Deprecated. Remove in next major version\n  createJob: do () ->\n    dep = false\n    (params...) ->\n      unless dep\n        dep = true\n        console.warn \"WARNING: jc.createJob() has been deprecated. Use new Job(jc, type, data) instead.\"\n      new Job @root, params...\n\n  _methodWrapper: (method, func) ->\n    toLog = @_toLog\n    unblockDDPMethods = @_unblockDDPMethods ? false\n    # Return the wrapper function that the Meteor method will actually invoke\n    return (params...) ->\n      user = this.userId ? \"[UNAUTHENTICATED]\"\n      toLog user, method, \"params: \" + JSON.stringify(params)\n      this.unblock() if unblockDDPMethods\n      retval = func(params...)\n      toLog user, method, \"returned: \" + JSON.stringify(retval)\n      return retval\n\n  _generateMethods: () ->\n    methodsOut = {}\n    methodPrefix = '_DDPMethod_'\n    for methodName, methodFunc of @ when methodName[0...methodPrefix.length] is methodPrefix\n      baseMethodName = methodName[methodPrefix.length..]\n      methodsOut[\"#{@root}_#{baseMethodName}\"] = @_methodWrapper(baseMethodName, methodFunc.bind(@))\n    return methodsOut\n\n  _idsOfDeps: (ids, antecedents, dependents, jobStatuses) ->\n    # Cancel the entire tree of antecedents and/or dependents\n    # Dependents: jobs that list one of the ids in their depends list\n    # Antecedents: jobs with an id listed in the depends list of one of the jobs in ids\n    dependsQuery = []\n    if dependents\n      dependsQuery.push\n        depends:\n          $elemMatch:\n            $in: ids\n    if antecedents\n      antsArray = []\n      @find(\n        {\n          _id:\n            $in: ids\n        }\n        {\n          fields:\n            depends: 1\n          transform: null\n        }\n      ).forEach (d) -> antsArray.push(i) for i in d.depends unless i in antsArray\n      if antsArray.length > 0\n        dependsQuery.push\n          _id:\n            $in: antsArray\n    if dependsQuery\n      dependsIds = []\n      @find(\n        {\n          status:\n            $in: jobStatuses\n          $or: dependsQuery\n        }\n        {\n          fields:\n            _id: 1\n          transform: null\n        }\n      ).forEach (d) ->\n        dependsIds.push d._id unless d._id in dependsIds\n    return dependsIds\n\n  _rerun_job: (doc, repeats = doc.repeats - 1, wait = doc.repeatWait, repeatUntil = doc.repeatUntil) ->\n    # Repeat? if so, make a new job from the old one\n    id = doc._id\n    runId = doc.runId\n    time = new Date()\n    delete doc._id\n    delete doc.result\n    delete doc.failures\n    delete doc.expiresAfter\n    delete doc.workTimeout\n    doc.runId = null\n    doc.status = \"waiting\"\n    doc.repeatRetries = if doc.repeatRetries? then doc.repeatRetries else doc.retries + doc.retried\n    doc.retries = doc.repeatRetries\n    doc.retries = @forever if doc.retries > @forever\n    doc.retryUntil = repeatUntil\n    doc.retried = 0\n    doc.repeats = repeats\n    doc.repeats = @forever if doc.repeats > @forever\n    doc.repeatUntil = repeatUntil\n    doc.repeated = doc.repeated + 1\n    doc.updated = time\n    doc.created = time\n    doc.progress =\n      completed: 0\n      total: 1\n      percent: 0\n    if logObj = @_logMessage.rerun id, runId\n      doc.log = [logObj]\n    else\n      doc.log = []\n\n    doc.after = new Date(time.valueOf() + wait)\n    if jobId = @insert doc\n      @_DDPMethod_jobReady jobId\n      return jobId\n    else\n      console.warn \"Job rerun/repeat failed to reschedule!\", id, runId\n    return null\n\n  _DDPMethod_startJobServer: (options) ->\n    check options, Match.Optional {}\n    options ?= {}\n    # The client can't actually do this, so skip it\n    unless @isSimulation\n      Meteor.clearTimeout(@stopped) if @stopped and @stopped isnt true\n      @stopped = false\n    return true\n\n  _DDPMethod_startJobs: do () =>\n    depFlag = false\n    (options) ->\n      unless depFlag\n        depFlag = true\n        console.warn \"Deprecation Warning: jc.startJobs() has been renamed to jc.startJobServer()\"\n      return @_DDPMethod_startJobServer options\n\n  _DDPMethod_shutdownJobServer: (options) ->\n    check options, Match.Optional\n      timeout: Match.Optional(Match.Where _validIntGTEOne)\n    options ?= {}\n    options.timeout ?= 60*1000\n\n    # The client can't actually do any of this, so skip it\n    unless @isSimulation\n      Meteor.clearTimeout(@stopped) if @stopped and @stopped isnt true\n      @stopped = Meteor.setTimeout(\n        () =>\n          cursor = @find(\n            {\n              status: 'running'\n            },\n            {\n              transform: null\n            }\n          )\n          failedJobs = cursor.count()\n          console.warn \"Failing #{failedJobs} jobs on queue stop.\" if failedJobs isnt 0\n          cursor.forEach (d) => @_DDPMethod_jobFail d._id, d.runId, \"Running at Job Server shutdown.\"\n          if @logStream? # Shutting down closes the logStream!\n            @logStream.end()\n            @logStream = null\n        options.timeout\n      )\n    return true\n\n  _DDPMethod_stopJobs: do () =>\n    depFlag = false\n    (options) ->\n      unless depFlag\n        depFlag = true\n        console.warn \"Deprecation Warning: jc.stopJobs() has been renamed to jc.shutdownJobServer()\"\n      return @_DDPMethod_shutdownJobServer options\n\n  _DDPMethod_getJob: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      getLog: Match.Optional Boolean\n      getFailures: Match.Optional Boolean\n    options ?= {}\n    options.getLog ?= false\n    options.getFailures ?= false\n    single = false\n    if _validId(ids)\n      ids = [ids]\n      single = true\n    return null if ids.length is 0\n    fields = {_private:0}\n    fields.log = 0 if !options.getLog\n    fields.failures = 0 if !options.getFailures\n    docs = @find(\n      {\n        _id:\n          $in: ids\n      }\n      {\n        fields: fields\n        transform: null\n      }\n    ).fetch()\n    if docs?.length\n      if @scrub?\n        docs = (@scrub d for d in docs)\n      check docs, [_validJobDoc()]\n      if single\n        return docs[0]\n      else\n        return docs\n    return null\n\n  _DDPMethod_getWork: (type, options) ->\n    check type, Match.OneOf String, [ String ]\n    check options, Match.Optional\n      maxJobs: Match.Optional(Match.Where _validIntGTEOne)\n      workTimeout: Match.Optional(Match.Where _validIntGTEOne)\n\n    # Don't simulate getWork!\n    if @isSimulation\n      return\n\n    options ?= {}\n    options.maxJobs ?= 1\n    # Don't put out any more jobs while shutting down\n    if @stopped\n      return []\n\n    # Support string types or arrays of string types\n    if typeof type is 'string'\n      type = [ type ]\n    time = new Date()\n    docs = []\n    runId = @_makeNewID() # This is meteor internal, but it will fail hard if it goes away.\n\n    while docs.length < options.maxJobs\n\n      ids = @find(\n        {\n          type:\n            $in: type\n          status: 'ready'\n          runId: null\n        }\n        {\n          sort:\n            priority: 1\n            retryUntil: 1\n            after: 1\n          limit: options.maxJobs - docs.length # never ask for more than is needed\n          fields:\n            _id: 1\n          transform: null\n        }).map (d) -> d._id\n\n      unless ids?.length > 0\n        break  # Don't keep looping when there's no available work\n\n      mods =\n        $set:\n          status: 'running'\n          runId: runId\n          updated: time\n        $inc:\n          retries: -1\n          retried: 1\n\n      if logObj = @_logMessage.running runId\n        mods.$push =\n          log: logObj\n\n      if options.workTimeout?\n        mods.$set.workTimeout = options.workTimeout\n        mods.$set.expiresAfter = new Date(time.valueOf() + options.workTimeout)\n      else\n        mods.$unset ?= {}\n        mods.$unset.workTimeout = \"\"\n        mods.$unset.expiresAfter = \"\"\n\n      num = @update(\n        {\n          _id:\n            $in: ids\n          status: 'ready'\n          runId: null\n        }\n        mods\n        {\n          multi: true\n        }\n      )\n\n      if num > 0\n        foundDocs = @find(\n          {\n            _id:\n              $in: ids\n            runId: runId\n          }\n          {\n            fields:\n              log: 0\n              failures: 0\n              _private: 0\n            transform: null\n          }\n        ).fetch()\n\n        if foundDocs?.length > 0\n          if @scrub?\n            foundDocs = (@scrub d for d in foundDocs)\n          check docs, [ _validJobDoc() ]\n          docs = docs.concat foundDocs\n        # else\n        #   console.warn \"getWork: find after update failed\"\n    return docs\n\n  _DDPMethod_jobRemove: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional {}\n    options ?= {}\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    num = @remove(\n      {\n        _id:\n          $in: ids\n        status:\n          $in: @jobStatusRemovable\n      }\n    )\n    if num > 0\n      return true\n    else\n      console.warn \"jobRemove failed\"\n    return false\n\n  _DDPMethod_jobPause: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional {}\n    options ?= {}\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n\n    mods =\n      $set:\n        status: \"paused\"\n        updated: time\n\n    if logObj = @_logMessage.paused()\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id:\n          $in: ids\n        status:\n          $in: @jobStatusPausable\n      }\n      mods\n      {\n        multi: true\n      }\n    )\n    if num > 0\n      return true\n    else\n      console.warn \"jobPause failed\"\n    return false\n\n  _DDPMethod_jobResume: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional {}\n    options ?= {}\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n    mods =\n      $set:\n        status: \"waiting\"\n        updated: time\n\n    if logObj = @_logMessage.resumed()\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id:\n          $in: ids\n        status: \"paused\"\n        updated:\n          $ne: time\n      }\n      mods\n      {\n        multi: true\n      }\n    )\n    if num > 0\n      @_DDPMethod_jobReady ids\n      return true\n    else\n      console.warn \"jobResume failed\"\n    return false\n\n  _DDPMethod_jobReady: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      force: Match.Optional Boolean\n      time: Match.Optional Date\n\n    # Don't simulate jobReady. It has a strong chance of causing issues with\n    # Meteor on the client, particularly if an observeChanges() is triggering\n    # a processJobs queue (which in turn sets timers.)\n    if @isSimulation\n      return\n\n    now = new Date()\n\n    options ?= {}\n    options.force ?= false\n    options.time ?= now\n\n    if _validId(ids)\n      ids = [ids]\n\n    query =\n      status: \"waiting\"\n      after:\n        $lte: options.time\n\n    mods =\n      $set:\n        status: \"ready\"\n        updated: now\n\n    if ids.length > 0\n      query._id =\n        $in: ids\n      mods.$set.after = now\n\n    logObj = []\n\n    if options.force\n      mods.$set.depends = []  # Don't move to resolved, because they weren't!\n      l = @_logMessage.forced()\n      logObj.push l if l\n    else\n      query.depends =\n        $size: 0\n\n    l = @_logMessage.readied()\n    logObj.push l if l\n\n    if logObj.length > 0\n      mods.$push =\n        log:\n          $each: logObj\n\n    num = @update(\n      query\n      mods\n      {\n        multi: true\n      }\n    )\n\n    if num > 0\n      return true\n    else\n      return false\n\n  _DDPMethod_jobCancel: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      antecedents: Match.Optional Boolean\n      dependents: Match.Optional Boolean\n    options ?= {}\n    options.antecedents ?= false\n    options.dependents ?= true\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n\n    mods =\n      $set:\n        status: \"cancelled\"\n        runId: null\n        progress:\n          completed: 0\n          total: 1\n          percent: 0\n        updated: time\n\n    if logObj = @_logMessage.cancelled()\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id:\n          $in: ids\n        status:\n          $in: @jobStatusCancellable\n      }\n      mods\n      {\n        multi: true\n      }\n    )\n    # Cancel the entire tree of dependents\n    cancelIds = @_idsOfDeps ids, options.antecedents, options.dependents, @jobStatusCancellable\n\n    depsCancelled = false\n    if cancelIds.length > 0\n      depsCancelled = @_DDPMethod_jobCancel cancelIds, options\n\n    if num > 0 or depsCancelled\n      return true\n    else\n      console.warn \"jobCancel failed\"\n    return false\n\n  _DDPMethod_jobRestart: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      retries: Match.Optional(Match.Where _validIntGTEZero)\n      until: Match.Optional Date\n      antecedents: Match.Optional Boolean\n      dependents: Match.Optional Boolean\n    options ?= {}\n    options.retries ?= 1\n    options.retries = @forever if options.retries > @forever\n    options.dependents ?= false\n    options.antecedents ?= true\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n\n    query =\n      _id:\n        $in: ids\n      status:\n        $in: @jobStatusRestartable\n\n    mods =\n      $set:\n        status: \"waiting\"\n        progress:\n          completed: 0\n          total: 1\n          percent: 0\n        updated: time\n      $inc:\n        retries: options.retries\n\n    if logObj = @_logMessage.restarted()\n      mods.$push =\n        log: logObj\n\n    if options.until?\n      mods.$set.retryUntil = options.until\n\n    num = @update query, mods, {multi: true}\n\n    # Restart the entire tree of dependents\n    restartIds = @_idsOfDeps ids, options.antecedents, options.dependents, @jobStatusRestartable\n\n    depsRestarted = false\n    if restartIds.length > 0\n      depsRestarted = @_DDPMethod_jobRestart restartIds, options\n\n    if num > 0 or depsRestarted\n      @_DDPMethod_jobReady ids\n      return true\n    else\n      console.warn \"jobRestart failed\"\n    return false\n\n  # Job creator methods\n\n  _DDPMethod_jobSave: (doc, options) ->\n    check doc, _validJobDoc()\n    check options, Match.Optional\n      cancelRepeats: Match.Optional Boolean\n    check doc.status, Match.Where (v) ->\n      Match.test(v, String) and v in [ 'waiting', 'paused' ]\n    options ?= {}\n    options.cancelRepeats ?= false\n    doc.repeats = @forever if doc.repeats > @forever\n    doc.retries = @forever if doc.retries > @forever\n\n    time = new Date()\n\n    # This enables the default case of \"run immediately\" to\n    # not be impacted by a client's clock\n    doc.after = time if doc.after < time\n    doc.retryUntil = time if doc.retryUntil < time\n    doc.repeatUntil = time if doc.repeatUntil < time\n\n    # If doc.repeatWait is a later.js object, then don't run before\n    # the first valid scheduled time that occurs after doc.after\n    if @later? and typeof doc.repeatWait isnt 'number'\n      unless next = @later?.schedule(doc.repeatWait).next(1, doc.after)\n        console.warn \"No valid available later.js times in schedule after #{doc.after}\"\n        return null\n      nextDate = new Date(next)\n      unless nextDate <= doc.repeatUntil\n        console.warn \"No valid available later.js times in schedule before #{doc.repeatUntil}\"\n        return null\n      doc.after = nextDate\n    else if not @later? and doc.repeatWait isnt 'number'\n      console.warn \"Later.js not loaded...\"\n      return null\n\n    if doc._id\n\n      mods =\n        $set:\n          status: 'waiting'\n          data: doc.data\n          retries: doc.retries\n          repeatRetries: if doc.repeatRetries? then doc.repeatRetries else doc.retries + doc.retried\n          retryUntil: doc.retryUntil\n          retryWait: doc.retryWait\n          retryBackoff: doc.retryBackoff\n          repeats: doc.repeats\n          repeatUntil: doc.repeatUntil\n          repeatWait: doc.repeatWait\n          depends: doc.depends\n          priority: doc.priority\n          after: doc.after\n          updated: time\n\n      if logObj = @_logMessage.resubmitted()\n        mods.$push =\n          log: logObj\n\n      num = @update(\n        {\n          _id: doc._id\n          status: 'paused'\n          runId: null\n        }\n        mods\n      )\n\n      if num\n        @_DDPMethod_jobReady doc._id\n        return doc._id\n      else\n        return null\n    else\n      if doc.repeats is @forever and options.cancelRepeats\n        # If this is unlimited repeating job, then cancel any existing jobs of the same type\n        @find(\n          {\n            type: doc.type\n            status:\n              $in: @jobStatusCancellable\n          },\n          {\n            transform: null\n          }\n        ).forEach (d) => @_DDPMethod_jobCancel d._id, {}\n      doc.created = time\n      doc.log.push @_logMessage.submitted()\n      newId = @insert doc\n      @_DDPMethod_jobReady newId\n      return newId\n\n  # Worker methods\n\n  _DDPMethod_jobProgress: (id, runId, completed, total, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.Where(_validId)\n    check completed, Match.Where _validNumGTEZero\n    check total, Match.Where _validNumGTZero\n    check options, Match.Optional {}\n    options ?= {}\n\n    # Notify the worker to stop running if we are shutting down\n    if @stopped\n      return null\n\n    progress =\n      completed: completed\n      total: total\n      percent: 100*completed/total\n\n    check progress, Match.Where (v) ->\n      v.total >= v.completed and 0 <= v.percent <= 100\n\n    time = new Date()\n\n    job = @findOne { _id: id }, { fields: { workTimeout: 1 } }\n\n    mods =\n      $set:\n        progress: progress\n        updated: time\n\n    if job?.workTimeout?\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout)\n\n    num = @update(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      mods\n    )\n\n    if num is 1\n      return true\n    else\n      console.warn \"jobProgress failed\"\n    return false\n\n  _DDPMethod_jobLog: (id, runId, message, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.OneOf(Match.Where(_validId), null)\n    check message, String\n    check options, Match.Optional\n      level: Match.Optional(Match.Where _validLogLevel)\n      data: Match.Optional Object\n    options ?= {}\n    time = new Date()\n    logObj =\n        time: time\n        runId: runId\n        level: options.level ? 'info'\n        message: message\n    logObj.data = options.data if options.data?\n\n    job = @findOne { _id: id }, { fields: { status: 1, workTimeout: 1 } }\n\n    mods =\n      $push:\n        log: logObj\n      $set:\n        updated: time\n\n    if job?.workTimeout? and job.status is 'running'\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout)\n\n    num = @update(\n      {\n        _id: id\n      }\n      mods\n    )\n    if num is 1\n      return true\n    else\n      console.warn \"jobLog failed\"\n    return false\n\n  _DDPMethod_jobRerun: (id, options) ->\n    check id, Match.Where(_validId)\n    check options, Match.Optional\n      repeats: Match.Optional(Match.Where _validIntGTEZero)\n      until: Match.Optional Date\n      wait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj))\n\n    doc = @findOne(\n      {\n        _id: id\n        status: \"completed\"\n      }\n      {\n        fields:\n          result: 0\n          failures: 0\n          log: 0\n          progress: 0\n          updated: 0\n          after: 0\n          status: 0\n        transform: null\n      }\n    )\n\n    if doc?\n      options ?= {}\n      options.repeats ?= 0\n      options.repeats = @forever if options.repeats > @forever\n      options.until ?= doc.repeatUntil\n      options.wait ?= 0\n      return @_rerun_job doc, options.repeats, options.wait, options.until\n\n    return false\n\n  _DDPMethod_jobDone: (id, runId, result, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.Where(_validId)\n    check result, Object\n    check options, Match.Optional\n      repeatId: Match.Optional Boolean\n      delayDeps: Match.Optional(Match.Where(_validIntGTEZero))\n\n    options ?= { repeatId: false }\n    time = new Date()\n    doc = @findOne(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      {\n        fields:\n          log: 0\n          failures: 0\n          progress: 0\n          updated: 0\n          after: 0\n          status: 0\n        transform: null\n      }\n    )\n    unless doc?\n      unless @isSimulation\n        console.warn \"Running job not found\", id, runId\n      return false\n\n    mods =\n      $set:\n        status: \"completed\"\n        result: result\n        progress:\n          completed: 1\n          total: 1\n          percent: 100\n        updated: time\n\n    if logObj = @_logMessage.completed runId\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      mods\n    )\n    if num is 1\n      if doc.repeats > 0\n        if typeof doc.repeatWait is 'number'\n          if doc.repeatUntil - doc.repeatWait >= time\n            jobId = @_rerun_job doc\n        else\n          # This code prevents a job that just ran and finished\n          # instantly from being immediately rerun on the same occurance\n          next = @later?.schedule(doc.repeatWait).next(2)\n          if next and next.length > 0\n            d = new Date(next[0])\n            if (d - time > 500) or (next.length > 1)\n              if d - time <= 500\n                d = new Date(next[1])\n              else\n              wait = d - time\n              if doc.repeatUntil - wait >= time\n                jobId = @_rerun_job doc, doc.repeats - 1, wait\n\n      # Resolve depends\n      ids = @find(\n        {\n          depends:\n            $all: [ id ]\n        },\n        {\n          transform: null\n          fields:\n            _id: 1\n        }\n      ).fetch().map (d) => d._id\n\n      if ids.length > 0\n\n        mods =\n          $pull:\n            depends: id\n          $push:\n            resolved: id\n\n        if options.delayDeps?\n          after = new Date(time.valueOf() + options.delayDeps)\n          mods.$max =\n            after: after\n\n        if logObj = @_logMessage.resolved id, runId\n          mods.$push.log = logObj\n\n        n = @update(\n          {\n            _id:\n              $in: ids\n          }\n          mods\n          {\n            multi: true\n          }\n        )\n        if n isnt ids.length\n          console.warn \"Not all dependent jobs were resolved #{ids.length} > #{n}\"\n        # Try to promote any jobs that just had a dependency resolved\n        @_DDPMethod_jobReady ids\n      if options.repeatId and jobId?\n        return jobId\n      else\n        return true\n    else\n      console.warn \"jobDone failed\"\n    return false\n\n  _DDPMethod_jobFail: (id, runId, err, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.Where(_validId)\n    check err, Object\n    check options, Match.Optional\n      fatal: Match.Optional Boolean\n\n    options ?= {}\n    options.fatal ?= false\n\n    time = new Date()\n    doc = @findOne(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      {\n        fields:\n          log: 0\n          failures: 0\n          progress: 0\n          updated: 0\n          after: 0\n          runId: 0\n          status: 0\n        transform: null\n      }\n    )\n    unless doc?\n      unless @isSimulation\n        console.warn \"Running job not found\", id, runId\n      return false\n\n    after = switch doc.retryBackoff\n      when 'exponential'\n        new Date(time.valueOf() + doc.retryWait*Math.pow(2, doc.retried-1))\n      else\n        new Date(time.valueOf() + doc.retryWait)  # 'constant'\n\n    newStatus = if (not options.fatal and\n                    doc.retries > 0 and\n                    doc.retryUntil >= after) then \"waiting\" else \"failed\"\n\n    err.runId = runId  # Link each failure to the run that generated it.\n\n    mods =\n      $set:\n        status: newStatus\n        runId: null\n        after: after\n        progress:\n          completed: 0\n          total: 1\n          percent: 0\n        updated: time\n      $push:\n        failures:\n          err\n\n    if logObj = @_logMessage.failed runId, newStatus is 'failed', err\n      mods.$push.log = logObj\n\n    num = @update(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      mods\n    )\n    if newStatus is \"failed\" and num is 1\n      # Cancel any dependent jobs too\n      @find(\n        {\n          depends:\n            $all: [ id ]\n        },\n        {\n          transform: null\n        }\n      ).forEach (d) => @_DDPMethod_jobCancel d._id\n    if num is 1\n      return true\n    else\n      console.warn \"jobFail failed\"\n    return false\n\n# Share these methods so they'll be available on server and client\n\nshare.JobCollectionBase = JobCollectionBase\n","var JobCollectionBase, _validId, _validIntGTEOne, _validIntGTEZero, _validJobDoc, _validLaterJSObj, _validLog, _validLogLevel, _validNumGTEOne, _validNumGTEZero, _validNumGTZero, _validProgress, _validRetryBackoff, _validStatus,\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty,\n  slice = [].slice;\n\n_validNumGTEZero = function(v) {\n  return Match.test(v, Number) && v >= 0.0;\n};\n\n_validNumGTZero = function(v) {\n  return Match.test(v, Number) && v > 0.0;\n};\n\n_validNumGTEOne = function(v) {\n  return Match.test(v, Number) && v >= 1.0;\n};\n\n_validIntGTEZero = function(v) {\n  return _validNumGTEZero(v) && Math.floor(v) === v;\n};\n\n_validIntGTEOne = function(v) {\n  return _validNumGTEOne(v) && Math.floor(v) === v;\n};\n\n_validStatus = function(v) {\n  return Match.test(v, String) && indexOf.call(Job.jobStatuses, v) >= 0;\n};\n\n_validLogLevel = function(v) {\n  return Match.test(v, String) && indexOf.call(Job.jobLogLevels, v) >= 0;\n};\n\n_validRetryBackoff = function(v) {\n  return Match.test(v, String) && indexOf.call(Job.jobRetryBackoffMethods, v) >= 0;\n};\n\n_validId = function(v) {\n  return Match.test(v, Match.OneOf(String, Mongo.Collection.ObjectID));\n};\n\n_validLog = function() {\n  return [\n    {\n      time: Date,\n      runId: Match.OneOf(Match.Where(_validId), null),\n      level: Match.Where(_validLogLevel),\n      message: String,\n      data: Match.Optional(Object)\n    }\n  ];\n};\n\n_validProgress = function() {\n  return {\n    completed: Match.Where(_validNumGTEZero),\n    total: Match.Where(_validNumGTEZero),\n    percent: Match.Where(_validNumGTEZero)\n  };\n};\n\n_validLaterJSObj = function() {\n  return {\n    schedules: [Object],\n    exceptions: Match.Optional([Object])\n  };\n};\n\n_validJobDoc = function() {\n  return {\n    _id: Match.Optional(Match.OneOf(Match.Where(_validId), null)),\n    runId: Match.OneOf(Match.Where(_validId), null),\n    type: String,\n    status: Match.Where(_validStatus),\n    data: Object,\n    result: Match.Optional(Object),\n    failures: Match.Optional([Object]),\n    priority: Match.Integer,\n    depends: [Match.Where(_validId)],\n    resolved: [Match.Where(_validId)],\n    after: Date,\n    updated: Date,\n    workTimeout: Match.Optional(Match.Where(_validIntGTEOne)),\n    expiresAfter: Match.Optional(Date),\n    log: Match.Optional(_validLog()),\n    progress: _validProgress(),\n    retries: Match.Where(_validIntGTEZero),\n    retried: Match.Where(_validIntGTEZero),\n    repeatRetries: Match.Optional(Match.Where(_validIntGTEZero)),\n    retryUntil: Date,\n    retryWait: Match.Where(_validIntGTEZero),\n    retryBackoff: Match.Where(_validRetryBackoff),\n    repeats: Match.Where(_validIntGTEZero),\n    repeated: Match.Where(_validIntGTEZero),\n    repeatUntil: Date,\n    repeatWait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj)),\n    created: Date\n  };\n};\n\nJobCollectionBase = (function(superClass) {\n  extend(JobCollectionBase, superClass);\n\n  function JobCollectionBase(root, options) {\n    var collectionName;\n    this.root = root != null ? root : 'queue';\n    if (options == null) {\n      options = {};\n    }\n    if (!(this instanceof JobCollectionBase)) {\n      return new JobCollectionBase(this.root, options);\n    }\n    if (!(this instanceof Mongo.Collection)) {\n      throw new Error('The global definition of Mongo.Collection has changed since the job-collection package was loaded. Please ensure that any packages that redefine Mongo.Collection are loaded before job-collection.');\n    }\n    if (Mongo.Collection !== Mongo.Collection.prototype.constructor) {\n      throw new Meteor.Error('The global definition of Mongo.Collection has been patched by another package, and the prototype constructor has been left in an inconsistent state. Please see this link for a workaround: https://github.com/vsivsi/meteor-file-sample-app/issues/2#issuecomment-120780592');\n    }\n    this.later = later;\n    if (options.noCollectionSuffix == null) {\n      options.noCollectionSuffix = false;\n    }\n    collectionName = this.root;\n    if (!options.noCollectionSuffix) {\n      collectionName += '.jobs';\n    }\n    delete options.noCollectionSuffix;\n    Job.setDDP(options.connection, this.root);\n    this._createLogEntry = function(message, runId, level, time, data) {\n      var l;\n      if (message == null) {\n        message = '';\n      }\n      if (runId == null) {\n        runId = null;\n      }\n      if (level == null) {\n        level = 'info';\n      }\n      if (time == null) {\n        time = new Date();\n      }\n      if (data == null) {\n        data = null;\n      }\n      l = {\n        time: time,\n        runId: runId,\n        message: message,\n        level: level\n      };\n      return l;\n    };\n    this._logMessage = {\n      'readied': (function() {\n        return this._createLogEntry(\"Promoted to ready\");\n      }).bind(this),\n      'forced': (function(id) {\n        return this._createLogEntry(\"Dependencies force resolved\", null, 'warning');\n      }).bind(this),\n      'rerun': (function(id, runId) {\n        return this._createLogEntry(\"Rerunning job\", null, 'info', new Date(), {\n          previousJob: {\n            id: id,\n            runId: runId\n          }\n        });\n      }).bind(this),\n      'running': (function(runId) {\n        return this._createLogEntry(\"Job Running\", runId);\n      }).bind(this),\n      'paused': (function() {\n        return this._createLogEntry(\"Job Paused\");\n      }).bind(this),\n      'resumed': (function() {\n        return this._createLogEntry(\"Job Resumed\");\n      }).bind(this),\n      'cancelled': (function() {\n        return this._createLogEntry(\"Job Cancelled\", null, 'warning');\n      }).bind(this),\n      'restarted': (function() {\n        return this._createLogEntry(\"Job Restarted\");\n      }).bind(this),\n      'resubmitted': (function() {\n        return this._createLogEntry(\"Job Resubmitted\");\n      }).bind(this),\n      'submitted': (function() {\n        return this._createLogEntry(\"Job Submitted\");\n      }).bind(this),\n      'completed': (function(runId) {\n        return this._createLogEntry(\"Job Completed\", runId, 'success');\n      }).bind(this),\n      'resolved': (function(id, runId) {\n        return this._createLogEntry(\"Dependency resolved\", null, 'info', new Date(), {\n          dependency: {\n            id: id,\n            runId: runId\n          }\n        });\n      }).bind(this),\n      'failed': (function(runId, fatal, err) {\n        var level, msg, value;\n        value = err.value;\n        msg = \"Job Failed with\" + (fatal ? ' Fatal' : '') + \" Error\" + ((value != null) && typeof value === 'string' ? ': ' + value : '') + \".\";\n        level = fatal ? 'danger' : 'warning';\n        return this._createLogEntry(msg, runId, level);\n      }).bind(this)\n    };\n    JobCollectionBase.__super__.constructor.call(this, collectionName, options);\n  }\n\n  JobCollectionBase.prototype._validNumGTEZero = _validNumGTEZero;\n\n  JobCollectionBase.prototype._validNumGTZero = _validNumGTZero;\n\n  JobCollectionBase.prototype._validNumGTEOne = _validNumGTEOne;\n\n  JobCollectionBase.prototype._validIntGTEZero = _validIntGTEZero;\n\n  JobCollectionBase.prototype._validIntGTEOne = _validIntGTEOne;\n\n  JobCollectionBase.prototype._validStatus = _validStatus;\n\n  JobCollectionBase.prototype._validLogLevel = _validLogLevel;\n\n  JobCollectionBase.prototype._validRetryBackoff = _validRetryBackoff;\n\n  JobCollectionBase.prototype._validId = _validId;\n\n  JobCollectionBase.prototype._validLog = _validLog;\n\n  JobCollectionBase.prototype._validProgress = _validProgress;\n\n  JobCollectionBase.prototype._validJobDoc = _validJobDoc;\n\n  JobCollectionBase.prototype.jobLogLevels = Job.jobLogLevels;\n\n  JobCollectionBase.prototype.jobPriorities = Job.jobPriorities;\n\n  JobCollectionBase.prototype.jobStatuses = Job.jobStatuses;\n\n  JobCollectionBase.prototype.jobStatusCancellable = Job.jobStatusCancellable;\n\n  JobCollectionBase.prototype.jobStatusPausable = Job.jobStatusPausable;\n\n  JobCollectionBase.prototype.jobStatusRemovable = Job.jobStatusRemovable;\n\n  JobCollectionBase.prototype.jobStatusRestartable = Job.jobStatusRestartable;\n\n  JobCollectionBase.prototype.forever = Job.forever;\n\n  JobCollectionBase.prototype.foreverDate = Job.foreverDate;\n\n  JobCollectionBase.prototype.ddpMethods = Job.ddpMethods;\n\n  JobCollectionBase.prototype.ddpPermissionLevels = Job.ddpPermissionLevels;\n\n  JobCollectionBase.prototype.ddpMethodPermissions = Job.ddpMethodPermissions;\n\n  JobCollectionBase.prototype.processJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Job.processJobs, [this.root].concat(slice.call(params)), function(){});\n  };\n\n  JobCollectionBase.prototype.getJob = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.getJob.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.getWork = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.getWork.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.getJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.getJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.readyJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.readyJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.cancelJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.cancelJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.pauseJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.pauseJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.resumeJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.resumeJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.restartJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.restartJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.removeJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.removeJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.setDDP = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.setDDP.apply(Job, params);\n  };\n\n  JobCollectionBase.prototype.startJobServer = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.startJobServer.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.shutdownJobServer = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.shutdownJobServer.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.startJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.startJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.stopJobs = function() {\n    var params;\n    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return Job.stopJobs.apply(Job, [this.root].concat(slice.call(params)));\n  };\n\n  JobCollectionBase.prototype.jobDocPattern = _validJobDoc();\n\n  JobCollectionBase.prototype.allow = function() {\n    throw new Error(\"Server-only function jc.allow() invoked on client.\");\n  };\n\n  JobCollectionBase.prototype.deny = function() {\n    throw new Error(\"Server-only function jc.deny() invoked on client.\");\n  };\n\n  JobCollectionBase.prototype.promote = function() {\n    throw new Error(\"Server-only function jc.promote() invoked on client.\");\n  };\n\n  JobCollectionBase.prototype.setLogStream = function() {\n    throw new Error(\"Server-only function jc.setLogStream() invoked on client.\");\n  };\n\n  JobCollectionBase.prototype.logConsole = function() {\n    throw new Error(\"Client-only function jc.logConsole() invoked on server.\");\n  };\n\n  JobCollectionBase.prototype.makeJob = (function() {\n    var dep;\n    dep = false;\n    return function() {\n      var params;\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!dep) {\n        dep = true;\n        console.warn(\"WARNING: jc.makeJob() has been deprecated. Use new Job(jc, doc) instead.\");\n      }\n      return (function(func, args, ctor) {\n        ctor.prototype = func.prototype;\n        var child = new ctor, result = func.apply(child, args);\n        return Object(result) === result ? result : child;\n      })(Job, [this.root].concat(slice.call(params)), function(){});\n    };\n  })();\n\n  JobCollectionBase.prototype.createJob = (function() {\n    var dep;\n    dep = false;\n    return function() {\n      var params;\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!dep) {\n        dep = true;\n        console.warn(\"WARNING: jc.createJob() has been deprecated. Use new Job(jc, type, data) instead.\");\n      }\n      return (function(func, args, ctor) {\n        ctor.prototype = func.prototype;\n        var child = new ctor, result = func.apply(child, args);\n        return Object(result) === result ? result : child;\n      })(Job, [this.root].concat(slice.call(params)), function(){});\n    };\n  })();\n\n  JobCollectionBase.prototype._methodWrapper = function(method, func) {\n    var ref, toLog, unblockDDPMethods;\n    toLog = this._toLog;\n    unblockDDPMethods = (ref = this._unblockDDPMethods) != null ? ref : false;\n    return function() {\n      var params, ref1, retval, user;\n      params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      user = (ref1 = this.userId) != null ? ref1 : \"[UNAUTHENTICATED]\";\n      toLog(user, method, \"params: \" + JSON.stringify(params));\n      if (unblockDDPMethods) {\n        this.unblock();\n      }\n      retval = func.apply(null, params);\n      toLog(user, method, \"returned: \" + JSON.stringify(retval));\n      return retval;\n    };\n  };\n\n  JobCollectionBase.prototype._generateMethods = function() {\n    var baseMethodName, methodFunc, methodName, methodPrefix, methodsOut, ref;\n    methodsOut = {};\n    methodPrefix = '_DDPMethod_';\n    ref = this;\n    for (methodName in ref) {\n      methodFunc = ref[methodName];\n      if (!(methodName.slice(0, methodPrefix.length) === methodPrefix)) {\n        continue;\n      }\n      baseMethodName = methodName.slice(methodPrefix.length);\n      methodsOut[this.root + \"_\" + baseMethodName] = this._methodWrapper(baseMethodName, methodFunc.bind(this));\n    }\n    return methodsOut;\n  };\n\n  JobCollectionBase.prototype._idsOfDeps = function(ids, antecedents, dependents, jobStatuses) {\n    var antsArray, dependsIds, dependsQuery;\n    dependsQuery = [];\n    if (dependents) {\n      dependsQuery.push({\n        depends: {\n          $elemMatch: {\n            $in: ids\n          }\n        }\n      });\n    }\n    if (antecedents) {\n      antsArray = [];\n      this.find({\n        _id: {\n          $in: ids\n        }\n      }, {\n        fields: {\n          depends: 1\n        },\n        transform: null\n      }).forEach(function(d) {\n        var i, j, len, ref, results;\n        if (indexOf.call(antsArray, i) < 0) {\n          ref = d.depends;\n          results = [];\n          for (j = 0, len = ref.length; j < len; j++) {\n            i = ref[j];\n            results.push(antsArray.push(i));\n          }\n          return results;\n        }\n      });\n      if (antsArray.length > 0) {\n        dependsQuery.push({\n          _id: {\n            $in: antsArray\n          }\n        });\n      }\n    }\n    if (dependsQuery) {\n      dependsIds = [];\n      this.find({\n        status: {\n          $in: jobStatuses\n        },\n        $or: dependsQuery\n      }, {\n        fields: {\n          _id: 1\n        },\n        transform: null\n      }).forEach(function(d) {\n        var ref;\n        if (ref = d._id, indexOf.call(dependsIds, ref) < 0) {\n          return dependsIds.push(d._id);\n        }\n      });\n    }\n    return dependsIds;\n  };\n\n  JobCollectionBase.prototype._rerun_job = function(doc, repeats, wait, repeatUntil) {\n    var id, jobId, logObj, runId, time;\n    if (repeats == null) {\n      repeats = doc.repeats - 1;\n    }\n    if (wait == null) {\n      wait = doc.repeatWait;\n    }\n    if (repeatUntil == null) {\n      repeatUntil = doc.repeatUntil;\n    }\n    id = doc._id;\n    runId = doc.runId;\n    time = new Date();\n    delete doc._id;\n    delete doc.result;\n    delete doc.failures;\n    delete doc.expiresAfter;\n    delete doc.workTimeout;\n    doc.runId = null;\n    doc.status = \"waiting\";\n    doc.repeatRetries = doc.repeatRetries != null ? doc.repeatRetries : doc.retries + doc.retried;\n    doc.retries = doc.repeatRetries;\n    if (doc.retries > this.forever) {\n      doc.retries = this.forever;\n    }\n    doc.retryUntil = repeatUntil;\n    doc.retried = 0;\n    doc.repeats = repeats;\n    if (doc.repeats > this.forever) {\n      doc.repeats = this.forever;\n    }\n    doc.repeatUntil = repeatUntil;\n    doc.repeated = doc.repeated + 1;\n    doc.updated = time;\n    doc.created = time;\n    doc.progress = {\n      completed: 0,\n      total: 1,\n      percent: 0\n    };\n    if (logObj = this._logMessage.rerun(id, runId)) {\n      doc.log = [logObj];\n    } else {\n      doc.log = [];\n    }\n    doc.after = new Date(time.valueOf() + wait);\n    if (jobId = this.insert(doc)) {\n      this._DDPMethod_jobReady(jobId);\n      return jobId;\n    } else {\n      console.warn(\"Job rerun/repeat failed to reschedule!\", id, runId);\n    }\n    return null;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_startJobServer = function(options) {\n    check(options, Match.Optional({}));\n    if (options == null) {\n      options = {};\n    }\n    if (!this.isSimulation) {\n      if (this.stopped && this.stopped !== true) {\n        Meteor.clearTimeout(this.stopped);\n      }\n      this.stopped = false;\n    }\n    return true;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_startJobs = (function() {\n    var depFlag;\n    depFlag = false;\n    return function(options) {\n      if (!depFlag) {\n        depFlag = true;\n        console.warn(\"Deprecation Warning: jc.startJobs() has been renamed to jc.startJobServer()\");\n      }\n      return this._DDPMethod_startJobServer(options);\n    };\n  })();\n\n  JobCollectionBase.prototype._DDPMethod_shutdownJobServer = function(options) {\n    check(options, Match.Optional({\n      timeout: Match.Optional(Match.Where(_validIntGTEOne))\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.timeout == null) {\n      options.timeout = 60 * 1000;\n    }\n    if (!this.isSimulation) {\n      if (this.stopped && this.stopped !== true) {\n        Meteor.clearTimeout(this.stopped);\n      }\n      this.stopped = Meteor.setTimeout((function(_this) {\n        return function() {\n          var cursor, failedJobs;\n          cursor = _this.find({\n            status: 'running'\n          }, {\n            transform: null\n          });\n          failedJobs = cursor.count();\n          if (failedJobs !== 0) {\n            console.warn(\"Failing \" + failedJobs + \" jobs on queue stop.\");\n          }\n          cursor.forEach(function(d) {\n            return _this._DDPMethod_jobFail(d._id, d.runId, \"Running at Job Server shutdown.\");\n          });\n          if (_this.logStream != null) {\n            _this.logStream.end();\n            return _this.logStream = null;\n          }\n        };\n      })(this), options.timeout);\n    }\n    return true;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_stopJobs = (function() {\n    var depFlag;\n    depFlag = false;\n    return function(options) {\n      if (!depFlag) {\n        depFlag = true;\n        console.warn(\"Deprecation Warning: jc.stopJobs() has been renamed to jc.shutdownJobServer()\");\n      }\n      return this._DDPMethod_shutdownJobServer(options);\n    };\n  })();\n\n  JobCollectionBase.prototype._DDPMethod_getJob = function(ids, options) {\n    var d, docs, fields, single;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({\n      getLog: Match.Optional(Boolean),\n      getFailures: Match.Optional(Boolean)\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.getLog == null) {\n      options.getLog = false;\n    }\n    if (options.getFailures == null) {\n      options.getFailures = false;\n    }\n    single = false;\n    if (_validId(ids)) {\n      ids = [ids];\n      single = true;\n    }\n    if (ids.length === 0) {\n      return null;\n    }\n    fields = {\n      _private: 0\n    };\n    if (!options.getLog) {\n      fields.log = 0;\n    }\n    if (!options.getFailures) {\n      fields.failures = 0;\n    }\n    docs = this.find({\n      _id: {\n        $in: ids\n      }\n    }, {\n      fields: fields,\n      transform: null\n    }).fetch();\n    if (docs != null ? docs.length : void 0) {\n      if (this.scrub != null) {\n        docs = (function() {\n          var j, len, results;\n          results = [];\n          for (j = 0, len = docs.length; j < len; j++) {\n            d = docs[j];\n            results.push(this.scrub(d));\n          }\n          return results;\n        }).call(this);\n      }\n      check(docs, [_validJobDoc()]);\n      if (single) {\n        return docs[0];\n      } else {\n        return docs;\n      }\n    }\n    return null;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_getWork = function(type, options) {\n    var d, docs, foundDocs, ids, logObj, mods, num, runId, time;\n    check(type, Match.OneOf(String, [String]));\n    check(options, Match.Optional({\n      maxJobs: Match.Optional(Match.Where(_validIntGTEOne)),\n      workTimeout: Match.Optional(Match.Where(_validIntGTEOne))\n    }));\n    if (this.isSimulation) {\n      return;\n    }\n    if (options == null) {\n      options = {};\n    }\n    if (options.maxJobs == null) {\n      options.maxJobs = 1;\n    }\n    if (this.stopped) {\n      return [];\n    }\n    if (typeof type === 'string') {\n      type = [type];\n    }\n    time = new Date();\n    docs = [];\n    runId = this._makeNewID();\n    while (docs.length < options.maxJobs) {\n      ids = this.find({\n        type: {\n          $in: type\n        },\n        status: 'ready',\n        runId: null\n      }, {\n        sort: {\n          priority: 1,\n          retryUntil: 1,\n          after: 1\n        },\n        limit: options.maxJobs - docs.length,\n        fields: {\n          _id: 1\n        },\n        transform: null\n      }).map(function(d) {\n        return d._id;\n      });\n      if (!((ids != null ? ids.length : void 0) > 0)) {\n        break;\n      }\n      mods = {\n        $set: {\n          status: 'running',\n          runId: runId,\n          updated: time\n        },\n        $inc: {\n          retries: -1,\n          retried: 1\n        }\n      };\n      if (logObj = this._logMessage.running(runId)) {\n        mods.$push = {\n          log: logObj\n        };\n      }\n      if (options.workTimeout != null) {\n        mods.$set.workTimeout = options.workTimeout;\n        mods.$set.expiresAfter = new Date(time.valueOf() + options.workTimeout);\n      } else {\n        if (mods.$unset == null) {\n          mods.$unset = {};\n        }\n        mods.$unset.workTimeout = \"\";\n        mods.$unset.expiresAfter = \"\";\n      }\n      num = this.update({\n        _id: {\n          $in: ids\n        },\n        status: 'ready',\n        runId: null\n      }, mods, {\n        multi: true\n      });\n      if (num > 0) {\n        foundDocs = this.find({\n          _id: {\n            $in: ids\n          },\n          runId: runId\n        }, {\n          fields: {\n            log: 0,\n            failures: 0,\n            _private: 0\n          },\n          transform: null\n        }).fetch();\n        if ((foundDocs != null ? foundDocs.length : void 0) > 0) {\n          if (this.scrub != null) {\n            foundDocs = (function() {\n              var j, len, results;\n              results = [];\n              for (j = 0, len = foundDocs.length; j < len; j++) {\n                d = foundDocs[j];\n                results.push(this.scrub(d));\n              }\n              return results;\n            }).call(this);\n          }\n          check(docs, [_validJobDoc()]);\n          docs = docs.concat(foundDocs);\n        }\n      }\n    }\n    return docs;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobRemove = function(ids, options) {\n    var num;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({}));\n    if (options == null) {\n      options = {};\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    if (ids.length === 0) {\n      return false;\n    }\n    num = this.remove({\n      _id: {\n        $in: ids\n      },\n      status: {\n        $in: this.jobStatusRemovable\n      }\n    });\n    if (num > 0) {\n      return true;\n    } else {\n      console.warn(\"jobRemove failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobPause = function(ids, options) {\n    var logObj, mods, num, time;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({}));\n    if (options == null) {\n      options = {};\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    if (ids.length === 0) {\n      return false;\n    }\n    time = new Date();\n    mods = {\n      $set: {\n        status: \"paused\",\n        updated: time\n      }\n    };\n    if (logObj = this._logMessage.paused()) {\n      mods.$push = {\n        log: logObj\n      };\n    }\n    num = this.update({\n      _id: {\n        $in: ids\n      },\n      status: {\n        $in: this.jobStatusPausable\n      }\n    }, mods, {\n      multi: true\n    });\n    if (num > 0) {\n      return true;\n    } else {\n      console.warn(\"jobPause failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobResume = function(ids, options) {\n    var logObj, mods, num, time;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({}));\n    if (options == null) {\n      options = {};\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    if (ids.length === 0) {\n      return false;\n    }\n    time = new Date();\n    mods = {\n      $set: {\n        status: \"waiting\",\n        updated: time\n      }\n    };\n    if (logObj = this._logMessage.resumed()) {\n      mods.$push = {\n        log: logObj\n      };\n    }\n    num = this.update({\n      _id: {\n        $in: ids\n      },\n      status: \"paused\",\n      updated: {\n        $ne: time\n      }\n    }, mods, {\n      multi: true\n    });\n    if (num > 0) {\n      this._DDPMethod_jobReady(ids);\n      return true;\n    } else {\n      console.warn(\"jobResume failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobReady = function(ids, options) {\n    var l, logObj, mods, now, num, query;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({\n      force: Match.Optional(Boolean),\n      time: Match.Optional(Date)\n    }));\n    if (this.isSimulation) {\n      return;\n    }\n    now = new Date();\n    if (options == null) {\n      options = {};\n    }\n    if (options.force == null) {\n      options.force = false;\n    }\n    if (options.time == null) {\n      options.time = now;\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    query = {\n      status: \"waiting\",\n      after: {\n        $lte: options.time\n      }\n    };\n    mods = {\n      $set: {\n        status: \"ready\",\n        updated: now\n      }\n    };\n    if (ids.length > 0) {\n      query._id = {\n        $in: ids\n      };\n      mods.$set.after = now;\n    }\n    logObj = [];\n    if (options.force) {\n      mods.$set.depends = [];\n      l = this._logMessage.forced();\n      if (l) {\n        logObj.push(l);\n      }\n    } else {\n      query.depends = {\n        $size: 0\n      };\n    }\n    l = this._logMessage.readied();\n    if (l) {\n      logObj.push(l);\n    }\n    if (logObj.length > 0) {\n      mods.$push = {\n        log: {\n          $each: logObj\n        }\n      };\n    }\n    num = this.update(query, mods, {\n      multi: true\n    });\n    if (num > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobCancel = function(ids, options) {\n    var cancelIds, depsCancelled, logObj, mods, num, time;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({\n      antecedents: Match.Optional(Boolean),\n      dependents: Match.Optional(Boolean)\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.antecedents == null) {\n      options.antecedents = false;\n    }\n    if (options.dependents == null) {\n      options.dependents = true;\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    if (ids.length === 0) {\n      return false;\n    }\n    time = new Date();\n    mods = {\n      $set: {\n        status: \"cancelled\",\n        runId: null,\n        progress: {\n          completed: 0,\n          total: 1,\n          percent: 0\n        },\n        updated: time\n      }\n    };\n    if (logObj = this._logMessage.cancelled()) {\n      mods.$push = {\n        log: logObj\n      };\n    }\n    num = this.update({\n      _id: {\n        $in: ids\n      },\n      status: {\n        $in: this.jobStatusCancellable\n      }\n    }, mods, {\n      multi: true\n    });\n    cancelIds = this._idsOfDeps(ids, options.antecedents, options.dependents, this.jobStatusCancellable);\n    depsCancelled = false;\n    if (cancelIds.length > 0) {\n      depsCancelled = this._DDPMethod_jobCancel(cancelIds, options);\n    }\n    if (num > 0 || depsCancelled) {\n      return true;\n    } else {\n      console.warn(\"jobCancel failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobRestart = function(ids, options) {\n    var depsRestarted, logObj, mods, num, query, restartIds, time;\n    check(ids, Match.OneOf(Match.Where(_validId), [Match.Where(_validId)]));\n    check(options, Match.Optional({\n      retries: Match.Optional(Match.Where(_validIntGTEZero)),\n      until: Match.Optional(Date),\n      antecedents: Match.Optional(Boolean),\n      dependents: Match.Optional(Boolean)\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.retries == null) {\n      options.retries = 1;\n    }\n    if (options.retries > this.forever) {\n      options.retries = this.forever;\n    }\n    if (options.dependents == null) {\n      options.dependents = false;\n    }\n    if (options.antecedents == null) {\n      options.antecedents = true;\n    }\n    if (_validId(ids)) {\n      ids = [ids];\n    }\n    if (ids.length === 0) {\n      return false;\n    }\n    time = new Date();\n    query = {\n      _id: {\n        $in: ids\n      },\n      status: {\n        $in: this.jobStatusRestartable\n      }\n    };\n    mods = {\n      $set: {\n        status: \"waiting\",\n        progress: {\n          completed: 0,\n          total: 1,\n          percent: 0\n        },\n        updated: time\n      },\n      $inc: {\n        retries: options.retries\n      }\n    };\n    if (logObj = this._logMessage.restarted()) {\n      mods.$push = {\n        log: logObj\n      };\n    }\n    if (options.until != null) {\n      mods.$set.retryUntil = options.until;\n    }\n    num = this.update(query, mods, {\n      multi: true\n    });\n    restartIds = this._idsOfDeps(ids, options.antecedents, options.dependents, this.jobStatusRestartable);\n    depsRestarted = false;\n    if (restartIds.length > 0) {\n      depsRestarted = this._DDPMethod_jobRestart(restartIds, options);\n    }\n    if (num > 0 || depsRestarted) {\n      this._DDPMethod_jobReady(ids);\n      return true;\n    } else {\n      console.warn(\"jobRestart failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobSave = function(doc, options) {\n    var logObj, mods, newId, next, nextDate, num, ref, time;\n    check(doc, _validJobDoc());\n    check(options, Match.Optional({\n      cancelRepeats: Match.Optional(Boolean)\n    }));\n    check(doc.status, Match.Where(function(v) {\n      return Match.test(v, String) && (v === 'waiting' || v === 'paused');\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.cancelRepeats == null) {\n      options.cancelRepeats = false;\n    }\n    if (doc.repeats > this.forever) {\n      doc.repeats = this.forever;\n    }\n    if (doc.retries > this.forever) {\n      doc.retries = this.forever;\n    }\n    time = new Date();\n    if (doc.after < time) {\n      doc.after = time;\n    }\n    if (doc.retryUntil < time) {\n      doc.retryUntil = time;\n    }\n    if (doc.repeatUntil < time) {\n      doc.repeatUntil = time;\n    }\n    if ((this.later != null) && typeof doc.repeatWait !== 'number') {\n      if (!(next = (ref = this.later) != null ? ref.schedule(doc.repeatWait).next(1, doc.after) : void 0)) {\n        console.warn(\"No valid available later.js times in schedule after \" + doc.after);\n        return null;\n      }\n      nextDate = new Date(next);\n      if (!(nextDate <= doc.repeatUntil)) {\n        console.warn(\"No valid available later.js times in schedule before \" + doc.repeatUntil);\n        return null;\n      }\n      doc.after = nextDate;\n    } else if ((this.later == null) && doc.repeatWait !== 'number') {\n      console.warn(\"Later.js not loaded...\");\n      return null;\n    }\n    if (doc._id) {\n      mods = {\n        $set: {\n          status: 'waiting',\n          data: doc.data,\n          retries: doc.retries,\n          repeatRetries: doc.repeatRetries != null ? doc.repeatRetries : doc.retries + doc.retried,\n          retryUntil: doc.retryUntil,\n          retryWait: doc.retryWait,\n          retryBackoff: doc.retryBackoff,\n          repeats: doc.repeats,\n          repeatUntil: doc.repeatUntil,\n          repeatWait: doc.repeatWait,\n          depends: doc.depends,\n          priority: doc.priority,\n          after: doc.after,\n          updated: time\n        }\n      };\n      if (logObj = this._logMessage.resubmitted()) {\n        mods.$push = {\n          log: logObj\n        };\n      }\n      num = this.update({\n        _id: doc._id,\n        status: 'paused',\n        runId: null\n      }, mods);\n      if (num) {\n        this._DDPMethod_jobReady(doc._id);\n        return doc._id;\n      } else {\n        return null;\n      }\n    } else {\n      if (doc.repeats === this.forever && options.cancelRepeats) {\n        this.find({\n          type: doc.type,\n          status: {\n            $in: this.jobStatusCancellable\n          }\n        }, {\n          transform: null\n        }).forEach((function(_this) {\n          return function(d) {\n            return _this._DDPMethod_jobCancel(d._id, {});\n          };\n        })(this));\n      }\n      doc.created = time;\n      doc.log.push(this._logMessage.submitted());\n      newId = this.insert(doc);\n      this._DDPMethod_jobReady(newId);\n      return newId;\n    }\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobProgress = function(id, runId, completed, total, options) {\n    var job, mods, num, progress, time;\n    check(id, Match.Where(_validId));\n    check(runId, Match.Where(_validId));\n    check(completed, Match.Where(_validNumGTEZero));\n    check(total, Match.Where(_validNumGTZero));\n    check(options, Match.Optional({}));\n    if (options == null) {\n      options = {};\n    }\n    if (this.stopped) {\n      return null;\n    }\n    progress = {\n      completed: completed,\n      total: total,\n      percent: 100 * completed / total\n    };\n    check(progress, Match.Where(function(v) {\n      var ref;\n      return v.total >= v.completed && (0 <= (ref = v.percent) && ref <= 100);\n    }));\n    time = new Date();\n    job = this.findOne({\n      _id: id\n    }, {\n      fields: {\n        workTimeout: 1\n      }\n    });\n    mods = {\n      $set: {\n        progress: progress,\n        updated: time\n      }\n    };\n    if ((job != null ? job.workTimeout : void 0) != null) {\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout);\n    }\n    num = this.update({\n      _id: id,\n      runId: runId,\n      status: \"running\"\n    }, mods);\n    if (num === 1) {\n      return true;\n    } else {\n      console.warn(\"jobProgress failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobLog = function(id, runId, message, options) {\n    var job, logObj, mods, num, ref, time;\n    check(id, Match.Where(_validId));\n    check(runId, Match.OneOf(Match.Where(_validId), null));\n    check(message, String);\n    check(options, Match.Optional({\n      level: Match.Optional(Match.Where(_validLogLevel)),\n      data: Match.Optional(Object)\n    }));\n    if (options == null) {\n      options = {};\n    }\n    time = new Date();\n    logObj = {\n      time: time,\n      runId: runId,\n      level: (ref = options.level) != null ? ref : 'info',\n      message: message\n    };\n    if (options.data != null) {\n      logObj.data = options.data;\n    }\n    job = this.findOne({\n      _id: id\n    }, {\n      fields: {\n        status: 1,\n        workTimeout: 1\n      }\n    });\n    mods = {\n      $push: {\n        log: logObj\n      },\n      $set: {\n        updated: time\n      }\n    };\n    if (((job != null ? job.workTimeout : void 0) != null) && job.status === 'running') {\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout);\n    }\n    num = this.update({\n      _id: id\n    }, mods);\n    if (num === 1) {\n      return true;\n    } else {\n      console.warn(\"jobLog failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobRerun = function(id, options) {\n    var doc;\n    check(id, Match.Where(_validId));\n    check(options, Match.Optional({\n      repeats: Match.Optional(Match.Where(_validIntGTEZero)),\n      until: Match.Optional(Date),\n      wait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj))\n    }));\n    doc = this.findOne({\n      _id: id,\n      status: \"completed\"\n    }, {\n      fields: {\n        result: 0,\n        failures: 0,\n        log: 0,\n        progress: 0,\n        updated: 0,\n        after: 0,\n        status: 0\n      },\n      transform: null\n    });\n    if (doc != null) {\n      if (options == null) {\n        options = {};\n      }\n      if (options.repeats == null) {\n        options.repeats = 0;\n      }\n      if (options.repeats > this.forever) {\n        options.repeats = this.forever;\n      }\n      if (options.until == null) {\n        options.until = doc.repeatUntil;\n      }\n      if (options.wait == null) {\n        options.wait = 0;\n      }\n      return this._rerun_job(doc, options.repeats, options.wait, options.until);\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobDone = function(id, runId, result, options) {\n    var after, d, doc, ids, jobId, logObj, mods, n, next, num, ref, time, wait;\n    check(id, Match.Where(_validId));\n    check(runId, Match.Where(_validId));\n    check(result, Object);\n    check(options, Match.Optional({\n      repeatId: Match.Optional(Boolean),\n      delayDeps: Match.Optional(Match.Where(_validIntGTEZero))\n    }));\n    if (options == null) {\n      options = {\n        repeatId: false\n      };\n    }\n    time = new Date();\n    doc = this.findOne({\n      _id: id,\n      runId: runId,\n      status: \"running\"\n    }, {\n      fields: {\n        log: 0,\n        failures: 0,\n        progress: 0,\n        updated: 0,\n        after: 0,\n        status: 0\n      },\n      transform: null\n    });\n    if (doc == null) {\n      if (!this.isSimulation) {\n        console.warn(\"Running job not found\", id, runId);\n      }\n      return false;\n    }\n    mods = {\n      $set: {\n        status: \"completed\",\n        result: result,\n        progress: {\n          completed: 1,\n          total: 1,\n          percent: 100\n        },\n        updated: time\n      }\n    };\n    if (logObj = this._logMessage.completed(runId)) {\n      mods.$push = {\n        log: logObj\n      };\n    }\n    num = this.update({\n      _id: id,\n      runId: runId,\n      status: \"running\"\n    }, mods);\n    if (num === 1) {\n      if (doc.repeats > 0) {\n        if (typeof doc.repeatWait === 'number') {\n          if (doc.repeatUntil - doc.repeatWait >= time) {\n            jobId = this._rerun_job(doc);\n          }\n        } else {\n          next = (ref = this.later) != null ? ref.schedule(doc.repeatWait).next(2) : void 0;\n          if (next && next.length > 0) {\n            d = new Date(next[0]);\n            if ((d - time > 500) || (next.length > 1)) {\n              if (d - time <= 500) {\n                d = new Date(next[1]);\n              } else {\n\n              }\n              wait = d - time;\n              if (doc.repeatUntil - wait >= time) {\n                jobId = this._rerun_job(doc, doc.repeats - 1, wait);\n              }\n            }\n          }\n        }\n      }\n      ids = this.find({\n        depends: {\n          $all: [id]\n        }\n      }, {\n        transform: null,\n        fields: {\n          _id: 1\n        }\n      }).fetch().map((function(_this) {\n        return function(d) {\n          return d._id;\n        };\n      })(this));\n      if (ids.length > 0) {\n        mods = {\n          $pull: {\n            depends: id\n          },\n          $push: {\n            resolved: id\n          }\n        };\n        if (options.delayDeps != null) {\n          after = new Date(time.valueOf() + options.delayDeps);\n          mods.$max = {\n            after: after\n          };\n        }\n        if (logObj = this._logMessage.resolved(id, runId)) {\n          mods.$push.log = logObj;\n        }\n        n = this.update({\n          _id: {\n            $in: ids\n          }\n        }, mods, {\n          multi: true\n        });\n        if (n !== ids.length) {\n          console.warn(\"Not all dependent jobs were resolved \" + ids.length + \" > \" + n);\n        }\n        this._DDPMethod_jobReady(ids);\n      }\n      if (options.repeatId && (jobId != null)) {\n        return jobId;\n      } else {\n        return true;\n      }\n    } else {\n      console.warn(\"jobDone failed\");\n    }\n    return false;\n  };\n\n  JobCollectionBase.prototype._DDPMethod_jobFail = function(id, runId, err, options) {\n    var after, doc, logObj, mods, newStatus, num, time;\n    check(id, Match.Where(_validId));\n    check(runId, Match.Where(_validId));\n    check(err, Object);\n    check(options, Match.Optional({\n      fatal: Match.Optional(Boolean)\n    }));\n    if (options == null) {\n      options = {};\n    }\n    if (options.fatal == null) {\n      options.fatal = false;\n    }\n    time = new Date();\n    doc = this.findOne({\n      _id: id,\n      runId: runId,\n      status: \"running\"\n    }, {\n      fields: {\n        log: 0,\n        failures: 0,\n        progress: 0,\n        updated: 0,\n        after: 0,\n        runId: 0,\n        status: 0\n      },\n      transform: null\n    });\n    if (doc == null) {\n      if (!this.isSimulation) {\n        console.warn(\"Running job not found\", id, runId);\n      }\n      return false;\n    }\n    after = (function() {\n      switch (doc.retryBackoff) {\n        case 'exponential':\n          return new Date(time.valueOf() + doc.retryWait * Math.pow(2, doc.retried - 1));\n        default:\n          return new Date(time.valueOf() + doc.retryWait);\n      }\n    })();\n    newStatus = !options.fatal && doc.retries > 0 && doc.retryUntil >= after ? \"waiting\" : \"failed\";\n    err.runId = runId;\n    mods = {\n      $set: {\n        status: newStatus,\n        runId: null,\n        after: after,\n        progress: {\n          completed: 0,\n          total: 1,\n          percent: 0\n        },\n        updated: time\n      },\n      $push: {\n        failures: err\n      }\n    };\n    if (logObj = this._logMessage.failed(runId, newStatus === 'failed', err)) {\n      mods.$push.log = logObj;\n    }\n    num = this.update({\n      _id: id,\n      runId: runId,\n      status: \"running\"\n    }, mods);\n    if (newStatus === \"failed\" && num === 1) {\n      this.find({\n        depends: {\n          $all: [id]\n        }\n      }, {\n        transform: null\n      }).forEach((function(_this) {\n        return function(d) {\n          return _this._DDPMethod_jobCancel(d._id);\n        };\n      })(this));\n    }\n    if (num === 1) {\n      return true;\n    } else {\n      console.warn(\"jobFail failed\");\n    }\n    return false;\n  };\n\n  return JobCollectionBase;\n\n})(Mongo.Collection);\n\nshare.JobCollectionBase = JobCollectionBase;\n","############################################################################\n#     Copyright (C) 2014-2016 by Vaughn Iverson\n#     job-collection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isServer\n\n  eventEmitter = Npm.require('events').EventEmitter\n\n  userHelper = (user, connection) ->\n    ret = user ? \"[UNAUTHENTICATED]\"\n    unless connection\n      ret = \"[SERVER]\"\n    ret\n\n  ################################################################\n  ## job-collection server class\n\n  class JobCollection extends share.JobCollectionBase\n\n    constructor: (root = 'queue', options = {}) ->\n      unless @ instanceof JobCollection\n        return new JobCollection(root, options)\n\n      # Call super's constructor\n      super root, options\n\n      @events = new eventEmitter()\n\n      @_errorListener = @events.on 'error', @_onError\n\n      # Add events for all individual successful DDP methods\n      @_methodErrorDispatch = @events.on 'error', (msg) =>\n        @events.emit msg.method, msg\n\n      @_callListener = @events.on 'call', @_onCall\n\n      # Add events for all individual successful DDP methods\n      @_methodEventDispatch = @events.on 'call', (msg) =>\n        @events.emit msg.method, msg\n\n      @stopped = true\n\n      # No client mutators allowed\n      share.JobCollectionBase.__super__.deny.bind(@)\n        update: () => true\n        insert: () => true\n        remove: () => true\n\n      @promote()\n\n      @logStream = null\n\n      @allows = {}\n      @denys = {}\n\n      # Initialize allow/deny lists for permission levels and ddp methods\n      for level in @ddpPermissionLevels.concat @ddpMethods\n        @allows[level] = []\n        @denys[level] = []\n\n      # If a connection option is given, then this JobCollection is actually hosted\n      # remotely, so don't establish local and remotely callable server methods in that case\n      unless options.connection?\n        # Default indexes, only when not remotely connected!\n        @_ensureIndex { type : 1, status : 1 }\n        @_ensureIndex { priority : 1, retryUntil : 1, after : 1 }\n        @isSimulation = false\n        localMethods = @_generateMethods()\n        @_localServerMethods ?= {}\n        @_localServerMethods[methodName] = methodFunction for methodName, methodFunction of localMethods\n        foo = this\n        @_ddp_apply = (name, params, cb) =>\n          if cb?\n            Meteor.setTimeout (() =>\n              err = null\n              res = null\n              try\n                res = @_localServerMethods[name].apply(this, params)\n              catch e\n                err = e\n              cb err, res), 0\n          else\n            @_localServerMethods[name].apply(this, params)\n\n        Job._setDDPApply @_ddp_apply, root\n\n        Meteor.methods localMethods\n\n    _onError: (msg) =>\n      user = userHelper msg.userId, msg.connection\n      @_toLog user, msg.method, \"#{msg.error}\"\n\n    _onCall: (msg) =>\n      user = userHelper msg.userId, msg.connection\n      @_toLog user, msg.method, \"params: \" + JSON.stringify(msg.params)\n      @_toLog user, msg.method, \"returned: \" + JSON.stringify(msg.returnVal)\n\n    _toLog: (userId, method, message) =>\n      @logStream?.write \"#{new Date()}, #{userId}, #{method}, #{message}\\n\"\n      # process.stdout.write \"#{new Date()}, #{userId}, #{method}, #{message}\\n\"\n\n    _emit: (method, connection, userId, err, ret, params...) =>\n      if err\n        @events.emit 'error',\n          error: err\n          method: method\n          connection: connection\n          userId: userId\n          params: params\n          returnVal: null\n      else\n        @events.emit 'call',\n          error: null\n          method: method\n          connection: connection\n          userId: userId\n          params: params\n          returnVal: ret\n\n    _methodWrapper: (method, func) ->\n      self = this\n      myTypeof = (val) ->\n        type = typeof val\n        type = 'array' if type is 'object' and type instanceof Array\n        return type\n      permitted = (userId, params) =>\n        performTest = (tests) =>\n          result = false\n          for test in tests when result is false\n            result = result or switch myTypeof(test)\n              when 'array' then userId in test\n              when 'function' then test(userId, method, params)\n              else false\n          return result\n        performAllTests = (allTests) =>\n          result = false\n          for t in @ddpMethodPermissions[method] when result is false\n            result = result or performTest(allTests[t])\n          return result\n        return not performAllTests(@denys) and performAllTests(@allows)\n      # Return the wrapper function that the Meteor method will actually invoke\n      return (params...) ->\n        try\n          unless this.connection and not permitted(this.userId, params)\n            retval = func(params...)\n          else\n            err = new Meteor.Error 403, \"Method not authorized\", \"Authenticated user is not permitted to invoke this method.\"\n            throw err\n        catch err\n          self._emit method, this.connection, this.userId, err\n          throw err\n        self._emit method, this.connection, this.userId, null, retval, params...\n        return retval\n\n    setLogStream: (writeStream = null) ->\n      if @logStream\n        throw new Error \"logStream may only be set once per job-collection startup/shutdown cycle\"\n      @logStream = writeStream\n      unless not @logStream? or\n             @logStream.write? and\n             typeof @logStream.write is 'function' and\n             @logStream.end? and\n             typeof @logStream.end is 'function'\n        throw new Error \"logStream must be a valid writable node.js Stream\"\n\n    # Register application allow rules\n    allow: (allowOptions) ->\n      @allows[type].push(func) for type, func of allowOptions when type of @allows\n\n    # Register application deny rules\n    deny: (denyOptions) ->\n      @denys[type].push(func) for type, func of denyOptions when type of @denys\n\n    # Hook function to sanitize documents before validating them in getWork() and getJob()\n    scrub: (job) ->\n      job\n\n    promote: (milliseconds = 15*1000) ->\n      if typeof milliseconds is 'number' and milliseconds > 0\n        if @interval\n          Meteor.clearInterval @interval\n        @_promote_jobs()\n        @interval = Meteor.setInterval @_promote_jobs.bind(@), milliseconds\n      else\n        console.warn \"jobCollection.promote: invalid timeout: #{@root}, #{milliseconds}\"\n\n    _promote_jobs: (ids = []) ->\n      if @stopped\n        return\n      # This looks for zombie running jobs and autofails them\n      @find({status: 'running', expiresAfter: { $lt: new Date() }})\n        .forEach (job) =>\n          new Job(@root, job).fail(\"Failed for exceeding worker set workTimeout\");\n      # Change jobs from waiting to ready when their time has come\n      # and dependencies have been satisfied\n      @readyJobs()\n","var eventEmitter, userHelper,               \n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty,\n  slice = [].slice,\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nif (Meteor.isServer) {\n  eventEmitter = Npm.require('events').EventEmitter;\n  userHelper = function(user, connection) {\n    var ret;\n    ret = user != null ? user : \"[UNAUTHENTICATED]\";\n    if (!connection) {\n      ret = \"[SERVER]\";\n    }\n    return ret;\n  };\n  JobCollection = (function(superClass) {\n    extend(JobCollection, superClass);\n\n    function JobCollection(root, options) {\n      var foo, i, len, level, localMethods, methodFunction, methodName, ref;\n      if (root == null) {\n        root = 'queue';\n      }\n      if (options == null) {\n        options = {};\n      }\n      this._emit = bind(this._emit, this);\n      this._toLog = bind(this._toLog, this);\n      this._onCall = bind(this._onCall, this);\n      this._onError = bind(this._onError, this);\n      if (!(this instanceof JobCollection)) {\n        return new JobCollection(root, options);\n      }\n      JobCollection.__super__.constructor.call(this, root, options);\n      this.events = new eventEmitter();\n      this._errorListener = this.events.on('error', this._onError);\n      this._methodErrorDispatch = this.events.on('error', (function(_this) {\n        return function(msg) {\n          return _this.events.emit(msg.method, msg);\n        };\n      })(this));\n      this._callListener = this.events.on('call', this._onCall);\n      this._methodEventDispatch = this.events.on('call', (function(_this) {\n        return function(msg) {\n          return _this.events.emit(msg.method, msg);\n        };\n      })(this));\n      this.stopped = true;\n      share.JobCollectionBase.__super__.deny.bind(this)({\n        update: (function(_this) {\n          return function() {\n            return true;\n          };\n        })(this),\n        insert: (function(_this) {\n          return function() {\n            return true;\n          };\n        })(this),\n        remove: (function(_this) {\n          return function() {\n            return true;\n          };\n        })(this)\n      });\n      this.promote();\n      this.logStream = null;\n      this.allows = {};\n      this.denys = {};\n      ref = this.ddpPermissionLevels.concat(this.ddpMethods);\n      for (i = 0, len = ref.length; i < len; i++) {\n        level = ref[i];\n        this.allows[level] = [];\n        this.denys[level] = [];\n      }\n      if (options.connection == null) {\n        this._ensureIndex({\n          type: 1,\n          status: 1\n        });\n        this._ensureIndex({\n          priority: 1,\n          retryUntil: 1,\n          after: 1\n        });\n        this.isSimulation = false;\n        localMethods = this._generateMethods();\n        if (this._localServerMethods == null) {\n          this._localServerMethods = {};\n        }\n        for (methodName in localMethods) {\n          methodFunction = localMethods[methodName];\n          this._localServerMethods[methodName] = methodFunction;\n        }\n        foo = this;\n        this._ddp_apply = (function(_this) {\n          return function(name, params, cb) {\n            if (cb != null) {\n              return Meteor.setTimeout((function() {\n                var e, err, res;\n                err = null;\n                res = null;\n                try {\n                  res = _this._localServerMethods[name].apply(_this, params);\n                } catch (error) {\n                  e = error;\n                  err = e;\n                }\n                return cb(err, res);\n              }), 0);\n            } else {\n              return _this._localServerMethods[name].apply(_this, params);\n            }\n          };\n        })(this);\n        Job._setDDPApply(this._ddp_apply, root);\n        Meteor.methods(localMethods);\n      }\n    }\n\n    JobCollection.prototype._onError = function(msg) {\n      var user;\n      user = userHelper(msg.userId, msg.connection);\n      return this._toLog(user, msg.method, \"\" + msg.error);\n    };\n\n    JobCollection.prototype._onCall = function(msg) {\n      var user;\n      user = userHelper(msg.userId, msg.connection);\n      this._toLog(user, msg.method, \"params: \" + JSON.stringify(msg.params));\n      return this._toLog(user, msg.method, \"returned: \" + JSON.stringify(msg.returnVal));\n    };\n\n    JobCollection.prototype._toLog = function(userId, method, message) {\n      var ref;\n      return (ref = this.logStream) != null ? ref.write((new Date()) + \", \" + userId + \", \" + method + \", \" + message + \"\\n\") : void 0;\n    };\n\n    JobCollection.prototype._emit = function() {\n      var connection, err, method, params, ret, userId;\n      method = arguments[0], connection = arguments[1], userId = arguments[2], err = arguments[3], ret = arguments[4], params = 6 <= arguments.length ? slice.call(arguments, 5) : [];\n      if (err) {\n        return this.events.emit('error', {\n          error: err,\n          method: method,\n          connection: connection,\n          userId: userId,\n          params: params,\n          returnVal: null\n        });\n      } else {\n        return this.events.emit('call', {\n          error: null,\n          method: method,\n          connection: connection,\n          userId: userId,\n          params: params,\n          returnVal: ret\n        });\n      }\n    };\n\n    JobCollection.prototype._methodWrapper = function(method, func) {\n      var myTypeof, permitted, self;\n      self = this;\n      myTypeof = function(val) {\n        var type;\n        type = typeof val;\n        if (type === 'object' && type instanceof Array) {\n          type = 'array';\n        }\n        return type;\n      };\n      permitted = (function(_this) {\n        return function(userId, params) {\n          var performAllTests, performTest;\n          performTest = function(tests) {\n            var i, len, result, test;\n            result = false;\n            for (i = 0, len = tests.length; i < len; i++) {\n              test = tests[i];\n              if (result === false) {\n                result = result || (function() {\n                  switch (myTypeof(test)) {\n                    case 'array':\n                      return indexOf.call(test, userId) >= 0;\n                    case 'function':\n                      return test(userId, method, params);\n                    default:\n                      return false;\n                  }\n                })();\n              }\n            }\n            return result;\n          };\n          performAllTests = function(allTests) {\n            var i, len, ref, result, t;\n            result = false;\n            ref = _this.ddpMethodPermissions[method];\n            for (i = 0, len = ref.length; i < len; i++) {\n              t = ref[i];\n              if (result === false) {\n                result = result || performTest(allTests[t]);\n              }\n            }\n            return result;\n          };\n          return !performAllTests(_this.denys) && performAllTests(_this.allows);\n        };\n      })(this);\n      return function() {\n        var err, params, retval;\n        params = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        try {\n          if (!(this.connection && !permitted(this.userId, params))) {\n            retval = func.apply(null, params);\n          } else {\n            err = new Meteor.Error(403, \"Method not authorized\", \"Authenticated user is not permitted to invoke this method.\");\n            throw err;\n          }\n        } catch (error) {\n          err = error;\n          self._emit(method, this.connection, this.userId, err);\n          throw err;\n        }\n        self._emit.apply(self, [method, this.connection, this.userId, null, retval].concat(slice.call(params)));\n        return retval;\n      };\n    };\n\n    JobCollection.prototype.setLogStream = function(writeStream) {\n      if (writeStream == null) {\n        writeStream = null;\n      }\n      if (this.logStream) {\n        throw new Error(\"logStream may only be set once per job-collection startup/shutdown cycle\");\n      }\n      this.logStream = writeStream;\n      if (!((this.logStream == null) || (this.logStream.write != null) && typeof this.logStream.write === 'function' && (this.logStream.end != null) && typeof this.logStream.end === 'function')) {\n        throw new Error(\"logStream must be a valid writable node.js Stream\");\n      }\n    };\n\n    JobCollection.prototype.allow = function(allowOptions) {\n      var func, results, type;\n      results = [];\n      for (type in allowOptions) {\n        func = allowOptions[type];\n        if (type in this.allows) {\n          results.push(this.allows[type].push(func));\n        }\n      }\n      return results;\n    };\n\n    JobCollection.prototype.deny = function(denyOptions) {\n      var func, results, type;\n      results = [];\n      for (type in denyOptions) {\n        func = denyOptions[type];\n        if (type in this.denys) {\n          results.push(this.denys[type].push(func));\n        }\n      }\n      return results;\n    };\n\n    JobCollection.prototype.scrub = function(job) {\n      return job;\n    };\n\n    JobCollection.prototype.promote = function(milliseconds) {\n      if (milliseconds == null) {\n        milliseconds = 15 * 1000;\n      }\n      if (typeof milliseconds === 'number' && milliseconds > 0) {\n        if (this.interval) {\n          Meteor.clearInterval(this.interval);\n        }\n        this._promote_jobs();\n        return this.interval = Meteor.setInterval(this._promote_jobs.bind(this), milliseconds);\n      } else {\n        return console.warn(\"jobCollection.promote: invalid timeout: \" + this.root + \", \" + milliseconds);\n      }\n    };\n\n    JobCollection.prototype._promote_jobs = function(ids) {\n      if (ids == null) {\n        ids = [];\n      }\n      if (this.stopped) {\n        return;\n      }\n      this.find({\n        status: 'running',\n        expiresAfter: {\n          $lt: new Date()\n        }\n      }).forEach((function(_this) {\n        return function(job) {\n          return new Job(_this.root, job).fail(\"Failed for exceeding worker set workTimeout\");\n        };\n      })(this));\n      return this.readyJobs();\n    };\n\n    return JobCollection;\n\n  })(share.JobCollectionBase);\n}\n"]}}]