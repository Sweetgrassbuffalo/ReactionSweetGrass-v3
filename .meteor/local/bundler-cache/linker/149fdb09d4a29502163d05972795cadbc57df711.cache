[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar CryptoJS = Package['jparker:crypto-core'].CryptoJS;\n\n/* Package-scope variables */\nvar Gravatar;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/jparker_gravatar/gravatar.js                                        //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n/* global CryptoJS, _ */                                                        // 1\n                                                                                // 2\nGravatar = { // eslint-disable-line no-undef                                    // 3\n  /**                                                                           // 4\n   * `cleantString` remove starting and trailing whitespaces                    // 5\n   * and lowercase the input                                                    // 6\n   * @param  {String} string input string that may contain leading and trailing\n   * whitespaces and uppercase letters                                          // 8\n   * @return {String}        output cleaned string                              // 9\n   */                                                                           // 10\n  cleanString: function (string) {                                              // 11\n    return string.trim().toLowerCase()                                          // 12\n  },                                                                            // 13\n                                                                                // 14\n  /**                                                                           // 15\n   * `isHash` check if a string match the MD5 form :                            // 16\n   * 32 chars string containing letters from `a` to `f`                         // 17\n   * and digits from `0` to `9`                                                 // 18\n   * @param  {String}  string that might be a hash                              // 19\n   * @return {Boolean}                                                          // 20\n   */                                                                           // 21\n  isHash: function (string) {                                                   // 22\n    var self = this                                                             // 23\n    return /^[a-f0-9]{32}$/i.test(self.cleanString(string))                     // 24\n  },                                                                            // 25\n                                                                                // 26\n  /**                                                                           // 27\n   * `hash` takes an input and run it through `CryptoJS.MD5`                    // 28\n   * @see https://atmospherejs.com/jparker/crypto-md5                           // 29\n   * @param  {String} string input string                                       // 30\n   * @return {String}        md5 hash of the input                              // 31\n   */                                                                           // 32\n  hash: function (string) {                                                     // 33\n    var self = this                                                             // 34\n    return CryptoJS.MD5(self.cleanString(string)).toString()                    // 35\n  },                                                                            // 36\n                                                                                // 37\n  /**                                                                           // 38\n   * `imageUrl` will provide the url for the avatar, given an email or a hash   // 39\n   * and a set of options to be passed to the gravatar API                      // 40\n   * @see https://en.gravatar.com/site/implement/images/                        // 41\n   * @param  {String} emailOrHash email or pregenerated MD5 hash to query       // 42\n   * gravatar with.                                                             // 43\n   * @param  {Object} options     options to be passed to gravatar in the query\n   * string. The `secure` will be used to determine which base url to use.      // 45\n   * @return {String}             complete url to the avatar                    // 46\n   */                                                                           // 47\n  imageUrl: function (emailOrHash, options) {                                   // 48\n    var self = this                                                             // 49\n    options = options || {}                                                     // 50\n                                                                                // 51\n    // Want HTTPS ?                                                             // 52\n    var url = options.secure                                                    // 53\n    ? 'https://secure.gravatar.com/avatar/'                                     // 54\n    : 'http://www.gravatar.com/avatar/'                                         // 55\n    delete options.secure                                                       // 56\n                                                                                // 57\n    // Is it an MD5 already ?                                                   // 58\n    url += self.isHash(emailOrHash)                                             // 59\n    ? emailOrHash                                                               // 60\n    : self.hash(emailOrHash)                                                    // 61\n                                                                                // 62\n    // Have any options to pass ?                                               // 63\n    var params = _.map(options, function (val, key) {                           // 64\n      return key + '=' + encodeURIComponent(val)                                // 65\n    }).join('&')                                                                // 66\n                                                                                // 67\n    return (params.length > 0)                                                  // 68\n    ? url + '?' + params                                                        // 69\n    : url                                                                       // 70\n  }                                                                             // 71\n}                                                                               // 72\n                                                                                // 73\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['jparker:gravatar'] = {}, {\n  Gravatar: Gravatar\n});\n\n})();\n","servePath":"/packages/jparker_gravatar.js"}]