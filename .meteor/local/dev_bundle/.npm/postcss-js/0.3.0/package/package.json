{"name":"postcss-js","version":"0.3.0","description":"PostCSS for React Inline Styles, Radium, Free Style and other CSS-in-JS","keywords":["postcss","postcss-runner","js","inline","react","css"],"author":{"name":"Andrey Sitnik","email":"andrey@sitnik.ru"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/postcss/postcss-js.git"},"dependencies":{"camelcase-css":"^1.0.1","postcss":"^5.2.14"},"devDependencies":{"eslint":"^3.15.0","eslint-config-postcss":"^2.0.2","jest":"^18.1.0","lint-staged":"^3.3.1","pre-commit":"^1.2.2"},"scripts":{"lint-staged":"lint-staged","test":"jest --coverage && eslint *.js test/*.js"},"lint-staged":{"*.js":"eslint"},"pre-commit":["lint-staged"],"jest":{"coverageThreshold":{"global":{"statements":100}}},"eslintConfig":{"extends":"eslint-config-postcss/es5","rules":{"no-use-before-define":"off","quote-props":"off"},"env":{"jest":true}},"readme":"# PostCSS JS [![Build Status][ci-img]][ci]\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     title=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo.svg\">\n\n[PostCSS] for React Inline Styles, Radium, [Free Style] and other CSS-in-JS.\n\nFor example, to use [Autoprefixer], [RTLCSS] or [postcss-write-svg] plugins\nin your workflow.\n\n[postcss-write-svg]: https://github.com/jonathantneal/postcss-write-svg\n[Autoprefixer]:      https://github.com/postcss/autoprefixer\n[Free Style]:        https://github.com/blakeembrey/free-style\n[PostCSS]:           https://github.com/postcss/postcss\n[RTLCSS]:            https://github.com/MohammadYounes/rtlcss\n[ci-img]:            https://travis-ci.org/postcss/postcss-js.svg\n[ci]:                https://travis-ci.org/postcss/postcss-js\n\n## Usage\n\n### Processing\n\n```js\nlet prefixer = postcssJs.sync([ autoprefixer ]);\n\nlet style = prefixer({\n    display: 'flex'\n});\n\nstyle //=> { display: ['-webkit-box', '-webkit-flex', '-ms-flexbox', 'flex'] }\n```\n\n### Compile CSS-in-JS to CSS\n\n```js\nlet style = {\n    top: 10,\n    '&:hover': {\n        top: 5\n    }\n};\n\npostcss().process(style, { parser: postcssJs }).then( (result) => {\n    result.css //=> top: 10px;\n               //   &:hover { top: 5px; }\n})\n```\n\n### Compile CSS to CSS-in-JS\n\n```js\nlet css  = '@media screen { z-index: 1 }'\nlet root = postcss.parse(css);\n\npostcssJs.objectify(root) //=> { '@media screen': { zIndex: '1' } }\n```\n\n## API\n\n### `sync(plugins): function`\n\nCreate PostCSS processor with simple API, but with only sync PostCSS plugins\nsupport.\n\nProcessor is just a function, which takes one style object and return other.\n\n### `async(plugins): function`\n\nSame as `sync`, but also support async plugins.\n\nReturned processor will return Promise.\n\n### `parse(obj): Root`\n\nParse CSS-in-JS style object to PostCSS `Root` instance.\n\nIt converts numbers to pixels and parses\n[Free Style] like selectors and at-rules:\n\n```js\n{\n    '@media screen': {\n        '&:hover': {\n            top: 10\n        }\n    }\n}\n```\n\nThis methods use Custom Syntax name convention, so you can use it like this:\n\n```js\npostcss().process(obj, { parser: postcssJs })\n```\n\n### `objectify(root): object`\n\nConvert PostCSS `Root` instance to CSS-in-JS style object.\n\n## Troubleshoot\n\nWebpack may need some extra config for some PostCSS plugins.\n\n### `Module parse failed`\n\nAutoprefixer and some other plugins\nneed a [json-loader](https://github.com/webpack/json-loader) to import data.\n\nSo, please install this loader and add to webpack config:\n\n```js\nloaders: [\n    {\n        test: /\\.json$/,\n        loader: \"json-loader\"\n    }\n]\n```\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/postcss/postcss-js/issues"},"homepage":"https://github.com/postcss/postcss-js#readme","_id":"postcss-js@0.3.0","_shasum":"a5b690e24e7697d94eb293104da0f8e5cc10adf7","_resolved":"https://registry.npmjs.org/postcss-js/-/postcss-js-0.3.0.tgz","_from":"https://registry.npmjs.org/postcss-js/-/postcss-js-0.3.0.tgz"}