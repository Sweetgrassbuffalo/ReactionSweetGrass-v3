{"name":"flatten-obj","version":"3.1.0","description":"Converts an object literal with deeply nested nodes to a simple key/value object","main":"index.js","scripts":{"test":"standard && node test.js"},"keywords":["mongo","mongodb","flatten","compound","keys","update","flatten","nested","dot"],"author":{"name":"Thomas Watson Steen","email":"w@tson.dk"},"license":"MIT","dependencies":{"isobj":"^1.0.0"},"devDependencies":{"standard":"^8.1.0","tape":"^4.6.0"},"repository":{"type":"git","url":"git+https://github.com/watson/flatten-obj.git"},"bugs":{"url":"https://github.com/watson/flatten-obj/issues"},"homepage":"https://github.com/watson/flatten-obj","coordinates":[41.3264557,-72.91879039999999],"readme":"# flatten-obj\n\nConverts an object literal with deeply nested nodes to a simple\nkey/value object. In other words converts this:\n\n```js\n{\n  foo: 1,\n  bar: {\n    sub1: 2,\n    sub2: {\n      sub3: 3\n    }\n  }\n}\n```\n\nTo this:\n\n```js\n{\n  foo: 1,\n  'bar.sub1': 2,\n  'bar.sub2.sub3': 3\n}\n```\n\n[![Build Status](https://travis-ci.org/watson/flatten-obj.png)](https://travis-ci.org/watson/flatten-obj)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\n## Installation\n\n```\nnpm install flatten-obj\n```\n\n## Usage\n\n```js\nvar flatten = require('flatten-obj')()\n\nvar obj = {\n  foo: {\n    bar: 1\n  }\n}\n\n// outputs `{ 'foo.bar': 1 }`\nconsole.log(flatten(obj))\n```\n\n### Blacklist\n\nSome objects migth seem like object literals, but shouldn't be\nflattened. To avoid this, you can supply a list of classes that\nshouldn't be flattened when the object is traversed:\n\n```js\nvar Klass = function () {\n  this.baz = 1\n}\n\nvar flatten = require('flatten-obj')({ blacklist: [Klass] })\n\nvar obj = {\n  foo: {\n    bar: new Klass()\n  }\n}\n\n// outputs `{ 'foo.bar': { baz: 1 } }`\nconsole.log(flatten(obj))\n```\n\n### Custom separator\n\nYou can use a custom separator character to join keys:\n\n```js\nvar flatten = require('flatten-obj')({ separator: '/' })\n\nvar obj = {\n  foo: {\n    bar: 42\n  }\n}\n\n// outputs `{ 'foo/bar': 42 }`\nconsole.log(flatten(obj))\n```\n\n### Leafs\n\nOnly return the leaf nodes\n\n```js\nvar flatten = require('flatten-obj')({ onlyLeafs: true })\n\nvar obj = {\n  sub: {\n    foo: 1,\n    bar: {\n      baz: 2\n    }\n  }\n}\n\n// outputs `{ foo: 1, baz: 2 }`\nconsole.log(flatten(obj))\n```\n\n## Gotchas\n\n### MongoDB data types\n\nMongoDB data types like `ObjectId` or `Timestamp` looks like regular\nobject literals and should be handled with care. So you would normally\nwant to add those to the blacklist:\n\n```js\nvar mongodb = require('mongodb')\nvar flatten = require('flatten-obj')({ blacklist: [\n  mongodb.ObjectID,\n  mongodb.DBRef,\n  mongodb.Timestamp,\n  mongodb.MinKey,\n  mongodb.MaxKey,\n  mongodb.Long\n]})\n```\n\n### Arrays\n\nThis module currenly leaves arrays and their content in place. I.e. the\nkeys `foo` and `bar` in the following object isn't modified:\n\n```js\n{\n  foo: [1, 2, 3],\n  bar: [{ foo: 1 }, { bar: 2 }]\n}\n```\n\nIf you are familiar with MongoDB you know though that it's possible to\nupdate single elements of an array using the dot-notation-syntax.\n\nOpen a pull request or tell me about your use case if you'd like the\nabove object to be converted to:\n\n```js\n{\n  foo: [1, 2, 3],\n  'bar.0.foo': 1,\n  'bar.1.bar': 2\n}\n```\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"flatten-obj@3.1.0","_shasum":"54aa27d147f37891c642103b8caa8d63e48f13ed","_resolved":"https://registry.npmjs.org/flatten-obj/-/flatten-obj-3.1.0.tgz","_from":"https://registry.npmjs.org/flatten-obj/-/flatten-obj-3.1.0.tgz"}